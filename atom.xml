<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>✨Fsn✨</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fengshana.github.io/"/>
  <updated>2020-05-30T17:36:32.249Z</updated>
  <id>https://fengshana.github.io/</id>
  
  <author>
    <name>Fsn✨🧙‍♀️✨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>全面深入讲解MySQL数据库优化04</title>
    <link href="https://fengshana.github.io/2020/05/29/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%9604/"/>
    <id>https://fengshana.github.io/2020/05/29/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%9604/</id>
    <published>2020-05-29T11:28:46.073Z</published>
    <updated>2020-05-30T17:36:32.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;seid=13531213796559959972" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;seid=13531213796559959972</a>  </p><p>本课程作为MySQL高级课程，主要讲解了：  </p><ul><li><strong>MySQL</strong>中的<strong>视图</strong>/<strong>存储过程</strong>/<strong>触发器</strong>/<strong>索引</strong>等对象的使用</li><li>常见的<strong>SQL</strong>语句<strong>优化</strong>的技巧</li><li><strong>应用优化</strong></li><li><strong>数据库优化</strong></li><li><strong>数据库日志</strong></li></ul><p>等方面的知识，并通过综合案例，对课程中的知识进行一个整合应用。  </p><p>本课程旨在通过MySQl高级部分内容，可以在满足现有业务需求基础上，对<strong>MySQL底层的体系结构</strong>，及<strong>底层的优化</strong>有一个深入的理解，对<strong>系统的整体性能</strong>进行提升。  </p><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><h2 id="常用工具-mysql"><a href="#常用工具-mysql" class="headerlink" title="常用工具 - mysql"></a>常用工具 - mysql</h2><h2 id="常用工具-mysqladmin"><a href="#常用工具-mysqladmin" class="headerlink" title="常用工具 - mysqladmin"></a>常用工具 - mysqladmin</h2><h2 id="常用工具-mysqlbinlog与mysqldump"><a href="#常用工具-mysqlbinlog与mysqldump" class="headerlink" title="常用工具 - mysqlbinlog与mysqldump"></a>常用工具 - mysqlbinlog与mysqldump</h2><h2 id="常用工具-mysqlimport与source"><a href="#常用工具-mysqlimport与source" class="headerlink" title="常用工具 - mysqlimport与source"></a>常用工具 - mysqlimport与source</h2><h2 id="常用工具-mysqlshow"><a href="#常用工具-mysqlshow" class="headerlink" title="常用工具 - mysqlshow"></a>常用工具 - mysqlshow</h2><h2 id="日志-错误日志"><a href="#日志-错误日志" class="headerlink" title="日志 - 错误日志"></a>日志 - 错误日志</h2><h2 id="日志-二进制日志（statement）"><a href="#日志-二进制日志（statement）" class="headerlink" title="日志 - 二进制日志（statement）"></a>日志 - 二进制日志（statement）</h2><h2 id="日志-二进制日志（row及日志删除）"><a href="#日志-二进制日志（row及日志删除）" class="headerlink" title="日志 - 二进制日志（row及日志删除）"></a>日志 - 二进制日志（row及日志删除）</h2><h2 id="日志-查询日志"><a href="#日志-查询日志" class="headerlink" title="日志 - 查询日志"></a>日志 - 查询日志</h2><h2 id="日志-慢查询日志"><a href="#日志-慢查询日志" class="headerlink" title="日志 - 慢查询日志"></a>日志 - 慢查询日志</h2><h2 id="复制-原理"><a href="#复制-原理" class="headerlink" title="复制 - 原理"></a>复制 - 原理</h2><h2 id="案例-需求及环境准备"><a href="#案例-需求及环境准备" class="headerlink" title="案例 - 需求及环境准备"></a>案例 - 需求及环境准备</h2><h2 id="案例-基本工程导入"><a href="#案例-基本工程导入" class="headerlink" title="案例 - 基本工程导入"></a>案例 - 基本工程导入</h2><h2 id="案例-AOP记录日志"><a href="#案例-AOP记录日志" class="headerlink" title="案例 - AOP记录日志"></a>案例 - AOP记录日志</h2><h2 id="案例-日志查询后端-mapper接口"><a href="#案例-日志查询后端-mapper接口" class="headerlink" title="案例 - 日志查询后端 - mapper接口"></a>案例 - 日志查询后端 - mapper接口</h2><h2 id="案例-日志查询后端-Service-amp-Controller"><a href="#案例-日志查询后端-Service-amp-Controller" class="headerlink" title="案例 - 日志查询后端 - Service&amp;Controller"></a>案例 - 日志查询后端 - Service&amp;Controller</h2><h2 id="案例-日志查询-前端"><a href="#案例-日志查询-前端" class="headerlink" title="案例 - 日志查询 - 前端"></a>案例 - 日志查询 - 前端</h2><h2 id="案例-系统性能优化分析"><a href="#案例-系统性能优化分析" class="headerlink" title="案例 - 系统性能优化分析"></a>案例 - 系统性能优化分析</h2><h2 id="案例-系统性能优化-分页优化"><a href="#案例-系统性能优化-分页优化" class="headerlink" title="案例 - 系统性能优化 - 分页优化"></a>案例 - 系统性能优化 - 分页优化</h2><h2 id="案例-系统性能优化-索引优化"><a href="#案例-系统性能优化-索引优化" class="headerlink" title="案例 - 系统性能优化 - 索引优化"></a>案例 - 系统性能优化 - 索引优化</h2><h2 id="案例-系统性能优化-读写分离概述"><a href="#案例-系统性能优化-读写分离概述" class="headerlink" title="案例 - 系统性能优化 - 读写分离概述"></a>案例 - 系统性能优化 - 读写分离概述</h2><h2 id="案例-系统性能优化-数据源配置"><a href="#案例-系统性能优化-数据源配置" class="headerlink" title="案例 - 系统性能优化 - 数据源配置"></a>案例 - 系统性能优化 - 数据源配置</h2><h2 id="案例-系统性能优化-AOP切换数据源"><a href="#案例-系统性能优化-AOP切换数据源" class="headerlink" title="案例 - 系统性能优化 - AOP切换数据源"></a>案例 - 系统性能优化 - AOP切换数据源</h2><h2 id="案例-系统性能优化-AOP切换数据源-测试"><a href="#案例-系统性能优化-AOP切换数据源-测试" class="headerlink" title="案例 - 系统性能优化 - AOP切换数据源 - 测试"></a>案例 - 系统性能优化 - AOP切换数据源 - 测试</h2><h2 id="案例-系统性能优化-AOP切换数据源-原理解析"><a href="#案例-系统性能优化-AOP切换数据源-原理解析" class="headerlink" title="案例 - 系统性能优化 - AOP切换数据源 - 原理解析"></a>案例 - 系统性能优化 - AOP切换数据源 - 原理解析</h2><h2 id="案例-系统性能优化-应用优化"><a href="#案例-系统性能优化-应用优化" class="headerlink" title="案例 - 系统性能优化 - 应用优化"></a>案例 - 系统性能优化 - 应用优化</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;观看笔记：&lt;a href=&quot;https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://fengshana.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MySQL" scheme="https://fengshana.github.io/tags/MySQL/"/>
    
      <category term="数据库优化" scheme="https://fengshana.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
    
      <category term="笔记" scheme="https://fengshana.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>全面深入讲解MySQL数据库优化03</title>
    <link href="https://fengshana.github.io/2020/05/29/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%9603/"/>
    <id>https://fengshana.github.io/2020/05/29/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%9603/</id>
    <published>2020-05-29T11:23:31.802Z</published>
    <updated>2020-05-29T11:35:59.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;seid=13531213796559959972" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;seid=13531213796559959972</a>  </p><p>本课程作为MySQL高级课程，主要讲解了：  </p><ul><li><strong>MySQL</strong>中的<strong>视图</strong>/<strong>存储过程</strong>/<strong>触发器</strong>/<strong>索引</strong>等对象的使用</li><li>常见的<strong>SQL</strong>语句<strong>优化</strong>的技巧</li><li><strong>应用优化</strong></li><li><strong>数据库优化</strong></li><li><strong>数据库日志</strong></li></ul><p>等方面的知识，并通过综合案例，对课程中的知识进行一个整合应用。  </p><p>本课程旨在通过MySQl高级部分内容，可以在满足现有业务需求基础上，对<strong>MySQL底层的体系结构</strong>，及<strong>底层的优化</strong>有一个深入的理解，对<strong>系统的整体性能</strong>进行提升。  </p><h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li>应用优化</li><li>MySQL中查询缓存优化</li><li>MySQL内存管理以及优化</li><li>MySQL并发参数调整</li><li>MySQL锁问题</li><li>常用SQL技巧</li></ul><h2 id="应用优化"><a href="#应用优化" class="headerlink" title="应用优化"></a>应用优化</h2><p>前面章节，介绍了很多数据库的优化措施，但是在实际生产环境中，由于数据库本身的性能局限，就必须对前台的应用进行一些优化，来降低数据库的访问压力。  </p><h3 id="使用连接池"><a href="#使用连接池" class="headerlink" title="使用连接池"></a>使用连接池</h3><p>对于访问数据库来说，建立连接的代价是比较昂贵的，因为频繁的创建关闭连接，是比较耗费资源的，有必要建立数据库连接池，以提高访问的性能。  </p><h3 id="减少对MySQL的访问"><a href="#减少对MySQL的访问" class="headerlink" title="减少对MySQL的访问"></a>减少对MySQL的访问</h3><h4 id="减少对数据进行重复检索"><a href="#减少对数据进行重复检索" class="headerlink" title="减少对数据进行重复检索"></a>减少对数据进行重复检索</h4><p>在编写应用代码时，需要能够理解对数据库的访问逻辑。  </p><p>能够一次连接就获取得到结果的，就不用两次连接，这样可以大大减少对数据库无用的重复请求。  </p><p>比如，需要获取书籍的id和name字段，则查询如下：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure><p>之后，在业务逻辑中有需要获取得到书籍状态信息，则查询如下：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> ,<span class="keyword">status</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure><p>这样，就需要向数据库提交两次请求，数据库就要做两次查询操作。<br>其实完全可以用一条SQL语句得到想要的结果。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> ,<span class="keyword">status</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure><h4 id="增加cache层"><a href="#增加cache层" class="headerlink" title="增加cache层"></a>增加cache层</h4><p>在应用中，可以在应用中增加 缓存 层 来达到减轻数据库负担的目的。  </p><p>缓存层有很多种，也有很多事先方式，只要达到降低数据库的负担又能满足应用需求就可以。  </p><p>因此可以部分数据从数据库中抽取出来放到应用端以文本方式存储，或者使用框架（Mybatis，Hibernate）提供的一级缓存、二级缓存，或者使用redis数据库来缓存数据。  </p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡是应用中使用非常普遍的一种优化方式。  </p><p>负载均衡的机制就是利用某种均衡算法，将固定的负载量分不到不同的服务器上，一次来降低单台服务器的负载，达到优化的效果。  </p><h4 id="利用MySQL复制分流查询"><a href="#利用MySQL复制分流查询" class="headerlink" title="利用MySQL复制分流查询"></a>利用MySQL复制分流查询</h4><p>通过MySQL的主从复制，实现读写分离，使得增删改操作走主节点，查询操作走从结点，从而可以降低单台服务器的读写压力。  </p><h4 id="采用分布式数据库架构"><a href="#采用分布式数据库架构" class="headerlink" title="采用分布式数据库架构"></a>采用分布式数据库架构</h4><p>分布式数据库架构适合大数据量、负载高的情况，它由良好的拓展性和高可用性。<br>通过在多台服务器之间分布数据，可以实现在多台服务器之间的负载均衡，提高访问效率。  </p><h2 id="查询缓存-概述及流程"><a href="#查询缓存-概述及流程" class="headerlink" title="查询缓存 - 概述及流程"></a>查询缓存 - 概述及流程</h2><h3 id="Mysql中查询缓存优化-概述"><a href="#Mysql中查询缓存优化-概述" class="headerlink" title="Mysql中查询缓存优化-概述"></a>Mysql中查询缓存优化-概述</h3><p>开启mysql的查询缓存，当执行完全相同的SQL语句的时候，服务器就会直接从缓存中读取结果；当数据被修改，之前的缓存就会失效，修改比较频繁的表不适合做查询缓存。  </p><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><ol><li>客户端发送一条查询SQL给服务器</li><li>服务器先会检查查询缓存，如果命中了缓存，则立即返回存储在缓存中的结果。否则进入下一阶段。</li><li>服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划；</li><li>MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询；</li><li>将结果缓存并返回给客户端；</li></ol><h2 id="查询缓存-配置参数"><a href="#查询缓存-配置参数" class="headerlink" title="查询缓存 - 配置参数"></a>查询缓存 - 配置参数</h2><h3 id="查询缓存配置"><a href="#查询缓存配置" class="headerlink" title="查询缓存配置"></a>查询缓存配置</h3><ol><li>查看当前的MySQL数据库是否支持查询缓存：  </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p  </span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'have_query_cache'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>have_query_cache</td>    <td>YES</td>  </tr></table><ol start="2"><li>查看当前MySQL是否开启了查询缓存：  </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'query_cache_type'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>query_cache_type</td>    <td>OFF(关闭)</td>  </tr></table><ol start="3"><li>查看查询缓存的占用大小（建议按照1024倍数进行增大）：  </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'query_cache_size'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>query_cache_size</td>    <td>1048576（单位为字节，占用内存空间约为：1048576/1024/1024约为 1M的内存空间）</td>  </tr></table><ol start="4"><li>查看查询缓存的状态变量</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">STATUS</span> <span class="keyword">LIKE</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1038344</td>  </tr>  <tr>    <td>Qcache_hits</td>    <td>13</td>  </tr>  <tr>    <td>Qcache_inserts</td>    <td>6</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>16</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>4</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> demo_02;<span class="comment">#切换数据库也算是一次查询mysql底层当中</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗费时间2.76 second</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗费时间2.53 second</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks（可用的内存块的个数）</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory（可用的内存空间）</td>    <td>1038344</td>  </tr>  <tr>    <td>Qcache_hits（查询缓存的命中次数）</td>    <td>13</td>  </tr>  <tr>    <td>Qcache_inserts（添加到缓存当中的次数）</td>    <td>6</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes（如果内存空间不足，将内存中数据移出缓存空间次数）</td>    <td>0</td>  </tr>  <tr>    <td style="color:red;font-weight:bolder;">Qcache_not_cached(当前查询没有进行缓存次数)</td>    <td style="color:red;font-weight:bolder;">19</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>4</td>  </tr></table><table>  <tr>    <th>参数</th>    <th>含义</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>查询缓存中的可用内存块数</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>查询缓存的可用内存量</td>  </tr><tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>查询缓存命中数</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts</td>    <td>添加到查询缓存的查询数</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>由于内存不足而从查询缓存中删除的查询数</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached</td>    <td>非缓存查询的数量（由于query_cache_type设置而无法缓存或者未缓存）</td>  </tr>  <tr>    <td>Qcache_queries_in_cache</td>    <td>查询缓存中注册的查询数</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>查询缓存中的块总数</td>  </tr></table><h2 id="查询缓存-开启查询缓存"><a href="#查询缓存-开启查询缓存" class="headerlink" title="查询缓存 - 开启查询缓存"></a>查询缓存 - 开启查询缓存</h2><p>MySQL的查询缓存默认是关闭的，需要手动配置参数 query_cache_type，来开启查询缓存。  </p><p>query_cache_type 该参数的可取值有三个：  </p><table>  <tr>    <th>值</th>    <th>定义</th>  </tr>  <tr>    <td>OFF 或 0</td>    <td>查询缓存功能关闭</td>  </tr>    <tr>    <td>ON 或 1</td>    <td>查询缓存功能打开，SELECT的结果符合缓存条件即会缓存；否则不予缓存；显式指定SQL_NO_CACHE，则不予缓存</td>  </tr>    <tr>    <td> DEMAND 或 2</td>    <td>查询缓存功能按需进行，<span style="color:red;font-weight:bolder;">显式指定 SQL_CACHE 的SELECT语句才会缓存</span>；其他均不予缓存</td>  </tr></table><p>在 /usr/my.cnf配置中，增加以下配置：  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在开启mysql的查询缓存</span></span><br><span class="line"><span class="attr">query_cache_type</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>配置完毕之后，重启服务即可生效；  </p><p>然后就可以在命令行执行SQL语句进行验证，执行一条比较耗时的SQL语句，然后再执行多次，查看后面几次的执行时间；  </p><p>获取通过查看查询缓存的缓存命中数，来判定是否走了查询缓存。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/my.cnf</span><br><span class="line">query_cache_type:1</span><br><span class="line"></span><br><span class="line">service mysql restart<span class="comment">#重启mysql</span></span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> demo_02;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 2.58 second</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="string">'Qcache'</span>%;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1038344</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>4</td>  </tr>  <tr>    <td>Qcache_inserts</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr>    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>2</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>4</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1038344</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_inserts</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr>    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>2</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>4</td>  </tr></table><h2 id="查询缓存-SELECT选项"><a href="#查询缓存-SELECT选项" class="headerlink" title="查询缓存 - SELECT选项"></a>查询缓存 - SELECT选项</h2><p>可以在SELECT语句中指定两个与查询缓存相关的选项：  </p><ul><li>SQL_CACHE：如果查询结果是可缓存的，并且query_cache_type 系统变量的值为ON或者DEMAND，则缓存查询结果；  </li><li>SQL_NO_CACHE: 服务器不使用查询缓存，它既不检查查询缓存，也不检查结果是否已缓存，也不缓存查询结果。  </li></ul><p>例子：  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT SQL_CACHE id, name <span class="keyword">FROM</span> customer;</span><br><span class="line">SELECT SQL_NO_CACHE id,name <span class="keyword">FROM</span> customer;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item  <span class="keyword">limit</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span>  <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1038344</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>5</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr>    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>2</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>8</td>  </tr></table><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL_NO_CACHE <span class="built_in">title</span>, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> id=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1038344</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>6</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts（添加到缓存的数量）</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>2</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>8</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL_NO_CACHE title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1038344</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>6</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts（添加到缓存的数量）</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>8</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL_NO_CACHE title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> SQL_NO_CACHE title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1035936</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>6</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts（添加到缓存的数量）</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>8</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">SQL_CACHE</span> title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">SQL_CACHE</span> title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1038344</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>7</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts（添加到缓存的数量）</td>    <td>4</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>4</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>10</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">SQL_CACHE</span> title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">SQL_CACHE</span> title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1038344</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>9</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts（添加到缓存的数量）</td>    <td>4</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>4</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>10</td>  </tr></table><h2 id="查询缓存-失效场景"><a href="#查询缓存-失效场景" class="headerlink" title="查询缓存 - 失效场景"></a>查询缓存 - 失效场景</h2><table>  <tr>    <th>值</th>    <th>定义</th>  </tr>  <tr>    <td>OFF 或 0</td>    <td>查询缓存功能关闭</td>  </tr>    <tr>    <td>ON 或 1</td>    <td>查询缓存功能打开，<span style="color:red;font-weight:bolder;">SELECT的结果符合缓存条件即会缓存</span>；否则不予缓存；显式指定SQL_NO_CACHE，则不予缓存</td>  </tr>    <tr>    <td> DEMAND 或 2</td>    <td>查询缓存功能按需进行，显式指定 SQL_CACHE 的SELECT语句才会缓存；其他均不予缓存</td>  </tr></table><p>开启mysql的查询缓存，当执行<strong>完全相同的SQL语句</strong>的时候，服务器就会直接从缓存中读取结果；当数据被修改，之前的缓存就会失效，修改比较频繁的表不适合做查询缓存。</p><ol><li>SQL语句不一致的情况，要想命中查询缓存，查询的SQL语句必须一致。  </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SQL1：</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#3000000 耗时0.00 second</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#SQL2：</span></span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#3000000 耗时2.79 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1033888</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>11</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr>    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>12</td>  </tr></table><ol start="2"><li>当查询语句中有一些不确定的时候，则不会缓存。如：now()、current_date()、curdate()、curtime()、rand()、uuid()、user()、database()；  </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>(); <span class="comment"># 耗时 0.01 second</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>(); <span class="comment"># 耗时 0.01 second；时间是发生了变化的；即不会走缓存</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1033888</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>11</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>7</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>12</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SQL1：</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> updatetime &lt; <span class="keyword">now</span>() <span class="keyword">limit</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#SQL2：</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#SQL3：</span></span><br><span class="line"><span class="keyword">select</span> databse();</span><br></pre></td></tr></table></figure><ol start="3"><li>不适用任何表查询语句。  </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'Hello'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1033888</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>11</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>8</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>12</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'A'</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>查询mysql、information_schema 或者 performance_schema 数据库中的表时，不会走查询缓存。  </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"><span class="comment">#information_schema</span></span><br><span class="line"><span class="comment">#mysql</span></span><br><span class="line"><span class="comment">#performance_schema</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.engines;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1033888</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>11</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>9</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>12</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.engines;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1033888</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>11</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>10</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>12</td>  </tr></table><ol start="5"><li><p>在存储的函数，触发器或者时间的主体内执行的查询；</p></li><li><p>如果表更改，则使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除。这包括使用<strong>MERGE</strong>映射到已更改表的查询。一个表可以被许多类型的语句，如被改变INSERT、UPDATE、DELETE、TRUNCATE TABLE、ALTER TABLE、DROP TABLE 或者 DROP DATABASE。  </p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> tb_item <span class="keyword">set</span> title=<span class="string">'test1'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 2.67 second；该SQL失效；但是失效的同时又去进行了缓存；当前查询时并未缓存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second；此时再去查询；即查询的缓存区内的内容</span></span><br></pre></td></tr></table></figure><h2 id="内存优化-优化原则"><a href="#内存优化-优化原则" class="headerlink" title="内存优化 - 优化原则"></a>内存优化 - 优化原则</h2><h3 id="内存优化原则"><a href="#内存优化原则" class="headerlink" title="内存优化原则"></a>内存优化原则</h3><ol><li>将尽量多的内存分配给MySQL做缓存(提高mysql的访问效率)，但要给操作系统和其他程序预留足够内存；</li><li>MyISAM存储引擎的数据文件读取依赖于操作系统自身的I/O缓存，因此，如果有MyISAM表，就要预留更多的内存给操作系统做I/O缓存。</li><li>排序区、连接区等缓存是分配给每个数据库会话（session）专用的，其默认值的设置要根据最大连接数合理分配，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽。</li></ol><h2 id="内存优化-MyISAM内存优化"><a href="#内存优化-MyISAM内存优化" class="headerlink" title="内存优化 - MyISAM内存优化"></a>内存优化 - MyISAM内存优化</h2><p>MyISAM的缓存机制：  </p><p>MyISAM存储引擎使用key_buffer缓存索引块（没有缓存数据块），加速MyISAM索引的读写速度，对于MyISAM表的数据块，mysql没有特别的缓存机制，完全依赖于操作系统的I/O缓存。  </p><p><strong>key_buffer_size</strong>  </p><p>key_buffer_size决定MyISAM索引块缓存区的大小，直接影响到MyISAM表的存取效率。  </p><p>可以在mysql参数文件中设置key_buffer_size的值，对于一般MyISAM数据库，建议至少将1/4可用内存分配给key_buffer_size。  </p><p>在/usr/my.cnf 中做如下配置：  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">key_buffer_size</span>=<span class="number">512</span>M</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'key_buffer_size'</span>;<span class="comment">#mysql 命令行</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>key_buffer_size</td>    <td>8388608(单位为字节；默认大小)</td>  </tr></table><p><strong>read_buffer_size</strong>  </p><p>如果需要经常顺序扫描MyISAM表，可以通过增大read_buffer_size的值来改善性能。  </p><p>但是需要注意的是read_buffer_size是每个session独占的，如果默认值设置太大，就会造成内存浪费。  </p><p><strong>read_rnd_buffer_size</strong>  </p><p>对于需要做排序的MyISAM表的查询，如带有 order by 子句的SQL，适当增加read_rnd_buffer_size的值，可以改善此类的SQL性能。  </p><p>但是需要注意的是read_rnd_buffer_size 是每个session独占的，如果默认值设置太大，就会造成内存浪费。  </p><h2 id="内存优化-InnoDB内存优化"><a href="#内存优化-InnoDB内存优化" class="headerlink" title="内存优化 - InnoDB内存优化"></a>内存优化 - InnoDB内存优化</h2><p>innodb的缓存机制：<br>InnoDB用一块内存区做IO缓存池，该缓存池不仅用来缓存InnoDB的索引块，而且也用来缓存InnoDB的数据块。  </p><p><strong>innodb_buffer_pool_size</strong>  </p><p>该变量决定了innodb存储引擎表数据和索引数据的最大缓存区大小。<br>在保证操作系统以及其他程序有足够内存可用的情况下，innodb_buffer_pool_size的值越大，缓存命中率越高，访问innodb表的需要的磁盘I/O就越少，性能也就越高。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'innodb_buffer_pool_size'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>innodb_buffer_pool_size</td>    <td>134217728(单位为字节；默认大小128M；134217728/1024-->131072（换算成B），134217728/1024/1024-->128（换算成M）；)</td>  </tr></table><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="keyword">my</span>.cnf</span><br><span class="line"><span class="comment"># innodb_buffer_pool_size=512M #修改内容</span></span><br></pre></td></tr></table></figure><p><strong>innodb_log_buffer_size</strong>  </p><p>决定了innodb重做日志缓存的大小，对于避免产生大量更新记录的大事务，增加innodb_log_buffer_size的大小，可以避免innodb在事务提交前就执行不必要的日志写入磁盘操作。  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/my.cnf</span><br><span class="line"><span class="comment"># innodb_log_buffer_size=10M #修改内容</span></span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><h2 id="并发参数调整"><a href="#并发参数调整" class="headerlink" title="并发参数调整"></a>并发参数调整</h2><h3 id="mysql并发参数调整"><a href="#mysql并发参数调整" class="headerlink" title="mysql并发参数调整"></a>mysql并发参数调整</h3><p>从实现上来说，MySQL Server是多线程结构，包括后台线程和客户服务线程。  </p><p>多线程可以有效利用服务器资源，提高数据库的并发性能。  </p><p>在mysql中，控制并发连接和线程的主要参数包括 max_connections、back_log、thread_cache_size、table_open_size；  </p><h4 id="max-connections（最大连接数）"><a href="#max-connections（最大连接数）" class="headerlink" title="max_connections（最大连接数）"></a>max_connections（最大连接数）</h4><p>采用max_connections 控制允许连接到MySQL数据库的最大数量，默认值是151。  </p><p>如果状态变量 connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已经达到允许最大值而失败，这时可以考虑增大max_connections的值。  </p><p>MySQL最大可支持的连接数，取决于很多因素，包括给定操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度，期望的响应时间等。  </p><p>在Linux平台下，性能好的服务器，支持500-1000个连接都不是难事，需要根据服务器性能进行评估设定。  </p><h4 id="back-log"><a href="#back-log" class="headerlink" title="back_log"></a>back_log</h4><p>back_log 参数控制MySQL监听TCP端口时设置的积压请求栈大小。  </p><p>如果mysql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。  </p><p>5.6.6版本之前默认值为50，之后的版本默认为50+（max_connections/5），但最大不超过900。  </p><p>如果需要数据库在较短的时间内处理大量连接请求，可以考虑适当增大back_log的值。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'back_log'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>back_log</td>    <td>80(默认个数)</td>  </tr></table><h4 id="table-open-cache"><a href="#table-open-cache" class="headerlink" title="table_open_cache"></a>table_open_cache</h4><p>该参数用来控制所有SQL语句执行线程可打开表缓存的数量，而在执行SQL语句时，每一个SQL执行线程至少要打开一个表缓存，该参数的值应该根据设置的最大连接数max_connections 以及每个连接执行关联查询中涉及的白鸥的最大数量来决定。  </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max_connections x N<span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'table_open_cache'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>table_open_cache</td>    <td>2000(默认大小)</td>  </tr></table><h4 id="thread-cache-size（线程缓存大小）"><a href="#thread-cache-size（线程缓存大小）" class="headerlink" title="thread_cache_size（线程缓存大小）"></a>thread_cache_size（线程缓存大小）</h4><p>为了加快连接数据库的速度，MySQL会缓存一定数量的客户服务线程（线程池）以备重用，通过参数 thread_cache_size 可控制MySQL缓存客户服务线程的数量（线程池的大小）。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'thread_cache_size'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>thread_cache_size</td>    <td>9(默认大小9个线程)</td>  </tr></table><h4 id="innodb-lock-wait-timeout（innodb行锁的等待时间）"><a href="#innodb-lock-wait-timeout（innodb行锁的等待时间）" class="headerlink" title="innodb_lock_wait_timeout（innodb行锁的等待时间）"></a>innodb_lock_wait_timeout（innodb行锁的等待时间）</h4><p>该参数是用来设置InnoDB事务等待行锁的时间，默认值时候50ms。  </p><p>可以根据需要进行动态设置。  </p><p>对于需要快速反馈的业务系统来说，可以将行锁的等待时间调小，以避免事务长时间挂起；  </p><p>对于后台运行的批量处理程序来说，可以将行锁的等待时间调大，以避免发生大的回滚操作。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'innodb_lock_wait_timeout'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>innodb_lock_wait_timeout</td>    <td>50</td>  </tr></table><h2 id="锁-锁的概述及分类"><a href="#锁-锁的概述及分类" class="headerlink" title="锁 - 锁的概述及分类"></a>锁 - 锁的概述及分类</h2><h3 id="锁概述"><a href="#锁概述" class="headerlink" title="锁概述"></a>锁概述</h3><p>锁是计算机协调多个进程 或者 线程 并发访问某一资源的机制（避免争抢）。  </p><p>在数据库中，除了传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的资源。  </p><p>如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。  </p><p>从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。  </p><h3 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h3><p>从对数据操作的粒度分为：  </p><ol><li>表锁：操作时，会锁定整个表</li><li>行锁：操作时，会锁定当前操作行</li></ol><p>从对数据操作的类型分：  </p><ol><li>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响</li><li>写锁（排它锁）：当前操作没有完成之前，他会阻断其他写锁和读锁</li></ol><h2 id="锁-MySQL对锁的支持"><a href="#锁-MySQL对锁的支持" class="headerlink" title="锁 - MySQL对锁的支持"></a>锁 - MySQL对锁的支持</h2><p>相对其他数据库而言，MySQL的锁机制比较简单。  </p><p>其最显著的特点是不同的存储引擎支持不同的锁机制。  </p><p>下标罗列出了各个存储引擎对锁的支持情况。  </p><table>  <tr>    <th>存储引擎</th>    <th>表级锁</th>    <th>行级锁</th>    <th>页面锁</th>  </tr>  <tr>    <td>MyISAM</td>    <td>支持</td>    <td>不支持</td>    <td>不支持</td>  </tr>    <tr>    <td>InnoDB</td>    <td>支持</td>    <td>支持</td>    <td>不支持</td>  </tr>    <tr>    <td>MEMORY</td>    <td>支持</td>    <td>不支持</td>    <td>不支持</td>  </tr>    <tr>    <td>BDB</td>    <td>支持</td>    <td>不支持</td>    <td>支持</td>  </tr></table><p>MySQL这三种锁的特性可大致归纳如下：  </p><table>  <tr>    <th>锁类型</th>    <th>特定</th>  </tr>  <tr>    <td>表级锁</td>    <td>偏向MyISAM存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</td>  </tr>    <tr>    <td>行级锁</td>    <td>偏向InnoDB存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</td>  </tr>    <tr>    <td>页面锁</td>    <td>开销和加锁时间介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发度一般。</td>  </tr></table><p>从上述特点可见，很难笼统的说哪种锁更好，只能就具体应用的特点来说哪种锁更合适。  </p><p>仅从锁的角度来说：<br>  表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web应用；<br>  而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理（OLTP）系统；  </p><h2 id="锁-MyISAM表锁-读锁"><a href="#锁-MyISAM表锁-读锁" class="headerlink" title="锁 - MyISAM表锁 - 读锁"></a>锁 - MyISAM表锁 - 读锁</h2><p>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。</p><p>MyISAM存储引擎支持表锁，这也是MySQL开始几个版本中唯一支持的锁类型。  </p><h3 id="如何加表锁"><a href="#如何加表锁" class="headerlink" title="如何加表锁"></a>如何加表锁</h3><p>MyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等），会自动给涉及的表加写锁，这个过程并不需要用户干预。  </p><p>因此，用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。  </p><p>显示加表锁语法：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加读锁：  </span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> table_name <span class="keyword">read</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#加写锁：  </span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> table_name write;</span><br></pre></td></tr></table></figure><h3 id="读锁案例"><a href="#读锁案例" class="headerlink" title="读锁案例"></a>读锁案例</h3><p>准备环境  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">create database demo_03<span class="built_in"> default </span><span class="attribute">charset</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line">use demo_03;</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">'tb_book'</span>(</span><br><span class="line">  <span class="string">'id'</span> INT(11) AUTO_INCREMENT,</span><br><span class="line">  <span class="string">'name'</span> VARCHAR(50)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'publish_name'</span> DATE<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'status'</span> CHAR(1)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (<span class="string">'id'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=myisam<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入tb_book 基础数据</span></span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">'tb_user'</span>(</span><br><span class="line">  <span class="string">'id'</span> INT(11) AUTO_INCREMENT,</span><br><span class="line">  <span class="string">'name'</span> VARCHAR(50)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY(<span class="string">'id'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=myisam<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入tb_user 基础数据</span></span><br><span class="line"></span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">lock table tb_book read;</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> tb_books;</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> tb_user;# Table <span class="string">'tb_user'</span> was <span class="keyword">not</span> locked with LOCK TABLES 锁定tb_book表途中无法去操作其他表；除非当前tb_book表锁释放；</span><br><span class="line"></span><br><span class="line">update tb_book <span class="builtin-name">set</span> name =<span class="string">'solr'</span> where <span class="attribute">id</span>=2;#当前对tb_book表进行的锁是读锁，而不是写锁；所以当前无法进行更新；Table <span class="string">'tb_book'</span> was locked with a READ lock <span class="keyword">and</span> can<span class="string">'t be updated.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">unlock tables;#只有当当前的tb_book表当中的读锁进行解锁，其他客户端连接mysql的该表时才能够进行写锁；否则将一直等待当前该tb_book的读锁释放；</span></span><br></pre></td></tr></table></figure><p>如果对MyISAM表进行操作了读锁，其不会阻塞其他线程的读操作，但是会阻塞其他线程的写操作。  </p><h2 id="锁-MyISAM表锁-写锁"><a href="#锁-MyISAM表锁-写锁" class="headerlink" title="锁 - MyISAM表锁 - 写锁"></a>锁 - MyISAM表锁 - 写锁</h2><p>写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当前客户端</span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> tb_book write;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> tb_book <span class="keyword">set</span> <span class="keyword">name</span> =<span class="string">'solr'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_book(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'es'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他客户端</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book;<span class="comment">#其他客户端将一直处于等待状态，除非当前客户端的写锁释放（即当前客户端的业务操作完成），否则其他客户端一直处于等待状态。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当前客户端</span></span><br><span class="line"><span class="keyword">unlock</span> <span class="keyword">tables</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他客户端</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book;<span class="comment">#当 当前客户端释放锁之后，该其他客户端即立刻能查询到数据。</span></span><br></pre></td></tr></table></figure><h2 id="锁-MyISAM表锁-小结"><a href="#锁-MyISAM表锁-小结" class="headerlink" title="锁 - MyISAM表锁 - 小结"></a>锁 - MyISAM表锁 - 小结</h2><p>锁模式的互相兼容性如表所示：  </p><table>  <tr>    <th>当前锁模式/请求锁模式</th>    <th>None（理解为当前客户端获取得到的锁）</th>    <th>读锁（其他客户端对于读操作是否可行）</th>    <th>写锁（其他客户端对于写操作是否可行）</th>  </tr>  <tr>    <th>读锁</th>    <td>是（当前客户端获取得到的读锁）</td>    <td>是（其他客户端可以进行读操作）</td>    <td>否（其他客户端无法进行写操作）</td>  </tr>    <tr>    <th>写锁</th>    <td>是（当前客户端获取得到的写锁）</td>    <td>否（其他客户端无法进行读操作）</td>    <td>否（其他客户端无法进行写操作）</td>  </tr></table><p>由上表可见：  </p><ol><li>对MyISAM表的读操作，不会阻塞其他用户对同一张表的读请求，但是会阻塞对同一张表的写请求。</li><li>对MyISAM表的写操作，则会阻塞其他用户对同一张表的读和写操作。</li></ol><p>简而言之，就是读锁会阻塞写，但是不会阻塞读；而写锁，则既会阻塞读，又会阻塞写。  </p><p>此外，MyISAM的读写锁调度是写操作优先，这也是MyISAM不适合做写为主的表的存储引擎的原因。<br>因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</p><h2 id="锁-MyISAM表锁-查看锁争用情况"><a href="#锁-MyISAM表锁-查看锁争用情况" class="headerlink" title="锁 - MyISAM表锁 - 查看锁争用情况"></a>锁 - MyISAM表锁 - 查看锁争用情况</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><p>Database: 数据库  </p><p>Table: 数据表  </p><p>In_use: 表当前被查询使用的次数。如果该数为零，则表是打开的，但是当前没有被使用。  </p><p>Name_locked: 表名称是否被锁定。名称锁定用于取消表或者对表进行重命名等操作。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> tb_book write;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> <span class="keyword">tables</span>;<span class="comment">#database: demo_03; table: tb_book ; In_use(正在使用):1；Name_locked:0</span></span><br><span class="line"><span class="keyword">unlock</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Table_locks%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Table_lockes_immediate</td>    <td>70</td>  </tr>    <tr>    <td>Table_locks_waited</td>    <td>0</td>  </tr></table><p>Table_locks_immediate: 指的是能够立即获得表级锁的次数，每次立即获取锁，值加1；  </p><p>Table_locks_waited: 指的是不能立即获取表级锁而需要等待的次数，每等待一次，该值加1，此值高说明存在着较为严重的表级锁争用情况。</p><h2 id="锁-InnoDB行锁-介绍及背景知识"><a href="#锁-InnoDB行锁-介绍及背景知识" class="headerlink" title="锁 - InnoDB行锁 - 介绍及背景知识"></a>锁 - InnoDB行锁 - 介绍及背景知识</h2><h3 id="行锁介绍"><a href="#行锁介绍" class="headerlink" title="行锁介绍"></a>行锁介绍</h3><p>InnoDB默认支持行锁，也支持表锁；  </p><p>行锁特点：偏向InnoDB存储迎请，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。<br>（由于锁定粒度最小，所以发生锁冲突的概率最低，二者存在关联）  </p><p>InnoDB与MyISAM的最大不同有两点：一是支持事务；二是采用了行级锁；<br>(事务和行级锁之间存在关联，支持事务的原因即在于InnoDB采用的是行级锁)</p><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><p><strong>事务及其ACID属性</strong>  </p><p>事务是由一组SQL语句组成的逻辑处理单元。<br>事务具有以下4个特性，简称为事务ACID属性。  </p><table>  <tr>    <th>ACID属性</th>    <th>含义</th>  </tr>  <tr>    <td>原子性（Atomic）</td>    <td>事务是一个原子操作单元，其对数据的修改，要么全部成功，要么全部失败</td>  </tr>  <tr>    <td>一致性（Consistent）</td>    <td>在事务开始和完成时，数据都必须保持一致状态</td>  </tr>  <tr>    <td>隔离性（Isolation）</td>    <td>数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境下运行</td>  </tr>  <tr>    <td>持久性（Durable）</td>    <td>事务完成之后，对于数据的修改是永久的</td>  </tr></table><p><strong>并发事务处理带来的问题</strong>  </p><table>  <tr>    <th>问题</th>    <th>含义</th>  </tr>  <tr>    <td>丢失更新（Lost Update）</td>    <td>当两个或者多个事务选择同一行，最初的事务修改的值，会被后面的事务修改的值覆盖</td>  </tr>  <tr>    <td>脏读（Dirty Reads）</td>    <td>当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据（一个事务读取到了另外一个事务还未提交的数据）</td>  </tr>  <tr>    <td>不可重复度（Non_repeatable Reads）</td>    <td>一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现和以前独处的数据不一致</td>  </tr>  <tr>    <td>幻读（Phantom Reads）</td>    <td>一个事务按照相同的查询条件重新读取以前查询过的数据，却发现其他事务插入了满足其查询条件的新数据。</td>  </tr></table><p><strong>事务隔离级别</strong>  </p><p>为了解决上述提到的事务并发问题，数据库提供一定的事务隔离机制来解决这个问题。  </p><p>数据库的事务隔离越严格，并发副作用越小，但付出的代价也就越大(性能越低)，因为事务隔离实质上就是使用事务在一定程度上“串行化”进行，这显然与“并发”是矛盾的。  </p><p>数据库的隔离级别有4个，由低到高依次为Read uncommitted、Read committed、Repeatable read、Serializable ，这四个界别可以逐个解决脏写、脏读、不可重复度、幻读这几类问题。  </p><table>  <tr>    <th>隔离级别</th>    <th>丢失更新</th>    <th>脏读</th>    <th>不可重复读</th>    <th>幻读</th>  </tr>  <tr>    <td>Read uncommitted</td>    <td>x</td>    <td>√</td>    <td>√</td>    <td>√</td>  </tr>    <tr>    <td>Read committed</td>    <td>x</td>    <td>x</td>    <td>√</td>    <td>√</td>  </tr>   <tr>    <td>Repeatable read(默认)</td>    <td>x</td>    <td>x</td>    <td>x</td>    <td>√</td>  </tr>    <tr>    <td>Serializable</td>    <td>x</td>    <td>x</td>    <td>x</td>    <td>x</td>  </tr></table><p>备注： √ 代表可能出现， x 代表不会出现。  </p><p>MySQL的数据库的默认隔离级别是 Repeatable read，查看方式：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'tx_isolation'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>tx_isolation</td>    <td>REPEATABLE-READ</td>  </tr></table><h2 id="锁-InnoDB行锁-类型"><a href="#锁-InnoDB行锁-类型" class="headerlink" title="锁 - InnoDB行锁 - 类型"></a>锁 - InnoDB行锁 - 类型</h2><h3 id="InnoDB的行锁模式"><a href="#InnoDB的行锁模式" class="headerlink" title="InnoDB的行锁模式"></a>InnoDB的行锁模式</h3><p>InnoDB实现了以下两种类型的行锁：  </p><ul><li><p>共享锁（S）： 又称为读锁，简称S锁，共享锁就是多个事务对于统一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。  </p></li><li><p>排它锁（X）：又称为写锁，简称X锁，排它锁就是不能与其他锁并存。如果一个事务湖区了一个数据行的排它锁，其他事务就不能再获取该行的其他锁，包括共享锁和排它锁，但是获取排它锁的事务可以对数据进行读取和修改。  </p></li></ul><p>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排它锁（X）；<br>对于普通SELECT语句，InnoDB不会加任何锁；  </p><p>可以通过以下语句显式给记录集加共享锁或者排它锁：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#共享锁（S）</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> ...... <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#排它锁（X）</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> ....... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span></span><br></pre></td></tr></table></figure><h3 id="案例准备工作"><a href="#案例准备工作" class="headerlink" title="案例准备工作"></a>案例准备工作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_innodb_lock(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>),</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">16</span>),</span><br><span class="line">  sex <span class="built_in">varchar</span>(<span class="number">1</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入基础数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建单列索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_test_innodb_lock_id <span class="keyword">on</span> test_innodb_lock(<span class="keyword">id</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_test_innodb_lock_name <span class="keyword">on</span> test_innodb_lock(<span class="keyword">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><h3 id="行锁基本演示"><a href="#行锁基本演示" class="headerlink" title="行锁基本演示"></a>行锁基本演示</h3><table>  <tr>    <th>Session-1</th>    <th>Session-2</th>  </tr>  <tr>    <td>关闭自动提交功能（set autocommit=0;）</td>    <td>关闭自动提交功能（set autocommit=0;）</td>  </tr>  <tr>    <td>可以正常的查询出全部的数据（select * from test_innodb_lock;）</td>    <td>可以正常的查询出全部的数据（select * from test_innodb_lock;）</td>  </tr>  <tr>    <td>查询id为3的数据；（select * from test_innodb_lock where id=3;）</td>    <td>查询id为3的数据；（select * from test_innodb_lock where id=3;）</td>  </tr>   <tr>    <td>更新id为3的数据，但是不提交（update test_innodb_lock set name='AI' where id=3;）</td>    <td>更新id为3的数据，在Session-1的更新提交完成之前一直处于等待状态；（update test_innodb_lock set name='AII' where id=3;）</td>  </tr><tr>    <td>通过commit，提交事务（commit;）</td>    <td>接触阻塞，更新正常进行（update test_innodb_lock set name='AII' where id=3;）</td>  </tr>  <tr>    <td colspan="2">以上，操作的都是同一行的数据，接下来，演示不同行的数据；</td>  </tr>  <tr>    <td>更新id为3的数据，正常的获取到行锁，执行更新；(update test_innodb_lock set name='a1' where id =3;)</td>    <td>由于与Session-1操作不是同一行，获取当前行锁，执行更新；（update test_innodb_lock set name ="C1" where id=5;）</td>  </tr></table><h2 id="锁-InnoDB行锁-行锁升级为表锁"><a href="#锁-InnoDB行锁-行锁升级为表锁" class="headerlink" title="锁 - InnoDB行锁 - 行锁升级为表锁"></a>锁 - InnoDB行锁 - 行锁升级为表锁</h2><p>如果不通过索引条件检索数据，那么innodb将对表中的所有记录加锁，实际效果跟表锁一样。  </p><p>查看当前表的索引：show index from test_innodb_lock;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> test_innodb_lock\G;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Session-1</th>    <th>Session-2</th>  </tr>  <tr>    <td>关闭事务的自动提交（set autocommit=0;）</td>    <td>关闭事务的自动提交（set autocommit=0;）</td>  </tr>  <tr>    <td>执行更新语句（update test_innodb_lock set sex='2' where <span style="color:red;font-weight:bolder;">name=400</span>; ）</td>    <td>执行更新语句，但是出于阻塞状态（update test_innodb_lock set sex='2' where id=9;）</td>  </tr>   <tr>    <td>提交事务（commit;）</td>    <td>解除阻塞，执行更新成功（update test_innodb_lock set sex='2' where id=9;）</td>  </tr>  <tr>    <td></td>    <td>执行提交操作（commit;）</td>  </tr></table><p>由于执行更新时，name字段本来为varchar类型，但是Session-1当中name作为数字类型来使用，所以存在类型转换，索引失效，最终行锁变为表锁；  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> test_innodb_lock;<span class="meta">#查看表结构</span></span><br></pre></td></tr></table></figure><p>索引失效：name字段本来的类型为varcahr类型；如果是varchar类型但是在使用的时候，没有给其name字段的取值加上单引号，那么这个时候索引就将失效；索引失效，行锁升级为表锁；</p><h2 id="锁-InnoDB行锁-间隙锁危害"><a href="#锁-InnoDB行锁-间隙锁危害" class="headerlink" title="锁 - InnoDB行锁 - 间隙锁危害"></a>锁 - InnoDB行锁 - 间隙锁危害</h2><p>当用 <strong>范围条件</strong>，而不是使用相等条件检索数据，并请求共享或者排它锁的时候，InnoDB会给符合条件的已有数据进行加锁；<br>对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP）”，InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的 间隙锁（Next-Key锁）；  </p><p>ID &lt; 10 ：  </p><ul><li>1,2,3,4,5,6,7,8,9</li><li>1,2,3,4,6,9(此时当中的5 和 7、8 则称之为间隙)</li></ul><p>示例：  </p><table>  <tr>    <th>Session-1</th>    <th>Session-2</th>  </tr>  <tr>    <td>关闭事务自动提交（set autocommit=0;）</td>    <td>关闭事务自动提交（set autocommit=0;）</td>  </tr>  <tr>    <td>根据id范围更新数据（update test_innodb_lock set name='332423' where id < 4 ;）</td>    <td>插入id为2的记录，处于阻塞状态（insert into test_innodb_lock values(2,'1001','1'); ）</td>  </tr>    <tr>    <td>提交事务（commit;）</td>    <td>解除阻塞，执行插入操作（insert into test_innodb_lock values(2,'1001','1'); ）</td>  </tr>   <tr>    <td></td>    <td>提交事务（commit;）</td>  </tr></table><h2 id="锁-InnoDB行锁-争用情况查看"><a href="#锁-InnoDB行锁-争用情况查看" class="headerlink" title="锁 - InnoDB行锁 - 争用情况查看"></a>锁 - InnoDB行锁 - 争用情况查看</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">show status like <span class="string">'innodb_row_lock%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#Innodb_row_lock_current_waits: 当前正在等待锁定的数量；</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#Innodb_row_lock_time： 从系统启动到现在锁定总时间长度</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#Innodb_row_lock_time_avg: 每次等待所花平均时长</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#Innodb_row_lock_time_max: 从系统启动到现在等待最长的一次所花时间</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#Innodb_row_lock_waits： 系统启动后到现在总共等待的次数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#当等待的次数很高，而且每次等待的时长也不小的时候，就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手制定优化计划。</span></span><br></pre></td></tr></table></figure><h2 id="锁-InnoDB行锁-总结"><a href="#锁-InnoDB行锁-总结" class="headerlink" title="锁 - InnoDB行锁 - 总结"></a>锁 - InnoDB行锁 - 总结</h2><p><strong>Innodb存储引擎</strong> 由于实现了 <strong>行级锁定</strong> ，<br>虽然在 <strong>锁定机制</strong> 的实现方面带来了 <strong>性能损耗</strong> 可能比表锁会更高一些，<br>但是在 <strong>整体并发处理能力方面</strong>要远远 <strong>优于</strong> <strong>MyISAM的表锁</strong> 的。  </p><p>当 <strong>系统并发量较高</strong> 的时候，<strong>InnoDB的整体性能</strong> 和 <strong>MyISAM</strong> 相比就会有比较<strong>明显的优势</strong>。  </p><p>但是，<strong>InnoDB的行级锁</strong> 同样也有其脆弱的一面，但<strong>使用不当</strong>的时候，可能会让<strong>InnoDB的整体性能</strong>不仅<strong>不能比MyISAM高</strong>，甚至<strong>可能</strong>会<strong>更差</strong>。  </p><p><strong>优化建议</strong>：  </p><ul><li>尽可能让所有 <strong>数据检索</strong> 都能通过 <strong>索引</strong> 来完成，<strong>避免 无索引 行锁</strong> <strong>升级</strong>为<strong>表锁</strong></li><li><strong>合理设计索引</strong>，尽量 <strong>缩小锁的范围</strong></li><li>尽可能<strong>减少索引条件</strong>，以及<strong>索引范围</strong>，<strong>避免间隙锁</strong></li><li>尽量<strong>控制事务大小</strong>，<strong>减少锁定资源量和时间长度</strong></li><li>尽可能使用<strong>低级别事务隔离</strong>（前提：但是需要<strong>业务层面满足需求</strong>）</li></ul><h2 id="SQL技巧-SQL执行顺序及正则表达式"><a href="#SQL技巧-SQL执行顺序及正则表达式" class="headerlink" title="SQL技巧 - SQL执行顺序及正则表达式"></a>SQL技巧 - SQL执行顺序及正则表达式</h2><h3 id="SQL执行顺序"><a href="#SQL执行顺序" class="headerlink" title="SQL执行顺序"></a>SQL执行顺序</h3><p>编写顺序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">  &lt;<span class="keyword">select</span> <span class="keyword">list</span>&gt;</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  &lt;left_table&gt; &lt;join_type&gt;</span><br><span class="line"><span class="keyword">JOIN</span></span><br><span class="line">  &lt;right_table&gt; <span class="keyword">ON</span> &lt;join_condition&gt;</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  &lt;where_condition&gt;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  &lt;group_by_list&gt;</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">  &lt;having_condition&gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  &lt;order_by_condition&gt;</span><br><span class="line"><span class="keyword">LIMIT</span></span><br><span class="line">  &lt;limit_params&gt;</span><br></pre></td></tr></table></figure><p>执行顺序  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> &lt;left_table&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ON</span> &lt;join_condition&gt;</span><br><span class="line"></span><br><span class="line">&lt;join_type&gt; <span class="keyword">JOIN</span> &lt;right_table&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> &lt;where_condition&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;group_by_list&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">HAVING</span> &lt;having_condition&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> &lt;<span class="keyword">select</span> list&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;order_by_condition&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">LIMIT</span> &lt;limit_params&gt;</span><br></pre></td></tr></table></figure><h3 id="正则表达式使用"><a href="#正则表达式使用" class="headerlink" title="正则表达式使用"></a>正则表达式使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则表达式 regexp</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'^j'</span>;<span class="comment">#查询name字段取值以 “j” 字符开头的记录行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'S$'</span>;<span class="comment">#查询name字段取值以 “S” 字符结尾的记录行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'[uvw]'</span>;<span class="comment">#查询name字段取值包含 “u”、“v”、“w” 字符的记录行</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>符号</th>    <th>含义</th>  </tr>  <tr>    <td>^</td>    <td>在字符串开始处进行匹配</td>  </tr>    <tr>    <td>$</td>    <td>在字符串末尾处进行匹配</td>  </tr>    <tr>    <td>.</td>    <td>匹配任意单个字符，包括换行符</td>  </tr>  <tr>    <td>[...]</td>    <td>匹配出括号内的任意字符</td>  </tr>  <tr>    <td>[^...]</td>    <td>匹配不出括号内的任意字符</td>  </tr>  <tr>    <td>a*</td>    <td>匹配零个或者多个a（包括空串）</td>  </tr>  <tr>    <td>a+</td>    <td>匹配一个或者多个a（不包括空串）</td>  </tr>  <tr>    <td>a?</td>    <td>匹配零个或者一个a</td>  </tr>    <tr>    <td>a1|a2</td>    <td>匹配a1或者a2</td>  </tr>    <tr>    <td>a(m)</td>    <td>匹配m个a</td>  </tr>      <tr>    <td>a(m,)</td>    <td>至少匹配m个a</td>  </tr>      <tr>    <td>a(m,n)</td>    <td>匹配m个a 到n个a</td>  </tr>      <tr>    <td>a(,n)</td>    <td>匹配0到n个a</td>  </tr>      <tr>    <td>(...)</td>    <td>将模式元素组成单一元素</td>  </tr></table><h2 id="SQL技巧-数字函数与字符串函数"><a href="#SQL技巧-数字函数与字符串函数" class="headerlink" title="SQL技巧 - 数字函数与字符串函数"></a>SQL技巧 - 数字函数与字符串函数</h2><h3 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h3><table>  <tr>    <th>函数名称</th>    <th>作用</th>  </tr>  <tr>    <td>ABS</td>    <td>求绝对值</td>  </tr>    <tr>    <td>SQRT</td>    <td>求二次方根</td>  </tr>    <tr>    <td>MOD</td>    <td>求余数</td>  </tr>    <tr>    <td>CEIL和CEILING</td>    <td>两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</td>  </tr>  <tr>    <td>FLOOR</td>    <td>向下取整，返回值转化为一个BIGINT</td>  </tr>  <tr>    <td>RAND</td>    <td>生成一个0-1之间的随机数，传入整数参数是，用来产生重复序列</td>  </tr>  <tr>    <td>ROUND</td>    <td>对所传入参数进行四舍五入</td>  </tr>    <tr>    <td>SIGN</td>    <td>返回参数的符号</td>  </tr>    <tr>    <td>POW和POWER</td>    <td>两个函数的功能相同，都是所传参数的次方的结果值</td>  </tr>  <tr>    <td>SIN</td>    <td>求正弦值</td>  </tr>  <tr>    <td>COS</td>    <td>求余弦值</td>  </tr>  <tr>    <td>ACOS</td>    <td>求反余弦值，与函数COS互为反函数</td>  </tr>    <tr>    <td>TAN</td>    <td>求正切值</td>  </tr>  <tr>    <td>ATAN</td>    <td>求反正切值，与函数TAN互为反函数</td>  </tr>  <tr>    <td>COT</td>    <td>求余切值</td>  </tr></table><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table>  <tr>    <th>函数名称</th>    <th>作用</th>  </tr>  <tr>    <td>LENGTH</td>    <td>计算字符串长度函数，返回字符串的字节长度</td>  </tr>    <tr>    <td>CONCAT</td>    <td>合并字符串函数，返回结果为连接参数产生的字符串，参数可以使用一个或者多个</td>  </tr>    <tr>    <td>INSERT</td>    <td>替换字符串函数</td>  </tr>    <tr>    <td>LOWER</td>    <td>将字符串中的字母转换为小写</td>  </tr>    <tr>    <td>UPPER</td>    <td>将字符串中的字母转换为大写</td>  </tr>    <tr>    <td>LEFT</td>    <td>从左侧截取字符串，返回字符串左边的若干个字符</td>  </tr>    <tr>    <td>RIGTH</td>    <td>从右侧截取字符串，返回字符串右边的若干个字符</td>  </tr>    <tr>    <td>TRIM</td>    <td>删除字符串左右两侧的空格</td>  </tr>    <tr>    <td>REPLACE</td>    <td>字符串替换函数，返回替换后的新字符串</td>  </tr>    <tr>    <td>SUBSTRING</td>    <td>截取字符串，返回从指定位置开始的指定长度的字符串</td>  </tr>    <tr>    <td>REVERSE</td>    <td>字符串反转（逆序）函数，返回与原始字符串顺序相反的字符串</td>  </tr></table><h2 id="SQL技巧-日期函数与聚合函数"><a href="#SQL技巧-日期函数与聚合函数" class="headerlink" title="SQL技巧 - 日期函数与聚合函数"></a>SQL技巧 - 日期函数与聚合函数</h2><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><table>  <tr>    <th>函数名称</th>    <th>作用</th>  </tr>  <tr>    <td>CURDATE和CURRENT_DATE</td>    <td>两个函数作用相同，返回当前系统的日期值</td>  </tr>  <tr>    <td>CURTIME和CURRENT_TIME</td>    <td>两个函数作用相同，返回当前系统的时间值</td>  </tr>  <tr>    <td>NOW和SYSDATE</td>    <td>两个函数作用相同，返回当前系统的日期和时间值</td>  </tr>  <tr>    <td>MONTH</td>    <td>获取指定日期中的月份</td>  </tr>  <tr>    <td>MONTHNAME</td>    <td>获取指定日期中的月份英文名称</td>  </tr>  <tr>    <td>DAYNAE</td>    <td>获取指定日期对应的星期几的英文名称</td>  </tr>  <tr>    <td>DAYOFWEEK</td>    <td>获取指定日期对应的一周的索引位置值</td>  </tr>  <tr>    <td>WEEK</td>    <td>获取指定日期是一年中的第几周，返回值的范围是否为0~52或者1~53</td>  </tr>  <tr>    <td>DAYOFYEAR</td>    <td>获取指定日期是一年中的第几天，返回值范围是1~366</td>  </tr>  <tr>    <td>DAYOFMONTH</td>    <td>获取指定日期是一个月中的第几天，返回值是1~31</td>  </tr>  <tr>    <td>YEAR</td>    <td>获取年份，返回值范围是1970~2069</td>  </tr>  <tr>    <td>TIME_TO_SEC</td>    <td>将时间参数转换为秒数</td>  </tr>  <tr>    <td>SEC_TO_TIME</td>    <td>将秒数转换为时间，与TIME_TO_SEC互为反函数</td>  </tr>  <tr>    <td>DATE_ADD和ADDDATE</td>    <td>两个函数功能相同，都是向日期添加指定的时间间隔</td>  </tr>  <tr>    <td>DATE_SUB和SUBDATE</td>    <td>两个函数功能相同，都是向日期减去指定的时间间隔</td>  </tr>  <tr>    <td>ADDTIME</td>    <td>时间加法运算，在原始时间上添加指定的时间</td>  </tr>  <tr>    <td>SUBTIME</td>    <td>时间减法运算，在原始时间上减去指定时间</td>  </tr>  <tr>    <td>DATEDIFF</td>    <td>获取两个日期之间间隔，返回参数1减去参数2的值</td>  </tr>  <tr>    <td>DATE_FORMAT</td>    <td>格式化指定的日期，根据参数返回指定格式的值</td>  </tr>  <tr>    <td>WEEKDAY</td>    <td>获取指定日期在一周内的对应的工作日索引</td>  </tr></table><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><table>  <tr>    <th>函数名称</th>    <th>作用</th>  </tr>  <tr>    <td style="color:red;font-weight:bolder;">MAX</td>    <td>查询 <span style="color:red;font-weight:bolder;">指定列的最大值</span></td>  </tr>  <tr>    <td style="color:red;font-weight:bolder;">MIN</td>    <td>查询 <span style="color:red;font-weight:bolder;">指定列的最小值</span></td>  </tr>  <tr>    <td style="color:red;font-weight:bolder;">COUNT</td>    <td><span style="color:red;font-weight:bolder;">统计查询结果的行数</span></td>  </tr>  <tr>    <td style="color:red;font-weight:bolder;">SUM</td>    <td>求和，返回 <span style="color:red;font-weight:bolder;">指定列的总和</span></td>  </tr>  <tr>    <td style="color:red;font-weight:bolder;">AVG</td>    <td>求平均值，返回 <span style="color:red;font-weight:bolder;">指定列数据的平均值</span></td>  </tr></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;观看笔记：&lt;a href=&quot;https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://fengshana.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MySQL" scheme="https://fengshana.github.io/tags/MySQL/"/>
    
      <category term="数据库优化" scheme="https://fengshana.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
    
      <category term="笔记" scheme="https://fengshana.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>全面深入讲解MySQL数据库优化02</title>
    <link href="https://fengshana.github.io/2020/05/29/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%9602/"/>
    <id>https://fengshana.github.io/2020/05/29/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%9602/</id>
    <published>2020-05-29T11:23:12.998Z</published>
    <updated>2020-05-29T11:36:02.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;seid=13531213796559959972" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;seid=13531213796559959972</a>  </p><p>本课程作为MySQL高级课程，主要讲解了：  </p><ul><li><strong>MySQL</strong>中的<strong>视图</strong>/<strong>存储过程</strong>/<strong>触发器</strong>/<strong>索引</strong>等对象的使用</li><li>常见的<strong>SQL</strong>语句<strong>优化</strong>的技巧</li><li><strong>应用优化</strong></li><li><strong>数据库优化</strong></li><li><strong>数据库日志</strong></li></ul><p>等方面的知识，并通过综合案例，对课程中的知识进行一个整合应用。  </p><p>本课程旨在通过MySQl高级部分内容，可以在满足现有业务需求基础上，对<strong>MySQL底层的体系结构</strong>，及<strong>底层的优化</strong>有一个深入的理解，对<strong>系统的整体性能</strong>进行提升。  </p><h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><blockquote><p>Mysql高级-day02</p></blockquote><p>1） MySql的体系结构概览（MySQL内部原理，内部执行流程有一个认识）<br>2） 存储引擎（InnoDB以及MyISAM）<br>3） 优化SQL步骤（从哪些方面以及参考指标）<br>4） 索引的使用（在SQL优化中如何使用）<br>5） SQL优化  </p><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><h3 id="MySQL的体系结构概览"><a href="#MySQL的体系结构概览" class="headerlink" title="MySQL的体系结构概览"></a>MySQL的体系结构概览</h3><p>MySQL的体系结构图和在进行Web开发的三层架构是相类似的；  </p><p>Web开发时的三层架构：<br>（1）前端发起请求先到达controller；<br>（2）controller调service；service调用dao;<br>（3）dao再去访问数据库；  </p><p>mysql的体系结构当中，首先最上面的部分Connectors实际上代表的就相当于是客户端；<br>在客户端连接当中Natice C API，JDBC，ODBC,.NET，PHP,Perl，Python，Ruby，Cobol这些个；<br>JDBC就很熟悉了；在Java程序当中可以通过JDBC来进行操作mysql；<br>所以最上面部分即mysql连接的客户端通过JDBC来进行操作；<br>然后紧接着中层即MySQL Server；  </p><p>MySQL Server当中最上面一层即Connection Pool连接池；在连接池当中有很多的组件模块Authentication、Thread Reuse、Connection Limits、Check Memory、Caches；<br>也就是客户端发起一个连接；<br>这个连接就会到MySQL Server的这个Connection Pool连接池当中来进行获取一个连接来执行对应的请求；<br>当然，在MySQL Server的Connection Pool进行获取连接的时候还需要进行认证、连接最大数、缓存等相关操作；<br>此为MySQL Server的第一层连接层；<br>连接层主要负责的就是客户端发起一个请求，<br>MySQL Server接收到这个请求之后，开启一段线程进行与客户端请求相关的操作；<br>这是连接层；  </p><p>MySQL Server当中的第二层即Management Services &amp; Utillties、SQL Interface、Parser、Optimizer、Caches &amp; Buffers 这一部分；<br>MySQL Server第二层当中有很多的组件；<br>其中第一个（第一个模块）即MySQL的管理服务以及一些工具；管理层Management Services当中可以进行数据的备份与恢复以及集群安全以及系统配置相关的内容（Backup &amp; Recovery，Security，Replication，Cluster，Administrator，Configuration，Migration &amp; Metadata）<br>第二层的第二个模块：SQL Interface即SQL的一个接口，在此当中可以去进行执行或者是去封装DML、DDL语句以及存储过程、存储函数、视图、触发器等等相关数据库对象（DML、DDL、Stored Procedures，Views ，Triggers ，etc.）</p><p>第二层的第三个模块即：Parser，Parser就是一个解析器，这个解析器解析的是客户端发起的一个请求，客户端发起的这个请求就是SQL语句，SQL语句需要经过这个解析器Parser的解析，解析之后并且在这一块进行相关的过滤（Query Translation,Object Privilege）  </p><p>解析完成之后，在MySQL的内部还需要几个过程；<br>第二层的第四个模块：Optimizer，这个过程实际上称作优化器；即在解析完成了前端请求过来的SQL语句并进行相关的过滤之后，MySQL内部还须要通过其内部的一个优化器，对前端请求来的SQL语句解析并过滤后进行一个优化处理；MySQL内部会按照其内部自己的一个优化体系来进行优化（Access Paths，Statistics）  </p><p>当优化完成之后，接下来还需要进行缓存的一个操作：<br>第二程的第五个模块：Caches &amp; Buffers，即查询在缓存当中有没有要查询的数据；如果存在有对应的树据信息，那么这个时候可能就直接返回给前端客户端了；（Global and Engine ，Specific Caches &amp; Buffers）  </p><p>所以第二层当中的这五个模块就是MySQL的服务层操作；即将前端请求的SQL语句进行封装起来并且进行解析以及相关过滤，以及对其进行优化，最终还需要操作MySQL当中的缓存区的信息；  </p><p>MySQL Server的第三层：Pluggable Storage Engines(Memory，Index &amp; Storage Management)，此处实际指的是存储引擎；<br>Pluggable插件式的存储引擎；<br>以下是MySQL当中的存储引擎:<br>（MyISAM、InnoDB、NDB、Archive、Federated、Memory、Merge、Partner、Community、Custom ….）<br>MySQL版本5.5之后默认的存储引擎即为InnoDB；<br>引擎：发动机；<br>存储引擎是什么？（与飞机上的引擎比较类似，比如客机则有客机的引擎，客机即运送乘客、旅客；但是还有对应的货机，那么货机即对应的即运输货物的；还有直升机等等；不同的飞机有不同的飞机引擎；不同的飞机引擎在相对应的机型当中都发挥着不同的作用；在操作的时候需要考虑到，用户是什么，然后去考虑更适合哪一种引擎，对应的发动机；同样对于mysql的存储引擎是一个道理；存储引擎则需要根据存储的数据不同或者是需求不同而选择不同的存储引擎来进行存储不同的数据；）<br>MySQL Server的第三层为存储引擎层；  </p><p>MySQL Server的第四层即存储层：File system（NTFS，ufs，ext2/3，NFS，SAN，NAS）<br>Files &amp; Logs（Redo，Undo，Data，Index，Binary，Error，Query and Slow）<br>在操作MySQL数据库中表当中的数据的时候，不管是插入还是查询或者修改删除等操作；实际上最终都是操作的File system即文件系统；最终操作的都是文件系统当中的文件；而这个文件系统即就处于磁盘当中；所以最下面一层就文件系统；最重要操作的也就是文件系统；除了在表结构当中的数据，还有对应的索引信息、二进制错误、查询、慢查询日志等；  </p><p>此为MySQL体系结构当中的四层；  </p><p>第一层连接层；负责接收客户端的发送的请求；然后MySQL Server开启一段线程进行相关的认证授权之后再来进行请求的处理；<br>第二层服务层：服务层在主要起到备份恢复、SQL封装、解析过滤、SQL语句优化、缓存查询等相关操作；<br>第三层存储引擎层，选择合适的存储引擎对相关数据进行相关的处理；<br>第四层文件系统：当第三层的数据进行相关的处理完成之后，则需要将数据最终写入文件系统当中，即实际的物理磁盘当中；</p><p>整个MySQL由以下组成：  </p><ul><li>Connection Pool：连接池组件</li><li>Management Service &amp; Utillties: 管理服务和工具组件</li><li>SQL Interface: SQL接口组件</li><li>Parser: 查询分析器组件</li><li>Optimizer: 优化器组件</li><li>Caches &amp; Buffers: 缓冲池组件</li><li>Pluggable Storage Engines: 存储引擎</li><li>File System: 文件系统</li></ul><ol><li>连接层<br>最上层是一些客户和连接服务，包含本地socket通信和大多数基于客户端/服务端工具实现的类似于TCP/IP的通信。<br>主要完成一些类似于连接处理、授权认证、以及相关的安全方案。<br>在该层上引入了线程池的概念，未通过认证安全接入的客户端提供线程。<br>同样在该层上可以实现基于SSL的安全连接，服务器也会为安全接入的每个客户端验证它所具有的的操作权限；  </li><li>服务层<br>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。<br>所有跨存储引擎的功能也在这一层实现，如过程、函数等。<br>在该层，服务器会解析查询并创建相应的内部解析树，并对其完成响应的优化如确定表的查询顺序，是否利用索引等，最后生成响应的执行操作。<br>如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。  </li><li>引擎层<br>存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。<br>不同的存储引擎具有不同的功能，这样可以根据自己的需要，来选取合适的存储引擎；  </li><li>存储层<br>数据存储层，主要是将数据存储在文件系统之上，并完成与存储引擎的交互；  </li></ol><p>和其它数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。<br>主要体现在存储引擎上，插件式的存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离。<br>这种架构可以根据业务的需求和实际需要选择合适的存储引擎；  </p><h2 id="存储引擎-概述"><a href="#存储引擎-概述" class="headerlink" title="存储引擎 - 概述"></a>存储引擎 - 概述</h2><p>和大多数的数据库不同，MySQL中有一个存储引擎的概念，针对不同的存储需求可以选择最优的存储引擎；<br>存储引擎就是存储数据，建立索引，更新查询数据等等技术的实现方式。<br>存储引擎是基于表的，而不是基于库的。<br>索引存储引擎也可被称为表类型。<br>Oracle、SQLServer等数据库只有一种存储引擎。<br>MySQL提供了插件式的存储引擎架构。<br>索引MySQl存在多种存储引擎，可以根据需要使用相应引擎，或者编写存储引擎。<br>MySQL5.0支持的存储引擎包含：InnoDB、MyISAM、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED等，其中InnoDB和BDB提供食物安全表，其他存储引擎是非事务安全表；<br>可以通过指定 show engines，来进行查询当前数据库支持的存储引擎；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">engines</span>;</span><br></pre></td></tr></table></figure><p>创建新表时，如果不指定存储引擎，那么系统就会使用默认的存储引擎。<br>MySQL5.5之前的默认存储引擎是MyISAM，5.5之后就改为InnoDB；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p <span class="comment">#连接mysql</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">engines</span>;</span><br><span class="line"><span class="comment"># Engine 存储引擎的名字</span></span><br><span class="line"><span class="comment"># Support 是否支持该存储引擎，YES/NO/DEFAULT，DEFAULT默认，默认支持的存储引擎InnoDB</span></span><br><span class="line"><span class="comment"># comment 注释</span></span><br></pre></td></tr></table></figure><blockquote><p>Comment注释</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MyISAM : MyISAM <span class="keyword">storage</span> engines</span><br><span class="line">MRG_MYISAM : COLLECTION <span class="keyword">OF</span> IDENTICAL MyISAM <span class="keyword">tables</span></span><br><span class="line">MEMORY : Hash based,stored <span class="keyword">in</span> memory,useful <span class="keyword">for</span> <span class="keyword">temporary</span> <span class="keyword">tables</span></span><br><span class="line">BLACKHOLE : /dev/<span class="keyword">null</span> <span class="keyword">storage</span> engine (anything you wirte <span class="keyword">to</span> it disappears)</span><br><span class="line">CSV : CSV <span class="keyword">storage</span> engine</span><br><span class="line">PERFIRMANCE_SCHEMA : Performance <span class="keyword">Schema</span></span><br><span class="line">ARCHIVE : Archive <span class="keyword">storage</span> engine</span><br><span class="line">FEDERATED ： Federated MySQL <span class="keyword">storage</span> engine</span><br><span class="line">InnoDB ： Support <span class="keyword">transaction</span>,<span class="keyword">row</span>-<span class="keyword">level</span> locking, <span class="keyword">and</span> <span class="keyword">foreign</span> keys # 支持事务，支持行级锁并且支持外键</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看数据库当中的词汇？</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%storage_engine%'</span>;</span><br><span class="line"></span><br><span class="line">default_storage_engine InnoDB</span><br><span class="line">default_tmp_storage_engine InnoDB</span><br><span class="line">storage_engine InnoDB</span><br></pre></td></tr></table></figure><h2 id="存储引擎-特性"><a href="#存储引擎-特性" class="headerlink" title="存储引擎 - 特性"></a>存储引擎 - 特性</h2><p>下面重点介绍几种常用的存储引擎，并对比各个存储引擎之间的区别，如下表所示：  </p><table>    <tr>      <th>特点</th>      <th style="background-color:lightblue;color:red;font-weight:bolder;">InnoDB</th>      <th style="background-color:lightblue;color:red;font-weight:bolder;">MyISAM</th>      <th>MEMORY</th>      <th>MERGE</th>      <th>NDB</th>    </tr>    <tr>      <td>存储限制</td>      <td>64TB</td>      <td>有</td>      <td>有</td>      <td>没有</td>      <td>有</td>    </tr>    <tr>      <td style="background-color:lightblue;color:red;font-weight:bolder;">事务安全</td>      <td>支持</td>      <td></td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <td style="background-color:lightblue;color:red;font-weight:bolder;">锁机制</td>      <td style="background-color:lightgreen;color:red;font-weight:bolder;">行锁（适合高并发）</td>      <td style="background-color:lightgreen;color:red;font-weight:bolder;">表锁</td>      <td>表锁</td>      <td>表锁</td>      <td>行锁</td>    </tr>    <tr>      <td>B树索引</td>      <td>支持</td>      <td>支持</td>      <td>支持</td>      <td>支持</td>      <td>支持</td>    </tr>    <tr>      <td>哈希索引</td>      <td>（当前我看到的是支持的）</td>      <td></td>      <td>支持</td>      <td></td>      <td></td>    </tr>    <tr>      <td>全文索引</td>      <td>支持（5.6版本之后）</td>      <td>支持</td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <td>集群索引</td>      <td>支持</td>      <td></td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <td>数据索引</td>      <td>支持</td>      <td></td>      <td>支持</td>      <td></td>      <td>支持</td>    </tr>     <tr>      <td>索引缓存</td>      <td>支持</td>      <td>支持</td>      <td>支持</td>      <td>支持</td>      <td>支持</td>    </tr> <tr>      <td>数据可压缩</td>      <td></td>      <td>支持</td>      <td></td>      <td></td>      <td></td>    </tr> <tr>      <td>空间使用</td>      <td>高</td>      <td>低</td>      <td>N/A</td>      <td>低</td>      <td>低</td>    </tr> <tr>      <td>内存使用</td>      <td>高</td>      <td>低</td>      <td>中等</td>      <td>低</td>      <td>高</td>    </tr>     <tr>      <td>批量插入速度</td>      <td>低</td>      <td>高</td>      <td>高</td>      <td>高</td>      <td>高</td>    </tr>     <tr>      <td style="background-color:lightblue;color:red;font-weight:bolder;">支持外键</td>      <td style="background-color:lightgreen;color:red;font-weight:bolder;">支持</td>      <td></td>      <td></td>      <td></td>      <td></td>    </tr></table><p>下面将重点介绍最常使用的两种存储引擎：InnoDB、MyISAM，另外两种MEMORY、MERGE，了解即可；  </p><h2 id="存储引擎-InnoDB特性"><a href="#存储引擎-InnoDB特性" class="headerlink" title="存储引擎 - InnoDB特性"></a>存储引擎 - InnoDB特性</h2><p>InnoDB存储引擎是MySQL的默认存储引擎。<br>InnoDB存储引擎提供了具有提交、回滚、崩溃恢复能力的事务安全。<br>但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些，并且会占用更多的磁盘空间以保留数据和索引；  </p><p>InnoDB存储引擎不同于其他存储引擎的特点：  </p><p><strong>事务控制</strong></p><p>MySQL 当中事务默认自动提交；  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create database demo_02<span class="built_in"> default </span><span class="attribute">charset</span>=utf8mb4;  </span><br><span class="line">use demo_01;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table goods_innodb(</span><br><span class="line">  id int(11) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  name varchar(20) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  primary key(id)</span><br><span class="line">)<span class="attribute">ENGINE</span>=innodb<span class="built_in"> default </span><span class="attribute">charset</span>=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> goods_innodb(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Meta20'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>;<span class="comment"># 如不提交，则其他客户端无法查看得到插入的数据；</span></span><br><span class="line"><span class="comment"># MySQL默认的隔离级别为可重复读</span></span><br></pre></td></tr></table></figure><p><strong>外键约束</strong></p><p>MySQL支持外键的存储引擎只有InnoDB，在创建外键的时候，要求父表必须有对应的索引，子表在创建索引的时候，也会自动的创建对应的索引；<br>下面两张表中，<br>1） country_innodb是父表，country_id为主键索引；<br>2） city_innodb是子表，country_id字段为外键，对应于country_innodb表中的主键country_id；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> country_innodb(</span><br><span class="line">  country_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  counry_name <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> ,</span><br><span class="line">  primary <span class="keyword">key</span> (country_id)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> city_innodb(</span><br><span class="line">  city_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  city_name <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  country_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  primary <span class="keyword">key</span> (city_id),</span><br><span class="line">  <span class="keyword">key</span> idx_fk_country_id(country_id),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">'fk_city_contry'</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(country_id) <span class="keyword">REFERENCES</span> country_innodb(country_id) <span class="keyword">ON</span> DFLETE RESTRICT <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ON DELETE RESTRICT 在删除主表数据时，如果有关联记录则不删除</span></span><br><span class="line"><span class="comment"># ON UPDATE CASCADE 更新主表时，如果子表有关联记录，则更新子表记录  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> country_innodb <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'China'</span>),(<span class="literal">null</span>,<span class="string">'America'</span>),(<span class="literal">null</span>,<span class="string">'Japan'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> city_innodb <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Xian'</span>,<span class="number">1</span>),(<span class="literal">null</span>,<span class="string">'NewYork'</span>,<span class="number">2</span>),(<span class="literal">null</span>,<span class="string">'BeiJing'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>在创建索引时，可以指定在删除、更新父表时，对子表进行的相应操作，包括RESTRICT、CASCADE、SET NULL和NO ACTION。<br>RESTRICT和NO ACTION相同，是指限制在子表有关联记录的情况下，父表不能更新；<br>CASCADE表示父表在更新或者删除时，更新或者删除子表对应的记录；<br>SET NULL则表示父表在更新或者删除的时候，子表对应字段被SET NULL。<br>针对上面创建的两个表，子表在外键指定是ON DELETE RESTRICT ON UPDATE CASCADE方式的，那么在主表删除记录的时候，如果子表有对应记录，则不允许删除。主表在更新记录的时候，如果子表有对应记录，则子表也会对应更新；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> country_innodb;<span class="comment">#主表</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city_innodb;<span class="comment">#子表；子表当中的外键country_id指向主表country_innodb当中的主键country_id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> country_innodb <span class="keyword">where</span> country_id=<span class="number">2</span>;</span><br><span class="line"><span class="comment">#此处由于外键关联，所以导致删除报错，无法更新；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> country_innodb <span class="keyword">set</span> country_id=<span class="number">100</span> <span class="keyword">where</span> country_id=<span class="number">1</span>;</span><br><span class="line"><span class="comment">#此时子表当中关联有1；那么说则刚才的子表当中对应country_id也为1 的记录将会进行相应的更新；  </span></span><br><span class="line">查看主表以及子表：  </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> country_innodb;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city_innodb;</span><br></pre></td></tr></table></figure><p><strong>存储方式</strong></p><p>存储方式实际上指的是InnoDB这个存储引擎对应的表在数据库当中以数据文件的存储方式；<br>InnoDB存储表和索引有以下两种方式：  </p><ol><li>使用共享表空间存储，这种方式创建的表的表结构保存在.frm文件中，数据和索引保存在 innodb_data_home_dir和innodb_data_file_path定义的表空间中，可以是多个文件；  </li><li>使用多表空间存储，这种方式存储的表的表结构仍然存在.frm文件中，但是每个表的数据和索引单独保存在.ibd中；</li></ol><h2 id="存储引擎-MyISAM特性"><a href="#存储引擎-MyISAM特性" class="headerlink" title="存储引擎 - MyISAM特性"></a>存储引擎 - MyISAM特性</h2><p>MyISAM不支持事务，也不支持外键，其优势是访问的速度快，对事务的完整性没有要求或者以SELECT、INSERT为主的应用基本上都可以使用这个引擎来创建表，有以下两个比较重要的特点：  </p><p><strong>不支持事务</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods_myisam(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">engine</span>=myisam <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> goods_myisam <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'电脑3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><p>通过测试可以发现，在MyISAM存储引擎中，是没有事务控制的；  </p><p><strong>文件存储方式</strong></p><p>每个MyISAM在磁盘上存储成3个文件，其文件名都和表明相同，但拓展名称分别是：</p><ul><li>.frm (存储表定义)</li><li>.MYD (MYData，存储数据)</li><li>.MYI (MYIndex，存储索引)</li></ul><h2 id="存储引擎-Memory与Merge特性"><a href="#存储引擎-Memory与Merge特性" class="headerlink" title="存储引擎 - Memory与Merge特性"></a>存储引擎 - Memory与Merge特性</h2><p>Memory（内存）存储引擎将表的数据放在内存中。<br>每个MEMORY表实际对应一个磁盘文件，格式是.frm，改文件中只存储表的数据结构，而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表达效率。<br>MEMORY类型的表访问非常的快，因为他的数据是存放在内存中的，并且默认使用HASH索引，但是服务一旦关闭，表中的数据就会丢失；  </p><p>MERGE（合并）存储引擎是一组MyISAM表的组合，这些MyISAM表必须结构完全相同，MERGE表本身并没有存储数据，对MERGE类型的表可以进行查询、更新、删除操作，这些操作实际上是对内部的MyISAM表进行的；  </p><p>对于MERGE类型表的插入操作是通过INSERT_METHOD子句定义插入的表，可以有三个不同的值，使用FIRST或者LAST值使得插入操作被相应的作用在第一或者是最后一个表上，不定义这个子句或者定义为NO，表示不能对这个MERGE表执行插入操作；  </p><p>可以对MERGE表进行DROP操作，但是这个操作知识删除MERGE表的定义，对内部的表是没有任何影响的；  </p><p>MERGE存储引擎与view视图有些类似；  </p><p>下面是一个创建和使用MERGE表的示例：<br>1）创建三个测试表 payment_2006、payment_2007、payment_all，其中payment_all是前两个表的MERGE表；</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">create table order_1990(</span><br><span class="line">  order_id int,</span><br><span class="line">  order_money double(10,2),</span><br><span class="line">  order_address varchar(50),</span><br><span class="line">  primary key (order_id)</span><br><span class="line">)<span class="attribute">engine</span>=myisam<span class="built_in"> default </span><span class="attribute">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line">create table order_1991(</span><br><span class="line">  order_id int,</span><br><span class="line">  order_money double(10,2),</span><br><span class="line">  order_address varchar(50),</span><br><span class="line">  primary key (order_id)</span><br><span class="line">)<span class="attribute">engine</span>=myisam<span class="built_in"> default </span><span class="attribute">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line">create table order_all(</span><br><span class="line">  order_id int,</span><br><span class="line">  order_money double(10,2),</span><br><span class="line">  order_address varchar(50),</span><br><span class="line">  primary key (order_id)</span><br><span class="line">)<span class="attribute">engine</span>=merge  </span><br><span class="line">union = ( order_1990, order_1991 )  </span><br><span class="line"><span class="attribute">INSERT_METHOD</span>=LAST  </span><br><span class="line">default <span class="attribute">charset</span>=utf8;</span><br></pre></td></tr></table></figure><p>2） 分别向两张表中插入记录  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1990 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">100.0</span>,<span class="string">'上海'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1990 <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">100.0</span>,<span class="string">'北京'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1991 <span class="keyword">values</span>(<span class="number">10</span>,<span class="number">100.0</span>,<span class="string">'北京'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1991 <span class="keyword">values</span>(<span class="number">11</span>,<span class="number">100.0</span>,<span class="string">'上海'</span>);</span><br></pre></td></tr></table></figure><p>3） 查询三张表当中的数据：<br>order_1990表中的数据：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> order_1990;</span><br></pre></td></tr></table></figure><p>order_1991表中的数据：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> order_1991;</span><br></pre></td></tr></table></figure><p>order_all表中的数据：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> order_all;</span><br></pre></td></tr></table></figure><h2 id="存储引擎-选择原则"><a href="#存储引擎-选择原则" class="headerlink" title="存储引擎 - 选择原则"></a>存储引擎 - 选择原则</h2><p>在选择存储引擎时，应该选择根据应用系统的特点选择合适的存储引擎。<br>对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合；<br>以下是几种常用的存储引擎的使用环境：  </p><ul><li>InnoDB<ul><li>是MySQL的默认存储引擎，用于事务处理应用程序，支持外键。</li><li>如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询以外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。  </li><li>InnoDB存储引擎除了有效的降低由于删除和更新导致的锁定，还可以确保事务的完整提交和回滚，对于类似于计费系统或者是财务系统等对数据准确性要求比较高的系统，InnoDB是最合适的选择；  </li></ul></li><li>MyISAM<ul><li>如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的；  </li></ul></li><li>MEMORY<ul><li>将所有的数据保存在内存当中RAM，在需要快速定位记录和其他类似数据环境下，可以提供几块的访问。</li><li>MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。  </li><li>MEMORY表通常用于更新不太频繁的小表，用以快速得到访问结果。  </li></ul></li><li>MERGE<ul><li>用于将一些列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用他们。</li><li>MERGE表的优点在于可以突破对单个MyISAM表的大小限制，并且通过将不同的表分布在多个磁盘上，可以有效的改善MERGE表的访问效率，这对于存储诸如数据仓库等VLDB环境十分合适。  </li></ul></li></ul><p>有一个点：就是有没有类似emm，MERGE然后内部基层的表的存储引擎是InnoDB这种的；如果是这种的话；不是有那个什么分库分表什么的？（我不太了解分库分表，乱说的）  </p><h2 id="优化SQL步骤-SQL执行频率"><a href="#优化SQL步骤-SQL执行频率" class="headerlink" title="优化SQL步骤 - SQL执行频率"></a>优化SQL步骤 - SQL执行频率</h2><p>在应用的开发过程中，由于初期数据量小，开发人员写SQL语句时更重视功能上的实现，但是当应用系统正式上线后，随着生产数据的急剧增长，很多SQL语句开始逐渐显露出性能问题，对生产的影响也越来越大，此时这些有问题的SQL语句就成为整个系统性能的瓶颈，因此必须要对它们进行优化，本章将详细介绍MySQL中优化SQL语句的方法。  </p><p>当面对一个有SQL性能问题的数据库时，应该从何处入手来进行系统的分析，使得能够尽快定位问题SQL并尽快解决问题。  </p><h3 id="查看SQL执行频率"><a href="#查看SQL执行频率" class="headerlink" title="查看SQL执行频率"></a>查看SQL执行频率</h3><p>MySQL客户端连接成功后，通过 show [ session | global ] status 命令可以提供服务器状态信息。<br>show [ session | global ]status 可以根据需要加上参数 “session”或者“global”来显示session级（当前连接）的统计结果和global级（自数据库上次启动至今）的统计结果。<br>如果不写，默认使用参数是“session”。  </p><p>下面的命令显示了当前session中所有统计参数的值：</p><blockquote><p>针对数据库</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Com_______'</span>; <span class="comment"># _ 占位字符，匹配的模糊字符 查询级别为session会话级别</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Com_______'</span>; <span class="comment"># _ 匹配的模糊字符 查询级别为global全局级别</span></span><br><span class="line"></span><br><span class="line">Com_binlog</span><br><span class="line">Com_commit</span><br><span class="line">Com_delete <span class="comment">#删除的次数</span></span><br><span class="line">Com_insert <span class="comment">#插入的次数</span></span><br><span class="line">Com_repair</span><br><span class="line">Com_select <span class="comment">#查询的次数</span></span><br><span class="line">Com_revoke</span><br><span class="line">Com_signal</span><br><span class="line">Com_update <span class="comment">#修改的次数</span></span><br><span class="line">Com_xa_end</span><br><span class="line"></span><br><span class="line"><span class="comment">#此时查询的为当前连接session的信息，并非为整个数据库全局的统计参数</span></span><br><span class="line"><span class="comment">#如果需要查询全局则：show global status like 'Com_______';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过知道当前数据库当中是以查询为主还是增删改为主；为SQL优化提供借鉴性指标</span></span><br></pre></td></tr></table></figure><p>Com_xxx表示每个xxx语句执行的次数，通常比较关心的是以下几个统计参数</p><table>  <tr>    <th>参数</th>    <th>含义</th>  </tr>  <tr>    <td>Com_select</td>    <td>执行select操作的次数，一次查询只累加1</td>  </tr>  <tr>    <td>Com_insert</td>    <td>执行INSERT操作的次数，对于批量插入的INSERT操作，只累加一次</td>  </tr>  <tr>    <td>Com_update</td>    <td>执行UPDATE操作的次数</td>  </tr>  <tr>    <td>Com_delete</td>    <td>执行DELETE操作的次数</td>  </tr>  <tr>    <td>Innodb_rows_read</td>    <td>select查询返回的行数</td>  </tr>  <tr>    <td>Innodb_rows_inserted</td>    <td>执行INSERT操作插入的行数</td>  </tr>  <tr>    <td>Innodb_rows_updated</td>    <td>执行UPDATE操作更新的行数</td>  </tr>  <tr>    <td>Innodb_rows_deleted</td>    <td>执行DELETE操作删除的行数</td>  </tr>  <tr>    <td>Connections</td>    <td>视图连接MySQL服务器的次数</td>  </tr>  <tr>    <td>Uptime</td>    <td>服务器工作时间</td>  </tr>  <tr>    <td>Slow_queries</td>    <td>慢查询的次数</td>  </tr></table><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Com_*** : 这些参数对于所有存储引擎的表操作都会进行累计</span><br><span class="line">Innodb_** : 这几个参数只是针对<span class="type">Innodb</span>存储引擎的，累加的算法也略有不同。</span><br></pre></td></tr></table></figure><blockquote><p>针对InnoDB存储引擎</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">针对于InnoDB：  </span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Innodb_rows_%'</span>;<span class="comment"># 此时查询出来的为InnoDB的各个操作所影响的行，数量</span></span><br><span class="line"></span><br><span class="line">Innodb_rows_deleted 2 <span class="comment"># 该存储引擎中删去的行数</span></span><br><span class="line">Innodb_rows_inserted 49<span class="comment"># 该存储引擎中插入的行数</span></span><br><span class="line">Innodb_rows_read 380<span class="comment"># 该存储引擎中读取的行数</span></span><br><span class="line">Innodb_rows_updated 15<span class="comment"># 更新的行数</span></span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="keyword">use</span> demo_01l</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> goods_innodb; <span class="comment"># Innodb_rows_read此时会增加，查询出来的结果集有n条记录，则Innodb_rows_read增加n</span></span><br><span class="line"></span><br><span class="line">Innodb_rows_deleted 2 <span class="comment"># 该存储引擎中删去的行数</span></span><br><span class="line">Innodb_rows_inserted 49<span class="comment"># 该存储引擎中插入的行数</span></span><br><span class="line">Innodb_rows_read 382<span class="comment"># 该存储引擎中读取的行数</span></span><br><span class="line">Innodb_rows_updated 15<span class="comment"># 更新的行数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> goods_innodb <span class="keyword">set</span> <span class="keyword">name</span> =<span class="string">'Meta30'</span>; <span class="comment"># Innodb_rows_update此时会增加；修改影响n条记录，则Innodb_rows_update增加n;</span></span><br><span class="line"></span><br><span class="line">Innodb_rows_deleted 2 <span class="comment"># 该存储引擎中删去的行数</span></span><br><span class="line">Innodb_rows_inserted 49<span class="comment"># 该存储引擎中插入的行数</span></span><br><span class="line">Innodb_rows_read 382<span class="comment"># 该存储引擎中读取的行数</span></span><br><span class="line">Innodb_rows_updated 17<span class="comment"># 更新的行数</span></span><br></pre></td></tr></table></figure><h2 id="优化SQL步骤-定位低效SQL"><a href="#优化SQL步骤-定位低效SQL" class="headerlink" title="优化SQL步骤 - 定位低效SQL"></a>优化SQL步骤 - 定位低效SQL</h2><p>可以通过以下两种方式定位执行效率较低的SQL语句。  </p><ul><li>慢查询日志：通过慢查询日志定位那些执行效率较低的SQL语句，用–log-slow-queries[ =file_name ]选项启动时，mysqld写一个包含所有执行时间超过long_query_time秒的SQL语句的日志文件。</li><li>show processlist：慢查询日志在查询结束以后才记录，所以在应该用反映执行效率出现问题的时候查询慢日志并不能定位问题，可以使用show processlist命令查看当前MySQL在进行的线程，包括线程的状态、是否锁表等，可以实时地查看SQL的执行情况，同时对一些锁表操作进行优化。(实时)  </li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">show processlist;</span><br><span class="line"></span><br><span class="line"><span class="meta">#（1）id列：用户登录mysql时，系统分配的“connection_id”，可以使用函数connection_id()查看；</span></span><br><span class="line"><span class="meta">#（2）user列：显示当前用户，如果不是root，这个命令就只显示用户权限范围的sql语句；</span></span><br><span class="line"><span class="meta">#（3）host列：显示这个语句是从哪个ip的哪个端口上发的，可以用来跟踪出现问题语句的用户；</span></span><br><span class="line"><span class="meta">#（4）db列：显示这个进程目前连接的是哪个数据库；</span></span><br><span class="line"><span class="meta">#（5）command列：显示当前连接的执行命令，一般取值为休眠（sleep）、查询（query）、连接（connect）等；</span></span><br><span class="line"><span class="meta">#（6）time列，显示这个状态持续的时间，单位是秒；</span></span><br><span class="line"><span class="meta">#（7）state列，显示使用当前连接的sql语句的状态，很重要的列。state描述的是语句执行中的某个状态。一个sql语句，以查询为例，可能需要经过copying to tmp table， sorting result， sending data等状态才可以完成。  </span></span><br><span class="line"><span class="meta">#（8）info列，显示这个sql语句，是判断问题语句的一个重要依据。</span></span><br></pre></td></tr></table></figure><h2 id="优化SQL步骤-explain指令介绍"><a href="#优化SQL步骤-explain指令介绍" class="headerlink" title="优化SQL步骤 - explain指令介绍"></a>优化SQL步骤 - explain指令介绍</h2><p>通过以上步骤查询到效率低的SQL语句后，可以通过EXPLAIN或者DESC命令获取MySQL如何执行SELECT语句的信息，包括SELECT语句执行过程中表如何连接和连接的顺序。  </p><p>查询SQL语句的执行计划：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_item</td>    <td>const</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>4</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr></table><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="built_in">title</span>=<span class="string">'阿尔卡特（OT-979）冰川白 联通3G手机3'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_item</td>    <td>ALL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>9816098</td>    <td>Using where</td>  </tr></table><table>  <tr>    <th>字段</th>    <th>含义</th>  </tr>  <tr>    <td>id</td>    <td>select查询的序列号，是一组数字，表示的是查询中select子句或者是操作表的顺序。（与表结构执行的顺序有关系）</td>  </tr>  <tr>    <td>select_type</td>    <td>表示SELECT的类型，常见的取值有SIMPLE（简单表，即不使用表连接或者是子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个SELECT）等</td>  </tr>  <tr>    <td>table</td>    <td>输出结果集的表（当前输出的数据与哪一张表有关）</td>  </tr>  <tr>    <td>type</td>    <td>表示表的连接类型，性能由好到差的连接类型为（system---->const---->eq_ref------>ref------->ref_or_null------>index_merge------>index_subquery------->range------>index------>all）</td>  </tr>  <tr>    <td>possible_keys</td>    <td>表示查询时，可能使用的索引。</td>  </tr>  <tr>    <td>key</td>    <td>表示实际使用的索引</td>  </tr>  <tr>    <td>key_len</td>    <td>索引字段的长度</td>  </tr>  <tr>    <td>ref</td>    <td>引用</td>  </tr>  <tr>    <td>rows</td>    <td>扫描行的数量</td>  </tr>  <tr>    <td>extra</td>    <td>执行情况的说明和描述，额外的内容，前面几个字段当中没有表述清楚的，在这个字段当中表述出来</td>  </tr></table><blockquote><p>explain 用来查看SQL语句的执行计划。</p></blockquote><h2 id="优化SQL步骤-explain之id"><a href="#优化SQL步骤-explain之id" class="headerlink" title="优化SQL步骤 - explain之id"></a>优化SQL步骤 - explain之id</h2><p><strong>环境准备</strong></p><p>用户表、角色表、用户角色表（多对多关系）  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="string">'t_role'</span>(</span><br><span class="line">  <span class="string">'id'</span> varchar(32) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'role_name'</span> varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'role_code'</span> varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'description'</span> varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (<span class="string">'id'</span>),</span><br><span class="line">  UNIQUE KEY <span class="string">'union_role_name'</span> (<span class="string">'role_name'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">'t_user'</span>(</span><br><span class="line">  <span class="string">'id'</span> varchar(32) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'username'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'name'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'password'</span> varchar(96)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (<span class="string">'id'</span>),</span><br><span class="line">  UNIQUE KEY <span class="string">'union_user_username'</span> (<span class="string">'user_name'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">'user_role'</span>(</span><br><span class="line">  <span class="string">'id'</span> int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> autoincrement,</span><br><span class="line">  <span class="string">'user_id'</span> varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'role_id'</span> varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (<span class="string">'id'</span>),</span><br><span class="line">  KEY <span class="string">'fk_ur_user_id'</span>(<span class="string">'user_id'</span>),</span><br><span class="line">  KEY <span class="string">'fk_ur_role_id'</span>(<span class="string">'role_id'</span>),</span><br><span class="line">  CONSTRAINT <span class="string">'fk_ur_role_id'</span> FOREIGN KEY (<span class="string">'role_id'</span>) REFERENCES <span class="string">'t_role'</span> (<span class="string">'id'</span>) ON DELETE <span class="literal">NO</span> ACTION ON UPDATE <span class="literal">NO</span> ACTION,</span><br><span class="line">  CONSTRAINT <span class="string">'fk_ur_user_id'</span> FOREIGN KEY (<span class="string">'user_id'</span>) REFERENCES <span class="string">'t_user'</span> (<span class="string">'id'</span>) ON DELETE <span class="literal">NO</span> ACTION ON UPDATE <span class="literal">NO</span> ACTION</span><br><span class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入用戶数据</span></span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'1'</span>,<span class="string">'老王'</span>,<span class="string">'xxxxxyyyyyyy'</span>,<span class="string">'超级管理员'</span>);</span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'2'</span>,<span class="string">'老李'</span>,<span class="string">'xxxxxyyyyyyyzzzzz'</span>,<span class="string">'系统管理员'</span>);</span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'3'</span>,<span class="string">'老头子'</span>,<span class="string">'xxxxxyyyytyyyzzzzz'</span>,<span class="string">'学生1'</span>);</span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'4'</span>,<span class="string">'老婆子'</span>,<span class="string">'xxxxxyywyyyyyzzzzz'</span>,<span class="string">'学生2'</span>);</span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'5'</span>,<span class="string">'super'</span>,<span class="string">'xxxxxyyfyyyyyzzzzz'</span>,<span class="string">'学生3'</span>);</span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'6'</span>,<span class="string">'admin'</span>,<span class="string">'xxxxxyyyyyyyzzzzze'</span>,<span class="string">'学生4'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入角色数据</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="comment"># 插入用户角色数据</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure><p><strong>explain当中的id字段</strong></p><p>id字段是select查询的序号(并不是自增，控制表结构的执行顺序)，是一组数字，表示是的是处查询中执行select子句或者是操作表的顺序，id情况有三种：<br>（1）<strong>id相同表示加载表的顺序是从上到下</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_role r,t_user u,user_role ur <span class="keyword">where</span> r.id=ur.role_id <span class="keyword">and</span> u.id=ur.user_id;<span class="comment"># 多表联查</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>r</td>    <td>PRIMARY</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>5</td>    <td>NULL</td>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>ur</td>    <td>ref</td>    <td>fk_ur_user_id,fk_ur_role_id</td>    <td>fk_ur_role_id</td>    <td>99</td>    <td>db03.r.id</td>    <td>1</td>    <td>Using where</td>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>u</td>    <td>eq_ref</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>98</td>    <td>db.ur.user_id</td>    <td>1</td>    <td>NULL</td>  </tr></table><p>（2）<strong>id不同id值越大，优先级越高，越先被执行</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_role <span class="keyword">WHERE</span> <span class="keyword">id</span>=</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> role_id <span class="keyword">FROM</span> user_role <span class="keyword">WHERE</span> user_id=</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> t_user <span class="keyword">WHERE</span> username=<span class="string">'stu1'</span></span><br><span class="line">  )</span><br><span class="line">)<span class="comment"># 嵌套子查询</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>PRIMARY</td>    <td>t_role</td>    <td>const</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>98</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr>  <tr>    <td>2</td>    <td>SUBQUERY</td>    <td>user_role</td>    <td>ref</td>    <td>fk_ur_user_id</td>    <td>fk_ur_user_id</td>    <td>99</td>    <td>const</td>    <td>1</td>    <td>Using where</td>  </tr>  <tr>    <td>3</td>    <td>SUBQUERY</td>    <td>t_user</td>    <td>const</td>    <td>unique_user_username</td>    <td>unique_user_username</td>    <td>137</td>    <td>const</td>    <td>1</td>    <td>Using index</td>  </tr></table><p>（3）<strong>id有相同，也有不同，同时存在。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_role r,</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> user_role ur <span class="keyword">WHERE</span> ur.<span class="string">'user_id'</span>=<span class="string">'2'</span></span><br><span class="line">) a  </span><br><span class="line"><span class="keyword">WHERE</span> r.id=a.role_id;  </span><br><span class="line"><span class="comment">#三表查询又连接了一个子查询</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>PRIMARY</td>    <td>< derived2></td>    <td>ALL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>2</td>    <td>Using where</td>  </tr>  <tr>    <td>1</td>    <td>PRIMARY</td>    <td>r</td>    <td>eq_ref</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>98</td>    <td>a.role_id</td>    <td>1</td>    <td>NULL</td>  </tr>  <tr>    <td>2</td>    <td>DERIVED</td>    <td>ur</td>    <td>ref</td>    <td>fk_ur_user_id</td>    <td>fk_ur_user_id</td>    <td>99</td>    <td>const</td>    <td>1</td>    <td>Using index condition</td>  </tr></table><h2 id="优化SQL步骤-explain之select-type"><a href="#优化SQL步骤-explain之select-type" class="headerlink" title="优化SQL步骤 - explain之select_type"></a>优化SQL步骤 - explain之select_type</h2><p><strong>explain之select_type</strong><br>表示SELECT的类型，常见的取值，如下表所示（从上往下，效率越来越低）：  </p><table>  <tr>    <th>select_type</th>    <th>含义</th>  </tr>  <tr>    <td>SIMPLE</td>    <td>简单的select查询，查询中不包含子查询或者UNION。</td>  </tr>  <tr>    <td>PRIMARY</td>    <td>查询中若包含任何复杂的子查询，最外层查询标记为该标识。</td>  </tr>  <tr>    <td>SUBQUERY</td>    <td>在SELECT或者WHERE列表中包含了子查询。</td>  </tr>  <tr>    <td>DERIVED</td>    <td>在FROM列表中包含的子查询，被标记为DERIVED（衍生）MYSQL或递归执行这些子查询，把结果放在临时表中。</td>  </tr>  <tr>    <td>UNION</td>    <td>若第二个SELECT出现在UNION之后，则标记为UNION；若UNION包含在FROM子句的子查询中，外层SELECT将标记为：DERIVED</td>  </tr>  <tr>    <td>UNION RESULT</td>    <td>从UNION表获取结果的SELECT</td>  </tr></table><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item;</span><br><span class="line"># SIMPLE  </span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=(<span class="keyword">select</span> id <span class="keyword">from</span> user_role <span class="keyword">where</span> role_id=<span class="string">'9'</span>);  </span><br><span class="line"># <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id： <span class="keyword">PRIMARY</span> ；  </span><br><span class="line">#(<span class="keyword">select</span> id <span class="keyword">from</span> user_role <span class="keyword">where</span> role_id=<span class="string">'9'</span>)：SUBQUERY  </span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> a.* <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="string">'1'</span>,<span class="string">'2'</span>)) a;</span><br><span class="line"># <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="string">'1'</span>,<span class="string">'2'</span>): <span class="keyword">DERIVED</span>；存储至衍生的临时表</span><br><span class="line"># <span class="keyword">select</span> a.* <span class="keyword">from</span> ： <span class="keyword">PRIMARY</span>  derived2指的是<span class="keyword">derived</span>指的是衍生的表a，<span class="number">2</span>则指的是id，执行操作表顺序字段；</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'1'</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'2'</span>;</span><br><span class="line">#<span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'1'</span>: <span class="keyword">PRIMARY</span></span><br><span class="line">#<span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'2'</span> ： <span class="keyword">UNION</span></span><br><span class="line"># <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'1'</span>的结果  &amp;&amp;  <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'2'</span>的结果联合起来： <span class="keyword">UNION</span> RESULT</span><br></pre></td></tr></table></figure><h2 id="优化SQL步骤-explain之table-、type"><a href="#优化SQL步骤-explain之table-、type" class="headerlink" title="优化SQL步骤 - explain之table 、type"></a>优化SQL步骤 - explain之table 、type</h2><p><strong>explain之table</strong><br>展示这一行的数据是关于哪一张表的；  </p><p><strong>explain之type</strong><br>type显示的是访问类型，是较为重要的一个指标，可取值为：  </p><table>  <tr>    <th>type</th>    <th>含义</th>  </tr>  <tr>    <td>NULL</td>    <td>MySQL不访问任何表，索引，直接返回结果</td>  </tr>  <tr>    <td>system</td>    <td>表只有一行记录（等同于系统表），这是const类型的特例，一般不会出现</td>  </tr>  <tr>    <td>const</td>    <td>表示通过索引一次就找到了，const用于比较primary key或者unique索引。因为只匹配一行数据，索引很快。如将主键置于where列表中，MySQL就能将该查询转换成一个常量。(根据主键或者唯一索引进行查询)</td>  </tr>  <tr>    <td>eq_ref</td>    <td>类似ref，区别在于使用的是唯一索引，使用主键的关联查询，关联查询出的记录只有一条。常见于主键或唯一索引扫描</td>  </tr>  <tr>    <td>ref</td>    <td>非唯一性索引扫描，返回皮诶某个单独值的所有行。本质上也是野种索引访问，返回所有匹配某个单独值的所有行（多个）</td>  </tr>  <tr>    <td>range</td>    <td>只检索给定返回的行，使用一个索引来选择行。where之后出现between，<，>，in等操作</，></td>  </tr>  <tr>    <td>index</td>    <td>index与ALL的区别为index类型只是遍历了索引树，通常比ALL快，ALL是遍历数据文件。</td>  </tr>  <tr>    <td>all</td>    <td>将遍历全表以找到匹配的行</td>  </tr></table><p><strong>type为NULL</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> now(); # 查询当前时间(查询效率非常高) ： <span class="keyword">type</span>-&gt;<span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>No tables used</td>  </tr></table><p><strong>type为system</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'1'</span>) a;： <span class="keyword">type</span>-&gt;<span class="keyword">system</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>PRIMARY</td>    <td>< derived2></td>    <td>system</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>1</td>    <td>NULL</td>  </tr>  <tr>    <td>2</td>    <td>DERIVED</td>    <td>t_user</td>    <td>const</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>98</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr></table><p><strong>type为const</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">id</span>=<span class="string">'1'</span>;<span class="comment"># 根据主键查询返回一条记录：type-&gt;const</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>t_user</td>    <td>const</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>98</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr></table><p><strong>type为const</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> username=<span class="string">'stu1'</span>;<span class="comment">#根据唯一索引查询返回一条记录：type-&gt;const</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>t_user</td>    <td>const</td>    <td>unique_user_username</td>    <td>unique_user_username</td>    <td>137</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr></table><p><strong>type为eq_ref</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_user;//id有1、2、3、4、5、6</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_role;//id有10、5、7、8、9</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user u ,t_role r <span class="keyword">where</span> u.id=r.id;<span class="comment">#业务逻辑层面不符合，只是数据库硬性查询（强行关联）出一个type为eq_ref的示例而已</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>r</td>    <td>ALL</td>    <td>PRIMARY</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>5</td>    <td>NULL</td>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>u</td>    <td>eq_ref</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>98</td>    <td>demo_02.r.id</td>    <td>1</td>    <td>NULL</td>  </tr></table><p><strong>type为ref</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> t_user;<span class="comment">#查询t_user表当中的索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_user_name <span class="keyword">on</span> t_user(<span class="string">'name'</span>);</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'a'</span>;<span class="comment">#根据非唯一性索引进行查询，返回的记录只有一条</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>t_user</td>    <td>ref</td>    <td>idx_user_name</td>    <td>idx_user_name</td>    <td>137</td>    <td>const</td>    <td>1</td>    <td>Using index condition</td>  </tr></table><p><strong>type为range(范围查询)</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.（between <span class="keyword">and</span>）、（&gt;、&lt;、&gt;=、&lt;=）<span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><p><strong>type为index(指的即索引)</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user;//查询所有数据，进行全表扫描，即到数据文件当中进行读取；<span class="keyword">type</span>为<span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id <span class="keyword">from</span> t_user;//此时<span class="keyword">type</span>为<span class="keyword">index</span>；因为id为主键，主键则走主键索引；</span><br></pre></td></tr></table></figure><p>结果值从最好到最坏依次是：  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">NULL</span> &gt;<span class="built_in"> system </span>&gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; all</span><br></pre></td></tr></table></figure><h2 id="优化SQL步骤-explain之key-rows-extra"><a href="#优化SQL步骤-explain之key-rows-extra" class="headerlink" title="优化SQL步骤 - explain之key rows extra"></a>优化SQL步骤 - explain之key rows extra</h2><p><strong>explain之key</strong>  </p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">possible_keys:</span>显示可能应用在这张表的索引，一个或者多个；</span><br><span class="line"><span class="symbol">key:</span>实际使用的索引，如果为NULL，则没有使用索引；</span><br><span class="line">key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好（越短执行效率越高）；</span><br></pre></td></tr></table></figure><p><strong>explain之rows</strong>  </p><p>扫描行的数量。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="type">name</span> =<span class="string">'a'</span>;#<span class="type">name</span>建了索引，所以查询<span class="keyword">rows</span>为<span class="number">1</span>行</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">password</span>=<span class="string">'aaa'</span>;# <span class="keyword">password</span>没有建立索引，整表扫描；<span class="keyword">rows</span>即<span class="keyword">SQL</span>语句查询时所查询的行数；</span><br></pre></td></tr></table></figure><p><strong>explain之extra</strong>  </p><p>其他的额外的执行计划信息，在该列展示。<br>（using_filesort以及using_temporary非常耗性能；需要优化using_filesort以及using_temporary；保持using_index）</p><table>  <tr>    <th>extra</th>    <th>含义</th>  </tr>  <tr>    <td>using_filesort</td>    <td>说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取，称为“文件排序”</td>  </tr>  <tr>    <td>using_temporary</td>    <td>使用了临时表保存中间结果，MySQL对查询结果排序时使用临时表。常见于order by 和group by</td>  </tr>  <tr>    <td>using_index</td>    <td>表示相应的select操作使用了覆盖索引，避免访问表的数据行，效率不错。</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>;<span class="comment">#按照id进行排序</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">password</span>;<span class="comment">#根据文件进行排序；即需要扫描文件当中的内容，然后再去进行排序；效率非常低；这个时候如果需要进行优化的话，可以在password字段上与name一样建立索引；</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span>; <span class="comment">#此时依然是using_filesort根据文件排序</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> t_user <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span>;<span class="comment">#此时则使用的是using_index根据索引排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span>;<span class="comment">#此时extra为null，原因是根据name字段建立了索引</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">password</span>;<span class="comment">#此时password字段没有建立索引；extra为using temporary；using filesort效率低；</span></span><br></pre></td></tr></table></figure><h2 id="优化SQL步骤-show-profile"><a href="#优化SQL步骤-show-profile" class="headerlink" title="优化SQL步骤 - show profile"></a>优化SQL步骤 - show profile</h2><p>MySQL从5.0.37版本开始增加了对 show profiles 和show profile语句的支持。  </p><p>show profiles能够在做SQL优化时帮助了解事件都耗费到哪里去了；  </p><p>通过 have_profiling 参数，能够看到当前MySQL是否支持profile；  </p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">select</span> <span class="comment">@@</span>have_profiling;<span class="meta">#系统变量；YES/NO</span></span><br></pre></td></tr></table></figure><p>默认 profiling 是关闭的，可以通过set语句在Session级别开启profiling：  </p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="symbol">@profiling</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> <span class="attribute">profiling</span>=1;# 开启profiling开关；0:未开启；1：开启</span><br></pre></td></tr></table></figure><p>通过profile，能够更清楚的了解SQL执行的过程；<br>首先，可以执行一系列的操作，如下图所示：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> db01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title=<span class="string">'abc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">profiles</span>;<span class="comment">#查看之前每一个操作的耗时情况 query_id(当前查询的id)、duration（执行的耗时时间）、query（查询的sql）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use db01;其实底层即select database();</span></span><br></pre></td></tr></table></figure><p>执行完上述命令之后，再执行show profiles指令，来查看SQL语句执行的耗时：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">profiles</span>;<span class="comment"># query_id、duration、query</span></span><br></pre></td></tr></table></figure><p>通过 show profile for query query_id 语句可以查看到该SQL执行过程中每个线程的状态和消耗的时间；  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show<span class="built_in"> profile </span><span class="keyword">for</span> query 6;#6即通过show profiles查询出来的query_id;  status、duration</span><br></pre></td></tr></table></figure><table>  <tr>    <th>status（经历的每一个阶段）</th>    <th>duration（每一个阶段的耗时情况）</th>  </tr>  <tr>    <td>starting（开启）</td>    <td>0.000046</td>  </tr>  <tr>    <td>checking permissions（校验权限）</td>    <td>...</td>  </tr>  <tr>    <td>opening tables（打开表）</td>    <td>...</td>  </tr>    <tr>    <td>init（初始化）</td>    <td>...</td>  </tr>    <tr>    <td>system lock（系统锁）</td>    <td>...</td>  </tr>    <tr>    <td>optimizing（优化器）</td>    <td>...</td>  </tr>    <tr>    <td>statistics（统计）</td>    <td>...</td>  </tr>    <tr>    <td>perparing（准备）</td>    <td>...</td>  </tr>    <tr>    <td>executing（执行）</td>    <td>...</td>  </tr>    <tr>    <td>sending data（发送数据）</td>    <td>...</td>  </tr>    <tr>    <td>end（结束）</td>    <td>...</td>  </tr>    <tr>    <td>query end（查询结束）</td>    <td>...</td>  </tr>    <tr>    <td>closing tabls（关闭表）</td>    <td>...</td>  </tr>    <tr>    <td>freeing itmes（释放其他项）</td>    <td>...</td>  </tr>    <tr>    <td>cleaning up（清除）</td>    <td>...</td>  </tr></table><p>（select count(*) from tb_item；该sql语句的时间都耗费在sending data上了；）  </p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">TIP:  </span></span><br><span class="line"><span class="code">    Sending data 状态表示MySQL线程开始访问数据行并把结果放回给客户端，而不仅仅是返回给客户端。  </span></span><br><span class="line"><span class="code">    由于Sending data 状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整个查询中耗时最长的状态。</span></span><br></pre></td></tr></table></figure><p>在获取到最耗时时间的线程状态后，MySQL支持进一步选择all、cpu、block io、context switch、page faults 等明细类型等查看MySQL在使用什么资源上耗费了过高的时间。<br>例如，选择查看CPU的耗费时间：  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select<span class="built_in"> profile </span>cpu <span class="keyword">for</span> query 6;# status、duration、CPU_user、CPU_System查询到的是id为6的该条sql语句在各个阶段当中cpu的耗费情况；</span><br><span class="line"></span><br><span class="line">select<span class="built_in"> profile </span>all <span class="keyword">for</span> query 6;# status、duration、CPU_user、CPU_system、context_voluntary、context_involuntary、block_ops_in、block_ops_out、<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure><blockquote><p>通过show profile可以分析SQL语句各个阶段的耗时情况</p></blockquote><h2 id="优化SQL步骤-trace工具"><a href="#优化SQL步骤-trace工具" class="headerlink" title="优化SQL步骤 - trace工具"></a>优化SQL步骤 - trace工具</h2><p>mysql的服务端server有一个步骤就是optimizer，优化sql部分；按照mysql当中具体对应的规则对SQL进行优化处理；trace即分析优化器</p><p><strong>trace分析优化器执行计划</strong><br>MySQL5.6提供了对SQL的跟踪 trace，通过trace文件能够进一步了解为什么优化器选择A计划，而不是B计划。  </p><p>打开trace，设置格式为JSON，并设置trace最大能够使用的内存大小，避免解析过程中因为默认内存过小而不能够完整展示。  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">SET</span> optimizer_trace =<span class="string">'enabled=on'</span>, <span class="attribute">end_markers_in_json</span>=on;# optimizer_trace =<span class="string">'enabled=on'</span>进行开启；<span class="attribute">end_markers_in_json</span>=on 设置格式为JSON</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">optimizer_trace_max_mem_size</span>=1000000;# 日志文件占用内存大小</span><br></pre></td></tr></table></figure><p>执行SQL语句：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>最后，检查information_schema.optimizer_trace就可以知道MySQL是如何执行SQL的：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> infomation_schema.optimizer_trace\G;# infomation_schema系统库；optimizer_trace系统库当中的日志表</span><br><span class="line"></span><br><span class="line"># QUERY 查询的SQL语句；<span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> id&lt;<span class="number">4</span>;</span><br><span class="line"># TRACE 跟踪信息；在跟踪信息当中最终<span class="keyword">select</span> * 当中的* 最终解析为tb_item表当中的每一个具体的字段</span><br></pre></td></tr></table></figure><h2 id="索引的使用-验证索引提升查询效率"><a href="#索引的使用-验证索引提升查询效率" class="headerlink" title="索引的使用 - 验证索引提升查询效率"></a>索引的使用 - 验证索引提升查询效率</h2><p><strong>索引的使用</strong><br>索引时候数据库优化最常用也是最重要的手段之一，通过索引通常可以帮助用户解决大多数的MySQL的性能优化问题；  </p><p><strong>验证索引提升查询效率</strong><br>在准备的表结构tb_item中，一共存储了300万条记录；  </p><p><strong>A.</strong> 根据ID查询  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_items;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1888</span>;<span class="comment">#id字段具有主键索引</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1999</span>\G;</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据title进行精确查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title=<span class="string">'阿尔卡特'</span>;<span class="comment">#查询速度慢，因为title字段没有索引，查询效率低，创建主键即自动生成主键索引；</span></span><br><span class="line"><span class="comment">#查看SQL语句的执行计划：  </span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title=<span class="string">'阿尔卡特'</span>\G;</span><br></pre></td></tr></table></figure><p>处理方案，针对title字段，创建索引：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_item_title <span class="keyword">on</span> tb_item(<span class="built_in">title</span>);</span><br></pre></td></tr></table></figure><p>索引创建完成之后，再次查询：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title=<span class="string">'阿尔卡特'</span>\G;</span><br><span class="line"><span class="comment"># 创建索引的过程中，mysql在做什么？表tb_item中有300万条记录，那么在创建索引的时候就会对这300万条记录重建索引；所以此时即数据库底层在重建索引；创建完索引之后再进行查询效率则变快；索引是优化查询最有效的方式之一；</span></span><br></pre></td></tr></table></figure><p>查询速度很快，接近0s，主要的原因是因为id为主键，有索引；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1999</span>\G;</span><br></pre></td></tr></table></figure><p><strong>准备环境</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">'tb_seller'</span>(</span><br><span class="line">  <span class="string">'sellerid'</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="string">'name'</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="string">'nickname'</span> <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  <span class="string">'password'</span> <span class="built_in">varchar</span>(<span class="number">60</span>),</span><br><span class="line">  <span class="string">'status'</span> <span class="built_in">varchar</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="string">'address'</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="string">'createtime'</span> datetime,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="string">'sellerid'</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入记录 导入基本数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_seller <span class="keyword">values</span> ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建联合索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name_sta_addr <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>,<span class="keyword">status</span>,address);</span><br></pre></td></tr></table></figure><p>创建了索引并不是一定会提高效率；创建了索引并且需要合理运用索引才能够提高查询效率；  </p><h2 id="索引的使用-全值匹配"><a href="#索引的使用-全值匹配" class="headerlink" title="索引的使用 - 全值匹配"></a>索引的使用 - 全值匹配</h2><p><strong>避免索引失效</strong>  </p><p>(1) 全值匹配，对索引中所有列都指定具体值。<br>该情况下，索引生效，执行效率提高。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>\G;</span><br></pre></td></tr></table></figure><h2 id="索引的使用-最左前缀法则"><a href="#索引的使用-最左前缀法则" class="headerlink" title="索引的使用 - 最左前缀法则"></a>索引的使用 - 最左前缀法则</h2><p><strong>避免索引失效</strong>  </p><p>(2)最左前缀法则<br>tb_seller创建了一个复合索引即name、status、address这三个字段；<br>如果索引了多列，要遵守最左前缀法则。<br>指的是查询从索引的最左前列开始，并且不跳过索引中的列。<br>匹配最左前缀法则，走索引：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">'小米科技'</span>;<span class="comment"># key:idx_name_sta_addr； key_len：403</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'1'</span>;<span class="comment"># key:idx_name_sta_addr； key_len：410</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>;<span class="comment"># key:idx_name_sta_addr； key_len：813</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>;<span class="comment"># key:NULL key_len：NULL 此时则不再走索引；因为不再符合最左前缀法则，没有以最左边的列开始；  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span> <span class="keyword">and</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;<span class="comment"># key:idx_name_sta_addr； key_len：813 此时是走索引的；与where列表当中字段的先后顺序无关；会检查where条件列表中包不包含最左列；而是与复合索引当中的是否存在有复合索引当中的最左字段；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span> ;<span class="comment">#跳过索引列不走索引; key:idx_sellter_name_sta_addr；key_len: 403；此时索引的长度是403；也就是这是执行 explain select * from tb_seller where name ='小米科技'; 时所走的索引；即后面的 and address='北京市' 并未走索引；</span></span><br></pre></td></tr></table></figure><blockquote><p>违反最左前缀法则，索引失效；<br>需要包含复合索引当中的最左列，并且不能跳过复合索引当中的某一列进行查询否则复合索引失效；</p></blockquote><h2 id="索引的使用-索引失效情况（范围查询、字段运算）"><a href="#索引的使用-索引失效情况（范围查询、字段运算）" class="headerlink" title="索引的使用 - 索引失效情况（范围查询、字段运算）"></a>索引的使用 - 索引失效情况（范围查询、字段运算）</h2><p><strong>避免索引失效</strong>  </p><p>（3）范围查询右边的列，不能使用索引；<br>根据前面的两个字段name、status查询是走索引的，但是最后一个条件address没有用到索引。  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">explain select * <span class="keyword">from</span> tb_seller where <span class="attribute">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="attribute">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> <span class="attribute">address</span>=<span class="string">'北京市'</span>;# key:idx_name_sta_addr； key_len：813；此时三个字段name、status、address三个字段都走了索引；  </span><br><span class="line"></span><br><span class="line">explain select * <span class="keyword">from</span> tb_seller where name =<span class="string">'小米科技'</span> <span class="keyword">and</span> status &gt;<span class="string">'1'</span> <span class="keyword">and</span><span class="built_in"> address </span>=<span class="string">'北京市'</span>;# key:idx_name_sta_addr； key_len：410;此时走的索引是name和status字段的索引；而范围查询status&gt;<span class="string">'1'</span>之后的address并没有走索引；  </span><br><span class="line"><span class="comment"># 范围查询之后的索引字段将失效</span></span><br></pre></td></tr></table></figure><p>（4）不要在索引列上进行运算操作，索引将失效；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller  <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;<span class="comment">#此时走索引</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">substring</span>(<span class="keyword">name</span>,<span class="number">3</span>,<span class="number">2</span>)=<span class="string">'科技'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">substring</span>(<span class="keyword">name</span>,<span class="number">3</span>,<span class="number">2</span>)=<span class="string">'科技'</span>;<span class="comment">#此时key为null以及key_len为null；而type为ALL则说明了进行了全表扫描；没有走索引</span></span><br></pre></td></tr></table></figure><p>（5）字符串不加单引号，会造成索引失效；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'0'</span>;<span class="comment"># 此时key:idx_name_sta_addr；key_len：410；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="number">0</span>;<span class="comment"># 此时key：idx_name_sta_addr；key_len：403；索引长度为403；则说明走的索引为name字段的索引；而status字段的索引并没有走；造成了status=0 该索引字段的失效；当status字段取值没有加单引号时，mysql底层检测到status字段为varchar类型所以会对其没有加单引号的取值进行隐式类型转换；隐式类型转换了之后该status索引字段就失效了；因为底层对该字段进行了运算操作；</span></span><br></pre></td></tr></table></figure><h2 id="索引的使用-覆盖索引"><a href="#索引的使用-覆盖索引" class="headerlink" title="索引的使用 - 覆盖索引"></a>索引的使用 - 覆盖索引</h2><p><strong>避免索引失效</strong>  </p><p>（6）尽量使用覆盖索引，避免使用 select *  </p><p>尽量使用覆盖索引（只访问索引的查询（索引列完全包含查询列）），减少select * ；  </p><p>如果查询列，超出索引列，也会降低性能；  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> =<span class="string">'小米科技'</span>;# extra为<span class="keyword">using</span> <span class="keyword">index</span> condition指的是：在查询的时候确实用到了<span class="type">name</span>这个字段的索引；但是用到了<span class="type">name</span>这个字段的索引信息之后，在返回数据的时候还需要进行索引回调查询；  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="type">name</span> , status ,address <span class="keyword">where</span> <span class="type">name</span>=<span class="string">'小米科技'</span>; # 此时extra为<span class="keyword">using</span> <span class="keyword">where</span> ;<span class="keyword">using</span> <span class="keyword">index</span>；此时表示的是：可以通过索引进行查询；但是此时并不需要进行回调查询了；原因就在于查询的字段在索引结构当中已经被记录了；所以并不需要去进行回调查询；  </span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="type">name</span> , status  <span class="keyword">where</span> <span class="type">name</span>=<span class="string">'小米科技'</span>;#同上</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="type">name</span> ,  address <span class="keyword">where</span> <span class="type">name</span>=<span class="string">'小米科技'</span>;#同上</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="type">name</span> ,  address ,<span class="keyword">password</span> <span class="keyword">where</span> <span class="type">name</span>=<span class="string">'小米科技'</span>;#复合索引当中并未包括<span class="keyword">password</span>字段则此时<span class="type">name</span>索引字段以及address索引字段当中并没有包括<span class="keyword">password</span>字段的信息，则此时需要去回调查询<span class="keyword">password</span>字段的信息；即extra为<span class="keyword">using</span> index_condition</span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">TIP:  </span></span><br><span class="line">索引回调查询指的是：  </span><br><span class="line"><span class="code">    using index : 使用覆盖索引的时候就会出现</span></span><br><span class="line"><span class="code">    using where : 在查找使用索引的情况下，需要回表去查询所需的数据</span></span><br><span class="line"><span class="code">    using index condition ：查找使用了索引，但是需要回表查询数据（从索引当中拿到了数据，然后再到表结构当中去拿到该数据对应的一整行数据，因为该name索引字段并没有记录所有的数据，只是记录了那么字段的数据；所以需要回表查询数据；即用了索引还需要回调查询）</span></span><br><span class="line"><span class="code">    using index ; using where : 查找使用了索引，但是需要的数据都在索引列中能找到，索引不需要回表查询数据</span></span><br></pre></td></tr></table></figure><p>（7） in走索引，not in 索引失效</p><h2 id="索引的使用-or索引失效情况"><a href="#索引的使用-or索引失效情况" class="headerlink" title="索引的使用 - or索引失效情况"></a>索引的使用 - or索引失效情况</h2><p><strong>避免索引失效</strong><br>（7）用or分隔开的条件，如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到；  </p><p>示例：name字段是索引列，而createtime不是索引列，中间是or进行连接是不走索引的；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> createtime=<span class="string">'2088-01-01 12:00:00'</span>\G;<span class="comment">#key:idx_name_sta_addr； key_len: 403;此时走索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">or</span> createtime=<span class="string">'2088-01-01 12:00:00'</span>\G;<span class="comment">#key:idx_name_sta_addr； key_len: NULL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> nickname=<span class="string">'小米官方旗舰店'</span>;<span class="comment">#此时走索引；key_len:403;走的是name字段的索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">or</span> nickname=<span class="string">'小米官方旗舰店'</span>;<span class="comment">#换成or之后，nickname字段非索引字段；所以此时将全表扫描；不会走索引；key_len:NULL；以及type为ALL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or之后的字段如果没有索引的话；那么整个where列表当中即便有索引字段也将都失效，不再走索引；</span></span><br></pre></td></tr></table></figure><h2 id="索引的使用-like模糊匹配"><a href="#索引的使用-like模糊匹配" class="headerlink" title="索引的使用 - like模糊匹配"></a>索引的使用 - like模糊匹配</h2><p><strong>避免索引失效</strong>  </p><p>（8）以%开头的Like模糊查询，索引失效。  </p><p>如果仅仅是尾部模糊查询，索引不会失效。<br>如果是头部模糊查询匹配，则索引失效。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">like</span> <span class="string">'小米科技'</span>;#key: idx_name_sta_addr； key_len: <span class="number">403</span>; 此时走索引；索引走的是<span class="type">name</span>字段</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">like</span> <span class="string">'%小米科技'</span>;#key: <span class="keyword">NULL</span>； key_len: <span class="keyword">NULL</span>; 此时不走索引；且<span class="keyword">type</span>为<span class="keyword">ALL</span>；全表扫描</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">like</span> <span class="string">'%小米科技%'</span>;#key: <span class="keyword">NULL</span>； key_len: <span class="keyword">NULL</span>; 此时不走索引；且<span class="keyword">type</span>为<span class="keyword">ALL</span>；全表扫描</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">like</span> <span class="string">'科技%'</span>;#key: idx_name_sta_addr； key_len: <span class="number">403</span>; 此时走索引；索引走的是<span class="type">name</span>字段</span><br></pre></td></tr></table></figure><p>类似 “%科技%” 这种情况在业务逻辑处理当中还是比较多的；但是这样效率将十分低下；所以针对这种情况的处理方式为：<br>覆盖索引：覆盖索引指的是，尽量不要使用select * 这种方式进行查询；而是使用复合索引当中的那些索引列，即索引字段；即复合索引为idx_name_sta_addr，当中包含的索引字段为name、status、address；所以select 查询列名称的时候尽量查询的列名称为复合索引当中的索引列，或者是其他索引的字段（例如唯一索引的索引字段、主键索引的索引字段等）；<br>即通过覆盖索引就可以解决 “%科技%” like模糊查询效率低下的情况（条件是select 查询的字段都需要是索引字段，如果出现了查询非索引字段则将不再走索引）；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> sellerid <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%科技%'</span>;<span class="comment"># 则此时是走索引的；key:idx_seller_name_sta_addr；key_len：813；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> sellerid,<span class="keyword">name</span> <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%科技%'</span>;<span class="comment"># 则此时是走索引的；key:idx_seller_name_sta_addr；key_len：813；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> sellerid,<span class="keyword">name</span>,<span class="keyword">status</span>,address <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%科技%'</span>;<span class="comment"># 则此时是走索引的；key:idx_seller_name_sta_addr；key_len：813；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> sellerid,<span class="keyword">name</span>,<span class="keyword">status</span>,address,<span class="keyword">password</span> <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%科技%'</span>;<span class="comment"># 则此时是不走索引的，由于password字段并不是索引字段，所以将造成不会走索引的局面；key:NULL；key_len：NULL；</span></span><br></pre></td></tr></table></figure><h2 id="索引的使用-全表扫描更快"><a href="#索引的使用-全表扫描更快" class="headerlink" title="索引的使用 - 全表扫描更快"></a>索引的使用 - 全表扫描更快</h2><p><strong>避免索引失效</strong>  </p><p>（9）如果MySQL评估使用索引比全表更慢，则不使用索引；  </p><p>如果发现走全表扫描比走索引要快，这个时候mysql就会走全表扫描；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address=<span class="string">'北京市'</span>;<span class="comment">#此时key:NULL 以及key_len: NULL；由于address是复合索引当中的索引字段但是又不满足最左前缀法则；所以不走索引；  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);<span class="comment">#在tb_seller表中的address字段上建立索引；单列索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address=<span class="string">'北京市'</span>;<span class="comment"># 但是此时仍然没有走索引；possible_key出现有idx_seller_address；但是key为NULL；以及key_len为NULL；type为ALL；即走的还是全表扫描</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address=<span class="string">'西安市'</span>;<span class="comment">#此时是走索引的，key为idx_address；key_len为403;索引走的是address字段；extra为using index condition</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#同样一条SQL语句，只是传入的参数不同；也就导致了是否走索引的不同；一个是全表扫描没有走索引；而另外一个是走了索引idx_seller_address；  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#原因就在于：这个与数据库当中的数据是存在一定的关系的；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller; <span class="comment">#该表当中一共有12条记录；这12条记录当中出现有address为“北京市”的记录行数就有11条记录；只有一条是1条是“西安市”；  </span></span><br><span class="line"><span class="comment">#如果数据量大，且精确查询的内容又在表中占比大；此时就极有可能走的是全表扫描而非走索引了；速度更快</span></span><br></pre></td></tr></table></figure><h2 id="索引的使用-NULL值的判定"><a href="#索引的使用-NULL值的判定" class="headerlink" title="索引的使用 - NULL值的判定"></a>索引的使用 - NULL值的判定</h2><p><strong>避免索引失效</strong>  </p><p>（10） is NULL，is  NOT NULL  <span style="color:red;"><strong>有时</strong></span> 索引失效；  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">explain</span>  <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address <span class="keyword">is</span> <span class="keyword">null</span>;# 此时是走索引的；key：idx_seller_address ;key_len：<span class="number">403</span> 走的索引字段为address</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span>  <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;# 此时是没有走索引的；key：<span class="keyword">null</span> ;key_len:<span class="keyword">null</span>;<span class="keyword">type</span>:<span class="keyword">all</span> 走的是全表扫描</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line">#当前该表当中每一条记录都address字段记录取值都是 <span class="keyword">not</span> <span class="keyword">null</span>; 当前<span class="keyword">explain</span> <span class="keyword">where</span> address <span class="keyword">is</span> <span class="keyword">null</span>时走了索引，即address <span class="keyword">is</span> <span class="keyword">null</span>这样的记录在表当中占比较少此时则走索引；而<span class="keyword">explain</span> <span class="keyword">where</span> address <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>时没有走索引；而此时 address <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>则在表当中占比较多；所以就不会去走索引而是全表扫描；这个与前面所说的全表扫描更快是一个道理；全表扫描与走索引的这两种方式哪一种更快就选择哪一种方式；也就是说mysql底层会去自动的判断如果走全表扫描更快就走全表扫描；如果走索引更快就走索引的这种方式；  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">null</span>;#此时走索引；key:idx_name_sta_addr；key_len：<span class="number">403</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>; # 此时不走索引；key:<span class="keyword">null</span>； key_len：<span class="keyword">null</span>; <span class="keyword">type</span>：<span class="keyword">ALL</span> 走的是全表扫描</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">null</span>;# 此时不走索引；key：<span class="keyword">null</span>；key_len: <span class="keyword">null</span> ; <span class="keyword">type</span>:<span class="keyword">all</span> 走的是全表扫描</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>; # 此时走了索引；key:idx_name; key_len:<span class="number">138</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> <span class="type">name</span> =<span class="keyword">null</span> <span class="keyword">where</span> id &lt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_user;#则此时除了id为<span class="number">1</span>的记录其余的记录的<span class="type">name</span>字段就变成了<span class="keyword">null</span>；所以如果此时查询t_user表当中<span class="type">name</span>字段为<span class="keyword">is</span> <span class="keyword">null</span>则走全表扫描；而查询<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>则走索引；</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> t_user;#此时在t_user表当中<span class="type">name</span>字段是存在索引的；</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">null</span>;# key:<span class="keyword">null</span> ; key_len:<span class="keyword">null</span>;<span class="keyword">type</span>:<span class="keyword">all</span> 走的是全表扫描（原因就在于此时在表当中记录<span class="type">name</span>字段为<span class="keyword">null</span>占比大于<span class="type">name</span>字段<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>；所以全表扫描与走索引的方式这两者相比较之下，全表扫描更快；）</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;#此时是走索引的；key:idx_user_name;key_len:<span class="number">138</span>;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 也就是说<span class="keyword">is</span> <span class="keyword">null</span>与<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>；有时是会走索引的有时又不会走索引；这要分情况而定；这个根据数据库当中的数据量来决定的；如果查询的字段在数据量当中的<span class="keyword">null</span>值占比较多,那么这个时候<span class="keyword">is</span> <span class="keyword">null</span>将会走全表扫描而<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>则走索引；如果查询的字段在数据量当中绝大部分都是存在有值的也就是说<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>占据较多；则此时<span class="keyword">is</span> <span class="keyword">null</span>就会走索引；而<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>则走全表扫描；</span><br></pre></td></tr></table></figure><h2 id="索引的使用-in和not-in"><a href="#索引的使用-in和not-in" class="headerlink" title="索引的使用 - in和not in"></a>索引的使用 - in和not in</h2><p><strong>避免索引失效</strong>  </p><p>（11）in 走索引； not in 索引失效；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> sellerid <span class="keyword">in</span> (<span class="string">'oppo'</span>,<span class="string">'xiaomi'</span>,<span class="string">'sina'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> sellerid <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'oppo'</span>,<span class="string">'xiaomi'</span>,<span class="string">'sina'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> sellerid <span class="keyword">in</span> (<span class="string">'oppo'</span>,<span class="string">'xiaomi'</span>,<span class="string">'sina'</span>);<span class="comment">#此时使用了索引；key:PRIMARY；key_len:402;  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> sellerid <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'oppo'</span>,<span class="string">'xiaomi'</span>,<span class="string">'sina'</span>);<span class="comment">#此时未走索引；索引失效；key:NULL；key_len:NULL；type:ALL 全表扫描</span></span><br></pre></td></tr></table></figure><h2 id="索引的使用-单列索引与复合索引选择"><a href="#索引的使用-单列索引与复合索引选择" class="headerlink" title="索引的使用 - 单列索引与复合索引选择"></a>索引的使用 - 单列索引与复合索引选择</h2><p><strong>避免索引失效</strong>  </p><p>（12）单列索引和复合索引  </p><p>尽量使用复合索引，而少量使用单列索引；  </p><p>创建复合索引：  </p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create <span class="built_in">index</span> idx_name_sta_address on tb_seller(<span class="keyword">name</span>,<span class="keyword">status</span>,address);</span><br><span class="line"></span><br><span class="line">就相当于创建了三个索引：  </span><br><span class="line">* <span class="keyword">name</span></span><br><span class="line">* <span class="keyword">name</span> + <span class="keyword">status</span></span><br><span class="line">* <span class="keyword">name</span> + <span class="keyword">status</span> + address</span><br></pre></td></tr></table></figure><p>创建单列索引：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_status <span class="keyword">on</span> tb_seller(<span class="keyword">status</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br></pre></td></tr></table></figure><p>当对name、status、address字段进行搜索的时候，数据库只会选择一个索引；所以此时在这种情况下单列索引并不占优势；  </p><p>数据库会选择一个最优的索引来使用，并不会使用全部索引；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tb_seller;<span class="comment">#查看tb_seller表当中的索引</span></span><br><span class="line"><span class="comment"># PRIMARY 主键索引</span></span><br><span class="line"><span class="comment"># idx_name_sta_address name</span></span><br><span class="line"><span class="comment"># idx_name_sta_address status</span></span><br><span class="line"><span class="comment"># idx_name_sta_address address</span></span><br><span class="line"><span class="comment"># idx_seller_address address</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除单列索引</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> <span class="keyword">from</span> idx_seller_address <span class="keyword">on</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看tb_seller表的索引</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span>  <span class="keyword">status</span>=<span class="string">'0'</span> <span class="keyword">and</span> address=<span class="string">'西安市'</span>;<span class="comment">#此时使用复合索引；key:idx_name_sta_addr；key_len：813</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除复合索引</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_name_sta_address <span class="keyword">on</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建单列索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_status <span class="keyword">on</span> tb_seller(<span class="keyword">status</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看单列索引</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tb_seller;</span><br><span class="line"><span class="comment">#PRIMARY 主键索引</span></span><br><span class="line"><span class="comment"># idx_seller_name 单列索引name字段</span></span><br><span class="line"><span class="comment"># idx_seller_status 单列索引status字段</span></span><br><span class="line"><span class="comment"># idx_seller_address 单列索引address字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'0'</span> <span class="keyword">and</span> address=<span class="string">'西安市'</span>;<span class="comment">#此时走索引但是；key:idx_seller_name; key_len:403;只走了name字段的索引；而status字段以及address字段的索引未走；相当于白创建了status以及address字段的索引了；</span></span><br><span class="line"><span class="comment">#即此时possible_key：idx_seller_name、idx_seller_status、idx_seller_address；这三个索引可能都会用到；但是实际上只用到了idx_seller_name索引；即name字段的索引；</span></span><br><span class="line"><span class="comment">#为什么选择了name字段来作为该SQL的索引；原因在于：数据库会选择一个最优的索引来使用；并不会使用全部索引；也就意味着name该字段的索引在这三个索引当中最优；</span></span><br><span class="line"><span class="comment">#为什么name该字段的索引idx_seller_name最优，</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;<span class="comment"># 因为在此表当中，name查询的精确值为“小米科技”辨识度最高，记录行为1；而status字段取值为0的记录行超过1；address字段取值为“西安市”记录行也只有1；也应该是遵循了从左到右的一个判断；所以此时idx_seller_name索引最优；从而走了idx_seller_name索引；  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">status</span>=<span class="string">'0'</span> <span class="keyword">and</span> address=<span class="string">'西安市'</span>;<span class="comment">#此时没有name字段；而address在数据表当中辨识度最高；即记录行为1；所以此时走的索引自然即为idx_seller_address；</span></span><br><span class="line"><span class="comment">#key:idx_seller_address;key_len:403;possible_key:idx_seller_status,idx_seller_address;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">status</span>=<span class="string">'0'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>;<span class="comment"># 如果此时address取精确值为“北京市”；而在数据库当中address取值为“北京市”的记录行辨识度并不高；也就是取值为“北京市”的address字段其记录行有很多超过1，即总共12条记录，有11条记录当中的address都是“北京市”，从而其辨识度并不高；</span></span><br><span class="line"><span class="comment">#而此时status字段相比较之下，取值为0的记录行数，总行数12行，而status取值为0的记录行数为3行，那么此时较之address的辨识度自然是要高一些；所以将走status字段的索引，即idx_seller_status索引；</span></span><br><span class="line"><span class="comment"># possible_key:idx_seller_status,idx_seller_address；key:idx_seller_status;key_len:7；</span></span><br></pre></td></tr></table></figure><p>也就是说：数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部的索引；  </p><h2 id="索引的使用-查看索引使用情况"><a href="#索引的使用-查看索引使用情况" class="headerlink" title="索引的使用 - 查看索引使用情况"></a>索引的使用 - 查看索引使用情况</h2><p><strong>查看索引使用情况</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Handler_read%'</span>;<span class="comment">#查看的是当前会话中索引的使用情况</span></span><br><span class="line"><span class="comment">#Variable_name  Value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Handler_read%'</span>;<span class="comment">#查看的是全局中索引的使用情况</span></span><br></pre></td></tr></table></figure><table border="1">  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Handler_read_first</td>    <td>0</td>  </tr>  <tr>    <td>Handler_read_key</td>    <td>2</td>  </tr>  <tr>    <td>Handler_read_last</td>    <td>0</td>  </tr>    <tr>    <td>Handler_read_next</td>    <td>0</td>  </tr>    <tr>    <td>Handler_read_prev</td>    <td>0</td>  </tr>    <tr>    <td>Handler_read_rnd</td>    <td>0</td>  </tr>    <tr>    <td>Handler_read_rnd_next</td>    <td>22</td>  </tr></table><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Handler_read_first</span>: 索引中第一条被读的次数。如果较高，表示服务器正在自行大量全索引扫描（这个值越低越好）；</span><br><span class="line"></span><br><span class="line"><span class="attribute">Handler_read_key</span>: 如果索引正在工作，这个值代表一个行被索引值读取的次数；如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）；</span><br><span class="line"></span><br><span class="line"><span class="attribute">Handler_read_next</span>: 按照键顺序读下一行的请求数。如果用范围约束或者如果执行索引扫描来查询索引列，该值增加；  </span><br><span class="line"></span><br><span class="line"><span class="attribute">Handler_read_prev</span>: 按照键顺序读前一行的请求数，该读方法主要用于优化ORDER BY.....DESC；</span><br><span class="line"></span><br><span class="line"><span class="attribute">Handler_read_rnd</span>: 根据固定位置读一行的请求数。如果正执行大量查询并需要对结果进行排序该值较高。可能使用了大量需要MySQL扫描整个表的查询或者连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救；  </span><br><span class="line"></span><br><span class="line"><span class="attribute">Handler_read_rnd_next</span>: 在数据文件中读下一行的请求数。如果正进行大量的表扫描，该值要求较高。通常说明表索引不正确或者是写入的查询没有利用索引；</span><br></pre></td></tr></table></figure><h2 id="SQL优化-大批量插入数据"><a href="#SQL优化-大批量插入数据" class="headerlink" title="SQL优化 - 大批量插入数据"></a>SQL优化 - 大批量插入数据</h2><p><strong>大批量插入数据</strong>  </p><p>环境准备：  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="string">'tb_user_1'</span>(</span><br><span class="line">  <span class="string">'id'</span> int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">'username'</span> varchar(45) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'password'</span> varchar(96) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'name'</span> varchar(45) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'birthday'</span> datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'sex'</span> char(1)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'email'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'phone'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'qq'</span> varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'status'</span>  varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span> comment <span class="string">'用户状态'</span>,</span><br><span class="line">  <span class="string">'create_time'</span>  datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'update_time'</span> datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY(<span class="string">'id'</span>),</span><br><span class="line">  UNIQUE KEY <span class="string">'unique_user_username'</span>(<span class="string">'username'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">'tb_user_2'</span>(</span><br><span class="line">  <span class="string">'id'</span> int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">'username'</span> varchar(45) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'password'</span> varchar(96) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'name'</span> varchar(45) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'birthday'</span> datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'sex'</span> char(1)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'email'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'phone'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'qq'</span> varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'status'</span>  varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span> comment <span class="string">'用户状态'</span>,</span><br><span class="line">  <span class="string">'create_time'</span>  datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'update_time'</span> datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY(<span class="string">'id'</span>),</span><br><span class="line">  UNIQUE KEY <span class="string">'unique_user_username'</span>(<span class="string">'username'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>当使用load命令导入数据的时候，适当的设置可以提高导入的效率。  </p><p>引擎使用的是Innodb，Innodb底层使用的索引是B+树索引；而B+树索引当中的数据有顺序的；  </p><p>对于Innodb类型的表，有以下集中方式可以提高导入的效率：  </p><p>（1）<strong>主键顺序插入</strong>  </p><p>因为InnoDB类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。  </p><p>如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率。  </p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">脚本文件介绍：  </span><br><span class="line">  <span class="function"><span class="title">sql1</span>.<span class="built_in">log</span> -----&gt;</span> 主键有序</span><br><span class="line">  <span class="function"><span class="title">sql2</span>.<span class="built_in">log</span> -----&gt;</span> 主键无序</span><br></pre></td></tr></table></figure><p>插入ID顺序排列数据：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'/root/sql1.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_1'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment"># 耗费时长：20.58 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'/root/sql2.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_2'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">#耗费时长：1min 59.29 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_2;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sql1.log当中数据有序进行排列；sql2.log当中数据无序进行排列；</span></span><br><span class="line"><span class="comment">#而sql1.log当中的数据将插入到tb_user_1表；sql2.log当中的数据将插入到tb_user_2表当中；</span></span><br><span class="line"><span class="comment">#sql1.log与sql2.log当中数据量完全一致；只数据排列分布顺序不一致；</span></span><br><span class="line"></span><br><span class="line">head sql1.log <span class="comment">#linux 查看sql1.log前一部分的数据内容，id主键数据有序</span></span><br><span class="line">head sql2.log <span class="comment">#linux 查看sql2.log前一部分的数据内容，主键数据无序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'/root/sql1.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_1'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment"># load data 加载数据  </span></span><br><span class="line"><span class="comment">#local infile 从本地文件系统当中加载数据；</span></span><br><span class="line"><span class="comment">#'/root/sql1.log' 数据文件在linux当中的位置</span></span><br><span class="line"><span class="comment"># into table 'tb_user_1' 加载数据到具体表tb_user_1当中</span></span><br><span class="line"><span class="comment"># fields terminated by ',' 每一个域之间使用逗号,进行分隔</span></span><br><span class="line"><span class="comment"># lines terminated by '\n' 每一行之间使用\n进行分隔,也就是换行</span></span><br><span class="line"><span class="comment"># 回车之后，在导入数据的过程当中，还需要去进行维护索引，维护唯一索引；unique；</span></span><br><span class="line"><span class="comment"># sql1.log导入到tb_user_1表当中耗费时间为19.37 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_1;<span class="comment"># 1000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'/root/sql2.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_2'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">#回车之后，耗费的时间为 1min 51.42 second；和sql1.log导入tb_user_1时差距很大；  </span></span><br><span class="line"><span class="comment">#所以这样就验证了大批量导入数据时，有序数据导入表当中时耗费的时间小于无序数据导入表当中的时间；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_2;<span class="comment"># 1000000</span></span><br></pre></td></tr></table></figure><p>（2）<strong>关闭唯一性校验</strong>  </p><p>在导入数据前执行 SET UNIQUE_CHECKS=0, 关闭唯一性校验，在导入结束后执行 SET UNIQUE_CHECKS=1，恢复唯一性校验，可以提高导入的效率。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在tb_user_1表结构当中存在username字段的唯一性索引；如果存在唯一性索引则在插入数据的时候是需要对唯一性字段数据的取值进行校验的；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> UNIQUE_CHECKS=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> infiles <span class="string">'/root/sql1.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_1'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">#耗费时长为 19.39 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> UNIQUE_CHECKS=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>（3）<strong>手动提交事务</strong>  </p><p>如果应用使用自动提交的方式，建议在导入前执行 SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行 SET AUTOCOMMIT=1；打开自动提交，也可以提高导入的效率。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> AUTOCOMMIT=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> infiles <span class="string">'/root/sql1.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_1'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">#耗费时长为 19.58 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> AUTOCOMMIT=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="SQL优化-insert优化"><a href="#SQL优化-insert优化" class="headerlink" title="SQL优化 - insert优化"></a>SQL优化 - insert优化</h2><p><strong>优化insert语句</strong>  </p><p>当进行数据的insert操作的时候，可以考虑采用以下几种优化方案。  </p><ul><li><p>如果需要同时对一张表插入很多行数据时，应该尽量使用多个值表的insert语句，这种方式将大大的缩减客户端与数据库之间的连接、关闭等消耗。<br>使得效率比分开执行的单个insert语句块。<br>示例，原始方式为：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br></pre></td></tr></table></figure><p>优化后的方案为：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'tom'</span>),(<span class="number">2</span>,<span class="string">'cat'</span>),(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br></pre></td></tr></table></figure></li><li><p>在事务中进行数据插入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li><li><p>数据有序插入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'Tim'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'Rose'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br></pre></td></tr></table></figure><p>优化后：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'Tim'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'Rose'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'Jerry'</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="SQL优化-orderby优化"><a href="#SQL优化-orderby优化" class="headerlink" title="SQL优化 - orderby优化"></a>SQL优化 - orderby优化</h2><p><strong>优化 order by 语句</strong>  </p><p><strong>环境准备</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">'emp'</span>(</span><br><span class="line">  <span class="string">'id'</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">'name'</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'age'</span> <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'salary'</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(<span class="string">'id'</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> DEAFULT <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">#基础数据插入</span></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp(age,salary);<span class="comment">#建立age、salary字段的复合索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">#PRIMARY 主键索引</span></span><br><span class="line"><span class="comment">#idx_emp_age_salary age 复合索引</span></span><br><span class="line"><span class="comment">#idx_emp_age_salary salary 复合索引</span></span><br></pre></td></tr></table></figure><p><strong>两种排序方式</strong>  </p><p>（1）<strong>第一种是通过对返回数据进行排序，也就是通常说的 filesort 排序，所有不是通过索引直接返回排序结果的排序都叫做 FileSort排序</strong>。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age;#key:<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span>；Extra：<span class="keyword">Using</span> filesort;<span class="keyword">type</span>:<span class="keyword">ALL</span> 没有走索引，全表扫描（升序）</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age,salary;#key:<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span>；Extra：<span class="keyword">Using</span> filesort;<span class="keyword">type</span>:<span class="keyword">ALL</span> 没有走索引，全表扫描（升序）</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;#key:<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span>；Extra：<span class="keyword">Using</span> filesort;<span class="keyword">type</span>:<span class="keyword">ALL</span> 没有走索引，全表扫描（降序）</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>,salary <span class="keyword">desc</span>;#key:<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span>；Extra：<span class="keyword">Using</span> filesort;<span class="keyword">type</span>:<span class="keyword">ALL</span> 没有走索引，全表扫描（降序）</span><br><span class="line"></span><br><span class="line">#通过file sort 文件系统进行排序，效率较低</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;#<span class="keyword">type</span>：<span class="keyword">ALL</span>，key：<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;#<span class="keyword">type</span>：<span class="keyword">ALL</span>，key：<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><p>（2）<strong>第二种通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</strong>。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;#走索引；key：idx_age_salary；key_len:<span class="number">9</span>；Extra：<span class="keyword">Using</span> <span class="keyword">index</span> 走索引</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;#走索引；key：idx_age_salary；key_len:<span class="number">9</span>；Extra：<span class="keyword">Using</span> <span class="keyword">index</span> 走索引</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;#走索引；key：idx_age_salary；key_len:<span class="number">9</span>；Extra：<span class="keyword">Using</span> <span class="keyword">index</span> 走索引</span><br><span class="line">#覆盖索引的用法；查询<span class="keyword">select</span> 的字段都是覆盖索引则这个时候使用的即为<span class="keyword">using</span> <span class="keyword">index</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age,salary,<span class="type">name</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;#走索引；key：<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span>；<span class="keyword">type</span>:<span class="keyword">ALL</span>；Extra：<span class="keyword">Using</span> filesort 全表扫描；由于查询的字段当中包含了非索引字段；即并未覆盖索引；所以走全表扫描的方式；id、age、salary这三个字段都有索引；而<span class="type">name</span>字段没有索引；</span><br></pre></td></tr></table></figure><p><strong>多字段排序</strong>  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id ,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age,salary;#key:idx_age_salary;key_len:<span class="number">9</span>;Extra:<span class="keyword">Using</span> <span class="keyword">index</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id ,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>,salary <span class="keyword">asc</span>;#key:idx_age_salary;key_len:<span class="number">9</span>;Extra:<span class="keyword">Using</span> <span class="keyword">index</span>(<span class="keyword">order</span> <span class="keyword">by</span> 如不标明<span class="keyword">desc</span>或者<span class="keyword">asc</span>;默认为<span class="keyword">asc</span>升序排序)</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>,salary <span class="keyword">desc</span>;#key:idx_age_salary;key_len:<span class="number">9</span>;Extra:<span class="keyword">Using</span> <span class="keyword">index</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>,salary <span class="keyword">desc</span>;#key:idx_age_salary;key_len:<span class="number">9</span>;Extra:<span class="keyword">Using</span> <span class="keyword">index</span>;<span class="keyword">Using</span> filesort此时就会出现Filesort</span><br><span class="line"></span><br><span class="line"># 即在使用<span class="keyword">order</span> <span class="keyword">by</span>进行多字段排序的时候，如果想要效率较高；那么此时最好这些多字段统一排序方式；要么都是升序要么都是降序；如果出现一升一降那么就会出现Filesort；文件系统排序造成效率低；</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">asc</span>,age <span class="keyword">asc</span>;#key:idx_age_salary;key_len:<span class="number">9</span>;Extra:<span class="keyword">Using</span> <span class="keyword">index</span>;<span class="keyword">Using</span> filesort；此时将age <span class="keyword">asc</span>进行了调后处理；也出现了Filesort</span><br><span class="line">#原因在于：</span><br><span class="line">#按照多字段进行排序，要么统一进行升序<span class="keyword">asc</span>要么统一进行降序排序；</span><br><span class="line">#如果按照多字段进行排序，那么排序的顺序需要和复合索引当中的字段顺序要保持一致；</span><br><span class="line">#复合索引为idx_emp_age_salary（age，salary）复合索引当中age字段的索引顺序先于salary字段的顺序；</span><br><span class="line">#而此时<span class="keyword">SQL</span>当中<span class="keyword">order</span> <span class="keyword">by</span>语句多字段排序salary字段先于age字段；所以此时Extra当中就出现了<span class="keyword">using</span> <span class="keyword">index</span>；也出现了<span class="keyword">using</span> filesort;</span><br></pre></td></tr></table></figure><p>了解了MySQL的排序方式，优化目标就清晰了：尽量减少额外的排序，通过索引直接返回有序数据。  </p><p>where条件和Order by 使用相同的索引并且Order by 的顺序和索引顺序相同，并且Order by的字段都是升序，或者都是降序。  </p><p>否则肯定需要额外的操作，这样就会出现FileSort排序；  </p><h3 id="Filesort的优化"><a href="#Filesort的优化" class="headerlink" title="Filesort的优化"></a>Filesort的优化</h3><p>尽可能避免Filesort的出现，但是无法完全避免Filesort的出现；  </p><p>通过创建合适的索引，能够减少Filesort的出现。  </p><p>但是在某些情况下，条件限制不能让Filesort小时，那就需要加快Filesort的排序操作，对于Filesort，MySQL有两种排序算法：  </p><p>（1）两次扫描算法：MySQL4.1之前，使用该方式排序。<br>    首先，根据条件取出排序字段和行指针信息，然后在排序区 sort buffer中排序；<br>    如果sort buffer不够，则在临时表 temporary table中存储排序结果。<br>    完成排序之后，再根据航指针回表读取记录，该操作可能会导致大量随机I/O操作。  </p><p>（2）一次扫描算法：一次性取出满足条件的所有字段，然后在排序区sort buffer中排序后直接输出结果集。<br>    排序时内存开销较大，但是排序效率比两次扫描算法要高；  </p><p>MySQL 通过比较系统变量 max_length_for_sort_data 的大小和Query 语句取出的字段总大小，来判定合适哪一种排序算法，如果max_length_for_sort_data 更大，那么使用第二种优化之后的算法；否则使用第一种；  </p><p>可以适当提高 sort_buffer_size和 max_length_for_sort_data 系统变量，来增大排序区的大小，提高排序的效率。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'max_length_for_sort_data'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>max_length_for_sort_data</td>    <td>1024</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'sort_buffer_size'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>sort_buffer_size</td>    <td>262144</td>  </tr></table><h2 id="SQL优化-group-by优化"><a href="#SQL优化-group-by优化" class="headerlink" title="SQL优化 - group by优化"></a>SQL优化 - group by优化</h2><p>由于GROUP BY 实际上也同样会进行排序操作，而且与ORDER BY相比，GROUP BY主要只是多了排序字后的分组操作。  </p><p>当然如果在分组的时候还是用了其他的一些聚合函数，那么还需要一些聚合函数的计算。  </p><p>所以，在GROUP BY的实现过程中，与ORDER BY一样也可以利用到索引。  </p><p>如果查询包含GROUP BY，但是用户想要避免排序结果的消耗，则可以执行order by null 禁止排序。  </p><p>如下：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,count(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age;#key:<span class="keyword">NULL</span>,key_len:<span class="keyword">NULL</span>;<span class="keyword">type</span>:<span class="keyword">ALL</span>;Extra:<span class="keyword">Using</span> <span class="keyword">temporary</span>;<span class="keyword">Using</span> filesort; 由此可以看出<span class="keyword">GROUP</span> <span class="keyword">BY</span> 底层进行了排序操作；<span class="keyword">Using</span> filesort</span><br><span class="line"><span class="meta">#Using temporary与Using Filesort都是比较耗时的操作；</span></span><br></pre></td></tr></table></figure><p>优化后：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,count(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">null</span>;#key:<span class="keyword">null</span>;key_len:<span class="keyword">null</span>;<span class="keyword">type</span>:<span class="keyword">All</span>;Extra:<span class="keyword">Using</span> <span class="keyword">temporary</span>;此时就没有<span class="keyword">Using</span> filesort了</span><br></pre></td></tr></table></figure><p>从上面的例子可以看出，第一个SQL语句需要进行“Filesort”，而第二个SQL语句由于order by null不需要进行“Filesort”，而上文提过FileSort往往非常耗费时间。  </p><p> 创建索引：  </p> <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_emp_age_salary  <span class="keyword">on</span> emp(age,salary);</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,<span class="built_in">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">order</span> <span class="keyword">by</span> <span class="literal">null</span>;#key:idx_emp_age_salary;key_len:9;extra:using <span class="keyword">index</span> 此时走索引；</span><br><span class="line">#<span class="keyword">group</span> <span class="keyword">by</span>语句也是可以通过索引来提高效率的；</span><br></pre></td></tr></table></figure><h2 id="SQL优化-子查询优化"><a href="#SQL优化-子查询优化" class="headerlink" title="SQL优化 - 子查询优化"></a>SQL优化 - 子查询优化</h2><p><strong>优化嵌套查询</strong>  </p><p>MySQL4.1 版本之后，开始支持SQL的子查询。  </p><p>这个技术可以使用select语句来创建一个单列的查询结果，然后吧这个结果来作为过滤条件用在另一个查询当中。  </p><p>使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。  </p><p>但是，有些情况下，子查询是可以被更高效的连接（JOIN）替代。(使用多表连接查询来替换子查询)  </p><p>示例，查找有角色的所有用户信息：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;<span class="comment"># t_user 用户表 , t_role 角色表 , user_role 用户角色中间表 ；</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> ( <span class="keyword">select</span> user_id <span class="keyword">from</span> user_role);</span><br></pre></td></tr></table></figure><p>执行计划为：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="keyword">select</span> user_id <span class="keyword">from</span> user_role);</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>t_user</td>    <td>ALL</td>    <td>PRIMARY</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>6</td>    <td>Using where</td>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>< subquery2></td>    <td>eq_ref</td>    <td>< auto_key></td>    <td>< auto_key></td>    <td>99</td>    <td>demo_02.t_user.id</td>    <td>1</td>    <td>NULL</td>  </tr>  <tr>    <td>2</td>    <td>MATERIALIZED</td>    <td>user_role</td>    <td>index</td>    <td>fk_ur_user_id</td>    <td>fk_ur_user_id</td>    <td>99</td>    <td>NULL</td>    <td>6</td>    <td>Using index</td>  </tr></table><p>优化后：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user u,user_role ur <span class="keyword">where</span> u.id=ur.user_id;<span class="comment">#多表联查替代子查询</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>u</td>    <td>ALL</td>    <td>PRIMARY</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>6</td>    <td>NULL</td>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>ur</td>    <td>ref(ref的效率比index效率高)</td>    <td>fk_ur_user_id</td>    <td>fk_ur_user_id</td>    <td>99</td>    <td>demo_02.u.id</td>    <td>1</td>    <td>NULL</td>  </tr></table><h2 id="SQL优化-or优化"><a href="#SQL优化-or优化" class="headerlink" title="SQL优化 - or优化"></a>SQL优化 - or优化</h2><p><strong>对于包含 OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引，而且不能使用到复合索引；如果没有索引，则应该考虑增加索引</strong>。  </p><p>获取emp表中的所有的索引；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">show</span> index <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line">explain <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="built_in">where</span> id=<span class="number">1</span> <span class="built_in">or</span> name='Tom;#id为主键，即存在主键索引；而name字段没有设置索引；所以此时用<span class="built_in">or</span>来连接两个条件时，当中包含有一个非索引字段；所以不会走索引,索引失效，采用的是全表扫描；<span class="built_in">key</span>:NULL;key_len:NULL;<span class="built_in">type</span>:ALL;extra:Using <span class="built_in">where</span>；<span class="built_in">or</span>关键字如果想要走索引则<span class="built_in">or</span>连接的条件列字段需要是索引列；从而能够走索引否则全表扫描不走索引；</span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="built_in">where</span> age=<span class="number">20</span> <span class="built_in">or</span> salary=<span class="number">3500</span>;#<span class="built_in">key</span>:NULL,key_len:NULL;<span class="built_in">type</span>;All;extra:Using <span class="built_in">where</span>;此时未走索引；age与salary为复合索引当中的索引列；而<span class="built_in">or</span>关键字所连接的条件列当中字段的索引不能为复合索引列；可以为主键索引列、唯一索引列、单列索引等；就是不能为复合索引列其他皆可；</span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="built_in">where</span> id=<span class="number">1</span> <span class="built_in">or</span> age=<span class="number">30</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>t_user</td>    <td>ALL</td>    <td>PRIMARY</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>6</td>    <td>Using where</td>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>emp</td>    <td>index_merge</td>    <td>PRIMARY,idx_emp_age_salary</td>    <td>PRIMARY,idx_emp_age_salary</td>    <td>4,4</td>    <td>NULL</td>    <td>2</td>    <td>Using sort_union(idx_emp_age_salary,PRIMARY);Using where</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">or</span> <span class="keyword">id</span>=<span class="number">10</span> \G;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>emp</td>    <td>range</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>4</td>    <td>NULL</td>    <td>2</td>    <td>Using where</td>  </tr></table><p>建议使用 union 替换 or；  </p><p>优化：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> =<span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> =<span class="number">10</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>PRIMARY</td>    <td>emp</td>    <td>const(const效率远高于range)</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>4</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr>  <tr>    <td>2</td>    <td>UNION</td>    <td>emp</td>    <td>const</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>4</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr>  <tr>    <td>NULL</td>    <td>UNION RESULT</td>    <td>< union1,2></td>    <td>ALL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>Using temporary</td>  </tr></table><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">explain select * from emp where id=<span class="number">1</span> or age=<span class="number">20</span>;</span><br><span class="line"><span class="meta">#id 1</span></span><br><span class="line"><span class="meta">#select_type SIMPLE</span></span><br><span class="line"><span class="meta">#table emp</span></span><br><span class="line"><span class="meta">#possible_key PRIMARY,idx_emp_age_salary</span></span><br><span class="line"><span class="meta">#key idx_emp_age_salary,PRIMARY</span></span><br><span class="line"><span class="meta">#key_len 4,4</span></span><br><span class="line"><span class="meta">#ref NULL</span></span><br><span class="line"><span class="meta">#rows 2</span></span><br><span class="line"><span class="meta">#extra Using sort_union(idx_emp_age_salary,PRIMARY)</span></span><br><span class="line"><span class="meta">#type index_merge</span></span><br></pre></td></tr></table></figure><p>优化：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> age=<span class="number">20</span>;</span><br><span class="line"><span class="comment">#union即为一个求并集的一个操作；</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>PRIMARY</td>    <td>emp</td>    <td>const(const效率远高于range)</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>4</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr>  <tr>    <td>2</td>    <td>UNION</td>    <td>emp</td>    <td>ref(ref比index_merge效率高)</td>    <td>idx_emp_age_salary</td>    <td>idx_emp_age_salary</td>    <td>4</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr>  <tr>    <td>NULL</td>    <td>UNION RESULT</td>    <td>< union1,2></td>    <td>ALL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>Using temporary</td>  </tr></table><p>建议通过union替换or；<br>来比较下重要指标，发现主要差别是type和ref这两项；<br>type显示的是访问类型，是较为重要的一个指标，结果值从好到坏依次是：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">system</span> &gt; const &gt; eq_ref &gt; <span class="keyword">ref</span> &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; uniqe_subquery &gt; index_subquery &gt; range &gt; <span class="keyword">index</span> &gt; <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure><p>UNION语句的type值为ref，OR语句的type值为range，可以看到这是一个很明显的差距  </p><p>UNION语句的ref值为const，OR语句的type值为NULL，const表示是常量值引用，非常快  </p><p>这两项的差距就说明了UNION要优于OR；</p><h2 id="SQL优化-limit优化"><a href="#SQL优化-limit优化" class="headerlink" title="SQL优化 - limit优化"></a>SQL优化 - limit优化</h2><h3 id="优化分页查询"><a href="#优化分页查询" class="headerlink" title="优化分页查询"></a>优化分页查询</h3><p>一般分页查询时，通过创建覆盖索引能够比较好的提高性能。  </p><p>一个常见又非常头疼的问题就是 limit 2000000,10;   此时需要MySQL排序前2000010记录，仅仅返回 2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大。  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">limit</span> <span class="number">2000000</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_item</td>    <td>ALL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>9816098</td>    <td>NULL</td>  </tr></table><h3 id="优化思路一"><a href="#优化思路一" class="headerlink" title="优化思路一"></a>优化思路一</h3><p>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">slect count(*) from tb_item;#3000000</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">limit</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">limit</span> <span class="number">10</span>,<span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">limit</span> <span class="number">20</span>,<span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">limit</span> <span class="number">2000000</span>,<span class="number">10</span>;#查询效率低 此时为全表扫描没有使用得到索引；</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item t, (<span class="keyword">select</span> id <span class="keyword">from</span> tb_item <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">limit</span> <span class="number">2000000</span>,<span class="number">10</span>) a <span class="keyword">where</span> t.id=a.id;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>PRIMARY</td>    <td>< derived2></td>    <td>ALL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>2000010</td>    <td>NULL</td>  </tr>  <tr>    <td>1</td>    <td>PRIMARY</td>    <td>t</td>    <td>eq_ref</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>4</td>    <td>a.id</td>    <td>1</td>    <td>NULL</td>  </tr>    <tr>    <td>2</td>    <td>DERIVED</td>    <td>tb_item</td>    <td>index</td>    <td>NULL</td>    <td>PRIMARY</td>    <td>4</td>    <td>NULL</td>    <td>2903274</td>    <td>Using index</td>  </tr></table><h3 id="优化思路二"><a href="#优化思路二" class="headerlink" title="优化思路二"></a>优化思路二</h3><p>该方案适用于<strong>主键自增的表(且主键自增的列不能够出现断层)</strong>，可以把limit 查询转换成某个位置的查询；  </p><p><strong>断层</strong>：即指的是当在查询数据时，id主键自增列当中可能会有出现修改或者删除的操作，那么这个时候数据就不一定准确了；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> &gt; <span class="number">1000000</span> <span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_item</td>    <td>range</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>4</td>    <td>NULL</td>    <td>4908049</td>    <td>Using where</td>  </tr></table><h2 id="SQL优化-索引提示"><a href="#SQL优化-索引提示" class="headerlink" title="SQL优化 - 索引提示"></a>SQL优化 - 索引提示</h2><p><strong>使用SQL提示</strong>  </p><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。  </p><h3 id="USE-INDEX"><a href="#USE-INDEX" class="headerlink" title="USE INDEX"></a>USE INDEX</h3><p>在查询语句中 表名称的后面 ，添加 use index 来提供希望MySQL去<strong>参考</strong>的索引列表，就可以让MySQL不再考虑其他可用的索引。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_status <span class="keyword">on</span> tb_seller(<span class="keyword">status</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name_sta_addr <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>,<span class="keyword">status</span>,address);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_seller</td>    <td>ref</td>    <td>idx_seller_name_sta_address,idx_seller_name</td>    <td>idx_seller_name(数据库选择使用idx_seller_name索引)</td>    <td>403</td>    <td>const</td>    <td>1</td>    <td>Using index condition</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">use</span> <span class="keyword">index</span>(idx_seller_name_sta_address) <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_seller</td>    <td>ref</td>    <td>idx_seller_name_sta_address</td>    <td>idx_seller_name_sta_address</td>    <td>403</td>    <td>const</td>    <td>1</td>    <td>Using index condition</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">use</span> <span class="keyword">index</span>(idx_seller_name) <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_seller</td>    <td>ref</td>    <td>idx_seller_name</td>    <td>idx_seller_name</td>    <td>403</td>    <td>const</td>    <td>1</td>    <td>Using index condition</td>  </tr></table><h3 id="IGNORE-INDEX"><a href="#IGNORE-INDEX" class="headerlink" title="IGNORE INDEX"></a>IGNORE INDEX</h3><p>如果用户只是单纯的想让MySQL<strong>忽略</strong>一个或者多个索引，则可以使用 ignore index 作为 hint；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">ignore</span> <span class="keyword">index</span>(idx_seller_name) <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_seller</td>    <td>ref</td>    <td>idx_seller_name_sta_address</td>    <td>idx_seller_name_sta_address</td>    <td>403</td>    <td>const</td>    <td>1</td>    <td>Using index condition</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">ignore</span> <span class="keyword">index</span>(idx_seller_name_sta_address) <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_seller</td>    <td>ref</td>    <td>idx_seller_name</td>    <td>idx_seller_name</td>    <td>403</td>    <td>const</td>    <td>1</td>    <td>Using index condition</td>  </tr></table><h3 id="FORCE-INDEX"><a href="#FORCE-INDEX" class="headerlink" title="FORCE INDEX"></a>FORCE INDEX</h3><p>为了<strong>强制</strong>MySQL使用一个特定的索引，可在查询中使用 force index 来作为 hint;</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address=<span class="string">'北京市'</span>;#实际没有使用到索引；<span class="keyword">type</span>:<span class="keyword">all</span>;key:<span class="keyword">null</span>;key_len:<span class="keyword">null</span>;extra:<span class="keyword">using</span> <span class="keyword">where</span>使用的是全表扫描；原因在于address为北京市时在表当中占比较多所以由mysql底层判断决定不走索引即全表扫描会快于走索引；所以此处没有使用得到索引；</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller use <span class="keyword">index</span>(idx_seller_address) <span class="keyword">where</span> address=<span class="string">'北京市'</span>;#此时则走索引</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_seller</td>    <td>ALL</td>    <td>idx_seller_address</td>    <td>idx_seller_address</td>    <td>NULL</td>    <td>NULL</td>    <td>12</td>    <td>Using where</td>  </tr></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;观看笔记：&lt;a href=&quot;https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://fengshana.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MySQL" scheme="https://fengshana.github.io/tags/MySQL/"/>
    
      <category term="数据库优化" scheme="https://fengshana.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
    
      <category term="笔记" scheme="https://fengshana.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>史上最好~精通Spring Boot Cloud - 圣思园</title>
    <link href="https://fengshana.github.io/2020/05/29/%E3%80%90Spring%E3%80%91/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%A5%BD~%E7%B2%BE%E9%80%9ASpring%20Boot%20Cloud%20-%20%E5%9C%A3%E6%80%9D%E5%9B%AD/"/>
    <id>https://fengshana.github.io/2020/05/29/%E3%80%90Spring%E3%80%91/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%A5%BD~%E7%B2%BE%E9%80%9ASpring%20Boot%20Cloud%20-%20%E5%9C%A3%E6%80%9D%E5%9B%AD/</id>
    <published>2020-05-29T11:04:48.100Z</published>
    <updated>2020-05-29T11:34:38.767Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1Eg4y187XT" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Eg4y187XT</a>  </p><h2 id="学习方法谈心"><a href="#学习方法谈心" class="headerlink" title="学习方法谈心"></a>学习方法谈心</h2><h2 id="SpringBoot与Cloud整体介绍"><a href="#SpringBoot与Cloud整体介绍" class="headerlink" title="SpringBoot与Cloud整体介绍"></a>SpringBoot与Cloud整体介绍</h2><h2 id="课程大纲深入解读与剖析"><a href="#课程大纲深入解读与剖析" class="headerlink" title="课程大纲深入解读与剖析"></a>课程大纲深入解读与剖析</h2><h2 id="微服务重要概念与权威解读"><a href="#微服务重要概念与权威解读" class="headerlink" title="微服务重要概念与权威解读"></a>微服务重要概念与权威解读</h2><h2 id="解读微服务重要论文"><a href="#解读微服务重要论文" class="headerlink" title="解读微服务重要论文"></a>解读微服务重要论文</h2><h2 id="深刻解读Martin-Fowler微服务经典文章"><a href="#深刻解读Martin-Fowler微服务经典文章" class="headerlink" title="深刻解读Martin Fowler微服务经典文章"></a>深刻解读Martin Fowler微服务经典文章</h2><h2 id="微服务数据治理与去中心化解读"><a href="#微服务数据治理与去中心化解读" class="headerlink" title="微服务数据治理与去中心化解读"></a>微服务数据治理与去中心化解读</h2><h2 id="微服务演进式设计与优缺点剖析"><a href="#微服务演进式设计与优缺点剖析" class="headerlink" title="微服务演进式设计与优缺点剖析"></a>微服务演进式设计与优缺点剖析</h2><h2 id="微服务宏观把控与深度剖析"><a href="#微服务宏观把控与深度剖析" class="headerlink" title="微服务宏观把控与深度剖析"></a>微服务宏观把控与深度剖析</h2><h2 id="SOA理论与概念深入剖析"><a href="#SOA理论与概念深入剖析" class="headerlink" title="SOA理论与概念深入剖析"></a>SOA理论与概念深入剖析</h2><h2 id="服务定义概念与原则"><a href="#服务定义概念与原则" class="headerlink" title="服务定义概念与原则"></a>服务定义概念与原则</h2><h2 id="SOA实现方式与模式"><a href="#SOA实现方式与模式" class="headerlink" title="SOA实现方式与模式"></a>SOA实现方式与模式</h2><h2 id="SOA的缺陷及其与微服务的关系"><a href="#SOA的缺陷及其与微服务的关系" class="headerlink" title="SOA的缺陷及其与微服务的关系"></a>SOA的缺陷及其与微服务的关系</h2><h2 id="SOA与微服务本质比较与透彻分析"><a href="#SOA与微服务本质比较与透彻分析" class="headerlink" title="SOA与微服务本质比较与透彻分析"></a>SOA与微服务本质比较与透彻分析</h2><h2 id="SpringBoot应用起步与配置"><a href="#SpringBoot应用起步与配置" class="headerlink" title="SpringBoot应用起步与配置"></a>SpringBoot应用起步与配置</h2><h2 id="SpringBoot应用配置分析与拆解"><a href="#SpringBoot应用配置分析与拆解" class="headerlink" title="SpringBoot应用配置分析与拆解"></a>SpringBoot应用配置分析与拆解</h2><h2 id="SpringBoot打包文件内容与结构深入分析"><a href="#SpringBoot打包文件内容与结构深入分析" class="headerlink" title="SpringBoot打包文件内容与结构深入分析"></a>SpringBoot打包文件内容与结构深入分析</h2><h2 id="使用Gradle构建SpringBoot应用"><a href="#使用Gradle构建SpringBoot应用" class="headerlink" title="使用Gradle构建SpringBoot应用"></a>使用Gradle构建SpringBoot应用</h2><h2 id="SpringBoot参数自动装配与loader机制详细分析"><a href="#SpringBoot参数自动装配与loader机制详细分析" class="headerlink" title="SpringBoot参数自动装配与loader机制详细分析"></a>SpringBoot参数自动装配与loader机制详细分析</h2><h2 id="SpringBootLoader源码分析及自定义类加载器作用分析"><a href="#SpringBootLoader源码分析及自定义类加载器作用分析" class="headerlink" title="SpringBootLoader源码分析及自定义类加载器作用分析"></a>SpringBootLoader源码分析及自定义类加载器作用分析</h2><h2 id="LaunchedURLClassLoader在FatJar中的重要作用分析及反射的经典应用"><a href="#LaunchedURLClassLoader在FatJar中的重要作用分析及反射的经典应用" class="headerlink" title="LaunchedURLClassLoader在FatJar中的重要作用分析及反射的经典应用"></a>LaunchedURLClassLoader在FatJar中的重要作用分析及反射的经典应用</h2><h2 id="JDWP远程调试详解"><a href="#JDWP远程调试详解" class="headerlink" title="JDWP远程调试详解"></a>JDWP远程调试详解</h2><h2 id="调试spring-boot-loader的启动与加载全流程"><a href="#调试spring-boot-loader的启动与加载全流程" class="headerlink" title="调试spring-boot-loader的启动与加载全流程"></a>调试spring-boot-loader的启动与加载全流程</h2><h2 id="SpringBootApplication注解深度解析"><a href="#SpringBootApplication注解深度解析" class="headerlink" title="@SpringBootApplication注解深度解析"></a>@SpringBootApplication注解深度解析</h2><h2 id="Configuration注解深入讲解"><a href="#Configuration注解深入讲解" class="headerlink" title="@Configuration注解深入讲解"></a>@Configuration注解深入讲解</h2><h2 id="SpringApplication源码分析与作用详解"><a href="#SpringApplication源码分析与作用详解" class="headerlink" title="SpringApplication源码分析与作用详解"></a>SpringApplication源码分析与作用详解</h2><h2 id="SpringBoot应用启动流程源码分析"><a href="#SpringBoot应用启动流程源码分析" class="headerlink" title="SpringBoot应用启动流程源码分析"></a>SpringBoot应用启动流程源码分析</h2><h2 id="SpringBoot启动流程分析"><a href="#SpringBoot启动流程分析" class="headerlink" title="SpringBoot启动流程分析"></a>SpringBoot启动流程分析</h2><h2 id="SpringApplication泛化与具体模式剖析"><a href="#SpringApplication泛化与具体模式剖析" class="headerlink" title="SpringApplication泛化与具体模式剖析"></a>SpringApplication泛化与具体模式剖析</h2><h2 id="工厂加载机制详尽分析"><a href="#工厂加载机制详尽分析" class="headerlink" title="工厂加载机制详尽分析"></a>工厂加载机制详尽分析</h2><h2 id="工厂缓存源码深度解析"><a href="#工厂缓存源码深度解析" class="headerlink" title="工厂缓存源码深度解析"></a>工厂缓存源码深度解析</h2><h2 id="Spring工厂Bean加载过程深度解析"><a href="#Spring工厂Bean加载过程深度解析" class="headerlink" title="Spring工厂Bean加载过程深度解析"></a>Spring工厂Bean加载过程深度解析</h2><h2 id="SpringApplication构造过程全景分析"><a href="#SpringApplication构造过程全景分析" class="headerlink" title="SpringApplication构造过程全景分析"></a>SpringApplication构造过程全景分析</h2><h2 id="ApplicationContext中央化组件作用详解"><a href="#ApplicationContext中央化组件作用详解" class="headerlink" title="ApplicationContext中央化组件作用详解"></a>ApplicationContext中央化组件作用详解</h2><h2 id="SpringApplicationRunListeners监听器容器详解"><a href="#SpringApplicationRunListeners监听器容器详解" class="headerlink" title="SpringApplicationRunListeners监听器容器详解"></a>SpringApplicationRunListeners监听器容器详解</h2><h2 id="观察着模式在SpringBoot中的经典应用"><a href="#观察着模式在SpringBoot中的经典应用" class="headerlink" title="观察着模式在SpringBoot中的经典应用"></a>观察着模式在SpringBoot中的经典应用</h2><h2 id="Environment组件的重要作用详解"><a href="#Environment组件的重要作用详解" class="headerlink" title="Environment组件的重要作用详解"></a>Environment组件的重要作用详解</h2><h2 id="Banner信息输出与定制内幕分析"><a href="#Banner信息输出与定制内幕分析" class="headerlink" title="Banner信息输出与定制内幕分析"></a>Banner信息输出与定制内幕分析</h2><h2 id="SpringBoot完整启动流程系统化总结"><a href="#SpringBoot完整启动流程系统化总结" class="headerlink" title="SpringBoot完整启动流程系统化总结"></a>SpringBoot完整启动流程系统化总结</h2><h2 id="SpringBoot重要模块详解"><a href="#SpringBoot重要模块详解" class="headerlink" title="SpringBoot重要模块详解"></a>SpringBoot重要模块详解</h2><h2 id="SpringBoot日志处理详解"><a href="#SpringBoot日志处理详解" class="headerlink" title="SpringBoot日志处理详解"></a>SpringBoot日志处理详解</h2><h2 id="SpringBoot整合JSP详解"><a href="#SpringBoot整合JSP详解" class="headerlink" title="SpringBoot整合JSP详解"></a>SpringBoot整合JSP详解</h2><h2 id="SpringBoot整合WebSocket详解"><a href="#SpringBoot整合WebSocket详解" class="headerlink" title="SpringBoot整合WebSocket详解"></a>SpringBoot整合WebSocket详解</h2><h2 id="SpringBoot整合SockJS详解"><a href="#SpringBoot整合SockJS详解" class="headerlink" title="SpringBoot整合SockJS详解"></a>SpringBoot整合SockJS详解</h2><h2 id="SpringBoot开发者工具与单元测试详解"><a href="#SpringBoot开发者工具与单元测试详解" class="headerlink" title="SpringBoot开发者工具与单元测试详解"></a>SpringBoot开发者工具与单元测试详解</h2><h2 id="Apache-Kafka介绍与面向MQ编程模式详解"><a href="#Apache-Kafka介绍与面向MQ编程模式详解" class="headerlink" title="Apache Kafka介绍与面向MQ编程模式详解"></a>Apache Kafka介绍与面向MQ编程模式详解</h2><h2 id="Apache-Kafka核心API与设计理念详解"><a href="#Apache-Kafka核心API与设计理念详解" class="headerlink" title="Apache Kafka核心API与设计理念详解"></a>Apache Kafka核心API与设计理念详解</h2><h2 id="Apache-Kafka分区副本与消费者组详解"><a href="#Apache-Kafka分区副本与消费者组详解" class="headerlink" title="Apache Kafka分区副本与消费者组详解"></a>Apache Kafka分区副本与消费者组详解</h2><h2 id="Apache-Kafka流式处理详解"><a href="#Apache-Kafka流式处理详解" class="headerlink" title="Apache Kafka流式处理详解"></a>Apache Kafka流式处理详解</h2><h2 id="Apache-Kafka生产者与消费者实例演示与解析"><a href="#Apache-Kafka生产者与消费者实例演示与解析" class="headerlink" title="Apache Kafka生产者与消费者实例演示与解析"></a>Apache Kafka生产者与消费者实例演示与解析</h2><h2 id="Apache-Kafka重点内容剖析与回顾"><a href="#Apache-Kafka重点内容剖析与回顾" class="headerlink" title="Apache Kafka重点内容剖析与回顾"></a>Apache Kafka重点内容剖析与回顾</h2><h2 id="Apache-Kafka分区构成与原则详解"><a href="#Apache-Kafka分区构成与原则详解" class="headerlink" title="Apache Kafka分区构成与原则详解"></a>Apache Kafka分区构成与原则详解</h2><h2 id="Apache-Kafka分区理论与作用详解"><a href="#Apache-Kafka分区理论与作用详解" class="headerlink" title="Apache Kafka分区理论与作用详解"></a>Apache Kafka分区理论与作用详解</h2><h2 id="Apache-Kafka分区与段之间的关系深入详解"><a href="#Apache-Kafka分区与段之间的关系深入详解" class="headerlink" title="Apache Kafka分区与段之间的关系深入详解"></a>Apache Kafka分区与段之间的关系深入详解</h2><h2 id="Apache-Kafka日志文件格式详解"><a href="#Apache-Kafka日志文件格式详解" class="headerlink" title="Apache Kafka日志文件格式详解"></a>Apache Kafka日志文件格式详解</h2><h2 id="Apache-Kafka脚本命令实战详解"><a href="#Apache-Kafka脚本命令实战详解" class="headerlink" title="Apache Kafka脚本命令实战详解"></a>Apache Kafka脚本命令实战详解</h2><h2 id="Apache-Kafka消费者组操作与主题删除原理详解"><a href="#Apache-Kafka消费者组操作与主题删除原理详解" class="headerlink" title="Apache Kafka消费者组操作与主题删除原理详解"></a>Apache Kafka消费者组操作与主题删除原理详解</h2><h2 id="Apache-Kafka重要操作详解与系统总结回顾"><a href="#Apache-Kafka重要操作详解与系统总结回顾" class="headerlink" title="Apache Kafka重要操作详解与系统总结回顾"></a>Apache Kafka重要操作详解与系统总结回顾</h2><h2 id="SpringBoot整合Apache-Kafka详解"><a href="#SpringBoot整合Apache-Kafka详解" class="headerlink" title="SpringBoot整合Apache Kafka详解"></a>SpringBoot整合Apache Kafka详解</h2><h2 id="SpringBoot操纵Apache-Kafka实例分析"><a href="#SpringBoot操纵Apache-Kafka实例分析" class="headerlink" title="SpringBoot操纵Apache Kafka实例分析"></a>SpringBoot操纵Apache Kafka实例分析</h2><h2 id="主流消息队列产品总结与分析"><a href="#主流消息队列产品总结与分析" class="headerlink" title="主流消息队列产品总结与分析"></a>主流消息队列产品总结与分析</h2><h2 id="SpringBoot对于SpringMVC的整合原理深度解析"><a href="#SpringBoot对于SpringMVC的整合原理深度解析" class="headerlink" title="SpringBoot对于SpringMVC的整合原理深度解析"></a>SpringBoot对于SpringMVC的整合原理深度解析</h2><h2 id="SpringServletContainerInitializer初始化流程详解"><a href="#SpringServletContainerInitializer初始化流程详解" class="headerlink" title="SpringServletContainerInitializer初始化流程详解"></a>SpringServletContainerInitializer初始化流程详解</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;观看笔记：&lt;a href=&quot;https://www.bilibili.com/video/BV1Eg4y187XT&quot; target=&quot;_bl
      
    
    </summary>
    
    
      <category term="jdk8" scheme="https://fengshana.github.io/categories/jdk8/"/>
    
    
      <category term="java" scheme="https://fengshana.github.io/tags/java/"/>
    
      <category term="SprigBoot" scheme="https://fengshana.github.io/tags/SprigBoot/"/>
    
  </entry>
  
  <entry>
    <title>深入理解java8</title>
    <link href="https://fengshana.github.io/2020/05/29/%E3%80%90JDK8%E3%80%91/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java8/"/>
    <id>https://fengshana.github.io/2020/05/29/%E3%80%90JDK8%E3%80%91/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java8/</id>
    <published>2020-05-29T10:49:47.092Z</published>
    <updated>2020-05-29T12:03:08.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1w4411e7T8?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1w4411e7T8?p=1</a>  </p><h2 id="JAVA8新特性课程介绍"><a href="#JAVA8新特性课程介绍" class="headerlink" title="JAVA8新特性课程介绍"></a>JAVA8新特性课程介绍</h2><h2 id="JAVA8新特性课程介绍续"><a href="#JAVA8新特性课程介绍续" class="headerlink" title="JAVA8新特性课程介绍续"></a>JAVA8新特性课程介绍续</h2><h2 id="lambda表达式初步与函数式接口"><a href="#lambda表达式初步与函数式接口" class="headerlink" title="lambda表达式初步与函数式接口"></a>lambda表达式初步与函数式接口</h2><h2 id="深入函数式接口与方法引用"><a href="#深入函数式接口与方法引用" class="headerlink" title="深入函数式接口与方法引用"></a>深入函数式接口与方法引用</h2><h2 id="lambda表达式深入与流初步"><a href="#lambda表达式深入与流初步" class="headerlink" title="lambda表达式深入与流初步"></a>lambda表达式深入与流初步</h2><h2 id="function接口详解"><a href="#function接口详解" class="headerlink" title="function接口详解"></a>function接口详解</h2><h2 id="function与bifunction函数式接口详解"><a href="#function与bifunction函数式接口详解" class="headerlink" title="function与bifunction函数式接口详解"></a>function与bifunction函数式接口详解</h2><h2 id="predicate深入剖析与函数式编程本质"><a href="#predicate深入剖析与函数式编程本质" class="headerlink" title="predicate深入剖析与函数式编程本质"></a>predicate深入剖析与函数式编程本质</h2><h2 id="supplier与函数式接口总结"><a href="#supplier与函数式接口总结" class="headerlink" title="supplier与函数式接口总结"></a>supplier与函数式接口总结</h2><h2 id="optional深入讲解"><a href="#optional深入讲解" class="headerlink" title="optional深入讲解"></a>optional深入讲解</h2><h2 id="方法引用详解"><a href="#方法引用详解" class="headerlink" title="方法引用详解"></a>方法引用详解</h2><h2 id="方法引用场景剖析与默认方法分析"><a href="#方法引用场景剖析与默认方法分析" class="headerlink" title="方法引用场景剖析与默认方法分析"></a>方法引用场景剖析与默认方法分析</h2><h2 id="stream介绍与操作方式详解"><a href="#stream介绍与操作方式详解" class="headerlink" title="stream介绍与操作方式详解"></a>stream介绍与操作方式详解</h2><h2 id="stream深度解析与源码实践"><a href="#stream深度解析与源码实践" class="headerlink" title="stream深度解析与源码实践"></a>stream深度解析与源码实践</h2><h2 id="stream实例剖析"><a href="#stream实例剖析" class="headerlink" title="stream实例剖析"></a>stream实例剖析</h2><h2 id="stream陷阱剖析"><a href="#stream陷阱剖析" class="headerlink" title="stream陷阱剖析"></a>stream陷阱剖析</h2><h2 id="内部迭代与外部迭代本质剖析及流本源分析"><a href="#内部迭代与外部迭代本质剖析及流本源分析" class="headerlink" title="内部迭代与外部迭代本质剖析及流本源分析"></a>内部迭代与外部迭代本质剖析及流本源分析</h2><h2 id="流的短路与并发流"><a href="#流的短路与并发流" class="headerlink" title="流的短路与并发流"></a>流的短路与并发流</h2><h2 id="stream分组与分区详解"><a href="#stream分组与分区详解" class="headerlink" title="stream分组与分区详解"></a>stream分组与分区详解</h2><h2 id="collector源码分析与收集器核心"><a href="#collector源码分析与收集器核心" class="headerlink" title="collector源码分析与收集器核心"></a>collector源码分析与收集器核心</h2><h2 id="collector同一性与结合性分析"><a href="#collector同一性与结合性分析" class="headerlink" title="collector同一性与结合性分析"></a>collector同一性与结合性分析</h2><h2 id="collector复合与注意事项"><a href="#collector复合与注意事项" class="headerlink" title="collector复合与注意事项"></a>collector复合与注意事项</h2><h2 id="收集器用法详解与多级分组和分区"><a href="#收集器用法详解与多级分组和分区" class="headerlink" title="收集器用法详解与多级分组和分区"></a>收集器用法详解与多级分组和分区</h2><h2 id="比较器详解与类型推断特例"><a href="#比较器详解与类型推断特例" class="headerlink" title="比较器详解与类型推断特例"></a>比较器详解与类型推断特例</h2><h2 id="比较器深入"><a href="#比较器深入" class="headerlink" title="比较器深入"></a>比较器深入</h2><h2 id="自定义收集器实现"><a href="#自定义收集器实现" class="headerlink" title="自定义收集器实现"></a>自定义收集器实现</h2><h2 id="自定义收集器深度剖析与并行流陷阱"><a href="#自定义收集器深度剖析与并行流陷阱" class="headerlink" title="自定义收集器深度剖析与并行流陷阱"></a>自定义收集器深度剖析与并行流陷阱</h2><h2 id="收集器枚举特性深度解析与并行流原理"><a href="#收集器枚举特性深度解析与并行流原理" class="headerlink" title="收集器枚举特性深度解析与并行流原理"></a>收集器枚举特性深度解析与并行流原理</h2><h2 id="collectors工厂类源码分析与实战"><a href="#collectors工厂类源码分析与实战" class="headerlink" title="collectors工厂类源码分析与实战"></a>collectors工厂类源码分析与实战</h2><h2 id="groupinby源码分析"><a href="#groupinby源码分析" class="headerlink" title="groupinby源码分析"></a>groupinby源码分析</h2><h2 id="partioningby与groupingbyconcurrent源码分析"><a href="#partioningby与groupingbyconcurrent源码分析" class="headerlink" title="partioningby与groupingbyconcurrent源码分析"></a>partioningby与groupingbyconcurrent源码分析</h2><h2 id="stream源码分析"><a href="#stream源码分析" class="headerlink" title="stream源码分析"></a>stream源码分析</h2><h2 id="stream与basestream源码分析"><a href="#stream与basestream源码分析" class="headerlink" title="stream与basestream源码分析"></a>stream与basestream源码分析</h2><h2 id="分割迭代器源码剖析"><a href="#分割迭代器源码剖析" class="headerlink" title="分割迭代器源码剖析"></a>分割迭代器源码剖析</h2><h2 id="分割迭代器与forkjoin详解"><a href="#分割迭代器与forkjoin详解" class="headerlink" title="分割迭代器与forkjoin详解"></a>分割迭代器与forkjoin详解</h2><h2 id="分割迭代器实现分析"><a href="#分割迭代器实现分析" class="headerlink" title="分割迭代器实现分析"></a>分割迭代器实现分析</h2><h2 id="ofprimitive与ofint实现原理剖析"><a href="#ofprimitive与ofint实现原理剖析" class="headerlink" title="ofprimitive与ofint实现原理剖析"></a>ofprimitive与ofint实现原理剖析</h2><h2 id="流源构造代码分析"><a href="#流源构造代码分析" class="headerlink" title="流源构造代码分析"></a>流源构造代码分析</h2><h2 id="referencepipeline与abstractpipeline源码深度解读"><a href="#referencepipeline与abstractpipeline源码深度解读" class="headerlink" title="referencepipeline与abstractpipeline源码深度解读"></a>referencepipeline与abstractpipeline源码深度解读</h2><h2 id="iteratorspliterator与流源操作方式详解"><a href="#iteratorspliterator与流源操作方式详解" class="headerlink" title="iteratorspliterator与流源操作方式详解"></a>iteratorspliterator与流源操作方式详解</h2><h2 id="流调用机制与原理大揭秘"><a href="#流调用机制与原理大揭秘" class="headerlink" title="流调用机制与原理大揭秘"></a>流调用机制与原理大揭秘</h2><h2 id="sink与opwrapsink源码解读"><a href="#sink与opwrapsink源码解读" class="headerlink" title="sink与opwrapsink源码解读"></a>sink与opwrapsink源码解读</h2><h2 id="terminalop源码分析与终止操作层次体系"><a href="#terminalop源码分析与终止操作层次体系" class="headerlink" title="terminalop源码分析与终止操作层次体系"></a>terminalop源码分析与终止操作层次体系</h2><h2 id="流延迟求值底层分析与sink连接机制揭秘"><a href="#流延迟求值底层分析与sink连接机制揭秘" class="headerlink" title="流延迟求值底层分析与sink连接机制揭秘"></a>流延迟求值底层分析与sink连接机制揭秘</h2><h2 id="stream中间操作与终止操作层次体系分析与设计思想剖析"><a href="#stream中间操作与终止操作层次体系分析与设计思想剖析" class="headerlink" title="stream中间操作与终止操作层次体系分析与设计思想剖析"></a>stream中间操作与终止操作层次体系分析与设计思想剖析</h2><h2 id="joda项目介绍与实战"><a href="#joda项目介绍与实战" class="headerlink" title="joda项目介绍与实战"></a>joda项目介绍与实战</h2><h2 id="java8全新日期与时间api详解与utc介绍"><a href="#java8全新日期与时间api详解与utc介绍" class="headerlink" title="java8全新日期与时间api详解与utc介绍"></a>java8全新日期与时间api详解与utc介绍</h2><h2 id="java8全新日期与时间api实战"><a href="#java8全新日期与时间api实战" class="headerlink" title="java8全新日期与时间api实战"></a>java8全新日期与时间api实战</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;观看笔记：&lt;a href=&quot;https://www.bilibili.com/video/BV1w4411e7T8?p=1&quot; target=
      
    
    </summary>
    
    
      <category term="jdk8" scheme="https://fengshana.github.io/categories/jdk8/"/>
    
    
      <category term="jdk8" scheme="https://fengshana.github.io/tags/jdk8/"/>
    
      <category term="java" scheme="https://fengshana.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>MicroservicesGuide-走近微服务</title>
    <link href="https://fengshana.github.io/2020/05/27/%E3%80%90MICROSERVICES%E3%80%91/%E3%80%90MICROSERVICES%E3%80%91MicroservicesGuide-%E8%B5%B0%E8%BF%91%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>https://fengshana.github.io/2020/05/27/%E3%80%90MICROSERVICES%E3%80%91/%E3%80%90MICROSERVICES%E3%80%91MicroservicesGuide-%E8%B5%B0%E8%BF%91%E5%BE%AE%E6%9C%8D%E5%8A%A1/</id>
    <published>2020-05-27T10:36:35.464Z</published>
    <updated>2020-05-27T10:36:35.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Nothing better than a buzy Saturday morning.</p></blockquote><p>为什么想要翻译这篇博客呢，因为也是看了b站上的一个学习springboot的一个视频，而且我今天面试的时候人家问了微服务是什么，然后由此可得我万分后悔没有当时通篇翻译这篇博客。<br>好了现在后悔也挽救不了我的愚不可及了。<br>观看笔记：<a href="https://www.bilibili.com/video/BV1Eg4y187XT" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Eg4y187XT</a><br>就是这个视频告诉了我：推荐看哦~<br>为了不后悔，以后每件事情，能做笔记就一定要压着自己做，不然会后悔的；  </p><h2 id="Microservices-Guide-微服务指南（翻译）"><a href="#Microservices-Guide-微服务指南（翻译）" class="headerlink" title="Microservices Guide 微服务指南（翻译）"></a>Microservices Guide 微服务指南（翻译）</h2><p>链接：<a href="https://www.martinfowler.com/microservices/" target="_blank" rel="noopener">https://www.martinfowler.com/microservices/</a>  </p><blockquote><p>A guide to material on martinfowler.com about microservices.<br><strong>Matin Fowler</strong><br>21 Aug 2019  </p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">martinfowler.com网站关于微服务的一个材料指南</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">--------------------------------------------------------</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">有道词典翻译：</span></span><br><span class="line"><span class="keyword">martinfowler.com </span>上关于微服务的材料指南。</span><br></pre></td></tr></table></figure><h3 id="Microservices-Guide"><a href="#Microservices-Guide" class="headerlink" title="Microservices Guide"></a>Microservices Guide</h3><h4 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h4><blockquote><p>In short , the microservice architectural style is an approach to developing a single application as a <strong>suite of small services</strong> , each <strong>running in its own process</strong>  and communicating with lightweight mechanisms , often an HTTP resource API .<br>These services are <strong>built around business capabilities</strong> and <strong>independently deployable</strong> by fully automated deployment machinery .<br>There is a bare minimum of centralized management of these services , which may be written in different programming languages and use different data storage technologies .<br>– <strong>James Lewis</strong> and <strong>Martin Fowler</strong>（2014）  </p></blockquote><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">简而言之，</span><br><span class="line">微服务架构风格 是一种近似于 将一个单体应用程序作为一个小型服务套件来进行开发的风格，</span><br><span class="line">每一个小型服务都运行在它自身的进程当中，</span><br><span class="line">并且通过轻量级机制进行相互间的交流，</span><br><span class="line">通常是以一种超文本传输协议资源应用编程接口的方式进行交互。</span><br><span class="line">这些服务都是围绕业务逻辑来进行构建的并且通过全自动化部署机制来进行独立部署。</span><br><span class="line">最低限度的集中式管理着这些服务（这些服务的集中管理非常少），</span><br><span class="line">通过这种方式，</span><br><span class="line">或许可以使用不同的程序语言进行编写以及使用不同的数据存储技术。</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------</span><br><span class="line"></span><br><span class="line">有道词典翻译：</span><br><span class="line"></span><br><span class="line">简而言之，</span><br><span class="line">微服务体系结构风格是一种将单个应用程序作为一组小服务进行开发的方法，</span><br><span class="line">每个小服务都在自己的进程中运行，并与轻量级机制<span class="params">(通常是HTTP资源API)</span>进行通信。</span><br><span class="line">这些服务是围绕业务功能构建的，</span><br><span class="line">并且可以通过完全自动化的部署机制独立部署。</span><br><span class="line">这些服务的集中管理非常少，</span><br><span class="line">它们可以用不同的编程语言编写，</span><br><span class="line">并使用不同的数据存储技术。</span><br><span class="line">——詹姆斯·刘易斯和马丁·福勒<span class="params">(<span class="number">2014</span>)</span></span><br></pre></td></tr></table></figure><h3 id="Introduce-Martin-Fowler"><a href="#Introduce-Martin-Fowler" class="headerlink" title="Introduce - Martin Fowler"></a>Introduce - Martin Fowler</h3><p>了解微服务之前首先来看看<strong>Martin Fowler</strong>老爷子的自我介绍；<br>Fowler刚被我打成了Flower；  </p><p>简介链接：<a href="https://www.martinfowler.com" target="_blank" rel="noopener">https://www.martinfowler.com</a>  </p><h4 id="Contents-1"><a href="#Contents-1" class="headerlink" title="Contents"></a>Contents</h4><blockquote><p>Software development is a young profession , and we are still learning the techniques and building the tools to do it effectively .<br>I’ve been involved in this activity for over three decades and in the last two I’ve been writing on this website about patterns and practives that make it easier to build userful software .<br>The site began as a place to put my own writing , but I also use it to publish articles by my colleagues .  </p></blockquote><blockquote><p>In 2000 , I joined ThoughtWorkds , where my role is to learn about the techniques that we’ve learned to deliver software for our clients , and pass these techniques on to the wider software industry .<br>As this site has developed into a respected platform on software development , I’ve edited and published articles by me colleagues , both ThoughtWorkers and others , to help useful writing reach a wider audience .  </p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">软件发展是一个年轻的专业技术，</span><br><span class="line">并且我们是仍然在学习这门技术 和 构建一些工具去有效的完成它。</span><br><span class="line">我已经参与到这一项活动（工作）当中已经超过三十年了，</span><br><span class="line">并且在最近两年内，</span><br><span class="line">我在这个网站站点上已经编写了关于如何更容易的去构建有用的软件的一些思想模式以及练习方法；</span><br><span class="line">这个站点开始时作为来存放我自己的一个写作的一个地方，</span><br><span class="line">但是我也使用这个地方来进行发布一些通过我同事们写的文章；</span><br><span class="line"></span><br><span class="line">在<span class="number">2000</span>年，我加入到了ThoughtWorks，</span><br><span class="line">在这个地方我扮演的角色是去学习这一项技术，</span><br><span class="line">我们已经学习到去为我们的客户实现软件，</span><br><span class="line">以及通过这些技术在更广阔的软件产业当中；</span><br><span class="line">这个站点已经逐渐发展成为一个受人尊敬的平台在软件发展史当中，</span><br><span class="line">我已经写了很多以及发布了很多我同事写的文章，同时还有ThoughtWorkers的员工以及其他人；</span><br><span class="line">来帮助有用的写作，即逐渐成为一个有深度的受众；</span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line"></span><br><span class="line">有道词典翻译：</span><br><span class="line">软件开发是一个年轻的职业，</span><br><span class="line">我们仍然在学习技术和构建工具来有效地完成它。</span><br><span class="line">我已经参与这项活动超过<span class="number">30</span>年了，</span><br><span class="line">在过去的两年中，</span><br><span class="line">我一直在这个网站上撰写关于使构建有用软件变得更容易的模式和实践的文章。</span><br><span class="line">这个网站一开始是一个放置我自己的文章的地方，</span><br><span class="line">但我也用它来发表我同事的文章。</span><br><span class="line"><span class="number">2000</span>年，我加入了ThoughtWorks，</span><br><span class="line">在这里，我的职责是学习我们为客户交付软件的技术，</span><br><span class="line">并将这些技术传递给更广泛的软件行业。</span><br><span class="line">随着这个网站发展成为一个受人尊敬的软件开发平台，</span><br><span class="line">我已经编辑并发表了我的同事们的文章，</span><br><span class="line">包括ThoughtWorkers和其他人，</span><br><span class="line">以帮助更广泛的读者阅读有用的文章。</span><br></pre></td></tr></table></figure><h3 id="A-website-on-building-software-effectively"><a href="#A-website-on-building-software-effectively" class="headerlink" title="A website on building software effectively"></a>A website on building software effectively</h3><p>A website on building software effectively</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在一个网站上有效地构建软件</span><br><span class="line"></span><br><span class="line"><span class="comment">-------------------------</span></span><br><span class="line"></span><br><span class="line">一个有效开发软件的网站</span><br></pre></td></tr></table></figure><h4 id="Contents-2"><a href="#Contents-2" class="headerlink" title="Contents"></a>Contents</h4><blockquote><p>If there’s a theme that runs through my work and writing on this site , it’s the interplay between the shift towards agile thinking and the technical patterns and practices that make agile software development practical .<br>While specifics of technology change rapidly in our profession , fundamental practices and patterns are more stable .<br>So writing about these allows me to have articles on this site that are several years old but still as relevant as when they were written .  </p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">如果 这是一个主题（定语：贯穿着我的工作经历以及在这个站点上的文字）</span><br><span class="line">那么在 转变成敏捷式思维 与 技术的模式和使得敏捷式软件开发 变成事实 这两者之间其实是相互影响的。</span><br><span class="line">当 技术的特性 在我们的职业该行当中 发展改变十分迅速 时，</span><br><span class="line">基本的实践练习 与 模式 就变得需要十分的牢固。</span><br><span class="line">所以编写这些关于 容许我在这个站点（定语：虽然才只有几岁即虽然才开始几年，但是只要当遇到与之相关的他们就都会被一致持续写入进来）上拥有了的文章。</span><br><span class="line"></span><br><span class="line"><span class="comment">---------------------------------------------</span></span><br><span class="line"></span><br><span class="line">有道词典翻译：</span><br><span class="line">如果说我在这个站点上的工作和写作中贯穿着一个主题，那就是敏捷思维的转变与使敏捷软件开发切实可行的技术模式和实践之间的相互作用。</span><br><span class="line">虽然技术细节在我们的职业中变化很快，但基本的实践和模式更加稳定。</span><br><span class="line">所以写这些东西让我可以在这个网站上写一些文章，这些文章已经有好几年的历史了，但是仍然和当初写的时候一样重要。</span><br></pre></td></tr></table></figure><blockquote><p>As software becomes more critical to modern business , software needs be able to react quickly to changes ,  allowing new features to be be conceived , developed and put into production rapidly .<br>The techniques of <font style="color:red;font-weight:bolder">agile software development</font> began in the 1990s and became steadily more popular in the last decade .<br>The focus on a flexible approach to planning , which allows software products to change direction as the user’s needs change and as product managers learn more about how to make their users effective .<br>While widely accepted now , agile approaches are not easy , requiring significant skills for a team , but more importantly a culture of open collaboration both within the team and with a team’s partners .  </p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">当软件为了现在的业务逻辑就越需要批评，</span><br><span class="line">软件需要能够快速地对改变做出反应，允许一些新特性被构思实现，发展以及迅速地落实成为一个产品。</span><br><span class="line">敏捷式开发软件的这项技术开始在<span class="number">1990</span>年的时候，直到在近十年内开始稳定地变得越发流行起来了。</span><br><span class="line">集中于在一个灵活性上，类似于规划预期中，它允许软件产品来进行定向的改变当客户需要进行改变以及当产品管理者学到更多关于如何让他们的客户变得印象深刻。</span><br><span class="line">当现在被更广泛的接受，敏捷式的处理是并不容易的，它要求重大的的技能对于一个团队来说，但是更重要的是一个开源合作的文化，这两者都需要团队以及团队成员之间的协作。</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">有道词典翻译：</span><br><span class="line">随着软件在现代商业中变得越来越重要，</span><br><span class="line">软件需要能够对变化做出快速反应，</span><br><span class="line">允许快速构思、开发新特性并将其投入生产。</span><br><span class="line">敏捷软件开发技术开始于<span class="number">20</span>世纪<span class="number">90</span>年代，并在过去十年中逐渐流行起来。</span><br><span class="line">他们专注于一种灵活的计划方法，</span><br><span class="line">这种方法允许软件产品随着用户需求的变化而改变方向，</span><br><span class="line">并且随着产品经理更多地了解如何让他们的用户更有效。</span><br><span class="line">虽然敏捷方法现在已被广泛接受，</span><br><span class="line">但它并不简单，</span><br><span class="line">需要团队的重要技能，</span><br><span class="line">但更重要的是团队内部和团队合作伙伴之间的开放协作文化。</span><br></pre></td></tr></table></figure><blockquote><p>This need to respond fluently to changes has an important impact upon the <font style="color:red;font-weight:bolder">architecture</font> of a software system.<br>The software needs to be built in such a way that it is able to adapt to unexpected changes in features .<br>One of the most important ways to do this is to write clear code , making it easy to understant what the program is supposed to do .<br>This code should be devided into modules which allow developers to understand only the parts of the system they need to make a change .<br>This production code should be supported with automated tests that can detect any errors made when making a change while providing examples of how internal structures are used .<br>Large and complex software efforts may find the <font style="color:red;font-weight:bolder">microservices</font> architectural style helps teams deploy software with less entangling dependencies .  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Creating software that has a good architecture isn’t something that can be done first time .<br>Like good prose , it needs regular revisions and programmers learn more about what the product needs to do and how best to design the product to achieve its goals .<br><font style="color:red;font-weight:bolder">Refactoring</font> is an essential technique to allow a program to be changed safety .<br>It consists of making small changes that don’t alter the observable behavior of the software .<br>Bt combining lots of small changes , developers can revise the software’s structure supporting significant modifications that weren’t planned when the system was first conceived .  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Software that runs only on a developer’s machine isn’t providing value to the customers of the software .<br>Traditionally releasing software has been a long and complicated process , one that hinders the need to evolve software quickly .<br><font style="color:red;font-weight:bolder">Continuous Delivery</font> uses automation and collaborative workflows to remove this bottleneck , allowing teams to release software as often as the customers demand .<br>For Continuous Delivery to be possible , we need to build in a solid foundation of <font style="color:red;font-weight:bolder">Testing</font> , with a range of automated tests that can give us confidence taht our changes haven’t introduced any bugs .<br>This leads us to integrate testing into programming , which can act to improve our architectural .  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Photostream"><a href="#Photostream" class="headerlink" title="Photostream"></a>Photostream</h3><h3 id="Data-Management"><a href="#Data-Management" class="headerlink" title="Data Management"></a>Data Management</h3><h4 id="Contents-3"><a href="#Contents-3" class="headerlink" title="Contents"></a>Contents</h4><blockquote><p>There are many kinds of softeare out there , the kind I’m primarily engaged is Enterprise Applications .<br>One of the enduring problems we need to tackle in this world is <font style="color:red;font-weight:bolder">data management</font> .<br>The aspectes of data management I’ve focused on here are how to migrate data stores as their applications respond to changing needs , coping with different contexts across a large enterprice , the role of NoSQL databases , and the broader issues of coping with data that is both Big and Messy .  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Domain-Specific-Languages"><a href="#Domain-Specific-Languages" class="headerlink" title="Domain-Specific Languages"></a>Domain-Specific Languages</h3><h3 id="Contents-4"><a href="#Contents-4" class="headerlink" title="Contents"></a>Contents</h3><blockquote><p>A common problem in complex software systems is how to capture complicated domain logic in a way that programmers can both easily manipulate and also easily communicate to domain experts .<br><font style="color:red;font-weight:bolder">Domain-Specific Languages</font>(DSLs) create a custom language for a particular problem , either with custom parsers or by conventions within a host language .  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h3><h4 id="Contents-5"><a href="#Contents-5" class="headerlink" title="Contents"></a>Contents</h4><blockquote><p>I’ve written seven books on software development , including Refactoring , Patterns of Enterprise Application Architectural , and UML Distilled .<br>I’m also the editor of a signature series for Addison-Wesley that includes five jolt award winners .<br><font style="color:red;font-weight:bolder">My Books Page…</font>  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Conference-Talks"><a href="#Conference-Talks" class="headerlink" title="Conference Talks"></a>Conference Talks</h3><h4 id="Contents-6"><a href="#Contents-6" class="headerlink" title="Contents"></a>Contents</h4><blockquote><p>I’m often asked to give talks at conferences , from which I’ve inferred that I’m a pretty good speaker - which is ironic since I really hate giving talks .<br>You can form your own opinion of my talks by watching videos of some my conference talks .<br><font style="color:red;font-weight:bolder"> My Videos Page…</font>  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Board-Games"><a href="#Board-Games" class="headerlink" title="Board Games"></a>Board Games</h3><h4 id="Contents-7"><a href="#Contents-7" class="headerlink" title="Contents"></a>Contents</h4><blockquote><p>I’ve long been a fan of board games , I enjoy a game that fully occupies my mind , clearing out all the serious thoughts for a bit , while enjoying the company of good friends .<br>Modern board games saw dramatic improvement in the 1990’s with the rise of Eurogames , and I expect many people would be surprised if they haven’t tried any of this new generation .<br>I also appear regularly on <font style="color:red;font-weight:bolder">Heavy Cardboard</font> .<br><font style="color:red;font-weight:bolder">My Board Games page…</font>  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Nothing better than a buzy Saturday morning.&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
    
      <category term="MICROSERVICES" scheme="https://fengshana.github.io/categories/MICROSERVICES/"/>
    
    
      <category term="面试" scheme="https://fengshana.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="MICROSERVICES" scheme="https://fengshana.github.io/tags/MICROSERVICES/"/>
    
  </entry>
  
  <entry>
    <title>MicroservicesGuide-走近微服务词汇</title>
    <link href="https://fengshana.github.io/2020/05/27/%E3%80%90MICROSERVICES%E3%80%91/%E3%80%90MICROSERVICES%E3%80%91MicroservicesGuide-%E8%B5%B0%E8%BF%91%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AF%8D%E6%B1%87/"/>
    <id>https://fengshana.github.io/2020/05/27/%E3%80%90MICROSERVICES%E3%80%91/%E3%80%90MICROSERVICES%E3%80%91MicroservicesGuide-%E8%B5%B0%E8%BF%91%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AF%8D%E6%B1%87/</id>
    <published>2020-05-27T10:36:35.464Z</published>
    <updated>2020-05-27T10:36:35.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Microservices-Guide-微服务指南词汇导读"><a href="#Microservices-Guide-微服务指南词汇导读" class="headerlink" title="Microservices Guide 微服务指南词汇导读"></a>Microservices Guide 微服务指南词汇导读</h2><p>我觉得我对有道词典的翻译有点迷…..<br>感觉怪怪的；  </p><p><strong>software</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">so : f : t : wa : re ( 英 /ˈsɒftweə(r)/  )</span><br><span class="line">n. 软件</span><br><span class="line">网络释义 软件；软件；软件；软设备</span><br><span class="line">Software 软件；软件；软件；软设备</span><br><span class="line">free software 自由软件；自由软体；免费软件；自在软件</span><br><span class="line">software framework 软件框架；软体框架；软件架构</span><br><span class="line">software development 软件开发</span><br><span class="line">software design 软件设计；软件开发</span><br><span class="line">software<span class="built_in"> system </span>软件系统</span><br></pre></td></tr></table></figure><p><strong>development</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">de</span> : <span class="string">ve : lo : p : men : t ( 英 /dɪˈveləpmənt/  )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">发展；开发；发育；住宅小区（专指由同一开发商开发的）；[摄]显影</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">developments</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">开发；发展；发育；进化；</span></span><br><span class="line"><span class="attr">Development</span> <span class="string">开发；发展；发育；进化</span></span><br><span class="line"><span class="attr">Software</span> <span class="string">Development 软件开发；软体开发；软件发展；软件研发</span></span><br><span class="line"><span class="attr">Career</span> <span class="string">Development 生涯规划；职业规划；生涯发展；事业发展</span></span><br><span class="line"><span class="attr">sustainable</span> <span class="string">development 可持续发展</span></span><br><span class="line"><span class="attr">economic</span> <span class="string">development 经济发展；经济开发</span></span><br><span class="line"><span class="attr">with</span> <span class="string">the development of 随着 ... 发展</span></span><br></pre></td></tr></table></figure><p><strong>young</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">young</span> <span class="string">( 英 /jʌŋ/ )</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">年轻的；初期的；没有经验的</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">年轻人；（动物的）崽，仔</span></span><br><span class="line"><span class="meta">比较级</span> <span class="string">younger</span></span><br><span class="line"><span class="meta">最高级</span> <span class="string">youngest</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">youngs</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">年轻人；青年版；杨格</span></span><br><span class="line"><span class="attr">Young</span> <span class="string">年轻人；青年版；杨格</span></span><br><span class="line"><span class="attr">Neil</span> <span class="string">Young 尼尔 杨；尼尔杨</span></span><br><span class="line"><span class="attr">Brigham</span> <span class="string">Young 杨百翰；杨百翰大学；</span></span><br></pre></td></tr></table></figure><p><strong>profession</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">p</span> : <span class="string">ro : fe : ssion ( 英 /prəˈfeʃn/ )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">职业；专业；声明；宣布；表白</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">professions</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">职业；专业；专业；行业</span></span><br><span class="line"><span class="attr">profession</span> <span class="string">职业；专业；专业；行业</span></span><br><span class="line"><span class="attr">caring</span> <span class="string">profession 护理行业；照顾他人的职业</span></span><br><span class="line"><span class="attr">Profession</span> <span class="string">informationization 行业信息化</span></span><br><span class="line"><span class="attr">profession</span> <span class="string">of 宣称（感情、信念等）；表白</span></span><br><span class="line"><span class="attr">legal</span> <span class="string">profession 法律界；法律专业</span></span><br><span class="line"><span class="attr">medical</span> <span class="string">profession 医疗职业</span></span><br></pre></td></tr></table></figure><p><strong>still</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">s</span> : <span class="string">t : ill ( 英 /stɪl/  )</span></span><br><span class="line"><span class="meta">adv.</span> <span class="string">仍然；更；静止地</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">静止的；不动的；寂静的；平静的；不起泡的</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">寂静；剧照；蒸馏室</span></span><br><span class="line"><span class="meta">conj.</span> <span class="string">仍然；但是；尽管如此</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">蒸馏；使...静止；使....平静下来</span></span><br><span class="line"><span class="meta">vi.</span> <span class="string">静止；平静；蒸馏</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">静止；仍然；蒸馏釜；依然</span></span><br><span class="line"><span class="attr">still</span> <span class="string">静止；仍然；蒸馏釜；依然</span></span><br><span class="line"><span class="attr">still</span> <span class="string">camera 静物照相机；静物摄影集；拍照机</span></span><br><span class="line"><span class="attr">Still</span> <span class="string">wine 静止葡萄酒；静态葡萄酒；无气葡萄酒；平静葡萄酒</span></span><br><span class="line"><span class="attr">still</span> <span class="string">on 仍在进行</span></span><br><span class="line"><span class="attr">still</span> <span class="string">remains 仍然是</span></span><br><span class="line"><span class="attr">sit</span> <span class="string">still 安静地坐着</span></span><br></pre></td></tr></table></figure><p><strong>learning</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lear</span> : <span class="string">ning ( 英 /ˈlɜːnɪŋ/  )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">学习；学问</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">学习（learn的现在分词）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">学习；学习；学问；知识</span></span><br><span class="line"><span class="attr">learning</span> <span class="string">学习；学习；学问；知识</span></span><br><span class="line"><span class="attr">ensemble</span> <span class="string">learning 集成学习；围绕中心点的划分；组合算法</span></span><br><span class="line"><span class="attr">Blended</span> <span class="string">Learning 混合式学习；混合学习；混合式教学</span></span><br><span class="line"><span class="attr">learning</span> <span class="string">English 学习英语</span></span><br><span class="line"><span class="attr">higher</span> <span class="string">learning n. 高等教育；高深学问；（电影名称）校园大冲突</span></span><br><span class="line"><span class="attr">language</span> <span class="string">learning 语言学习</span></span><br></pre></td></tr></table></figure><p><strong>techniques</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">te</span> : <span class="string">chi : ni : qu : es ( chi 读 k 的音；qu 读 k 的音； 英 /tekˈni:ks/ )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">技术（technique的复数）；方法；技巧</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">技法；技术；技巧；网站架构</span></span><br><span class="line"><span class="attr">Techniques</span> <span class="string">技法；技术；技巧；网站架构</span></span><br><span class="line"><span class="attr">Sampling</span> <span class="string">techniques 采样技术；抽样技术；取样技术；采样妙技</span></span><br><span class="line"><span class="attr">Metallographic</span> <span class="string">Techniques 金相技术</span></span><br><span class="line"><span class="attr">application</span> <span class="string">Techniques 涂装技术</span></span><br><span class="line"><span class="attr">selling</span> <span class="string">techniques 推销技术</span></span><br><span class="line"><span class="attr">motivational</span> <span class="string">techniques 激励技能；激励方法（motivational technique 的复数）</span></span><br></pre></td></tr></table></figure><p><strong>building</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bu </span>: il : ding ( 英 /ˈ<span class="keyword">bɪldɪŋ/ </span> )</span><br><span class="line"><span class="symbol">n.</span> 建筑；建筑物</span><br><span class="line"><span class="symbol">v.</span> 建筑；建立；增加（<span class="keyword">build的ing形式）</span></span><br><span class="line"><span class="keyword">复数 </span><span class="keyword">buildings</span></span><br><span class="line"><span class="keyword">网络释义 </span>建筑物；大楼；号楼；房屋</span><br><span class="line"><span class="keyword">building </span>建筑物；大楼；号楼；房屋</span><br><span class="line"><span class="symbol">green</span> <span class="keyword">building </span>绿色建筑；绿色生态建筑；绿色修建</span><br><span class="line"><span class="symbol">Chrysler</span> <span class="keyword">Building </span>克莱斯勒大厦；克莱斯勒大楼；美国克莱斯勒大厦；克莱斯勒</span><br><span class="line"><span class="keyword">building </span>up 建造；装配；堆焊；建立增长</span><br><span class="line"><span class="symbol">office</span> <span class="keyword">building </span>办公大楼（等于office <span class="keyword">block）</span></span><br><span class="line"><span class="keyword">building </span>material 建筑材料</span><br></pre></td></tr></table></figure><p><strong>tools</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">too : l : s ( 英 /tuːlz/  )</span><br><span class="line">n. [计]工具，工具菜单；工具箱（tool的复数形式）</span><br><span class="line">v. 用工具加工<span class="built_in">..</span>. (tool的第三人称单数形式)</span><br><span class="line">网络释义 工具；刀具；面板；工具栏</span><br><span class="line">Tools 工具；刀具；面板；工具栏</span><br><span class="line">Game Tools 游戏常用工具；游戏常用支持工具集合；游戏开发工具；游戏工具</span><br><span class="line">Debugging Tools 调试工具；翟工具；排错工具；除错工具；</span><br><span class="line">hardware tools 五金工具；日用五金</span><br><span class="line">new tools 新工具</span><br><span class="line">machines <span class="keyword">and</span> tools 机具</span><br></pre></td></tr></table></figure><p><strong>effectively</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e : <span class="type">ffe</span> : <span class="type">c</span> : <span class="type">ti</span> : <span class="type">ve</span> : <span class="type">ly</span> ( 英 /ɪˈfektɪvli/ )</span><br><span class="line">adv. 有效地；生效地；有力地；实际上</span><br><span class="line">网络释义 有效地；起作用地；实际上；有用地</span><br><span class="line">effectively 有效地；起作用地；实际上；有用地</span><br><span class="line">effectively grounded 直接接地；有效被接地；有效接地；有效接地的</span><br><span class="line"><span class="keyword">use</span> effectively 有效利用；有效地利用</span><br></pre></td></tr></table></figure><p><strong>involved</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">in</span> : <span class="string">vol : ve : d (ve 读 v 的音 英 /ɪnˈvɒlvd/  )</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">有关的；卷入的；复杂的</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">涉及；使参与；包含（involve的过去时和过去分词）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">卷入；涉案；涉足；所涉及</span></span><br><span class="line"><span class="attr">Involved</span> <span class="string">卷入；涉案；涉足；所涉及</span></span><br><span class="line"><span class="attr">parties</span> <span class="string">involved 交换中的各方；当事人；当事者；互换中的各方</span></span><br><span class="line"><span class="attr">get</span> <span class="string">involved 介入；加入我们；项目介绍；参与</span></span><br><span class="line"><span class="attr">involved</span> <span class="string">in 涉及；包含；牵涉进...</span></span><br><span class="line"><span class="attr">involved</span> <span class="string">with 涉及；与...有关联</span></span><br><span class="line"><span class="attr">get</span> <span class="string">involved in 涉及；卷入</span></span><br></pre></td></tr></table></figure><p><strong>activity</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span> : <span class="string">c : ti : vi : ty ( 英 /ækˈtɪvəti/ )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">活动；行动；活跃</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">activities</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">活动；活性；活度；活动</span></span><br><span class="line"><span class="attr">Activity</span> <span class="string">活动；活性；活度；活动</span></span><br><span class="line"><span class="attr">logistics</span> <span class="string">activity 物流活动；物流</span></span><br><span class="line"><span class="attr">physical</span> <span class="string">activity 体力活动；体育活动；体能活动</span></span><br><span class="line"><span class="attr">economic</span> <span class="string">activity 经济活动</span></span><br><span class="line"><span class="attr">catalytic</span> <span class="string">activity 催化活性</span></span><br><span class="line"><span class="attr">physical</span> <span class="string">activity 身体活动；体育活动；体力活动</span></span><br></pre></td></tr></table></figure><p><strong>over</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">o : v : er ( 英 /ˈəʊvə(r)/  )</span><br><span class="line">adv. 倒下；翻转；穿过；完全覆盖；以上；大于；再；结束；改变；完毕；仔细地</span><br><span class="line">prep. 在<span class="params">...</span>上面；从<span class="params">...</span>上方；穿越；在<span class="params">...</span>的另一边；在<span class="params">...</span>的远端；从<span class="params">...</span>落下；遍及；多于；在<span class="params">...</span>期间；渡过；由于；关于；利用；通过；声音大于；高于；级别在<span class="params">...</span>之上；优先于；超过</span><br><span class="line">n. （板球）一轮投球</span><br><span class="line">adj. 倒下的；折起来的；结束的；剩下的</span><br><span class="line">v. 越过</span><br><span class="line">网络释义 结束；越过；超过</span><br><span class="line">over 结束；越过；超过</span><br><span class="line">hand over 移交；交出；让与</span><br><span class="line">Over There 那时那地；在那边；在那里；那边</span><br><span class="line"><span class="literal">all</span> over 到处；遍及；浑身；全部结束</span><br><span class="line">over there adv. 在那里</span><br><span class="line">over <span class="literal">and</span> over 反复；再三</span><br></pre></td></tr></table></figure><p><strong>decades</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">n.</span> <span class="string">数十年（decade的复数）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">十年；几十年；几十年来；台阶</span></span><br><span class="line"><span class="attr">decades</span> <span class="string">十年；几十年；几十年来；台阶</span></span><br><span class="line"><span class="attr">Mixed</span> <span class="string">Decades 某某年代风</span></span><br><span class="line"><span class="attr">Frogger</span> <span class="string">Decades 青蛙过河纪念版</span></span><br><span class="line"><span class="attr">over</span> <span class="string">the past decade 在过去的十年里</span></span><br></pre></td></tr></table></figure><p><strong>writing</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wri</span> : <span class="string">ting ( 英 /ˈraɪtɪŋ/  )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">书写；写作技能；著书立说；写作的职业；作品；著作；文字；笔迹</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">书写；写作（write的现在分词）</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">writings</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">写作；书写；文字</span></span><br><span class="line"><span class="attr">Writing</span> <span class="string">写作；书写；文字</span></span><br><span class="line"><span class="attr">Nature</span> <span class="string">Writing 自然写作；自然书写；自然文学</span></span><br><span class="line"><span class="attr">English</span> <span class="string">Writing 英语写作；英文写作；英文书面表达；写作</span></span><br><span class="line"><span class="attr">in</span> <span class="string">writing 书面；书面的；用书面写</span></span><br><span class="line"><span class="attr">writing</span> <span class="string">ability 写作能力；书写能力</span></span><br><span class="line"><span class="attr">writing</span> <span class="string">skill 写作技巧；书写技能；笔头</span></span><br></pre></td></tr></table></figure><p><strong>in the last two</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在最后两个</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">last</span> <span class="literal">two</span> months 在过去的两个月；在最后两个月</span><br><span class="line">In <span class="keyword">the</span> <span class="keyword">last</span> <span class="literal">two</span> years 在最后两年中</span><br><span class="line">In <span class="keyword">the</span> <span class="keyword">last</span> <span class="literal">two</span> decades 在最近二十年</span><br></pre></td></tr></table></figure><p><strong>website</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">we</span> : <span class="string">b : si : te ( 英 /ˈwebsaɪt/ )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">网站（全球资讯网的主机站）</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">websites</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">网站；网址；网站建设；站点</span></span><br><span class="line"><span class="attr">Website</span> <span class="string">网站；网址；网站建设；站点</span></span><br><span class="line"><span class="attr">Website</span> <span class="string">Design 网站设计；网页设计；网站建设；品牌网站形象设计</span></span><br><span class="line"><span class="attr">Website</span> <span class="string">Promotion 网站推广；网站推广常识；网站推广知识；企业网站网络推广；</span></span><br><span class="line"><span class="attr">website</span> <span class="string">design 网站设计</span></span><br><span class="line"><span class="attr">website</span> <span class="string">promotion 网站推广</span></span><br><span class="line"><span class="attr">website</span> <span class="string">development 网站开发；网页设计</span></span><br></pre></td></tr></table></figure><p><strong>patterns</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pa</span> : <span class="string">tter : n : s</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">模式（pattern的复数形式）</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">摹制；用图案装饰；复写（pattern的第三人称单数形式）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">花样；模型；木模；形态</span></span><br><span class="line"><span class="attr">patterns</span> <span class="string">花样；模型；木模；形态</span></span><br><span class="line"><span class="attr">fashionable</span> <span class="string">patterns 花色入时；花样进时；时尚模式；花样入时</span></span><br><span class="line"><span class="attr">Corrective</span> <span class="string">Patterns 调整浪形态；调剂浪形态</span></span><br><span class="line"><span class="attr">development</span> <span class="string">patterns 发展模式</span></span><br></pre></td></tr></table></figure><p><strong>practices</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">p :</span> <span class="string">ra :</span> <span class="string">c :</span> <span class="string">ti :</span> <span class="string">ce :</span> s ( 英 <span class="regexp">/ˈpræktɪsɪs/</span>  )</span><br><span class="line">n. 实践（practice 的复数）；练习</span><br><span class="line">v. 练习（practice的第三人称单数形式）</span><br><span class="line">网络释义 客户专区；业务中心</span><br><span class="line">Practices 客户专区；业务中心</span><br><span class="line">Disciplinazy Practices 惩戒性措施；性措施</span><br><span class="line">Agricultural practices 农业方式；耕作方法；农业方法</span><br><span class="line">cultural practices 文化实践；栽培技术</span><br><span class="line">foreign corrupt practices act 反国外行贿法规</span><br></pre></td></tr></table></figure><p><strong>easier</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ea</span> : <span class="string">si : er ( 英 /'iːzɪə/  )</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">更简单；容易些（easy 的比较级形式）；较早的</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">知易行难；更简单；更容易的；更便捷</span></span><br><span class="line"><span class="attr">Easier</span> <span class="string">知易行难；更简单；更容易的；更便捷</span></span><br><span class="line"><span class="attr">EASIER</span> <span class="string">RIDER 更逍遥的骑士</span></span><br><span class="line"><span class="attr">Work</span> <span class="string">easier 工作比较轻松</span></span><br><span class="line"><span class="attr">easier</span> <span class="string">said than done 说来容易做起来难</span></span><br><span class="line"><span class="attr">make</span> <span class="string">life easier 日子会过得更潇洒；生活变得更加舒适</span></span><br></pre></td></tr></table></figure><p><strong>useful</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">u</span> : <span class="string">se : ful ( 英 /ˈjuːsfl/  )</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">有用的；有益的；有帮助的</span></span><br><span class="line"><span class="meta">比较级</span> <span class="string">more useful；</span></span><br><span class="line"><span class="meta">最高级</span> <span class="string">most useful</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">有用的；有益；软碟通软件；有效的</span></span><br><span class="line"><span class="attr">useful</span> <span class="string">有用的；有益；软碟通软件；有效的</span></span><br><span class="line"><span class="attr">Useful</span> <span class="string">numbers 常用电话号码；常用电话；常用德律风号码；经常使用电话号头</span></span><br><span class="line"><span class="attr">useful</span> <span class="string">resistance 有益阻力</span></span><br><span class="line"><span class="attr">be</span> <span class="string">useful to 对...有用；具有...用途</span></span><br><span class="line"><span class="attr">useful</span> <span class="string">life 使用寿命；有效期</span></span><br><span class="line"><span class="attr">useful</span> <span class="string">data 有用数据和资料</span></span><br></pre></td></tr></table></figure><p><strong>began</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">be </span>: gan ( 英 /<span class="keyword">bɪˈɡæn/ </span>)</span><br><span class="line"><span class="symbol">v.</span> 开始；创建；着手于（<span class="keyword">begin的过去式）</span></span><br><span class="line"><span class="keyword">网络释义 </span>开始；贝加；开始了；才开始；</span><br><span class="line"><span class="keyword">began </span>开始；贝加；开始了；才开始</span><br><span class="line"><span class="keyword">Began </span>menopause 开始更年期</span><br><span class="line"><span class="symbol">Passion</span> <span class="keyword">began </span>翻译公司开始</span><br><span class="line"><span class="keyword">begin </span>with 以...开始；开始于...</span><br><span class="line"><span class="keyword">begin </span>at 几点开始；从..开始</span><br><span class="line"><span class="keyword">begin </span>again 重新开始；重做</span><br></pre></td></tr></table></figure><p><strong>place</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">p</span> : <span class="string">la : ce ( 英 /pleɪs/  )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">地方；住所；座位</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">放置；任命；寄予</span></span><br><span class="line"><span class="meta">vi.</span> <span class="string">名列前茅；取得名次</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">placed</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">placed</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">placing</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">places</span></span><br><span class="line"><span class="meta">第三人称单数</span> <span class="string">places</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">渠道；地方；放置；地点</span></span><br><span class="line"><span class="attr">Place</span> <span class="string">渠道；地方；放置；地点</span></span><br><span class="line"><span class="attr">Lanham</span> <span class="string">Place 朗豪坊；朗豪酒店；朗豪坊商场；朗豪酒店</span></span><br><span class="line"><span class="attr">Martin</span> <span class="string">Place 马丁广场；牛；火车站</span></span><br><span class="line"><span class="attr">in</span> <span class="string">place 适当；适当的；在适当的地方；在适当的位置</span></span><br><span class="line"><span class="attr">place</span> <span class="string">in 安排；放置</span></span><br><span class="line"><span class="attr">take</span> <span class="string">place 发生；举行</span></span><br></pre></td></tr></table></figure><p><strong>publish</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pub</span> : <span class="string">li : sh ( 英 /ˈpʌblɪʃ/  )</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">出版；发表；公布</span></span><br><span class="line"><span class="meta">vi.</span> <span class="string">出版；发行；刊印</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">published</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">published</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">publishing</span></span><br><span class="line"><span class="meta">第三人称单数</span> <span class="string">publishes</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">出版；公布；发布</span></span><br><span class="line"><span class="attr">publish</span> <span class="string">出版；公布；发布</span></span><br><span class="line"><span class="attr">publish</span> <span class="string">connections 发布连接</span></span><br><span class="line"><span class="attr">Publish</span> <span class="string">Entry 发布项；宣布项</span></span><br></pre></td></tr></table></figure><p><strong>articles</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ar</span> : <span class="string">ti : cle : s</span></span><br><span class="line"><span class="attr">n.[语]文章；物品；[法]条款（article的复数）；[语]冠词</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">使受协议条款的约束；指控（article的三单形式）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">冠词；文章；各条；本刊</span></span><br><span class="line"><span class="attr">Articles</span> <span class="string">冠词；文章；各条；本刊</span></span><br><span class="line"><span class="attr">Instant</span> <span class="string">Articles 即时文章；新闻快读；即时文汇；文章快手</span></span><br><span class="line"><span class="attr">Plastic</span> <span class="string">Articles 塑料制品；塑料件；整形篇；主要进口商品英文</span></span><br><span class="line"><span class="attr">articles</span> <span class="string">of association 公司章程；组织章程</span></span><br><span class="line"><span class="attr">articles</span> <span class="string">for daily use 生活用品</span></span><br><span class="line"><span class="attr">original</span> <span class="string">articles 原作；研究文章</span></span><br></pre></td></tr></table></figure><p><strong>colleagues</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">co</span> : <span class="string">lle : gu : es</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">同事；同行（colleague的复数）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">同仁；同人；同事；同事之间</span></span><br><span class="line"><span class="attr">Colleagues</span> <span class="string">同仁；同人；同事；同事之间</span></span><br><span class="line"><span class="attr">Visiting</span> <span class="string">Colleagues 拜访同事；造访同事</span></span><br><span class="line"><span class="attr">Complimenting</span> <span class="string">Colleagues 赞美同事；赞誉同事</span></span><br></pre></td></tr></table></figure><p><strong>joined</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jo</span> : <span class="string">in : ed ( 英 /dʒɔind/  )</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">加入；参加（join的过去式；过去分词）；[计]连接</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">加入；客户留言；连接；招生简章</span></span><br><span class="line"><span class="attr">joined</span> <span class="string">加入；客户留言；连接；招生简章</span></span><br><span class="line"><span class="attr">JOINED</span> <span class="string">Strategy 连接策略</span></span><br><span class="line"><span class="attr">joined</span> <span class="string">field 将两个表中连接字段</span></span><br><span class="line"><span class="attr">join</span> <span class="string">hands 携手；联手；齐心协力</span></span><br><span class="line"><span class="attr">join</span> <span class="string">in 加入；参加</span></span><br><span class="line"><span class="attr">join</span> <span class="string">hands with 握手；同...联合</span></span><br></pre></td></tr></table></figure><p><strong>ThoughtWorks</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>role</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ro : le ( 英 /rəʊl/  )</span><br><span class="line">n. 角色；任务</span><br><span class="line">网络释义 角色；作用；社会角色；任务</span><br><span class="line"><span class="keyword">Role</span> <span class="title">角色；作用；社会角色；任务</span></span><br><span class="line"><span class="title">role</span> playing 角色扮演；角色扮演法；职能演习；角色表演</span><br><span class="line"><span class="keyword">role</span> <span class="title">model</span> 行为榜样；角色模型；榜样；模范</span><br><span class="line"><span class="keyword">role</span> <span class="title">of</span> ....的角色</span><br><span class="line">play an important <span class="keyword">role</span> <span class="title">起到重要作用</span></span><br><span class="line"><span class="title">leading</span> <span class="keyword">role</span> <span class="title">主导作用；主导地位</span></span><br></pre></td></tr></table></figure><p><strong>learn</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lear</span> : <span class="string">n ( 英 /lɜːn/  )</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">学习；得知；认识到</span></span><br><span class="line"><span class="meta">vi.</span> <span class="string">学习；获悉</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">learned 或 learnt</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">learned 或 learnt</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">learning</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">学会；得知</span></span><br><span class="line"><span class="attr">Learn</span> <span class="string">学会；得知</span></span><br><span class="line"><span class="attr">learn</span> <span class="string">about 了解；得知；获悉；听到</span></span><br><span class="line"><span class="attr">learn</span> <span class="string">of 听到；获悉；获悉的事；听说</span></span><br><span class="line"><span class="attr">learn</span> <span class="string">from 向...学习</span></span><br><span class="line"><span class="attr">learn</span> <span class="string">English 学习英语</span></span><br><span class="line"><span class="attr">learn</span> <span class="string">about 了解；学习</span></span><br></pre></td></tr></table></figure><p><strong>deliver</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">de</span> : <span class="string">li : ver ( 英 /dɪˈlɪvə(r)/  )</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">交付；发表；递送；释放；给予（打击）；给...接生</span></span><br><span class="line"><span class="meta">vi.</span> <span class="string">实现；传送；履行；投递</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">投球</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">delivered</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">delivered</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">delivering</span></span><br><span class="line"><span class="meta">第三人称单数</span> <span class="string">delivers</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">投递；交付；发出；发表</span></span><br><span class="line"><span class="attr">deliver</span> <span class="string">投递；交付；发出；发表</span></span><br><span class="line"><span class="attr">deliver</span> <span class="string">value 价值传递；传递价值</span></span><br><span class="line"><span class="attr">Deliver</span> <span class="string">Hope 传递希望；递送希望</span></span><br><span class="line"><span class="attr">deliver</span> <span class="string">the goods 交货；履行诺言</span></span><br><span class="line"><span class="attr">deliver</span> <span class="string">a speech 发表演讲；发表讲话</span></span><br></pre></td></tr></table></figure><p><strong>clients</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">c : lien : ts</span><br><span class="line">n. 顾客；客户端；委托方（client的复数）；救济对象；应受账款</span><br><span class="line">网络释义 客户；客户端；案例；合作客户</span><br><span class="line">Clients 客户；客户端；案例；合作客户</span><br><span class="line">major clients 大客户；主要客户；客户</span><br><span class="line">Entertaining Clients 招待客户；款待客户；宴请客户；接待客户</span><br><span class="line">client<span class="built_in"> service </span>客户服务；向委托部门提供服务</span><br><span class="line">client base 客户群；基本顾客</span><br><span class="line">client side 客户端；使用端</span><br></pre></td></tr></table></figure><p><strong>pass</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pa</span> : <span class="string">ss ( 英 /pɑːs/  )</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">通过；经过；沿某方向前进；使达到（某位置）；传递；传球；遗留给；超过；变化；推移；度过；终止；几个；经表决通过（法律等）；允许；宣布；过；排泄；流通；放弃</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">及格；经过；通行证；道路，山口；传球；飞跃；阶段；鱼道；（桥牌）不叫；（击剑中的）戳刺；变戏法；（计算机）一次浏览</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">passed</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">passed</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">passing</span></span><br><span class="line"><span class="meta">第三人称单数</span> <span class="string">passes</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">传球；通过；经过；传递</span></span><br><span class="line"><span class="attr">Pass</span> <span class="string">传球；通过；经过；传递</span></span><br><span class="line"><span class="attr">scissor</span> <span class="string">pass 交叉传球；交织传球；穿插传球；传球</span></span><br><span class="line"><span class="attr">Khyber</span> <span class="string">Pass 开伯尔山口；开伯尔通道；咖喱王</span></span><br><span class="line"><span class="attr">pass</span> <span class="string">through 穿过....；通过...</span></span><br><span class="line"><span class="attr">come</span> <span class="string">to pass 实现；发生</span></span><br><span class="line"><span class="attr">pass</span> <span class="string">on 传递；继续；去世</span></span><br></pre></td></tr></table></figure><p><strong>wider</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wi</span> : <span class="string">d : er ( 英 /waɪdə(r)/  )</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">宽的；广阔的（wide的比较级形式）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">快尔达；世界发展经济研究所；宽的</span></span><br><span class="line"><span class="attr">WIDER</span> <span class="string">快尔达；世界发展经济研究所；宽的</span></span><br><span class="line"><span class="attr">wider</span> <span class="string">margin 较大差幅；俏利</span></span><br><span class="line"><span class="attr">wider</span> <span class="string">spreading 更大的穿电</span></span><br></pre></td></tr></table></figure><p><strong>industry</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">in</span> : <span class="string">du : s : try ( 英 /ˈɪndəstri/  )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">产业；工业；勤勉</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">industries</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">产业；工业；职业；行业</span></span><br><span class="line"><span class="attr">industry</span> <span class="string">产业；工业；职业；行业</span></span><br><span class="line"><span class="attr">water</span> <span class="string">industry 水利产业；水产业；水工业</span></span><br><span class="line"><span class="attr">automobile</span> <span class="string">industry 汽车工业；汽车产业；汽车业；汽车制造业</span></span><br><span class="line"><span class="attr">industry</span> <span class="string">and commerce 工商业</span></span><br><span class="line"><span class="attr">chemical</span> <span class="string">industry 化学工业</span></span><br><span class="line"><span class="attr">manufacturing</span> <span class="string">industry 制造业；制造工业</span></span><br></pre></td></tr></table></figure><p><strong>site</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">si</span> : <span class="string">te ( 英 /saɪt/ )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">地点；位置；场所</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">设置；为...选址</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">sited</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">sited</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">siting</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">sites</span></span><br><span class="line"><span class="meta">第三人称单数</span> <span class="string">sites</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">站点；场地；现场；场所</span></span><br><span class="line"><span class="attr">Site</span> <span class="string">站点；场地；现场；场所</span></span><br><span class="line"><span class="attr">Site</span> <span class="string">planning 敷地计划；总平面设计；场地规划</span></span><br><span class="line"><span class="attr">Site</span> <span class="string">Selection 选址；基地选择；场地选择</span></span><br><span class="line"><span class="attr">web</span> <span class="string">site 网页；网址</span></span><br><span class="line"><span class="attr">on</span> <span class="string">site 现场；原地；原位</span></span><br><span class="line"><span class="attr">construction</span> <span class="string">site 建筑工地；施工场地</span></span><br></pre></td></tr></table></figure><p><strong>developed</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">de : ve : lo : p : ed ( 英 /dɪˈveləpt/ )</span><br><span class="line">adj. 发达的（国家或地区）；成熟的</span><br><span class="line">网络释义 发达；自主开发；研制出；成熟的</span><br><span class="line">Developed 发达；自主开发；研制出；成熟的</span><br><span class="line">developed countries 发达国家；已开发国家；已发展国家；发达国家或工业化国家</span><br><span class="line">developed dimension 展开尺寸</span><br><span class="line">developed country n.发达国家</span><br><span class="line">developed<span class="built_in"> area </span>[计]展开面积</span><br><span class="line">less developed 欠发达地区；不发达的</span><br></pre></td></tr></table></figure><p><strong>respected</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">re :</span> <span class="string">s :</span> <span class="string">pe :</span> <span class="string">c :</span> <span class="string">te :</span> d ( 英 <span class="regexp">/ri'spektid/</span>  )</span><br><span class="line">adj. 受尊敬的</span><br><span class="line">v. 尊敬；重视（respect的过去式和过去分词）</span><br><span class="line">网络释义 推崇；受尊敬的；德高望重；受人尊敬</span><br><span class="line">Respected 推崇；受尊敬的；德高望重；受人尊敬</span><br><span class="line">Are respected 很受尊敬</span><br><span class="line">Respected person 德高望重的人</span><br><span class="line">respected ideas 公认理论；权威理论</span><br><span class="line">be respected <span class="keyword">as</span> 被尊为...</span><br></pre></td></tr></table></figure><p><strong>platform</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p : la : t : <span class="keyword">for</span> : m ( 英 /ˈplætfɔːm/  )</span><br><span class="line">n. 平台；月台；站台；坛；讲台；厚底松糕鞋</span><br><span class="line">网络释义 平台；站台；台；平台</span><br><span class="line">platform 平台；站台；台；平台</span><br><span class="line">side platform 侧式站台；侧式月台；侧向式站台；侧向收割台</span><br><span class="line">fixed platform 固定平台；固定式平台；固定式钻井平台</span><br><span class="line">service platform 工作台；操作平台</span><br><span class="line">offshore platform 海上平台；近海平台</span><br><span class="line">open platform 开放平台</span><br></pre></td></tr></table></figure><p><strong>edited</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">e</span> : <span class="keyword">di</span> :<span class="keyword">te</span> : <span class="keyword">d</span> ( 英 /'<span class="keyword">ed</span>ɪtɪ<span class="keyword">d</span>/  )</span><br><span class="line">adj. 编辑过的</span><br><span class="line">v. 编辑；校订；剪接；主编（<span class="keyword">edit</span>的过去式和过去分词）</span><br><span class="line">网络释义 编辑过的；编辑；分钟；已编辑</span><br><span class="line">Edited 编辑过的；编辑；分钟；已编辑</span><br><span class="line">Edited Books 编辑书籍</span><br><span class="line">SpinnBox Edited 旋转方块</span><br><span class="line"><span class="keyword">edit</span> box [计]编辑框</span><br><span class="line"><span class="keyword">edit</span> mode [计]编辑方式</span><br><span class="line"><span class="keyword">edit</span> <span class="keyword">window</span> 编辑窗口</span><br></pre></td></tr></table></figure><p><strong>published</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adj. 已发布的</span><br><span class="line">v. 出版；发行（publish的过去式）</span><br><span class="line">网络释义 刊登；刊出；刊发；刊载</span><br><span class="line">Published 刊登；刊出；刊发；刊载</span><br><span class="line">published<span class="built_in"> interface </span>已发布接口；发布接口</span><br><span class="line">published angle 预定</span><br><span class="line">published price 图书零售价；定价；公布价格</span><br></pre></td></tr></table></figure><p><strong>ThoughtWorkers</strong></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">**others**</span><br></pre></td></tr></table></figure><p>  o : ther : s ( 英 /ˈʌðə(r)z/   )<br>  pron. 其他人<br>  网络释义 其它；其他；全部信息；其他组件保养<br>  Others 其他；其它；全部信息；其他组件保养<br>  the others 小岛惊魂；神鬼第六感；其它<br>  Introduce Others 先容别人<br>  each other 彼此；互相<br>  on the other 另一方面<br>  on the other hand 另一方面</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*reach*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  rea : ch (  英 /riːtʃ/ )<br>  vi. 达到；延伸；伸出手；传开<br>  vt. 达到；影响；抵达；伸出<br>  n. 范围；延伸；河段；横风行驶<br>  第三人称单数 reaches<br>  过去式 reached<br>  过去分词 reached<br>  现在分词 reaching<br>  网络释义 到达；达到；到达率；化学品注册<br>  Reach 到达；达到；到达率；化学品注册<br>  Reach Me 书缘寻踪；抓住我；请与我联系；联系我<br>  reach out 伸出；提供援助；接纳我<br>  reach out vt. 伸出<br>  reach for 伸手去拿<br>  reach an agreement 达成协议；取得一致意见；达成共识</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*audience*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  au : di : en : ce ( 英 /ˈɔːdiəns/  )<br>  n. 观众；听众；读者；接见；正式会见；拜会<br>  网络释义 观众；听众；受众；阅听人<br>  Audience 观众；听众；受众；阅听人<br>  target audience 目标观众；目标消费者；目标大众；目标受众<br>  Audience area 听众区；看台区；观众区<br>  target audience 目标受众；目标观众；目标客户<br>  audience rating n. 收视率；试听率<br>  mass audience 大众受众</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*material*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  ma : te : ri : al ( 英 /məˈtɪəriəl/  )<br>  n. 材料；用具；（有指明特征的）人才；素材；曲目；布料<br>  adj. 物质的；身体需要的；和推理内容相关的；重要的；（证据或事实）决定性的；客观存在的；物欲的<br>  n. (Material)(意、美)妈特力娅丽（人名）<br>  复数 materials<br>  网络释义 材质；材料；物料；资料<br>  Material 材质；材料；物料；资料<br>  Material Girl 物质女孩；拜金女孩；物质女郎；拜金女郎<br>  insulating material 隔热材料；绝热材料；绝缘物<br>  raw material 原料<br>  teaching material 教学内容；教学资料<br>  new material 新材料</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*MicroServices*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  Mi: cro : Ser : vi : ce : s<br>  微服务；<br>  微服务架构<br>  网络释义 微服务；微服务架构<br>  Microservices 微服务；微服务架构<br>  cognitive microservices 认知微服务；认证微服务<br>  Microservices Architecture 微服务架构</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*Guide*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  gui : de  ( 英 /ɡaɪd/ )<br>  n. 指南；向导；入门书；<br>  vt. 引导；带领；操纵；<br>  vi. 担任向导；<br>  n.(Guide)人名；（法、葡）吉德<br>  过去式 guided；<br>  过去分词 guided；<br>  现在分词 guiding；<br>  复数 guides；<br>  第三人称单数 guides；<br>  网络释义 导游、指导、指南、领队<br>  Guide 导游；指导；指南；领队；<br>  guide post 路标；引导柱；导柱；导杆<br>  User Guide 说明书；用户指南；用户操作手册</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*In short*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  总之；<br>  简言之；<br>  网络释义 简言之；总之；简而言之；简单地说<br>  in short 简言之；总之；简而言之；简单地说<br>  in the short term 从短期来看<br>  in a short time 不久；在短时间内</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*architectural*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  ar : chi : te : c : tur : al（chi读ki的音，英 /ˌɑːkɪˈtektʃərəl/  ）<br>  adj. 建筑学的；建筑上的；符合建筑法的<br>  网络释义 建筑；建筑设计；建筑材质；建筑学的<br>  architectural 建筑；建筑设计；建筑材质；建筑学的<br>  architectural style 建筑风格；建筑形式；架构风格<br>  Architectural acoustics 建筑声学；建筑音响；构筑声学；建筑音响学</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*style*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  s : ty : le  （ 英 /staɪl/ ）<br>  n. 风格；时尚；类型；字体<br>  vt. 设计；称呼；使合潮流<br>  vi. 设计式样；用刻刀作装饰画<br>  n. (Style)人名；（英）斯泰尔<br>  过去式 styled；<br>  过去分词 styled；<br>  现在分词 styling；<br>  复数 styles；<br>  第三人称单数 styles；<br>  网络释义 风格；样式；款式；作风<br>  style 风格；样式；款式；作风<br>  Style 作风<br>  Text Style 字体样式；字布局；文字样式；文字布局</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="number">*a</span>pproach <span class="keyword">to</span>**</span><br></pre></td></tr></table></figure><p>  a : pp : roa : ch  （ 英 /əˈprəʊtʃ/  ）<br>  接近；约等于；通往…的方法<br>  网络释义 约等于；接近；类似；办法；<br>  approach to 约等于；接近；类似；办法<br>  approach h to criticality 接近临界<br>  approach h to 做某事的方法；约等于；接近；对…的态度</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*developing*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  de : ve : lo : ping  （ 英 /dɪˈveləpɪŋ/  ）<br>  adj. 发展中的；生长的；变化的<br>  n. 发展<br>  v. 发展；成长；产生；感受；使（摄影胶片）显影（develop的现在分词）<br>  网络释义 发展；发展中的；显影；开发<br>  Developing 发展；发展中的；显影；开发<br>  developing trend 发展趋势；发展走向；趋势<br>  developing machine 洗片机；显影机；头影机（这个头？我抄的有道词典上的）；显色机</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*single*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  sin : gle （ 英 /ˈsɪŋɡl/ ）<br>  adj. 单一的；单身的；单程的<br>  n. 一个；单打；单程票<br>  vt. 选出<br>  vi. 击出一垒安打<br>  过去式 singled<br>  过去分词 singled<br>  现在分词 singling<br>  复数 singles<br>  第三人称单数 singles<br>  网络释义 未婚；一垒安打；单曲；单一的；<br>  single 未婚；一垒安打；单曲；单一的<br>  single market 统一市场；北京市场；单一市场；同一市场<br>  single parent 单亲家庭；单亲；单父协同；单亲母亲</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="built_in">application</span>**</span><br></pre></td></tr></table></figure><p>  a : pp : li : ca : tion （ 英 /ˌæplɪˈkeɪʃn/  ）<br>  n. 应用；申请；应用程序；敷用；（对事物、学习等）投入<br>  网络释义 用途；应用软件；应用<br>  APPLICATION 用途；应用软件；应用<br>  application fee 申请费；报名费；申请费用；登记费<br>  patent application 专利申请；专利申请书；专利声请；专利申请说明书</p><p>  patent<br>  pa : ten : t  （英 /‘pæt(ə)nt; ‘peɪt(ə)nt/）<br>  n. 专利权；专利证；专利品；<br>  adj. 专利的；特许生产或销售的；显著的；公开的；（脉管等）开放的<br>  v. 取得…的专利权；授予专利<br>  复数 patents<br>  过去式 patented<br>  过去分词 patented<br>  现在分词 patenting<br>  第三人称单数 patents<br>  网络释义 专利权；专利；专利品；科技玩具<br>  patent 专利权；专利；专利品；科技玩具<br>  patent family 专利族；同族专利<br>  patent attorney 专利律师；专利代理人；称为专利法务人员</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">**a suite of**</span></span><br></pre></td></tr></table></figure><p>  s : ui : te（ui读wi的音， 英 /swiːt/ ）<br>  一系列<br>  网络释义 一套；一整组；详细翻译（详细翻译&gt;&gt;a suite of 一系列；一套…）<br>  a suite of 一套；一整组；详细翻译<br>  a suite of racks 一套机架<br>  a suite of paintings 一组从不同角度和层次反映同一中心思想和题材的绘画</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*small*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  s : ma : ll  （ 英 /smɔːl/  ）<br>  adj. 少的，小的；微弱的；几乎没有的；不重要的；幼小的<br>  adv. 小小地；卑鄙地<br>  n. 小件物品；矮小的人<br>  n. （Small）人名；（英）斯莫尔<br>  网络释义 小的；小型的；小码；卡片纸英国标准<br>  small 小的；小型的；小码；卡片纸英国标准<br>  small intestine 小肠<br>  small incision 小切口；隧道切口；微创；微小切口</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*services*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  s : er : vi : ce : s  （ 英 /‘sə:visis/ ）<br>  n. 服务；服务项目（service复数形式）<br>  v. 服务（service的第三人称单数）<br>  网络释义 服务；服务项目；服务范围；服务业<br>  Services 服务；服务项目；服务范围；服务业<br>  Services 服务<br>  Web Services 网络服务；Web服务；应用</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="keyword">each</span>**</span><br></pre></td></tr></table></figure><p>  ea : ch  （ 英 /iːtʃ/  ）<br>  det. （两个或两个以上的人或物中）各自<br>  pron. （两个或两个以上的人或物中）每个<br>  adv. 每个地<br>  adj. 各自的<br>  网络释义 每个；各自；每次；每一<br>  Each 每个；各自；每次；每一<br>  each other 互相；彼此；相互；取长补短<br>  Each line 每行</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="built_in">running</span>**</span><br></pre></td></tr></table></figure><p>  run : ning  （ 英 /ˈrʌnɪŋ/  ）<br>  n. 运转；赛跑；流出<br>  adj. 连续的；流动的；跑者的，运转着的<br>  v. 跑；运转（run的ing形式）；行驶<br>  n. (Running)人名；（英）朗宁<br>  网络释义 跑步；跑；磨合；运行<br>  running 跑步；跑；磨合；运行<br>  Running Man 过关斩将；奔跑吧兄弟；落跑老爸；奔跑的男人<br>  running shoes 跑步鞋；慢跑鞋；竞走鞋</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*own*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  o : wn （ 英 /əʊn/  ）<br>  vt. 拥有；承认<br>  vi. 承认<br>  adj. 自己的；特有的<br>  n. 自己的<br>  n.（Own）人名；（阿拉伯）奥恩（我就服这些人名，不会读是吧，读这个中文式译音人名就会读了）</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="built_in">process</span>**</span><br></pre></td></tr></table></figure><p>  p : ro : ce : ss  (  英 /prəˈses; (for n.) ˈprəʊses/ )<br>  n. （为达到某一目标的）过程；（自然变化的）工程；工艺流程；诉讼程序；传票；突起；进展；（发型）直发式<br>  v. 加工；审核；处理（数据）；队列行进；冲印（照片）；把（头发）弄成直发<br>  adj. 经过特殊加工的；照相板的；染印法的<br>  第三人称单数 processes<br>  过去式 processed<br>  过去分词 processed<br>  现在分词 processing<br>  复数 processes<br>  网络释义 进程；流程；过程<br>  process 进程；流程；过程<br>  Process Management 进程管理；过程管理；流程管理；进程管理<br>  Background Process 后台进程；背景程序；背景处理程序</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*communicating*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  com : mu : ni : ca : ting ( 英 /kə’mjʊnə,keɪtɪŋ/ )<br>  adj. （房间）相同的，相连的<br>  v. 交流；传递；传播（communicate的现在分词）<br>  网络释义 沟通；交流；通信的互通的；交流与通讯<br>  Communicating 沟通；交流；通信的互通的；交流与通讯<br>  communicating vessels 连通器；连通管<br>  Communicating junctions 通讯连接</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*lightweight*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  li : ght : wei : ght ( 英 /ˈlaɪtweɪt/ )<br>  n. 轻量级（拳击手）；比通常重量轻的人或东西；无足轻重的人（或事）<br>  adj. 轻量的；给人印象不深的；无足轻重的；比通常重量轻的；浅薄的；<br>  网络释义 轻量级；轻身的；轻量；轻量化；<br>  lightweight 轻量级；轻身的；轻量；轻量化<br>  lightweight 轻填料；轻质搀和料<br>  lightweight cover 轻型上盖；避雷保护</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*mechanisms*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  me : cha : ni : sm : s（cha 读 ke 的音，英 /‘mekənɪzəmz/ ）<br>  n. 机制；[计]机构（mechanism的复数）；机械；[机]机构学<br>  网络释义 发病机制；发生机制；机制；机构<br>  Mechanisms 发病机制；发生机制；机制；机构<br>  interaction mechanisms 互动机制；作用机制<br>  resistant mechanisms 耐药机制；抗病机制</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*often*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  o : f : ten ( 英 /ˈɒfn; ˈɒftən/  )<br>  adv. 常常；时常；往往，大多<br>  比较级 more often 或 oftener；<br>  最高级 most often 或 oftenest<br>  网络释义 经常；常常；时常；常有<br>  Often 进场；常常；时常；常有<br>  more often 更经常；经常；更多的时候；更多<br>  OFT OFTen 常常；再三</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*HTTP*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  H : T : T : P ( 英 /ˌeɪtʃ tiː tiː ˈpiː/  )<br>  abbr. 超文本传输协议（Hyper Text Transfer Protocol）<br>  网络释义 超文本传输协议（Hyper Text Transfer Protocol）；网站；平台；超文本传送协议</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*resource*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  re : sou : r : ce ( 英 /rɪˈsɔːs; rɪˈzɔːs/  )<br>  n. 资源，财力；办法；智谋<br>  vi. 向…提供资金<br>  网络释义 资源；资源类型；财力；办法<br>  Resource 资源；资源类型；财力；办法<br>  human resource 人力资源；激励；人事部<br>  computational resource 计算资源</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*API*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  A : P : I ( /ˌeɪ piː ˈaɪ/  )<br>  abbr. 空气污染指数（Air Pollution Index）；应用程序界面（Application Program Interface）；精确位置指示器（Accurate Position Indicator）；美国石油学会（American Petroleum Institute）；自动发音教学机（Automated Pronunciation Instructor）<br>  网络释义 美国石油协会；应用程序接口；美国石油学会；应用编程接口<br>  API 美国石油协会；应用程序接口；美国石油学会；应用编程接口<br>  Windows API 使用；调用；关于进程操作的；关于线程操作的<br>  Google API 谷歌应用界面；应用程序编程接口；网址二维码生成函数；应用程序接口</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*these*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  th : e : se ( 英 /ðiːz/  )<br>  det. 这些（this的复数）<br>  pron. 这些（this的复数）<br>  adj. 这些的（this的复数）<br>  网络释义 这些，此等；复数；这些个<br>  These 这些；此等；复数；这些个<br>  Know these 知其然；到知其然<br>  These payments 营养费</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*built*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  bu : il : t ( 英 /bɪlt/ )<br>  v. 建造，建立；逐步增强；把…嵌入（墙壁、物体等）（build的过去式和过去分词）<br>  adj. 有…体格的；身段优美的；….建成的<br>  网络释义 建起；比优丽；建有；建好<br>  Built 建起；比优丽；建有；建好<br>  Built NY 比优丽<br>  BLT Built 建造；制作<br>  built in 安装在里面的；装入的；机内的<br>  built up 组合<br>  built on 以…作基础</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="keyword">around</span>**</span><br></pre></td></tr></table></figure><p>  a : roun : d ( 英 /əˈraʊnd/  )<br>  adv. 在四周；朝对立面；到处；漫无目的的；在附近；大约；围绕；以圆周计算；现有；转弯<br>  prep. 围绕；在那边；绕着；同…一致；到处；以（已提及物）为中心；迂回<br>  网络释义 围绕；四处；在周围；大约<br>  Around 围绕；四处；在周围；大约；<br>  come around 苏醒；顺便来访；来访；复原<br>  stick around 在附近逗留或等待；在附近等着；在邻近勾留或等候；逗留<br>  all round 周围；到处，四处<br>  around here 附近；在这周围<br>  go around 四处走动；供应；（消息）流传</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*business*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  bu : si : ne : ss ( 英 /ˈbɪznəs/ )<br>  n. 商业，交易；生意；事务，业务；职业，行业；<br>  网络释义 商业；生意；企业；业务<br>  Business 商业；生意；企业；业务<br>  Business 业务<br>  business cycle 商业周期；经济周期；商业周期；景气循环<br>  business card 名片；商务名片<br>  in business 经商；在经营；在商界<br>  business philosophy 经营理念，经营哲学</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*capabilities*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  ca : pa : bi : li : ti : es ( 英 /ˌkeɪpəˈbɪlətɪs/  )<br>  n. 能力（capability的复数）；功能；性能<br>  网络释义 能力；功能；权限；责任<br>  capabilities 能力；功能；权限；责任<br>  economic capabilities 经济实力；经济能力<br>  defense capabilities 防卫作战能力；防务能力；防卫功能；<br>  process capability 加工能力；工序能力<br>  design capability 设计能力</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*independently*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  in : de : pen : den : t : ly ( 英 /ˌɪndɪˈpendəntli/  )<br>  adv. 独立地；自立地<br>  网络释义 各自地；独立地；独自地；自立地<br>  independently 各自地；独立地；独自地；自立地<br>  think independently 独立思考；独立的思考<br>  living independently 独立生活<br>  independently of 独立于…之外；与…无关</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*deployable*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  de : p : lo : y : a : ble<br>  adj. 可开展的<br>  网络释义 可开展的；散播性<br>  deployable 可开展性的；散播性<br>  Deployable Structures 折叠结构；可展结构<br>  deployable joint 运动关节</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*fully*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  fu : lly ( 英 /ˈfʊli/  )<br>  adv. 充分地；完全地；彻底地<br>  n. (Fully)人名；（法）菲利<br>  网络释义 完全地；彻底地；充分地；十分地<br>  fully 完全地；彻底地；充分地；十分地<br>  FULLY OPENING 全开口；全启齿；齐闭口<br>  fully  secured 足额担保；全额担保<br>  fully automatic 全自动的<br>  fully integrated 完全整合<br>  fully loaded 满载</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="built_in">auto</span>mated**</span><br></pre></td></tr></table></figure><p>  au : to : ma : te : d ( 英 /ˈɔːtəˌmeɪtɪd/  )<br>  adj. 自动化的；机械化的<br>  v. 自动化（automate的过去分词）；自动操作<br>  网络释义 自动化的；自动的；机械化的；自动化<br>  automated 自动化的；自动的；机械化的；自动化<br>  automated design 自动设计；自动化设计；自动想象<br>  Automated inspection 自动化检验；自动检验<br>  automated machine 自动化机械；自动化的机器<br>  automated teller machine 自动柜员机<br>  automated welding 自动焊接</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*deployment*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  de : p : lo : y : men : t ( 英 /dɪˈplɔɪmənt/ )<br>  n. 调度，部署<br>  复数 deployments<br>  网络释义 部署；展开；发布；布防<br>  Deployment 部署，展开；发布；布防<br>  Deployment Editors 部署编辑器；安排编纂器<br>  Resources deployment 资源配置<br>  disposition n.调度，部署</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*machinery*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  ma  chi : ne : ry ( 英 /məˈʃiːnəri/  )<br>  n. 机械；机器；机构；机械装置<br>  网络释义 机械；机器；机具<br>  machinery 机械；机器；机具<br>  packaging machinery 包装机械；包装设备；包装机器；放大器<br>  Electrical Machinery 电机学；电力机械；电机；电机驱动<br>  machinery and equipment 机器及设备<br>  construction machinery 建筑机械；施工机械<br>  agricultural machinery 农业机械</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*there*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  the : re ( 英 /ðeə(r)/  )<br>  adv. 在那里；在那边；在那点上；<br>  int. 你瞧<br>  n. 那个地方<br>  网络释义 那里；在那里；那儿；那<br>  There 那里；在那里；那儿；那<br>  Always There 永驻；守候一生；到约定的那时；总在我身旁<br>  There be 句型；的句子结构；存在句；结构<br>  out there 到战场；在那里<br>  over there adv. 在那里<br>  go there 去那里</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*bare*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  b : are ( 英 /beə(r)/ )<br>  adj. 空的；赤裸的；无遮蔽的<br>  vt. 露出；使赤裸<br>  n. (Bare)人名；（英）贝尔<br>  比较级 barer<br>  最高级 barest<br>  过去式 bared<br>  过去分词 bared<br>  现在分词 baring<br>  网络释义 赤裸的；光光；赤裸；仅仅的<br>  bare 赤裸的；光光；裸露；仅仅的<br>  bare mass 裸质量<br>  bare machine 裸机；硬件计算机；裸机<br>  bare of vt. 几乎没有，缺乏<br>  lay bare 揭发，暴露；公开<br>  bare feet 赤脚；光脚；光着脚</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*minimum*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  mi : ni : mum ( 英 /ˈmɪnɪməm/ )<br>  n. 最小值；最低限度；最小化；最小量<br>  adj.最小的；最低的<br>  复数 minimums 或 minima<br>  网络释义 最小的；最低；起码；最小量<br>  minimum 最小的；最低；起码；最小量<br>  minimum charge 最低费用；最低运费；最低收费<br>  minimum balance 最小库存余量；最低余额；存款限制；把费用减到最低限度</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="keyword">bare </span>minimum of**</span><br></pre></td></tr></table></figure><p>  最低限度的<br>  网络释义 Bare Minimum Of Expense 最低支出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*centralized*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  cen : tra : li : ze : d ( 英 /‘sentrəlaɪzd/  )<br>  adj. 集中的；中央集权的<br>  v. 集中（centralize的过去分词）<br>  网络释义 集中的，中央集权的；一致<br>  Centralized 集中的；中央集权的；一致<br>  centralized control 集中控制；中央控制；集中控制方式；中心控制<br>  Centralized Monitoring 集中监控；中化监查<br>  centralized management 集中式管理；集权管理<br>  centralized control 集中控制<br>  centralized processing 集中式处理</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*management*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  ma : na : ge : men : t ( 英 /ˈmænɪdʒmənt/  )<br>  n. 管理；管理人员；管理部门；操纵；经营手段<br>  复数 managements<br>  网络释义 管理；经营；管理学；管理层；<br>  Management 管理；经营；管理学；管理层<br>  Management Accounting 管理会计；管理会计学；治理会计；会计管理<br>  performance management 绩效管理；业绩管理；性能管理<br>  management system 管理系统；经营责任制<br>  quality management 质量管理<br>  project management 项目管理；专案管理</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*written*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  wri : tten ( 英 /ˈrɪtn/  )<br>  adj. 书面的，成文的，文字的<br>  v. 写（writen的过去分词）<br>  网络释义 写成；写给；书面；成文<br>  Written 写成；写给；书面；成文<br>  written English 书面英语；书面语；书面表达；英语书面语<br>  written notice 书面通知；面通知；书面通知<br>  written by 由…所写<br>  written english 书面英语<br>  written consent 书面同意；同意书</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*different*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  di : ffe : ren : t ( 英 /ˈdɪfrənt/  )<br>  adj. 不同的；个别的；与众不同的<br>  网络释义 不同；差异；两样<br>  Different 不同；差异；两样<br>  different from 不同于；两回事；不同；区别于<br>  Different Seasons 四季奇谭；不同的季节；肖申克的救赎；不同季节<br>  different from 与…不同，不同于<br>  different kinds 不同的种类<br>  in different ways 以不同方式；用不同方法；通过不同的方式</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*programming*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  pro : g : ram : ming ( 英 /ˈprəʊɡræmɪŋ/  )<br>  n. 设计；规划；编制程序；[计]程序编制<br>  网络释义 编程；程序设计；编程；程序编制<br>  programming 编程；程序设计；编程；程序编制<br>  Linear Programming 线性规划；第二十九章；线性程序编制；线性规划法<br>  generic programming 泛型；泛型编程；程序设计；类属编程<br>  linear programming n. 线性规划<br>  programming language 编程语言；程序设计语言<br>  dynamic programming 动态规划；动态程序设计</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*languages*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  lan : g : ua : ge : s ( 美 /‘læŋgwɪdʒ/ )<br>  n. 语系，语种；语言文字（language复数）<br>  网络释义 语文；语言；语言能力；语言学<br>  Languages 语文；语言；语言能力；语言学<br>  altaic languages 阿尔泰语系；阿尔泰语言<br>  Uralic languages 乌拉尔语系<br>  modern languages 现代语言（modern language的复数）<br>  foreign languages school 外语学校<br>  romance languages 罗曼斯语（由拉丁语演变而成的语言）</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="keyword">use</span>**</span><br></pre></td></tr></table></figure><p>  u : se ( 英 /juːz/  )<br>  n. 使用；用途；发挥<br>  vt. 利用；耗费<br>  vi. 使用，运用<br>  n.(Use)人名；（德）乌泽<br>  过去式 used<br>  过去分词 used<br>  现在分词 using<br>  复数 uses<br>  第三人称单数 using<br>  网络释义 使用；用途；利用；应用<br>  use 使用；用途；利用；应用<br>  use up 用完；用光；耗尽<br>  Use Case 用例；用例图<br>  make use of 使用；利用<br>  in use 在使用中<br>  of use 有用</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="class"><span class="keyword">data</span>**</span></span><br></pre></td></tr></table></figure><p>  da : ta ( 英 /ˈdeɪtə; ˈdɑːtə/  )<br>  n. 数据（datum的复数）；资料<br>  n. (Data)人名；(日)驮太 (姓)；(印、葡)达塔<br>  网络释义 数据；资料；数据区；参考数据<br>  data 数据；资料；数据区；参考数据<br>  Data Center 数据中心；资料中心；数据交互中心<br>  data collection 数据收集；数据采集；数据搜集；搜集资料<br>  data processing 数据处理<br>  experimental data 实验数据；试验数据<br>  data mining 数据挖掘技术（即指从资料中发掘咨询或知识）</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*storage*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  s : to : ra : ge ( 英 /ˈstɔːrɪdʒ/  )<br>  n. 存储；仓库；贮藏所<br>  复数 storages<br>  网络释义 存储；储存；保管；贮藏；<br>  Storage 存储；储存；保管；贮藏<br>  storage room 行李仓；储物室；储藏室；贮藏室<br>  cold storage 冷藏；冷藏库；冷库；冷藏公司<br>  data storage 数据存储<br>  storage system 存储系统；存储器存储系统<br>  energy storage 蓄能；能量储存；储能器</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*technologies*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  te : ch : no : lo : gi : es (  美 /tɛk’nɑlədʒi/  )<br>  n. 技术；科技（technology的复数）<br>  网络释义 姓；科技<br>  Technologies 姓；科技<br>  Agilent Technologies 安捷伦科技公司；安捷伦科技有限公司；安捷伦<br>  United Technologies 联合技术；联合技术公司；联合科技；联合科技公司<br>  united technologies 联合科技（财富500强公司之一，总部所在地美国，主要经营航空航天）<br>  cleaner technologies 净化技术；清洁技术<br>  lucent technologies 美国朗讯科技公司（财富500强公司之一）<br>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Microservices-Guide-微服务指南词汇导读&quot;&gt;&lt;a href=&quot;#Microservices-Guide-微服务指南词汇导读&quot; class=&quot;headerlink&quot; title=&quot;Microservices Guide 微服务指南词汇导读&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="MICROSERVICES" scheme="https://fengshana.github.io/categories/MICROSERVICES/"/>
    
    
      <category term="MICROSERVICES" scheme="https://fengshana.github.io/tags/MICROSERVICES/"/>
    
      <category term="词汇" scheme="https://fengshana.github.io/tags/%E8%AF%8D%E6%B1%87/"/>
    
  </entry>
  
  <entry>
    <title>MySql索引底层数据结构</title>
    <link href="https://fengshana.github.io/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91MySql%E7%B4%A2%E5%BC%95/"/>
    <id>https://fengshana.github.io/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91MySql%E7%B4%A2%E5%BC%95/</id>
    <published>2020-05-27T10:35:55.031Z</published>
    <updated>2020-05-29T11:35:50.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>观看笔记：<br><a href="https://www.bilibili.com/video/BV13x411Z7AQ?from=search&amp;seid=12763347691863057372" target="_blank" rel="noopener">https://www.bilibili.com/video/BV13x411Z7AQ?from=search&amp;seid=12763347691863057372</a></p><h3 id="索引的本质"><a href="#索引的本质" class="headerlink" title="索引的本质"></a>索引的本质</h3><p>索引的本质</p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANXwvSlPCJJI2vYZaT3H0rZCG38flqH5eE7TMAOK*DSM1BhWXXI4cugphYQTkM94HMJ9GHGpkBn3QA6a5u74EOK8M!/r" alt="索引"></p><ul><li><strong>索引</strong> 是 <strong>帮助MySQL</strong> <strong>高效获取数据</strong> 的 <strong>排好序</strong> 的 <strong>数据结构</strong></li><li><strong>索引存储在文件里</strong></li><li><strong>索引结构</strong><ul><li><strong>二叉树</strong></li><li><strong>红黑树</strong></li><li><strong>HASH</strong></li><li><strong>BTREE</strong></li></ul></li></ul><blockquote><p><strong>问题</strong>：有没有在生产环境SQL查询的非常慢，需要优化的。<br><strong>答</strong>：真的有过，就是上一家公司做的那个项目关系到全国，省，市，区，县这种的，每次一统计吧就是全国的那种统计，就是该省下有多少人注册了，该市下有多少人注册了…..这种，每次加载大半天都搞不赢，那个页面都出不来。<br>这个属于慢查询吗？<br>我也不是很清楚诶。反正就是数据量贼大，然后用的Oracle数据库，因为还有就是交易量很大。  </p></blockquote><blockquote><p><strong>问题</strong>： 遇到这种问题第一时间想到的优化是什么？<br><strong>答</strong>：额，我好像也没有做什么优化，通过主键来进行查询，就是交易量特别大的时候，然后去查询的时候，就是使用的交易表TRANS 当中的主键去进行查询大部分是。<br>然后就是因为是二次开发这个系统，所以在Oracle数据库当中是存在之前的开发者所写的索引的。<br>然后就是不去使用外键，就是外键关联的外键这种不去进行使用，而是有些表当中额怎么说呢，就是有些表当中记录的字段存在，而另外一张表当中因为不去进行关联查询trans表这种数据量大的表就自己这张表也会记录一些数据这种。<br>尽量通过主键去查询，因为通过其他的去查询，比如字符串这种的碰到有些时候会很慢。<br>或者是还有就是写那个查询，navicat当中写个查询然后保存。<br>我想不到其他的了，因为没有怎么用过索引。  </p></blockquote><p><strong>首先检查索引</strong>；<br>查看<strong>SQL</strong>当中的<strong>where</strong>当中的<strong>查询字段</strong> <strong>是否有加索引</strong>；<br>或者说加了索引 <strong>是否正确索引</strong> 呢；<br>只要SQL不太烂，正常的走索引，数据量几百万上千万行的数据表，查询的速度依然会很快。  </p><blockquote><p><strong>思考</strong>： 一个几百万上千万数据量的表，只要加上了索引，然后查询的条件又是走的索引，关键的字段，为什么查找的速度就能够提高很多，性能会高？<br><strong>答</strong>：因为索引就相当于是书的页码，比如我要查询新华字典当中的某一个字，找到它的索引，也就是它的页码，一下子就能找到了。<br>不过至于它的底层方面的原理我不是很清楚。没有过这方面的研究，我也只是听说过是通过b+ 树实现的？  </p></blockquote><p><strong>索引的定义</strong>：<strong>索引</strong> 是 <strong>帮助MySQL</strong> <strong>高效获取数据</strong> 的 <strong>排好序</strong> 的 <strong>数据结构</strong>。<br><strong>索引结构</strong>：  </p><ul><li><strong>二叉树</strong></li><li><strong>红黑树</strong></li><li><strong>HASH(哈希表)</strong></li><li><strong>BTREE（B树）</strong></li></ul><p><strong>数据表</strong> 是 <strong>存储在磁盘文件</strong> 当中；<br>所装MySQL当中的data目录，目录下为数据库；<br>表数据实际上就存放在磁盘上了；<br>那从数据表当中去读取数据的时候查询某一行数据的时候，意味着就需要从<strong>磁盘</strong>上去<strong>查询</strong>这个数据表当中的数据。<br>如果该数据<strong>没有加索引</strong>则从第一行开始进行查找；<br>select * from t where t.col2=89;<br>如果该表t没有加任何索引则需要从该表<strong>第一行</strong>开始<strong>遍历</strong>。<br><strong>逐行查找逐行比对</strong>。<br>直到查找到n次磁盘查找到数据匹配位置。<br>如果要查找的<strong>数据在末尾</strong>，<strong>数据量非常大</strong>的情况下，每次从<strong>表头进行查找</strong>，<strong>性能非常差</strong>。<br>这也就是 <strong>全表扫描</strong>。  </p><blockquote><p><strong>问题</strong>：有什么办法<strong>优化SQL查询</strong>？  </p><ul><li>给<strong>字段加索引</strong>。<br>给col2字段加上索引后，即便是该表当中存在数据量十分大，查询起来的效率也会很高。<br>这个原因是什么？<br>给该字段加上索引之后，该字段作为索引字段之后，它在该表中的存储结构，该字段的存储结构就有一点区别。  </li><li><em>索引本质上是一种数据结构*</em>。<br>所以当给col2字段加上索引之后，那么就会将该col2字段列的数据通过<strong>以一种数据结构进行存储起来</strong>。  </li></ul></blockquote><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p><strong>二叉树（Binary Search Trees，简写BST）</strong>：<a href="https://www.cs.usfca.edu/~galles/visualization/BST.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/BST.html</a>  </p><p>比方说，常见的<strong>数据结构</strong>-<strong>二叉树</strong>，<br>将col2字段该列的数据放到二叉树当中来，<br>该字段col2的列的数据，每一个数据都放到二叉树当中去；  </p><p>而 <strong>二叉树的每一个结点</strong> 是一个 <strong>key-value</strong> 的一个取值；<br>也就是说 <strong>key</strong> 其实即为 <strong>索引字段</strong> ，而 <strong>value</strong> 则为 <strong>箭头的指针</strong> ；<br><strong>索引字段</strong>所对应的这<strong>一行的数据</strong>，在<strong>磁盘</strong>上的一个<strong>文件指针</strong>；<br>如果通过一个合理的方式，或者说是一个好一点的数据结构，来放索引的这个字段，以及每一个索引对应的这一行数据，<strong>磁盘文件指针</strong>；<br>那么再去看查找这行数据。  </p><p><strong>数据结构-二叉树</strong>常识：  </p><ul><li><strong>根节点（父节点）的右孩子取值大于根节点（父节点）取值</strong>；</li><li><strong>根节点（父节点）的左孩子取值小于根节点（父节点）取值</strong>；</li><li><strong>从左到右依次递增</strong>；</li></ul><p>如果要查找 select * from t where t.col2=89这一行数据；<br>用<strong>索引字段</strong>去查找的话，那么<strong>先走索引</strong>；<br>而<strong>索引</strong>是当前被放在<strong>二叉树</strong>这样一种数据结构当中去了；<br>那么再去进行查找；<br>那么肯定是从<strong>根结点</strong>开始进行查找；<br>那么第一次查询，从磁盘上进行查询结点后发现34和89对不上，错了；<br>89是大于34的；<br>按照<strong>二叉树数据结构</strong>的这样一个特点、特性；<br>找到该根结点的右边的子结点，一找即发现当前右边的子结点即为当前查询的结点；<br>然后通过<strong>找到的该结点</strong>找到<strong>该结点所对应的value</strong>；<br>该<strong>value</strong>放的就是这个 <strong>索引字段</strong> <strong>所对的那一行</strong>的<strong>数据磁盘文件指针</strong>；<br>那么就可以很快查找得到；  </p><p>通过一种合理的数据结构来放刚加的这个索引字段；那么这个查找的速度就会变得快很多。  </p><p><strong>MySQL的底层原理并不是二叉树</strong>。<br><strong>MySQL的底层是B+树</strong>；<br>MySQL的最终底层为什么选择B+树而不选择其他的数据结构？  </p><p>通过一种<strong>合理的数据结构</strong>来放<strong>索引的字段</strong>，那么查找的效率就将会快很多；<br>就<strong>不用一行一行</strong>的去<strong>遍历</strong>表，即<strong>不用全表扫描式</strong> <strong>查询某一行数据</strong> ；<br>而是可以先快速的<strong>从索引的数据结构当中</strong> <strong>快速的定位到某一个索引</strong>，<br>再把<strong>这个索引</strong> <strong>对应的那一行数据</strong> 的 <strong>磁盘文件指针</strong> 给查询出来，<br>就能够<strong>快速的</strong> 从<strong>磁盘上</strong> 找到 <strong>该行</strong> 要 <strong>查询的数据</strong>；  </p><p>索引具体是什么样的数据结构？  </p><p>MySQL官方没有选择二叉树，说明<strong>二叉树</strong>在<strong>某些场景</strong>下是<strong>存在问题</strong>的；  </p><p>for example:  </p><p>假设表t，将col1作为索引字段，那么SQL语句就需要变成：<br>select * from t where t.col1=6;来进行查找；<br>现在将col1作为一个二叉树；<br>当t表在插入数据的时候，二叉树插入数据的一个变化过程；<br>二叉树这样一个索引结构的变化；<br>插入第一行数据首先会去维护这个索引，第一列col1的数据呈现的规律为顺序递增，递增；每插入一行数据会先要去维护索引的这个数据结构；<br>索引在二叉树当中存在一个递增的规律，顺序递增；<br>每插入一个数据，首先要维护二叉树（Binary Search Trees）递增顺序的一个字段；<br>二叉树如果是维护这样一个递增顺序的字段作为索引会是一个什么样的一个情况；  </p><ul><li>索引-BinarySearchTrees插入递增数据<br><img src="/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91MySql%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95-BinarySearchTrees%E6%8F%92%E5%85%A5%E9%80%92%E5%A2%9E%E6%95%B0%E6%8D%AE.gif" alt="索引-BinarySearchTrees插入递增数据"></li></ul><blockquote><p>国外二叉树（各种数据结构）的一个教学网站（解析动画演示）：<br><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p></blockquote><p>插入第一行数据，再插入第二行数据，先进行维护这个索引；<br>如果二叉树维护的是这种单边增长的这种字段，而二叉树正好作为索引的底层数据结构，此时就会出现问题；<br>二叉树也会变成单边增长；<br>二叉树对于这种col1字段是单边增长的这种情况是不符合的；<br>这种用二叉树存储索引字段，就跟在数据表中去全表扫描没有任何区别，效果一样,没有什么区别；<br>二叉树这种数据结构对于索引的存储，索引字段的存储在某些方面是存在局限的；  </p><ul><li>索引-BinarySearchTrees查询递增数据<br><img src="/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91MySql%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95-BinarySearchTrees%E6%9F%A5%E8%AF%A2%E9%80%92%E5%A2%9E%E6%95%B0%E6%8D%AE.gif" alt="索引-BinarySearchTrees查询递增数据"></li></ul><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><p>红黑树：<a href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/RedBlack.html</a>  </p><p>问题：是否听说过红黑树？<br>答：听说过，且jdk1.8当中HashMap当中链表长度达到8之后就会将数据结构链表转化成红黑树这种数据结构；  </p><p>二叉树不行，则看看其他的更好的数据结构是否能够更好的存储索引字段;<br>红黑树也是一种常见的数据结构；<br>jdk在1.8之后，HashMap底层的链表实际上就是用红黑树来做了一个优化；  </p><p>插入递增数据会自动平衡；  </p><ul><li>索引-RedBlack插入递增数据<br><img src="/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91MySql%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95-RedBlack%E6%8F%92%E5%85%A5%E9%80%92%E5%A2%9E%E6%95%B0%E6%8D%AE.gif" alt="索引-RedBlack插入递增数据"></li></ul><p>查询时相对于二叉树来说要少一点；用红黑树来存储索引字段，相对于用普通的二叉树来存储来说，性能稍微高一点；<br>红黑树针对于这种单边增长的这种情况，只要单边出现3个连续递增的结点会做一个自动平衡的处理；那么存储同样的数据的话，整体的高度相对来说红黑树肯定要比二叉树要短；  </p><ul><li>索引-RedBlack查询递增数据<br><img src="/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91MySql%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95-RedBlack%E6%9F%A5%E8%AF%A2%E9%80%92%E5%A2%9E%E6%95%B0%E6%8D%AE.gif" alt="索引-RedBlack查询递增数据"></li></ul><p>问题：二叉树是可以自动平衡的，那么想一想如果用二叉树来做索引字段存储的数据结构有没有什么弊端？在哪些业务场景当中可能又有一些小问题？<br>答：我想不太出来诶。  </p><ul><li>红黑树范围查询</li><li>当数据量小的时候查询起来效率还在线上；如果当数据量大的话，红黑树将不断的往下增长；树的高度有可能变成2的n次方；这个n即为树的高度；每个结点即2，这个树能够存多少索引字段，即2的n次方；</li><li>如果说要查找的n，要查找的那一行的索引字段刚好是在树的叶子结点上面。一般是从根节点上进行遍历，那么查找遍历的次数至少是树的n，高度次这么多；那么从磁盘上要经过几十次，一个结点查找一次，查找一次有一个专业的术语，跟磁盘打一次交道，叫做磁盘IO，这样的话针对磁盘IO来说性能是不高的；效率不是特别高；可以说效率比较低了；如果还经历几十次这样的磁盘IO，性能是肯定没有办法接受的；</li></ul><p>红黑树这种数据结构，一旦表的数据量特别大的时候，查找数据的效率依然会很慢；<br>因为查找数据可能就在叶子结点上；<br>红黑树在数据量大的时候也是存在弊端的；  </p><p>红黑树不行，可以对其做一点点改造；  </p><p>即便是大数量情况下，几百万甚至是上千万的数据量下；通过一种数据结构能够快速的定位到所需要的那个数据的索引的字段；从而根据那个索引的字段能够得到结点当中的那个value值，也就是索引所在那一行数据的磁盘文件指针来定位到磁盘上的某一个位置查找到这一行数据；  </p><p>可以对红黑树进行改造进行优化；  </p><p>红黑树也是二叉树；叫做二叉平衡树；<br>因为红黑树会自动平衡；在红黑树的基础上做一下改造，从而解决在大数据量这种情况下出现的弊端（因为树的高度太高，也就是树存储大数据量的情况下，树的高度太高，磁盘IO就将随着树的高度height增长而增长）；  </p><p>问题： 对红黑树进行改造，让红黑树效率更高一点？  </p><ul><li>n叉树</li><li>原来结点存储到磁盘上面，之前结点就只存储一个索引字段，那么可以将这个结点弄大一点，也就是将它的磁盘存储空间分配大一点（也就是让这个结点上多存储几个索引字段）；且每一个索引之间都可以进行分叉，分叉下的索引结点的磁盘存储空间也分配大一点，也存储多个索引字段，每一个结点都可以有多个结点（多个索引元素）；  </li></ul><p>问题： 这样的存储结构，同样的大数据量的情况下，这样改造红黑树后的结构存储大数据量记录比改造前的红黑树，树的高度要小得多得多；<br>减小了红黑树的纵向，红黑树的高度，而增长了红黑树的横向；<br>横向越长，存储同样大的数据量，树的高度就越矮；树的高度越矮，查找一行数据，也就是某一结点上的数据，那么其效率也就越高；  </p><p>已经慢慢接触到MySQL底层的数据结构：<br>这种改造其实就是B树  </p><ul><li>磁盘存取原理<ul><li>寻道时间（速度慢、费时）</li><li>旋转时间（速度较快）<br><img src="/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91MySql%E7%B4%A2%E5%BC%95/%E7%A3%81%E7%9B%98%E5%AD%98%E5%8F%96%E5%8E%9F%E7%90%86.png" alt="磁盘存取原理"></li></ul></li></ul><p>横向查找不就慢了吗？</p><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p>B-Tree</p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANXx5xRm2O7Hw.CPoJY21PbGHy3.R9D2C3BHGRAwPaR*QEhgcUF1UMc2yymaSzxbgBOKNjFYrOEqnDAvX4*fMGPmY!/r" alt="索引"></p><ul><li>度（Degree）-结点的数据存储个数</li><li>叶子结点具有相同的深度</li><li>叶子结点的指针为空</li><li>结点中的数据key从左到右递增排列</li></ul><p>刚刚说到红黑树不行，可以在红黑树的横向上做文章；<br>存储同样大的数据量，树的高度将会大大的减小；<br>那就变成了引入B树；  </p><ul><li>索引-BTree插入递增数据<br><img src="/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91MySql%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95-BTree%E6%8F%92%E5%85%A5%E9%80%92%E5%A2%9E%E6%95%B0%E6%8D%AE.gif" alt="索引-BTree插入递增数据"></li></ul><p>结点内数据有限，不能无限放大；<br>B树比红黑树来说有更大的优点；<br>问题：在横向上做文章，那横向查找不就慢了吗？<br>注意：一个结点的大小是由限制的；结点当中的数据量是有限制的；不可能无限延长、大；比如说给这个结点设置几k大小，或者1Mb这么大；如果这个结点太大；<br>一个结点对应磁盘上的一个磁盘文件地址，对应一个大的磁盘文件地址；<br>MySQL设计的是，尽量的一次磁盘IO查找，在进行查找的时候是希望一次性把这个结点放到内存；<br>MySQL查找一次，跟磁盘做一次磁盘IO交互的时候，它会把这一个横向结点全部放到内存当中；只要这一个结点的数据都放到内存之后；那之后再到这个横向结点当中再进行查找数据；比方说要查找77，那么刚刚说经过了一次磁盘IO之后，会将这一个横向结点当中的所有索引元素都放到内存当中去，那么再去查找77，实际上就是从内存当中去进行查找这个77了；内存当中查找性能就非常快了；内存当中查找跟一次磁盘IO进行查找完全是不同级别的；<br>所以不用担心横向查找是否会慢；  </p><p>问题：那是否能将表中的所有行数据都放在一个横向结点当中，将这个横向结点设置为无限大；几百MB或者是几个G的大小用以这个横向结点做存储索引元素？那么一次查找即一次磁盘IO将这些数据一次性放到内存当中；之后就是从内存当中查询索引数据；那就很快了；？  </p><p>这个横向结点不能设置太大；<br>如果设置太大那么弊端将存在更多；首先；比如说几百万行上千万行的数据的索引怎么说也要几百MB，甚至1、2G来存储；也跟索引的字段类型有关，比如说String类型或者UUID类型等就肯定要几百MB；那么一次查找就全部放到内存的话；一次磁盘IO就需要花费很长时间，而且一次磁盘IO还不一定能够全部放到内存当中去；<br>一次磁盘IO也是有存在大小限制的；就算一次磁盘IO能够将该横向结点当中的所有的索引元素放到内存当中去，那也需要时间来放着几百MB的索引元素；而且可以思考一下，事先就将这几百MB设置几个G的索引元素直接放到内存当中去，而真正去查找数据的时候可能也就是查找最常用的10%都不到的行数据；<br>如果老是将整张表的数据全部都一次性放到内存当中去；那就将对这个内存的消耗太过于浪费；内存的资源是很宝贵的；<br>所以说这对该弊端；MySQL对于这一个横向结点是不会将其设置过大；尽量设置一个合适的大小；让这个结点，通过一次磁盘IO能够快速全部存入到内存当中；  </p><p>B-Tree应该叫做多叉平衡树；<br>B-Tree有一个特点：在中间来看一样也满足二叉树的原则；  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX5q0FjtHgrmg9JO6KfRhTseVNI0ZlC7sOBVRXN8io620BWK0osf4XOQsJRaBrrA60171VhwueoMM9fAlldBY.Fs!/r" alt="索引"></p><p>56左边的所有元素都小于56相对来说右边的元素；而56右边的索引元素都是大于56左边的父元素；<br>20和49都小于56；而20和49都大于15；  </p><p>然后B树还有一个特点就是在这一个结点当中，这一个横向结点当中从左到右它也是递增排序的；15小于56；56小于77；这是B树的一个特性；同时也是该数据结构的一个特性；<br>也就是说要用B树来维护这个数据结构时，它会按照这个特性进行初始化好；需要进行查询某一索引元素时也同样按照其特性去查找；<br>比方说要进行查找49这一索引元素；那么MySQL的查找方式即为：先将第一个结点横向结点根结点通过磁盘IO之后放到内存当中；然后到内存当中进行去比对；先比对15与49之间的大小；49大于15，接着进行比对49与56；则49小于56；然后再去查找比对15和56中间的索引元素；15和56中间存放的是指针，指针存放的是下一个索引元素，也就是下一个结点所对应的磁盘指针整个查询出来；即该指针所对应的结点数据全部放入到内存当中；然后放到内存当中去进行比对大小；然后接下来49与20进行比对，49大于20；那么接着49与49进行比对；就刚好相等；刚好找到该索引远元素了；找到该索引元素之后，则每一个索引当中存放的为key-value；value当中即存储着该索引这一行数据所在的磁盘文件当中的指针；那么拿到这个data之后；磁盘文件指针就能够快速的找到磁盘文件数据；即聚众索引；  </p><p>MySQL真正的底层索引并不是用B树来进行实现；而是使用的一种变种的B树，称之为B+树；  </p><h4 id="B-Tree-B-Tree变种"><a href="#B-Tree-B-Tree变种" class="headerlink" title="B+Tree(B-Tree变种)"></a>B+Tree(B-Tree变种)</h4><p>B+Tree(B-Tree变种)</p><ul><li>非叶子结点不存储data，只存储key，可以增大度；</li><li>叶子结点不存储指针；</li><li>顺序访问指针，提高区间访问性能；</li></ul><p>什么叫做B+树，B+树是B树的一个变种；  </p><p>B+树与B树的区别：<br>B+树：所有的data都放到了叶子结点上；而非叶子结点没有了data；<br>B+树的叶子结点上都有一个右指针；  </p><p>问题：为什么B树当中非叶子结点上的data元素都移到了叶子结点上去了；<br>B树当中每一个叶子结点并不重复；而B+树当中一些关键的索引做了冗余；不光是在叶子结点上非叶子结点上也做了冗余；  </p><p>非叶子结点上为什么没有data元素了？<br>这么一存的话（非叶子结点上存data元素，非叶子结点不存data元素）；那么就意味着整个B+树的叶子结点当中；就有了数据表的完整的所有行的索引；因为把每一行的data都往叶子结点上移动；那么每一行数据都存在有一个data的磁盘文件指针；那也就意味着；所有的行数据应该在叶子结点都有一份完整；只不过某一些关键的索引的元素；在非叶子结点上做了一个冗余；15、20、49做了冗余；方便遍历数据；一次磁盘IO取更多的k；  </p><p>其中常见的数据结构在不同场景下的区别  </p><p>MySQL实际上希望的是这一个结点的大小是有一个适当的大小，不能设置太大；<br>也就是说这一个结点的大小是存在有限制的；<br>每一个结点当中能够存储更小的元素，是不是也就意味着；一个大结点当中里面能够存储更多的索引的key；也就是说能够存储更多的索引字段；也就意味着这一个结点在大小相同的情况下；比方说，默认MySQL把这个结点的大小设置为16k；<br>在这一个大结点，一个大小固定的情况下面；这一个大结点当中的每一个小结点如果把data元素移动到叶子结点上去；是不是也就意味着整个这一个大结点可以横向可以存储更多的索引元素；  </p><p>那么如果横向可以存储更多的索引元素，那也就意味着这个横向结点向下的分叉也就越多；分叉分得更多，也就说明，存储同样大的数据量，树的高度也就更小了；那么叶子结点也就更大了；  </p><p>为什么要将data移动到叶子结点上去的原因就在于：非叶子结点当中也就可以横向存放更多的索引元素；从而树的高度也就效率，查找的效率也就提高了上来；  </p><p>MySQL默认把结点的大小设置为16k；<br>SHOW GLOBAL STATUS like ‘Innodb_page_size’;  </p><table><tr><th>Variable_name</th><th>Value</th></tr><tr><td>Innodb_page_size</td><td>16384</td></tr></table><p>该sql语句查出来的值实际是上就是MySQL底层存储索引字段，B+树的这个大结点的大小；当然也可以去进行修改该值；但是一般并不推荐去修改该值；<br>16384个字节；实际上也就相当于是16k数据；也就是16k的大小；这个大小在磁盘上也就是分配的16k的一个磁盘大小；  </p><p>思考：刚刚将data元素放到叶子结点上面去了；现在画的树的高度为3；思考现在高度为3的该树一共可以存储多少索引字段？  </p><p>假设该索引字段的字段类型为bigint；表的主键/索引的类型一般为bigint；<br>bigint在MySQL的底层的存储大小大概为8个字节byte；  </p><p>大结点当中除了索引字段占据n*8个字节外，还存在有指针；指针在MySQL底层源码使用的是6个字节byte来进行存储这个指针；这个指针说白了就是下个结点在磁盘文件上的一个地址；  </p><p>也就是说这个大结点当中存储了这样一个小的索引，以及索引旁边的指针；差不多也就是8Byte+6Byte=14Byte（一个索引+一个指针）；这一个大结点16k大概能够存储多少个索引；<br>公式=16384Byte/(8Byte+6Byte=14Byte)=1,170.285714285714<br>一个大的结点可存储的索引数约为1170个；也就是大概1k的样子；  </p><p>那么第二个结点，也可以进行存储1170个索引数；  </p><p>再说到叶子结点；所有的data元素都放到叶子结点；那么叶子结点就会变大；每一个小结点就都会变大了相比之前没有放data元素之前变大了；  </p><p>假设一下；假设这个叶子结点当中的一个小叶子结点，也就是对应的这一行索引以及该索引所在的行的那个磁盘文件文件指针或者说这一行的其他数据就存储到这个小结点当中；假设这个小结点就大一点，就存储1k的数据；那么这一个存储该小结点的大结点同样是存储16k的数据；那么也就是该结点所能够存储的索引元素为16个；<br>整个叶子结点当中可以容纳多少的索引元素（存储的所有的索引的数值）？<br>公式：（根结点上的1170这一层）1170<em>1170</em>16=21,902,400‬<br>算出来的该值实际上就是该叶子结点上所有可以存储的索引元素的总和；  </p><p>非叶子结点的所有的索引元素*每一个叶子结点可以存储的多少个索引行数据  </p><p>这个结果算出来差不多等于两千多万；两千多万所算出来的东西；也就意味着该叶子结点能够放的总索引元素个数（小索引元素+data元素）大概是两千多万；（也就相当于是两千多万条/行数据）；  </p><p>使用B+树这么一改造之后；发现同样树的高度；高度为3；该树就能够存储两千多万条个索引，也就说明可以支撑两千万行的表；将这两千多万行数据的表当中的一字段作为索引存储到该数据结构当中，那么同样高度为3，height为3，查找一个元素比方说查找50；那么从根结点去进行匹配对比；经过顺序查找；50与父节点/根结点当中的15-56对比，查找中间的数值即该根结点的左节点；也就是再跟15-28-49进行比较，得到50再去与该结点的下一结点比较即49-50；最多经过三次磁盘IO；就能够找到索要查找得到的元素50；性能十分高；  </p><p>这也就是为什么上千万行数据；只要索引字段建的比较的合理、合适；那么其磁盘查找次数是非常少的；  </p><p>用B+树来说；常见的数据表，树的高度一般就控制在2~4之间；<br>不管如何查询；即使是查询到叶子结点的速度也是十分快的；<br>只需要经过几次磁盘IO查找；  </p><h4 id="HASH表"><a href="#HASH表" class="headerlink" title="HASH表"></a>HASH表</h4><p>MySQL的索引字段当中存在有索引方法；点击下拉框进行选择索引方法（存在有两种实现：一种是BTREE；一种是HASH）<br>HASH 也是官方的一种实现；但是使用的不多；<br>90%以上的场景都是使用的B树；<br>为什么不用HASH表的原因：<br>HASH表存储索引的原理：<br>比方说将col1作为索引字段；select * from t where t.col1=4;<br>通过一个hash算法，hash（4）；对该4取了一个HASH；得到的该结果，那么该结果就跟所查询的where t.col1(4)这一行数据所在磁盘文件是有一个映射关系的；<br>这就是HASH表的一个存储结构；<br>HASH实际上就是一种算法；比说MD5;MD5就是一种HASH算法；<br>HASH就是将索引列通过一种HASH算法将索引列的值存放到HASH这一数据结构当中去；<br>那么select * from t where t.col1=6;进行查找该t.col1=6的数据行；的HASH查找即为：对该col1=6；该6的该取值做一次HASH算法运算得到它的结果hash(6)；根据这个结果；只需要做一次映射就能够快速的定位到这一行数据所在的文件磁盘指针；<br>那么即便是千万级别的数据也只需要通过hash()一次HASH结果进行计算定位得到索引所在行数据的文件磁盘指针也是能够快速的查找得到的；感觉HASH表性能更高，比B+树效率更高；B+树还要经过两三次的树的一个遍历；而HASH表的查找感觉更快；<br>只需要有这个索引字段，走索引，经过MYSQL底层定义好索引方法为HASH算法，只需要一次HASH计算结果就能够拿到该查找行数据的所在文件磁盘指针；感觉性能很快；<br>甚至在数据量更大的表当中进行查找表尾的数据，也只需要经过一次HASH计算就能找到该行数据所在的磁盘文件指针；  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANXzV2Z6K9IOXoYW6kFdX*NnL.fv6XCleV5BjrQCN4Bw3HvJfkZCF6LFsSX26xC5WuUZwgbGD9vBaj2.Lec10r*m8!/r" alt="索引"></p><p>那么为什么MySQL一般用B树而不用HASH表呢？<br>（1）范围查找太慢；比如说select * from t where t.col1&gt;6;<br>      那么当这种情况下；如果col1大于的数值，极端来想的话，也就相当于是全表扫描了；<br>（2）HASH只用于范围查找很少的情况下才进行使用；那么这个时候索引使用HASH是<br>      没有问题的；而正常情况下一般都会要使用得到范围查找所以这个时候使用B Tree更佳；<br>（3）回到问题：为什么InnoDB的主键索引的叶子结点上存在有指针（右指针）？<br>      在维护B+树的时候，比方说叶子结点的最后一个结点满了，那么就需要开辟一个新的结点（下一个结点）来进行存储新的索引元素；那么就将前面那个结点（也就是之前叶子结点的最后一个结点满了的那个结点）中间开辟一个小小的元素空间；把下一个新开辟的这一个结点的磁盘文件地址的指针存放到该新开辟的结点的上一个结点的那个小元素空间当中去；也就说白了；该新开辟的结点的上一结点有一个指针，指向了下一结点，也就是该新开辟的结点的磁盘文件指针；<br>      通过有了这个指针；再联想HASH表的范围查找进行思考，那么是不是说明该指针就能够帮忙解决很大的问题；<br>      比方说：查找索引字段取值col1大于20取值的记录；从B+ 树的索引找到该20的这一个元素；因为整个叶子结点的索引元素都是从左到右依次递增形式的；通过这个（右）指针顺藤摸瓜的形式（其实这里形成了一个双向指针，查询即小于20的元素也是一样的；双向链表），通过指针就能够找到大于20，也就是20这个索引元素后面的所有索引元素结点；最后放到一个大的集合当中去；也就是这条sql语句所要返回的结果集合；  </p><p>B+树的两个特性：<br>（1）为了让非叶子结点能够存储更多的索引；从而叶子结点上除了索引元素还存在有data元素；<br>（2）在叶子结点索引元素之间还存在有一个指针指向下一索引元素结点的地址；存在有一个双向的指针；也就是为了解决如何高效的进行范围查找的这样一个问题；所以高效的范围查找也是可以进行走索引的；在某种情况下，范围查找也是可以走索引的；（因为存在指针，存在顺序递增顺序递减的这样一个结构，那么则肯定是可以走相关的索引的）  </p><h5 id="B-Tree索引的性能分析"><a href="#B-Tree索引的性能分析" class="headerlink" title="B+Tree索引的性能分析"></a>B+Tree索引的性能分析</h5><ul><li>一般使用磁盘I/O次数评价索引结构的优劣</li><li>预读：磁盘一般会顺序向后读取一定长度的数据（页的整数倍）放入内存</li><li>局部性原理：当一个数据被用到时，其附近的数据也通常会马上被使用；</li><li>B+Tree结点的大小设为等于一个页，每次新建结点直接申请一个页的空间，这样就保证一个结点物理上也存储在一个页里，就实现了一个结点的载入只需一次I/O。</li><li>B+Tree的度d一般会超过100；因此h非常小（一般为1~3之间）  </li><li>一般操作系统的最小存储单元为页，1页大小为4k；  </li><li>查看Mysql文件页大小（16k）: SHOW GLOBAL STATUS like ‘Innodb_page_size’;  </li></ul><h5 id="为什么MySQL页文件默认为16k"><a href="#为什么MySQL页文件默认为16k" class="headerlink" title="为什么MySQL页文件默认为16k"></a>为什么MySQL页文件默认为16k</h5><p>假设一行数据大小为1k；那么一页就能够存16条数据；也就是一个叶子结点能够存16条数据；再看非叶子结点，假设主键ID为bigint类型，那么长度为8B，指针大小在InnoDB源码中为6B，一共就是14B，那么一页里就可以存储16k/14=1170个（主键+指针）<br>那么一棵高度为2的B+树能存储的数据为1170<em>16=18720条，一棵高度为3的B+树能存储的数据为1170</em>1170*16=21902400（千万级条）  </p><h3 id="索引底层数据结构与算法"><a href="#索引底层数据结构与算法" class="headerlink" title="索引底层数据结构与算法"></a>索引底层数据结构与算法</h3><h3 id="InnoDB与MyISAM索引区别"><a href="#InnoDB与MyISAM索引区别" class="headerlink" title="InnoDB与MyISAM索引区别"></a>InnoDB与MyISAM索引区别</h3><p>InnoDB形容表还是形容数据库？<br>InnoDB以及MyISAM存储引擎是用来形容数据表的；  </p><p>当在设计表时，在选项当中有引擎选项存在有：ARCHIVE、BLACKHOLE、CSV、InnoDB、MEMORY、MRG MYISAM、MyISAM、PERFORMANCE SCHEMA…等等；  </p><p>存储引擎是形容表的，最常见的存储引擎即InnoDB以及MyISAM这两种存储引擎；<br>用的比较多的为InnoDB该存储引擎；  </p><p>不同表不同存储引擎底层的数据结构区别：  </p><p>test数据库对应都是存储在本地磁盘上的；<br>以数据库名命名的磁盘文件夹下；  </p><p>表=表结构+数据+索引  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX8IZB7poXY4Ed7**8BhOfVx.BLlNb39BqBwC.ebBPiVr7.bXbWAXqMbGapRUkOP8BwmJQWBxopXJj*htdZrocUE!/r" alt="索引"></p><p>InnoDB:<br>test.innodb.lock.frm - 表结构等相关信息存储文件<br>test.innodb.lock.ibd - 表数据+表索引结构  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX*r9r8zOgb4r0dv8mg9Q5qMyppmh2cPcvbiy6hMFV9ap4rR0IrTk.u5U5HvIcDcxnTh0*XJn4IhWeLwxBiXTkPg!/r" alt="索引"></p><p>InnoDB的表有一个主键，该主键自带索引；主键索引在InnoDB存储引擎下如何存储；<br>InnoDB的这种文件存储方式，MySQL官方在开发的时候，InnoDB当中的主键索引以及表当中的所有数据全部存储同一个文件，叫做后缀为ibd的文件当中；<br>InnoDB存储方式当中的叶子结点当中的的data元素所表示的内容与MyISAM存储方式当中叶子结点当中的data元素所表示的内容不一致；索引结构有点区别；<br>MyISAM叶子结点的data元素当中所存为索引所在行的行数据的磁盘文件指针；<br>但是发现InnoDB的主键索引，它的叶子结点当中的data元素当中所存储的为索引所在行的其他所有列的数据；这一行的所有列数据全部存储到该data元素当中去；<br>也就是说在InnoDB当中，通过一条sql语句，带有where查询通过索引进行查询的sql语句；只需要查找一个文件，从这个ibd文件当中一次性定位到索引元素，快速的就能根据data元素，这个索引所在行的其他的所有字段，将该行的所有字段进行查询出来放入内存当中去；就查找到了所需要查找的元素；相对来说性能应该要比MyISAM存储引擎的性能会高一点；  </p><p>InnoDB与MyISAM的底层存储是稍微有些区别的；  </p><p>MyISAM：<br>test.myisam.frm - 该文件存储对表的表结构一些定义的一些数据；<br>test.myisam.MYD - 实际上存储的为表的数据，D英文单词data的简写（该表当中所有的数据行）；<br>test.myisam.MYI - 该表所对应的索引字段存储的位置；  </p><p>主键自带主键索引；索引，它是一个数据结构，数据结构实际上存储在MYI文件当中；I即为Index首字母的简写；  </p><p>MyISAM底层也为B+树数据结构进行存储；<br>MyISAM索引底层存储，如何进行存储：  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX8sBSc*PWI*GgGhWe3pcWW625GV21FTGHFPkQrnPSFTCe3vCEKM3QCpTupcvYLjHH7f2N4y0qI7TTFDwZaL9fXc!/r" alt="索引"></p><p>col1是作为表的主键索引；<br>因为支持二叉查找，所以像15、20、49这种处于在中间的这些个数据将被作为冗余字段；<br>就更可以区分查找数据；像二叉折半查找等；一般取中间的元素作为冗余的索引；快速的过滤一些数据；减少查找次数；<br>将col1该字段列当中的所有数据放入到数据结构当中去；然后看；<br>原来在叶子结点当中存储的data元素，data元素存储的即使该索引所在行的行数据的磁盘文件指针；（地址指针，16进制的值）  </p><p>select * from t where t.col1=49;<br>col1主键索引；<br>MySQL底层实际上先会去到MYI文件当中；<br>因为索引（数据结构）存储在MYI索引文件当中；<br>先拿col1=49在MYI文件当中快速地定位到结点为49的结点；<br>根据B+树的特性；<br>先从根结点去进行定位；<br>根结点当中的数据通过一次磁盘IO，根结点当中的索引元素将会被放到内存当中，49将会在内存当中与15-56-77相进行比较；得到49在15-56之间；49就将走15与56中间的向下的指针，左节点也就是存放有15-20-49这三个索引元素的该结点中，那么此时左节点当中的索引元素将会进行第二次磁盘IO的操作，将左节点当中的索引元素放到内存当中去，与查询的数据49相进行比较；得到49在区间20-49之间；最后到了叶子结点，该叶子结点当中包括两个小结点49-50以及2个data元素（指针），那么第三次磁盘IO时，将49-50该叶子结点放到内存当中去，49就将与49-50相进行比较得到49，该49即为要查找的元素；49该小结点当中所对应的data元素拿出来，该data元素对于MyISAM存储引擎来说data元素存储的是为该索引所在行的行数据的磁盘文件指针；当拿到获取得到该指针之后就将到MYD文件当中进行查询获取得到相应数据值；  </p><p>面试题：聚集索引or聚众索引  </p><p>什么叫做聚集索引?  </p><p>聚集索引定义：叶结点包含了完整的数据记录；<br>InnoDB的主键索引，ibd这个主键索引的这个文件；主键索引其就叫做聚集索引；<br>因为InnoDB的主键索引，它是跟它的文件数据行整个是存储在一个文件当中ibd文件；<br>索引和数据是聚集存储在一起的；  </p><p>有聚集索引即存在非聚集索引；<br>MyISAM的主键索引就称作是非聚集索引；<br>因为MyISAM的主键索引存储在MYI文件当中；而数据存储在MYD文件当中；<br>那如果需要查找数据，每次都需要两个文件的一同查找才能查找得到；数据文件和索引文件分开存储了；所以称MyISAM的主键索引为非聚集索引；InnoDB的主键索引称为聚集索引；  </p><p>常见数据结构理论；  </p><p>结合具体的MySQL表来看一下；<br>不同的表底层如何进行存储；<br>MySQL的表无非就是MyISAM存储引擎/InnoDB存储引擎；<br>不同的表可能有不同的存储引擎；  </p><p>MyISAM索引实现（非聚集）<br><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX2tYjinQbFQFT5hJICKOua.p8u*tNGRGnBmzDnCDDuui9JbsxaFmbrmLTSu0V4thfYO9zIg6UNnWwUY*NxnoWlU!/r" alt="索引"></p><ul><li>MyISAM索引文件和数据文件是分离的；</li></ul><p>InnoDB索引实现（聚集）</p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX*GhKIY3zUQdhemNpwYPZHMTx6WJ6HggRWyAqiDQHIGmxm2m2V7hUQmLQaYwj8CF*g.zfe8sCKjjxpzzRlDfl3I!/r" alt="索引"></p><ul><li>表数据本身就是按照B+Tree组织的一个索引结构文件</li><li>聚集索引-叶结点包含了完整的数据记录</li><li>为什么InnoDB表必须要有主键？并且推荐使用整型的自增主键?  <ul><li>为什么必须要建主键，MySQL官方对于InnoDB的表，其数据就需要用一个索引B+树来组织；所以肯定是需要主键的；<br>（之间建了InnoDB的表但是没有建索引也建成功了）针对这种情况，MySQL会自动在底层建一个索引；如果表中没有建索引，MySQL会在底层找一个唯一能标识这一行数据的字段作为索引；<br>如果找不到，它会默认给表生成一个类似像row_id，一个隐藏列作为主键索引，主键；<br>根据该表主键索引来维护整张表的数据；MySQl官方设计的就是要用一个B+树的存储结构来组织；B+树其实就是该索引，索引结构；所以必须要有一个主键索引；即便表中没有建立，MySQL也会默认生成一个隐藏的列/主键索引；  </li><li>主键尽量为整型自增；为什么主键尽量为整型自增？<br>假设主键不设置为整型，设置为UUID类型，UUID不为整型，而是字符串类型；<br>为什么不推荐使用UUID，而推荐使用整型并且自增的类型；<br>首先用UUID，它是字符串类型的，而且是很长一串，字母+数字+其他符号；<br>这样存在的弊端有：<br>（1）相对于整型来说，首先，这一长串字符串的存储空间比整型大得多（字符串长度越长占用空间越大；索引存放在磁盘上面，那么也将会占用磁盘存储空间；那么UUID存储磁盘空间是肯定会要比整型类型字段要大得多）；<br>（2） 而且，底层B+树索引去进行查找的时候；是需要进行结点之间比较大小的；一个一个根据B+树，二叉一个个进行比较大小找对应的元素；而结点当中存储的都为UUID，一个个去比较大小的话；字符串比较大小，字符串跟数字进行比较，一位一位进行比较性能将会非常的低；字符串去进行比较先要转成ASCII码值（国标码）按照码表当中的顺序进行比较大小；这个性能就非常低了；<br>相对于整型来比较：数值之间的比较性能肯定是高的多的；<br>（3）为什么要使用自增的？UUID肯定不是自增类型的；<br>正常情况下如果是使用顺序自增：插入的元素基本上是往后面进行插入的；后面的结点空间满了，然后继续往后面去开辟一个空间继续放；如果现在新加一个元素；叶子结点从左到右都是依次递增的；在每一个结点当中每一个元素都是依次递增，左边小于右边；B+树当中的所有叶子结点；<br>从左到右都是依次递增的；<br>现在将一个不是自增的新元素UUID进行插入；<br>而插入的位置正好是叶子结点中间的一个位置，而并不是结尾的位置；<br>比如插入到20与30的叶子结点中间；<br>那么这个时候将20和30想象成UUID类型的字符串内容；当新元素UUID进行插入的时候就将会形成分裂的这种情况；<br>有可能就是将20与新元素新分裂出一个叶子结点，30单独分裂出去一个叶子结点；<br>插入的元素需要进行分裂一次；然后还需要平衡一次；<br>相对于这种插入新元素，插入一个元素按顺序递增往后面进行一个一个递增的加元素的这种情况效率就要高多了；<br>这也就是为什么B+ 树推荐的主键索引为整型并且自增类型；<br>因为自增它会尽可能的避免：新增的该结点插入到叶子结点上去了之后，会导致叶子结点原有的已经满了的大的叶子结点做分裂以及自动平衡；<br>（4）指针（B+树的叶子结点上的右指针）的作用：叶子结点当中某一大结点如已经存满了16k的索引元素；按照B+树从左到右的依次递增的顺序；假设当前该字段不是自增的；现在来了一个新的元素需要进行插入数据，看到索引的值比方说为25；那么按顺序这个索引值就应该插入到叶子结点20-30的中间；但是当前该叶子结点的存储空间大小16k已经满了，已经存不下了；<br>那么此时在这种情况下：<br>1&gt;当前叶子结点的存储空间已经满了<br>2&gt;当前需要新插入一个新的索引元素，而该索引元素的大小取值应该放在该当前叶子结点的中间；<br>那么这个时候就需要进行叶子结点的分裂；分裂成两个结点；20与25这两个索引元素成为一个新的叶子结点；而30将被分裂到另外一个叶子结点上面去；<br>而如果插入的元素都是递增类型的元素的话则比如说插入新元素100；那么就肯定不再需要往中间去进行插入；都是直接在后面新开辟一块空间来进行存储该新元素100；  </li></ul></li></ul><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX8fDAvL3g7DJ9HhnBQeGRqDvrpkZXABEIRyvGCl2wXfLlwUZMMrCWHUUoUCg2YMQdB8MP3ElixOLflsVbBIu18U!/r" alt="索引"></p><ul><li>为什么非主键索引结构叶子结点存储的是主键值？（一致性和节省存储空间）  </li></ul><h3 id="索引最左前缀原理"><a href="#索引最左前缀原理" class="headerlink" title="索引最左前缀原理"></a>索引最左前缀原理</h3><ul><li>联合索引的底层存储结构长什么样?  </li></ul><p>(字段1，字段2，字段3)<br>比方说字段1、字段2、字段3是联合索引；  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX50m84lF6rjqlgyWXpKCriCR9zfdJdu7YbMYTBq.e8Oj47TQyP3KTeZ1anErrKoy5mNBgGaDtLH9DbfHrrCBYYg!/r" alt="索引"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;笔记&quot;&gt;&lt;a href=&quot;#笔记&quot; class=&quot;headerlink&quot; title=&quot;笔记&quot;&gt;&lt;/a&gt;笔记&lt;/h2&gt;&lt;p&gt;观看笔记：&lt;br&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV13x411Z7AQ?from=sea
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://fengshana.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://fengshana.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="红黑树" scheme="https://fengshana.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
      <category term="MySql索引" scheme="https://fengshana.github.io/tags/MySql%E7%B4%A2%E5%BC%95/"/>
    
      <category term="B+树" scheme="https://fengshana.github.io/tags/B-%E6%A0%91/"/>
    
      <category term="B树" scheme="https://fengshana.github.io/tags/B%E6%A0%91/"/>
    
      <category term="HASH表" scheme="https://fengshana.github.io/tags/HASH%E8%A1%A8/"/>
    
      <category term="二叉树" scheme="https://fengshana.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>全面深入讲解MySQL数据库优化01</title>
    <link href="https://fengshana.github.io/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%9601/"/>
    <id>https://fengshana.github.io/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%9601/</id>
    <published>2020-05-27T10:35:55.031Z</published>
    <updated>2020-05-29T11:36:09.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;seid=13531213796559959972" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;seid=13531213796559959972</a>  </p><p>本课程作为MySQL高级课程，主要讲解了：  </p><ul><li><strong>MySQL</strong>中的<strong>视图</strong>/<strong>存储过程</strong>/<strong>触发器</strong>/<strong>索引</strong>等对象的使用</li><li>常见的<strong>SQL</strong>语句<strong>优化</strong>的技巧</li><li><strong>应用优化</strong></li><li><strong>数据库优化</strong></li><li><strong>数据库日志</strong></li></ul><p>等方面的知识，并通过综合案例，对课程中的知识进行一个整合应用。  </p><p>本课程旨在通过MySQl高级部分内容，可以在满足现有业务需求基础上，对<strong>MySQL底层的体系结构</strong>，及<strong>底层的优化</strong>有一个深入的理解，对<strong>系统的整体性能</strong>进行提升。  </p><h2 id="课程内容介绍"><a href="#课程内容介绍" class="headerlink" title="课程内容介绍"></a>课程内容介绍</h2><blockquote><p>Mysql高级-day01</p></blockquote><p>MySQL高级课程简介</p><ol><li>Linux系统安装MySQL</li><li><strong>索引</strong></li><li><strong>视图</strong></li><li><strong>存储过程</strong>和<strong>函数</strong></li><li><strong>触发器</strong></li></ol><h3 id="MySQL高级课程简介"><a href="#MySQL高级课程简介" class="headerlink" title="MySQL高级课程简介"></a>MySQL高级课程简介</h3><table>    <tr>      <th>序号</th>      <th>Day01</th>      <th>Day02</th>      <th>Day03</th>      <th>Day04</th>    </tr>    <tr>      <td>1</td>      <td>Linux系统安装MySQL</td>      <td>体系结构</td>      <td>应用优化</td>      <td>MySQL常用工具</td>    </tr>    <tr>      <td>2</td>      <td>索引</td>      <td>存储引擎</td>      <td>查询缓存优化</td>      <td>MySQL日志</td>    </tr>    <tr>      <td>3</td>      <td>视图</td>      <td>优化SQL步骤</td>      <td>内存管理及优化</td>      <td>MySQl主从复制</td>    </tr>    <tr>      <td>4</td>      <td>存储过程和函数</td>      <td>索引使用</td>      <td>MySQL锁问题</td>      <td>综合案例</td>    </tr>    <tr>      <td>5</td>      <td>触发器</td>      <td>SQL优化</td>      <td>常用SQL技巧</td>      <td></td>    </tr></table><h2 id="Linux上安装MySQL"><a href="#Linux上安装MySQL" class="headerlink" title="Linux上安装MySQL"></a>Linux上安装MySQL</h2><h3 id="下载Linux安装包"><a href="#下载Linux安装包" class="headerlink" title="下载Linux安装包"></a>下载Linux安装包</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>/<span class="regexp">/dev.mysql.com/downloads</span><span class="regexp">/mysql/</span><span class="number">5.7</span>.html<span class="comment">#downloads</span></span><br></pre></td></tr></table></figure><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><ol><li><strong>卸载</strong>centos中预安装的mysql</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep -i mysql # 查询服务器当中mysql的安装包是否存在，存在则显示出存在安装包的名称</span><br><span class="line"></span><br><span class="line">rpm -e mysql-libs<span class="number">-5.1</span><span class="number">.71</span><span class="number">-1.e16</span>.x86_64 --nodeps # 对已存在的安装包(mysql-libs<span class="number">-5.1</span><span class="number">.71</span><span class="number">-1.e16</span>.x86_64)进行卸载</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>上传</strong>mysql的安装包</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alt + p -------&gt;put E:/tset/MySQL<span class="number">-5.6</span><span class="number">.22</span><span class="number">-1.e16</span>.i686.rpm-bundle.tar（MySQL安装包的目录）</span><br><span class="line"></span><br><span class="line"># 使用SecureCRT远程连接服务器工具，alt+p命令进入sftp模式；再执行put （MySQL安装包的目录）[ 上传 ]</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>解压</strong>mysql的安装包</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir mysql</span><br><span class="line"></span><br><span class="line">tar -xvf MySQL-<span class="number">5.6</span>.<span class="number">22</span>-<span class="number">1</span><span class="selector-class">.e16</span><span class="selector-class">.i686</span><span class="selector-class">.rpm-bundle</span><span class="selector-class">.tar</span> -c /root/mysql</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>安装</strong>依赖包</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装第三方的依赖库；yum -y 在线安装需连接网络</span><br><span class="line">yum -y install libaio.so<span class="number">.1</span> libgc_s.so<span class="number">.1</span> libstdc++.so<span class="number">.6</span> libncurses.so<span class="number">.5</span> --setopt=protected_multilib=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">yum update listdc++<span class="number">-4.4</span><span class="number">.7</span><span class="number">-4.e16</span>.x86_64 # 更新第三方类包</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>安装</strong>mysql-client</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">MySQL-client-5</span><span class="selector-class">.6</span><span class="selector-class">.22-1</span><span class="selector-class">.e16</span><span class="selector-class">.i686</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure><ol start="6"><li><strong>安装</strong>mysql-server</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">MySQL-server-5</span><span class="selector-class">.6</span><span class="selector-class">.22-1</span><span class="selector-class">.e16</span><span class="selector-class">.i686</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure><blockquote><p>Linux</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ipconfig</span> <span class="comment"># 查看本机ip地址，内网地址</span></span><br></pre></td></tr></table></figure><h2 id="启动及登录MySQL"><a href="#启动及登录MySQL" class="headerlink" title="启动及登录MySQL"></a>启动及登录MySQL</h2><blockquote><p><strong>启动mysql</strong>命令</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service mysql status  # 查看mysql服务状态</span><br><span class="line">service mysql start   # 启动mysql服务</span><br><span class="line">service mysql stop    # 停止mysql服务</span><br></pre></td></tr></table></figure><blockquote><p><strong>登录mysql</strong></p></blockquote><p>mysql 安装完成之后，会自动生成一个<strong>随机密码</strong>，并且保存在一个密码文件中：/root/<strong>.mysql_secret</strong>；  </p><blockquote><p><strong>查看</strong>随机密码</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/root/</span>.mysql_secret</span><br></pre></td></tr></table></figure><blockquote><p><strong>登录</strong>命令</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta"># -u 指的是用户</span></span><br><span class="line"><span class="meta"># -p 指的是该用户所对应的密码</span></span><br></pre></td></tr></table></figure><blockquote><p>登录之后，修改密码命令</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> = <span class="keyword">password</span>(<span class="string">'itcast'</span>);</span><br><span class="line"><span class="comment"># itcast即明文密码</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>授权远程访问</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'itcast'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>防火墙</strong></p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service iptables status # 查看防火墙状态</span><br><span class="line">service iptables stop # 关闭防火墙</span><br></pre></td></tr></table></figure><h2 id="索引-概述"><a href="#索引-概述" class="headerlink" title="索引 - 概述"></a>索引 - 概述</h2><p><strong>MySQL官方</strong>对<strong>索引</strong>的定义为：  </p><p><strong>索引</strong>（<strong>index</strong>）是 <strong>帮助</strong> MySQL <strong>高效获取数据</strong> 的 <strong>数据结构</strong>（<strong>有序</strong>）。  </p><p>在数据之外，<strong>数据库系统</strong> 还 <strong>维护</strong>着 满足 <strong>特定查找</strong> <strong>算法</strong> 的 <strong>数据结构</strong>，<br>这些 <strong>数据结构</strong> 以 某种方式 <strong>引用</strong>（<strong>指向</strong>）<strong>数据</strong>，<br>这样就可以在这些 <strong>数据结构</strong> 上实现 <strong>高级查找算法</strong>，<br>这种 <strong>数据结构</strong> 就是 <strong>索引</strong>。<br>如下面的示意图所示：  </p><p>左边是数据库，一共有两列七条记录，最左边的是数据记录的物理地址<br>（注意 <strong>逻辑上 相邻的记录</strong> 在<strong>磁盘上</strong> 也 <strong>不是一定物理相邻</strong> 的）。  </p><p>为了<strong>加快Col2的查找</strong>，可以<strong>维护</strong>右边所示的<strong>二叉查找树</strong>，<br>每个<strong>结点</strong>分别包含 <strong>索引键值</strong> 和一个 <strong>指向</strong> <strong>对应数据记录</strong> <strong>物理地址</strong> 的 <strong>指针</strong>，<br>这样就可以运用 <strong>二叉查找</strong> 快速后去到相应数据。  </p><p>一般来说 <strong>索引本身也很大</strong>，<br><strong>不可能全部存储在内存</strong> 中，<br>因此索引往往以 <strong>索引文件</strong> 的形式 <strong>存储在磁盘</strong> 上，<br><strong>索引</strong>是数据库中用来 <strong>提供性能</strong> 的最常用的工具。  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mspaint</span> <span class="comment"># windows打开画板</span></span><br></pre></td></tr></table></figure><table>  <tr>    <td>物理地址</td>    <td>Col1</td>    <td>Col2</td>  </tr>  <tr>    <td>0x07</td>    <td>1</td>    <td>34</td>  </tr>  <tr>    <td>0x56</td>    <td>2</td>    <td>77</td>  </tr>  <tr>    <td>0x6A</td>    <td>3</td>    <td>5</td>  </tr>  <tr>    <td>0xF3</td>    <td>4</td>    <td>91</td>  </tr>  <tr>    <td>0x90</td>    <td>5</td>    <td>22</td>  </tr>  <tr>    <td>0x77</td>    <td>6</td>    <td>59</td>  </tr>  <tr>    <td>0xD1</td>    <td>7</td>    <td>3</td>  </tr></table><p>当前该为一张数据库表；<br>在数据库表的左侧展示的是每一条记录的一个<strong>物理地址</strong>；<br>右侧则是两列；<br>一列字段Col1是序号；<br>Col2字段数据可以认为就是主键数据；<br>数据库表结构有了，接下来查询数据；  </p><p><strong>（1）第一种情况</strong>：<br><strong>查询主键Col2为34的数据</strong>；<br>因为这个时候只存在表，<strong>没有设置索引</strong>这些方便查询的<strong>数据结构</strong>；<br>所以这个时候就会在表当中 <strong>自上而下</strong> 的进行 <strong>遍历</strong>；<br>这个时候就会去遍历到第一个，发现第一个的主键id，Col2的值就是34；此时即拿到数据；<br>这样的话 <strong>只</strong> 需要 <strong>查询一条记录</strong>；<br>而且<strong>查询第一条记录就是</strong>，那么这样的话<strong>查询速度</strong>是<strong>很快</strong>的；<br>这只是第一种情况；  </p><p><strong>（2）第二种情况</strong>：<br><strong>查询主键Col2 id为91的记录行数据</strong>；<br>那么还是需要<strong>自上而下</strong>从id为34的记录行数据开始<strong>遍历</strong>；<br>那么第一条记录不是；<br>第二条记录不是；<br>第三条记录也不是；<br>直到第四条记录的时候发现数据行id是91；<br>那么这个时候也就是需要去遍历列表4次，查询4次才能够得到结果；  </p><p><strong>（3）第三种情况</strong>：<br><strong>查询主键Col2 id为3的记录行数据</strong>；<br>这个时候再来看，如果说遍历查询的元素id是3；<br>那么这个时候依然是 <strong>从上往下</strong> 进行<strong>遍历</strong>，一直<strong>遍历到</strong>列表的<strong>最底部</strong>；<br>才能将3查找出来；那么这个时候就相当于需要进行一个<strong>全表扫描</strong>的这样一个操作；<br>对于当前该表当中只有6、7条数据；<br>但是如果在<strong>实际开发</strong>当中<strong>数据量</strong>比较<strong>大</strong>；<br>一张表当中存储了几百万上千万的记录；<br>那么这个时候如果只有表中的记录，而没有索引的话；<br>这个时候就会造成一种现象，在查找的时候<strong>从上往下</strong>进行<strong>整表扫描</strong>，所以这种<strong>查询效率</strong>是<strong>非常慢</strong>的；  </p><p>以上就是第一种情况，即<strong>没有建立索引</strong>的情况；<br><strong>查询效率很慢</strong>；  </p><p>下面分析<strong>有了索引</strong>之后，又是<strong>如何</strong>进行<strong>查找</strong>的；<br>此时有了表结构还需要对表结构当中的<strong>字段进行建立索引</strong>；<br><strong>索引就是一种数据结构</strong>；<br>那么此时就可以使用<strong>数据结构</strong>来表示这种表当中的索引；<br>这里使用一种 <strong>数据结构 二叉树</strong>；  </p><p>既然是 <strong>二叉树</strong>；<br>那么二叉树当中的第一个结点，也就是34；<br>即<strong>根节点</strong>；<br>34即作为当前该树状结构的<strong>根结点</strong>；  </p><p>接下来第二行记录是77；  </p><p>对于<strong>二叉树</strong>来说，<strong>二叉树</strong>有一个特点；<br>即当<strong>根结点已经存在</strong>的时候，<strong>再插入下一个结点</strong>；<br>则需要将 <strong>下一个结点的数值</strong>与<strong>根结点的数值</strong> 进行 <strong>比较大小</strong>；<br>如果<strong>比根结点小</strong>则放在<strong>左边</strong>，称之为生成一个<strong>左子树</strong>；<br>如果<strong>比根结点大</strong>则放在<strong>右边</strong>，称之为生成一个<strong>右子树</strong>，作为<strong>右子树</strong>存在；</p><p>这个时候77是比34要大的，所以放在34的右边，即77为34<strong>根结点</strong>的一个<strong>子节点</strong>；  </p><p>接下来第三行是5，需要对5也要进行插入到二叉树该数据结构当中，那么此时也是需要进行与34根结点进行比较的；<br>此时5比34要小；那么则放在根结点34的左边，所以此时34根结点又有一个子节点5；  </p><p>当5插入到二叉树结构当中之后，接着下一行记录91；<br>则首先将91与34根结点进行比较大小；<br>显然91比34要大，则处于根结点34的右边；  </p><p>当前使用的是<strong>二叉树</strong>的这种<strong>数据结构</strong>，也就意味着 <strong>每一个结点</strong> <strong>最多</strong> 都<strong>只能有</strong> <strong>2个分支</strong>；所以称之为<strong>二叉树</strong>；  </p><p>所以当此时34 <strong>根结点</strong> 已经有了两个分支之后，那么此时91比34大，但是34的右边已经有元素77了，所以这个时候91就需要去和77去进行比较；<br>77与91进行比较，91显然要大，所以放在77的右侧，作为77的一个<strong>右子节点</strong>存在；  </p><p>接下来是第5行记录数据集22；22比34小，显然要放在根结点的左侧；<br>但是<strong>根结点</strong>的<strong>左侧</strong>已经有<strong>左子节点</strong>也就是5；<br>那么此时22就去与5进行比较，显然22比5大；也就放在5的右边；称为5的<strong>右子结点</strong>；  </p><p>最后还剩下最后两条记录，一个是59一个是3；<br>快速过一下；59首先和34这个元素进行比较；<br>显然59比34大需要放在34的右侧；<br>然34已经有右子结点77了，那么这个时候59和77进行比较；<br>显然77大于59，那么这个时候就将59放置在77的左侧，叶子结点91的左边，成为77的左子节点；  </p><p>同理最后一个元素，3也是同样的方式；<br>3与34进行比较；显然3比34要小；<br>然此时34是存在有<strong>左子节点</strong>5的；<br>那么这个时候就将3与5进行比较；显然3比5要小；<br>那么这个时候；就把3放在5的左侧；<br>成为5的左子节点，叶子结点22的左侧；  </p><p>此时到此为止二叉树已经构建完毕；二叉树构建完毕之后再来进行分析；<br>构建了一棵二叉树之后就能够提高查询效率吗？  </p><p>（<br>我认为；<br>在二叉树一定的深度下，二叉树依然会存在查询效率慢的情况；<br>）  </p><p>二叉树构建好了之后，再来进行搜索；<br>如果按照刚才的查询情况；<br>先进行搜索34这一数值；  </p><p>搜索二叉树；那么就需要到索引的结构二叉树的数据结构当中来进行搜索；<br>在进行<strong>二叉树搜索</strong>的时候，是<strong>从根结点处开始进行查询匹配数值</strong>；<br>即树状结构当中最顶层的这一节点即为根结点；<br>最底层的结点，即3、22、59、91这四个结点称之为<strong>叶子结点</strong>；<br>那么<strong>二叉树的搜索</strong>是<strong>从根节点开始进行搜索的</strong>；  </p><p>走根结点34；这个时候就已经将34查询到了，那么这个时候就可以直接进行返回即可；<br>但是如果这一块当中查询的并不是34而是3；<br>那么此时仍然先会去搜索根结点34，将要查询搜索的值3去与根节点34进行比较；<br>发现3比根结点要小；<br>所以此时就会去根结点的左侧，即左子树当中去进行查找3；  </p><p><strong>二叉树</strong>当中<strong>根结点的左边</strong>的称之为<strong>左子树</strong>；<strong>右边</strong>则称之为<strong>右子树</strong>；  </p><p>那么在左子树当中通过3去跟根结点的左子节点5进行比较，那么此时5比3要大；<br>所以紧接着，让3去跟结点5的左子节点3去进行比较；<br>所以在这个时候就找到了3这个元素；<br>而找到了3之后，二叉树的这种数据结构是如何关联到表当中具体行数当中的具体数据的呢？<br>这个时候就需要看笔记当中提到的一句话：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</span><br></pre></td></tr></table></figure><p>那也就意味着，二叉树这种数据结构当中的每一个结点都是需要 <strong>指向</strong>具体表当中具体行数的具体数据；<br>那么从刚才的查询规律当中<strong>从上而下</strong>进行查找3，则从根结点34到左子节点5，再从5到5的左子节点3查找到了3这一元素的指向/引用即可找到在具体某表当中的具体某一行的数据；<br>那么这样的话就查找到了数据；  </p><table>  <tr>    <td>物理地址</td>    <td>Col1</td>    <td>Col2</td>  </tr>  <tr>    <td>0x07</td>    <td>1</td>    <td>34</td>  </tr>  <tr>    <td>0x56</td>    <td>2</td>    <td>77</td>  </tr>  <tr>    <td>0x6A</td>    <td>3</td>    <td>5</td>  </tr>  <tr>    <td>0xF3</td>    <td>4</td>    <td>91</td>  </tr>  <tr>    <td>0x90</td>    <td>5</td>    <td>22</td>  </tr>  <tr>    <td>0x77</td>    <td>6</td>    <td>59</td>  </tr>  <tr>    <td>0xD1</td>    <td>7</td>    <td>3</td>  </tr></table><blockquote><p>分析：<strong>没有建立索引</strong> 的表与 <strong>建立了索引</strong> 的表当中，建立了索引之后 <strong>性能</strong> 的一个 <strong>提升</strong> ；</p></blockquote><ul><li><p><strong>没有建立索引</strong> 的表：<br>在没有建立索引的情况下，如果是要进行查询数据元素3；<br>那么则需要把整张表当中所有的数据都需要进行 <strong>遍历</strong> 一遍即 <strong>全表扫描</strong> ，直到找到3这个id数据；  </p></li><li><p><strong>建立了索引</strong> 的表：<br>如果是在建立了索引的这种情况之下；<br>那么同样还是查找元素3；<br>只需要查找第一次34；第二次5；第三次3即可；三次即可；<br>那么这样的话这个时候通过 <strong>索引</strong> 由 <strong>二叉树</strong> 这种 <strong>数据结构</strong> 实现的话就 <strong>不再需要去遍历整张表的数据</strong> 了；<br>通过 <strong>二叉树</strong> 这种 <strong>数据结构</strong> 就可以 <strong>快速</strong> 的 <strong>定位</strong> 到3这个查询的数据元素；<br>那么这就是<strong>索引</strong>；<strong>索引的目的</strong> 即在于 <strong>快速</strong> 的来 <strong>查找数据</strong>；  </p></li></ul><h2 id="索引-优势和劣势"><a href="#索引-优势和劣势" class="headerlink" title="索引 - 优势和劣势"></a>索引 - 优势和劣势</h2><blockquote><p><strong>优势</strong><br>1） 类似于书籍的 <strong>目录索引</strong> ， <strong>提高数据检索的效率</strong> ， <strong>降低数据库的IO成本</strong> ；<br>2） 通过 <strong>索引列</strong> 对 <strong>数据</strong> 进行 <strong>排序</strong> ， <strong>降低数据排序的成本</strong> ，<strong>降低CPU的消耗</strong> ；  </p></blockquote><blockquote><p><strong>劣势</strong><br>1）实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录， <strong>索引列</strong> 也是要 <strong>占用空间</strong> 的；（并不放在内存当中而是 <strong>放在磁盘当中</strong> ， <strong>索引占用磁盘空间</strong> ）<br>2）虽然 <strong>索引</strong> <strong>大大提高了查询效率</strong> ，同时却也 <strong>降低</strong> 了 <strong>更新表的速度</strong> ，如对表进行 <strong>INSERT、UPDATE、DELETE</strong> （都需要 <strong>对索引进行维护</strong>，也就是相关实现该索引的数据结构当中存储的数据也要进行变动）。因为 <strong>更新表</strong> 时，MySQL不仅要 <strong>保存数据</strong> ，还要 <strong>保存</strong> 一下 <strong>索引文件</strong> 每次 <strong>更新添加</strong> 了 <strong>索引列的字段</strong> ，都会因为更新所带来的的 <strong>键值变化</strong> 后的索引信息。（所以 <strong>索引的字段并不是越多越好也会影响到性能</strong> ）  </p></blockquote><h2 id="索引-索引结构"><a href="#索引-索引结构" class="headerlink" title="索引 - 索引结构"></a>索引 - 索引结构</h2><p><strong>索引</strong> 是在MySQL的 <strong>存储引擎</strong> 层中实现的，而不是在服务器层实现的。  </p><p>所以每种存储引擎的索引都不一定完全相同；也不是所有的存储引擎都支持所有的索引类型。  </p><p>MySQL目前提供了以下4中索引：  </p><ul><li><strong>BTREE索引</strong>：最常见的索引类型，大部分索引都支持 <strong>B树索引</strong> ；</li><li><strong>HASH索引</strong>：只有 <strong>Memory引擎</strong> 支持，<br>使用场景简单（刚刚看了下我当前MySQL数据库现在InnoDB也支持HASH哦）；</li><li><strong>R-tree索引（空间索引）</strong>：<strong>空间索引</strong> 是 <strong>MyISAM引擎</strong> 的一个 <strong>特殊索引类型</strong> ，<br>主要用于 <strong>地理空间数据类型</strong> ，<br>通常使用较少，不做特别介绍；</li><li><strong>Full-text（全文索引）</strong>：<strong>全文索引</strong> 也是 <strong>MyISAM</strong> 的一个 <strong>特殊索引类型</strong>，<br>主要用于 <strong>全文索引</strong> ，</li><li><em>InnoDB*</em> 从 <strong>MySQL5.6</strong> 版本开始支持 <strong>全文索引</strong> ；  </li></ul><p>这个统计应该也有些时候了；不是一定正确的哦；<br>需要结合当前不同版本的MySQL来说明；<br>我还是贴一下吧；  </p><h3 id="MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持"><a href="#MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持" class="headerlink" title="MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持"></a>MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持</h3><table>  <tr>    <th>索引</th>    <th>InnoDB引擎</th>    <th>MyISAM引擎</th>    <th>Memory引擎</th>  </tr>  <tr>    <td>BTREE索引</td>    <td>支持</td>    <td>支持</td>    <td>支持</td>  </tr>  <tr>    <td>HASH索引</td>    <td>不支持</td>    <td>不支持</td>    <td>支持</td>  </tr>  <tr>    <td>R-tree索引</td>    <td>不支持</td>    <td>支持</td>    <td>不支持</td>  </tr>  <tr>    <td>Full-text索引</td>    <td>5.6版本之后支持</td>    <td>支持</td>    <td>不支持</td>  </tr></table><p>平常所说的索引，如果没有特别指明，都是指 <strong>B+树</strong> （ <strong>多路搜索树</strong> ，并不一定是二叉的）结构组织的索引。<br>其中 <strong>聚集索引</strong>、 <strong>复合索引</strong> 、 <strong>前缀索引</strong> 、 <strong>唯一索引</strong> 默认都是使用 <strong>B+tree树索引</strong> ，统称为 <strong>索引</strong> 。  </p><h2 id="索引-索引结构-BTREE"><a href="#索引-索引结构-BTREE" class="headerlink" title="索引 - 索引结构 - BTREE"></a>索引 - 索引结构 - BTREE</h2><p><strong>BTree</strong> 又叫做 <strong>多路平衡搜索树</strong> ，一棵 <strong>m</strong> 叉的 <strong>BTree</strong> 特性如下：  </p><ul><li><strong>树</strong> 中每个 <strong>结点</strong> <strong>最多</strong> 包含 <strong>m</strong> 个孩子；</li><li><strong>除根结点与叶子结点</strong>外，<br>每个 <strong>结点</strong> <strong>至少</strong> 有[ <strong>cell ( m / 2 )</strong> ]（cell<strong>向上取整</strong>）个 <strong>孩子</strong> ；</li><li>若<strong>根结点不是叶子结点，则至少有两个孩子</strong>；</li><li><strong>所有的叶子结点都在同一层</strong>；</li><li>每个<strong>非叶子结点</strong>由 <strong>n</strong> 个 <strong>key</strong> 与 <strong>n + 1</strong> 个<strong>指针</strong>组成，<br>其中 <strong>[cell ( m / 2 ) -1 ] &lt; = n &lt; =  m - 1</strong></li></ul><p>（对于<strong>二叉树</strong>来说，<strong>树</strong>中的每个<strong>结点</strong> <strong>最多有2个分支</strong> ）  </p><p>以5叉BTree为例（当前根结点下最多有5个分支，即每个结点下最多包含5个孩子），key的数量：公式推导[ cell ( m / 2 ) - 1 ] &lt; = n &lt; = m-1 ；所以 2 &lt; = n &lt; = 4。<br>当n&gt;4时，中间节点分裂到父节点，两边结点分裂。<br>插入 C N G A H E K Q M F W L T Z D P R X Y S 数据为例；<br>1）插入前4个字母C N G A；  </p><table border="1">  <tr>    <td>A</td>    <td>C</td>    <td>G</td>    <td>N</td>  </tr></table><p>（按照26个字母排队顺序，字母A在C前，C排在G前，G排在N前的顺序进行排列）  </p><p>2）插入H ，n &gt; 4，中间元素G字母向上分裂到新的结点；  </p><table border="1">  <tr>    <td>A</td>    <td>C</td>    <td>G</td>    <td>H</td>    <td>N</td>  </tr></table><p>所以演变成中间元素G字母向上分裂到新的结点，即G分裂到父节点；</p><table border="1"><tr>     <td colspan="5" style="text-align:center">G</td>  </tr>  <tr>    <td>A</td>    <td>C</td>    <td></td>    <td>H</td>    <td>N</td>  </tr></table><br><table border="1">  <tr>     <td></td>    <td></td>      <td></td>     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">G</td>     <td></td>     <td></td>    <td></td>  </tr>  <tr>     <td></td>    <td></td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>     <td></td>    <td></td>  </tr>  <tr>    <td colspan="8"></td>  </tr>  <tr>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C</td>    <td></td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span> N</td>  </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>新插入的H结点会在元素G之后，那么排序也就是 A C G H N 这个样子的一个排序；那么此时的中间的结点就是G元素了；那么按照规则，当n&gt;4时，中间节点分裂到父节点；此时的G元素结点就将会进行一次分裂；分裂至父节点（H插入至BTree则G分裂至父节点）；而此时两边结点进行一次分裂；也就是原本的中间元素中间节点G左边的A、C以及右边的（新插入的）H、N就将会被分裂成父节点G的两边结点；左边的A、C分裂至父节点G的左子节点；右边的H、N分裂至父节点G的右子结点；  </p><p>接下来继续进行插入操作；插入元素E；<br>插入的E首先进行跟根结点G进行比较前后顺序；比较完成之后，E应该是在根结点G的排位在前的；所以应该被放在根结点G的左侧；也就是结点A、C该侧，A、C、E这三个元素也是需要进行排出一个顺序来的，那么也就是A、C、E这样的一个顺序排列放置；插入的是左边；由于左边元素未构成5个，所以不做任何的（分裂）变化等；  </p><p>接下来再继续插入元素K；<br>在K插入元素的时候就需要拿G与K元素的前后排位顺序进行比较，K的排位顺序比G大，所以插入到根结点G的右侧，也就是H、N所在该侧；插入的是右边，即插入时也需要与H、N这两个元素相进行比较排位顺序，也就是K元素插入到H、N这两个元素的中间；那么此时右侧的元素未构成5个所以不作任何变化；  </p><p>接下来继续插入Q；<br>插入Q也是需要与根节点G相进行比较排位顺序的；得出Q是在G之后，那么就将Q放在G根节点的右侧，然后将Q进行与节点元素H、K、N相进行比较；得到排列顺序H、K、N、Q这样一个排列顺序，当然此时仍然不需要做出（分裂）变化；因为此时n并没有超过4；只有当n超过4的时候才会发生分裂的变化；分叉小于等于4的情况下并不做任何的分裂改变只进行结点元素间的大小排位；  </p><p>在此之前一直在说分裂；当前已经分裂过一次；也就是A、C、G、H、N的时候进行将G分裂至父节点；A、C结点与H、N结点进行两边结点的分裂；并且插入了三个新的元素E、K、Q；  </p><p>此时需要说明的是：  </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每个非叶子结点由 n 个 <span class="type">key</span> 与 n + <span class="number">1</span> 个指针组成，其中[ cell( m / <span class="number">2</span>) <span class="number">-1</span> ] &lt; = n &lt; = m<span class="number">-1</span></span><br></pre></td></tr></table></figure><p>n+1个指针值的就是每个结点下都有两个方块，这两个方块都是指针存储区域；<br>指针的含义：当进行插入一个元素的时候，比如说插入元素E；当插入E元素的时候会进行与根节点G进行一个前后顺序排位的一个对比；如果E比G要小；那么E元素就需要放在G的左侧，指向左侧；成为根结点当中的左子节点当中的一个；那么这个时候就由G结点的左指针指向左子节点的方向；通过左边的这个指针指向左边的这个数据块；小于G那么这个指针就指向的是小于G的这个数据块（也就是左侧的左子结点）；大于G那么指向的就是大于G的这个数据块（也就是右侧的右子结点）；  </p><p>即</p><table border="1">  <tr>    <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">G</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>  </tr>  <tr>    <td colspan="11"></td>  </tr>  <tr>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C<span style="margin-left:5px;margin-right:5px;"></span> E</td>    <td></td>    <td></td>    <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> N <span style="margin-left:5px;margin-right:5px;"></span> Q</td>  </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>接下来继续插入M元素；M与G根结点相进行比较，应该是属于在G的后面的；所以应该排放在G的右侧；通过G的右指针指向右边的数据块；M插入进来之后，应该要介于K和N之间；也就是说此时G的右子结点当中的排列顺序为H、K、M、N、Q这样一个排列顺序；这个时候就需要将M插入到K和N之间；但是当M插入到K和N之间之后，此时右子结点当中的元素已经超过了4个，即5个了；超过4个元素那么此时就要发生分裂变化，M结点刚好是中间节点；即会要发生中间节点（新插入的元素）M结点元素最终需要向上分裂到G父节点当中去，以及同时左右两边的元素H、K以及H、Q需要分裂变化成两块；  </p><p>问题：明白没有？小朋友？<br>答：明白了！(ಥ_ಥ)  </p><p>经过分裂之后再来看其指针；那么根结点当中的三个指针分别指的是；第一个指针指的是小于根节点当中的G元素则指针指向左侧第一个数据元素块A、C、E；第二个指针，则因为根节点当中存在两个元素；所以中间这个第二个指针用于大于根节点当中的G元素而小于根节点当中的M元素则指向中间的H、K的这个数据块；最后根节点当中的第三个指针用于大于根节点当中M元素的指向第三个数据元素块即N、Q；  </p><p>问题：明白？小朋友？<br>答：明白了！o(ﾟДﾟ)っ！  </p><p>当前为插入M的数据结构；  </p><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">G<span style="margin-left:5px;margin-right:5px;"></span> M</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="14"></td>  </tr>  <tr>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C<span style="margin-left:5px;margin-right:5px;"></span> E</td>    <td></td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    N <span style="margin-left:5px;margin-right:5px;"></span> Q</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>当前M插入完成之后，继续插入F、W、L、T这四个数据元素；<br>那么此时插入F、W、L、T这四个数据元素时是不需要进行分裂变化的；因为当这四个元素插入进来之后，各个数据块当中的key 结点都没有超过4；所以是不需要进行分裂变化处理的；  </p><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">G<span style="margin-left:5px;margin-right:5px;"></span> M</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="18"></td>  </tr>  <tr>    <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C<span style="margin-left:5px;margin-right:5px;"></span> E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    N <span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span> T<span style="margin-left:5px;margin-right:5px;"></span> W</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>上述F、W、L、T这四个元素插入完成之后，接着插入元素Z；<br>插入Z的时候，首先会进行与根节点的G和M相进行比较；Z元素比G、M都要大；所以就由根结点的第三个指针指向第三个数据块，也就是N、Q、T、W；走向第三个数据块时又会与第三个数据块当中的元素相进行比较得到其元素排列顺序N、Q、T、W、Z这样一个排列摆放位置；所以此时将Z插入第三个数据块当中的最后一个位置，当Z元素出现在W元素之后的时候，此时观察第三个数据库块当中的元素个数已经超过了4，即已经成为5个了，那么此时这5个元素当中中间元素需要进行向上分裂，分裂至父节点，然后其左右两边需要分裂成两个数据块；该第三个数据块当中的中间元素为T；T元素此时应当符合条件需要分裂至上一节点父节点当中去；以及T元素在分裂至父节点之前原来两边的结点需要进行分裂成两块也就是N、Q结点以及W、Z结点这两大块进行分裂开来称为单独的结点；</p><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">G<span style="margin-left:5px;margin-right:5px;"></span> M<span style="margin-left:5px;margin-right:5px;"></span> T</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="20"></td>  </tr>  <tr>    <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C<span style="margin-left:5px;margin-right:5px;"></span> E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    N <span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span>     </td>    <td></td><td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    W<span style="margin-left:5px;margin-right:5px;"></span> Z</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>当元素Z插入完成之后，接下来进行插入元素D；<br>元素D和根结点当中的G、M、T相比，显然是都小于这三者的；所以由根结点当中的第一个指针进行指向第一个数据块，也就是A、C、E、F这个数据块当中来；并且D元素需要进行与数据块元素当中的A、C、E、F这四个元素需要进行比较排序顺序大小；即通过排序顺序可得A、C、D、E、F；插入进来之后，此时该数据块当中的key元素大于4个了，即出现了5个；那么此时就需要将该数据块元素当中的那个中间元素（D作为该数据块当中的中间元素存在），也就是刚刚新插入的元素D进行向上分裂至父节点G、M、T当中去，且分裂至父节点的元素D也需要与G、M、T进行一个排序，排序得到D、G、M、T这样一个排列顺序；那么此时分裂至父节点的元素D的两边的元素同样也需要进行分裂成两个结点；即A、C与E、F进行分裂开来；<br>最终出现的数据结构：  </p><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span> G<span style="margin-left:5px;margin-right:5px;"></span> M<span style="margin-left:5px;margin-right:5px;"></span> T</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="22"></td>  </tr>  <tr>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C    </td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    N <span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span>     </td>    <td></td><td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    W<span style="margin-left:5px;margin-right:5px;"></span> Z</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>当元素D插入完成之后，接着进行插入元素P、R、X、Y；<br>插入P、R、X、Y时并不需要进行相应的变化分裂；因为插入到数据块当中元素key并没有满足 &gt; 4 的这样一个条件；所以并不需要做出分裂；  </p><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span> G<span style="margin-left:5px;margin-right:5px;"></span> M<span style="margin-left:5px;margin-right:5px;"></span> T</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="26"></td>  </tr>  <tr>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C    </td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    N<span style="margin-left:5px;margin-right:5px;"></span> P<span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span> R</td>    <td></td><td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>当插入元素P、R、X、Y这四个元素之后，接下来进行插入最后一个元素S；<br>S首先和根结点当中的是个元素D、G、M、T进行比较；显然介于M与T之间；即大于M而小于T这样一个范围；从而使得根结点的第四个指针指向第四个数据块，即N、P、Q、R这一个数据块当中；而当S插入到第四个数据块当中首先也是需要进行比较排序顺序大小的；有顺序可得；得到顺序为N、P、Q、R、S这样一个顺序排列；将S插入到该数据块当中来；此时第四个数据块当中的元素个数已经达到了5个，也就是超过了4个就需要进行分裂了；那么此时；该数据块当中的中间元素为Q；也就是Q元素需要进行向上分裂至父节点D、G、M、T该数据块当中去；以及Q元素两边的元素需要进行分裂，也就是N、P与R、S这两块分裂开来；<br>但是Q如果此时向上进行分裂，而此时父节点当中的元素对向上分裂来的Q元素进行排序得到D、G、M、Q、T；父节点插入元素Q；父节点当中的元素也达到了了5个；也需要进行分裂；其父节点当中的中间元素为M元素，则此时M元素继续向上进行分裂，则M更新称为该BTree的根节点；而M两边的元素，即D、G两元素与Q、T两元素则这两块进行分裂开来，D、G块称为根结点M的左子节点，Q、T块称为M根结点的右子结点；这就是所提到的五叉BTree结构的一个演变过程；</p><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">M</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="28"></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span>  G    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    Q <span style="margin-left:5px;margin-right:5px;"></span> T</td>         <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>      <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>      <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td colspan="28"></td>  </tr>  <tr>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C    </td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    N<span style="margin-left:5px;margin-right:5px;"></span> P</td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">R<span style="margin-left:5px;margin-right:5px;"></span> S</td>    <td></td><td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>      <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>了解了五叉BTree数据结构的一个演变过程之后回过头来再看；一棵m叉的BTree特性；<br>如果是一个五叉的BTree；<br>则：  </p><ul><li>树中每个结点最多包含m个孩子；即树中每个结点最多包含5个孩子；不能多于5个，即不能多于m个；  </li></ul><blockquote><p>举例</p></blockquote><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span> G<span style="margin-left:5px;margin-right:5px;"></span> M<span style="margin-left:5px;margin-right:5px;"></span> T</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="26"></td>  </tr>  <tr>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C    </td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    N<span style="margin-left:5px;margin-right:5px;"></span> P<span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span> R</td>    <td></td><td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><ul><li>除根结点与叶子结点外，每个结点至少有 [ cell( m / 2 )]个孩子；即每个结点至少有5/2=3（向上取整）个孩子；M为根节点；AC块、EF块、HKL块、NP块、RS块、WXYZ块为叶子结点；所以仅剩DG块与QT块非叶子结点也非根节点；这两块分别有三个字节点，DG块的孩子即AC块、EF块、HKL块；QT块的孩子即NP块、RS块、WXYZ块；  </li></ul><blockquote><p>举例</p></blockquote><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">M</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="28"></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span>  G    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    Q <span style="margin-left:5px;margin-right:5px;"></span> T</td>         <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>      <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>      <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td colspan="28"></td>  </tr>  <tr>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C    </td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    N<span style="margin-left:5px;margin-right:5px;"></span> P</td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">R<span style="margin-left:5px;margin-right:5px;"></span> S</td>    <td></td><td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>      <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><ul><li>若根结点不是叶子结点，则至少有两个孩子；</li></ul><blockquote><p>举例</p></blockquote><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">M</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="28"></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span>  G    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    Q <span style="margin-left:5px;margin-right:5px;"></span> T</td>         <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>      <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>      <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td colspan="28"></td>  </tr>  <tr>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C    </td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    N<span style="margin-left:5px;margin-right:5px;"></span> P</td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">R<span style="margin-left:5px;margin-right:5px;"></span> S</td>    <td></td><td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>      <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><ul><li>所有的叶子结点都在同一层；</li></ul><blockquote><p>举例</p></blockquote><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">M</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="28"></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span>  G    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    Q <span style="margin-left:5px;margin-right:5px;"></span> T</td>         <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>      <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>      <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td colspan="28"></td>  </tr>  <tr>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C    </td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    N<span style="margin-left:5px;margin-right:5px;"></span> P</td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">R<span style="margin-left:5px;margin-right:5px;"></span> S</td>    <td></td><td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>      <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><ul><li>每个非叶子结点由n个key与n+1个指针组成；其中[ cell( m / 2)-1] &lt; = n &lt; = m - 1；即</li></ul><p>key即指的每一个结点当中的元素；指针即用来指向数据块</p><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">G<span style="margin-left:5px;margin-right:5px;"></span> M</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="18"></td>  </tr>  <tr>    <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C<span style="margin-left:5px;margin-right:5px;"></span> E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    N <span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span> T<span style="margin-left:5px;margin-right:5px;"></span> W</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>到此已经提到了两种数据结构，一种是二叉树；一种是BTree；这两个数据结构可以拿过来相互比较一下优劣；  </p><p>BTree数据结构相对于二叉树相比；存在有多个分支；而二叉树一个结点仅仅只存在有两个结点；那么对于相同数据量来说，二叉树的数据层次，也就是二叉树的深度要更高一些；一旦层次更深也就意味着查找数据的时候；磁盘的IO的次数也就更多；从而导致查询的效率也就比较低；<br>到此，该BTree树就已经构建完成了，BTREE树和二叉树相比，查询数据的效率更高，因为对于相同的数据量来说，BTREE的层次结构相比二叉树小，因此搜索速度更快；  </p><h2 id="索引-索引结构-B-TREE"><a href="#索引-索引结构-B-TREE" class="headerlink" title="索引 - 索引结构 - B+TREE"></a>索引 - 索引结构 - B+TREE</h2><p>B+Tree为BTree的变种，B+Tree与BTree的区别为：<br>1） n叉B+Tree最多含有n个key，而BTree最多含有n-1个key；<br>2） B+Tree的叶子结点保存所有的key信息，依照key大小顺序排列；<br>3） 所有的非叶子结点都可以看做是key的索引部分；  </p><p>没有子节点的结点称之为叶子结点；叶子结点当中包含了所有key的信息；叶子结点当中的key才是完整的包含了所有的key的信息；包含了所有的数据信息；根结点当中以及非叶子结点当中的key起到的是一个索引的作用；索引就是为了查找到叶子结点当中的key；而且对于B+树来说所有的数据都是存储在叶子结点上面了；非叶子结点是不存在数据信息的；B树当中的所有数据是跟结点挂钩的；B+树当中所有的key存储在叶子结点所有的数据也都存储在叶子结点上了；<br>这也是B+树与B树的一个区别；  </p><p>B+Tree相对于BTree的一个优势：<br>由于B+Tree只有叶子结点保存key信息，查询任何key都要从root走到叶子（非叶子结点上的key都是起到一个索引的作用并没有数据，叶子结点上的key才关联着相关的数据信息），所以B+Tree的查询效率更加稳定；  </p><h2 id="索引-索引结构-MySQL中的B-Tree"><a href="#索引-索引结构-MySQL中的B-Tree" class="headerlink" title="索引 - 索引结构 - MySQL中的B+Tree"></a>索引 - 索引结构 - MySQL中的B+Tree</h2><p>MySQL索引数据结构对经典的B+Tree进行了优化。<br>在原B+Tree的基础上，增加一个指向相邻叶子结点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能；<br>问题：为什么要增加这样一个指针？<br>答：方便进行查询；  </p><blockquote><p>增加该指针的原因在于：方便进行范围搜索；  </p></blockquote><p>举例：如果想要进行搜索id为9~15的数据；由于有该指针相连所以从9一直查询链表下一结点到15即可；<br>所以该链表指针的作用主要是用来提高区间访问的性能；  </p><h2 id="索引-索引分类"><a href="#索引-索引分类" class="headerlink" title="索引 - 索引分类"></a>索引 - 索引分类</h2><p>1） 单值索引：即一个索引值包含单个列，一个表可以有多个单列索引(一个索引当中只包含一个列；比如现在需要对某一张表当中建立索引；该表当中有多个字段name、gender、age、help_category_id等字段，但是只针对name该字段该列进行建立索引；help_category_id也可以建立个索引；则当前存在两个索引，但是每个索引只对应了相对应的一列；这个叫做单列索引或者是单值索引；一个表当中可以包含有多个单列索引)<br>2） 唯一索引：索引列的值必须唯一，但允许有空值；（当前表当中某一个字段或者是某一列当中其值都是唯一的；也就是说如果存在有列当中的值都是唯一的；那么必要情况下就可以针对该列建立一个唯一索引，在唯一索引的该列当中允许包括有多个NULL值；）<br>3） 复合索引：即一个索引包含多个列（比如：经常在查询当中需要对name字段以及parent_category_id或者是说age字段进行联合查询，那么此时可以将name字段以及age字段组合起来建立一个复合索引，即一个索引当中包含了两个列或者说多个列；那么这种索引称之为复合索引）；  </p><h2 id="索引-索引语法"><a href="#索引-索引语法" class="headerlink" title="索引 - 索引语法"></a>索引 - 索引语法</h2><p>索引在创建表的时候，可以同时创建，也可以随时增加新的索引；<br>准备环境：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> demo_01 <span class="keyword">default</span> charset=utf8mb4;</span><br><span class="line"></span><br><span class="line">use demo_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">'city'</span>(</span><br><span class="line">    <span class="string">'city_id'</span> <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT;</span><br><span class="line">    <span class="string">'city_name'</span> <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">    <span class="string">'country_id'</span> <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (<span class="string">'city_id'</span>)</span><br><span class="line">)ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">'country'</span>(</span><br><span class="line">    <span class="string">'country_id'</span> <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT;</span><br><span class="line">    <span class="string">'country_name'</span> <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (<span class="string">'country_id'</span>)</span><br><span class="line">)ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'city'</span>(<span class="string">'city_id'</span>,<span class="string">'city_name'</span>,<span class="string">'country_id'</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'西安'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'city'</span>(<span class="string">'city_id'</span>,<span class="string">'city_name'</span>,<span class="string">'country_id'</span>) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'NewYork'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'city'</span>(<span class="string">'city_id'</span>,<span class="string">'city_name'</span>,<span class="string">'country_id'</span>) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'北京'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'city'</span>(<span class="string">'city_id'</span>,<span class="string">'city_name'</span>,<span class="string">'country_id'</span>) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'上海'</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'country'</span>(<span class="string">'country_id'</span>,<span class="string">'country_name'</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'China'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'country'</span>(<span class="string">'country_id'</span>,<span class="string">'country_name'</span>) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'America'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'country'</span>(<span class="string">'country_id'</span>,<span class="string">'country_name'</span>) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Japan'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'country'</span>(<span class="string">'country_id'</span>,<span class="string">'country_name'</span>) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'UK'</span>);</span><br></pre></td></tr></table></figure><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>语法：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">UNIQUE</span> | <span class="keyword">FULL</span> <span class="built_in">TEXT</span> |SPATIAL] <span class="keyword">INDEX</span> index_name</span><br><span class="line">[ <span class="keyword">using</span> index_type ]</span><br><span class="line"><span class="keyword">ON</span> tb1_name(index_col_name, .... )</span><br><span class="line"></span><br><span class="line">index_col_name : column_name[ ( <span class="keyword">length</span> ) ] [ <span class="keyword">ASC</span> | <span class="keyword">DESC</span> ]</span><br></pre></td></tr></table></figure><p>索引的类型：UNIQUE唯一索引、FULLTEXT全文索引、SPATIAL；索引类型可选；可以不进行指定；<br>index_name：索引的名称；<br>using index_type：索引所使用的哪一个类型；如果不指定；则使用，默认的索引类型即B+树索引类型；<br>ON tb1_name(index_col_name, ….)：进行指定对哪一张表的哪几个字段创建索引；  </p><p>在MySQL当中，如果当前该字段是主键的话；则默认该字段默认有一个索引叫做主键索引；  </p><p>所以此时在city表当中对city_id字段的索引不必再进行创建；可以在city_name字段上创建索引；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_city_name <span class="keyword">on</span> city(city_name);<span class="comment">#此时在city_name字段上创建的该索引为普通索引；</span></span><br></pre></td></tr></table></figure><p>示例：为city表中的city_name 字段创建索引：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_city_name <span class="keyword">on</span> city(city_name);</span><br></pre></td></tr></table></figure><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><p>语法：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> <span class="built_in">table_name</span>; #<span class="built_in">table_name</span>，索引所建立在该字段，该字段所处的表的名称</span><br></pre></td></tr></table></figure><p>示例：查看city表中的索引信息：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> city\G; <span class="comment">#\G格式化</span></span><br></pre></td></tr></table></figure><p>在MySQL当中会默认对主键city_id字段创建一个索引就称作是主键索引key_name：primary；<br>而刚刚对city_name创建的索引则为key_name：idx_city_name；<br>主键索引primary以及刚刚没有指定索引类型的idx_city_name的索引类型都是BTREE类型；即B+Tree索引，BTree索引；</p><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>语法：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> tb1_name;</span><br><span class="line"><span class="comment"># index_name索引的名称</span></span><br><span class="line"><span class="comment"># 该index_name索引所具体在的表的名称</span></span><br></pre></td></tr></table></figure><p>示例：想要删除city表上的索引[ idx_city_name ]，可以操作如下：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_city_name <span class="keyword">on</span> city;</span><br></pre></td></tr></table></figure><p>删除之后可以通过以下命令来进行查看删除的索引是否仍然存在；</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> <span class="built_in">table_name</span>\G;</span><br></pre></td></tr></table></figure><h3 id="ALTER指令"><a href="#ALTER指令" class="headerlink" title="ALTER指令"></a>ALTER指令</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># alter 修改</span></span><br><span class="line"><span class="comment"># 该语句添加一个主键，这意味着索引值必须唯一，且不能为NULL；</span></span><br><span class="line">1. <span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> primary <span class="keyword">key</span>(column_list);</span><br><span class="line"></span><br><span class="line"><span class="comment"># unique 唯一的</span></span><br><span class="line"><span class="comment"># 这条语句创建索引的值必须是唯一的（除了NULL意外，NULL可能会出现多次）</span></span><br><span class="line"><span class="comment"># Non_unique:0 #Non不，unique唯一；0：否定；双重否定等于肯定；即唯一</span></span><br><span class="line"><span class="comment"># 当创建普通索引时其Non_unique:1；即不唯一；  </span></span><br><span class="line">2. <span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> <span class="keyword">unique</span> index_name(column_list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加普通索引，索引值可以出现多次</span></span><br><span class="line">3. <span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> <span class="keyword">index</span> index_name(column_list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该语句指定了索引为FULLTEXT，用于全文索引</span></span><br><span class="line">4. <span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> fulltext index_name(column_list);</span><br></pre></td></tr></table></figure><p>示例：添加唯一索引  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> city <span class="keyword">add</span>  <span class="keyword">unique</span>  idx_city_name(city_name);</span><br></pre></td></tr></table></figure><h2 id="索引-索引设计原则"><a href="#索引-索引设计原则" class="headerlink" title="索引 - 索引设计原则"></a>索引 - 索引设计原则</h2><p>索引的设计可以遵循一些已有的原则，创建索引的时候请尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引；  </p><ul><li>对查询频次较高，且数据量比较大的表建立索引；</li><li>索引字段的选择，最佳候选列应当从where子句的条件中提取（即查询条件当中的字段），如果where子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合。</li><li>使用唯一索引，区分度越高，使用索引的效率越高；</li><li>索引可以有效的提升查询数据的效率，但是索引数量不是多多益善；索引越多，维护索引的代价自然也就水涨船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价（维护索引的数据结构），降低DML操作的效率，增加响应操作的时间消耗；另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但是无疑提高了选择的代价；</li><li>使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I/O效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，乡音的可以有效地提升MySQL访问索引的I/O效率。</li><li>利用最左前缀，N个列组合而成的组合索引，那么相当于是创建了N个索引，如果查询时where子句中使用了组成该索引的前几个字段，那么这条查询SQL可以利用组合索引来提升性能；  </li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">创建复合索引：</span><br><span class="line"></span><br><span class="line">CREATE <span class="built_in">INDEX</span> idx_name_email_status ON tb_seller(<span class="keyword">NAME</span>,email,<span class="keyword">STATUS</span>);</span><br><span class="line"></span><br><span class="line">就相当于</span><br><span class="line">      对<span class="keyword">name</span> 创建了索引；</span><br><span class="line">      对<span class="keyword">name</span> , email 创建了索引；</span><br><span class="line">      对<span class="keyword">name</span> , email , <span class="keyword">status</span> 创建了索引；</span><br><span class="line">只需要创建这么一个索引，在查询<span class="keyword">name</span>单个字段的时候就将会走索引；在查询<span class="keyword">name</span>，email这两个字段的时候也会走索引；在查询<span class="keyword">name</span>,email,<span class="keyword">status</span>这三个字段的时候也会走索引；  </span><br><span class="line">最左索引：最左指的是复合索引当中的第一个字段，只要查询的时候包含第一个字段，那么这个时候就会走索引；</span><br></pre></td></tr></table></figure><h2 id="视图-创建及修改视图"><a href="#视图-创建及修改视图" class="headerlink" title="视图 - 创建及修改视图"></a>视图 - 创建及修改视图</h2><p>视图（View）是一种虚拟存在的表。<br>视图并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。<br>通俗的讲，视图就是一条SELECT语句执行后返回的结果集。<br>所以在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。  </p><p>视图相对于普通表的又是主要包括以下几项：  </p><ul><li>简单：使用视图的用户完全不需要关心后面对应表的结构、关联条件和筛选条件，对用户来说已经是过滤好的符合条件的结果集。  </li><li>安全：使用视图的用户只能访问他们被允许查询的结果喜，对表的权限管理并不能先知道某个行某个列，但是通过视图就可以简单的实现；</li><li>数据独立：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响；</li></ul><h3 id="创建或者修改视图"><a href="#创建或者修改视图" class="headerlink" title="创建或者修改视图"></a>创建或者修改视图</h3><blockquote><p>创建视图的语法为</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">OR</span> <span class="keyword">REPLACE</span>] [ ALGORITHM = &#123; UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE &#125; ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">VIEW</span> view_name [ (column_list) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line"></span><br><span class="line">[ <span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span> ] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span> ]</span><br></pre></td></tr></table></figure><blockquote><p>修改视图的语法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> [ ALGORITHM = &#123; UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE &#125; ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">VIEW</span> view_name [ (column_list) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line"></span><br><span class="line">[ WITE [ <span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span> ] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span> ]</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">选项：</span><br><span class="line">    <span class="keyword">WITH</span> [ <span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span> 决定了是否允许更新数据使记录不在满足视图的条件；</span><br><span class="line">    <span class="keyword">LOCAL</span> 只要满足本视图的条件就可以更新</span><br><span class="line">    <span class="keyword">CASCADED</span> 必须满足所有针对该视图的所有视图的条件才可以更新（默认值）</span><br><span class="line"></span><br><span class="line">    <span class="keyword">CREATE</span> [ <span class="keyword">OR</span> <span class="keyword">REPLACE</span>] 创建或者是替换</span><br><span class="line">    <span class="keyword">AS</span> select_statement select_statement即<span class="keyword">select</span>语句</span><br></pre></td></tr></table></figure><p>示例：在视图当中展示国家以及其相关城市的信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>; <span class="comment"># 显示在该数据库下所有的表</span></span><br><span class="line">desc table_name; <span class="comment"># 显示该table_name当中的表结构</span></span><br><span class="line">desc city;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city c,country t <span class="keyword">where</span> c.country_id=t.country_id;</span><br><span class="line"><span class="keyword">select</span> c.*,t.country_name <span class="keyword">from</span> city c,country t <span class="keyword">where</span> c.country_id=t.country_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> view_city_country <span class="keyword">as</span> <span class="keyword">select</span> c.*,t.country_name <span class="keyword">from</span> city c,country t <span class="keyword">where</span> c.country_id=t.country_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> view_city_country;<span class="comment"># 查询视图与表操作一致</span></span><br><span class="line"><span class="keyword">update</span> view_city_country <span class="keyword">set</span> city_name=<span class="string">'西安市'</span> <span class="keyword">where</span> city_id=<span class="number">1</span>;<span class="comment">#修改视图与表操作一致</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city; <span class="comment"># 这个时候基础表当中的数据也会被更新掉；也就是说此时的视图修改操作是会影响到基础表当中的数据；  </span></span><br><span class="line">虽然视图能够做到更新，但是并不建议去更新数据；因为视图就是用来简化查询操作的，不建议更新视图；</span><br></pre></td></tr></table></figure><h2 id="视图-查看及删除视图"><a href="#视图-查看及删除视图" class="headerlink" title="视图 - 查看及删除视图"></a>视图 - 查看及删除视图</h2><h3 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h3><p>从MySQL5.1版本开始，使用SHOW TABLES命令的时候不仅会显示表的名字，同时也会显示视图的名字，而不存在单独显示视图的SHOW VIEWS命令。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;<span class="comment"># 显示表以及视图的名称</span></span><br></pre></td></tr></table></figure><p>同样，在使用SHOW TABLE STATUS命令的时候，不但可以显示表的信息，同时也可以显示视图的信息；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span>; <span class="comment"># 显示表以及视图的信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'city_country_view'</span>\G; <span class="comment"># 示例查看视图city_country_view</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span> view_city_country; <span class="comment"># 查看创建视图时所使用的的SQL语句是什么</span></span><br></pre></td></tr></table></figure><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><p>语法：  </p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">DROP</span> <span class="meta">VIEW</span> [ <span class="meta">IF</span> EXISTS ] view_name [, view_name ] ... [ <span class="meta">RESTRICT</span> | <span class="meta">CASCADE</span> ]</span><br></pre></td></tr></table></figure><p>示例，删除视图city_country_view:  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> city_country_view;# or <span class="keyword">DROP</span> <span class="keyword">VIEW</span> <span class="keyword">if</span> <span class="keyword">exists</span> city_country_view;</span><br></pre></td></tr></table></figure><h2 id="存储过程-概述"><a href="#存储过程-概述" class="headerlink" title="存储过程 - 概述"></a>存储过程 - 概述</h2><p>存储过程和函数是实现经过编译并存储在数据库中的一段SQL语句的集合，调用存储过程和函数可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率时有好处的。<br>存储过程和函数的区别在于函数必须有返回值，而存储过程没有；<br>函数：是一个有返回值的过程；<br>存储过程：是一个没有返回值的函数；</p><h2 id="存储过程-创建调用查询删除语法"><a href="#存储过程-创建调用查询删除语法" class="headerlink" title="存储过程 - 创建调用查询删除语法"></a>存储过程 - 创建调用查询删除语法</h2><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">procedure_name</span> <span class="params">( [proc_parameter[,.....]])</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    -- <span class="title">SQL</span>语句</span></span><br><span class="line"><span class="function"><span class="title">end</span>;</span></span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">select</span> '<span class="title">Hello</span> <span class="title">MySQL</span>';</span></span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h4 id="知识小贴士"><a href="#知识小贴士" class="headerlink" title="知识小贴士"></a>知识小贴士</h4><p>DELEMITER<br>    该关键字用来声明SQL语句的分隔符，告诉MySQL解释器，改短命令是否已经结束了，mysql是否可以执行了，默认情况下，delimiter是分号;<br>    在命令行客户端中，如果一行命令以分号结束，那么回车后，mysql将会执行该命令；</p><h3 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> procedure_name();</span><br></pre></td></tr></table></figure><h3 id="查看存储过程"><a href="#查看存储过程" class="headerlink" title="查看存储过程"></a>查看存储过程</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 查询db_name 数据库中的所有的存储过程</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> mysql.proc <span class="keyword">where</span> db=<span class="string">'db_name'</span>;</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> mysql.proc <span class="keyword">where</span> db=<span class="string">'demo_01'</span>$ #示例</span><br><span class="line"></span><br><span class="line">-- 查询存储过程的状态信息</span><br><span class="line">show <span class="function"><span class="keyword">procedure</span> <span class="title">status</span>;</span></span><br><span class="line">show <span class="function"><span class="keyword">procedure</span> <span class="title">status</span>$ # 示例</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">-- 查询某个存储过程的定义</span></span><br><span class="line"><span class="function"><span class="title">show</span> <span class="title">create</span> <span class="title">procedure</span> <span class="title">test</span>.<span class="title">pro_test1</span> \<span class="title">G</span>;</span></span><br><span class="line">show <span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test</span>\<span class="title">G</span>$ #示例</span></span><br></pre></td></tr></table></figure><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DROP <span class="function"><span class="keyword">PROCEDURE</span> [ <span class="title">IF</span> <span class="title">EXISTS</span> ] <span class="title">sp_name</span>;</span></span><br><span class="line"></span><br><span class="line">drop <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test1</span>$ # 示例</span></span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-变量"><a href="#存储过程-语法-变量" class="headerlink" title="存储过程 - 语法 - 变量"></a>存储过程 - 语法 - 变量</h2><p>存储过程是可以编程的，意味着可以使用变量，表达式，控制结构，来完成比较复杂的功能。(使得SQL具有过程化语言的处理能力)  </p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>DECLARE</li></ul><p>通过DECLARE可以定义一个局部变量，该变量的作用返回只能在BEGIN…END块中。  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE var_name[ <span class="built_in">..</span>. ]<span class="built_in"> type </span>[DEFAULT value]</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">num</span> <span class="title">int</span> <span class="title">default</span> 5;</span></span><br><span class="line">    <span class="keyword">select</span> num+ <span class="number">10</span>;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">num</span> <span class="title">int</span> <span class="title">default</span> 10;</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'num的值为'</span>,num);</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test1()$</span><br><span class="line">call pro_test2()$</span><br><span class="line"></span><br><span class="line">delimiter $</span><br></pre></td></tr></table></figure><ul><li>SET</li></ul><p>直接赋值使用SET，可以赋常量或者赋表达式，具体语法如下：  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">SET</span> var_name = expr [ , <span class="attribute">var_name</span>=expr ] <span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">pro_test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">BEGIN</span></span></span><br><span class="line"><span class="function">    <span class="title">DECLARE</span> <span class="title">NAME</span> <span class="title">VARCHAR</span><span class="params">(20)</span>;</span></span><br><span class="line">    <span class="keyword">SET</span> NAME = <span class="string">'MYSQL'</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> NAME ;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">pro_demo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">num</span> <span class="title">int</span> <span class="title">default</span> 0;</span></span><br><span class="line">    <span class="keyword">set</span> num = num +<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">select</span> num;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test3()$</span><br><span class="line">call pro_demo()$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>也可以通过 select….into 方式进行赋值操作；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_test5()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> countnum <span class="built_in">int</span>;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> countnum <span class="keyword">from</span> city;</span><br><span class="line">    <span class="keyword">select</span> countnum;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> PPROCEDURE pro_demo()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> <span class="keyword">num</span> <span class="built_in">int</span>;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> <span class="keyword">num</span> <span class="keyword">from</span> city;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'city表中的记录数为'</span>,<span class="keyword">num</span>);</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> pro_test5()$</span><br><span class="line"><span class="keyword">call</span> pro_demo()$</span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-if判断"><a href="#存储过程-语法-if判断" class="headerlink" title="存储过程 - 语法 - if判断"></a>存储过程 - 语法 - if判断</h2><h3 id="if条件判断"><a href="#if条件判断" class="headerlink" title="if条件判断"></a>if条件判断</h3><p>语法结构：  </p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> search_condition then statement_list</span><br><span class="line">      [ <span class="keyword">elseif</span> search_condition then statement_list ] ...</span><br><span class="line">      [ <span class="keyword">else</span> statementlist ]</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br></pre></td></tr></table></figure><p>需求：  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">根据定义的身高变量，判定当前身高的所属的身材类型</span><br><span class="line"></span><br><span class="line"><span class="number">180</span>及以上----------》身材高挑</span><br><span class="line"><span class="number">170</span> ~ <span class="number">180</span>----------》标准身材</span><br><span class="line"><span class="number">170</span>一下------------》一般身材</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">delimiter &amp;</span><br><span class="line">create procedure pro_test4()</span><br><span class="line">begin</span><br><span class="line">    declare height int<span class="built_in"> default </span>175;</span><br><span class="line">    declare description varchar(50)<span class="built_in"> default </span><span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> hegith &gt;= 180 then</span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'身材高挑'</span>;</span><br><span class="line">    elseif height &gt;=170 <span class="keyword">and</span> height &lt; 180 then</span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'标准身材'</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'一般身材'</span>;</span><br><span class="line">    end <span class="keyword">if</span>;</span><br><span class="line">    select concat(<span class="string">'身高'</span>,height,<span class="string">'对应的身材类型为'</span>,description);</span><br><span class="line">end$</span><br><span class="line"></span><br><span class="line">call pro_test()$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-输入参数"><a href="#存储过程-语法-输入参数" class="headerlink" title="存储过程 - 语法 - 输入参数"></a>存储过程 - 语法 - 输入参数</h2><p><strong>传递参数</strong></p><p>语法格式：  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">procedure_name</span><span class="params">([ <span class="keyword">in</span> / <span class="keyword">out</span> / inout ]参数名称 参数类型)</span></span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># <span class="title">IN</span> 该参数可以作为输入，也就是需要调用方传入值，默认</span></span><br><span class="line"><span class="function"># <span class="title">OUT</span> 该参数作为输出，也就是该参数可以作为返回值</span></span><br><span class="line"><span class="function"># <span class="title">INOUT</span> 既可以作为输入参数，也可以作为输出参数</span></span><br></pre></td></tr></table></figure><p><strong>IN - 输入</strong></p><p>需求：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据定义的身高变量，判定当前身高的所属的身材类型</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line">create procedure pro_test5(<span class="keyword">in</span> height int)</span><br><span class="line">begin</span><br><span class="line">    declare description varchar(50)<span class="built_in"> default </span><span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> hegith &gt;= 180 then</span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'身材高挑'</span>;</span><br><span class="line">    elseif height &gt;=170 <span class="keyword">and</span> height &lt; 180 then</span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'标准身材'</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'一般身材'</span>;</span><br><span class="line">    end <span class="keyword">if</span>;</span><br><span class="line">    select concat(<span class="string">'身高'</span>,height,<span class="string">'对应的身材类型为'</span>,description);</span><br><span class="line">end$</span><br><span class="line"></span><br><span class="line">call pro_test5(198)$</span><br><span class="line">call pro_test5(178)$</span><br><span class="line">call pro_test5(158)$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-输出参数"><a href="#存储过程-语法-输出参数" class="headerlink" title="存储过程 - 语法 - 输出参数"></a>存储过程 - 语法 - 输出参数</h2><p>需求：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据传入的身高变量，获取当前身高的所属的身材类型</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test5</span><span class="params">(<span class="keyword">in</span> height int ,<span class="keyword">out</span> description varchar(10)</span>)</span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="title">height</span> &gt;=180 <span class="title">then</span></span></span><br><span class="line"><span class="function">        <span class="title">set</span> <span class="title">description</span>='身材高挑';</span></span><br><span class="line">    elseif height &gt;= <span class="number">170</span> <span class="keyword">and</span> height &lt; <span class="number">180</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> description=<span class="string">'身材标准'</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">set</span> description=<span class="string">'一般身材'</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test5(<span class="number">188</span>,@description)$</span><br><span class="line"># @description 代表用户的变量；用户的会话变量</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> @description$ # 查询用户会话变量取值</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p><strong>小知识</strong><br>@description：这种变量要在变量名称前面加上“@”符号，叫做用户会话变量，代表整个会话过程它都是有作用的，这个类似于全局变量一样。<br>@@global.sort_buffer_size:这种在变量前加上“@@”，叫做系统变量；  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">set</span> <span class="variable">@name</span>=<span class="string">'itcast'</span>$</span><br><span class="line"></span><br><span class="line"><span class="literal">select</span> <span class="variable">@name</span>$</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-case结构"><a href="#存储过程-语法-case结构" class="headerlink" title="存储过程 - 语法 - case结构"></a>存储过程 - 语法 - case结构</h2><p>语法结构：  </p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">方式一：  </span><br><span class="line"><span class="keyword">CASE</span> case_value <span class="meta"># case_value 条件</span></span><br><span class="line">    <span class="keyword">WHEN</span> when_value <span class="keyword">THEN</span> statement_list <span class="meta"># statement_list SQL语句</span></span><br><span class="line">    [ <span class="keyword">WHEN</span> when_value <span class="keyword">THEN</span> statement_list ] ...</span><br><span class="line">    [ <span class="keyword">ELSE</span> statement_list ]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方拾二：  </span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">WHEN</span> search_condition <span class="keyword">THEN</span> statement_list <span class="meta"># search_condition 条件表达式；如果该表达式为真只执行THEN后的statement_list SQL语句</span></span><br><span class="line">    [ <span class="keyword">WHEN</span> search_condition <span class="keyword">THEN</span> statement_list ] ...</span><br><span class="line">    [ <span class="keyword">ELSE</span> statement_list ]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure><p>需求：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定一个月份，然后计算出所在的季度</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test7</span><span class="params">( mon int)</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">result</span> <span class="title">varchar</span><span class="params">(10)</span>;</span></span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">      when mou&gt;=<span class="number">1</span> <span class="keyword">and</span> mon &lt;=<span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> <span class="keyword">result</span>=<span class="string">'第一季度'</span>;</span><br><span class="line">      when mou&gt;=<span class="number">4</span> <span class="keyword">and</span> mon &lt;=<span class="number">6</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> <span class="keyword">result</span>=<span class="string">'第二季度'</span>;</span><br><span class="line">      when mou&gt;=<span class="number">7</span> <span class="keyword">and</span> mon &lt;=<span class="number">9</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> <span class="keyword">result</span>=<span class="string">'第三季度'</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">set</span> <span class="keyword">result</span>=<span class="string">'第四季度'</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'传递的月份为'</span>,mon,<span class="string">'， 计算出的结果为：'</span>,<span class="keyword">result</span>) <span class="keyword">as</span> content;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test7(<span class="number">7</span>)$</span><br><span class="line">call pro_test7(<span class="number">2</span>)$</span><br><span class="line">call pro_test7(<span class="number">11</span>)$</span><br><span class="line">call pro_test7(<span class="number">9</span>)$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-while循环"><a href="#存储过程-语法-while循环" class="headerlink" title="存储过程 - 语法 - while循环"></a>存储过程 - 语法 - while循环</h2><p>语法结构：  </p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> search_condition <span class="keyword">do</span> <span class="comment"># search_condition 条件成立执行循环；条件不成立则跳出循环</span></span><br><span class="line">    statement_list</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">while</span>;</span><br></pre></td></tr></table></figure><p>需求：  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算从<span class="number">1</span>加到n的值</span><br></pre></td></tr></table></figure><p>示例:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test8(n <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> total <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">declare</span> <span class="keyword">start</span> <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    while <span class="keyword">start</span> &lt;= n <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">set</span> total=total+<span class="keyword">start</span>;</span><br><span class="line">        <span class="keyword">start</span>=<span class="keyword">start</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> pro_test8(<span class="number">3</span>)$</span><br><span class="line"><span class="keyword">call</span> pro_test8(<span class="number">6</span>)$</span><br><span class="line"><span class="keyword">call</span> pro_test8(<span class="number">100</span>)$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-repeat循环"><a href="#存储过程-语法-repeat循环" class="headerlink" title="存储过程 - 语法 - repeat循环"></a>存储过程 - 语法 - repeat循环</h2><p>有条件的循环控制语句，当满足条件的时候退出循环。<br>while是满足条件才执行，repeat是满足条件就退出循环。  </p><p>语法结构：  </p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REPEAT</span></span><br><span class="line">    statement_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">UNTIL</span> search_condition</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">REPEAT</span>;</span><br></pre></td></tr></table></figure><p>需求：  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算从<span class="number">1</span>加到n的值</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test9</span><span class="params">(n int)</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">total</span> <span class="title">int</span> <span class="title">default</span> 0;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">repeat</span></span><br><span class="line">        <span class="keyword">set</span> total=total+n;</span><br><span class="line">        <span class="keyword">set</span> n=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">until</span> n=<span class="number">0</span> # 此处不加分号；加分号报错；满足当前条件则跳出循环</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test10(<span class="number">50</span>)$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-loop循环"><a href="#存储过程-语法-loop循环" class="headerlink" title="存储过程 - 语法 - loop循环"></a>存储过程 - 语法 - loop循环</h2><h3 id="loop语句"><a href="#loop语句" class="headerlink" title="loop语句"></a>loop语句</h3><p>LOOP实现简单的循环，退出循环的条件需要使用其他的语句定义，通常可以使用LEAVE语句实现，具体语法如下：  </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ begin_label: ] <span class="keyword">LOOP</span></span><br><span class="line">    statement_list</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span> [ end_label ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果不在 statement_list 中增加退出循环的语句，那么LOOP语句可以用来实现简单的死循环</p><h3 id="leave语句"><a href="#leave语句" class="headerlink" title="leave语句"></a>leave语句</h3><p>用来从标注的流程构造中退出，通常和BEGIN….END或者循环一起使用。<br>下面是一个使用LOOP和LEAVE的简单例子，退出循环；</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">pro_test10</span><span class="params">(n int)</span></span></span><br><span class="line"><span class="function"><span class="title">BEGIN</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">total</span> <span class="title">int</span> <span class="title">default</span> 0;</span></span><br><span class="line"></span><br><span class="line">    ins:<span class="keyword">LOOP</span></span><br><span class="line">        <span class="keyword">IF</span> n &lt;= <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">          leave ins;</span><br><span class="line">        <span class="keyword">ELSE</span></span><br><span class="line">          <span class="keyword">SET</span> total=total+n;</span><br><span class="line">          <span class="keyword">SET</span> n=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">LOOP</span> ins;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test10</span><span class="params">(n int)</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">total</span> <span class="title">int</span> <span class="title">default</span> 0;</span></span><br><span class="line"></span><br><span class="line">    c:<span class="keyword">loop</span></span><br><span class="line">        <span class="keyword">set</span> total=total+n;</span><br><span class="line">        <span class="keyword">set</span> n=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> n&lt;<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">            leave c; # 满足条件跳出循环</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">loop</span> c;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test10(<span class="number">100</span>)$</span><br><span class="line">call pro_test10(<span class="number">99</span>)$</span><br><span class="line">call pro_test10(<span class="number">3</span>)$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-游标介绍"><a href="#存储过程-语法-游标介绍" class="headerlink" title="存储过程 - 语法 - 游标介绍"></a>存储过程 - 语法 - 游标介绍</h2><p>游标是用来存储查询结果集的数据类型，唉存储过程和函数中可以使用光标对结果集进行循环的处理。<br>光标的使用包括光标的声明、OPEN、FETCH和CLOSE。  </p><h2 id="存储过程-语法-游标基本操作"><a href="#存储过程-语法-游标基本操作" class="headerlink" title="存储过程 - 语法 - 游标基本操作"></a>存储过程 - 语法 - 游标基本操作</h2><p>其语法分别如下：  </p><p>声明光标：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span> <span class="keyword">for</span> select_statement;</span><br></pre></td></tr></table></figure><p>OPEN光标：  </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPEN cursor_name<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>FETCH光标：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FETCH cursor_name INTO var_name [ , var_name ] <span class="string">...</span> <span class="comment"># 每抓取一次，即获取结果集当中每一行数据；调用一次指针往下指向一次；调用一次指针往下指向一次；当指针指到最后没有数据的那一行时，即此时就应该退出游标了；</span></span><br></pre></td></tr></table></figure><p>CLOSE光标：  </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLOSE cursor_name<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>示例：<br>初始化脚本:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'姓名'</span>,</span><br><span class="line">  age <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">comment</span> <span class="string">'年龄'</span>,</span><br><span class="line">  salary <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">comment</span> <span class="string">'薪水'</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="string">'id'</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">id</span>,<span class="keyword">name</span>,age,salary) <span class="keyword">values</span> (<span class="literal">null</span>,<span class="string">'金毛狮王'</span>,<span class="number">55</span>,<span class="number">3800</span>),(<span class="literal">null</span>,<span class="string">'白眉鹰王'</span>,<span class="number">60</span>,<span class="number">4400</span>),(<span class="literal">null</span>,<span class="string">'青翼蝠王'</span>,<span class="number">38</span>,<span class="number">2800</span>),(<span class="literal">null</span>,<span class="string">'素衫龙王'</span>,<span class="number">42</span>,<span class="number">1800</span>);</span><br></pre></td></tr></table></figure><p>需求：  </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询emp表中数据，并逐行获取进行显示</span></span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delimiter</span> $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test11()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> e_id <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">declare</span> e_name <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line">    decalre e_age <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">declare</span> e_salary <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">declare</span> emp_result <span class="keyword">cursor</span> fro <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> emp_result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_naem,e_age,e_salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_naem,e_age,e_salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_naem,e_age,e_salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_naem,e_age,e_salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_naem,e_age,e_salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">close</span> emp_result;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"># emp表当中只有四条数据，如果<span class="keyword">fetch</span>的次数大于表当中的数据，那么<span class="keyword">fetch</span>表中总行数依然可以打印出来，一旦<span class="keyword">fetch</span>大于表中的总行数则进行报错；</span><br><span class="line"></span><br><span class="line"># 通过<span class="keyword">fetch</span>一行一行进行抓取记录编写的效率十分低；</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> pro_test11();</span><br><span class="line"><span class="keyword">delimiter</span> ;</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-循环获取游标"><a href="#存储过程-语法-循环获取游标" class="headerlink" title="存储过程 - 语法 - 循环获取游标"></a>存储过程 - 语法 - 循环获取游标</h2><blockquote><p>循环当中，游标的fetch退出判断</p></blockquote><p>1） count(*) into num;  num –<br>2） mysql存在机制，变量，通过改变该变量取值状态及退出fetch  </p><p>示例：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delimiter</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test12()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> e_id <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    decalre e_name <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line">    decalre e_age <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    decalre e_salary <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">declare</span> has_data <span class="type">int</span> <span class="keyword">default</span> <span class="number">1</span>;#当has_data为<span class="number">1</span>时表示还有数据；当has_data为<span class="number">0</span>时表示没有数据</span><br><span class="line"></span><br><span class="line">    <span class="keyword">declare</span> emp_result <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line">    <span class="keyword">DECLARE</span> <span class="keyword">EXIT</span> <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">NOT</span> <span class="built_in">FOUND</span> <span class="keyword">set</span> has_data=<span class="number">0</span>;#退出当前游标指向程序并设置has_data为<span class="number">0</span>；此为mysql提供的一种机制；同时该句话需要声明在声明游标的下方；当游标进行<span class="keyword">fetch</span>获取不到数据的时候，此时会进行触发；</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> emp_reuslt;</span><br><span class="line"></span><br><span class="line">    repeat</span><br><span class="line">        <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_name,e_age,e_salary;</span><br><span class="line">        <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line">        <span class="keyword">until</span> has_data=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span> repeat;</span><br><span class="line">    <span class="keyword">close</span> emp_result;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> pro_test12()$</span><br><span class="line"></span><br><span class="line"><span class="keyword">delimiter</span> ;</span><br></pre></td></tr></table></figure><h2 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h2><p>语法结构：  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION function_name([ param<span class="built_in"> type </span><span class="built_in">..</span>. ])</span><br><span class="line">RETURNS type</span><br><span class="line">BEGIN</span><br><span class="line">    <span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><p>案例：<br>定义一个存储过程，请求满足条件的总记录数：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delimiter</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> count_city(countryId <span class="type">int</span>)</span><br><span class="line"><span class="keyword">returns</span> <span class="type">int</span> # 此处不需要分号</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> cnum <span class="type">int</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> count(*) <span class="keyword">into</span> cnum <span class="keyword">from</span> city <span class="keyword">where</span> country_id = countryId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cnum;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">delimiter</span> ;</span><br><span class="line"></span><br><span class="line"># 存储过程虽然没有返回值；但是依然可以返回结果；因为其参数列表当中有<span class="keyword">in</span>、<span class="keyword">out</span>（返回值）、<span class="keyword">inout</span>；存储函数能做的事情；存储过程也可以做；</span><br></pre></td></tr></table></figure><blockquote><p>调用存储函数命令</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> count_city(<span class="number">1</span>)$</span><br><span class="line"><span class="keyword">select</span> count_city(<span class="number">2</span>)$</span><br></pre></td></tr></table></figure><blockquote><p>删除存储函数命令</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop <span class="keyword">function</span> <span class="title">count_city$</span></span><br></pre></td></tr></table></figure><h2 id="触发器-介绍"><a href="#触发器-介绍" class="headerlink" title="触发器 - 介绍"></a>触发器 - 介绍</h2><p>触发器是与表有关的数据库对象，指的是在insert、update、delete之前或者之后，触发并执行触发器中定义的SQL语句集合，触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作；  </p><p>使用别名OLD和NEW来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。<br>现在触发器还只支持行级触发，不支持语句级触发。  </p><table>  <tr>    <th>触发器类型</th>    <th>NEW和OLD的使用</th>  </tr>  <tr>    <td>INSERT型触发器</td>    <td>NEW表示将要或者已经新增的数据</td>  </tr>  <tr>    <td>UPDATE型触发器</td>    <td>OLD表示修改之前的数据，NEW表示将要或者已经修改后的数据</td>  </tr>  <tr>    <td>DELETE型触发器</td>    <td>OLD表示将要或者已经删除的数据</td>  </tr></table><h2 id="触发器-创建及应用"><a href="#触发器-创建及应用" class="headerlink" title="触发器 - 创建及应用"></a>触发器 - 创建及应用</h2><h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h3><p>语法结构：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trigger_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">before</span>/<span class="keyword">after</span> <span class="keyword">insert</span>/<span class="keyword">update</span>/<span class="keyword">delete</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># before 在...之前/after 在...之后</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">on</span> tb1_name</span><br><span class="line"></span><br><span class="line">[ <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> ] <span class="comment">-- 当前操作的是一个行级触发器;oracle数据库当中既有行级触发器也有语句级的触发器；而mysql数据库当中只支持行级触发器现还不支持语句级触发器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  trigger_stmt;<span class="comment">--触发的内容</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>需求：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过触发器记录 emp表的数据变更日志，包含新增、修改、删除；</span><br></pre></td></tr></table></figure><p>示例：  </p><p>首先创建一张日志表:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_logs(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">    operation <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'操作类型，insert/update/delete'</span>,</span><br><span class="line">    operate_time datatime <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'操作时间'</span>,</span><br><span class="line">    operate_id <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'操作表的id'</span>,</span><br><span class="line">    operate_params <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">comment</span> <span class="string">'操作参数'</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="string">'id'</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>$</span><br></pre></td></tr></table></figure><p>创建insert性触发器，完成插入数据时的日志记录；  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELIMITER</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">trigger</span> emp_logs_insert_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">on</span> emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs(id,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(</span><br><span class="line">      <span class="keyword">null</span>,<span class="string">'insert'</span>,now(),<span class="built_in">new</span>.id,concat( <span class="string">'插入后 ( id：'</span>, <span class="built_in">new</span>.id , <span class="string">', name: '</span> , <span class="built_in">new</span>.name , <span class="string">' ,  age: '</span> ,  <span class="built_in">new</span>.age , <span class="string">' , salary: '</span> , <span class="built_in">new</span>.salary , <span class="string">')'</span>)</span><br><span class="line">    );</span><br><span class="line">    # 此处的<span class="built_in">new</span>.id即新插入emp表中数据的记录的id，即emp当中的id字段；</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(id,<span class="type">name</span>,age,salary) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">'光明左使'</span>,<span class="number">30</span>,<span class="number">3500</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp$</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp_logs$</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(id,<span class="type">name</span>,age,salary) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">'光明右使'</span>,<span class="number">35</span>,<span class="number">3800</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">trigger</span> emp_logs_update_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">update</span></span><br><span class="line"><span class="keyword">on</span> emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs(id,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(</span><br><span class="line">      <span class="keyword">null</span>,<span class="string">'update'</span>,now(),<span class="built_in">new</span>.id,</span><br><span class="line">      concat( </span><br><span class="line">        <span class="string">'修改前 ( id：'</span>, <span class="built_in">old</span>.id ,</span><br><span class="line">        <span class="string">',name: '</span> , <span class="built_in">old</span>.name ,</span><br><span class="line">        <span class="string">',age: '</span> ,  <span class="built_in">old</span>.age ,</span><br><span class="line">        <span class="string">',salary: '</span> , <span class="built_in">old</span>.salary ,</span><br><span class="line">        <span class="string">') 修改后( id：'</span>, <span class="built_in">new</span>.id ,</span><br><span class="line">        <span class="string">',name: '</span> , <span class="built_in">new</span>.name ,</span><br><span class="line">        <span class="string">',age: '</span> ,  <span class="built_in">new</span>.age ,</span><br><span class="line">        <span class="string">',salary: '</span> , <span class="built_in">new</span>.salary ,</span><br><span class="line">        <span class="string">')'</span>  </span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">    # 此处的<span class="built_in">new</span>.id即新插入emp表中数据的记录的id，即emp当中的id字段；</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> age=<span class="number">39</span> <span class="keyword">where</span> id=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp$</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp_logs$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">trigger</span> emp_logs_delete_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span> emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs(id,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(</span><br><span class="line">      <span class="keyword">null</span>,<span class="string">'delete'</span>,now(),<span class="built_in">old</span>.id,</span><br><span class="line">      concat(</span><br><span class="line">        <span class="string">'删除前( id：'</span>, <span class="built_in">old</span>.id ,</span><br><span class="line">        <span class="string">',name: '</span> , <span class="built_in">old</span>.name ,</span><br><span class="line">        <span class="string">',age: '</span> ,  <span class="built_in">old</span>.age ,</span><br><span class="line">        <span class="string">',salary: '</span> , <span class="built_in">old</span>.salary ,</span><br><span class="line">        <span class="string">')'</span>  </span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp$</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp_logs$</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp$</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp_logs$</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELIMITER</span> ;</span><br></pre></td></tr></table></figure><h2 id="触发器-查看及删除"><a href="#触发器-查看及删除" class="headerlink" title="触发器 - 查看及删除"></a>触发器 - 查看及删除</h2><h3 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h3><p>语法结构：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> [ <span class="built_in">schema_name</span>.] trigger_name</span><br></pre></td></tr></table></figure><p>如果没有指定schema_name，默认为当前数据库。</p><h3 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h3><p>可以通过执行SHOW TRIGGERS 命令查看触发器的状态、语法等信息。<br>语法结构：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> triggers;</span><br><span class="line"></span><br><span class="line"># Event 触发器监听的事件 <span class="keyword">INSERT</span>/<span class="keyword">UPDATE</span>/<span class="keyword">DELETE</span></span><br><span class="line"># <span class="keyword">Table</span> 对于哪一张表监听的触发器</span><br><span class="line"># <span class="keyword">Timing</span> 触发器是前置触发<span class="keyword">BEFORE</span>还是后置触发<span class="keyword">AFTER</span></span><br><span class="line"># <span class="keyword">Statement</span> 触发器定义</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;观看笔记：&lt;a href=&quot;https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://fengshana.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MySQL" scheme="https://fengshana.github.io/tags/MySQL/"/>
    
      <category term="数据库优化" scheme="https://fengshana.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
    
      <category term="笔记" scheme="https://fengshana.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Git工作流学习笔记</title>
    <link href="https://fengshana.github.io/2020/05/27/%E3%80%90GIT%E3%80%91/%E3%80%90GIT%E3%80%91Git%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AD%A6%E4%B9%A0/"/>
    <id>https://fengshana.github.io/2020/05/27/%E3%80%90GIT%E3%80%91/%E3%80%90GIT%E3%80%91Git%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-05-27T10:34:59.148Z</published>
    <updated>2020-05-29T11:36:51.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git工作流指南-分布式版本控制系统"><a href="#Git工作流指南-分布式版本控制系统" class="headerlink" title="Git工作流指南 分布式版本控制系统"></a>Git工作流指南 分布式版本控制系统</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1dW411U7ER?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1dW411U7ER?p=1</a><br>老师笔记： <a href="http://www.funtl.com/zh/git/" target="_blank" rel="noopener">http://www.funtl.com/zh/git/</a>  </p><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><ul><li>什么是<strong>版本控制系统</strong></li><li>什么是<strong>Git</strong></li><li>如何<strong>安装Git</strong></li></ul><h3 id="什么是版本控制系统"><a href="#什么是版本控制系统" class="headerlink" title="什么是版本控制系统"></a>什么是版本控制系统</h3><h4 id="为什么需要版本控制"><a href="#为什么需要版本控制" class="headerlink" title="为什么需要版本控制"></a>为什么需要版本控制</h4><p>在软件开发过程中，每天都会产生新的代码，<strong>代码合并</strong>的过程中可能会出现如下<strong>问题</strong>：  </p><ul><li><strong>代码覆盖或丢失</strong>；</li><li>代码写的不理想，希望<strong>还原</strong>之前的<strong>版本</strong>；</li><li>希望知道与之前<strong>版本的差别</strong>；</li><li>是<strong>谁</strong>修改了代码以及<strong>为什么</strong>修改；</li><li><strong>发版</strong>时希望分成<strong>不同的版本</strong>（测试版本、发行版本等）；</li></ul><p>因此，希望有一种<strong>机制</strong>，能够帮助我们：  </p><ul><li>可以<strong>随时回滚</strong>到之前的<strong>版本</strong>；</li><li>协同开发时，<strong>不会覆盖</strong>别人的代码；</li><li>留下<strong>修改记录</strong>，以便随时查看；</li><li><strong>发版</strong>时可以方便的管理<strong>不同的版本</strong>；</li></ul><h4 id="什么是版本控制系统-1"><a href="#什么是版本控制系统-1" class="headerlink" title="什么是版本控制系统"></a>什么是版本控制系统</h4><p>一个标准的<strong>版本控制系统</strong> <strong>Version Control System（VCS）</strong>，通常需要有以下功能：  </p><ul><li>能够<strong>创建Repository</strong>（<strong>仓库</strong>），用来<strong>保存代码</strong>；</li><li>协同开发时，方便将<strong>代码分发</strong>给团队成员；</li><li><strong>记录</strong>每次<strong>修改</strong>代码的内容、时间、原因等<strong>信息</strong>；</li><li>能够<strong>创建Branch（分支）</strong>，可以根据<strong>不同的场景</strong>进行<strong>开发</strong>；</li><li>能够<strong>创建Tag（标签）</strong>，<strong>建立</strong>项目<strong>里程碑</strong>；</li></ul><h4 id="版本控制系统的发展史"><a href="#版本控制系统的发展史" class="headerlink" title="版本控制系统的发展史"></a>版本控制系统的发展史</h4><p><strong>版本控制系统</strong>发展至今有几种<strong>不同的模式</strong>：  </p><h5 id="Local-VCS"><a href="#Local-VCS" class="headerlink" title="Local VCS"></a>Local VCS</h5><p><strong>本地</strong>使用 <strong>复制/粘贴</strong> 的方式进行管理，<strong>缺点</strong>是<strong>无法协同开发</strong></p><h5 id="Gentralized-VCS（Lock，悲观锁）"><a href="#Gentralized-VCS（Lock，悲观锁）" class="headerlink" title="Gentralized VCS（Lock，悲观锁）"></a>Gentralized VCS（Lock，悲观锁）</h5><p><strong>中央集中式版本控制系统</strong>团队共用仓库，当某人需要编辑文件时，<strong>进行锁定，以免其他人同时编辑时造成冲突</strong>，但不是很方便，<strong>其他人需要排队才能编辑文件，如果有人编辑了很久或是忘记解锁会造成其他人长时间等待</strong>的情况；  </p><p>如何理解悲观锁：总有刁民想害朕。<br>我要是面试这么答，会怎么样？  </p><h5 id="Gentralized-VCS（Merge，乐观锁）"><a href="#Gentralized-VCS（Merge，乐观锁）" class="headerlink" title="Gentralized VCS（Merge，乐观锁）"></a>Gentralized VCS（Merge，乐观锁）</h5><p><strong>中央集中式版本控制系统</strong>团队共用仓库，<strong>不采用悲观锁方式来避免冲突</strong>，而是时候发现如果别人也修改相同文件（冲突），再<strong>进行手动修改解决</strong>。  </p><p>有很多VCS属于这种类型，如：CVS、<strong>Subversion</strong>、Perforce等；  </p><p><strong>中央集中式版本控制系统</strong>的共同问题是，做<strong>任何操作都需要和服务器同步</strong>，如果<strong>服务器宕机则会造成无法继续工作的窘迫</strong>；  </p><p>如何理解乐观锁：天网恢恢疏而不漏。<br>我想给自己两锤子；  </p><h5 id="Distributed-VCS"><a href="#Distributed-VCS" class="headerlink" title="Distributed VCS"></a>Distributed VCS</h5><p><strong>分布式版本控制系统</strong>，<strong>本地</strong>也<strong>拥有完整的代码仓库</strong>，就不会出现上述集中式管理的问题，即使<strong>没有网络，依然可以commit和看log</strong>，也<strong>无需担心服务器同步</strong>问题；  </p><p>如：<strong>Git</strong>、Mercurial、Bazaar等就属于<strong>分布式版本控制系统</strong>。<strong>缺点</strong>是<strong>功能比较复杂</strong>，上手需要一定的学习时间；  </p><p>（<strong>分布式版本控制系统</strong>都有一个<strong>本地化</strong>的这样一个概念；<strong>区块链系统</strong>也能称之为一个<strong>分布式系统</strong>）  </p><h2 id="Git工作流"><a href="#Git工作流" class="headerlink" title="Git工作流"></a>Git工作流</h2><p><strong>Git工作流</strong>：<strong>代码管理</strong>的<strong>工作流程、方式</strong>  </p><ul><li><strong>Git工作流</strong>简介</li><li><strong>集中式工作流</strong></li><li><strong>功能分支工作流</strong></li><li><strong>GitFlow工作流</strong></li><li><strong>Forking工作流</strong></li><li><strong>Pull Requests</strong></li></ul><h3 id="Git工作流简介"><a href="#Git工作流简介" class="headerlink" title="Git工作流简介"></a>Git工作流简介</h3><p>工作流有各式各样的用法，但也正因此使得在实际工作中如何上手使用增加了难度。  </p><p>这篇指南通过总览公司团队中最常用的集中Git工作流让大家可以上手使用；  </p><p>在阅读的过程中请记住，本文中的集中工作流是作为方案指导而不是条例规定，在展示了各种工作流可能的用法后，可以从不同的工作流中挑选或揉合出一个满足自己需求的工作流；  </p><h4 id="集中式工作流"><a href="#集中式工作流" class="headerlink" title="集中式工作流"></a>集中式工作流</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXyIW2ezMoDhUXO*s5pTGue2N753CPNKcE42sPIP6l3d0rpu2DZjcGmC.Kga3cDUruqQwuWnPoetw.KevCfGSm5U!/r" alt="集中式工作流"></p><p>如果开发团队成员已经很熟<strong>Subversion</strong>，<strong>集中式工作流</strong>让你无需去适应一个全新流程就可以体验Git带来的收益。  </p><p>这个工作流也可以作为向更Git风格工作流迁移的友好过渡。  </p><p>（个人、三五个人的小团队）  </p><h4 id="功能分支工作流"><a href="#功能分支工作流" class="headerlink" title="功能分支工作流"></a>功能分支工作流</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX.QLkS1nyIjv6HHWnbV4dX7srariw7MEQpLi1gOAxL3ou18PqhQZr1mrBrEaIbVs5JuQWzjNbAd8lfxuJK8OGPM!/r" alt="功能分支工作流"></p><p><strong>功能分支工作流</strong>以<strong>集中式工作流</strong>为<strong>基础</strong>，不同的是为<strong>各个新功能</strong>分配<strong>一个专门的分支</strong>来开发。  </p><p>这样可以在把新功能继承到正式项目前，用<strong>Pull  Requests</strong>的方式<strong>讨论变更</strong>；  </p><p>（达到约12个人的团队）  </p><h4 id="Git-Flow工作流"><a href="#Git-Flow工作流" class="headerlink" title="Git Flow工作流"></a>Git Flow工作流</h4><p><strong>Git Flow工作流</strong>通过为<strong>功能开发</strong>、<strong>发布准备</strong>和<strong>维护分配独立的分支</strong>，让<strong>发布迭代</strong>过程<strong>更顺畅</strong>。  </p><p>严格的分支模型也为大型项目提供了一些非常必要的结构。  </p><p>（整个公司，这么一个团队的规模）  </p><h4 id="Forking工作流"><a href="#Forking工作流" class="headerlink" title="Forking工作流"></a>Forking工作流</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7NQkdqkFQWuuELLHKCcql5ABKaPDZFUejww*HH9qtsi8qr7IlATkqBkQ9PV1LJ9rT6faqWzcfgS3pJZnzLSzVg!/r" alt="Forking工作流"></p><p>Forking工作流是分布式工作流，充分利用了Git在分支和克隆上的优势。  </p><p>可以安全可靠地管理大团队的开发者（developer），并能接受不信任贡献者（contributor）的提交。  </p><p>（跨国合作。跨国团队的使用，一般用于Forking工作流）  </p><h4 id="Pull-Requests"><a href="#Pull-Requests" class="headerlink" title="Pull Requests"></a>Pull Requests</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXzYbgZ.02.6Smac50apszMyWGwg89uQEVJSVU01e69u2Dts1al5lueZ4HgBrr.WyV.0GtO*ZTdT3LpQtilbX2Vk!/r" alt="Pull Requests"></p><p><strong>功能分支工作流</strong>、<strong>GitFlow工作流</strong>、<strong>Forking工作流</strong>都会穿插一个<strong>Pull Requests</strong>的一个东西。  </p><p><strong>Pull Requests</strong>通常称为<strong>请求合并</strong>（<strong>Merge Pull Requests</strong>）；  </p><p><strong>Pull Requests</strong>让开发者更<strong>方便地进行协作</strong>的功能，提供了友好的Web界面可以在提议的修改合并到正式项目之前对修改进行讨论。  </p><p>（相当于一个评论系统）；</p><h3 id="集中式工作流-1"><a href="#集中式工作流-1" class="headerlink" title="集中式工作流"></a>集中式工作流</h3><p>转到<strong>分布式版本控制系统</strong>看起来像个令人生畏的任务，但不改变已用的工作流你也可以用上Git带来的收益。  </p><p>团队可以用和Subversion完全不变的方式来开发项目。  </p><p>但使用Git加强开发的工作流，<strong>Git比SVN有几个优势</strong>。  </p><p><strong>（1）</strong> 首先，每个开发者可以有属于自己的整个<strong>工程的本地拷贝</strong>。隔离的环境让各个开发者的工作和项目的其他部分（修改）独立开来——-即自由地提交到自己的本地仓库，先完全忽略上游的开发，直到方便的时候再把修改反馈上去。  </p><p><strong>（2）</strong> 其次，<strong>Git</strong>提供了<strong>强壮的分支和合并模型</strong>。不像SVN，Git的分支设计成可以作为一种用来在仓库之间集成代码和分享修改的 <strong>【失败安全】</strong> 的<strong>机制</strong>。  </p><h4 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX58rubGqwbukXS4rvP.hcw8vVDFpcMEKyanOzFC60vYY7EfnKsFaNa8DYFcGkpbCkTOCu8b0QXObUxn8ABvZn4U!/r" alt="工作方式"></p><p>像<strong>Subversion</strong>一样，<strong>集中式工作流</strong>以<strong>中央仓库</strong>作为项目<strong>所有修改的单点实体</strong>。  </p><p>相比SVN缺省的开发分支trunk，Git叫做master，所有修改提交到这个分支上。  </p><p>该工作流只用到master这一个分支。  </p><p>开发者开始先克隆中央仓库。  </p><p>在自己的项目拷贝中，像SVN一样的编辑文件和提交修改；  </p><p>但修改是存在本地的，和中央仓库完全隔离的；  </p><p>开发者可以把和上游的同步延后到一个方便时间点；  </p><p>要发布修改到正式项目中，开发者要把本地master分支的修改【推（push）】到中央仓库中。  </p><p>这相当于svn  commit操作，但push操作会把所有还不在中央仓库的本地提交都推上去。  </p><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7NAq94egRJ5nBPO8Co87th*P0cTdtAGYXp43mklxBxvhd73.i5d8Lm58WdsFYNrarV7XZaiqfrmkd3gUFAFW0o!/r" alt="解决冲突"></p><p>中央仓库代表了正式项目，所以提交历史应该被尊重且是稳定不变的。  </p><p>如果开发者本地的提交历史和中央仓库有分歧，Git会拒绝push提交否则会覆盖已经在中央库的正式提交。  </p><p>在开发者提交自己功能修改到中央库前，需要先fetch在中央库的新增提交，rebase自己提交到中央库提交历史之上。  </p><p>这样做的意思是在说，【我要把自己的修改加到别人已经完成的修改上。】最终的结果是一个完美的线性历史，就像以前的SVN的工作流中一样；  </p><p>如果本地修改和上游提交有冲突，Git会暂停rebase过程，给你手动解决冲突的机会。  </p><p>Git解决合并冲突，用和生成提交一样的git  status和git add命令，很一致方便。  </p><p>还有一点，如果解决冲突时遇到麻烦，Git可以很简单中止整个rebase操作，重来一次（或者让别人来帮助解决）。  </p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>一起逐步分解来看看一个常见的小团队如何用这个工作流来协作的。  </p><p>有两个开发者小明和小红，看他们是如何开发自己的功能并提交到中央仓库上的。  </p><h5 id="有人先初始化好中央仓库"><a href="#有人先初始化好中央仓库" class="headerlink" title="有人先初始化好中央仓库"></a>有人先初始化好中央仓库</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX9UbT3uXKi44e*o.QOIDNJOk403REJAlPsZkIyST70GEweXbAbks3cFR7TqiVMFHAtTg9MXSvYT6HSyIH1eLii4!/r" alt="有人先初始化好中央仓库"></p><p>第一步，有人在服务器上创建好中央仓库。  </p><p>如果是新项目，可以初始化一个空仓库；否则要导入已有的Git或SVN仓库。  </p><p>中央仓库应该是个裸仓库（bare repository），即没有工作目录（working directory）的仓库。  </p><h5 id="所有人克隆中央仓库"><a href="#所有人克隆中央仓库" class="headerlink" title="所有人克隆中央仓库"></a>所有人克隆中央仓库</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX8lXRlkamDF*h*SxpL42PuUsH4aIULseTwL66K.p5pWkVzGz*Bh8Nih.I7qaVf43t7zoP8GGUp44vHNS*NRccIY!/r" alt="所有人克隆中央仓库"></p><p>下一步，各个开发者创建整个项目的本地拷贝。  </p><p>通过git clone命令完成。  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span>  <span class="title">https</span>://github.com/path/to/repo.git</span><br></pre></td></tr></table></figure><p>基于后续会持续和克隆的仓库做交互的假设，克隆仓库时Git会自动添加远程别名origin指回【父】仓库。  </p><p>github即git的中央仓库；版本控制系统有一个版本仓库。  </p><p>github上public即开源，公开的意思，代码开源。  </p><p>如果是私有private则需要进行CreditCard 信用卡支付相应的金额；收费；  </p><h5 id="小明开发功能"><a href="#小明开发功能" class="headerlink" title="小明开发功能"></a>小明开发功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX3cSXX6681Ge8WeUymk3FFjspNtDVB3t7XeHuVufMD05ZhJzX9OyWJDCYAlloD65QJLNRkDaLpYfFLKjESAA0SM!/r" alt="小明开发功能"></p><p>在小明的本地仓库中，他使用标准的Git过程开发功能：编辑、暂存（Stage）和提交。  </p><p>如果你不熟悉暂存区（Stageing Area），这里说明一下：暂存区的用来准备一个提交，但可以不用把工作目录中所有的修改内容都包含进来。  </p><p>这样可以创建一个高度聚焦的提交，尽管本地修改很多内容。  </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status <span class="comment"># 查看本地仓库的修改状态</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> <span class="comment"># 暂存文件</span></span></span><br><span class="line">git commit <span class="comment"># 提交文件</span></span><br></pre></td></tr></table></figure><p>请记住，因为这些命令生成的是本地提交，小明可以按自己需求反复操作多次，而不用担心中央仓库有了什么操作。  </p><p>对需要多个更简单更原子分块的大功能，这个做法是很有用的；  </p><h5 id="小红开发功能"><a href="#小红开发功能" class="headerlink" title="小红开发功能"></a>小红开发功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX3AhXN0w*Kh7FwIloQiq3PMOUwp*anqXsBqPo.yaxL1hWnR.kZm*XseG5RhBNtuoS8.PVSKuKSdHEw1x7MixOxA!/r" alt="小红开发功能"></p><p>与此同时，小红在自己的本地仓库中用相同的编辑、暂存和提交过程开发功能。  </p><p>和小明一样，她也不关心中央仓库有没有新提交；当然更不关心小明在他的本地仓库中的操作，因为所有本地仓库都是私有的。  </p><h5 id="小明发布功能"><a href="#小明发布功能" class="headerlink" title="小明发布功能"></a>小明发布功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX2DDMKOOXZiA6a0j82260kNXKGqba7MbMMt5OmvuzTfK3A*Lxszb8CTdFEjjZXvIDOZez3cKxhQHt2dZMB.G9S4!/r" alt="小明发布功能"></p><p>一旦小明完成了他的功能开发，会发布他的本地提交到中央仓库中，这样其他团队成员可以看到他的修改。  </p><p>他可以用下面的git push  命令：  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><p>注意，origin是小明克隆仓库时Git创建的远程中央仓库别名。  </p><p>master参数告诉Git推送的分支。  </p><p>由于中央仓库自从小明克隆以来还没有被更新过，所以push操作不会有冲突，成功完成。  </p><h5 id="小红试着发布功能"><a href="#小红试着发布功能" class="headerlink" title="小红试着发布功能"></a>小红试着发布功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX49Hssuuk2yHbmsbkSdUuOtLRbTxRlP3xEORKm5txDWaExKbZyYnyzyBD0oDqcjETeUWkabVFxZpo*3gs9yQWHs!/r" alt="小红试着发布功能"></p><p>一起来看看在小明发布修改后，小红push修改会怎么样？  </p><p>她使用完全一样的push命令：  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><p>但她的本地历史已经和中央仓库有分歧了，Git拒绝操作并给出下面很长的出错消息：  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">error: failed <span class="keyword">to</span> push some refs <span class="keyword">to</span> <span class="string">'/path/to/repo.git'</span></span><br><span class="line">hin<span class="variable">t:</span> Updates were rejected because the tip of your current branch <span class="keyword">is</span> behind</span><br><span class="line">hin<span class="variable">t:</span> its remote counterpart. Merge the remote <span class="keyword">changes</span>(<span class="keyword">e</span>.g. <span class="string">'git pull'</span>)</span><br><span class="line">hin<span class="variable">t:</span> before pushing again.</span><br><span class="line">hin<span class="variable">t:</span> See the <span class="string">'Note about fast-forwards'</span> in <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>这避免了小红覆写正式的提交。  </p><p>她要先pull小明的更新到她本地仓库合并上她的本地修改后，再重试。  </p><h5 id="小红在小明的提交之上rebase"><a href="#小红在小明的提交之上rebase" class="headerlink" title="小红在小明的提交之上rebase"></a>小红在小明的提交之上rebase</h5><p>小红用git pull 合并上游的修改到自己的仓库中。  </p><p>这条命令类似svn update ——-拉取所有上游提交命令到小红的本地仓库，并尝试和她本地修改合并。  </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="comment">--rebase origin master</span></span><br></pre></td></tr></table></figure><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXyi6Y8l5sb1aRwQRlb0CiRDNdgM9NZtfk5D41PvfJEccriZP3FT6WnQ4PWKvEqz*e7LpBOfcXui.l9nUXAPUgd4!/r" alt="images"></p><p>–rebase 选项告诉Git把小红的提交移到同步了中央仓库修改后的master分支的顶部；  </p><p>如果忘了加这个选项，pull操作仍然可以完成，但每次pull操作要同步中央仓库别人修改时，提交历史会以一个多余的【合并提交】结尾。  </p><p>对于集中式工作流，最好是使用rebase而不是生成一个合并提交。  </p><h5 id="小红解决合并冲突"><a href="#小红解决合并冲突" class="headerlink" title="小红解决合并冲突"></a>小红解决合并冲突</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7FxPBYYYsKKPOWXqC*0rCPhZKJRqU86pJwCJIVi3g31ZcpHEH2b76upvPK6lrEAQ9UWa9VqeFjlEC4dX2PAHTw!/r" alt="小红解决合并冲突"></p><p>rebase操作过程是把本地提交一次一个地迁移到更新了的中央仓库master分支之上，这意味着可能要解决在迁移某个提交时出现的合并冲突，而不是解决包含了所有提交的大型合并时所出现的冲突。  </p><p>这样的方式让你尽可能保持每个提交的聚焦和项目历史的整洁。  </p><p>反过来，简化了哪里引入Bug的分析，如果有必要，回滚修改也可以做到对项目影响最小。  </p><p>如果小红和小明的功能是相关的，不大可能在rebase过程中有冲突。  </p><p>如果有，Git在合并有冲突的提交出暂停rebase过程，输出下面的信息并带上相关的指令：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CONFLICT</span> (content): Merge <span class="keyword">conflict</span> <span class="keyword">in</span></span><br></pre></td></tr></table></figure><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX5fiCqpawh2bvFoyuusAOSGHKu5sc59EGgvKP1aVmHVmey3BEhEwMSvuvtOXh1oSZU1zNvf5QV2G*SN2a1sgwiA!/r" alt="images"></p><p>Git 很赞的一点是，任何人可以解决他自己的冲突。  </p><p>在这个例子中，小红可以简单的运行 git status 命令来查看哪里有问题。  </p><p>冲突文件列在 Unmerged paths（未合并路径）一节中：  </p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Unmerged paths：</span><br><span class="line"><span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">use</span> <span class="string">"git reset HEAD &lt;some-file&gt;..."</span> <span class="variable">to</span> <span class="variable">unstage</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">use</span> <span class="string">"git add/rm &lt;some-file&gt;..."</span> <span class="variable">as</span> <span class="variable">appropriate</span> <span class="variable">to</span> <span class="variable">mark</span> <span class="variable">resolution</span>)</span></span></span><br><span class="line">#</span><br><span class="line"># both modified:&lt;some-file&gt;</span><br></pre></td></tr></table></figure><p>接着小红编辑这些文件。  </p><p>修改完成后，用老套路暂存这些文件，并让git rebase 完成剩下的事情：  </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span></span><br><span class="line"><span class="bash">git rebase --<span class="built_in">continue</span></span></span><br></pre></td></tr></table></figure><p>要做的就这些了。  </p><p>Git会继续一个一个的合并后面的提交，如其他的提交有冲突就重复这个过程。  </p><p>如果你碰到了冲突，但是发现搞不定，不要惊慌。  </p><p>只要执行下面这条命令，就可以回到你执行git pull –rebase命令前的样子：  </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase <span class="comment">--abort</span></span><br></pre></td></tr></table></figure><h5 id="小红成功发布功能"><a href="#小红成功发布功能" class="headerlink" title="小红成功发布功能"></a>小红成功发布功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX0kBnWeNL8ejRYU6ro4.2u6jfdf4WmDKrAtmoAnmJ9TQ4sDBTQl0i3xlqRsJMoYZns72c0lo3zm5ObKWH4CoUG0!/r" alt="小红成功发布功能"></p><p>小红完成和中央仓库的同步之后，就能成功发布她的修改了。  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>如你所见，仅仅使用几个Git命令，就可以模拟出传统Subversion开发环境。  </p><p>对于要从SVN迁移过来的团队来说这太好了，但是没有发挥出Git分布式本质的优势。  </p><p>如果你的团队适应了集中式工作流，但想要更流畅的协作效果，绝对值得探索一下功能分支工作流的收益。  </p><p>通过为一个功能分配一个专门的分支，能够做到一个新增功能集成到正式项目之前对新功能进行深入讨论。  </p><h3 id="功能分支工作流-1"><a href="#功能分支工作流-1" class="headerlink" title="功能分支工作流"></a>功能分支工作流</h3><p>一旦玩转了集中式工作流，在开发过程中可以很简单地加上功能分支，用来鼓励开发者之间协作和简化交流。  </p><p>功能分支工作流背后的核心思路是所有的功能开发应该在一个专门的分支，而不是在master分支上。  </p><p>这个隔离可以方便多个开发者在各自的功能上开发而不会弄乱主干代码。  </p><p>另外，也保证了master分支的代码一定不会是有问题的，极大有利于集成环境。  </p><p>功能开发隔离也让pull  requests工作流成为可能， pull requests工作流能为每一个分支发起一个讨论，在分支合入正式项目之前，给其它开发者有表示赞同的机会。  </p><p>另外，如果你在功能开发中有问题卡出了，可以开一个pull Requests来向同学们征求建议。  </p><p>这些做法的重点就是，pull Requests让团队成员之间互相评论工作变成非常方便！  </p><h4 id="工作方式-1"><a href="#工作方式-1" class="headerlink" title="工作方式"></a>工作方式</h4><p>功能分支工作流仍然用中央仓库，并且master分支还是代表了正式项目的历史。  </p><p>但不是直接提交本地历史到各自的本地master分支，开发者每次在开始新功能前先创建一个新分支。  </p><p>功能分支应该有个描述性的名字，比如 animated-menu-items 或者  issue-#1061，这样可以让分支有个清楚且高聚焦的用途。  </p><p>在master分支和功能分支之间，Git是没有技术上的区别，所以开发者可以用和集中式工作流完全一样的方式编辑、暂存和提交修改到功能分支上。  </p><p>另外，功能分支也可以（且应该）push到中央仓库中。  </p><p>这样不修改正是代码就可以和其他开发者分享提交的功能。  </p><p>由于master仅有的一个【特殊】分支，在中央仓库上存在多个功能分支不会有任何问题。  </p><p>当然这样做也可以很方便地备份各自的本地提交。  </p><h4 id="Pull-Requests-1"><a href="#Pull-Requests-1" class="headerlink" title="Pull Requests"></a>Pull Requests</h4><p>功能分支除了可以隔离功能的开发，也使得通过 Pull Requests讨论变更称为可能。  </p><p>一旦某个开发完成一个功能，不是立即合并到master，而是push到中央仓库的功能分支上并发起一个Pull Requests的请求去合并并修改到master。  </p><p>在修改成为主干代码之前，这让其他的开发者有机会先去Review变更。  </p><p>Code Review是Pull Requests的一个重要的收益。  </p><p>但是pull Requests目的是讨论代码一个通用方式。  </p><p>你可以把Pull  Requests作为专门给某个分支的讨论。  </p><p>这意味着可以在更早的开发过程中就可以进行Code Review。  </p><p>比如，一个开发者开发功能需要帮助时，要做的就是发起一个Pull Requests，相关的人就会自动收到通知，在相关的提交旁边能看到需要帮助解决的问题。  </p><p>一旦Pull  Requests被接受了，发布功能要做的就和集中式工作流就很像了。  </p><p>（1）首先，确定本地的master分支和上游的master分支是同步的。  </p><p>（2）然后合并功能分支到本地master分支，并push已经更新的本地master分支到中央仓库。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>下面的示例演示了如何把Pull Requests作为Code Review的方式，但注意Pull Requests可以用于很多其他的目的。  </p><h5 id="小红开始开发一个新功能"><a href="#小红开始开发一个新功能" class="headerlink" title="小红开始开发一个新功能"></a>小红开始开发一个新功能</h5><p>在开始开发功能之前，小红需要一个独立的分支。  </p><p>使用下面的命令新建一个分支。  </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b </span><span class="keyword">marys-feature </span>master</span><br></pre></td></tr></table></figure><p>这个命令检出一个基于master名为marys-feature的分支，Git的-b选项表示如果分支还不存在则新建分支。  </p><p>这个新分支上，小红按照老套路编辑、暂存和提交修改，按需要提交以实现功能：  </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span>  <span class="string">status</span></span><br><span class="line"><span class="attr">git</span> <span class="string">add</span></span><br><span class="line"><span class="attr">git</span> <span class="string">commit</span></span><br></pre></td></tr></table></figure><h5 id="小红要去吃个午饭"><a href="#小红要去吃个午饭" class="headerlink" title="小红要去吃个午饭"></a>小红要去吃个午饭</h5><p>（两个人、多个人同时开发，称之为协同开发）  </p><p>仓库：github、码云、码市、gitlab  </p><p>review 代码审核；  </p><p>早上小红为新功能添加了一些提交。  </p><p>去吃午饭前，push功能分支到中央仓库是很好的做法，这样可以方便地备份，如果和其他开发协作，也让他们可以看到小红的提交。  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> marys-<span class="built_in">feature</span></span><br></pre></td></tr></table></figure><p>这条命令  push marys-feature 分支到中央仓库（origin），-u选项设置本地分支去跟踪远程对应的分支。  </p><p>设置好跟踪的分支后，小红就可以使用git push 命令省去指定推送分支的参数。  </p><h5 id="小红完成功能开发"><a href="#小红完成功能开发" class="headerlink" title="小红完成功能开发"></a>小红完成功能开发</h5><p>小红吃完午饭回来，完成整个功能的开发。  </p><p>在合并到master之前，她发起一个Pull Requests让团队的其他人知道功能已经完成。  </p><p>但是首先，她要确认中央仓库中已经有她最近的提交。  </p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><p>然后，在她的Git GUI客户端中发起Pull Request，请求合并marys-feature到master，团队成员会自动收到通知。  </p><p>Pull Request很酷的是可以在相关的提交旁边显示评注，所以你可以很对某个变更集提问。  </p><h5 id="小黑收到Pull-Request"><a href="#小黑收到Pull-Request" class="headerlink" title="小黑收到Pull  Request"></a>小黑收到Pull  Request</h5><p>小黑收到Pull Request后会查看marys-feature的修改。  </p><p>决定在合并到正式项目前是否要做些修改，且通过Pull Request和小红来回的讨论。  </p><h5 id="小红再做修改"><a href="#小红再做修改" class="headerlink" title="小红再做修改"></a>小红再做修改</h5><p>要在做修改，小红用和功能第一个迭代完全一样的过程。  </p><p>编辑、暂存、提交并push更新到中央仓库。  </p><p>小红这些活动都会显示在Pull Request上，小黑可以断续做评注。  </p><p>如果小黑有需要，也可以把marys-feature分支拉到本地，自己来修改，他加的提交也会一样显示在Pull Request上。  </p><h5 id="小红发布她的功能"><a href="#小红发布她的功能" class="headerlink" title="小红发布她的功能"></a>小红发布她的功能</h5><p>一旦小黑可以接受Pull Request，就可以合并功能到稳定项目代码中（可以由小黑或者是小红来做这个操作）：  </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout master</span></span><br><span class="line"><span class="attr">git</span> <span class="string">pull</span></span><br><span class="line"><span class="attr">git</span> <span class="string">pull origin marys-feature</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push</span></span><br></pre></td></tr></table></figure><p>无论谁来做合并，首先要检出master分支并确认它是最新的。  </p><p>然后执行 git pull origin marys-feature 合并 marys-feature 分支到已经和远程一直的本地 master分支。  </p><p>你可以使用简单 git merge marys-feature命令，但是前面的命令可以保证总是最新的新功能分支。  </p><p>最后更新的master分支要重新push回到origin。  </p><p>这个过程常常会生成一个和并提交。  </p><p>有些开发者喜欢有合并提交。  </p><p>因为它像一个新功能和原来代码基线的连通符。  </p><p>但如果你偏爱线性的提交历史，可以在执行合并rebase新功能到master分支的顶部，这样生成一个快进（fast-forward）的合并。  </p><p>一些GUI客户端只要点一下【接受】按钮执行好上面的命令来自动化Pull Request接受过程。  </p><p>如果你的不能这样，至少在功能合并到master分子后自动关闭Pull Request。  </p><h5 id="与此同时，小明在做和小红一样的事情"><a href="#与此同时，小明在做和小红一样的事情" class="headerlink" title="与此同时，小明在做和小红一样的事情"></a>与此同时，小明在做和小红一样的事情</h5><p>当小红和小黑在marys-feature上工作并讨论她的Pull  Request的时候，小明在自己的功能分支上做完全一样的事情。  </p><p>通过隔离功能能到独立的分支上，每个人都可以自主的工作，当然必要的时候在开发者之间分享变更还是比较繁琐的。  </p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>到了这里，但愿你发现了功能分支可以很直接地在集中式工作流的仅有的master分支上完成多功能的开发。  </p><p>另外，功能分支还使用了Pull Request，使得可以在你的版本控制GUI客户端中讨论某个提交。  </p><p>功能分支工作流是开发项目异常灵活的方式。  </p><p>问题是，有时候太灵活了。  </p><p>对于大型团队，常常需要给不同分支分配一个更具体的角色。  </p><p>GitFlow工作流是管理功能开发、发布准备和维护的常用模式。  </p><h3 id="GitFlow工作流"><a href="#GitFlow工作流" class="headerlink" title="GitFlow工作流"></a>GitFlow工作流</h3><p>在实际开发当中，可能通常使用GitFlow工作流。  </p><p>GitFlow工作流定义了一个围绕项目发布的严格分支模型。  </p><p>虽然比功能分支工作流复杂几分，但是提供了一个用于健壮的用于管理大型项目的框架。  </p><p>GitFlow工作流没有用超出功能分支工作流的概念和命令。  </p><p>而是为不同的分支分配了一个很明确的角色，并定义分支之间如何交互和什么时候进行交互。  </p><p>除了使用功能分支，在做准备、维护和记录发布也是用各自的分支。  </p><p>当然你可以用上功能分支工作流所有的好处：Pull Request、隔离实验性开发和更高效的工作。  </p><h4 id="工作方式-2"><a href="#工作方式-2" class="headerlink" title="工作方式"></a>工作方式</h4><p>GitFlow工作流仍然用中央仓库作为所有开发者的交互中心。  </p><p>和其他工作流一样，开发者在本地工作并push分子到中央分支去。  </p><h5 id="历史分支"><a href="#历史分支" class="headerlink" title="历史分支"></a>历史分支</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX0DucqArpSZN8V1mN.Djx7WchltIFUxePFkxo0wF6tL9hJ92GPpyK1meBHYC6jQnh92Uk6*6zENCWbjq21uqLsI!/r" alt="历史分支"></p><p>相对使用仅有的一个master分支，GitFlow工作流使用两个分支来记录项目的历史。  </p><p>master分支存储了正式发布的历史，而develop分支作为功能的集成分支，这样也方便master分支上的所有提交分配一个版本号。  </p><p>剩下要说明的问题就是围绕这两个分支的区别展开。  </p><h5 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX4suzD8O2OoWbYPwQ150IFWgQS3qSKoLWdglLxIjfri4eWAHC*W6m9OYJM0vFH4CxIhXiOdTBQYoWLsUJ3d8M.k!/r" alt="功能分支"></p><p>每个新功能位于一个自己的分支，这样可以push到中央仓库以备份和协作。  </p><p>但是功能分支不是从master分支上拉出新分支，而是使用develop分支作为父分支。  </p><p>当新功能完成时，合并会develop分支。  </p><p>新功能提交应该从不直接与master分支交互。  </p><p>开源软件基本上是使用GitFlow来做代码版本管理的控制。  </p><p>注意，从各种含义和目的上来看，功能分支加上develop分支就是功能分支工作流的用法。  </p><p>但是GitFlow工作流没有在这里止步。  </p><h5 id="发布分支"><a href="#发布分支" class="headerlink" title="发布分支"></a>发布分支</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX1K5y5ivKrS*rhk3l.NtQVVaNHmKMdlqKelqYaRENh70*1X*IrEmFCJIhfs5U7wXELfZbYI1tihPDOGBwBPqt6E!/r" alt="发布分支"></p><p>一旦develop分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从develop分支上fork一个发布分支。  </p><p>新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上——-这个分支只应该叫Bug修复、文档生成或其他面向发布任务。  </p><p>一旦对外发布的工作都完成了，发布分支合并到master分支并飞配一个版本号打好Tag。  </p><p>另外，这些新建发部分之以来做的修改要合并回develop分支。  </p><p>使用一个用于发布准备的专门分支，使得一个团队可以在完善当前的发布版本的同时，另一个团队可以继续开发下个版本的功能。  </p><p>这也打造定义良好的开发阶段（比如，可以很轻松的说，【这周我们要做准备发布版本4.0】，并且在仓库的目录结构中可以实际看到）  </p><p>常用的分支约定：  </p><ul><li>用于新建发布分支的分支：develop</li><li>用于合并的分支：master</li><li>分支命名：release- 或 release/</li></ul><h5 id="维护分支"><a href="#维护分支" class="headerlink" title="维护分支"></a>维护分支</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX8qfvx9q8UhYcwpU4tSoxZoCzp2TGnchoEgJnBAd**ejGrSWx7H1n1RbZFVAdVlD7v3kEO6EHjpPFNMCD9pabTQ!/r" alt="维护分支"></p><p>维护分支或者说是热修复（hotfix）分支用于生成快速给产品发布版本（production release）打补丁，这是唯一可以从master分支fork出来的分支。  </p><p>修复完成，修改应该马上合并回master分支和develop分支（当前的发部分支），master分支应该用新的版本号打好Tag。  </p><p>为了Bug修复使用专门分支，让团队可以处理问题而不用打断其他工作或者是等待下一个发布循环。  </p><p>你可以把维护分支想成是一个直接在master分支上处理的临时发布。  </p><p>即hotfix，维护的是v1.0.0—&gt;v1.0.1这种；<br>第三位数修改的是Bug（hotfix维护版本第三位数）；第二位数修改的是功能（功能分支维护的是版本的第二位数）；第一位为大架构改变的时候进行修改（维护版本的第一位数）；  </p><p>GitFlow从这点上就可以与语义化规范牵扯上联系；  </p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p>下面的示例演示本工作流如何用于管理单个发布循环。  </p><p>假设你已经创建了一个中央仓库。  </p><h5 id="创建开发分支"><a href="#创建开发分支" class="headerlink" title="创建开发分支"></a>创建开发分支</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX4Xsg92Awirp0bThQ4n*YW8UWB.U5*XFBFsn5hkNOcst0hBz.q1uwuu*KDADM.W9naZBQq8eKQyo4iLkzk28e1g!/r" alt="创建开发分支"></p><p>第一步为master分支配套一个develop分支。  </p><p>简单来做可以本地创建一个空的develop分支，push到服务器上：  </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>develop</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>-u origin master</span><br></pre></td></tr></table></figure><p>以后这个分支将会包含了项目的全部历史。  </p><p>而master分支将只包含部分历史。  </p><p>其他开发者这时应该克隆中央仓库，建好develop分支的跟踪分支：  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">ssh</span>://user@host/path/to/repo.git</span><br><span class="line">git checkout -b develop origin/develop</span><br></pre></td></tr></table></figure><p>现在每个开发都有了这些历史分支的本地拷贝。  </p><h5 id="小红和小明开始开发新功能"><a href="#小红和小明开始开发新功能" class="headerlink" title="小红和小明开始开发新功能"></a>小红和小明开始开发新功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX2X16EiSaoizI9a2HRgo6HRlddb*dD0yGRzorFtrKInoqDMveDkX4.ujU1ZgrgxXoZf1vY83YLzd6Dl2YO5SDUc!/r" alt="小红和小明开始开发新功能"></p><p>这个示例中，小红和小明开始各自的功能开发。  </p><p>他们需要为各自的功能创建相应的分支。  </p><p>新分支不是基于master分支，而是应该基于develop分支：  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="built_in">some</span>-<span class="built_in">feature</span> develop</span><br></pre></td></tr></table></figure><p>他们用老套路添加提交到各自功能分支上：编辑、暂存、提交；  </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">status</span></span><br><span class="line"><span class="attr">git</span> <span class="string">add</span></span><br><span class="line"><span class="attr">git</span> <span class="string">commit</span></span><br></pre></td></tr></table></figure><h5 id="小红完成功能开发-1"><a href="#小红完成功能开发-1" class="headerlink" title="小红完成功能开发"></a>小红完成功能开发</h5><p>添加了提交后，小红觉得她的功能OK了。  </p><p>如果团队使用Pull Requests，这时候可以发起一个用于合并到develop分支。  </p><p>否则她可以直接合并到她本地的develop分之后push到中央仓库：  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="built_in">origin</span> develop</span><br><span class="line">git checkout develop</span><br><span class="line">git merge <span class="built_in">some</span>-<span class="built_in">feature</span></span><br><span class="line">git <span class="built_in">push</span></span><br><span class="line">git branch -d <span class="built_in">some</span>-<span class="built_in">feature</span></span><br></pre></td></tr></table></figure><p>第一条命令在合并功能前确保develop分支是最新的。  </p><p>注意，功能绝不应该直接合并到master分支。  </p><p>冲突解决方法和集中式工作流一样。  </p><h5 id="小红开始准备发布"><a href="#小红开始准备发布" class="headerlink" title="小红开始准备发布"></a>小红开始准备发布</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXxm6aYd1gMGOxylETc6cDcj7kTwBnGuyoyzYDL7pNxxvtXeo*D5bCxnVfWE*k.cQe8O4lhgkHo2zR.IIDII1kmA!/r" alt="小红开始准备发布"></p><p>这个时候小明正在实现他的功能。  </p><p>小红开始准备她的第一个项目正式发布（发布分支也叫预发布分支，预发布分支基于develop，只有预发布版本分支才能够去合并到master分支，而预发布版本是经过测试人员测试之后的没有问题的一个版本；master分支代码必须可以执行，没有被污染）。  </p><p>像功能开发一样，她用一个新的分支来做发布准备。  </p><p>这一步也确定了发布的版本号：  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b release<span class="number">-0.1</span> develop</span><br></pre></td></tr></table></figure><p>这个分支是清理分支、执行所有测试、更新文档和其他为下个发布做准备操作的地方，像是一个专门用于改善发布的功能分支。  </p><p>只要小红创建的这个分支push到中央仓库，这个发布就是功能冻结的。  </p><p>任何不在develop分支中的新功能都推到下一个发布循环中。  </p><h5 id="小红完成发布"><a href="#小红完成发布" class="headerlink" title="小红完成发布"></a>小红完成发布</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXx2fdZ*.CxsTwPMg235DDXkchbPbk7hNVec6.FIcmcf72k0vjzhdQvVlYt8u8ao*65n3gyQAyN5GOxndJKhwiNk!/r" alt="小红完成发布"></p><p>一旦准备好了对外发布，小红合并修改到master分支和develop分支上，删除发布分支。  </p><p>合并回develop分支很重要，因为在发布分支中已经提交的更新需要在后面的新功能中也要是可用的。  </p><p>另外，如果小红的团队要求Code  Review，这是一个发起Pull Request的理想时机。  </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout master</span></span><br><span class="line"><span class="attr">git</span> <span class="string">merge release-0.1</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push</span></span><br><span class="line"><span class="attr">git</span> <span class="string">checkout develop</span></span><br><span class="line"><span class="attr">git</span> <span class="string">merge release-0.1</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push</span></span><br><span class="line"><span class="attr">git</span> <span class="string">branch -d release-0.1</span></span><br></pre></td></tr></table></figure><p>发布分支是作为功能开发（develop分支）和对外发布（master分支）间的缓冲。  </p><p>只要有合并到master分支，就应该打好Tag以方便跟踪。  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> <span class="number">0.1</span> -m <span class="string">"Initial public release"</span> <span class="literal">master</span></span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p>Git有提供各种钩子（hook），即仓库有时间发生时触发执行的脚本。  </p><p>可以配置一个钩子，在你push中央仓库的master分支时，自动构建好对外发布。  </p><h5 id="最终用户发现Bug"><a href="#最终用户发现Bug" class="headerlink" title="最终用户发现Bug"></a>最终用户发现Bug</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXzsQH1hJotlrx1khR6EZ0dUlyxkaf9L1Yi66Fs6sohYE0UTifJNygNHa*okiIgZc5dg2qSXBW*VyQGtiyMr0yo8!/r" alt="最终用户发现Bug"></p><p>对外发布后，小红回去和小明一起做下个发布的新功能开发，直到有最终用户开了一个Ticket抱怨当前版本的一个Bug。  </p><p>为了处理Bug，小红（或者小明）从master分支上来去了一个维护分支（hotfix），提交修改以解决问题，然后直接合并回master分支：  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b issue-<span class="comment">#001 master</span></span><br><span class="line"><span class="comment"># Fix the bug</span></span><br><span class="line">git checkout <span class="literal">master</span></span><br><span class="line">git merge issue-<span class="comment">#001</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>就像发布分支，维护分支中新加这些重要修改需要包含到develop分支中，所以小红要执行一个合并操作，然后就可以安全地删除这个分支了：  </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout develop</span></span><br><span class="line"><span class="attr">git</span> <span class="string">merge issue-#001</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push</span></span><br><span class="line"><span class="attr">git</span> <span class="string">branch -d issue-#001</span></span><br></pre></td></tr></table></figure><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>到了这里，但愿你对集中式工作流、功能分支工作流和GitFlow工作流已经感觉很舒适了。  </p><p>你应该也牢固的掌握了本地仓库的潜能，push/pull模式和Git健壮的分支和合并模型。  </p><p>记住，这里演示的工作流只是可能用法的例子，而不是在实际工作中使用Git不可违逆的条例。  </p><p>所以不要畏惧按自己需要对工作流的用法做取舍，不变的目标就是让Git为你所用。  </p><p>（在整个GitFlow工作流当中，只会去进行省略功能分支Feature，Master、HotFix、Release、Develop是必不可少的分支，以便控制每一次版本的迭代）  </p><h3 id="Forking工作流-1"><a href="#Forking工作流-1" class="headerlink" title="Forking工作流"></a>Forking工作流</h3><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX2qjPC0eDN.Xf29HcBYoAsTtpBFvJhu8qPVkh5cv575QWLsHx3q8JbFYK3X5cts.Zn43gkCjc7OzyBcDFaNdl.g!/r" alt="Forking工作流"></p><p>Forking工作流和前面讨论的几种工作流有根本的不同。  </p><p>这种工作流不是适用单个服务器端仓库作为【中央】代码基线，而让各个开发者都有一个服务端仓库。  </p><p>这意味着各个代码贡献者有2个Git仓库而不是1个：一个本地私有的，另一个服务端公开的。  </p><p>Forking工作流的一个主要优势是，贡献的代码可以被集成，而不需要所有人都能push代码到仅有的中央仓库中。  </p><p>开发者push到自己的服务端仓库，而只有项目维护者才能push到正式仓库。  </p><p>这样项目维护者可以接受任何开发者的提交，但无需给他正式代码库的写权限。  </p><p>效果就是一个分布式的工作流，能为大型、自发性的团队（包括了不受信的第三方）提供灵活的方式来安全的写作。  </p><p>也让这个工作流称为开源项目的理想工作流。  </p><h4 id="工作方式-3"><a href="#工作方式-3" class="headerlink" title="工作方式"></a>工作方式</h4><p>和其他的Git工作流一样，Forking工作流要先有一个公开的正式仓库存储在服务器上，但一个新的开发者想要在项目上工作时，不是直接从正式仓库克隆，而是fork正式项目在服务器上创建一个拷贝。  </p><p>这个仓库拷贝作为他人公开仓库—–其他开发者不允许push到这个仓库，但可以pull到修改（后面很快就会看到这点很重要）。  </p><p>在创建了自己服务端拷贝之后，和之前的工作流一样，开发者执行git clone命令克隆仓库到本地机器上，作为私有的开发环境。  </p><p>要提交本地修改时，push提交到自己公开仓库中——-而不是正式仓库中。  </p><p>然后，给正式仓库发起一个pull request，让项目维护者知道有更新已经准备好可以集成了。  </p><p>对于贡献的代码，pull request也可以很方便地作为一个讨论的地方。  </p><p>为了集成功能到正式代码库，维护者pull贡献者的变更到自己的本地仓库中，检查变更以确保不会让项目出错，合并变更到自己本地的master分支，然后push master分支到服务器的正式仓库中。  </p><p>到此，贡献的提交成为了项目的一部分，其他的开发者应该执行pull操作与正式仓库同步自己本地仓库。  </p><h5 id="正式仓库"><a href="#正式仓库" class="headerlink" title="正式仓库"></a>正式仓库</h5><p>在Forking工作流中，【官方】仓库的叫法只是一个约定，理解这点很重要。  </p><p>从技术上来看，各个开发者仓库和正式仓库在Git卡那里没有任何区别。  </p><p>事实上，让正式仓库之所以正式的唯一原因是他是项目维护者的公开仓库。  </p><h5 id="Forking工作流的分支使用方式"><a href="#Forking工作流的分支使用方式" class="headerlink" title="Forking工作流的分支使用方式"></a>Forking工作流的分支使用方式</h5><p>所有的个人公开仓库实际商只是为了方便和其他的开发者共享分支。  </p><p>各个开发者应该用分支隔离各个功能，就像功能分支工作流和GitFlow工作流一样。  </p><p>唯一的区别是这些分支被共享了。  </p><p>在Forking工作流中这些分支会被pull到另一个开发者的本地仓库中，而在功能分支工作流和GitFlow工作流中是直接被push到正式仓库当中。  </p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><h5 id="项目维护者初始化正式仓库"><a href="#项目维护者初始化正式仓库" class="headerlink" title="项目维护者初始化正式仓库"></a>项目维护者初始化正式仓库</h5><p>和任何使用Git项目一样，第一步还是创建在服务器上一个正式仓库，让所有团队成员都可以访问到。  </p><p>通常这个仓库也会作为项目维护者的公开仓库。  </p><p>公开仓库应该是裸仓库，不管是不是正式代码库。  </p><p>所以项目维护者会运行像下面的命令来搭建正式仓库：  </p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh user<span class="symbol">@host</span></span><br><span class="line">git init --bare /path/<span class="keyword">to</span>/repo.git</span><br></pre></td></tr></table></figure><p>Bitbucket和Stash提供了一个方便的GUI客户端已完成上面命令行做的事。  </p><p>这个搭建中央仓库的过程和前面提到的工作流完全一样。  </p><p>如果有现存的代码库，维护者也要push到这个仓库中。  </p><h5 id="开发者fork正式仓库"><a href="#开发者fork正式仓库" class="headerlink" title="开发者fork正式仓库"></a>开发者fork正式仓库</h5><p>其他所有的开发需要fork正式仓库。  </p><p>可以用git clone命令用SSH协议连通到服务器，拷贝仓库到服务器另一个位置—–是的，fork操作基本上就只是一个服务端的克隆。  </p><p>Bitbucket和Stash上可以点一下按钮就让开发者完成仓库的fork操作。  </p><p>这一步完成后，每个开发都在服务端有一个自己的仓库。  </p><p>和正式仓库一样，这些仓库应该是裸仓库。  </p><h5 id="开发者克隆自己fork出来的仓库"><a href="#开发者克隆自己fork出来的仓库" class="headerlink" title="开发者克隆自己fork出来的仓库"></a>开发者克隆自己fork出来的仓库</h5><p>下一步，各个开发者要克隆自己的公开仓库，用熟悉的git clone命令。  </p><p>在这个示例中，假定用Bitbucket托管了仓库。  </p><p>记住，如果这样的话各个开发者需要有各自的Bitbucket账号，使用下面命令克隆服务端自己的仓库。  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://user@bitbucket.org/user/repo.git</span><br></pre></td></tr></table></figure><p>相比前面介绍的工作流只用了一个origin远程别名指向中央仓库，Forking工作流需要2个远程别名——-一个指向正式仓库，另一个指向开发者自己的服务端仓库。  </p><p>别名的名字可以任意命名，常见的约定是使用origin作为远程克隆的仓库的别名（这个别名会在运行git clone自动创建），upstream（上游）作为正式仓库的别名。  </p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span> upstream https://bitbucket<span class="meta">.org</span>/maintainer/repo</span><br></pre></td></tr></table></figure><p>需要自己用上面的命令创建upstream别名。  </p><p>这样可以简单地保持本地仓库和正式仓库的同步更新。  </p><p>注意，如果上游仓库需要认证（比如不是开源的），你需要提供用户：  </p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span> upstream https://user@bitbucket<span class="meta">.org</span>/maintainer/repo</span><br></pre></td></tr></table></figure><p>这时在克隆和pull正式仓库时，需要提供用户的密码。  </p><h5 id="开发者开发自己的功能"><a href="#开发者开发自己的功能" class="headerlink" title="开发者开发自己的功能"></a>开发者开发自己的功能</h5><p>在刚克隆的本地仓库中，开发者可以向其他工作流一样的编辑代码、提交修改和新建分支：  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="built_in">some</span>-<span class="built_in">feature</span></span><br><span class="line">// Edit <span class="built_in">some</span> code</span><br><span class="line">git commit -a -m <span class="string">"Add first draft of some feature"</span></span><br></pre></td></tr></table></figure><p>所有的修改都是私有的直到push到自己公开仓库中。  </p><p>如果正式项目已经向前走了，可以用git pull命令获得新的提交：  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull upstream <span class="literal">master</span></span><br></pre></td></tr></table></figure><p>由于开发者应该都在专门的功能分支上工作，pull操作结果会都是快进合并。  </p><h5 id="开发者发布自己的功能"><a href="#开发者发布自己的功能" class="headerlink" title="开发者发布自己的功能"></a>开发者发布自己的功能</h5><p>一旦开发者准备好了分享新功能，需要做两件事。  </p><p>（1）首先，通过push他的贡献代码到自己的公开仓库中，让其他的开发者都可以访问到。他的origin远程别名应该已经有了，所有要做的就是：  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span>  <span class="built_in">feature</span>-branch</span><br></pre></td></tr></table></figure><p>这里和之前的工作流的差异是，origin远程别名指向开发者自己的服务端仓库，而不是正式仓库。  </p><p>（2）第二件事，开发者要通知项目维护者，想要合并他的新功能到正式库中。Bitbucket和Stash提供了Pull Request按钮，弹出个表单让你指定哪个分支要合并到正式仓库。一般你会想集成你的功能分支到上游远程仓库的master分支中。  </p><h5 id="项目维护者集成开发者的功能"><a href="#项目维护者集成开发者的功能" class="headerlink" title="项目维护者集成开发者的功能"></a>项目维护者集成开发者的功能</h5><p>当项目维护者收到pull request时，他要做的是决定是否集成它到正式代码库中。  </p><p>有两种方式来做：  </p><ul><li>直接在pull request中查看代码</li><li>pull代码到他自己的本地仓库，再手动合并</li></ul><p>第一种做法更简单，维护者可以在GUI中查看变更的差异，做评注和执行合并。  </p><p>但如果出现了合并冲突，需要第二种做法来解决。  </p><p>这种情况下，维护者需要从开发者的服务端仓库中fetch功能分支，合并到他本地的master分支，解决冲突：  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch https:<span class="regexp">//</span>bitbucket.org<span class="regexp">/user/</span>repo feature-branch</span><br><span class="line"><span class="regexp">//</span>查看变更</span><br><span class="line">git checkout master</span><br><span class="line">git merge FETCH_HEAD</span><br></pre></td></tr></table></figure><p>变更集成到本地的master分支后，维护者要push变更到服务器上的正式仓库，这样其他的开发者都能访问到：  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><p>注意，维护者的origin是指向他自己公开仓库的，即是项目的正式代码库。  </p><p>到此，开发者的贡献完全集成到了项目中。  </p><h5 id="开发者和正式仓库做同步"><a href="#开发者和正式仓库做同步" class="headerlink" title="开发者和正式仓库做同步"></a>开发者和正式仓库做同步</h5><p>由于正式代码库往前走了，其他的开发需要和正式仓库做同步：  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull upstream <span class="literal">master</span></span><br></pre></td></tr></table></figure><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p>如果你之前是使用SVN，Forking工作流可能看起来像是一个激进的范式切换（paradigm shift）。  </p><p>但是不要害怕，这个工作流实际上就是在功能分支工作流之上引入了另一个抽象层。  </p><p>不是直接通过单个中央仓库来分享分支，而是把贡献代码发布到开发者自己的服务端仓库中。  </p><p>示例中解释了，一个贡献如何从一个开发者流到正式的master分支中，但是同样的方法可以把贡献集中到任意一个仓库中。  </p><p>比如，如果团队的几个人协作实现一个功能，可以在开发之间用相同的方法分享变更，完全不涉及正式仓库。  </p><p>这使得Forking工作流对于松散组织的团队来说是个非常强大的工具。  </p><p>任一开发者可以方便地和另一开发者分享变更，任何分支都能有效地合并到正式代码库中。  </p><h3 id="Pull-Requests-2"><a href="#Pull-Requests-2" class="headerlink" title="Pull Requests"></a>Pull Requests</h3><p>Pull Requests 是Bitbucket上方便开发者之间协作的功能。  </p><p>提供了一个用户友好的Web界面，在集成提交的变更到正式向目前可以对变更进行讨论。  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX1zLLMp65VmnavK5XDJUKS6zYUJDvvIJN*Lt1FNUoIJG0DkTCKRNuOGToGtjWmjIrVLu*fSpHVogAtzO4DgCm80!/r" alt="images"></p><p>开发者向团队成员通知功能开发已经完成，pull Requests是最简单的用法。  </p><p>开发者完成功能开发后，通过Bitbucket账号发起一个pull Request。这样让涉及这个功能的所有人知道，要去做Code Review和合并到master分支。  </p><p>但是，Pull  Request远不止一个简单的通知，而是为讨论提交的功能的一个专门论坛。  </p><p>如果变更有任何问题，团队成员反馈在Pull Request中，甚至pull新的提交微调功能。  </p><p>所有的这些活动都直接跟踪在Pull Request中。  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7SLIJSUYxrmcZpwuXYsQB1Ya2zpcBawWJ7atpdZcoSsGWSrxt3XnkjpSfeaAffmHrs3SyEpgZCaBKHAdN3ReSA!/r" alt="images"></p><p>相比其他的协作模型，这种分享提交的形式有助于打造一个更流畅的工作流。  </p><p>SVN和Git都能通过一个简单的脚本收到通知邮件；  </p><p>但是，讨论变更时，开发者通常只能去回复邮件。  </p><p>这样做会变得杂乱，尤其还要涉及后面的几个提交时。  </p><p>Pull Requests吧所有相关功能整合到一个和Bitbucket仓库界面集成的用户友好Web界面中。  </p><h4 id="解析Pull-Request"><a href="#解析Pull-Request" class="headerlink" title="解析Pull Request"></a>解析Pull Request</h4><p>当腰发起一个pull Request，你所要做的就是请求（Request）另一个开发者（比如项目的维护者），来pull你仓库中一个分支到他的仓库中。  </p><p>这意味着你要提供4个信息（源仓库、源分支、目的仓库、目的分支），以发起Pull Request。  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7SLIJSUYxrmcZpwuXYsQB1Ya2zpcBawWJ7atpdZcoSsGWSrxt3XnkjpSfeaAffmHrs3SyEpgZCaBKHAdN3ReSA!/r" alt="images"></p><h4 id="工作方式-4"><a href="#工作方式-4" class="headerlink" title="工作方式"></a>工作方式</h4><p>Pull Request可以和功能分支工作流、GitFlow工作流或Forking工作流一起使用。  </p><p>但Pull Request要求要么分支不同，要么仓库不同，所以不能用于集中式工作流。  </p><p>在不同的工作流中使用pull  Request会有一些不同，但基本的过程是这样的：  </p><ul><li>开发者在本地仓库新建一个专门的分支开发功能；</li><li>开发者push分支修改到公开的Bitbucket仓库中；</li><li>开发者通过Bitbucket发起一个Pull Request；</li><li>团队的其他成员review code，讨论并修改；</li><li>项目维护者合并功能到官方仓库中并关闭Pull Request；</li></ul><h4 id="在功能分支工作流中使用Pull-Request"><a href="#在功能分支工作流中使用Pull-Request" class="headerlink" title="在功能分支工作流中使用Pull Request"></a>在功能分支工作流中使用Pull Request</h4><p>功能分支工作流用一个共享的Bitbucket仓库来管理协作，开发者在专门的分支上开发功能。  </p><p>但不是立即合并到master分支上，而是在合并到主代码之前开发这应该开一个Pull Request发起功能的讨论。  </p><p>功能分支工作流只有一个公开的仓库，所以Pull Request的目的仓库和源仓库总是同一个。  </p><p>通常开发者会指定他的功能分支作为源分支，master分支作为目的分支。  </p><p>收到Pull Request后，项目维护者要决定如何做。  </p><p>如果功能没问题，就简单地合并到master分支，关闭Pull Request。  </p><p>但如果提交的变更有问题，他可以在Pull Request中反馈，之后的新加的评论也会评论之后接着显示出来。  </p><p>在功能还没有完全开发完的时候，也可能发起一个pull Request。  </p><p>比如开发者在实现某个需求时遇到了麻烦。  </p><p>他可以发一个包含正在进行工作的Pull Request。  </p><p>其他的开发者可以在Pull Request提供建议，或者甚至直接添加提交来解决问题。  </p><h4 id="在GitFlow工作流中使用Pull-Request"><a href="#在GitFlow工作流中使用Pull-Request" class="headerlink" title="在GitFlow工作流中使用Pull Request"></a>在GitFlow工作流中使用Pull Request</h4><p>GitFlow工作流和功能分支工作流类似，单围绕项目发布定义一个严格的分支模型。  </p><p>在GitFlow工作流中使用Pull Request让开发者在发布分支或者是维护分支上工作时，可以有个方便的地方对关于发布分支或者是维护分支的问题进行交流。  </p><p>GitFlow工作流中Pull Request的使用过程和上一节中完全一致：当一个功能、发布或者是热修复分支需要Review时，开发者简单发起一个Pull Request，团队的其他成员会通过Bitbucket收到通知。  </p><p>新功能一般合并到develop分支，而发布和热修复则要同时合并到develop分支和master分支上。  </p><p>Pull Request可能用作所有合并的正式管理。  </p><h4 id="在Forking工作流中使用Pull-Request"><a href="#在Forking工作流中使用Pull-Request" class="headerlink" title="在Forking工作流中使用Pull Request"></a>在Forking工作流中使用Pull Request</h4><p>在Forking工作流中，开发者push完成的功能到他自己的仓库中，而不是共享仓库。  </p><p>然后，他发一个Pull  Request，让项目维护者知道他的功能已经可以Review了。  </p><p>在这个工作流，Pull Request的通知功能非常有用，因为项目维护者不可能知道其他开发者在他们自己的仓库添加了提交。  </p><p>由于各个开发者有自己的公开仓库，Pull Request的源仓库和目标仓库不是同一个。  </p><p>源仓库是开发者的公开仓库，源分支是包含了修改的分支。  </p><p>如果开发者要合并修改到正式代码库中，那么目标仓库是正式仓库，目标分支是master分支。  </p><p>Pull Request也可以用于正式项目之外的其他开发者之间的协作。  </p><p>比如，如果一个开发者和一个团队成员一起开发一个功能，他们可以发起一个Pull Request，用团队成员的Bitbucket仓库作为目标，而不是正式项目的仓库。  </p><p>然后使用相同的功能分支作为源和目标分支。  </p><p>2个开发者之间可以在Pull Request中讨论和开发功能。  </p><p>完成开发后，他们可以发起另一个Pull  Request，请求合并功能到正式的master分支。  </p><p>在Forking工作流中，这样的灵活性称为一个强有力的协作工具。  </p><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><p>下面的示例演示了Pull Request如何在Forking工作流中使用。  </p><p>也同样适用于小团队的开发协作和第三方开发者向开源项目的贡献。  </p><p>在示例中，小红是个开发，小明是项目维护者。  </p><p>他们各自有一个公开的Bitbucket仓库，而小明的仓库包含了正式工程。  </p><h5 id="小红fork正式项目"><a href="#小红fork正式项目" class="headerlink" title="小红fork正式项目"></a>小红fork正式项目</h5><p>小红先要fork小明的Bitbucket仓库，开始项目的开发。  </p><p>她登录Bitbucket，浏览到小明的仓库页面，点fork按钮。  </p><p>然后为fork出来的仓库填写名字和描述，这样小红就有了服务端的项目拷贝了。  </p><h5 id="小红克隆她的Bitbucket仓库"><a href="#小红克隆她的Bitbucket仓库" class="headerlink" title="小红克隆她的Bitbucket仓库"></a>小红克隆她的Bitbucket仓库</h5><p>下一步，小红克隆自己刚才fork出来的Bitbucket仓库，以在本机上准备出工作拷贝。  </p><p>命令如下：  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://user@bitbucket.org/user/repo.git</span><br></pre></td></tr></table></figure><p>请记住，git clone 会自动创建origin远程别名，是指向小红fork出来的仓库。  </p><h5 id="小红开发新功能"><a href="#小红开发新功能" class="headerlink" title="小红开发新功能"></a>小红开发新功能</h5><p>在开始改代码前，小红要为新功能新建一个新分支。  </p><p>她会用这个分支作为Pull Request的源分支。  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="built_in">some</span>-<span class="built_in">feature</span></span><br></pre></td></tr></table></figure><h5 id="编辑代码"><a href="#编辑代码" class="headerlink" title="编辑代码"></a>编辑代码</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -<span class="keyword">a</span> -m <span class="string">"Add first draft of some feature"</span></span><br></pre></td></tr></table></figure><p>在新功能分支上，小红按照需要添加提交。  </p><p>甚至如果小红觉得功能分支上的提交历史太乱了，她可以用交互式rebase来删除或者压制提交。  </p><p>对于大型项目，整理功能分支的历史可以让项目维护者更容易看出在pull Request中做了什么内容。  </p><h5 id="小红push功能到她的Bitbucket仓库中"><a href="#小红push功能到她的Bitbucket仓库中" class="headerlink" title="小红push功能到她的Bitbucket仓库中"></a>小红push功能到她的Bitbucket仓库中</h5><p>小红完成功能后，push功能到她自己的Bitbucket仓库中（不是正是仓库），用下面简单的命令。  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> <span class="built_in">some</span>-branch</span><br></pre></td></tr></table></figure><p>这时她的变更可以让项目维护者看到了（后者任何想要看的协作者）  </p><h5 id="小红发起Pull-Request"><a href="#小红发起Pull-Request" class="headerlink" title="小红发起Pull Request"></a>小红发起Pull Request</h5><p>Bitbucket上有了她的功能分支后，小红可以用她的Bitbucket账号浏览到她fork出来的仓库页面，点右上角的[ Pull Request ]按钮，发起一个Pull Request。  </p><p>弹出的表单自动设置小红的仓库为源仓库，询问小红以指定源分支、目标仓库和目标分支。  </p><p>小红想要合并功能到正式仓库，所以源分支是她的功能分支，目标仓库是小明的公开仓库，而目标分支是master分支。  </p><p>另外，小红需要提供Pull Request的标题和描述信息。  </p><p>如果需要小明以外的人审核批准diamante，她可以把这些人填在[ Reviewers ]文本框中。  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX4eBUNEH.PnD8cXLFX3FNQ1TY28uOV3j2Ic*FLo6qk1HERoVGDzy.ccPi6KWHQ1Ha7aF4qrprhr6a71aswRPe1s!/r" alt="images"></p><p>创建好了Pull Request，通知会通过Bitbucket系统消息或者邮件（可选）发给小明。  </p><h5 id="小明-review-Pull-Request"><a href="#小明-review-Pull-Request" class="headerlink" title="小明 review Pull Request"></a>小明 review Pull Request</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXz.TEdJt9fHfFvRXR*aihUCZBZl8OSFD1T7r*7GIRRSRDePO5EI5YO0pxG7Qo02eHht0.LfxlnFiUPPKgPzRY4U!/r" alt="images"></p><p>在小明的Bitbucket仓库页面的[ Pull Request ]Tab可以看到所有人发起的Pull Request。  </p><p>点击小红的Pull Request会显示Pull Request的描述、功能的提交历史和每个变更的差异（diff）。  </p><p>如果小明想要合并到项目中，只要点一下[ Merge ]按钮，就可以同意Pull Request并合并到master分支。  </p><p>但如果像这个示例中一样，小明发现了在小红的代码中的一个小Bug，要在小红合并前修复。  </p><p>小明可以在整个Pull Request上加上评注，或者是选择历史中的某个提交加上评注。  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXywJcEdXUnF5drr2Tn8vpOshxucsOMz.iW9qg*vXiM80CBz6VcPZTn4e7NC2txFi9Xf.oe9HyW39vilYdBhizv0!/r" alt="images"></p><h5 id="小红补加提交"><a href="#小红补加提交" class="headerlink" title="小红补加提交"></a>小红补加提交</h5><p>如果小红对反馈有任何疑问，可以在Pull Request中响应，把Pull Request当做是她功能讨论的论坛。  </p><p>小红在她的功能分支新加提交以解决代码问题，并push到她的Bitbucket仓库中，就像前一轮中的做饭一样。  </p><p>这些提交会进入到Pull Request，小明在原来的评注旁边可以再次Review 变更。  </p><h5 id="小明接受Pull-Request"><a href="#小明接受Pull-Request" class="headerlink" title="小明接受Pull Request"></a>小明接受Pull Request</h5><p>最终，小明接受变更，合并功能分支到master分支，并关闭Pull Request。  </p><p>至此，功能集成到项目中，其他的项目开发者可以用标准的git pull命令pull这些变更到自己的本地仓库中。  </p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p>到了这里，你应该有了所有需要的工具来集成Pull Request到你自己的工作流。  </p><p>请记住，Pull Request并不是为了替代任何基于Git的协作工作流，而是它们的一个便利的补充，让团队成员间的协作更加轻松方便。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git工作流指南-分布式版本控制系统&quot;&gt;&lt;a href=&quot;#Git工作流指南-分布式版本控制系统&quot; class=&quot;headerlink&quot; title=&quot;Git工作流指南 分布式版本控制系统&quot;&gt;&lt;/a&gt;Git工作流指南 分布式版本控制系统&lt;/h2&gt;&lt;p&gt;观看笔记：&lt;
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://fengshana.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://fengshana.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Git工作流" scheme="https://fengshana.github.io/tags/Git%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>前端页面双色球3</title>
    <link href="https://fengshana.github.io/2020/05/27/%E3%80%90%E5%91%A8%E5%BD%A4%E5%BD%A4%E3%80%91/%E3%80%90%E5%91%A8%E5%BD%A4%E5%BD%A4%E3%80%91%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%94%B9%E8%BF%9B3/"/>
    <id>https://fengshana.github.io/2020/05/27/%E3%80%90%E5%91%A8%E5%BD%A4%E5%BD%A4%E3%80%91/%E3%80%90%E5%91%A8%E5%BD%A4%E5%BD%A4%E3%80%91%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%94%B9%E8%BF%9B3/</id>
    <published>2020-05-27T10:34:19.831Z</published>
    <updated>2020-05-27T10:34:19.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求内容"><a href="#需求内容" class="headerlink" title="需求内容"></a>需求内容</h2><p><a href="https://github.com/fengshana/Mamai" target="_blank" rel="noopener">https://github.com/fengshana/Mamai</a>  </p><ol><li>分页加个页码</li><li>这个10出过了很多期的，最近的这一期130，4.10，到今天最新的一期不管数值多少，为止已经多少期没出了，求差值</li><li>把搜索的数字加个红色也行</li></ol><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX0OntByQ9RopVFKqFo2EAAP.w*ru3lHqrrQXKPPvOiJcpxdOfhwHYah.is4YlEKT.jSTullaIqHR6PMItPvTZnk!/r" alt="image"><br><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX6NdBhxBRYBUy.T6WIURM8FztiZEk0bzwnUWuk2wwu0zeYpSbcbz.bcVfsU6GZo8tyfIU60tglNtx0E4zdfuFgM!/r" alt="image"><br><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX.hsLuSnbnm1WocRcndLv9YK0y2Ojuh2G*eAAF14QcltwhNkZ.r8foxuxlNiqT.LK0X4HY7fncWH*Ik9RrigLc8!/r" alt="image"></p><h3 id="接触docker并部署项目"><a href="#接触docker并部署项目" class="headerlink" title="接触docker并部署项目"></a>接触docker并部署项目</h3><p>这边是将项目打包成jar包部署linux环境当中的docker容器内</p><p>参考Blog：</p><ul><li><a href="https://www.jianshu.com/p/397929dbc27d" target="_blank" rel="noopener">https://www.jianshu.com/p/397929dbc27d</a></li></ul><p>相关命令：</p><p>docker ps -a<br>docker images<br>docker stop 镜像的名称<br>docker start 镜像的名称</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">432 </span> cd ../logs/</span><br><span class="line"><span class="symbol">433 </span> tail -<span class="number">300</span>f access.<span class="keyword">log</span></span><br><span class="line"><span class="symbol">434 </span> ../sbin/nginx -s quit</span><br><span class="line"><span class="symbol">435 </span> ../sbin/nginx -s <span class="keyword">stop</span></span><br><span class="line"><span class="symbol">436 </span> cd ../conf</span><br><span class="line"><span class="symbol">437 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">438 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">439 </span> /<span class="keyword">usr</span>/local/nginx/sbin/nginx -c /<span class="keyword">usr</span>/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="symbol">440 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">441 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">442 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">443 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">444 </span> ../sbin/nginx  -s reload</span><br><span class="line"><span class="symbol">445 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">446 </span> cd </span><br><span class="line"><span class="symbol">447 </span> ll</span><br><span class="line"><span class="symbol">448 </span> cd apache-tomcat-<span class="number">8.5.51</span>/</span><br><span class="line"><span class="symbol">449 </span> ll</span><br><span class="line"><span class="symbol">450 </span> ccd logs/</span><br><span class="line"><span class="symbol">451 </span> ll</span><br><span class="line"><span class="symbol">452 </span> cd logs/</span><br><span class="line"><span class="symbol">453 </span> ll</span><br><span class="line"><span class="symbol">454 </span> cd ..</span><br><span class="line"><span class="symbol">455 </span> ll</span><br><span class="line"><span class="symbol">456 </span> cd ..</span><br><span class="line"><span class="symbol">457 </span> ll</span><br><span class="line"><span class="symbol">458 </span> more install.sh </span><br><span class="line"><span class="symbol">459 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">460 </span> cd /<span class="keyword">usr</span>/local/nginx/</span><br><span class="line"><span class="symbol">461 </span> ll</span><br><span class="line"><span class="symbol">462 </span> cd conf</span><br><span class="line"><span class="symbol">463 </span> more nginx.conf</span><br><span class="line"><span class="symbol">464 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">465 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">466 </span> ll</span><br><span class="line"><span class="symbol">467 </span> ps -ef |grep  java</span><br><span class="line"><span class="symbol">468 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">23983</span></span><br><span class="line"><span class="symbol">469 </span> ll</span><br><span class="line"><span class="symbol">470 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">23983</span></span><br><span class="line"><span class="symbol">471 </span> ps -ef |grep  java</span><br><span class="line"><span class="symbol">472 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">703</span></span><br><span class="line"><span class="symbol">473 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">474 </span> ll</span><br><span class="line"><span class="symbol">475 </span> <span class="keyword">mkdir</span> docker</span><br><span class="line"><span class="symbol">476 </span> ll</span><br><span class="line"><span class="symbol">477 </span> cd docker/</span><br><span class="line"><span class="symbol">478 </span> ll</span><br><span class="line"><span class="symbol">479 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">480 </span> cd ..</span><br><span class="line"><span class="symbol">481 </span> ll</span><br><span class="line"><span class="symbol">482 </span> cp Mamai-<span class="number">1.0</span>-SNAPSHOT.jar docker/</span><br><span class="line"><span class="symbol">483 </span> ll</span><br><span class="line"><span class="symbol">484 </span> cd docker/</span><br><span class="line"><span class="symbol">485 </span> ll</span><br><span class="line"><span class="symbol">486 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">487 </span> pwd</span><br><span class="line"><span class="symbol">488 </span> ll</span><br><span class="line"><span class="symbol">489 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">490 </span> docker build -t springbootdemo4docker .</span><br><span class="line"><span class="symbol">491 </span> docker images</span><br><span class="line"><span class="symbol">492 </span> docker <span class="keyword">run</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> springbootdemo4docker</span><br><span class="line"><span class="symbol">493 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">494 </span> ps -ef |grep java</span><br><span class="line"><span class="symbol">495 </span> docker logs --tail <span class="number">300</span> -f demo</span><br><span class="line"><span class="symbol">496 </span> docker ps</span><br><span class="line"><span class="symbol">497 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">498 </span> netstat -na</span><br><span class="line"><span class="symbol">499 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">500 </span> ps -ef|grep java</span><br><span class="line"><span class="symbol">501 </span> ll</span><br><span class="line"><span class="symbol">502 </span> more Dockerfile </span><br><span class="line"><span class="symbol">503 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">504 </span> docker-compose exec java bash</span><br><span class="line"><span class="symbol">505 </span> cd /<span class="keyword">usr</span>/local/bin/</span><br><span class="line"><span class="symbol">506 </span> docker-compose exec java bash</span><br><span class="line"><span class="symbol">507 </span> ll</span><br><span class="line"><span class="symbol">508 </span> netstat -lnp|grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">509 </span> ll</span><br><span class="line"><span class="symbol">510 </span> cd /<span class="keyword">usr</span>/local/nginx/conf</span><br><span class="line"><span class="symbol">511 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">512 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">513 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">514 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">515 </span> ll</span><br><span class="line"><span class="symbol">516 </span> cd apache-tomcat-<span class="number">8.5.51</span>/</span><br><span class="line"><span class="symbol">517 </span> ll</span><br><span class="line"><span class="symbol">518 </span> cd ..</span><br><span class="line"><span class="symbol">519 </span> ll</span><br><span class="line"><span class="symbol">520 </span> rm -rf apache-tomcat-<span class="number">8.5.51</span>/</span><br><span class="line"><span class="symbol">521 </span> ll</span><br><span class="line"><span class="symbol">522 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">523 </span> ll</span><br><span class="line"><span class="symbol">524 </span> wget https://mirrors.cnnic.cn/apache/tomcat/tomcat-<span class="number">9</span>/v9.<span class="number">0.7</span>/bin/apache-tomcat-<span class="number">9.0.7.</span>tar.gz</span><br><span class="line"><span class="symbol">525 </span> wget https://archive.apache.org/dist/tomcat/tomcat-<span class="number">8</span>/v8.<span class="number">0.23</span>/bin/apache-tomcat-<span class="number">8.0.23.</span>tar.gz</span><br><span class="line"><span class="symbol">526 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">527 </span> ll</span><br><span class="line"><span class="symbol">528 </span> tar -zxvf apache-tomcat-<span class="number">8.0.23.</span>tar.gz </span><br><span class="line"><span class="symbol">529 </span> ll</span><br><span class="line"><span class="symbol">530 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">531 </span> ll</span><br><span class="line"><span class="symbol">532 </span> cd apache-tomcat-<span class="number">8.0.23</span></span><br><span class="line"><span class="symbol">533 </span> ll</span><br><span class="line"><span class="symbol">534 </span> cd webapps/</span><br><span class="line"><span class="symbol">535 </span> ll</span><br><span class="line"><span class="symbol">536 </span> rm -rf docs/</span><br><span class="line"><span class="symbol">537 </span> rm -rf examples/</span><br><span class="line"><span class="symbol">538 </span> rm -rf host-manager/</span><br><span class="line"><span class="symbol">539 </span> rm -rf manager/</span><br><span class="line"><span class="symbol">540 </span> rm -rf ROOT/</span><br><span class="line"><span class="symbol">541 </span> ll</span><br><span class="line"><span class="symbol">542 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">543 </span> ll</span><br><span class="line"><span class="symbol">544 </span> cd ..</span><br><span class="line"><span class="symbol">545 </span> ll</span><br><span class="line"><span class="symbol">546 </span> cd work/</span><br><span class="line"><span class="symbol">547 </span> ll</span><br><span class="line"><span class="symbol">548 </span> cd ..</span><br><span class="line"><span class="symbol">549 </span> cd conf/</span><br><span class="line"><span class="symbol">550 </span> ll</span><br><span class="line"><span class="symbol">551 </span> vim server.xml </span><br><span class="line"><span class="symbol">552 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">553 </span> cd ..</span><br><span class="line"><span class="symbol">554 </span> cd webapps/</span><br><span class="line"><span class="symbol">555 </span> ll</span><br><span class="line"><span class="symbol">556 </span> pwd</span><br><span class="line"><span class="symbol">557 </span> cd ..</span><br><span class="line"><span class="symbol">558 </span> cd conf/</span><br><span class="line"><span class="symbol">559 </span> vim server.xml </span><br><span class="line"><span class="symbol">560 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">561 </span> ll</span><br><span class="line"><span class="symbol">562 </span> cd ..</span><br><span class="line"><span class="symbol">563 </span> ll</span><br><span class="line"><span class="symbol">564 </span> cd bin</span><br><span class="line"><span class="symbol">565 </span> ./startup.sh </span><br><span class="line"><span class="symbol">566 </span> cd ..</span><br><span class="line"><span class="symbol">567 </span> cd logs/</span><br><span class="line"><span class="symbol">568 </span> ll</span><br><span class="line"><span class="symbol">569 </span> ls</span><br><span class="line"><span class="symbol">570 </span> cd ..</span><br><span class="line"><span class="symbol">571 </span> ls</span><br><span class="line"><span class="symbol">572 </span> cd server</span><br><span class="line"><span class="symbol">573 </span> cd www</span><br><span class="line"><span class="symbol">574 </span> cd server</span><br><span class="line"><span class="symbol">575 </span> ls</span><br><span class="line"><span class="symbol">576 </span> cd tomcat</span><br><span class="line"><span class="symbol">577 </span> ls</span><br><span class="line"><span class="symbol">578 </span> cd bin</span><br><span class="line"><span class="symbol">579 </span> ls</span><br><span class="line"><span class="symbol">580 </span> cd apache-tomcat-<span class="number">8.5.12</span>/</span><br><span class="line"><span class="symbol">581 </span> ls</span><br><span class="line"><span class="symbol">582 </span> cd bin</span><br><span class="line"><span class="symbol">583 </span> ./startup.sh</span><br><span class="line"><span class="symbol">584 </span> ls</span><br><span class="line"><span class="symbol">585 </span> ./startup.sh</span><br><span class="line"><span class="symbol">586 </span> ./shutdown.sh</span><br><span class="line"><span class="symbol">587 </span> ./startup.sh</span><br><span class="line"><span class="symbol">588 </span> ll</span><br><span class="line"><span class="symbol">589 </span> cd apache-tomcat-<span class="number">8.0.23</span></span><br><span class="line"><span class="symbol">590 </span> ll</span><br><span class="line"><span class="symbol">591 </span> cd webapps/</span><br><span class="line"><span class="symbol">592 </span> ll</span><br><span class="line"><span class="symbol">593 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">594 </span> cd ..</span><br><span class="line"><span class="symbol">595 </span> cd webapps/</span><br><span class="line"><span class="symbol">596 </span> ll</span><br><span class="line"><span class="symbol">597 </span> cd myProject</span><br><span class="line"><span class="symbol">598 </span> ll</span><br><span class="line"><span class="symbol">599 </span> cd WEB-INF/</span><br><span class="line"><span class="symbol">600 </span> ll</span><br><span class="line"><span class="symbol">601 </span> cd classes/</span><br><span class="line"><span class="symbol">602 </span> ll</span><br><span class="line"><span class="symbol">603 </span> more application.properties </span><br><span class="line"><span class="symbol">604 </span> cd ..</span><br><span class="line"><span class="symbol">605 </span> ll</span><br><span class="line"><span class="symbol">606 </span> cd ..</span><br><span class="line"><span class="symbol">607 </span> ll</span><br><span class="line"><span class="symbol">608 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">609 </span> cd META-INF/</span><br><span class="line"><span class="symbol">610 </span> ll</span><br><span class="line"><span class="symbol">611 </span> cd ..</span><br><span class="line"><span class="symbol">612 </span> ll</span><br><span class="line"><span class="symbol">613 </span> cd WEB-INF/</span><br><span class="line"><span class="symbol">614 </span> ll</span><br><span class="line"><span class="symbol">615 </span> cd classes/</span><br><span class="line"><span class="symbol">616 </span> ll</span><br><span class="line"><span class="symbol">617 </span> cd templates/</span><br><span class="line"><span class="symbol">618 </span> ll</span><br><span class="line"><span class="symbol">619 </span> cd ..</span><br><span class="line"><span class="symbol">620 </span> ll</span><br><span class="line"><span class="symbol">621 </span> cd classes/</span><br><span class="line"><span class="symbol">622 </span> ll</span><br><span class="line"><span class="symbol">623 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">624 </span> ll</span><br><span class="line"><span class="symbol">625 </span> more application.properties </span><br><span class="line"><span class="symbol">626 </span> ll</span><br><span class="line"><span class="symbol">627 </span> cd templates/</span><br><span class="line"><span class="symbol">628 </span> ll</span><br><span class="line"><span class="symbol">629 </span> cd js/</span><br><span class="line"><span class="symbol">630 </span> ll</span><br><span class="line"><span class="symbol">631 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">632 </span> vim <span class="keyword">common</span>.js </span><br><span class="line"><span class="symbol">633 </span> cd .</span><br><span class="line"><span class="symbol">634 </span> cd ..</span><br><span class="line"><span class="symbol">635 </span> cd conf/</span><br><span class="line"><span class="symbol">636 </span> more server.xml </span><br><span class="line"><span class="symbol">637 </span> cd ..</span><br><span class="line"><span class="symbol">638 </span> cd webapps/</span><br><span class="line"><span class="symbol">639 </span> ll</span><br><span class="line"><span class="symbol">640 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">641 </span> cd myProject</span><br><span class="line"><span class="symbol">642 </span> ll</span><br><span class="line"><span class="symbol">643 </span> cd WEB-INF/</span><br><span class="line"><span class="symbol">644 </span> ll</span><br><span class="line"><span class="symbol">645 </span> cd ca</span><br><span class="line"><span class="symbol">646 </span> cd classes/</span><br><span class="line"><span class="symbol">647 </span> ll</span><br><span class="line"><span class="symbol">648 </span> cd templates/</span><br><span class="line"><span class="symbol">649 </span> ll</span><br><span class="line"><span class="symbol">650 </span> cd js/</span><br><span class="line"><span class="symbol">651 </span> ll</span><br><span class="line"><span class="symbol">652 </span> vim <span class="keyword">common</span>.js </span><br><span class="line"><span class="symbol">653 </span> ps -ef |grep java</span><br><span class="line"><span class="symbol">654 </span> netstat -lnp|grep <span class="number">8082</span></span><br><span class="line"><span class="symbol">655 </span> systemctl status firewalld</span><br><span class="line"><span class="symbol">656 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">657 </span> firewall-cmd --zone=public --add-port=<span class="number">80</span>/tcp --permanent</span><br><span class="line"><span class="symbol">658 </span> firewall-cmd --zone=public --add-port=<span class="number">8082</span>/tcp --permanent</span><br><span class="line"><span class="symbol">659 </span> firewall-cmd --reload</span><br><span class="line"><span class="symbol">660 </span> firewall-cmd --zone=public --query-port=<span class="number">8082</span>/tcp</span><br><span class="line"><span class="symbol">661 </span> history </span><br><span class="line"><span class="symbol">662 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">663 </span> ll</span><br><span class="line"><span class="symbol">664 </span> cd ..</span><br><span class="line"><span class="symbol">665 </span> cd bin/</span><br><span class="line"><span class="symbol">666 </span> ./shutdown.sh </span><br><span class="line"><span class="symbol">667 </span> netstat -lnp|grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">668 </span> netstat -lnp|grep <span class="number">8082</span></span><br><span class="line"><span class="symbol">669 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">1109</span></span><br><span class="line"><span class="symbol">670 </span> netstat -lnp|grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">671 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">672 </span> cd ..</span><br><span class="line"><span class="symbol">673 </span> cd conf/</span><br><span class="line"><span class="symbol">674 </span> ll</span><br><span class="line"><span class="symbol">675 </span> vim server.xml </span><br><span class="line"><span class="symbol">676 </span> cd ..</span><br><span class="line"><span class="symbol">677 </span> cd bin/</span><br><span class="line"><span class="symbol">678 </span> ./startup.sh </span><br><span class="line"><span class="symbol">679 </span> netstat -lnp|grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">680 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">681 </span> ll</span><br><span class="line"><span class="symbol">682 </span> cd ../logs/</span><br><span class="line"><span class="symbol">683 </span> more catalina.<span class="keyword">out</span> </span><br><span class="line"><span class="symbol">684 </span> cd ../webapps/</span><br><span class="line"><span class="symbol">685 </span> cd myProject</span><br><span class="line"><span class="symbol">686 </span> ll</span><br><span class="line"><span class="symbol">687 </span> cd WEB-INF/</span><br><span class="line"><span class="symbol">688 </span> ll</span><br><span class="line"><span class="symbol">689 </span> cd classes/</span><br><span class="line"><span class="symbol">690 </span> ll</span><br><span class="line"><span class="symbol">691 </span> cd templates/</span><br><span class="line"><span class="symbol">692 </span> ll</span><br><span class="line"><span class="symbol">693 </span> cd js/</span><br><span class="line"><span class="symbol">694 </span> ll</span><br><span class="line"><span class="symbol">695 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">696 </span> ll</span><br><span class="line"><span class="symbol">697 </span> vim <span class="keyword">common</span>.js </span><br><span class="line"><span class="symbol">698 </span> cd ..</span><br><span class="line"><span class="symbol">699 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">700 </span> ll</span><br><span class="line"><span class="symbol">701 </span> cd ..</span><br><span class="line"><span class="symbol">702 </span> cd bin/</span><br><span class="line"><span class="symbol">703 </span> ./shutdown.sh </span><br><span class="line"><span class="symbol">704 </span> ll</span><br><span class="line"><span class="symbol">705 </span> cd apache-tomcat-<span class="number">8.0.23</span></span><br><span class="line"><span class="symbol">706 </span> ll</span><br><span class="line"><span class="symbol">707 </span> cd webapps/</span><br><span class="line"><span class="symbol">708 </span> ll</span><br><span class="line"><span class="symbol">709 </span> rm -rf myProject</span><br><span class="line"><span class="symbol">710 </span> rm -rf myProject.war </span><br><span class="line"><span class="symbol">711 </span> cd ..</span><br><span class="line"><span class="symbol">712 </span> cd work/</span><br><span class="line"><span class="symbol">713 </span> ll</span><br><span class="line"><span class="symbol">714 </span> cd Catalina/</span><br><span class="line"><span class="symbol">715 </span> ll</span><br><span class="line"><span class="symbol">716 </span> cd localhost/</span><br><span class="line"><span class="symbol">717 </span> ll</span><br><span class="line"><span class="symbol">718 </span> rm -rf myProject/</span><br><span class="line"><span class="symbol">719 </span> ll</span><br><span class="line"><span class="symbol">720 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">721 </span> cd ../../../</span><br><span class="line"><span class="symbol">722 </span> ll</span><br><span class="line"><span class="symbol">723 </span> cd ..</span><br><span class="line"><span class="symbol">724 </span> cd </span><br><span class="line"><span class="symbol">725 </span> ll</span><br><span class="line"><span class="symbol">726 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">727 </span> history </span><br><span class="line"><span class="symbol">728 </span> ll</span><br><span class="line"><span class="symbol">729 </span> cd docker/</span><br><span class="line"><span class="symbol">730 </span> ll</span><br><span class="line"><span class="symbol">731 </span> docker <span class="keyword">run</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> springbootdemo4docker</span><br><span class="line"><span class="symbol">732 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">733 </span>  docker build -t springbootdemo4docker .</span><br><span class="line"><span class="symbol">734 </span> ll</span><br><span class="line"><span class="symbol">735 </span> more Dockerfile </span><br><span class="line"><span class="symbol">736 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">737 </span> ll</span><br><span class="line"><span class="symbol">738 </span> docker build -t springbootdemo5docker .</span><br><span class="line"><span class="symbol">739 </span> docker build -t springbootdemo4docker .</span><br><span class="line"><span class="symbol">740 </span> service docker restart</span><br><span class="line"><span class="symbol">741 </span> docker build -t springbootdemo5docker .</span><br><span class="line"><span class="symbol">742 </span> docker images</span><br><span class="line"><span class="symbol">743 </span> docker <span class="keyword">run</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> springbootdemo5docker</span><br><span class="line"><span class="symbol">744 </span> docker rmi <span class="number">05</span>c655fd2bd6</span><br><span class="line"><span class="symbol">745 </span> ps -ef |grep java</span><br><span class="line"><span class="symbol">746 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">2632</span></span><br><span class="line"><span class="symbol">747 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">2874</span></span><br><span class="line"><span class="symbol">748 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">749 </span> cd ..</span><br><span class="line"><span class="symbol">750 </span> ll</span><br><span class="line"><span class="symbol">751 </span> pwd</span><br><span class="line"><span class="symbol">752 </span> ll</span><br><span class="line"><span class="symbol">753 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">754 </span> ll</span><br><span class="line"><span class="symbol">755 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">756 </span> pwd</span><br><span class="line"><span class="symbol">757 </span> ll</span><br><span class="line"><span class="symbol">758 </span> cd docker/</span><br><span class="line"><span class="symbol">759 </span> ll</span><br><span class="line"><span class="symbol">760 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">761 </span> ll</span><br><span class="line"><span class="symbol">762 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">763 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">764 </span> cp ../Mamai-<span class="number">1.0</span>-SNAPSHOT.jar  Mamai-<span class="number">1.0</span>-SNAPSHOT.jar</span><br><span class="line"><span class="symbol">765 </span> ll</span><br><span class="line"><span class="symbol">766 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">767 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">768 </span> cd ..</span><br><span class="line"><span class="symbol">769 </span> ll</span><br><span class="line"><span class="symbol">770 </span> cear</span><br><span class="line"><span class="symbol">771 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">772 </span> ll</span><br><span class="line"><span class="symbol">773 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">774 </span> ll</span><br><span class="line"><span class="symbol">775 </span> tail -<span class="number">300</span>f tempMaima.txt </span><br><span class="line"><span class="symbol">776 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">777 </span> ll</span><br><span class="line"><span class="symbol">778 </span> cp Mamai-<span class="number">1.0</span>-SNAPSHOT.jar ./docker/</span><br><span class="line"><span class="symbol">779 </span> ll</span><br><span class="line"><span class="symbol">780 </span> cd docker/</span><br><span class="line"><span class="symbol">781 </span> ll</span><br><span class="line"><span class="symbol">782 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">783 </span> docker images</span><br><span class="line"><span class="symbol">784 </span> docker start <span class="number">05</span>c655fd2bd6</span><br><span class="line"><span class="symbol">785 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">786 </span> docker build -t springbootdemo6docker .</span><br><span class="line"><span class="symbol">787 </span> docker images</span><br><span class="line"><span class="symbol">788 </span> docker <span class="keyword">run</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> springbootdemo6docker</span><br><span class="line"><span class="symbol">789 </span> docker images</span><br><span class="line"><span class="symbol">790 </span> ll</span><br><span class="line"><span class="symbol">791 </span> cd ..</span><br><span class="line"><span class="symbol">792 </span> ll</span><br><span class="line"><span class="symbol">793 </span> tail -<span class="number">300</span>f tempMaima.txt </span><br><span class="line"><span class="symbol">794 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">795 </span> ll</span><br><span class="line"><span class="symbol">796 </span> cd docker/</span><br><span class="line"><span class="symbol">797 </span> docker images</span><br><span class="line"><span class="symbol">798 </span> docker rmi05c655fd2bd6</span><br><span class="line"><span class="symbol">799 </span> docker rmi <span class="number">05</span>c655fd2bd6</span><br><span class="line"><span class="symbol">800 </span> docker rmi springbootdemo4docker:latest </span><br><span class="line"><span class="symbol">801 </span> docker rmi -f <span class="number">05</span>c655fd2bd6</span><br><span class="line"><span class="symbol">802 </span> docker rmi springbootdemo5docker:latest</span><br><span class="line"><span class="symbol">803 </span> docker rmi -f <span class="number">05</span>c655fd2bd6</span><br><span class="line"><span class="symbol">804 </span> docker images</span><br><span class="line"><span class="symbol">805 </span> ls</span><br><span class="line"><span class="symbol">806 </span> Mamai-<span class="number">1.0</span>-SNAPSHOT.jar.sh <span class="keyword">stop</span></span><br><span class="line"><span class="symbol">807 </span> Mamai-<span class="number">1.0</span>-SNAPSHOT <span class="keyword">stop</span></span><br><span class="line"><span class="symbol">808 </span> Mamai-<span class="number">1.0</span>-SNAPSHOT.jar <span class="keyword">stop</span></span><br><span class="line"><span class="symbol">809 </span> top</span><br><span class="line"><span class="symbol">810 </span> ls</span><br><span class="line"><span class="symbol">811 </span> java -jar Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">812 </span> ls</span><br><span class="line"><span class="symbol">813 </span> ps -ef</span><br><span class="line"><span class="symbol">814 </span> ls</span><br><span class="line"><span class="symbol">815 </span> java -jar Mamai-<span class="number">1.0</span>-SNAPSHOT.jar</span><br><span class="line"><span class="symbol">816 </span> ls</span><br><span class="line"><span class="symbol">817 </span> java -jar Mamai-<span class="number">1.0</span>-SNAPSHOT.jar</span><br><span class="line"><span class="symbol">818 </span> ls</span><br><span class="line"><span class="symbol">819 </span> java -jar Mamai-<span class="number">1.0</span>-SNAPSHOT.jar</span><br><span class="line"><span class="symbol">820 </span> ll</span><br><span class="line"><span class="symbol">821 </span> tail -<span class="number">300</span>f tempMaima.txt </span><br><span class="line"><span class="symbol">822 </span> netstat -lnp|grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">823 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">824 </span> docker ps</span><br><span class="line"><span class="symbol">825 </span> ll</span><br><span class="line"><span class="symbol">826 </span> cd docker/</span><br><span class="line"><span class="symbol">827 </span> ll</span><br><span class="line"><span class="symbol">828 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">829 </span> docker ps</span><br><span class="line"><span class="symbol">830 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">831 </span> ps -ef |grep java</span><br><span class="line"><span class="symbol">832 </span> ps -ef |grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">833 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">834 </span> history </span><br><span class="line"><span class="symbol">835 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">836 </span> cd /</span><br><span class="line"><span class="symbol">837 </span> ll</span><br><span class="line"><span class="symbol">838 </span> cd www/</span><br><span class="line"><span class="symbol">839 </span> ll</span><br><span class="line"><span class="symbol">840 </span> cd server/</span><br><span class="line"><span class="symbol">841 </span> ll</span><br><span class="line"><span class="symbol">842 </span> cd nginx/</span><br><span class="line"><span class="symbol">843 </span> ll</span><br><span class="line"><span class="symbol">844 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">845 </span> ll</span><br><span class="line"><span class="symbol">846 </span> cd bin</span><br><span class="line"><span class="symbol">847 </span> ll</span><br><span class="line"><span class="symbol">848 </span> cd sbin/</span><br><span class="line"><span class="symbol">849 </span> ll</span><br><span class="line"><span class="symbol">850 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">851 </span> ll</span><br><span class="line"><span class="symbol">852 </span> cd .</span><br><span class="line"><span class="symbol">853 </span> cd ..</span><br><span class="line"><span class="symbol">854 </span> cd conf/</span><br><span class="line"><span class="symbol">855 </span> ll</span><br><span class="line"><span class="symbol">856 </span> cd ..</span><br><span class="line"><span class="symbol">857 </span> cd sbin</span><br><span class="line"><span class="symbol">858 </span> ./nginx -c ../conf/nginx.conf</span><br><span class="line"><span class="symbol">859 </span> cd ../conf/</span><br><span class="line"><span class="symbol">860 </span> ll</span><br><span class="line"><span class="symbol">861 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">862 </span> ../sbin/nginx -c nginx.conf</span><br><span class="line"><span class="symbol">863 </span> pwd</span><br><span class="line"><span class="symbol">864 </span> tail -<span class="number">300</span>f nginx.conf</span><br><span class="line"><span class="symbol">865 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">866 </span> cd ..</span><br><span class="line"><span class="symbol">867 </span> cd sbin/</span><br><span class="line"><span class="symbol">868 </span> ./nginx  -s reload</span><br><span class="line"><span class="symbol">869 </span> ll</span><br><span class="line"><span class="symbol">870 </span> cd ..</span><br><span class="line"><span class="symbol">871 </span> ll</span><br><span class="line"><span class="symbol">872 </span> cd logs/</span><br><span class="line"><span class="symbol">873 </span> l</span><br><span class="line"><span class="symbol">874 </span> ll</span><br><span class="line"><span class="symbol">875 </span> tail -<span class="number">300</span>f <span class="keyword">error</span>.<span class="keyword">log</span> </span><br><span class="line"><span class="symbol">876 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">877 </span> cd ..</span><br><span class="line"><span class="symbol">878 </span> ll</span><br><span class="line"><span class="symbol">879 </span> cd ..</span><br><span class="line"><span class="symbol">880 </span> cd </span><br><span class="line"><span class="symbol">881 </span> docker images</span><br><span class="line"><span class="symbol">882 </span> docker image ls</span><br><span class="line"><span class="symbol">883 </span> systemctl daemon-reload</span><br><span class="line"><span class="symbol">884 </span> docker images</span><br><span class="line"><span class="symbol">885 </span> service docker status</span><br><span class="line"><span class="symbol">886 </span> service docker start</span><br><span class="line"><span class="symbol">887 </span> systemctl  docker start</span><br><span class="line"><span class="symbol">888 </span> systemctl docker status</span><br><span class="line"><span class="symbol">889 </span> systemctl restart docker</span><br><span class="line"><span class="symbol">890 </span> systemctl status docker</span><br><span class="line"><span class="symbol">891 </span> docker ps</span><br><span class="line"><span class="symbol">892 </span> docker images</span><br><span class="line"><span class="symbol">893 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">894 </span> docker images</span><br><span class="line"><span class="symbol">895 </span> docker ps -a</span><br><span class="line"><span class="symbol">896 </span> history </span><br><span class="line"><span class="symbol">897 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">898 </span> docker images</span><br><span class="line"><span class="symbol">899 </span> docker ps</span><br><span class="line"><span class="symbol">900 </span> docker ps -a</span><br><span class="line"><span class="symbol">901 </span> docker start gifted_hamilton</span><br><span class="line"><span class="symbol">902 </span> docker ps</span><br><span class="line"><span class="symbol">903 </span> ll</span><br><span class="line"><span class="symbol">904 </span> tail -<span class="number">300</span>f tempMaima.txt </span><br><span class="line"><span class="symbol">905 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">906 </span> history </span><br><span class="line"><span class="symbol">907 </span> ll</span><br><span class="line"><span class="symbol">908 </span> docker ps -a</span><br><span class="line"><span class="symbol">909 </span> docker <span class="keyword">stop</span> gifted_hamilton</span><br><span class="line"><span class="symbol">910 </span> pwd</span><br><span class="line"><span class="symbol">911 </span> ll</span><br><span class="line"><span class="symbol">912 </span> cd docker/</span><br><span class="line"><span class="symbol">913 </span> l</span><br><span class="line"><span class="symbol">914 </span> ll</span><br><span class="line"><span class="symbol">915 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">916 </span> ll</span><br><span class="line"><span class="symbol">917 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">918 </span> ll</span><br><span class="line"><span class="symbol">919 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">920 </span> pwd</span><br><span class="line"><span class="symbol">921 </span> docker ps -a</span><br><span class="line"><span class="symbol">922 </span> ll</span><br><span class="line"><span class="symbol">923 </span> docker start gifted_hamilton</span><br><span class="line"><span class="symbol">924 </span> docker ps -a</span><br><span class="line"><span class="symbol">925 </span> ps -ef |grep java</span><br><span class="line"><span class="symbol">926 </span> ll</span><br><span class="line"><span class="symbol">927 </span> docker ps -a</span><br><span class="line"><span class="symbol">928 </span> docker <span class="keyword">stop</span> gifted_hamilton</span><br><span class="line"><span class="symbol">929 </span> cd docker/</span><br><span class="line"><span class="symbol">930 </span> ll</span><br><span class="line"><span class="symbol">931 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">932 </span> ll</span><br><span class="line"><span class="symbol">933 </span> pwd</span><br><span class="line"><span class="symbol">934 </span> ll</span><br><span class="line"><span class="symbol">935 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">936 </span> docker ps -a</span><br><span class="line"><span class="symbol">937 </span> docker start gifted_hamilton</span><br><span class="line"><span class="symbol">938 </span> docker ps -a</span><br><span class="line"><span class="symbol">939 </span> docker <span class="keyword">stop</span> gifted_hamilton</span><br><span class="line"><span class="symbol">940 </span> docker ps -a</span><br><span class="line"><span class="symbol">941 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">942 </span> docker ps -a</span><br><span class="line"><span class="symbol">943 </span> docker rm gifted_hamilton</span><br><span class="line"><span class="symbol">944 </span> docker ps -a</span><br><span class="line"><span class="symbol">945 </span> docker images</span><br><span class="line"><span class="symbol">946 </span> docker rmi springbootdemo6docker</span><br><span class="line"><span class="symbol">947 </span> docker iamges</span><br><span class="line"><span class="symbol">948 </span> docker images</span><br><span class="line"><span class="symbol">949 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">950 </span> ll</span><br><span class="line"><span class="symbol">951 </span> more Dockerfile </span><br><span class="line"><span class="symbol">952 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">953 </span> docker build -t mamai .</span><br><span class="line"><span class="symbol">954 </span> docker images</span><br><span class="line"><span class="symbol">955 </span> cd ..</span><br><span class="line"><span class="symbol">956 </span> ll</span><br><span class="line"><span class="symbol">957 </span> cd docker/</span><br><span class="line"><span class="symbol">958 </span> ll</span><br><span class="line"><span class="symbol">959 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">960 </span> more Dockerfile </span><br><span class="line"><span class="symbol">961 </span> docker <span class="keyword">run</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> mamai</span><br><span class="line"><span class="symbol">962 </span> docker ps -a</span><br><span class="line"><span class="symbol">963 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">964 </span> ll</span><br><span class="line"><span class="symbol">965 </span> cd .</span><br><span class="line"><span class="symbol">966 </span> c d..</span><br><span class="line"><span class="symbol">967 </span> cd ..</span><br><span class="line"><span class="symbol">968 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">969 </span> ll</span><br><span class="line"><span class="symbol">970 </span> rm -rf Ma</span><br><span class="line"><span class="symbol">971 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">972 </span> ll</span><br><span class="line"><span class="symbol">973 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">974 </span> ll</span><br><span class="line"><span class="symbol">975 </span> rm -rf apache-tomcat-<span class="number">8.0.23</span></span><br><span class="line"><span class="symbol">976 </span> rm -rf apache-tomcat-<span class="number">8.0.23.</span>tar.gz </span><br><span class="line"><span class="symbol">977 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">978 </span> ll</span><br><span class="line"><span class="symbol">979 </span> more install.sh </span><br><span class="line"><span class="symbol">980 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">981 </span> docker ps -a</span><br><span class="line"><span class="symbol">982 </span> docker <span class="keyword">stop</span> agitated_brown</span><br><span class="line"><span class="symbol">983 </span> ll</span><br><span class="line"><span class="symbol">984 </span> cd docker/</span><br><span class="line"><span class="symbol">985 </span> ll</span><br><span class="line"><span class="symbol">986 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">987 </span> ll</span><br><span class="line"><span class="symbol">988 </span> docker  images</span><br><span class="line"><span class="symbol">989 </span> docker ps -a</span><br><span class="line"><span class="symbol">990 </span> docker start agitated_brown</span><br><span class="line"><span class="symbol">991 </span> docker ps -a</span><br><span class="line"><span class="symbol">992 </span> top</span><br><span class="line"><span class="symbol">993 </span> df -h</span><br><span class="line"><span class="symbol">994 </span> top</span><br><span class="line"><span class="symbol">995 </span> ll</span><br><span class="line"><span class="symbol">996 </span> cd docker/</span><br><span class="line"><span class="symbol">997 </span> ll</span><br><span class="line"><span class="symbol">998 </span> more Dockerfile </span><br><span class="line"><span class="symbol">999 </span> history</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求内容&quot;&gt;&lt;a href=&quot;#需求内容&quot; class=&quot;headerlink&quot; title=&quot;需求内容&quot;&gt;&lt;/a&gt;需求内容&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/fengshana/Mamai&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="前端" scheme="https://fengshana.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javaScript" scheme="https://fengshana.github.io/tags/javaScript/"/>
    
      <category term="docker" scheme="https://fengshana.github.io/tags/docker/"/>
    
      <category term="前端" scheme="https://fengshana.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="双色球" scheme="https://fengshana.github.io/tags/%E5%8F%8C%E8%89%B2%E7%90%83/"/>
    
  </entry>
  
  <entry>
    <title>深入理解java虚拟机-线程安全与锁优化</title>
    <link href="https://fengshana.github.io/2020/05/26/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%91/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA13/"/>
    <id>https://fengshana.github.io/2020/05/26/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%91/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA13/</id>
    <published>2020-05-26T14:41:37.497Z</published>
    <updated>2020-05-27T06:22:47.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深入java虚拟机-第五部分-高效并发"><a href="#深入java虚拟机-第五部分-高效并发" class="headerlink" title="深入java虚拟机-第五部分-高效并发"></a>深入java虚拟机-第五部分-高效并发</h2><h3 id="第13章-线程安全与锁优化"><a href="#第13章-线程安全与锁优化" class="headerlink" title="第13章 线程安全与锁优化"></a>第13章 线程安全与锁优化</h3><p>并发处理 的 广泛应用 是使得 Amdah1定律 代替 摩尔定律 成为 计算机性能发展源动力 的根本原因，也是人类 “压榨” 计算机运算能力 的 最有力武器。</p><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>在 软件业发展 的 初期，程序编写 都是以 算法 为核心的，<br>程序员会把 数据 和 过程 分别作为 独立的部分 来考虑，<br>数据 代表 问题空间 中的 客体，程序代码 则用于 处理这些数据，<br>这种 思维方式 直接站在 计算机的角度 去 抽象问题和解决问题，<br>称为 面向过程 的 编程思想。</p><p>与此同时，<br>面向对象 的 编程思想 是站在 现实世界的角度 去 抽象和解决问题，<br>它把 数据和行为 都看做是 对象的一部分，<br>这样可以让程序员能以 符合现实世界的 思维方式 来 编写和组织程序。</p><p>面向过程 的 编程思想 极大地 提升了 现代软件开发 的 生产效率 和 软件可以达到的规模，<br>但是 现实世界与计算机世界 之间不可避免地 存在一些差异。</p><p>例如，人们很难想象现实中的 对象 在一项工作进行期间，会被不停地中断和切换，对象的属性（数据）可能会在 中断期间 被修改和变“脏”，<br>而这些事件 在计算机世界中 则是很正常的事情。</p><p>有时候，良好的设计原则 不得不向现实做出一些让步，我们必须让 程序 在计算机中 正确无误地运行，<br>然后再考虑如何将 代码组织得更好，让 程序 运行得 更快。</p><p>对于这部分的主题“高效并发”来讲，首先需要保证 并发的正确性，然后在此基础上实现 高效。</p><p>本章先从 如何保证并发的正确性 和 如何实现线程安全讲起。</p><h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p>“线程安全”  这个名称，相信稍有经验的程序员都会听说过，甚至在 代码编写 和 走查的时候 可能还会将会挂在嘴边，<br>但是如何找到一个不太拗口的概念 来定义 线程安全 却不是一件容易的事情，<br>笔者尝试在Google中搜索它的概念，找到的是类似于 “如果一个对象可以安全地被多个线程同时使用，那它就是线程安全的”这样的定义——并不能说它不正确，但是人们无法从中获取到任何有用的信息。</p><p>（像我这种小白，也只是，听过，我可没有说过😶😶😶）</p><p>笔者认为《Java Concurrency In Practice》 的作者 Brian Goetz 对 “线程安全” 有一个比较恰当的定义：<br>“当 多个线程 访问 一个对象时，如果不用考虑这些 线程 在 运行时环境 下的 调度 和 交替执行，也不需要进行 额外的同步，或者在 调用方 进行任何其他的 协调操作，调用这个 对象的行为 都可以获得 正确的结果，那 这个对象 是 线程安全 的”。</p><p>这个定义比较 严谨，它要求 线程安全 的代码 都必须具备一个特征：<br>代码本身 封装 了所有必要的 正确性保障手段（如互斥同步等），<br>令 调用者 无需关心 多线程 的问题，更无须自己采取 任何措施 来 保证多线程的正确调用。</p><p>这点听起来简单，但其实并不容易做到，在大多数场景中，我们都会将这个定义弱化一些，如果把”调用这个对象的行为“限定为”单次调用“，<br>这个定义的其他描述也能够成立的话，我们就可以称它是 线程安全 了，为什么要 弱化 这个定义，现在暂且放下，稍后再详细探讨。</p><h5 id="Java语言中的线程安全"><a href="#Java语言中的线程安全" class="headerlink" title="Java语言中的线程安全"></a>Java语言中的线程安全</h5><p>我们已经有了 线程安全 的一个 抽象定义，<br>那接下来就讨论一下在 java语言 中，线程安全 具体是如何体现的？<br>有哪些操作是 线程安全 的？<br>我们这里讨论的 线程安全，就 限定与 多个线程之间 存在 共享数据访问 这个 前提，<br>因为如果一段代码 根本不会 与其他线程共享数据，那么从 线程安全 的 角度 来看，程序是 串行执行 还是 多线程执行 对它来说是完全没有区别的。</p><p>为了更加 深入地 理解 线程安全，在这里我们可以不把 线程安全 当做一个非真即假 的 二元排他项 来看待，<br>按照 线程安全 的 “安全程度” 由强至弱来排序，我们可以将Java语言中各种操作共享的数据分为以下5类：<br>不可变、绝对线程安全、相对线程安全、线程兼容和线程对立。</p><blockquote><p>这种划分方法也是 Brian Goetz在IBM developWorkers上发表的一篇论文中提出的，<br>这里写 “我们”  纯粹是笔者下笔行文中的语言用法。</p></blockquote><h6 id="1-不可变"><a href="#1-不可变" class="headerlink" title="1.不可变"></a>1.不可变</h6><p>在Java语言中（特指JDK1.5以后，即 Java内存模型 被 修正以后的 Java语言），<br>不可变（Immutable） 的 对象 一定是 线程安全的，<br>无论是 对象的方法 还是 方法的调用者，都不需要再采取 任何的线程安全保障措施，</p><p>在12章我们谈到 final关键字 带来的 可见性 时曾经提到过这一点，<br>只要一个 不可变的对象 被正确地 构建出来（没有发生 this 引用逃逸 的情况），<br>那其外部的 可见状态 永远也不会改变，<br>永远也不会看到它在 多个线程之中 处于 不一致 的状态。</p><p>“不可变” 带来的 安全性 是 最简单和最纯粹的。</p><p>Java语言中，如果 共享数据 是一个基本数据类型，那么只要在 定义时 使用 final关键字 修饰它 就可以保证它是 不可变的。</p><p>如果 共享数据 是一个对象，那就需要保证 对象的行为 不会对其 状态 产生任何影响 才行，</p><p>如果读者还没想明白这句话，不妨想一想 java.lang.String 类的对象，它是一个典型的 不可变对象，<br>我们调用它的 substring()、replace()和concat() 这些方法都 不会影响它 原来的值，只会返回一个新构造的字符串对象。</p><p>保证对象行为 不影响 自己状态的途径 有很多种，<br>其中最简单的就是把对象中 带有状态的变量 都声明为 final，<br>这样在 构造函数 结束之后，它就是 不可变的，<br>例如代码清单13-1中java.lang.Integer 构造函数所示的，<br>它通过将 内部状态变量 value 定义为 final 来保障 状态不变。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 13-1 JDK中Integer类的构造函数</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">/*<span class="strong">*</span></span><br><span class="line"><span class="strong">  *</span> The value of the &lt;code&gt;Integer&lt;/code&gt;.</span><br><span class="line"><span class="code">  * @serial</span></span><br><span class="line"><span class="code">  */</span></span><br><span class="line"><span class="code">  private final int value;</span></span><br><span class="line"></span><br><span class="line"><span class="code">  /**</span></span><br><span class="line"><span class="code">    * Constructs newly allocated &lt;code&gt;Integer&lt;/code&gt; object that</span></span><br><span class="line"><span class="code">    * represents the specified &lt;code&gt;int&lt;/code&gt; value.</span></span><br><span class="line"><span class="code">    *</span></span><br><span class="line"><span class="code">    * @param value the value to be represented by the &lt;code&gt;Integer&lt;/code&gt; object.</span></span><br><span class="line"><span class="code">    *</span></span><br><span class="line"><span class="code">    */</span></span><br><span class="line"><span class="code">    public Integer(int value)&#123;</span></span><br><span class="line"><span class="code">      this.value=value;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>在 Java API 中 符合 不可变要求 的类型，<br>除了上面提到的 String 之外，<br>常用的还有 枚举类型，以及 java.lang.Number的部分子类，<br>如Long和Double等数值包装类型，BigInteger和BigDecimal等大数据类型；</p><p>但同为 Number 的 子类型 的 原子类 AtomicInteger 和 AtomicLong 则并非不可变的，<br>读者不妨看看这两个原子类的源码，想一想为什么。</p><p>(emm，原因是不是那个value没有被标为final？Integer类当中的value被标记为final了，而AtomicInteger以及AtomicLong里面的value都没有被标记为final)</p><p>AtomicInteger类代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 AtomicInteger类</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Written by Doug Lea with assistance from members of JCP JSR-166</span></span><br><span class="line"><span class="comment"> * Expert Group and released to the public domain, as explained at</span></span><br><span class="line"><span class="comment"> * http://creativecommons.org/publicdomain/zero/1.0/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">package java.util.concurrent.atomic;</span><br><span class="line"><span class="keyword">import</span> java.util.function.IntUnaryOperator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.IntBinaryOperator;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>An &#123;@code int&#125; value that may be updated atomically.  See </span>the</span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>&#123;@link java.util.concurrent.atomic&#125; package specification for</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>description of </span>the<span class="markdown"> properties of atomic variables. An</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>&#123;@code AtomicInteger&#125; is used in applications </span>such<span class="markdown"> as atomically</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>incremented counters, and cannot be used as </span>a<span class="markdown"> replacement for </span>an</span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>&#123;@link java.lang.Integer&#125;. However, this class does extend</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>&#123;@code Number&#125; to allow uniform access by tools and utilities that</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>deal with numerically-based classes.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> *</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@since 1.5</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@author Doug Lea</span></span></span><br><span class="line"><span class="comment"><span class="markdown">*/</span></span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    private <span class="keyword">static</span> <span class="keyword">final</span> long serialVersionUID = <span class="number">6214790243416807050</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class="line">    private <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    private <span class="keyword">static</span> <span class="keyword">final</span> long valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredField</span>("<span class="title">value</span>"));</span></span><br><span class="line"><span class="class">        &#125; <span class="title">catch</span> (<span class="title">Exception</span> <span class="title">ex</span>) </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private volatile <span class="built_in">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Creates </span>a<span class="markdown"> new AtomicInteger with </span>the<span class="markdown"> given initial value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param initialValue </span>the<span class="markdown"> initial value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public AtomicInteger(<span class="built_in">int</span> initialValue) &#123;</span><br><span class="line">        value = initialValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Creates </span>a<span class="markdown"> new AtomicInteger with initial value &#123;@code 0&#125;.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public AtomicInteger() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Gets </span>the<span class="markdown"> current value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> current value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Sets to </span>the<span class="markdown"> given value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param newValue </span>the<span class="markdown"> new value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="keyword">void</span> <span class="keyword">set</span>(<span class="built_in">int</span> newValue) &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Eventually sets to </span>the<span class="markdown"> given value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param newValue </span>the<span class="markdown"> new value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@since 1.6</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="keyword">void</span> lazySet(<span class="built_in">int</span> newValue) &#123;</span><br><span class="line">        unsafe.putOrderedInt(<span class="keyword">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically sets to </span>the<span class="markdown"> given value and returns </span>the<span class="markdown"> old value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param newValue </span>the<span class="markdown"> new value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> previous value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> getAndSet(<span class="built_in">int</span> newValue) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndSetInt(<span class="keyword">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically sets </span>the<span class="markdown"> value to </span>the<span class="markdown"> given updated value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>if </span>the<span class="markdown"> current value &#123;@code ==&#125; </span>the<span class="markdown"> expected value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param expect </span>the<span class="markdown"> expected value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param update </span>the<span class="markdown"> new value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return &#123;@code true&#125; if successful. False return indicates that</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span></span>the<span class="markdown"> actual value was not equal to </span>the<span class="markdown"> expected value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> boolean compareAndSet(<span class="built_in">int</span> expect, <span class="built_in">int</span> update) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically sets </span>the<span class="markdown"> value to </span>the<span class="markdown"> given updated value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>if </span>the<span class="markdown"> current value &#123;@code ==&#125; </span>the<span class="markdown"> expected value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;</span></span></span>a<span class="markdown"><span class="xml"> href="package-summary.html#weakCompareAndSet"&gt;</span>May fail</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>spuriously and does not provide ordering guarantees<span class="xml"><span class="tag">&lt;/</span></span></span>a<span class="markdown"><span class="xml">&gt;</span>, </span>so<span class="markdown"> is</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>only rarely </span>an<span class="markdown"> appropriate alternative to &#123;@code compareAndSet&#125;.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param expect </span>the<span class="markdown"> expected value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param update </span>the<span class="markdown"> new value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return &#123;@code true&#125; if successful</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> boolean weakCompareAndSet(<span class="built_in">int</span> expect, <span class="built_in">int</span> update) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically increments by one </span>the<span class="markdown"> current value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> previous value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> getAndIncrement() &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically decrements by one </span>the<span class="markdown"> current value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> previous value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> getAndDecrement() &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically adds </span>the<span class="markdown"> given value to </span>the<span class="markdown"> current value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param delta </span>the<span class="markdown"> value to add</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> previous value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> getAndAdd(<span class="built_in">int</span> delta) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically increments by one </span>the<span class="markdown"> current value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> updated value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> incrementAndGet() &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically decrements by one </span>the<span class="markdown"> current value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> updated value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> decrementAndGet() &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">-1</span>) - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically adds </span>the<span class="markdown"> given value to </span>the<span class="markdown"> current value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param delta </span>the<span class="markdown"> value to add</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> updated value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> addAndGet(<span class="built_in">int</span> delta) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, delta) + delta;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically updates </span>the<span class="markdown"> current value with </span>the<span class="markdown"> results of</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>applying </span>the<span class="markdown"> given function, returning </span>the<span class="markdown"> previous value. The</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>function </span>should<span class="markdown"> be side-effect-free, since it may be re-applied</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>when attempted updates fail due to contention among threads.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param updateFunction </span>a<span class="markdown"> side-effect-free function</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> previous value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@since 1.8</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> getAndUpdate(IntUnaryOperator updateFunction) &#123;</span><br><span class="line">        <span class="built_in">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = <span class="keyword">get</span>();</span><br><span class="line">            next = updateFunction.applyAsInt(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically updates </span>the<span class="markdown"> current value with </span>the<span class="markdown"> results of</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>applying </span>the<span class="markdown"> given function, returning </span>the<span class="markdown"> updated value. The</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>function </span>should<span class="markdown"> be side-effect-free, since it may be re-applied</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>when attempted updates fail due to contention among threads.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param updateFunction </span>a<span class="markdown"> side-effect-free function</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> updated value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@since 1.8</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> updateAndGet(IntUnaryOperator updateFunction) &#123;</span><br><span class="line">        <span class="built_in">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = <span class="keyword">get</span>();</span><br><span class="line">            next = updateFunction.applyAsInt(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically updates </span>the<span class="markdown"> current value with </span>the<span class="markdown"> results of</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>applying </span>the<span class="markdown"> given function to </span>the<span class="markdown"> current and given values,</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>returning </span>the<span class="markdown"> previous value. The function </span>should<span class="markdown"> be</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>side-effect-free, since it may be re-applied when attempted</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>updates fail due to contention among threads.  The function</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>is applied with </span>the<span class="markdown"> current value as its first argument,</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>and </span>the<span class="markdown"> given update as </span>the<span class="markdown"> second argument.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param x </span>the<span class="markdown"> update value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param accumulatorFunction </span>a<span class="markdown"> side-effect-free function of two arguments</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> previous value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@since 1.8</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> getAndAccumulate(<span class="built_in">int</span> x,</span><br><span class="line">                                      IntBinaryOperator accumulatorFunction) &#123;</span><br><span class="line">        <span class="built_in">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = <span class="keyword">get</span>();</span><br><span class="line">            next = accumulatorFunction.applyAsInt(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically updates </span>the<span class="markdown"> current value with </span>the<span class="markdown"> results of</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>applying </span>the<span class="markdown"> given function to </span>the<span class="markdown"> current and given values,</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>returning </span>the<span class="markdown"> updated value. The function </span>should<span class="markdown"> be</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>side-effect-free, since it may be re-applied when attempted</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>updates fail due to contention among threads.  The function</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>is applied with </span>the<span class="markdown"> current value as its first argument,</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>and </span>the<span class="markdown"> given update as </span>the<span class="markdown"> second argument.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param x </span>the<span class="markdown"> update value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param accumulatorFunction </span>a<span class="markdown"> side-effect-free function of two arguments</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> updated value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@since 1.8</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> accumulateAndGet(<span class="built_in">int</span> x,</span><br><span class="line">                                      IntBinaryOperator accumulatorFunction) &#123;</span><br><span class="line">        <span class="built_in">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = <span class="keyword">get</span>();</span><br><span class="line">            next = accumulatorFunction.applyAsInt(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Returns </span>the<span class="markdown"> String representation of </span>the<span class="markdown"> current value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> String representation of </span>the<span class="markdown"> current value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="built_in">String</span> toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.toString(<span class="keyword">get</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Returns </span>the<span class="markdown"> value of this &#123;@code AtomicInteger&#125; as </span>an<span class="markdown"> &#123;@code int&#125;.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="built_in">int</span> intValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Returns </span>the<span class="markdown"> value of this &#123;@code AtomicInteger&#125; as </span>a<span class="markdown"> &#123;@code long&#125;</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>after </span>a<span class="markdown"> widening primitive conversion.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@jls 5.1.2 Widening Primitive Conversions</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public long longValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> (long)<span class="keyword">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Returns </span>the<span class="markdown"> value of this &#123;@code AtomicInteger&#125; as </span>a<span class="markdown"> &#123;@code float&#125;</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>after </span>a<span class="markdown"> widening primitive conversion.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@jls 5.1.2 Widening Primitive Conversions</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public float floatValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> (float)<span class="keyword">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Returns </span>the<span class="markdown"> value of this &#123;@code AtomicInteger&#125; as </span>a<span class="markdown"> &#123;@code double&#125;</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>after </span>a<span class="markdown"> widening primitive conversion.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@jls 5.1.2 Widening Primitive Conversions</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="built_in">double</span> doubleValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">double</span>)<span class="keyword">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>AtomicLong类代码：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 AtomicLong类</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Written by Doug Lea with assistance from members of JCP JSR-166</span></span><br><span class="line"><span class="comment"> * Expert Group and released to the public domain, as explained at</span></span><br><span class="line"><span class="comment"> * http://creativecommons.org/publicdomain/zero/1.0/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> java.util.concurrent.atomic;</span><br><span class="line"><span class="keyword">import</span> java.util.function.LongUnaryOperator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.LongBinaryOperator;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A &#123;<span class="doctag">@code</span> long&#125; value that may be updated atomically.  See the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> java.util.concurrent.atomic&#125; package specification for</span></span><br><span class="line"><span class="comment"> * description of the properties of atomic variables. An</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> AtomicLong&#125; is used in applications such as atomically</span></span><br><span class="line"><span class="comment"> * incremented sequence numbers, and cannot be used as a replacement</span></span><br><span class="line"><span class="comment"> * for a &#123;<span class="doctag">@link</span> java.lang.Long&#125;. However, this class does extend</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Number&#125; to allow uniform access by tools and utilities that</span></span><br><span class="line"><span class="comment"> * deal with numerically-based classes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Doug Lea</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicLong</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1927816293512124184</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup to use Unsafe.compareAndSwapLong for updates</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Records whether the underlying JVM supports lockless</span></span><br><span class="line"><span class="comment">     * compareAndSwap for longs. While the Unsafe.compareAndSwapLong</span></span><br><span class="line"><span class="comment">     * method works in either case, some constructions should be</span></span><br><span class="line"><span class="comment">     * handled at Java level to avoid locking user-visible locks.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> VM_SUPPORTS_LONG_CAS = VMSupportsCS8();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns whether underlying JVM supports lockless CompareAndSet</span></span><br><span class="line"><span class="comment">     * for longs. Called only once and cached in VM_SUPPORTS_LONG_CAS.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> native <span class="keyword">boolean</span> VMSupportsCS8();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicLong<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredField</span>("<span class="title">value</span>"));</span></span><br><span class="line"><span class="class">        &#125; <span class="title">catch</span> (<span class="title">Exception</span> <span class="title">ex</span>) &#123;</span> <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new AtomicLong with the given initial value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialValue the initial value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> AtomicLong(<span class="keyword">long</span> initialValue) &#123;</span><br><span class="line">        value = initialValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new AtomicLong with initial value &#123;<span class="doctag">@code</span> 0&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> AtomicLong() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the current value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> get() &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets to the given value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newValue the new value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> set(<span class="keyword">long</span> newValue) &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Eventually sets to the given value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newValue the new value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> lazySet(<span class="keyword">long</span> newValue) &#123;</span><br><span class="line">        unsafe.putOrderedLong(<span class="keyword">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically sets to the given value and returns the old value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newValue the new value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> getAndSet(<span class="keyword">long</span> newValue) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndSetLong(<span class="keyword">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically sets the value to the given updated value</span></span><br><span class="line"><span class="comment">     * if the current value &#123;<span class="doctag">@code</span> ==&#125; the expected value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expect the expected value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> update the new value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if successful. False return indicates that</span></span><br><span class="line"><span class="comment">     * the actual value was not equal to the expected value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> compareAndSet(<span class="keyword">long</span> expect, <span class="keyword">long</span> update) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapLong(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically sets the value to the given updated value</span></span><br><span class="line"><span class="comment">     * if the current value &#123;<span class="doctag">@code</span> ==&#125; the expected value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;a href="package-summary.html#weakCompareAndSet"&gt;May fail</span></span><br><span class="line"><span class="comment">     * spuriously and does not provide ordering guarantees&lt;/a&gt;, so is</span></span><br><span class="line"><span class="comment">     * only rarely an appropriate alternative to &#123;<span class="doctag">@code</span> compareAndSet&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expect the expected value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> update the new value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if successful</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> weakCompareAndSet(<span class="keyword">long</span> expect, <span class="keyword">long</span> update) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapLong(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically increments by one the current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> getAndIncrement() &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>L);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically decrements by one the current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> getAndDecrement() &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="keyword">this</span>, valueOffset, <span class="number">-1</span>L);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically adds the given value to the current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta the value to add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> getAndAdd(<span class="keyword">long</span> delta) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="keyword">this</span>, valueOffset, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically increments by one the current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the updated value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> incrementAndGet() &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>L) + <span class="number">1</span>L;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically decrements by one the current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the updated value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> decrementAndGet() &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="keyword">this</span>, valueOffset, <span class="number">-1</span>L) - <span class="number">1</span>L;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically adds the given value to the current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta the value to add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the updated value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> addAndGet(<span class="keyword">long</span> delta) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="keyword">this</span>, valueOffset, delta) + delta;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically updates the current value with the results of</span></span><br><span class="line"><span class="comment">     * applying the given function, returning the previous value. The</span></span><br><span class="line"><span class="comment">     * function should be side-effect-free, since it may be re-applied</span></span><br><span class="line"><span class="comment">     * when attempted updates fail due to contention among threads.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateFunction a side-effect-free function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> getAndUpdate(LongUnaryOperator updateFunction) &#123;</span><br><span class="line">        <span class="keyword">long</span> prev, next;</span><br><span class="line">        do &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = updateFunction.applyAsLong(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically updates the current value with the results of</span></span><br><span class="line"><span class="comment">     * applying the given function, returning the updated value. The</span></span><br><span class="line"><span class="comment">     * function should be side-effect-free, since it may be re-applied</span></span><br><span class="line"><span class="comment">     * when attempted updates fail due to contention among threads.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateFunction a side-effect-free function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the updated value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> updateAndGet(LongUnaryOperator updateFunction) &#123;</span><br><span class="line">        <span class="keyword">long</span> prev, next;</span><br><span class="line">        do &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = updateFunction.applyAsLong(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically updates the current value with the results of</span></span><br><span class="line"><span class="comment">     * applying the given function to the current and given values,</span></span><br><span class="line"><span class="comment">     * returning the previous value. The function should be</span></span><br><span class="line"><span class="comment">     * side-effect-free, since it may be re-applied when attempted</span></span><br><span class="line"><span class="comment">     * updates fail due to contention among threads.  The function</span></span><br><span class="line"><span class="comment">     * is applied with the current value as its first argument,</span></span><br><span class="line"><span class="comment">     * and the given update as the second argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x the update value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accumulatorFunction a side-effect-free function of two arguments</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> getAndAccumulate(<span class="keyword">long</span> x,</span><br><span class="line">                                       LongBinaryOperator accumulatorFunction) &#123;</span><br><span class="line">        <span class="keyword">long</span> prev, next;</span><br><span class="line">        do &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = accumulatorFunction.applyAsLong(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically updates the current value with the results of</span></span><br><span class="line"><span class="comment">     * applying the given function to the current and given values,</span></span><br><span class="line"><span class="comment">     * returning the updated value. The function should be</span></span><br><span class="line"><span class="comment">     * side-effect-free, since it may be re-applied when attempted</span></span><br><span class="line"><span class="comment">     * updates fail due to contention among threads.  The function</span></span><br><span class="line"><span class="comment">     * is applied with the current value as its first argument,</span></span><br><span class="line"><span class="comment">     * and the given update as the second argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x the update value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accumulatorFunction a side-effect-free function of two arguments</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the updated value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> accumulateAndGet(<span class="keyword">long</span> x,</span><br><span class="line">                                       LongBinaryOperator accumulatorFunction) &#123;</span><br><span class="line">        <span class="keyword">long</span> prev, next;</span><br><span class="line">        do &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = accumulatorFunction.applyAsLong(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the String representation of the current value.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the String representation of the current value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.toString(get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value of this &#123;<span class="doctag">@code</span> AtomicLong&#125; as an &#123;<span class="doctag">@code</span> int&#125;</span></span><br><span class="line"><span class="comment">     * after a narrowing primitive conversion.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@jls</span> 5.1.3 Narrowing Primitive Conversions</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> intValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value of this &#123;<span class="doctag">@code</span> AtomicLong&#125; as a &#123;<span class="doctag">@code</span> long&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> longValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value of this &#123;<span class="doctag">@code</span> AtomicLong&#125; as a &#123;<span class="doctag">@code</span> float&#125;</span></span><br><span class="line"><span class="comment">     * after a widening primitive conversion.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@jls</span> 5.1.2 Widening Primitive Conversions</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> floatValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">float</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value of this &#123;<span class="doctag">@code</span> AtomicLong&#125; as a &#123;<span class="doctag">@code</span> double&#125;</span></span><br><span class="line"><span class="comment">     * after a widening primitive conversion.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@jls</span> 5.1.2 Widening Primitive Conversions</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> doubleValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h6 id="2-绝对线程安全"><a href="#2-绝对线程安全" class="headerlink" title="2.绝对线程安全"></a>2.绝对线程安全</h6><p>绝对的 线程安全 完全满足 Brian Goetz 给出的 线程安全 的定义，<br>这个 定义 其实是很 严格的，<br>一个类 要达到 “不管 运行时环境 如何， 调用者 都不需要 任何额外的 同步措施” 通常需要付出很大的，甚至有时候是不切实际的代价。</p><p>在 Java API中 标注自己是 线程安全的类，大多数都不是 绝对的线程安全。</p><p>我们可以通过 Java API中 一个不是 “绝对线程安全” 的线程安全类 来看看这里的 “绝对” 是什么意思。</p><p>如果说 java.util.Vector 是一个 线程安全 的 容器，<br>相信所有的Java程序员对此都不会有异议，因为它的 add()、get()和size() 这类方法都是被 synchronized 修饰的，<br>尽管这样 效率很低，但确实是 安全的。</p><p>但是，即使它 所有的方法 都被 修饰成 同步，也不意味着 调用它的时候永远都不需要 同步手段了，<br>请看一下代码清单13-2中的测试代码。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 <span class="number">13</span><span class="number">-2</span> 对Vector线程安全的测试</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Vector&lt;Integer&gt; <span class="built_in">vector</span> = <span class="keyword">new</span> Vector&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">      <span class="built_in">vector</span>.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Thread removeThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>()&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">vector</span>.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="built_in">vector</span>.<span class="built_in">remove</span>(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  Thread printThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>()&#123;</span><br><span class="line">      <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">vector</span>.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>((<span class="built_in">vector</span>.<span class="built_in">get</span>(i)));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  removeThread.start();</span><br><span class="line">  printThread.start();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//不要同时产生过多的线程，否则会导致操作系统假死</span></span><br><span class="line">  <span class="keyword">while</span>(Thread.activeCount() &gt; <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"Thread-132"</span> java.lang.ArrayIndexOutOfBoundsException:</span><br><span class="line">Array index out <span class="keyword">of</span> range:<span class="number">17</span></span><br><span class="line">  at java.util.<span class="module-access"><span class="module"><span class="identifier">Vector</span>.</span></span>remove(<span class="module-access"><span class="module"><span class="identifier">Vector</span>.</span></span>java:<span class="number">777</span>)</span><br><span class="line">  at org.fenixsoft.mulithread.<span class="module-access"><span class="module"><span class="identifier">VectorTest$1</span>.</span></span>run(<span class="module-access"><span class="module"><span class="identifier">VectorTest</span>.</span></span>java:<span class="number">21</span>)</span><br><span class="line">  at java.lang.<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>run(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>java:<span class="number">662</span>)</span><br></pre></td></tr></table></figure><p>很明显，尽管这里使用到的 Vector的get()、remove()和size() 方法都是 同步的，<br>但是在 多线程 的环境下，如果不在 方法调用端 做额外的同步措施 的话，<br>使用这段代码 仍然是不安全的，因为如果另一个线程 恰好在错误的时间里 删除了一个元素，<br>导致序号 i 已经不再可用的话，<br>再用 i 访问数组就会 抛出一个ArrayIndexOutOfBoundsException</p><p>如果要保证这段代码能正确执行下去，我们不得不把 removeThread和printThread 的定义改成如代码清单13-3所示的样子。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 <span class="number">13</span><span class="number">-3</span> 必须加入同步 以保证Vector访问的线程安全性</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">Thread removeThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">  @Override</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>()&#123;</span><br><span class="line">    synchronized(<span class="built_in">vector</span>)&#123;</span><br><span class="line">      <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">vector</span>.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="built_in">vector</span>.<span class="built_in">remove</span>(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Thread printThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">  @Override</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>()&#123;</span><br><span class="line">    synchronized(<span class="built_in">vector</span>)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">vector</span>.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>((<span class="built_in">vector</span>.<span class="built_in">get</span>(i)));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h6 id="3-相对线程安全"><a href="#3-相对线程安全" class="headerlink" title="3.相对线程安全"></a>3.相对线程安全</h6><p>相对的 线程安全 就是我们 通常意义上 所讲的 线程安全，<br>它需要 保证 对这个对象 单独的操作 是 线程安全的，<br>我们在 调用的时候 不需要做 额外的保障措施，但是对于一些 特定顺序 的 连续调用，<br>就可能需要在 调用端 使用 额外的同步手段 来保证 调用的正确性。</p><p>上面代码清单13-2和代码清单13-3就是 相对线程安全的 明显的 案例。</p><p>在Java语言中，大部分的 线程安全类 都属于这种类型，例如 Vector、HashTable、Collections的synchronizedCollection() 方法包装的集合 等。</p><h6 id="4-线程兼容"><a href="#4-线程兼容" class="headerlink" title="4.线程兼容"></a>4.线程兼容</h6><p>线程兼容 是指 对象本身 并不是 线程安全的，<br>但是可以通过在 调用端 正确地 使用 同步手段 来保证对象 在并发环境中 可以安全地使用，<br>我们平常说 一个类不是线程安全的，绝大多数时候指的是这一种情况。</p><p>Java API中大部分的类 都是属于 线程兼容的，如与前面的 Vector和HashTable 相对应的集合类 ArrayList和HashMap 等。</p><h6 id="5-线程对立"><a href="#5-线程对立" class="headerlink" title="5.线程对立"></a>5.线程对立</h6><p>线程对立 是指无论 调用端 是否采取了 同步措施，<br>都无法在 多线程环境中 并发使用的代码。</p><p>由于Java语言天生就具备 多线程特性，线程对立 这种 排斥多线程的代码 时很少出现的，而且通常都是 有害的，应当尽量避免。</p><p>一个线程对立 的例子是 Thread 类的 suspend() 和 resume() 方法，<br>如果有两个线程 同时持有一个线程对象，一个尝试去中断线程，另一个尝试去恢复线程，<br>如果并发进行的话，无论调用时 是否进行了同步，目标线程都是存在 死锁风险 的，<br>如果 suspend() 中断的线程 就是 即将要执行 resume() 的那个线程，那就肯定要产生 死锁 了。</p><p>也正是由于这个原因， suspend() 和 resume() 方法已经被 JDK 声明废弃（@Deprecated）了。</p><p>常见的 线程对立 的操作还有 System.setIn()、System.setOut() 和 System.runFinalizersOnExit()等。</p><h5 id="线程安全的实现方法"><a href="#线程安全的实现方法" class="headerlink" title="线程安全的实现方法"></a>线程安全的实现方法</h5><p>了解了 什么是线程安全 之后，紧接着的一个问题就是我们应该 如何实现线程安全，<br>这听起来似乎是一件由代码如何编写来决定的事情，确实，如何实现线程安全 与 代码编写 有很大的关系，<br>但 虚拟机 提供的 同步和锁机制 也起到了非常重要的作用。</p><p>本节中，代码编写如何实现线程安全 和 虚拟机如何实现同步与锁 这两者都会有所涉及，相对而言更偏重后者一些，<br>只要读者了解了 虚拟机线程安全手段 的运作过程，自己去思考代码如何编写并不是一件困难的事情。</p><p>（周大大，你是认真的吗？😭😭😭 说出这句话的时候，考虑过像我这种小白的感受吗？🙃🙃🙃）</p><h6 id="1-互斥同步"><a href="#1-互斥同步" class="headerlink" title="1.互斥同步"></a>1.互斥同步</h6><p>互斥同步（Mutual Exclusion &amp; Synchronization） 是常见的一种 并发正确性保障手段。</p><p>同步 是指在 多个线程 并发访问 共享数据时，保证 共享数据 在同一个时刻 只被一个（或者是一些，使用信号量的时候）线程使用。</p><p>而 互斥 是 实现同步 的 一种手段，<br>临界区（Critical Section）、互斥量（Mutex）和信号量（Semaphore）都是主要的 互斥实现方式。</p><p>因此，在这4个字里面，互斥 是 因， 同步 是 果；互斥 是 方法，同步 是 目的。</p><p>在 Java 中，最基本的 同步互斥 手段就是 synchronized关键字，<br>synchronized关键字 经过 编译 之后， 会在 同步块 的前后 分别形成 monitorenter和monitorexit 这两个字节码指令，<br>这两个字节码 都需要一个 reference 类型的参数来指明要 锁定和解锁 的对象。</p><p>如果Java程序中的 synchronized明确指定了 对象参数，那就是 这个对象的reference；<br>如果没有明确指定，那就根据 synchronized 修饰的是实例方法还是类方法，去取对应的 对象实例 或 Class对象 来作为 锁对象。</p><p>根据 虚拟机规范 的要求，<br>在 执行 monitorenter 指令时，<br>首先 要尝试 获取 对象的锁。</p><p>如果 这个对象 没被 锁定，<br>或者 当前线程 已经拥有了 那个对象的锁，<br>把 锁 的 计数器 加1，<br>相应的，<br>在 执行 monitorexit 指令时 会将 锁计数器 减1，<br>当计数器为0时，锁 就 释放。</p><p>如果 获取 对象锁 失败，那 当前线程 就要 阻塞等待，直到 对象锁 被 另外一个线程 释放为止。</p><p>在 虚拟机规范 对 monitorenter和monitorexit 的行为描述中，有两点是需要特别注意的。</p><p>首先，synchronized同步块 对 同一条线程 来说 是可重入的，不会出现 自己把自己 锁死的问题。</p><p>其次，同步块 在 已进入的线程 执行完之前，会 阻塞 后面其他线程的进入。</p><p>第12章讲过，Java的线程 是映射到 操作系统 的 原生线程 之上的，如果要 阻塞或唤醒 一个线程，都需要 操作系统来帮忙完成，<br>这就需要从 用户态 转换到 核心态 中，因此 状态转换 需要耗费 很多的处理器时间。</p><p>对于 代码简单的 同步块（如被 synchronized修饰的 getter() 或 setter() 方法），<br>状态转换 消耗的时间 有可能比 用户代码 执行的时间 还要长。</p><p>所以 synchronized 是Java语言中一个 重量级（Heavyweight）的操作，有经验的程序员都会在 确实必要 的情况下 才使用这种操作。</p><p>而 虚拟机本身 也会进行一些 优化，<br>譬如在通知 操作系统阻塞线程 之前 加入一段 自旋等待过程，避免频繁地 切入到 核心态 之中。</p><p>除了 synchronized 之外，我们还可以使用 java.util.concurrent(下文称J.U.C) 包中的 重入锁（ReentrantLock） 来 实现同步，<br>在基本用法上， ReentrantLock与synchronized 很相似，<br>它们都具备一样的 线程重入特性，只是代码写法上有点区别，<br>一个表现为 API层面的 互斥锁（ lock()和unlock()方法 配合 try/finally语句块 来完成），<br>另一个表现为 原生语法层面的互斥锁。</p><p>不过，相比 synchronized，ReentrantLock 增加了一些 高级功能，<br>主要有以下3项：<br>等待可中断、可实现公平锁、以及 锁可以绑定多个条件。</p><p>等待可中断 是指 当持有锁的线程 长期不释放锁 的时候，正在 等待的线程 可以选择放弃等待，改为处理其他事情，可中断特性 对处理执行时间非常长的 同步块 很有帮助。</p><p>公平锁 是指 多个线程 在等待 同一个锁 时，必须按照 申请锁 的时间顺序 来依次 获得锁；<br>而 非公平锁 则不保证 这一点，<br>在 锁 被释放时，任何一个 等待锁的线程 都有机会 获得锁。<br>synchronized 中 的 锁 是非公平的，ReentrantLock 默认情况下  也是非公平的，但可以通过 带布尔值 的 构造函数 要求使用 公平锁。</p><p>锁绑定多个条件 是指 一个ReentrantLock对象 可以同时 绑定多个Condition对象，<br>而在 synchronized中， 锁对象 的 wait()和notify()或notifyAll()方法 可以实现一个 隐含的条件，<br>如果要和 多于一个的条件关联的时候， 就不得不 额外地添加一个锁，<br>而 ReentrantLock 则无需这样做，只需要 多次调用 newCondition()方法 即可。</p><p>如果需要使用上述功能，选用 ReentrantLock 是一个很好的选择，<br>那如果 是基于 性能考虑呢？<br>关于 synchronized和ReentrantLock 的 性能问题，<br>Brian Goetz对这两种锁在 JDK1.5与单核处理器，以及 JDK1.5与双Xeon处理器 环境下做了一组 吞吐量对比的实验，实验结果如图13-1和图13-2所示。</p><blockquote><p>本例中的数据及图片来源于 Brian Goetz 为 IBM developerWorks 撰写的论文：《Java theory and practice:More flexible, scalable locking in JDK5.0》，<br>原文地址是：<a href="http://www.ibm.com/developerworks/java/library/j-jtp10264/?S_TACT=" target="_blank" rel="noopener">http://www.ibm.com/developerworks/java/library/j-jtp10264/?S_TACT=</a> 105AGX53&amp;S_CMP=cn-a-j。</p></blockquote><p>（该链接有效，但是，我看的很是艰难😭😭😭😭救救这苦命的孩子吧，就像当初接入paypal支付🙃🙃🙃🙃）</p><p>从图13-1和图13-2可以看出，<br>多线程环境下 synchronized的吞吐量下降得 非常严重，<br>而 ReentrantLock 则能基本保持在同一个 比较稳定的水平 上。</p><p>与其说 ReentrantLock 性能好，还不如说 synchronized 还有非常大的优化余地。</p><p>后续的技术发展也证明了这一点，JDK1.6中加入了很多针对 锁的优化措施（13.3节我们就会讲解这些 优化措施），<br>JDK1.6发布之后，人们就发现 synchronized与ReentrantLock 的 性能 基本上是 完全持平 了。</p><p>因此，如果读者的程序 是使用 JDK1.6 或以上 部署 的话，<br>性能因素 就不再是 选择ReentrantLock 的理由了，<br>虚拟机 在 未来的性能改进中 肯定也会更加偏向于 原生的synchronized，<br>所以还是提倡在 synchronized 能实现需求的情况下，优先考虑使用 synchronized 来进行 同步。</p><h6 id="2-非阻塞同步"><a href="#2-非阻塞同步" class="headerlink" title="2.非阻塞同步"></a>2.非阻塞同步</h6><p>互斥同步 最主要的问题 就是 进行线程 阻塞和唤醒 所带来的的 性能问题，<br>因此这种 同步也称为 阻塞同步（Blocking Synchronization）。</p><p>从 处理问题的方式 上说，<br>互斥同步 属于一种 悲观的 并发策略，总是认为 只要不去做 正确的 同步措施（例如加锁），那就肯定会出现问题，<br>无论 共享数据 是否真的会出现竞争，它都要 进行加锁<br>（这里讨论的是 概念模型，实际上 虚拟机 会优化很大一部分 不必要的 加锁）、<br>用户态和心态转换、维护锁计数器 和 检查 是否有 被阻塞的线程 需要唤醒 等操作。</p><p>（这也就是所谓的 总有刁民想害朕 了）</p><p>随着 硬件指令集 的发展，我们有了另外一个选择：基于 冲突检测 的 乐观并发策略，<br>通俗地说，就是先进行操作，<br>如果没有其他线程 争用共享数据，那操作就成功了；<br>如果 共享数据 有争用，产生了 冲突，那就再采取其他的 补偿措施（最常见的补偿措施就是 不断地重试，直到成功为止），<br>这种 乐观的并发策略 的许多实现 都不需要把 线程挂起，因此这种 同步操作 称为 非阻塞同步（Non-Blocking Synchronization）。</p><p>为什么笔者说使用 乐观并发策略 需要 “硬件指令集的发展” 才能进行呢？</p><p>因为我们需要 操作和冲突检测 这两个步骤 具备 原子性，靠什么来保证呢？</p><p>如果这里 再使用 互斥同步 来保证就失去意义了，所以我们只能靠 硬件 来完成这件事情，<br>硬件 保证一个从 语义 上看起来需要多次操作的性能 只通过 一条处理器指令 就能完成，这类指令常用的有：</p><p>(我大概一辈子也用不到这些个东西)</p><ul><li>测试并设置（Test-and-Set）</li><li>获取并增加（Fetch-and-Increment）</li><li>交换（Swap）</li><li>比较并交换（Compare-and-Swap，下文称 CAS）</li><li>加载链接/条件存储（Load-Linked/Store-Conditional，下文称LL/SC）</li></ul><p>(但是还是得努力去试试。不怕一万就怕万一。)</p><p>其中，前面的3条 是20世纪就已经存在于 大多数指令集之中的 处理器指令，</p><p>后面的两条是 现代处理器 新增的，而且这两条指令的 目的和功能 是类似的。</p><p>在 IA64、x86 指令集 中有 cmpxchg指令 完成 CAS功能，<br>在 sparc-TSO 也有 casa指令 实现，而在 ARM 和 PowerPC 架构下，则需要使用 一对 ldrex/strex 指令 来完成 LL/SC 的功能。</p><p>CAS指令 需要有3个操作数，分别是 内存位置（在Java中可以简单理解为 变量的内存地址，用V表示）、旧的预期值（用A表示）和新值（用B表示）。</p><p>CAS指令 执行时，当且仅当 V 符合 旧预期值A 时，处理器 用 新值B 更新 V的值，否则它就不执行更新，<br>但是无论 是否更新了 V的值，都会返回 V的旧值，上述的处理过程是一个 原子操作。</p><p>在 JDK1.5 之后，Java程序 中才可以使用 CAS 操作，<br>该操作由 sun.misc.Unsafe类 里面的 compareAndSwapInt() 和 compareAndSwapLong() 等几个方法包装提供，<br>虚拟机 在 内部 对这些方法做了特殊处理，<br>即时编译出来的结果 就是一条 平台相关的 处理器CAS指令，没有方法调用的过程，或者可以认为是无条件 内联 进去了。</p><blockquote><p>这种被 虚拟机 特殊处理 的方法称为 固有函数（Intrinsics），类似的 固有函数 还有Math.sin()等。</p></blockquote><p>由于 Unsafe类 不是提供给 用户程序 调用的类（Unsafe.getUnsafe()的代码中 限制了只有 启动类加载器（Bootstrap ClassLoader） 加载的Class 才能访问它），<br>因此，如果不采用 反射手段 ， 我们只能通过其他的 Java API来间接使用它，如 J.U.C包 里面的 整数原子类，其中的 compareAndSet()和getAndIncrement() 等方法都是用了 Unsafe类 的 CAS操作。</p><p>我们不妨拿一段在第12章中没有解决的问题代码来看看 如何使用CAS操作来避免阻塞同步 ，代码如代码清单12-1所示。</p><p>我们曾经通过这段20个线程 自增10000次 的代码来证明 volatile变量不具备原子性，那么如何才能让它 具备原子性 呢？</p><p>把 “race++”操作或increase() 方法用 同步块 包裹起来当然是一个办法，但是如果改成如代码清单13-4所示的代码，那效率将会提高许多。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 <span class="number">13</span><span class="number">-4</span> Atomic的原子自增运算</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Atomic 变量自增运算测试</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @author zzm</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicTest</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AtomicInteger race = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">      race.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREADS_COUNT = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws Exception</span>&#123;</span><br><span class="line">      Thread[] threads = <span class="keyword">new</span> Thread[THREADS_COUNT];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREADS_COUNT; i++)&#123;</span><br><span class="line">        threads[i] = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">          @Override</span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>()&#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREADS_COUNT; i++)&#123;</span><br><span class="line">              increase();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        threads[i].start();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(Thread.activeCount() &gt; <span class="number">1</span>)</span><br><span class="line">          thread.<span class="built_in">yield</span>();</span><br><span class="line"></span><br><span class="line">      System.out.<span class="built_in">println</span>(race);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p>200000</p><p>使用 AtomicInteger 代替 int 后，程序输出了正确的结果，<br>一切都要归功于 incrementAndGet()方法 的 原子性。<br>它的实现 其实非常 简单，如代码清单13-5所示。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 13-5 incrementAndGet()方法的JDK源码</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">/*<span class="strong">*</span></span><br><span class="line"><span class="strong">  *</span> Atomically  increment by one the current value.</span><br><span class="line"><span class="code">  * @return the updated value</span></span><br><span class="line"><span class="code">  */</span></span><br><span class="line"><span class="code">  public final int incrementAndGet()&#123;</span></span><br><span class="line"><span class="code">    for(;;)&#123;</span></span><br><span class="line"><span class="code">      int current = get();</span></span><br><span class="line"><span class="code">      int next = current + 1;</span></span><br><span class="line"><span class="code">      if(compareAndSet(current, next))&#123;</span></span><br><span class="line"><span class="code">        return next;</span></span><br><span class="line"><span class="code">      &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>incrementAndGet()方法 在一个 无限循环 中，<br>不断尝试 将一个比当前值 大1的新值 赋值给自己。<br>如果失败了，那说明在执行 “获取-设置” 操作的时候 值已经有了修改，<br>于是 再次循环 进行下一次操作，直到设置成功为止。</p><p>尽管 CAS 看起来很美，但显然这种操作无法涵盖 互斥同步的所有使用场景，<br>并且 CAS 从语义上来说 并不是完美的，存在这样一个 逻辑漏洞：<br>如果一个 变量V 初次读取的时候是 A值，<br>并且在准备赋值的时候 检查到它仍然为A值，<br>那我们就能说它的值 没有被其他线程改变过了吗？<br>如果在这段期间 它的值曾经被改成了B， 后来又被改回A，<br>那 CAS操作 就会误认为它 从来没有被改变过。</p><p>这个 漏洞 称为 CAS操作 的 “ABA问题”。</p><p>J.U.C包 为了解决这个问题，提供了一个带有标记的 原子引用类“AtomicStampedReference”，<br>它可以通过控制 变量值的版本 来保证 CAS的正确性。</p><p>不过目前来说这个类 比较“鸡肋”，大部分情况下 ABA问题 不会影响 程序并发的正确性，<br>如果需要 解决ABA问题，改用传统的 互斥同步 可能会比 原子类更高效。</p><h6 id="3-无同步方案"><a href="#3-无同步方案" class="headerlink" title="3.无同步方案"></a>3.无同步方案</h6><p>要保证 线程安全，并不是一定就要进行 同步，两者没有 因果关系。</p><p>同步 只是保证 共享数据争用时的正确性 的手段，<br>如果一个方法 本来就不涉及 共享数据，<br>那它自然就无需 任何同步措施 去保证 正确性，<br>因此会有一些代码天生就是 线程安全的，笔者简单地介绍其中的两类。</p><p><strong>可重入代码（Reentrant Code）</strong>:<br>这种代码也叫做 纯代码（Pure Code），<br>可以在 代码执行的任何时刻 中断它，<br>转而去 执行另外一段代码（包括 递归调用它本身），<br>而在 控制权 返回后，<br>原来的程序 不会出现任何错误。</p><p>相对 线程安全 来说，<br>可重入性 是更基本的特性，<br>它可以保证 线程安全，<br>即所有的 可重入 的代码都是 线程安全的，<br>但是并非所有的 线程安全 的代码都是 可重入的。</p><p>可重入代码 有一些 共同的特征，<br>例如 不依赖存储在堆上的数据 和 公用的系统资源、用到的状态量 都由参数中传入、不调用非可重入的方法等。</p><p>我们可以通过一个简单的原则来判断 代码是否具备可重入性：<br>如果一个方法，它的返回结果是可以 预测的，只要输入了相同的数据，就都能返回相同的结果，那它就满足 可重入性 的要求，当然也就是 线程安全的。</p><p><strong>线程本地存储（Thread Local Storage）</strong>:<br>如果一段代码中 所需要的数据 必须与 其他代码 共享，<br>那就看看这些 共享数据的代码 是否能保证 在同一个线程中 执行？<br>如果能保证，我们就可以把 共享数据的可见范围 限制在 同一个线程之内，<br>这样，无须 同步  也能保证 线程之间 不出现 数据争用 的问题。</p><p>符合这种特点的应用并不少见，<br>大部分使用 消费队列的架构模式（如“生产者-消费者”模式）都会将 产品的消费过程 尽量在 一个线程中 消费完，<br>其中最重要的一个应用实例就是 经典Web交互模型 中的 “一个请求对应一个服务器线程”（Thread-per-Request） 的处理方式，<br>这种 处理方式的广泛应用 使得很多 Web服务端应用 都可以使用 线程本地存储 来解决 线程安全问题。</p><p>Java语言中，<br>如果 一个变量 要被 多线程 访问，可以使用 volatile关键字 声明它为 “易变的”；<br>如果 一个变量 要被 某个线程 独享，Java中就没有类似C++中 __declspec(thread)这样的关键字，<br>不过还是可以通过 java.lang.ThreadLocal类 来实现 线程本地存储 的功能。</p><blockquote><p>在 Visual C++ 中是 “<strong>declspec(thread)”关键字，而在 GCC 中是“</strong>thread”。</p></blockquote><p>每一个线程的 Thread对象中都有一个 ThreadLocalMap对象，<br>这个对象 存储了一组 以 ThreadLocal.threadLocalHashCode 为 键 ，以 本地线程变量 为 值 的 K-V值对，<br>ThreadLocal对象 就是 当前线程的ThreadLocalMap的 访问入口，<br>每一个 ThreadLocal对象 都包含了 一个独一无二的 threadLocalHashCode值，<br>使用这个值 就可以在线程 K-V值对 中找回 对应的本地线程变量。</p><h4 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h4><p>高效并发 是从 JDK1.5到JDK1.6的一个 重要改进，<br>HotSpot虚拟机 开发团队在这个版本上花费了大量的精力去实现 各种锁优化技术，<br>如 适应性自旋（Adaptive Spinning）、锁消除（Lock Elimination）、锁粗化（Lock Coarsening）、轻量级锁（Lightweight Locking）和偏向锁（Biased Locking）等，<br>这些技术都是为了 在线程之间 更高效地 共享数据，<br>以及 解决竞争问题，<br>从而 提高程序的执行效率。</p><h5 id="自旋锁与自适应自旋"><a href="#自旋锁与自适应自旋" class="headerlink" title="自旋锁与自适应自旋"></a>自旋锁与自适应自旋</h5><p>前面我们讨论 互斥同步 的时候，<br>提到了 互斥同步 对性能最大的影响 是阻塞的实现，<br>挂起线程 和 恢复线程 的操作都需要 转入内核态 中完成，<br>这些操作给系统的 并发性能 带来了很大的压力。</p><p>同时，虚拟机 的开发团队也注意到在许多应用上，<br>共享数据的锁定状态 只会持续很短的一段时间，<br>为了这段时间 去挂起和恢复线程 并不值得。</p><p>如果 物理机器 有一个以上的 处理器，<br>能让 两个或两个以上的线程 同时并行执行，<br>我们就可以让  后面请求锁的那个线程 “稍等一下”，<br>但不放弃 处理器的执行时间，<br>看看 持有锁的线程 是否很快就会释放锁。</p><p>为了让线程等待，我们只需让 线程执行一个忙循环（自旋），这项技术就是所谓的 自旋锁。</p><p>自旋锁 在 JDK1.4.2 中就已经引入，<br>只不过 默认 是 关闭的，<br>可以使用 -XX:+UseSpinning 参数来开启，<br>在 JDK1.6 中就已经改为 默认开启了。</p><p>自旋等待 不能代替 阻塞，<br>且先不说对 处理器数量的要求，<br>自旋等待 本身虽然 避免了线程切换的开销，<br>但它是要 占用处理器时间的，<br>因此，如果 锁 被占用的时间 很短，自旋等待 的 效果就会非常好，<br>反之，如果 锁 被占用的时间 很长，那么 自旋的线程 只会 白白消耗处理器资源，<br>而不会做 任何有用的工作，<br>反而会带来 性能上的浪费。</p><p>因此，自旋等待的时间 必须要有 一定的限度，<br>如果 自旋超过了限定的次数 仍然没有 成功获得锁，<br>就应当使用 传统的方式 去挂起线程了。</p><p>自旋次数 的 默认值 是 10次，用户可以使用参数-XX:PreBlockSpin 来更改。</p><p>在 JDK1.6 中引入了 自适应的自旋锁。</p><p>自适应 意味着 自旋的时间 不再固定了，<br>而是由 前一次在同一个锁上的自旋时间 及 锁的拥有者的状态 来决定。</p><p>如果在 同一个锁对象上，<br>自旋等待 刚刚成功获得过锁，并且 持有锁的线程 正在运行中，<br>那么 虚拟机 就会认为 这次自旋 也很有可能再次成功，<br>进而它将 允许 自旋等待 持续相对更长的时间，比如100个循环。</p><p>另外，如果 对于某个锁，自旋 很少成功获得过，<br>随着 程序运行和性能监控信息 的 不断完善，<br>虚拟机 对 程序锁 的 状况预测 就会越来越准确，<br>虚拟机 就会变得 越来越“聪明”了。</p><h5 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h5><p>锁消除 是指 虚拟机 即时编译器 在运行时，<br>对一些代码上 要求 同步，但是被检测到 不可能存在共享数据竞争的锁 进行 消除。</p><p>锁消除 的 主要判定依据 来源于 逃逸分析 的 数据支持（第11章已经讲解过 逃逸分析技术），<br>如果判断 在一段代码中，堆 上的所有 数据 都不会 逃逸出去 从而被 其他的线程访问到，<br>那就可以把它们当做 堆上数据对待，<br>认为它们是 线程私有的，同步加锁 自然也就无须运行。</p><p>也许读者会有疑问， 变量 是否逃逸，<br>对于 虚拟机 来说需要使用 数据流分析 来确定，<br>但是程序员自己应该时很清楚的，怎么会在 明知道不存在数据争用的情况下 要求同步呢？<br>答案是有许多 同步措施 并不是程序员自己加的，<br>同步的代码 在java程序中的 普遍程度 也许超过了大部分读者的想象。</p><p>我们来看看代码清单13-6中的例子，这段非常简单的代码 仅仅是输出3个字符串相加的结果，<br>无论是 源码字面上 还是 程序语义上 都没有同步。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 13-6 一段看起来没有同步的代码</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">public String concatString(String s1,String s2,String s3)&#123;</span><br><span class="line"><span class="code">  return s1+s2+s3;</span></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>我们也知道，<br>由于 String是一个不可变的类，对字符串的连接操作 总是通过生成 新的String对象 来进行的，<br>因此 Javac编译器 会对 String连接 做 自动优化。</p><p>在 JDK1.5 之前，会转化为 StringBuffer对象的连续append()操作，<br>在 JDK1.5及以后的版本中，会转为 StringBuilder对象的连续append()操作，<br>即代码清单13-6中的代码 可能会变成代码清单 13-7的样子。</p><blockquote><p>客观地说，既然谈到 锁消除与逃逸分析，那 虚拟机 就不可能是 JDK1.5之前的版本，实际上会转化为 非线程安全的StringBuilder 来完成字符串拼接，并不会加锁， 但这也不影响笔者用这个例子证明 Java对象中同步的普遍性。</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 13-7 Javac转化后的字符串连接操作</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">public String concatString(String s1,String s2,String s3)&#123;</span><br><span class="line"><span class="code">  StringBuffer sb = new StringBuffer();</span></span><br><span class="line"><span class="code">  sb.append(s1);</span></span><br><span class="line"><span class="code">  sb.append(s2);</span></span><br><span class="line"><span class="code">  sb.append(s3);</span></span><br><span class="line"><span class="code">  return sb.toString();</span></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>现在大家还认为这段代码没有涉及同步吗？<br>每个 StringBuffer.append() 方法中都有一个 同步块，锁就是sb对象。<br>虚拟机 观察 变量sb，很快就会发现它的 动态作用域 被限制在 concatString()方法内部。</p><p>也就是说，sb的所有引用 永远不会 “逃逸” 到 concatString() 方法之外，<br>其他线程 无法访问 到 它，<br>因此，虽然这里有锁，但是可以被 安全地消除掉，<br>在 即时编译 之后，这段代码就会忽略掉 所有的同步块 而直接执行了。</p><h5 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h5><p>原则上，我们在编写代码的时候，总是推荐将 同步块的作用范围 限制得 尽量小——只在 共享数据的实际作用域 中才进行同步，<br>这样是为了 使得需要 同步的操作数量 尽可能 变小，<br>如果存在 锁竞争，那等待 锁的线程 也能尽快拿到锁。</p><p>大部分情况下，上面的原则都是正确的，<br>但是如果 一系列的连续的动作 都对 同一个对象 反复加锁和解锁，<br>甚至 加锁操作 是出现在 循环体中的，<br>那即是没有 线程竞争，频繁地进行互斥同步操作 也会导致 不必要的性能损耗。</p><p>代码清单13-7中 连续的append()方法就属于这类情况。</p><p>如果 虚拟机 探测到有这样 一串零碎的操作 都对 同一个对象加锁，<br>将会把 加锁同步的范围 扩展（粗化）到 整个操作序列的外部，<br>以代码清单13-7为例，就是扩展到第一个append()操作之前 直至 最后一个append()操作之后，<br>这样只需要 加锁一次 就可以了。</p><h5 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h5><p>轻量级锁 是 JDK1.6之中 加入的 新型锁机制，<br>它名字中的 “轻量级” 是 相对于 使用 操作系统互斥量来实现的传统锁 而言的，<br>因此 传统的锁机制 就称为 “重量级”锁。</p><p>首先需要强调的一点是， 轻量级锁 并不是用来 代替 重量级锁 的，<br>它的本意 是在 没有多线程竞争的前提下，<br>减少 传统的重量级锁 使用 操作系统互斥量 产生的性能消耗。</p><p>要理解 轻量级锁，<br>以及后面会讲到的 偏向锁的原理和运作过程，<br>必须从 HotSpot虚拟机的对象（对象头部分）的内存布局开始介绍。</p><p>HotSpot虚拟机的对象头（Object Header）分为两部分信息，<br>第一部分 用于存储 对象自身的 运行时数据，如哈希码（HashCode）、GC分代年龄（Generational GC Age）等，<br>这部分数据的长度 在32位和64位的 虚拟机中 分别为 32bit和64bit，官方称它为 “Mark Word”，<br>它是 实现轻量级锁 和 偏向锁 的 关键。</p><p>另一部分 用于存储 指向方法区对象 类型数据的指针，<br>如果是数组对象的话，还会有一个额外的部分 用于存储 数组长度。</p><p>对象头信息 是与 对象自身定义的 数据无关的 额外存储成本，<br>考虑到 虚拟机的空间效率，<br>Mark Word 被设计成一个 非固定的数据结构 以便在 极小的空间内 存储尽量多的信息，<br>它会根据对象的状态 复用 自己的 存储空间。</p><p>例如，在32位的HotSpot虚拟机中 对象未被锁定的状态下，<br>Mark Word的 32bit空间的 25bit 用于存储 对象哈希码（HashCode），<br>4bit 用于存储 对象分代年龄，<br>2bit 用于存储 锁标志位，<br>1bit 固定为 0，<br>在其他状态（轻量级锁定、重量级锁定、GC标记、可偏向）下 对象的存储内容 见表13-1。</p><table>  <thead>    <tr>      <th colspan="2">表 13-1 HotSpot虚拟机对象头 Mark Word</th>    </tr>  </thead>  <tr>    <th>存储内容</th>    <th>标志位</th>    <th>状态</th>  </tr>  <tr>    <td>对象哈希码、对象分代年龄</td>    <td>01</td>    <td>未锁定</td>  </tr>    <tr>    <td>指向锁记录的指针</td>    <td>00</td>    <td>轻量级锁定</td>  </tr>    <tr>    <td>指向重量级锁的指针</td>    <td>10</td>    <td>膨胀（重量级锁定）</td>  </tr>   <tr>    <td>空，不需要记录信息</td>    <td>11</td>    <td>GC标记</td>  </tr>   <tr>    <td>偏向线程ID、偏向时间戳、对象分代年龄</td>    <td>01</td>    <td>可偏向</td>  </tr></table><p>简单地介绍了 对象的内存布局 后，<br>我们把话题返回到 轻量级锁的执行过程上。</p><p>在代码进入 同步块 的时候，<br>如果此 同步对象 没有被 锁定（锁标志位 为“01”状态），<br>虚拟机 首先将 在当前线程的 栈帧 中 建立一个名为 锁记录（Lock Record）的空间，<br>用于存储 锁对象目前的Mark Word的拷贝<br>（官方把这份拷贝加了一个 Displaced前缀，即 Displaced Mark Word），<br>这时候 线程堆栈 与 对象头的状态 如图13-3所示。</p><p>然后，<br>虚拟机 将使用 CAS操作 尝试将 对象的Mark Word 更新为指向 Lock Record的指针。</p><p>如果这个更新动作 成功了，那么这个线程 就拥有了 该对象的锁，<br>并且 对象Mark Word 的 锁标志位（Mark Word的最后2bit）将转变为“00”，<br>即表示此对象处于 轻量级锁定状态，<br>这时候 线程堆栈与对象头的状态 如图13-4所示。</p><blockquote><p>图13-3和图13-4来源于 HotSpot虚拟机的一位Senior Staff Engineer——Paul Hohensee所写的PPT “The Hotspot Java Virtual Machine”。</p></blockquote><p>如果这个更新动作 失败了，虚拟机 首先会检查 对象的Mark Word 是否指向 当前线程的栈帧，<br>如果只说明 当前线程已经拥有了这个对象的锁，那就可以直接 进入同步块 继续执行，<br>否则说明 这个锁对象 已经被其他线程 抢占了。</p><p>如果有两条以上的 线程 争用同一个锁，<br>那 轻量级锁 就不再有效，要 膨胀 为 重量级锁，<br>锁标志 的 状态值 变为 “10“，<br>Mark Word中存储的 就是指向 重量级锁（互斥量）的指针，<br>后面 等待锁的线程 也要进入 阻塞状态。</p><p>上面描述的是 轻量级锁的枷锁过程，<br>它的 解锁过程 也是通过 CAS操作来进行的，<br>如果 对象的Mark Word 仍然指向这 线程的锁记录，<br>那就用 CAS操作 把 对象的Mark Word 和 线程中复制的Displaced Mark Word替换回来，<br>如果替换成功，整个同步过程就完成了。<br>如果替换失败，说明有其他线程 尝试过获取该锁，那就要在释放锁的同时，唤醒被挂起的线程。</p><p>轻量级锁 能提升 程序同步性能 的依据是 “对于绝大部分的锁，在整个同步周期内都是不存在竞争的”，<br>这是一个经验数据。</p><p>如果没有竞争，轻量级锁使用 CAS操作 避免了使用 互斥量的开销，<br>但如果存在 锁竞争，除了互斥量的开销以外，还额外发生了 CAS操作，<br>因此在 有竞争的情况下， 轻量级锁 会比 传统的重量级锁 更慢。</p><h5 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h5><p>偏向锁 也是 JDK1.6 中引入的一项 锁优化，<br>它的目的是 消除数据在无竞争情况下的同步原语，进一步提高程序的运行性能。</p><p>如果说 轻量级锁 是在 无竞争的情况下 使用 CAS操作 去 消除同步使用的互斥量，<br>那 偏向锁 就是在 无竞争的情况下 想把 整个同步都消除掉，连CAS操作都不做了。</p><p>偏向锁的 “偏”，就是偏心的“偏”、偏袒的“偏”，<br>它的意思是 这个锁 会偏向于 第一个 获得它的线程，<br>如果在接下来的执行过程中，该锁 没有被其他的 线程获取，则持有 偏向锁的 线程 将永远不需要再进行 同步。</p><p>如果读者读懂了前面 轻量级锁 中 关于对象头Mark Word与线程之间 的 操作过程，<br>那 偏向锁的原理 理解起来就会很简单。</p><p>假设当前 虚拟机 启用了 偏向锁（启用参数 -XX:+UseBiasedLocking，这是 JDK1.6的默认值），<br>那么，当 锁对象 第一次 被线程获取的时候，虚拟机 将会把 对象头中的 标志位 设为 “01”，即偏向模式。</p><p>如果使用 CAS操作 把 获取到这个锁的线程的ID 记录在 对象的Mark Word之中，<br>如果 CAS操作 成功<br>持有 偏向锁的线程 以后每次进入这个锁 相关的同步块时，虚拟机都可以不再进行 任何同步操作<br>（例如 LOcking、Unlocking 及对 Mark Word的Update 等）。</p><p>当有 另外一个线程 去尝试 获取这个锁时，<br>偏向模式 就 宣告结束。</p><p>根据 锁对象 目前是否处于 被锁定 的状态，<br>撤销 偏向（Revoke Bias）后 恢复到 未锁定（标志位为 “01”） 或 轻量级锁定（标志位为“00”）的状态，<br>后续的同步操作 就如上面介绍的 轻量级锁那样执行。</p><p>偏向锁、轻量级锁的状态转化 及 对象的Mark Word的关系如图13-5 所示。</p><p>偏向锁 可以提高 带有 同步 但 无竞争的 程序性能。</p><p>它同样是一个带有 效益权衡（Trade Off）性质的优化，<br>也就是说，它并不一定总是对 程序运行 有利，<br>如果 程序中大多数的锁 总是被 多个不同的线程 访问，<br>那 偏向模式就是多余的。</p><p>在具体问题具体分析的前提下，有时候使用参数 -XX:-UseBiasedLocking 来 禁止偏向锁优化 反而可以 提升性能。</p><h4 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h4><p>本章介绍了 线程安全 所涉及的 概念和分类、同步实现的方式 及 虚拟机的底层运作原理，<br>并且介绍了 虚拟机 为了实现高效并发 所采取的的 一系列 锁优化措施。</p><p>许多资深的程序员都说过，能够写出 高伸缩性的并发程序 是一门艺术，<br>而 了解并发 在系统底层 是如何实现的，则是 掌握这门艺术的 前提条件，<br>也是成长为 高级程序员的必备知识之一。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;深入java虚拟机-第五部分-高效并发&quot;&gt;&lt;a href=&quot;#深入java虚拟机-第五部分-高效并发&quot; class=&quot;headerlink&quot; title=&quot;深入java虚拟机-第五部分-高效并发&quot;&gt;&lt;/a&gt;深入java虚拟机-第五部分-高效并发&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
    
      <category term="面试" scheme="https://fengshana.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="https://fengshana.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="虚拟机" scheme="https://fengshana.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Java虚拟机-Java内存模型与线程</title>
    <link href="https://fengshana.github.io/2020/05/26/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%91/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA12/"/>
    <id>https://fengshana.github.io/2020/05/26/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%91/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA12/</id>
    <published>2020-05-26T14:39:02.793Z</published>
    <updated>2020-05-26T14:42:38.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深入java虚拟机-第五部分-高效并发"><a href="#深入java虚拟机-第五部分-高效并发" class="headerlink" title="深入java虚拟机-第五部分-高效并发"></a>深入java虚拟机-第五部分-高效并发</h2><h3 id="第12章-Java内存模型与线程"><a href="#第12章-Java内存模型与线程" class="headerlink" title="第12章 Java内存模型与线程"></a>第12章 Java内存模型与线程</h3><p><strong>并发处理的广泛应用</strong> 是使得 <strong>Amdah1定律 代替 摩尔定律</strong> 成为<strong>计算机性能发展源动力</strong> 的根本原因， 也是人类 “压榨” 计算机运算能力的最有利武器。  </p><blockquote><p><strong>Amdah1定律</strong> 代替 <strong>摩尔定律</strong> 成为 <strong>计算机性能发展源动力</strong> 的<strong>根本原因</strong>： <strong>并发处理的广泛应用</strong>。</p></blockquote><blockquote><p><strong>Amdah1定律</strong></p><ul><li>通过系统中 <strong>并行化与串行化</strong> 的 <strong>比重</strong> 来 <strong>描述</strong> <strong>多处理器系统</strong> 能获得的 <strong>运算加速能力</strong>；</li></ul></blockquote><blockquote><p><strong>摩尔定律</strong></p><ul><li>则用于 <strong>描述</strong> <strong>处理器</strong> <strong>晶体管数量</strong> 与 <strong>运行效率</strong> 之间的<strong>发展关系</strong>。</li></ul></blockquote><blockquote><p>这两个<strong>定律</strong> 的 <strong>更替</strong> 代表了：近年来 <strong>硬件发展</strong> 从追求 <strong>处理器频率</strong> 到 追求 <strong>多核心并行处理</strong> 的<strong>发展过程</strong>；</p></blockquote><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><strong>多任务处理</strong> 在 <strong>现代计算机操作系统</strong> 中 几乎已是一项必备的技能了。  </p><blockquote><p><strong>现代计算机操作系统</strong> 中，<strong>多任务处理</strong> 几乎已是一项必备的技能。</p></blockquote><p>在许多情况下，让 <strong>计算机</strong> <strong>同时去做几件事情</strong>， 不仅是因为 <strong>计算机的运算能力强大</strong> 了，还要一个很重要的原因是 <strong>计算机的运算速度</strong> 与 <strong>它的存储和通信子系统速度</strong> 的 <strong>差距太大</strong>，<br><strong>大量的时间</strong>都<strong>花费</strong>在<strong>磁盘I/O</strong> 、<strong>网络通信</strong>或者 <strong>数据库访问</strong>上。</p><blockquote><p>让计算机同时去做几件事情的原因：</p><ul><li>计算机的<strong>运算能力</strong>强大</li><li>计算机的 <strong>运算速度</strong> 与 它的 <strong>存储和通信子系统</strong> <strong>速度</strong> 的<strong>差距太大</strong>；</li><li>为了<strong>避免</strong>大量的<strong>时间</strong>都<strong>花费</strong>在 <strong>磁盘I/O</strong>、<strong>网络通信</strong>、<strong>访问数据库</strong>上;</li></ul></blockquote><p>如果不希望 <strong>处理器</strong> 在<strong>大部分时间</strong>里都处于 <strong>等待其他资源的状态</strong>，<br>就必须 使用一些手段 去把 <strong>处理器的预算能力</strong> <strong>压榨</strong> 出来，<br>否则就会<strong>造成</strong>很大的<strong>浪费</strong>，<br>而让<strong>计算机</strong> <strong>同时处理几项任务</strong> 则是最容易想到、也被证明 是非常有效的“压榨”手段；</p><blockquote><p><strong>处理器</strong> 在<strong>大部分时间</strong>里 都处于 <strong>等待其他资源的状态</strong></p></blockquote><blockquote><p>解决 处理器在大部分时间里 都处于 等待其他资源的状态 的手段 or 如何将 处理器的预算能力 压榨出来：</p><ul><li>让计算机 同时处理几项任务（最容易想到、也被证明是非常有效的“压榨”手段）</li></ul></blockquote><p>除了充分利用 <strong>计算机处理器的能力</strong> 外，<strong>一个服务端</strong> <strong>同时</strong>对 <strong>多个客户端提供服务</strong> 则是另一个更<strong>具体的并发应用场景</strong>。</p><blockquote><p>具体的<strong>并发应用场景</strong>：</p><ul><li>一个服务端 同时对 多个客户端 提供服务。</li><li>充分利用计算机处理器的能力（让计算机同时处理几项任务）；</li></ul></blockquote><p><strong>衡量</strong> <strong>一个服务性能</strong> 的 <strong>高低好坏</strong>，<br><strong>每秒事务处理数（Transactions Per Second， TPS）是最重要的指标之一</strong>，<br>它代表着 <strong>一秒内</strong>  <strong>服务端</strong> <strong>平均</strong> <strong>能响应</strong> <strong>的请求总数</strong>，<br>而 <strong>TPS 值</strong> 与 <strong>程序的 并发能力</strong> 又有 非常<strong>密切</strong>的<strong>关系</strong>。</p><blockquote><p><strong>每秒事务处理数（Transactions Per Second ，TPS）</strong></p><ul><li>每秒事务处理数（Transactions Per Second ，TPS）是 <strong>衡量</strong>一个服务<strong>性能高低好坏</strong>的最重要<strong>指标</strong>之一</li><li>每秒事务处理数（Transactions Per Second ，TPS） 代表着 <strong>一秒内 服务端的 平均 能响应 的 请求总数</strong>；</li><li>每秒事务处理数（Transactions Per Second ，TPS）与 <strong>程序的并发能力</strong> 有着非常<strong>密切</strong>的<strong>关系</strong>。</li></ul></blockquote><p>对于 <strong>计算量相同</strong> 的任务， <strong>程序线程</strong> <strong>并发协调</strong> 得 越<strong>有条不紊</strong>，<strong>效率</strong>自然就会<strong>提高</strong>；<br>反之，<strong>线程之间</strong> <strong>频繁阻塞</strong> 甚至 <strong>死锁</strong>，将会大大 <strong>降低</strong> <strong>程序</strong> 的 <strong>并发能力</strong>。</p><blockquote><p>计算量相同的任务，线程之间状态不同将导致不同的结果：</p><ul><li>程序线程 并发协调 有条不紊，效率提高；</li><li>线程之间 频繁阻塞 甚至 死锁，将会大大 降低 程序 的 并发 能力；</li></ul></blockquote><p><strong>服务端</strong> 是 java语言 最擅长的领域之一，这个领域的应用 占了 Java应用中最大的一块份额，</p><blockquote><p>必须以 <strong>代码的总体规模</strong> 来<strong>衡量</strong>， <strong>服务端应用</strong> <strong>不能</strong>与 <strong>JavaCard、移动终端</strong> 这些领域去比 <strong>绝对数量</strong>。</p></blockquote><p>不过 如何写好 并发应用程序 却又是 服务端程序开发的难点之一， 处理好并发方面的问题 通常需要更多的 编码经验 来支持。  </p><blockquote><p><strong>服务端 领域的应用</strong> 占用了java应用 中最大的一块份额。<br>服务端 程序开发的难点之一：如何写好 并发应用程序；<br>处理好并发方面的问题：通常需要更多的 编码经验 来支持；</p></blockquote><p>幸好 <strong>java语言和虚拟机</strong> 提供了许多工具，把 <strong>并发编程</strong> 的门槛 降低了不少。<br>并且各种 <strong>中间件服务器</strong>、<strong>各类框架</strong> 都努力地替程序员 <strong>处理尽可能多的线程并发细节</strong>，<br>使得程序员 在编码时能 <strong>更关注业务逻辑</strong>，<br>而 <strong>不是花费大部分时间</strong>去 <strong>关注此服务</strong> <strong>会同时被多少人调用</strong>、<strong>如何协调硬件资源</strong>。</p><blockquote><p>java语言和虚拟机 提供的许多 工具，降低了 并发编程 的 门槛。<br>各种中间件服务器、各类框架的好处：</p><ul><li>各种 中间件服务器、各类框架 处理尽可能多的线程并发细节；</li><li>程序员能够关注业务逻辑，避免花费大部分时间去 关注此服务 会同时被多少人调用、如何协调硬件资源等</li></ul></blockquote><p>无论<strong>语言、中间件和框架</strong> 如何先进，开发人员都<strong>不能期望 它们能独立完成所有并发处理的事情</strong>，了解 并发的内幕 也是 称为一个高级程序员 不可缺少的课程。<br>（🙃尽管我是如此垃圾，但是我依然热爱—–个屁🙃）</p><blockquote><p>不能去期望 某种语言、中间件或者框架 能够独立完成所有并发处理的事情。</p></blockquote><p>“<strong>高效并发</strong>” 是本书 讲解java虚拟机的最后一部分，<br>将会向读者介绍  <strong>虚拟机</strong>  如何实现 <strong>多线程、多线程之间</strong> 由于 <strong>共享</strong> 和 <strong>竞争数据</strong> 而 <strong>导致的</strong> 一系列 <strong>问题</strong> 及 <strong>解决方案</strong>。</p><h4 id="硬件的效率-与-一致性"><a href="#硬件的效率-与-一致性" class="headerlink" title="硬件的效率 与 一致性"></a>硬件的效率 与 一致性</h4><p>在正式讲解 <strong>java虚拟机并发相关</strong> 的知识之前，我们先花费一点时间去了解一下 <strong>物理计算机</strong>中的 <strong>并发问题</strong>，<br><strong>物理机</strong>遇到的 <strong>并发问题</strong> 与 <strong>虚拟机中的情况</strong> 有不少<strong>相似</strong>之处，<br><strong>物理机</strong> 对 <strong>并发的处理方案</strong> 对于 <strong>虚拟机的实现</strong> 也有相当大的参考意义。</p><blockquote><p>物理机与虚拟机</p><ul><li>物理机 遇到的 并发问题 与 虚拟机中的情况 有不少相似之处；</li><li>物理机 对 并发的处理方案 对于 虚拟机的实现 也有相当大的参考意义。</li></ul></blockquote><p>“让 <strong>计算机</strong> <strong>并发执行</strong> <strong>若干个</strong> <strong>运算任务</strong>” 与 “更<strong>充分</strong> 地 <strong>利用</strong> <strong>计算机处理器的效能</strong>” 之间的因果关系，看起来顺理成章，<br>实际上他们之间的关系 并没有想象中的那么简单，<br>其中一个 重要的<strong>复杂性</strong> 来源是 绝大多数的 <strong>运算任务</strong> 都 <strong>不可能</strong> <strong>只靠</strong> <strong>处理器“计算”</strong> 就能完成，<br><strong>处理器</strong> 至少 要与 <strong>内存交互</strong>，<br>如读取运算数据、存储运算结果等，<br>这个<strong>I/O</strong>操作是很<strong>难消除</strong>的<br>（<strong>无法仅靠寄存器</strong>来<strong>完成</strong>所有运算<strong>任务</strong>）。  </p><p>由于 <strong>计算机的存储设备</strong> 与 <strong>处理器的运算速度</strong> 有几个数量级的差距，<br>所以 <strong>现代计算机系统</strong> 都不得不加入 一层 <strong>读写速度</strong> <strong>尽可能接近</strong> <strong>处理器运算速度</strong> 的 <strong>高速缓存（Cache）</strong> 来作为 <strong>内存与处理器</strong> 之间的<strong>缓冲</strong>：<br>将运算需要使用的<strong>数据</strong> <strong>复制</strong>到 <strong>缓存</strong>中，<br>让<strong>运算</strong>能<strong>快速进行</strong>，<br>当<strong>运算结束</strong>后 再从 <strong>缓存</strong> <strong>同步</strong>回 <strong>内存</strong>之中，<br>这样 <strong>处理器</strong> 就 <strong>无需等待</strong> 缓慢的 <strong>内存读写</strong> 了。</p><blockquote><p>“让计算机 并发执行 若干个运算任务” 与 “更充分地利用计算机处理器的效能”之间因果关系的复杂性来源</p><ol><li>绝大多数的运算任务都不可能只靠 处理器“计算” 就能完成</li><li>处理器 至少 要与 内存交互（如读取运算数据、存储运算结果等）；这个I/O操作是很难消除的；</li><li>无法仅靠寄存器来完成所有运算任务；</li><li>计算机的存储设备 与 处理器的运算速度 有几个数量级的 差距。</li><li>现代计算机系统中加入了 一层 (读写速度尽可能接近处理器运算速度) 的 高速缓存（Cache） 来作为 <strong>内存与处理器之间的缓冲</strong>：<ul><li>将 运算 所需要使用到的 数据 复制到 缓存 中；</li><li>让运算能快速进行；</li><li>当运算结束后，再从 缓存 同步 回 内存 之中；</li><li>这样处理器 就无需等待 缓慢的 内存读写 了；</li></ul></li></ol></blockquote><p>基于 <strong>高速缓存</strong> 的 <strong>存储交互</strong> 很好地解决了 <strong>处理器 与 内存 的速度矛盾</strong>，<br>但是也为 计算机系统 带来更高的<strong>复杂度</strong>，<br>因为它引入了一个新的问题： <strong>缓存一致性（Cache Coherence）</strong>。  </p><blockquote><p>高速缓存 的 存储交互 优缺点：</p><ul><li>优点：解决了 处理器与内存 之间的 速度矛盾；</li><li>缺点：带来了新问题-缓存一致性（Cache Coherence）</li></ul></blockquote><p>在 <strong>多处理器系统</strong> 中，每个 <strong>处理器</strong> 都有 自己的 <strong>高速缓存</strong>，而它们又 <strong>共享</strong> <strong>同一主内存（Main Memory）</strong>。</p><p>当 <strong>多个处理器的运算任务</strong> 都设计 <strong>同一块</strong> <strong>主内存区域</strong> 时，<br> 将可能导致 <strong>各自的缓存数据不一致</strong>，<br> 如果真的发生这种情况，那同步回到 主内存时 以谁的缓存数据为准呢？  </p><p>为了<strong>解决一致性的问题</strong>，<br>需要 各个 <strong>处理器</strong> <strong>访问缓存</strong> 时 都 <strong>遵循</strong> 一些 <strong>协议</strong>，<br>在<strong>读写</strong>时 要<strong>根据协议</strong> 来进行<strong>操作</strong>，<br>这类协议有 MSI、MESI（Illinois Protocl）、MOSI、Synapse、Firefly 及 Dragon Protocol 等。  </p><p>在本章中将会多次提到的 “<strong>内存模型</strong>” 一词，<br>可以理解为 在<strong>特定的操作协议</strong>下，对 <strong>特定的内存或高速缓存</strong> 进行 <strong>读写访问的过程抽象</strong>。  </p><p><strong>不同架构的物理机器</strong> 可以拥有 <strong>不一样的内存模型</strong>，<br>而 <strong>java虚拟机</strong> 也有自己的<strong>内存模型</strong>，<br>并且这里介绍的 <strong>内存访问操作</strong> 与 <strong>硬件的缓存访问操作</strong>具有很高的<strong>可比性</strong>。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---------               -----------                ----------------               ------</span><br><span class="line">|<span class="string"> 处理器 </span>|<span class="string"> &lt;----------&gt; </span>|<span class="string"> 高速缓存 </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string">      缓存     </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string"> 主 </span>|</span><br><span class="line">---------               -----------               |<span class="string">               </span>|<span class="string">               </span>|<span class="string">    </span>|</span><br><span class="line">---------               -----------               |<span class="string">               </span>|<span class="string">               </span>|<span class="string">    </span>|</span><br><span class="line">|<span class="string"> 处理器 </span>|<span class="string"> &lt;----------&gt; </span>|<span class="string"> 高速缓存 </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string">     一致性    </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string"> 内 </span>|</span><br><span class="line">---------               -----------               |<span class="string">               </span>|<span class="string">               </span>|<span class="string">    </span>|</span><br><span class="line">---------               -----------               |<span class="string">               </span>|<span class="string">               </span>|<span class="string">    </span>|</span><br><span class="line">|<span class="string"> 处理器 </span>|<span class="string"> &lt;----------&gt; </span>|<span class="string"> 高速缓存 </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string">      协议     </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string"> 存 </span>|</span><br><span class="line">---------               -----------                ----------------               ------</span><br></pre></td></tr></table></figure><p>除了 <strong>增加</strong> <strong>高速缓存</strong> 之外，<br>为了使得 <strong>处理器内部 的 运算单位</strong> 能尽量被 <strong>充分使用</strong>，<br><strong>处理器</strong> 可能会对 <strong>输入代码</strong> 进行 <strong>乱序执行（Out-Of-Order Execution）优化</strong>，<br><strong>处理器</strong> 会在 <strong>计算之后</strong> 将<strong>乱序执行的结果</strong> <strong>重组</strong>，<br>保证 <strong>该结果 与 顺序执行 的结果是一致的</strong>，<br>但 <strong>并不保证 程序中 各个语句 计算的先后顺序 与 输入代码中的顺序 一致</strong>，<br>因此 ，<br>如果<strong>存在 一个计算任务 依赖 另外一个 计算任务的 中间结果</strong>，<br>那么其 <strong>顺序性并不能靠 代码的先后顺序 来保证</strong>。  </p><p>与 <strong>处理器的乱序执行优化</strong> 类似，<br><strong>java虚拟机</strong> 的 <strong>即时编译器</strong> 中也有类似的 <strong>指令重排序（Instruction Reorder）优化</strong>。</p><blockquote><p>处理器内部 的 运算单位，如何尽可能被 充分利用？</p><ul><li>增加高速缓存</li><li>乱序执行（Out-Of-Order Execution）优化<ul><li>处理器 可能会对 输入代码 进行 乱序执行（Out-Of-Order Execution）优化</li><li>处理器 会在 计算之后 将 乱序执行的结果 重组</li><li>保证 该结果 与 顺序执行 的结果 是一致的；</li><li>但并 不保证 程序中各个语句计算的先后顺序 与 输入代码中的顺序 一致；</li><li>如果存在 一个计算任务 依赖 另外一个计算任务的 中间结果，那么其顺序性 并不能依靠 代码的先后顺序 来保证。</li></ul></li></ul></blockquote><h4 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h4><p><strong>Java虚拟机规范</strong> 中试图定义一种  <strong>Java内存模型（Java Memory Model，JMM）</strong><br>来 <strong>屏蔽掉</strong> 各种 <strong>硬件和操作系统</strong> 的 <strong>内存访问差异</strong>，<br>以 <strong>实现</strong> 让 <strong>Java程序</strong> 在 <strong>各种平台</strong> 下都能达到<strong>一致的内存访问效果</strong>。</p><blockquote><p>本书中的 Java内存模型 都特指 目前正在使用的，即在 JDK1.2 之后建立起来并在 JDK1.5 中完备过的内存模型。</p></blockquote><p>在此之前，主流程序语言（C/C++等） <strong>直接使用</strong> <strong>物理硬件和操作系统的内存模型</strong>，<br>因此，会由于<strong>不同平台上内存模型的差异</strong>，有可能导致程序在一套平台上并发完全<strong>正常</strong>，而在另外一套平台上并发访问却经常<strong>出错</strong>，因此在某些场景就必须针对不同的平台来编写程序。</p><p><strong>定义Java内存模型</strong> 并非一件容易的事情，<br>这个模型必须定义得<strong>足够严谨</strong>，才能让Java的 <strong>并发内存访问操作</strong> <strong>不会产生歧义</strong>；<br>但是，也必须定义得<strong>足够宽松</strong>，使得 虚拟机的实现 有足够的自由空间 去利用 硬件的各种特性（寄存器、高速缓存和指令集中某些特有的指令）来 获取 更好的执行速度。<br>经过长时间的验证和修补，在 JDK1.5（实现了JSR-133）发布后，Java内存模型已经成熟和完善起来了。</p><blockquote><p>JSR-133：Java Memory Model and Thread Specification Revision （Java内存模型和线程规范修订）。</p></blockquote><h5 id="主内存和工作内存"><a href="#主内存和工作内存" class="headerlink" title="主内存和工作内存"></a>主内存和工作内存</h5><p>Java内存模型 的 主要目标 是 定义程序中 各个变量的 访问规则，即在 虚拟机中 将 变量存储到内存 和 从内存中取出变量 这样的底层细节。  </p><p>此处的 变量（Variables）与Java编程中所说的变量 有区别，它 包括了 实例字段、静态字段和构成数组对象的元素，但不包括 局部变量与方法参数，<br>因为后者是 线程私有的，不会被共享，自然就不会存在竞争问题。</p><blockquote><p>此处请读者注意区分概念：<br>如果 局部变量 是一个 reference 类型，它 引用的对象 在 Java堆中 可被 各个线程共享，但是 reference 本身在 Java栈的 局部变量表中，它是线程私有的。</p></blockquote><p>为了获得较好的 执行效能，Java内存模型 并没有限制 执行引擎 使用处理器的 特定寄存器 或 缓存 来和主内存进行交互，也没有限制 即时编译器 进行调整代码执行顺序 这类优化措施。</p><p>Java内存模型 规定了 所有的变量 都 存储在主内存（Main Memory）中（此处的 主内存 与介绍 物理硬件时的主内存 名字一样，两者也可以互相类比，但 此处仅是 虚拟机内存 的一部分）。</p><p>每条线程 还有自己的 工作内存（Working Memory， 可与前面讲的 处理器高速缓存 类比），线程 的 工作内存 中 保存了 被该线程 使用到的 变量 的 主内存 副本拷贝，线程 对 变量 的所有操作（读取、赋值等） 都 必须在工作内存中进行， 而不能直接读写主内存中的变量。  </p><blockquote><p>有不少读者会对这段描述中的 “拷贝副本” 提出疑问，<br>如 “假设线程中访问一个10MB的对象，也会把这10MB的内存复制一份拷贝出来吗？”<br>事实上并不会如此，这个对象的引用、对象中某个在线程访问到的字段 是有可能存在拷贝的，但 不会有 虚拟机 实现成 把整个对象拷贝一次。</p></blockquote><blockquote><p>根据 Java虚拟机规范 的规定<br>volatile变量 依然有工作内存的拷贝<br>但是由于 它 特殊的操作顺序性规定（后文会讲到），<br>所以看起来如同直接在主内存中读写访问一般，因此这里的描述对于 volatile也并不存在例外。</p></blockquote><p>不同的 线程之间 也无法 直接访问 对方工作内存中的 变量，线程间 变量值的传递 均需要 通过主内存来完成，线程、主内存、工作内存三者的交互关系；  </p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">------------              -----------                ----------------               ------</span><br><span class="line">|<span class="string"> Java线程 </span>|<span class="string"> &lt;----------&gt; </span>|<span class="string"> 工作内存 </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string">      Save     </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string"> 主 </span>|</span><br><span class="line">------------              -----------               |<span class="string">       和      </span>|<span class="string">               </span>|<span class="string">    </span>|</span><br><span class="line">------------              -----------               |<span class="string">               </span>|<span class="string">               </span>|<span class="string">    </span>|</span><br><span class="line">|<span class="string"> Java线程 </span>|<span class="string"> &lt;----------&gt; </span>|<span class="string"> 工作内存 </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string">     Load      </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string"> 内 </span>|</span><br><span class="line">------------              -----------               |<span class="string">               </span>|<span class="string">               </span>|<span class="string">    </span>|</span><br><span class="line">------------              -----------               |<span class="string">               </span>|<span class="string">               </span>|<span class="string">    </span>|</span><br><span class="line">|<span class="string"> Java线程 </span>|<span class="string"> &lt;----------&gt; </span>|<span class="string"> 工作内存 </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string">      操作     </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string"> 存 </span>|</span><br><span class="line">------------              -----------                ----------------               ------</span><br></pre></td></tr></table></figure><p>这里所讲的 主内存、工作内存 与本书第2章所讲的Java内存区域中的Java堆、栈、方法区等并不是同一个层次的内存划分，<br>这两者基本上是没有关系的，<br>如果两者一定要勉强对应起来，<br>那从 变量、主内存、工作内存 的定义来看，<br>主内存 主要对应于 Java堆中的对象实例数据部分，<br>而 工作内存 则对应于 虚拟机栈中的部分区域。<br>从更低层次上说，<br>主内存 就直接对应于 物理硬件的内存 ，而为了 获取更好的运行速度，<br>虚拟机（甚至是硬件系统本身的优化措施）可能会让 工作内存 优先存储于 寄存器和高速缓存中，因为程序运行时 主要访问读写的 是工作内存。</p><blockquote><p>除了 实例数据，Java堆 还保存了 对象的其他信息<br>对于 HotSpot虚拟机 来讲，</p><ul><li>有 Mark Word（存储对象哈希码、GC标志、GC年龄、同步锁等信息）</li><li>Klass Point(指向存储类型元数据的指针)</li><li>及一些用于字节对齐补白的填充数据（如果实例数据刚好满足8字节对齐的话，则可以不存在补白）</li></ul></blockquote><h5 id="内存间交互操作"><a href="#内存间交互操作" class="headerlink" title="内存间交互操作"></a>内存间交互操作</h5><p>关于 主内存 与 工作内存 之间的 具体的 交互协议，<br>即 一个变量 如何从 主内存 拷贝到 工作内存、 如何从 工作内存 同步 回 主内存 之类的 实现细节，<br>Java内存模型 定义了以下 8种操作 来完成，<br>虚拟机实现时 必须保证 下面提及的每一种操作 都是 原子的、不可再分的（对于 double 和 long 类型的变量来说，load、store、read 和 write 操作在某些平台上允许有例外，这个问题在12.3.4节再讲）</p><blockquote><p>基于理解难度和严谨性考虑，最新的 JSR-133 文档中，已经放弃采用这8种操作去 定义Java内存模型的访问协议（仅是 描述方式 改变了，Java内存模型 并没有改变）。</p></blockquote><table>  <tr>    <th>operation</th>    <th>名称</th>    <th>作用变量</th>    <th>描述</th>  </tr>  <tr>    <td>lock</td>    <td>(锁定)</td>    <td>作用于 主内存 的 变量</td>    <td>它把 一个 变量 标识为 一条线程 独占 的 状态。</td>  </tr>  <tr>    <td>unlock</td>    <td>(解锁)</td>    <td>作用于 主内存 的 变量</td>    <td>它把 一个 处于锁定状态 的变量 释放出来，释放后的变量 才可以 被 其他线程 锁定。</td>  </tr>  <tr>    <td>read</td>    <td>(读取)</td>    <td>作用于 主内存 的 变量</td>    <td>它把 一个 变量的值 从 主内存 传输到 线程的工作内存中，以便随后的 load动作 使用。</td>  </tr>  <tr>    <td>load</td>    <td>(载入)</td>    <td>作用于 工作内存 的 变量</td>    <td>它把 read操作 从 主内存 中得到的 变量值 放入 工作内存 的变量副本 中。</td>  </tr>   <tr>    <td>use</td>    <td>(使用)</td>    <td>作用于 工作内存 的 变量</td>    <td>它把 工作内存中 一个变量的值 传递给 执行引擎，每当 虚拟机 遇到一个 需要使用到变量的值 的字节码指令时 将会执行这个操作。</td>  </tr>   <tr>    <td>assign</td>    <td>(赋值)</td>    <td>作用于 工作内存 的 变量</td>    <td>它把 一个 从执行引擎 接收到的值 赋给 工作内存的变量，每当 虚拟机 遇到 一个给变量赋值的字节码指令 时 执行这个操作。</td>  </tr>  <tr>    <td>store</td>    <td>(存储)</td>    <td>作用于 工作内存 的 变量</td>    <td>它把 工作内存 中 一个变量的值 传送到 主内存 中，以便 随后的write操作 使用。</td>  </tr>    <tr>    <td>write</td>    <td>(写入)</td>    <td>作用于 主内存 的 变量</td>    <td>它把 store操作 从 工作内存 中得到的 变量的值 放入 主内存 的 变量 中。</td>  </tr></table><p>如果要把 一个变量 从 主内存 复制到 工作内存，那就要 顺序地 执行 read和load 操作；<br>如果要把 变量 从 工作内存 同步回 主内存，就要 顺序地 执行 store和write 操作。</p><p>注意， Java内存模型 只要求上述 两个操作 必须按顺序执行，而没有保证是 连续执行。</p><p>也就是说，read和load之间，store和write之间 是可插入其他指令的，<br>如对主内存中的变量 a、b进行访问时，一种可能出现顺序是 read a、read b、load b、 load a。<br>除此之外，Java内存模型 还规定了 在执行上述8中基本操作时 必须满足如下规则：</p><ul><li>不允许 read和load、store和write 操作之一 单独出现；<ul><li>即 不允许 一个变量 从主内存读取了 但工作内存不接受；</li><li>或者从工作内存发起回写了 但主内存不接受的情况出现。</li></ul></li><li>不允许 一个线程 丢弃 它的 最近的 assign操作；<ul><li>即 变量 在 工作内存 中 改变了 之后 必须把 该变化 同步回 主内存。</li></ul></li><li>不允许 一个线程 无原因地（没有发生过任何assign操作）把 数据 从 线程的工作内存 同步回 主内存。</li><li>一个 新的变量 只能在 主内存 中“诞生”， 不允许 在工作内存中 直接使用 一个未被初始化（load或assign）的变量；<ul><li>换句话说，就是对 一个变量 实施 use、store操作之前，必须先执行过了 assign或load 操作；</li></ul></li><li>一个变量 在 同一时刻 只允许 一条线程 对其进行 lock操作，但 lock操作 可以被 同一条线程 执行多次，多次执行lock后，只有执行相同次数的 unlock操作，变量才会被解锁；</li><li>如果对 一个变量 执行 lock操作，那将会 清空工作内存 中 此变量的值，在 执行引擎 使用这个变量前，需要重新执行 load或assign操作 初始化变量的值。</li><li>如果 一个变量 事先没有被 lock操作 锁定，那就不允许 对它执行 unlock操作，也不允许去 unlock 一个被其他线程锁定住的 变量。</li><li>对 一个变量 执行 unlock操作 之前，必须先把 此变量 同步回 主内存 中（执行 store、write操作）；</li></ul><p>这 8种内存访问操作 以及 上述规则限定，再加上稍后介绍的对 volatile 的一些特殊规定，就已经完全确定了 java程序中 哪些内存访问操作 在并发下 是安全的。</p><p>由于这种定义 相当严谨 但又十分 烦琐（我觉得周大大这里可能是想打繁琐？），实践起来很麻烦，<br>所以 在12.3.6节中笔者将介绍这种定义的 一个等效判断原则 —– 先行发生原则，用来确定 一个访问 在并发环境下 是否 安全。</p><h5 id="对于-volatile-型变量的-特殊规则"><a href="#对于-volatile-型变量的-特殊规则" class="headerlink" title="对于 volatile 型变量的 特殊规则"></a>对于 volatile 型变量的 特殊规则</h5><p>关键字 volatile 可以说是 Java虚拟机 提供的 最轻量级 的 同步机制，<br>但是它 并不容易 完全被正确、 完整地理解，以至于许多程序员都习惯不去使用它，<br>遇到需要处理 多线程数据 竞争问题 的时候 一律使用 synchronized 来进行 同步。<br>（然而我也不是习惯不习惯的问题，是我根本不会用synchronized，不懂多线程并发这一块，根本没入门的问题）</p><p>了解 volatile变量的语义 对后面了解 多线程操作的其他特性 很有意义，<br>在本节中 我们将 多花费一些时间去弄清楚 volatile的语义 到底是什么。</p><p>Java内存模型 对 volatile 专门定义了 一些 特殊的访问规则，<br>在介绍 这些比较 拗口的规则定义 之前，笔者先用 不那么正式 但 通俗易懂的 语言 来介绍一下 这个关键字的作用。<br>（好人一生平安<del>~</del> 虽然我也不一定能看懂你通俗易懂的语言）</p><p>当 一个变量 定义为 volatile 之后，它 将具备 两种特性，<br>第一 是保证 此变量 对 所有线程 的 可见性，<br>这里的 “可见性” 是指当 一条线程 修改了 这个 变量的值，新值 对于 其他线程 来说 是可以立即得知的。<br>而 普通变量 不能做到这一点， 普通变量 的 值 在线程间 传递 均需要通过 主内存 来完成，<br>例如，线程A 修改 一个普通变量的值，然后 向 主内存 进行 回写，另外一条线程B 在线程A 回写完成 了之后 再从 主内存 进行 读取 操作，新变量值 才会对线程B可见。</p><p>（诶诶诶，这个我看懂了，可能原因在于我看了视频的原因，我怎么可以这么蠢。。。。）</p><p>关于 volatile变量的可见性，经常会被开发人员误会，认为以下描述成立：“volatile变量 对所有线程 是 立即可见 的，对 volatile变量 所有的 写操作 都能 立刻反应 到 其他线程之中，换句话说， volatile变量 在 各个线程中 是 一致的，所以基于 volatile变量 的 运算 在并发下 是安全的”。  </p><p>这句话的论据部分 并没有错， 但是其论据 并不能得出 “基于 volatile变量 的 运算 在并发下 是安全的”这个结论。  </p><p>（emm，我觉得论据部分也有点毛病，<br>个人观点：”volatile变量 对所有线程 是 立即可见的”， 立即可见吗？<br>不是之前说 普通变量的值在线程间传递均需要通过主内存来完成吗，<br>那既然是要通过主内存来完成的话，那是不是就需要执行那8个操作其中的read读取操作以及load、use操作等；<br>然后论据部分当中的 “对volatile变量 所有的 写操作 都能 立刻反应 到其他线程之中” 细品一下哦，能立刻反应？<br>不是8个操作当中工作内存的赋值操作assign这种的操作一旦有了还需要同步回主内存的吗？<br>也就是执行store以及write操作，以及立刻反映到其他线程之中难道不要 其他线程又要去清空其工作内存当中的该变量然后重新进行read、load….操作之类的？<br>还是说emm，<br>工作内存与主内存之间的这个交互非常快？快到那几个操作所需花费时间可以忽略不计所以说 立即可见、立即反应？<br>害，主要是自己也不懂，看了书和视频之后吧有问题也没有人可以解答下….〒▽〒）</p><p>volatile变量 在 各个线程的 工作内存 中不存在一致性问题<br>（在 各个线程的 工作内存中，volatile变量 也可以存在 不一致的 情况，但由于 每次使用之前 都要先刷新，执行引擎 看不到 不一致的情况，因此可以认为 不存在一致性问题），<br>但是Java里面的运算 并非 原子操作，导致 volatile变量 的运算 在 并发下一样是不安全的，</p><p>我们可以 通过一段简单的演示来说明原因，请看代码清单12-1 中演示的例子。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 <span class="number">12</span><span class="number">-1</span> <span class="keyword">volatile</span> 的运算</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * volatile 变量自增运算测试</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @author zzm</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> &#123;</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> race = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">        race++;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREADS_COUNT = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[THREADS_COUNT];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREADS_COUNT; i++)&#123;</span><br><span class="line">          threads[i] = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>()&#123;</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">                increase();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待所有累加线程都结束</span></span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount() &gt; <span class="number">1</span>)</span><br><span class="line">            Thread.<span class="built_in">yield</span>();</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(race);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>这段代码 发起了20个线程，每个线程 对 race变量 进行10000次自增操作，如果这段代码能够 正确并发 的话，最后输出的结果应该是200000。</p><p>读者运行完这段代码之后，并不会获得期望的结果，而且会发现 每次运行程序，输出的结果都不一样，都是一个小于 200000的数字，这是为什么呢？</p><p>问题就出现在 自增运算 “race++”之中，<br>我们用 Javap 反编译 这段代码之后，会得到代码清单12-2，<br>发现只有一行代码的 increase() 方法在 Class文件 中是由 4条字节码指令构成的（return 指令不是由 race++ 产生的，这条指令可以不计算），<br>从 字节码层面上 很容易就分析出 并发失败 的原因了：<br>当 getstatic指令 把 race 的值 取到 操作栈顶时，volatile关键字 保证了 race的值 在此时是正确的的，<br>但是在执行 iconst_1、iadd这些指令的时候，<br>其他线程 可能已经把 race的值 加大了，<br>而在 操作栈顶 的值 就变成了 过期的数据，<br>所以 putstatic 指令执行后就可能把 较小的 race值 同步回 主内存之中。</p><p>（恭喜我，竟然又看懂了这一段通俗易懂的话，原因可能在于我看了视频的缘故。。。）  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 <span class="number">12</span><span class="number">-2</span> VolatileTest 的字节码</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> increase();</span><br><span class="line">  Code:</span><br><span class="line">    Stack=<span class="number">2</span>, Locals=<span class="number">0</span>, Args_size=<span class="number">0</span></span><br><span class="line">    <span class="number">0</span>：   getstatic      #<span class="number">13</span>; <span class="comment">//Field race:I</span></span><br><span class="line">    <span class="number">3</span>：   iconst_1</span><br><span class="line">    <span class="number">4</span>：   iadd</span><br><span class="line">    <span class="number">5</span>：   putstatic      #<span class="number">13</span>; <span class="comment">//Field race:I</span></span><br><span class="line">    <span class="number">8</span>：   <span class="keyword">return</span></span><br><span class="line">  LineNumberTable:</span><br><span class="line">    Line <span class="number">14</span>: <span class="number">0</span></span><br><span class="line">    Line <span class="number">15</span>: <span class="number">8</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>客观地说，笔者在此使用 字节码 来分析 并发问题，仍然是 不严谨的，<br>因为即使 编译出来 只有一条字节码指令， 也不意味着 执行这条指令就是 一个原子操作。  </p><p>一条字节码指令 在 解释执行 时，解释器将要运行许多代码才能实现 它的语义，<br>如果是 编译执行，一条字节码指令 也可能 转化成若干条 本地机器码指令，<br>此处使用 -XX:+PrintAssembly 参数输出 反汇编 来分析会 更严谨 一些，<br>但考虑到读者阅读的方便，并且字节码已经能说明问题，所以此处使用字节码分析。</p><p>（我觉得这个考虑到读者方便，可能是考虑到了像我这种小白到时候看不懂，就解释的也就越讲越多越讲越多。。。。 真是太贴心了，贴心的暖宝宝）</p><p>由于 volatile变量 只能保证 可见性，<br>在不符合 以下两条规则的运算场景中，我们仍然要通过 加锁（使用 synchronized或java.util.concurrent中的原子类）来保证原子性。</p><ul><li>运算结果 并不依赖 变量 的当前值，或者 能够确保 只有单一的线程修改 变量的值。</li><li>变量 不需要 与 其他的状态变量 共同参与 不变约束。</li></ul><p>而在像 如下的代码清代12-3所示的 这类场景就很适合使用 volatile变量 来控制并发，当 shutdown() 方法被调用时，能保证 所有线程 中执行的 doWork() 方法都立即停下来。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 12-3 volatile 的使用场景</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">volatile boolean shutdownRequested;</span><br><span class="line"></span><br><span class="line">public void shutdown()&#123;</span><br><span class="line"><span class="code">      shutdownRequested = true;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void doWork()&#123;</span><br><span class="line"><span class="code">      while(!shutdownRequested)&#123;</span></span><br><span class="line"><span class="code">        // do stuff</span></span><br><span class="line"><span class="code">      &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>使用 volatile变量 的第二个语义 是 禁止指令重排序优化，<br>普通的变量 仅仅 会保证 在该方法的执行过程中 所有依赖 赋值结果 的地方 都能获取到 正确的结果，<br>而不能 保证 变量赋值 操作的顺序 与 程序代码中的执行顺序 一致。  </p><p>因为 在一个线程的方法 执行过程中 无法感知到这点，<br>这也就是 Java内存模型 中描述的所谓的 “线程内 表现为 串行 的语义”（Within-Tread As-If-Serial Semantics）。</p><p>上面的描述仍然不太容易理解，我们还是继续通过一个例子来看看为何 指令重排序 会 干扰 程序的并发执行，<br>演示程序如代码清单12-4所示。<br>（周大大真是说到我的心坎里去了，真是太为我这种人考虑了，岂止是不太容易理解！！简直，我都不好意思说自己是中国人了。害；╮(╯▽╰)╭）</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 12-4 指令重排序</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">Map configOptions;</span><br><span class="line"></span><br><span class="line">char[] configText;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此 变量 必须定义为 volatile</span></span><br><span class="line">volatile boolean initialized = false;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设以下代码在 线程A 中执行</span></span><br><span class="line"><span class="comment">// 模拟 读取配置信息，当读取完成后 将 initialized 设置为 true 以通知其他线程 配置可用</span></span><br><span class="line">configOptions = new HashMap();</span><br><span class="line">configText =  readConfigFile(fileName);</span><br><span class="line">processConfigOptions(configText, configOptions);</span><br><span class="line">initialized = true;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设以下代码在 线程B 中执行</span></span><br><span class="line"><span class="comment">// 等待 initialized 为 true，代表 线程A 已经把配置信息 初始化完成</span></span><br><span class="line">while (!initialized)&#123;</span><br><span class="line"><span class="code">  sleep();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 线程A 中初始化好的配置信息</span></span><br><span class="line">doSomethingWithConfig();</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>代码清单12-4中的程序是一段 伪代码，其中描述的场景十分常见，只是我们在处理配置文件时一般不会出现并发而已。  </p><p>如果定义 initialized变量 没有使用 volatile修饰，<br>就可能会由于 指令重排序的优化，<br>导致位于 线程A 中的最后一句代码 “initialized=true”被提前执行（这里虽然使用Java作为伪代码，但所指的 重排序优化 是 机器级 的 优化 操作，提前执行 是指 这句话对应的 汇编代码 被 提前执行），<br>这样在 线程B 中使用配置信息的代码 就可能出现错误，<br>而 volatile关键字 则可以避免此类情况的发生。</p><blockquote><p>volatile 屏蔽 指令重排序 的语义 在JDK1.5 才被完全修复，此前的JDK中 即使将变量声明为 volatile 也仍然不能完全避免 重排序 所导致的问题<br>(主要是 volatile变量 前后的代码 仍然存在 重排序 问题)，这点 也是在 JDK1.5 之前的Java中 无法安全地使用 DCL（双锁检测）来实现单例模式的原因。</p></blockquote><p>指令重排序 是 并发编程 中最容易让开发人员产生疑惑的地方，除了上面伪代码的例子之外，<br>笔者再举一个可以实际操作运行的例子来分析 volatile关键字 是如何 禁止指令重排序优化的。  </p><p>代码清单12-5是一段标准的 DCL单例代码，可以观察 加入volatile和未加入volatile关键字 所生成 汇编代码 的差别<br>（如何获得JIT的汇编代码，请参考4.2.7节）。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 12-5 DCL单例模式</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">public class Singleton&#123;</span><br><span class="line">    private volatile static Singleton instance;</span><br><span class="line"></span><br><span class="line">    public static Singleton getInstance()&#123;</span><br><span class="line">      <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">        synchronized ( Singleton.class )&#123;</span><br><span class="line">          <span class="keyword">if</span>(instance ==<span class="literal">null</span> )&#123;</span><br><span class="line">           <span class="built_in"> instance </span>= new Singleton();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">      Singleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>编译后，这段代码对 instance变量 赋值部分 如代码清单12-6所示。</p><p>(卧槽，我有病我为什么要抄这个代码清单12-6…)</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 <span class="number">12</span><span class="number">-6</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">0x01a3de0f</span>: mov       $<span class="number">0x3375cdb0</span>,%esi           ; ...beb0cd75 <span class="number">33</span></span><br><span class="line">                                                 ;    &#123;oop(<span class="string">'Singleton'</span>)&#125;</span><br><span class="line"><span class="number">0x01a3de14</span>: mov       %eax,<span class="number">0x150</span>(%esi)           ; ..<span class="number">.89865001</span> <span class="number">0000</span></span><br><span class="line"><span class="number">0x01a3de1a</span>: shr       $<span class="number">0x9</span>,%esi                  ; ...clee09</span><br><span class="line"><span class="number">0x01a3de1d</span>: movb      $<span class="number">0x0</span>,<span class="number">0x1104800</span>(%esi)       ; ...c6860048 <span class="number">100100</span></span><br><span class="line"><span class="number">0x01a3de24</span>: lock  add1 $<span class="number">0x0</span>,(%esp)               ; ...f0830424 <span class="number">00</span></span><br><span class="line">                                                 ; *putstatic instance</span><br><span class="line">                                                 ; -</span><br><span class="line">Singleton::<span class="symbol">getInstance@</span><span class="number">24</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>通过 对比 就会发现， 关键变化 在于有 volatile修饰的变量，<br>赋值后（前面 mov %eax,0x150(%esi) 这句便是赋值操作） 多执行了一个” lock add1 $0x0,(%esp)” 操作，<br>这个操作相当于一个 内存屏障 （Memory Barrier 或 Memory Fence，指 重排序时 不能把 后面的指令 重排序到 内存屏障 之前的位置），<br>只有一个 CPU 访问 内存时，并不需要 内存屏障；<br>但如果有 两个或更多CPU 访问 同一块 内存，且 其中有一个在 观测 另一个，就需要 内存屏障 来保证 一致性了。</p><p>这句 指令 中的 “add1 $0x0,(%esp)”（把 ESP寄存器 的 值 加 0）显然是一个 空操作<br>（采用这个 空操作 而不是 空操作指令nop 是因为 IA32手册规定 lock前缀 不允许 配合 nop指令 使用），<br>关键在于 lock前缀，查询 IA32手册，<br>它的作用是使得 本CPU 的 Cache 写入了 内存，<br>该 写入动作 也会引起 别的CPU 或者 别的内核 无效化（Invalidate）其Cache，<br>这种操作相当于对 Cache中的变量 做了一次 前面介绍 Java内存模式 中所说的 ”store“和”write“操作。<br>所以通过这样一个 空操作，可让前面 volatile变量 的 修改 对 其他CPU 立即可见。</p><blockquote><p>Doug Lea 列出了各种处理器架构下的 内存屏障指令（<a href="http://g.oswego.edu/d1/jmm/cookbook.html）" target="_blank" rel="noopener">http://g.oswego.edu/d1/jmm/cookbook.html）</a></p></blockquote><blockquote><p>这个 <a href="http://g.oswego.edu/d1/jmm/cookbook.html" target="_blank" rel="noopener">http://g.oswego.edu/d1/jmm/cookbook.html</a> 我试了下访问不通；…</p></blockquote><p>（看到这些文字🙃，莫名我🙃就想起了高中的数学🙃还有大学的高等数学🙃。还想起了那个斐波拉契数列还有那个KMP模式匹配算法🙃，卧槽🙃）</p><blockquote><p>🙃🙃🙃捋一捋🙃🙃🙃</p><ul><li>加了volatile和不加volatile的区别：“0x01a3de24: lock  add1 $0x0,(%esp)               ; …f0830424 00”这一行代码是否存在</li><li>“0x01a3de14: mov       %eax,0x150(%esi)           ; …89865001 0000”这一句是赋值操作，相当于“instance = new Singleton();”这句话？</li><li>“add1 $0x0,(%esp)”相当于一个内存屏障；</li><li>内存屏障（Memory Barrier或 Memory Fence）作用：重排序时，不能把 后面的指令 重排序到 内存屏障 之前的位置<ul><li>举个例子，就好比emm之前那个代码块，两个线程，线程A与线程B；线程A负责读取配置信息；线程B等待线程A初始化配置信息完成；完成之后进行使用线程A初始化好的配置信息；在这当中如果线程A当中“initialized=true”这句话提前执行，那么就会导致线程B的判断失误不会再执行sleep()，从而执行下面的doSomethingWithConfig()方法；而此时执行这个方法就有可能会出错；</li></ul></li><li>“add1 $0x0,(%esp)”当中的esp指的是ESP寄存器</li><li>“add1 $0x0,(%esp)”该指令为一个空操作<ul><li>该 空操作 导致 本CPU 的 Cache 写入了 内存；</li><li>本CPU的Cache写入内存 相当于 Cache中的变量 做了一次“store”与“write”，也就是 同步回内存 的意思；</li><li>通过将 本CPU的Cache写入内存 的该空操作，从而使得volatile变量 的修改对其他CPU立即可见</li><li>这个空操作是不是也就是一个刷新的操作？类似？</li><li>意思也就是说这个ESP寄存器的值不是加0吗，那这个ESP寄存器的值这个应该是一个常量，然后加这个0对这个常量并不会起到什么影响，但是当中会有一个写操作，也就是assign这个操作；因为执行8个操作中其中的规则有一条是：不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存。</li><li>所以会去通过这样一个空操作，让前面的 volatile变量 的修改 对其他CPU立即可见</li><li>对了，这个CPU，其他CPU也就相当于是主内存了是吧</li></ul></li></ul></blockquote><p>那为何说 它禁止指令重排序 呢？<br>从 硬件架构 上讲，指令重排序 是指 CPU 采用了 允许将 多条指令 不按 程序规定的顺序 分开发送给 各相应 电路单元 处理。<br>但并不是说 指令任意重排， CPU 需要能 正确处理 指令 依赖情况 以保障 程序 能得出 正确的执行结果。</p><p>譬如<br>指令1 把 地址A 中的 值 加10，<br>指令2 把 地址A 中的 值 乘以2，<br>指令3 把 地址B 中的 值 减去3，<br>这时 指令1和指令2 是有依赖的，<br>它们之间的顺序 不能重排——–（A+10）<em>2和 A</em>2+10显然不相等，<br>但指令3 可以重排到指令1、2之前或者中间，<br>只要保证CPU执行后面 依赖到A、B值的操作时能获取到正确的A和B值即可。</p><p>所以在 本内CPU中（这个地方，本内？emm，是否是想说的是本内存or 本CPU啊？），重排序看起来依然是有序的。<br>因此， lock add1 $0x0,(%esp) 指令 把 修改 同步 到 内存时，意味着所有之前的 操作 都已经 执行完成，这样便形成了“指令重排序无法越过内存屏障”的效果。</p><p>解决了 volatile 的语义问题，再来看看在众多保障并发安全的工具中选用 volatile 的意义——-它能让我们的代码比使用其他的同步工具会更快吗？</p><p>在某些情况下，volatile 的 同步机制 的性能 确实要优于 锁（使用 synchronized 关键字 或 java.util.concurrent包里面的锁），<br>但是由于 虚拟机 对 锁 实行的许多 消除和优化，使得我们很难量化地认为 volatile 就会比 synchronized 快多少。  </p><p>如果让 volatile 自己与自己比较，那可以确定一个原则：<br>volatile变量 读操作的性能消耗 比 普通变量几乎没有什么差别，但是 写操作 则可能 会慢一些；<br>因为它需要 在本地代码中 插入许多 内存屏障指令 来保证 处理器 不发生 乱序执行。</p><p>不过即便如此，大多数场景下 volatile 的总开销 仍然要比 锁 低，<br>我们在 volatile与锁 中选择的唯一依据仅仅是 volatile的语义 能否满足使用场景的需求。</p><p>在本节的最后，我们回头看一下 Java内存模型 中对 volatile变量 定义的特殊规则。</p><p>假定 T 表示一个线程，V 和 W 分别表示 两个 volatile型变量，那么在进行read、load、use、assign、store和write 操作时需要满足如下规则：</p><ul><li>只有当 线程 T 对 变量 V 执行的前一个动作是 load 的时候，线程 T 才能对 变量 V 执行 use动作；<ul><li>并且，只有当 线程 T 对 变量 V 执行的 后一个动作 是 use 的时候，线程 T 才能对 变量 V 执行 load 动作。</li><li>线程 T 对 变量 V 的 use动作 可以认为是 和线程 T 对 变量 V 的 load、read动作相关联，必须连续一起出现<ul><li>（这条 规则 要求在 工作内存 中，每次使用 V 前都必须先从 主内存 刷新最新的值，用于保证 能看见 其他线程 对 变量 V 所做的修改后的值）。</li></ul></li></ul></li><li>只有当 线程 T 对 变量 V 执行的前一个动作是 assign 的时候，线程 T 才能对 变量 V 执行 store 动作；<ul><li>并且，只有当 线程 T 对变量 V 执行的 后一个动作 是 store 的时候可以认为是和 线程 T 对 变量 V 的store、write动作相关联，必须 连续 一起出现<ul><li>（这条 规则 要求在 工作内存中，每次修改 V 后都必须立刻 同步回 主内存 中，用于保证 其他线程 可以看到 自己对变量 V 所做的修改）</li></ul></li></ul></li><li>假定 动作 A 是 线程 T 对 变量 V 实施的 use 或 assign 动作；<br>假定 动作 F 是和 动作 A 相关联的 load 或 store 动作，<br>假定 动作 P 是和 动作 F 相关联的 read 或 write 动作；<br>类似的，<br>假定 动作 B 是 线程 T 对 变量 W 实施的 use 或 assign 动作，<br>假定 动作 G 是和动作 B 相关联的 load 或 store 动作，<br>假定 动作 Q 是和动作 G 相应的对 变量 W 的 read或write 动作。<br>如果 A 先于 B，那么 P 先于 Q<ul><li>（这条 规则 要求 volatile 修饰的变量 不会被 指令重排序优化，保证 代码的执行顺序 和 程序的顺序 相同）</li></ul></li></ul><blockquote><p>理解为就好像是一个要 read-load-use 努力刷新；一个assign-store-write 努力更新一样</p></blockquote><h5 id="对于-long-和-double-型变量的特殊规则"><a href="#对于-long-和-double-型变量的特殊规则" class="headerlink" title="对于 long 和 double 型变量的特殊规则"></a>对于 long 和 double 型变量的特殊规则</h5><p>java内存模型 要求 lock、unlock、read、load、use、assign、store、write 这个 8个操作 都具有 原子性，<br>但是对于 64位的数据类型（ long 和 double ），在模型中特别定义了一条相对宽松的规定：允许 虚拟机 将 没有被 volatile 修饰的 64位数据的 读写操作 划分为 两次32位的操作 来进行，即允许 虚拟机 实现选择 可以 不保证64位数据类型的 load、store、read和write这个4个操作的原子性，<br>这点就是所谓的 long和double 的非原子性协定（Nonatomic Treatment of double and long Variables）。</p><p>如果有 多个线程 共享一个 并未声明为 volatile的 long 或 double 类型的变量，并且同时对它们进行 读取和修改 操作，<br>那么 某些线程 可能会 读取到一个 既非原值，也不是其他线程修改值的 代表了 “半个变量”的数值。</p><p>不过这种读取到 “半个变量”的情况 非常罕见（在目前 商用java虚拟机 中不会出现），<br>因为 java内存模型 虽然允许虚拟机不把 long和double 变量的 读写 实现成原子操作，<br>但允许 虚拟机 选择把这些操作实现为 具有原子性的操作，而且还 “强烈建议” 虚拟机 这样实现。</p><p>在实际开发中，目前各种平台下的 商用虚拟机 几乎都选择把 64位数据的读写操作 作为 原子操作 来对待，<br>因此我们在编写代码时 一般不需要把用到的 long和double 变量专门声明为 volatile。</p><h5 id="原子性、可见性和有序性"><a href="#原子性、可见性和有序性" class="headerlink" title="原子性、可见性和有序性"></a>原子性、可见性和有序性</h5><p>介绍完 Java内存模型 的 相关操作和规则，<br>我们再整体回顾一下 这个模型的特征。</p><p>Java内存模型 是围绕着在 并发过程中 如何处理原子性、可见性和有序性 这3个特征来建立的，<br>我们逐个来看一下哪些操作实现了这3个特性。</p><p><strong>原子性（Atomicity）</strong>：由 Java内存模型 来直接保证的 原子性变量操作 包括 read、load、assign、use、store和write</p><p>我们大致可以认为 基本数据类型的访问读写 是具备原子性的（例外就是 long和double 的非原子性协定，读者只要知道这件事情就可以了，无需太过在意这些几乎不会发生的例外情况）</p><p>如果 应用场景 需要一个 更大范围的 原子性保证（经常会遇到），Java内存模型还提供了了 lock和unlock 操作来满足这种需求， </p><p>尽管 虚拟机 未把 lock和unlock 操作直接开放给用户使用，但是却提供了 更高层次的字节码指令 monitorenter和monitorexit 来 隐式地 使用这两个操作，这两个字节码指令反映到Java代码中 就是 同步块—–synchronized关键字，因此 synchronized 块之间的操作也具备原子性。</p><p><strong>可见性（Visibility）</strong>：可见性 是指当 一个线程 修改了 共享变量的值，其他线程 能够 立即得知 这个修改。</p><p>上文在讲解 volatile变量 的时候我们已详细讨论过这一点。</p><p>Java内存模型 是通过在 变量修改后 将 新值 同步回 主内存，在变量读取前 从 主内存 刷新变量值 这种依赖主内存作为 传递媒介 的方式来实现可见性的，无论是 普通变量 还是 volatile变量 都是如此</p><p>普通变量与volatile变量 的区别是：volatile 的 特殊规则 保证了 新值 能立即 同步到 主内存，以及每次 使用前 立即从 主内存刷新。</p><p>因此，可以说 volatile 保证了 多线程操作时 变量的可见性，而 普通变量 则不能保证这一点。</p><p>除了 volatile 之外，Java还有两个关键字 能实现可见性，即 synchronized 和 final。</p><p>同步块 的 可见性 是由 “对一个 变量 执行 unlock 操作之前， 必须先把 此变量 同步回 主内存中（执行store、write操作）”这条规则获得的，</p><p>而 final 关键字 的可见性是指：被 final 修饰的字段 在构造器中 一旦初始化完成， 并且构造器 没有把“this”的引用 传递出去（this引用逃逸 是一件很危险的事情，其他线程 有可能 通过这个引用 访问到 “初始化了一半” 的对象），那在 其他线程 中就能看见 final字段的值。</p><p>如代码清单12-7所示，变量i和j都具备可见性，它们无需同步 就能被 其他线程正确访问。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 12-7 final 与可见性</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">public static final int i;</span><br><span class="line"></span><br><span class="line">public final int j;</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line"><span class="code">  i = 0;</span></span><br><span class="line"><span class="code">  // do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="code">  // 也可以选择在 构造函数中 初始化</span></span><br><span class="line"><span class="code">  j = 0;</span></span><br><span class="line"><span class="code">  // do something</span></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><strong>有序性（Ordering）</strong>：Java内存模型 的 有序性 在前面讲解 volatile 时也详细地讨论过了，<br>Java程序 中  天然的有序性 可以总结为一句话：</p><p>如果在 本线程 内观察，所有的操作 都是 有序的；<br>如果在 一个线程中 观察 另一个线程，所有的操作都是 无序的。</p><p>前半句是指 “线程内 表现为 串行的语义”（Within-Thread As-If-Serial Semantics），<br>后半句是指 “指令重排序”现象和 “工作内存与主内存同步延迟”现象。</p><p>Java语言 提供了 volatile和synchronized 两个关键字 来 保证 线程之间 操作的 有序性，<br>volatile关键字 本身就包含了 禁止指令重排序 的语义，<br>而 synchronized 则是由 “一个变量在同一时刻只允许一条线程 对其进行 lock 操作”这条规则获得的，这条规则 决定了 持有同一个锁的两个同步块 只能 串行地进入；</p><p>介绍完 并发 中 3种 重要的特性后，读者有没有发现 synchronized关键字 在需要这3种特性的时候 都可以作为其中一种的 解决方案？<br>看起来很“万能”吧。<br>的确，大部分的 并发控制 操作都能使用 synchronized 来完成。<br>synchronized 的“万能” 也间接造就了 它被程序员滥用的 局面，越“万能”的 并发控制，通常会伴随着越大的 性能影响，<br>这点我们将在第13章讲解 虚拟机锁优化时在介绍。  </p><h5 id="先行发生原则"><a href="#先行发生原则" class="headerlink" title="先行发生原则"></a>先行发生原则</h5><p>如果 Java内存模型 中所有的 有序性 都仅仅依靠 volatile 和 synchronized 来完成，那么有一些操作将会变得很 烦琐，<br>但是我们在编写Java并发代码的时候并没有感觉到这一点，<br>这是因为Java语言中有一个 “先行发生”（happens-before） 的 原则。<br>这个原则非常重要，它是 判断 数据是否竞争、线程是否安全 的 主要依据，依靠这个原则，我们可以通过几条规则一揽子地解决 并发环境下 两个操作之间是否可能存在冲突的所有问题。</p><p>现在就来看看 “先行发生”原则 指的是什么。<br>先行发生 是 Java内存模型 中定义的 两项操作 之间的 偏序关系，<br>如果说 操作A 先行发生于 操作B，其实就是说 发生在操作B 之前，操作A 产生的影响 能被 操作B 观察到，“影响” 包括 修改了内存中共享变量的值、发送了消息、调用了方法等。<br>这句话不难理解，但它 意味着什么呢？<br>我们可以举个例子来说明一下，如代码清单12-8中所示的这3句伪代码。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 12-8 先行发生原则示例1</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 以下操作在 线程A 中执行</span></span><br><span class="line">i = 1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下操作在 线程B 中执行</span></span><br><span class="line">j = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下操作在 线程C 中执行</span></span><br><span class="line">i = 2;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>假设 线程A 中的操作 “i=1;” 先行发生于 线程B 的操作“j=i“ ，<br>那么可以确定在 线程B 的操作执行后，变量j的值一定等于1，<br>得出这个结论的依据有两个：<br>一是根据 先行发生原则， “i=1”的结果可以被观察到；<br>二是 线程C 还没“登场”， 线程A 操作结束之后没有其他线程 会修改变量i的值。</p><p>现在再来考虑 线程C，我们依然保持 线程A 和 线程B 之间的 先行发生关系，<br>而 线程C 出现在 线程A 和 线程B 的操作之间，<br>但是 线程C 与 线程B 没有 先行发生关系，<br>那 j 的值会是多少呢?</p><p>答案是不确定！<br>1和2都有可能，因为 线程C 对 变量i 的影响 可能会被 线程B 观察到，<br>也可能不会， 这时候 线程B 就存在 读取到 过期数据的风险，不具备 线程安全性。</p><p>下面是 Java内存模型 下一些“天然的”先行发生关系，<br>这些 先行发生关系 无需任何 同步器 协助，可以在编码中直接使用。</p><p>如果 两个操作 之间的关系不在此列，并且无法从下列规则推导出来的话，它们就 没有顺序性保障，虚拟机 可以对它们 随意地 进行 重排序。</p><p><strong>程序次序规则（Program Order Rule）</strong>：<br>在 一个线程 内，按照 程序代码 顺序，书写在前面的操作 先行发生于 书写在后面的操作。<br>准确地说，应该是 控制流顺序 而不是 程序代码顺序， 应为要考虑 分支、循环 等结构。</p><p><strong>*管程锁定规则（Monitor Lock Rule）</strong>：<br>一个 unlock操作 先行发生于 后面对 同一个锁 的 lock操作。<br>这里必须强调的是 同一个锁，而 “后面” 是指 时间上的先后顺序。</p><p><strong>volatile 变量规则（Volatile Variable Rule）</strong>：<br>对 一个 volatile变量 的 写操作 先行发生于 后面对这个变量的 读操作，<br>这里的 “后面”同样是指 时间上的先后顺序。</p><p><strong>线程启动规则（Thread Start Rule）</strong>：<br>Thread 对象的 start() 方法 先行发生于 此线程的每一个动作。</p><p><strong>线程终止规则（Thread Termination Rule）</strong>：<br>线程 中的 所有操作 都 先行发生于 对此线程的 终止检测，<br>我们可以通过 Thread.join()方法结束、Thread.isAlive()的返回值 等手段 检测到 线程已经终止执行。</p><p><strong>线程中断规则（Thread Interruption Rule）</strong>：<br>对 线程 interrupt() 方法的调用 先行发生于 被 中断线程的代码 检测到 中断事件 的发生，可以通过 Thread.interrupted()方法 检测到 是否有中断发生。</p><p><strong>对象终结规则（Finalizer Rule）</strong>:<br>一个对象的 初始化 完成（构造函数执行结束） 先行发生于 它的 finalize() 方法的开始。</p><p><strong>传递性（Transitivity）</strong>:<br>如果 操作A 先行发生于 操作B，操作B 先行发生于 操作C，那就可以得出 操作A 先行发生于 操作C 的结论。</p><p>Java语言 无须 任何同步手段保障 就能成立的 先行发生规则 就只有上面这些了，<br>笔者演示一下 如何使用这些规则去判定 操作间是否具备顺序性，<br>对于 读写共享变量 的操作来说，就是 线程是否安全，<br>读者还可以从下面这个例子中感受一下 “时间上的先后顺序” 与 “先行发生” 之间有什么不同。<br>演示例子如代码清单12-9所示。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 12-9 先行发生原则示例2</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">private int  value = 0;</span><br><span class="line"></span><br><span class="line">public void setValue(int value)&#123;</span><br><span class="line"><span class="code">  this.value=value;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getValue()&#123;</span><br><span class="line"><span class="code">  return value;</span></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>代码清单12-9中显示的是一组再普通不过的 getter/setter 方法，<br>假设存在 线程A和B， 线程A先（时间上的先后）调用了 “setValue”，<br>然后 线程B 调用了 同一个对象 的“getValue()”，那么 线程B 收到的返回值 是什么？</p><p>我们依次分析一下 先行发生原则 中的各项规则，<br>由于 两个方法 分别由 线程A和线程B 调用，不在一个线程中，所以 程序次序规则 在这里不适用；</p><p>由于 没有同步块，自然就不会发生 lock和unlock 操作，所以 管程锁定规则 不适用；</p><p>由于 value变量 没有被 volatile关键字 修饰，所以 volatile变量规则 不适用；</p><p>后面的 线程启动、终止、中断规则和对象终结规则 也和这里完全没有关系。</p><p>因为 没有一个适用的 先行发生原则，所以最后一条 传递性 也无从谈起，</p><p>因此我们可以判定尽管 线程A 在操作时间上 先于 线程B，但是无法确定 线程B 中“getValue()”方法返回的结果，<br>换句话说，这里面的操作不是 线程安全的。</p><p>那怎么修复这个问题呢？</p><p>我们至少有两种比较简单的方案可以选择：<br>要么把 getter/setter 方法都定义为 synchronized 方法，这样就可以田勇 管程锁定规则；</p><p>要么把 value 定义为 volatile变量，由于 setter方法 对 value的修改 不依赖 value的原值，满足 volatile关键字使用场景，<br>这样就可以 套用volatile变量规则 来实现 先行发生关系。</p><p>通过上面的例子，我们可以得出结论：<br>一个操作 “时间上的先发生” 不代表这个操作 会是 “先行发生”，<br>那如果 一个操作 “先行发生” 是否就能推导 这个操作 必定是 “时间上的先发生” 呢？</p><p>很遗憾，这个推论也是不成立的，一个典型的例子就是多次提到的 “指令重排序”，<br>演示例子如代码清单12-10所示。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 12-10 先行发生原则示例3</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 以下操作在同一个线程中执行</span></span><br><span class="line">int i = 1;</span><br><span class="line">int j = 2;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>代码清单12-10的 两条赋值语句 在 同一个线程 之中，<br>根据 程序次序规则， “int i=1” 的操作 先行发生于 “int j=2”，<br>但是 “int j=2”的代码完全可能先被 处理器 执行，这并不影响 先行发生原则的正确性，因为我们在 这条线程 之中没有办法感知到这点。</p><p>上面两个例子综合起来证明了一个结论：时间先后顺序 与 先行发生原则 之间基本没有太大的关系，所以我们衡量 并发安全问题 的时候不要受到 时间顺序的干扰，一切必须以 先行发生原则 为准。</p><h4 id="Java与线程"><a href="#Java与线程" class="headerlink" title="Java与线程"></a>Java与线程</h4><p>并发 不一定要 依赖 多线程（如PHP中很常见的 多进程并发），<br>但是在Java里面谈论 并发，大多数都与 线程 脱不开关系。</p><p>既然我们这本书探讨的话题是 Java虚拟机的特性，那讲到 Java线程，我们就从 Java线程 在 虚拟机中的实现 开始讲起。</p><h5 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h5><p>我们知道，线程 是比 进程 更轻量级 的 调度执行单位，<br>线程的引入 ，可以把 一个进程的 资源分配 和 执行调度 分开，各个线程 既可以 共享进程资源（内存地址、文件I/O等），又可以独立调度（线程 是 CPU 调度 的 基本单位）。</p><p>主流的 操作系统 都提供了 线程实现，Java语言则提供了 在不同硬件和操作系统平台下 对线程操作的统一处理，<br>每个已经执行 start()且还未结束的 java.lang.Thread类的实例，就代表了 一个线程。</p><p>我们注意到 Thread类与大部分的 Java API 有显著的区别，<br>他的所有关键方法都是 声明为Native的。</p><p>在 Java API中，一个 Native 方法 往往意味着 这个方法没有使用 或 无法使用 平台无关的手段来实现（当然也可能是为了 执行效率 而使用 Native 方法， 不过，通常 最高效率的手段 也就是 平台相关的手段）。</p><p>正因为如此，作者把本节的标题定为 “线程的实现” 而不是 “Java线程的实现”。</p><p>实现线程 主要有3中方式：<br>使用 内核线程 实现、<br>使用 用户线程 实现<br>和使用 用户线程 加 轻量级进程 混合实现。</p><h6 id="1-使用内核线程实现"><a href="#1-使用内核线程实现" class="headerlink" title="1.使用内核线程实现"></a>1.使用内核线程实现</h6><p>内核线程 （Kernel-Level Thread，KLT） 就是直接由 操作系统内核（Kernel，下称内核）支持的线程，<br>这种线程 由 内核 来完成 线程切换，<br>内核 通过操纵 调度器（Scheduler）对 线程 进行 调度 ，<br>并负责将 线程的任务 映射到各个 处理器 上。</p><p>每个 内核线程 可以视为 内核 的一个分身，<br>这样 操作系统 就有能力 同时处理多件事情，支持多线程 的 内核 就叫做 多线程内核（Multi-Threads Kernel）。</p><p>程序 一般不会直接去使用 内核线程，而是去使用 内核线程 的一种高级接口—-轻量级进程（Light Weight Process，LWP），<br>轻量级进程 就是我们通常意义上所讲的 线程，<br>由于 每个轻量级进程 都有一个 内核线程 支持，因此只有先支持 内核线程，才能有 轻量级进程。</p><p>这种 轻量级进程 与 内核线程 之间 1:1的关系 称为 一对一的线程模型，如图12-3所示。</p><p>（实活实说，这个图太难了🙃🙃🙃我画不出🙃🙃🙃）</p><p>由于 内核线程 的支持，每个 轻量级进程 都成为一个 独立的 调度单元，<br>即使有一个 轻量级进程 在系统调用中 阻塞了，也不会影响 整个进程继续工作，<br>但是 轻量级进程 具有它的局限性：<br>首先，由于是基于 内核线程 实现的，所以各种线程操作，如 创建、析构及同步，都需要进行 系统调用。<br>而系统调用的代价相对较高，需要在 用户态（User Mode）和内核态（Kernel Mode） 中 来回切换。<br>其次，每个轻量级进程 都需要有一个 内核线程 的支持，因此 轻量级进程 要消耗一定的 内核资源（如 内核线程 的 栈空间），<br>因此 一个系统 支持轻量级进程 的 数量 是有限的。</p><h6 id="2-使用用户线程实现"><a href="#2-使用用户线程实现" class="headerlink" title="2.使用用户线程实现"></a>2.使用用户线程实现</h6><p>从 广义 上来讲，一个线程 只要不是 内核线程，就可以认为是 用户线程（User Thread，UT），<br>因此，从这个定义上来讲，轻量级进程 也属于 用户线程，但 轻量级进程 的实现 始终是建立在 内核之上的，许多操作都要进行 系统调用，效率会受到限制。</p><p>而 狭义的 用户线程 指的是 完全建立在 用户空间的 线程库 上，系统内核 不能感知 线程存在的实现。</p><p>用户线程 的 建立、同步、销毁和调度 完全在 用户态 中完成，不需要 内核的帮助。</p><p>如果程序 实现得当，这种线程 不需要切换到 内核态，因此操作 可以使 非常快速且低消耗的，<br>也可以支持规模更大的线程数量，部分高性能 数据库中的多线程 就是由 用户线程 实现的。<br>这种 进程 与 用户线程 之间 1:N 的关系 称为 一对多的线程模型，如图12-4所示。</p><p>（不画图了自己去买书看看🙃🙃🙃）</p><p>使用 用户线程 的 优势 在于 不需要系统内核支援，劣势 也在于 没有系统内核的支援，所有的 线程操作 都需要 用户程序 自己处理。</p><p>线程的 创建、切换和调度 都是需要考虑的问题，而且由于 操作系统 只把 处理器资源 分配到 进程，<br>那诸如 “阻塞如何处理”、‘多处理器系统中如何将线程映射到其他处理器上“这类问题解决起来将会 异常困难，甚至不可能完成。</p><p>言而使用 用户线程实现的程序 一般都比较复杂，除了以前在不支持多线程的操作系统中（如DOS）的多线程程序 与 少数有特殊需求的程序外，<br>现在使用用户线程的程序越来越少了，Java、Ruby等语言都曾经使用过用户线程，最终又都放弃使用它。</p><blockquote><p>此处讲的“复杂”与“程序自己完成线程操作”，并不限制 程序中 必须编写了复杂的实现用户线程的代码，<br>使用用户线程的程序，很多都依赖特定的线程库来完成基本的线程操作，这些复杂性 都 封装在 线程库 之中。</p></blockquote><p>（🙃🙃🙃表示像我这种俗人估计一辈子都用不到用户线程以及内核线程，而且估计我用到了我也不知道）</p><h6 id="3-使用用户线程加轻量级进程混合实现"><a href="#3-使用用户线程加轻量级进程混合实现" class="headerlink" title="3.使用用户线程加轻量级进程混合实现"></a>3.使用用户线程加轻量级进程混合实现</h6><p>线程 除了 依赖 内核线程 实现 和 完全由 用户程序 自己实现 之外，还有一种将 内核线程与用户线程 一起使用的实现方式。</p><p>在这种混合实现下，既存在 用户线程，也存在 轻量级进程。</p><p>用户线程 还是完全建立在 用户空间 中，因此 用户线程 的 创建、切换、析构等操作依然廉价，并且可以支持 大规模的用户线程并发。</p><p>而操作系统提供支持的 轻量级进程 则作为用户线程和内核线程之间的 桥梁，这样可以使用 内核提供的线程调度功能及处理器映射，<br>并且 用户线程的系统调用 要通过 轻量级线程 来完成，大大降低了 整个线程 被完全阻塞 的风险。</p><p>在这种 混合模式中，用户线程和轻量级进程 的数量 是 不定的，即为 N:M 的关系，如图12-5所示，这种就是 多对多的线程模型。</p><p>许多 UNIX系列 的 操作系统， 如 Solaris、HP-UX 等都提供了 N:M 的线程模型 实现。</p><h6 id="4-Java线程的实现"><a href="#4-Java线程的实现" class="headerlink" title="4.Java线程的实现"></a>4.Java线程的实现</h6><p>Java线程 在 JDK1.2 之前，是基于称为 “绿色线程”（Green Threads）的 用户线程 实现的，<br>而在 JDK1.2 中，线程模型 替换为 基于操作系统 原生线程模型 来实现。</p><p>因此，在目前的JDK版本中，操作系统 支持怎样的 线程模型，很大程度上 决定了 Java虚拟机的线程 是怎样 映射的，<br>这点在 不同的平台商 没有办法 达成一致，虚拟机规范 中也并未限定 Java线程 需要使用哪种 线程模型 来实现。</p><p>线程模型 只对 线程的 并发规模和操作成本 产生影响，对Java程序的 编码和运行过程 来说，这些差异都是透明的。</p><p>对于 Sun JDK来说，它的 Windows版本和Linux版都是使用 一对一的线程模型 实现的，<br>一条Java线程 就 映射到 一条轻量级进程之中，因为 Windows和Linux 系统提供的线程模型就是 一对一的。</p><blockquote><p>Windows下由 纤程包（Fiber Package），Linux下也有 NGPT（在2.4内核的年代）来实现 N:M 模型，但是他们都没有成为主流。</p></blockquote><p>而在 Solaris平台 中，<br>由于 操作系统 的 线程特性 可以同时 支持  一对一（通过Bound Threads或Alternate Libthread 实现）及 多对多（通过 LWP/Thread Based Synchronization 实现） 的线程模型，<br>因此在 Solaris 版的JDK中 也对应提供了 两个平台专有的 虚拟机参数： -XX:+UseLWPSynchronization(默认值) 和 -XX:+UseBoundThreads 来明确指定虚拟机使用哪种 线程模型。</p><h5 id="Java线程调度"><a href="#Java线程调度" class="headerlink" title="Java线程调度"></a>Java线程调度</h5><p>线程调度 是指 系统 为 线程 分配 处理器使用权 的过程，<br>主要调度方式有两种，分别是 协同式线程调度（Cooperative Threads-Scheduling） 和 抢占式线程调度（Preemptive Threads-Scheduling）。</p><p>如果使用 协同式调度的多线程系统，线程的执行时间 由 线程本身 来控制，线程 把 自己的工作执行完了之后，要主动通知 系统 切换到 另外一个线程上。</p><p>协同式多线程 的 最大好处 是 实现简单，而且由于 线程要把自己的事情干完后才会进行 线程切换，切换操作 对 线程自己是可知的，所以没有什么 线程同步 的问题。</p><p>Lua语言中的 “协同例程” 就是这类实现。</p><p>它的 坏处 也很明显：线程执行时间 不可控制，甚至如果一个线程编写 有问题， 一直不告知系统进性 线程切换，那么程序就会 一直阻塞 在那里。</p><p>很久以前的 Windows3.x系统 就是使用 协同式 来实现 多进程多任务 的，相当不稳定，一个进程 坚持不让出 CPU 执行时间 就可能导致整个系统 崩溃。</p><p>如果使用 抢占式调度的多线程系统，那么 每个线程 将由 系统 来分配 执行时间，线程的切换不由 线程本身 来决定（在Java中，Thread.yield()可以让出执行时间，但是要获取执行时间的话，线程本身是没有什么办法的）。</p><p>在这种实现 线程调度 的方式下，线程的执行时间 是 系统 可控的，也不会有 一个线程 导致 整个进程阻塞 的问题，<br>Java使用的 线程调度方式 就是 抢占式调度。</p><blockquote><p>在JDK后续版本中 有可能会提供 协程（Coroutines）方式 来进行 多任务处理，相关资料可参见：<a href="http://wikis.sum.com/display/mlvm/Coroutines。" target="_blank" rel="noopener">http://wikis.sum.com/display/mlvm/Coroutines。</a></p></blockquote><p>与前面所说的 Windows3.x 的例子相对，在 Windows9x/NT 内核中就是使用 抢占式 来实现 多线程的，当一个进程出了问题，我们还可以使用 任务管理器 把这个 进程 “杀掉”，而不至于导致 系统崩溃。</p><p>虽然 Java线程调度 是系统自动完成的，<br>但是我们还是可以 “建议” 系统给某些 线程 多分配一点 执行时间，另外的一些线程则可以少分配一点——这一项操作可以通过设置 线程优先级 来完成。</p><p>Java语言 一共设置了 10个级别 的 线程优先级（ Thread.MIN_PRIORITY 至 Thread.MAX_PRIORITY ），在两个线程同时处于 Ready 状态时，优先级越高的 线程 越容易被 系统 选择执行。</p><p>不过，线程优先级 并不是 太靠谱，原因是 Java的线程 是通过 映射到 系统的 原生线程 上来实现的，<br>所以 线程调度 最终还是取决于 操作系统，虽然现在很多操作系统都提供 线程优先级 的概念，<br>但是并不见得能与 Java线程的优先级 一一对应，<br>如Solaris中 有 2147483648（2^32）中优先级，但Windows中就只有7中，比Java线程优先级多的系统还好说，中间留下一点空位就可以了，<br>但比Java线程优先级少的系统，就不得不出现几个 优先级相同的情况了。</p><p>表12-1 显示了 Java线程优先级 与 Windows线程优先级 之间的对应关系，<br>Windows平台的JDK中 使用了除 THREAD_PRIORITY_IDLE 之外的其余6种线程优先级。</p><table>  <thead>    <tr>      <th colspan="2">表 12-1 Java线程优先级与Windows线程优先级之间的对应关系</th>    </tr>  </thead>  <tr>    <th>Java线程优先级</th>    <th>Windows线程优先级</th>  </tr>  <tr>    <td>1（Thread.MIN_PRIORITY）</td>    <td>THREAD_PRIORITY_LOWEST</td>  </tr>    <tr>    <td>2</td>    <td>THREAD_PRIORITY_LOWEST</td>  </tr>    <tr>    <td>3</td>    <td>THREAD_PRIORITY_BELOW_NORMAL</td>  </tr>   <tr>    <td>4</td>    <td>THREAD_PRIORITY_BELOW_NORMAL</td>  </tr>   <tr>    <td>5</td>    <td>THREAD_PRIORITY_NORMAL</td>  </tr>   <tr>    <td>6</td>    <td>THREAD_PRIORITY_ABOVE_NORMAL</td>  </tr>    <tr>    <td>7</td>    <td>THREAD_PRIORITY_ABOVE_NORMAL</td>  </tr>    <tr>    <td>8</td>    <td>THREAD_PRIORITY_HIGHEST</td>  </tr>   <tr>    <td>9</td>    <td>THREAD_PRIORITY_HIGHEST</td>  </tr>   <tr>    <td>10（Thread.MAX_PRIORITY）</td>    <td>THREAD_PRIORITY_CRITICAL</td>  </tr></table><p>上文说到 “线程优先级并不是太靠谱”，不仅仅是说 在一些平台上 不同的优先级 实际会变得相同 这一点，还有其他情况 让我们不能太依赖 优先级：<br>优先级可能会被 系统 自行改变。<br>例如，在Windows系统中 存在一个称为 “优先级推进器”(Priority Boosting，当然它可以被关闭掉)的功能，<br>它的大致作用就是 当系统 发现 一个线程 执行得 特别“勤奋努力”的话，可能会越过 线程优先级 去为它 分配执行时间。<br>因此，我们不能在程序中 通过 优先级 来完全准确地 判断一组状态都为 Ready的线程 将会先执行哪一个。</p><h5 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h5><p>Java语言 定义了 5中线程状态，在 任意一个时间点， 一个线程只能 有且只有 其中的一种状态，这5种状态分别如下。</p><p>新建（New）：创建后 尚未启动 的线程 处于这种 状态。</p><p>运行（Runnable）：Runnable包括了 操作系统 线程状态中的 Running和Ready，也就是处于此状态的 线程 有可能正在执行，也有可能正在等待着 CPU 为它分配执行时间。</p><p>无限期等待（Waiting）：处于这种状态的 线程 不会被 分配CPU执行时间，它们要等待被 其他线程 显式地 唤醒。<br>以下方法会让线程陷入无限期的等待状态：</p><ul><li>没有设置 Timeout 参数的 Object.wait() 方法</li><li>没有设置 Timeout 参数的 Thread.join() 方法</li><li>LockSupport.park() 方法</li></ul><p>限期等待（Timed Waiting）：处于这种状态的 线程 也不会被分配 CPU执行时间，不过 无需等待被其他线程 显式地 唤醒，在一定时间之后 它们会由系统 自动唤醒。<br>以下方法会让线程 进入 限期等待 状态：</p><ul><li>Thread.sleep()方法</li><li>设置了 Timeout 参数的 Object.wait() 方法</li><li>设置了 Timeout 参数的 Thread.join() 方法</li><li>LockSupport.parkNanos()方法</li><li>LockSupport.parkUtil()方法</li></ul><p>阻塞（Blocked）：线程被 阻塞 了，<br>“阻塞状态”与“等待状态” 的区别是：<br>“阻塞状态”在等待着获取到一个 排他锁，这个事件 将在 另外一个线程 放弃这个锁的时候 发生；<br>而 “等待状态” 则是在 等待一段时间，或者唤醒动作的发生。<br>在程序等待进入 同步区域 的时候，线程将进入这种状态。</p><p>结束（Terminated）：已终止 线程 的 线程状态，线程已经 结束执行。</p><p>上述5种状态 在遇到 特定事件 发生的时候 将会 互相转换，它们的 转换关系 如图12-6 所示。</p><h5 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h5><p>本章中，我们首先了解了 虚拟机Java内存模型 的结构及操作，<br>然后讲解了 原子性、可见性、有序性 在 Java内存模型 中的体现，<br>最后介绍了 先行发生原则 的规则及使用。</p><p>另外，我们还了解了 线程 在 Java语言之中 是如何实现的。</p><p>关于 “高效并发” 这个话题，在本章中 主要介绍了 虚拟机如何实现“并发”，在第13章中，我们的主要关注点将是 虚拟机如何实现“高效”，<br>及 虚拟机对我们编写的并发代码 提供了什么样的 优化手段。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;深入java虚拟机-第五部分-高效并发&quot;&gt;&lt;a href=&quot;#深入java虚拟机-第五部分-高效并发&quot; class=&quot;headerlink&quot; title=&quot;深入java虚拟机-第五部分-高效并发&quot;&gt;&lt;/a&gt;深入java虚拟机-第五部分-高效并发&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
    
      <category term="虚拟机" scheme="https://fengshana.github.io/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="面试" scheme="https://fengshana.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="虚拟机" scheme="https://fengshana.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java面试热点问题，synchronized原理剖析与优化</title>
    <link href="https://fengshana.github.io/2020/05/22/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%91/%E3%80%90%E9%94%81%E3%80%91Java%E9%9D%A2%E8%AF%95%E7%83%AD%E7%82%B9%E9%97%AE%E9%A2%98%EF%BC%8Csynchronized%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
    <id>https://fengshana.github.io/2020/05/22/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%91/%E3%80%90%E9%94%81%E3%80%91Java%E9%9D%A2%E8%AF%95%E7%83%AD%E7%82%B9%E9%97%AE%E9%A2%98%EF%BC%8Csynchronized%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E4%B8%8E%E4%BC%98%E5%8C%96/</id>
    <published>2020-05-22T14:17:09.479Z</published>
    <updated>2020-05-30T06:15:16.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1aJ411V763?from=search&amp;seid=6293835933701781647" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1aJ411V763?from=search&amp;seid=6293835933701781647</a>  </p><p>观看了这个视频之后，我建议啊😉，可以去看下那个《<strong>深入java虚拟机</strong>》这本书，因为这个课讲的内容跟这本书当中的<strong>第13章 线程安全与锁优化</strong>，内容十分相似；所以我认为可以当做是课后复习书的那种；<br>我也是经过了对比两者的内容才这么觉得；因为真的很相似；包括后面举的string的那个例子；<br>为了我更深刻的记忆；我决定我还是仔细看一遍这一部分内容；<br>（现在看来其实就是<strong>第五部分 高效并发</strong> 跟该课程视频讲的 非常非常相同了；）</p><h2 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typora-root-ur<span class="variable">l:</span> img</span><br><span class="line">typora-<span class="keyword">copy</span>-images-<span class="keyword">to</span>: img</span><br></pre></td></tr></table></figure><h3 id="深入学习并发编程中的synchronized"><a href="#深入学习并发编程中的synchronized" class="headerlink" title="深入学习并发编程中的synchronized"></a>深入学习并发编程中的synchronized</h3><blockquote><p>课程背景  </p></blockquote><p>第一： 并发编程是java知识体系当中比较重要而且比较是比较难的一块内容。  </p><p>因为并发编程涉及的知识面比较广，然后比较抽象不好理解，因此如果我们想很好的掌握并发编程这块内容，其实是有一定难度的。<br>synchronized的原理以及其优化了解少。  </p><p>第二： 并发编程在实际企业开发当中也是会遇到的，一个比较重要的比较棘手的问题。  </p><p>举个例子，铁道售票的12306网站，在一个时间段内，可能有大量的用户过来进行买票，那么此时就需要进行保证卖出去的票的数量是正确的的，既不能超卖也不能少卖。<br>另外还要保证整个执行过程的卖票的执行效率是比较高的。  </p><p>那么可以通过synchronized来进行保证卖票的数量是正确的，既不会超卖也不会少卖。  </p><p>但是又要去考虑这个性能问题，那么就可以看到synchronized在实际的企业开发当中也是一个棘手的问题。  </p><p>第三： 并发编程现在是一个热点面试题。<br>synchronized当中出现了异常，会不会释放锁？<br>synchronized和Lock有什么区别？<br>synchronized和volatile有什么区别？<br>…</p><p>面试官通过并发面试题来考查面试者的并发编程掌握情况，来判断面试者是否能够满足企业需要，另外也能够判断面试者的技术水平。  </p><blockquote><p>课程介绍</p></blockquote><p>深入学习并发编程中的synchronized</p><ul><li>第一章：并发编程中的三个问题<ul><li>可见性<ul><li>（案例：共享变量，一个线程A不断地来读这个共享变量的值，再用另一个线程B对该共享变量的取值进行修改，可以观测到另一个线程B对该共享变量的修改，A线程并不能够感知得到，这就出现了可见性问题）</li><li>目标<ul><li>学习什么是可见性问题</li></ul></li><li>可见性概念<ul><li><strong>可见性（VIsibility）：是指当一个线程对共享变量进行了修改，那么另外的线程可以立即看到修改后的最新值。</strong></li></ul></li><li>可见性演示<ul><li>案例演示：一个线程根据boolean类型的标记flag，while循环，另一个线程改变这个flag变量的值，而第一个while循环的线程并不会停止循环。</li></ul></li><li>小结<ul><li>什么是可见性?<br>可见性（Visibility）：是指当一个线程对共享变量进行了修改，那么另外的线程可以理解看到修改后的最新值。</li></ul></li></ul></li><li>原子性<ul><li>（案例：使用i++，通过5个线程分别来进行执行1000次i++，最终可以发现加出来的效果并非是5000，可能会少于5000，那么这个问题的原因就在于i++并不是一个原子操作，到时会通过java反汇编的方式来进行演示分析这个i++其实有4条指令）</li><li>目标<ul><li>学习什么是原子性问题</li></ul></li><li>原子性概念<ul><li><strong>原子性（Atomicity）：指在一次操作或多次操作中，呀么所有的操作全部得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行。</strong></li></ul></li><li>原子性演示<ul><li>案例演示：5个线程各执行1000次i++</li></ul></li></ul></li><li>有序性（一般来想的是程序会按照编写的代码的顺序来进行执行，那么实际上程序会去做一些优化措施，为了让代码的执行效率更高一点，会做编译器和运行期的优化操作，这其中也是用到了一个案例，有序性问题有可能会被重排序，那么导致在多线程的情况下，数据会出现错乱。）</li></ul></li><li>第二章：java内存模型（JMM）（开始解决问题）<ul><li>计算机结构（CPU、内存、缓存由此来引出java内存模型，主内存、工作内存如何操作变量）</li><li>java内存模型<ul><li>主内存与工作内存之间的交互</li></ul></li></ul></li><li>第三章：synchronized保证三大特性<ul><li>synchronized与原子性<ul><li>目标</li><li>使用synchronized保证原子性</li><li>synchronized保证原子性的原理</li><li>小结</li></ul></li><li>synchronized与可见性</li><li>synchronized与有序性</li></ul></li><li>第四章：synchronized的特性（同步锁机制，synchronized作为锁的特性）<ul><li>可重入特性（指的是当一个线程进入到一个同步代码块当中时，获取了某一个锁之后，还能够再次进入同步代码块获取同一把锁。即可以重新再进入。）</li><li>不可中断特性</li></ul></li><li>第五章：synchronized的原理<ul><li>javap 反汇编</li><li>深入JVM源码<ul><li>目标</li><li>monitor监视器锁</li><li>monitor竞争</li><li>monitor等待</li><li>monitor释放</li><li>monitor是重量级锁</li></ul></li></ul></li><li>第六章：JDK6 synchronized优化<ul><li>CAS</li><li>java对象的布局<ul><li>锁升级过程</li></ul></li><li>偏向锁</li><li>轻量级锁</li><li>重量级锁</li><li>锁消除</li><li>锁粗化</li><li>平时写代码如何对synchronized优化<ul><li>减少synchronized的范围</li><li>降低synchronized锁的粒度</li><li>读写分离</li></ul></li></ul></li></ul><h2 id="可见性问题"><a href="#可见性问题" class="headerlink" title="可见性问题"></a>可见性问题</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>学习什么是可见性问题</p><h3 id="可见性概念"><a href="#可见性概念" class="headerlink" title="可见性概念"></a>可见性概念</h3><p>可见性（Visibility）：是指当一个线程对共享变量进行了修改，那么另外的线程可以立即看到修改后的最新值。</p><h3 id="可见性演示"><a href="#可见性演示" class="headerlink" title="可见性演示"></a>可见性演示</h3><p>案例演示：一个线程A根据boolean类型的标记flag，while循环，另一个线程B改变这个flag变量的值，那么线程A并不会停止循环。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.xxx.concurrent_problem;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  案例演示：</span></span><br><span class="line"><span class="comment">          一个线程对共享变量的修改，另一个线程不能立即得到最新值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01Visibility</span>&#123;</span></span><br><span class="line">    <span class="comment">//多个线程都会访问的数据，我们成为线程的共享数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="built_in">run</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws InterruptedException</span>&#123;</span><br><span class="line">      <span class="comment">//t1线程不断的来读取run共享变量的取值</span></span><br><span class="line">      Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">run</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      t1.start();</span><br><span class="line"></span><br><span class="line">      Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//t2线程对该共享变量的取值进行修改</span></span><br><span class="line">      Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="built_in">run</span> =  <span class="literal">false</span>;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"时间到，线层2设置为false"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      t2.start();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//可以观测得到t2线程对run共享变量的修改，t1线程并不能够读取到更改了之后的值；这就出现了可见性问题</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>什么是可见性？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 原子性问题</span><br></pre></td></tr></table></figure><p>package com.xxx.demo01_concurrent_problem;</p><p>import java.util.ArrayList;</p><p>/**<br>    案例演示：5个线程各执行1000次 i++;<br>*/<br>public class Test02Atomicity{<br>  private static int number = 0;<br>  public static void main(String[] args) throws InterruptedException{</p><pre><code>//5个线程都执行1000次i++Runnable increment = () -&gt; {  for( int i = 0 ; i &lt; 1000; i++){    number++;  }};//5个线程ArrayList&lt;Thread&gt; ts = new ArrayList&lt;&gt;();for(int i = 0; i &lt; 5 ; i++){  Thread t = new Thread(increment);  t.start();  ts.add(t);}for(Thread t : ts){  t.join();}//最终的效果即，加出来的效果不是5000，可能会少于5000//那么原因就在于i++并不是一个原子操作//到时候会通过java反汇编的方式来进行演示和分析，这个i++其实有4条指令System.out.println(&quot;number = &quot;+ number);</code></pre><p>  }<br>}</p><pre><code>## 有序性问题## 计算机结构## java内存模型## 主内存与工作内存之间的数据交互过程## synchronized保证原子性## synchronized保证可见性## synchronized保证有序性## synchronized的可重入特性## synchronized的不可中断性## javap反汇编学习synchronized的原理## 面试题：synchronized与Lock的区别## 深入JVM源码-monitor监视器锁## 深入JVM源码-monitor竞争## 深入JVM源码-monitor等待## 深入JVM源码-monitor释放## 深入JVM源码-monitor是重量级锁## synchronized优化_CAS_AtomicInteger使用## synchronized优化_CAS原理## synchronized优化锁升级过程## synchronized优化-对象的布局## synchronized优化-偏向锁## synchronized优化-轻量级锁## synchronized优化-自旋锁## synchronized优化-锁消除## synchronized优化-锁粗化## 平时写代码如何对synchronized优化</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;观看笔记：&lt;a href=&quot;https://www.bilibili.com/video/BV1aJ411V763?from=search&amp;
      
    
    </summary>
    
    
      <category term="面试" scheme="https://fengshana.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="https://fengshana.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="synchronized" scheme="https://fengshana.github.io/tags/synchronized/"/>
    
      <category term="锁" scheme="https://fengshana.github.io/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>流程图-markdown美人鱼🧜‍♀️图表</title>
    <link href="https://fengshana.github.io/2020/05/21/%E3%80%90%E7%90%90%E7%A2%8E%E9%9A%8F%E7%AC%94%E3%80%91/%E3%80%90%E6%B5%81%E7%A8%8B%E5%9B%BE%E3%80%91%E7%BE%8E%E4%BA%BA%E9%B1%BC/"/>
    <id>https://fengshana.github.io/2020/05/21/%E3%80%90%E7%90%90%E7%A2%8E%E9%9A%8F%E7%AC%94%E3%80%91/%E3%80%90%E6%B5%81%E7%A8%8B%E5%9B%BE%E3%80%91%E7%BE%8E%E4%BA%BA%E9%B1%BC/</id>
    <published>2020-05-20T19:31:58.233Z</published>
    <updated>2020-05-20T23:12:46.656Z</updated>
    
    <content type="html"><![CDATA[<p>🌟🌟🌟<br>😄刚刚找到两个找表情包Emoji的地方，嘿嘿😉，终于可以不用是颜文字了😉；（刚刚试了有些反应不出来…🙃,但是可以进行copy，paste啊哈哈哈🧙‍♀️ 🧙‍♀️ 🧙‍♀️ ）<br>参考blog: <a href="https://segmentfault.com/q/1010000021180710/" target="_blank" rel="noopener">https://segmentfault.com/q/1010000021180710/</a></p><ul><li>💫 <a href="https://unicode.org/emoji/charts/full-emoji-list.html" target="_blank" rel="noopener">https://unicode.org/emoji/charts/full-emoji-list.html</a></li><li>💫 <a href="https://emoji.muan.co/" target="_blank" rel="noopener">https://emoji.muan.co/</a></li><li>💫 <a href="https://www.webfx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">https://www.webfx.com/tools/emoji-cheat-sheet/</a></li></ul><hr><p>参考blog: <a href="http://kkpattern.github.io/2015/05/15/Embed-Chart-in-Jekyll.html" target="_blank" rel="noopener">http://kkpattern.github.io/2015/05/15/Embed-Chart-in-Jekyll.html</a></p><p>mermaid.full.min.js:  </p><ul><li><p>使用的是：<a href="https://www.bootcdn.cn/mermaid/0.2.4/" target="_blank" rel="noopener">https://www.bootcdn.cn/mermaid/0.2.4/</a> </p></li><li><p><a href="https://cdn.bootcdn.net/ajax/libs/mermaid/0.2.4/mermaid.full.min.js" target="_blank" rel="noopener">https://cdn.bootcdn.net/ajax/libs/mermaid/0.2.4/mermaid.full.min.js</a></p></li><li><p>我是采用的hexo的next主题所以找到自己的 theme/next/layout/layout.swig 当中进行编辑</p>  <figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> html_class = 'theme-next ' + theme.scheme %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> theme.motion.enable %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> html_class = html_class + ' use-motion' %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; html_class | lower &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">lang</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; config.language &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">include</span></span> '_partials/head.swig' %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> title %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">include</span></span> '_third-party/analytics/index.swig' %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery_lazyload/1.9.7/jquery.lazyload.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/minigrid@3.1.1/dist/minigrid.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/photos/photos.css"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/photos/photo.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--把script粘到这里就差不多了--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/mermaid/0.2.4/mermaid.full.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">........</span></span><br></pre></td></tr></table></figure></li></ul><p>然后就可以愉快的使用了流程图了；终于不用傻逼式截图或者自己画了；害；  </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"mermaid"</span>&gt;</span><br><span class="line">graph TD;</span><br><span class="line">    A<span class="comment">--&gt;B;</span></span><br><span class="line">    A<span class="comment">--&gt;C;</span></span><br><span class="line">    B<span class="comment">--&gt;D;</span></span><br><span class="line">    C<span class="comment">--&gt;D;</span></span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>上述代码放在了代码块<code>内容</code>当中显示；<br>下面就是上述代码直接粘在了markdown文件当中然后显示出来的内容；</p><div class="mermaid">graph TD;    A-->B;    A-->C;    B-->D;    C-->D;</div><p>现在得好好学学怎么画流程图了；哈哈哈哈<del>~</del></p><p>插入一下<strong>流程图mermaid语法</strong>，<br>参考blog 👇</p><ul><li><a href="https://www.jianshu.com/p/9810ba886955" target="_blank" rel="noopener">https://www.jianshu.com/p/9810ba886955</a></li><li><a href="https://blog.csdn.net/wangyaninglm/article/details/52887045" target="_blank" rel="noopener">https://blog.csdn.net/wangyaninglm/article/details/52887045</a></li></ul><p><strong>方向控制</strong></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">流程图分为竖向和横向两大类，竖向包括自上而下和自下而上两种顺序，横向包括从右到左和从左到右两种顺序。</span><br><span class="line">其对应语法分别为：graph TB/graph BT/graph RL/graph LR。</span><br><span class="line"></span><br><span class="line">TB - <span class="built_in">top</span> <span class="built_in">bottom</span>（自上而下）</span><br><span class="line">BT - <span class="built_in">bottom</span> <span class="built_in">top</span>（自下而上）</span><br><span class="line">RL - <span class="built_in">right</span> <span class="built_in">left</span>（从右到左）</span><br><span class="line">LR - <span class="built_in">left</span> <span class="built_in">right</span>（从左到右）</span><br><span class="line">TD: 默认方向，从上到下</span><br></pre></td></tr></table></figure><p>测试下；</p><div class="mermaid">graph LR;    subgraph      A[h_user user:id:3506728370       :name ]-->B[春晚];    C[h_user user:id:3506728370       :fans ]-->D[12210862];    E[h_user user:id:3506728370       :blogs ]-->F[83];    end</div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;🌟🌟🌟&lt;br&gt;😄刚刚找到两个找表情包Emoji的地方，嘿嘿😉，终于可以不用是颜文字了😉；（刚刚试了有些反应不出来…🙃,但是可以进行copy，paste啊哈哈哈🧙‍♀️ 🧙‍♀️ 🧙‍♀️ ）&lt;br&gt;参考blog: &lt;a href=&quot;https://seg
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://fengshana.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="流程图" scheme="https://fengshana.github.io/tags/%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>这世间，唯有青春与梦想不可辜负</title>
    <link href="https://fengshana.github.io/2020/05/16/%E3%80%90%E5%BF%83%E6%83%85%E3%80%91/%E8%BF%99%E4%B8%96%E9%97%B4%EF%BC%8C%E5%94%AF%E6%9C%89%E9%9D%92%E6%98%A5%E4%B8%8E%E6%A2%A6%E6%83%B3%E4%B8%8D%E5%8F%AF%E8%BE%9C%E8%B4%9F/"/>
    <id>https://fengshana.github.io/2020/05/16/%E3%80%90%E5%BF%83%E6%83%85%E3%80%91/%E8%BF%99%E4%B8%96%E9%97%B4%EF%BC%8C%E5%94%AF%E6%9C%89%E9%9D%92%E6%98%A5%E4%B8%8E%E6%A2%A6%E6%83%B3%E4%B8%8D%E5%8F%AF%E8%BE%9C%E8%B4%9F/</id>
    <published>2020-05-15T16:13:48.915Z</published>
    <updated>2020-05-15T17:54:49.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1j4411j79x/?spm_id_from=trigger_reload" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1j4411j79x/?spm_id_from=trigger_reload</a>  </p><blockquote><p>衡水中学“学霸”励志演讲：这世间，唯有青春与梦想不可辜负</p></blockquote><p>这个是他的标题挺好的；<br>这个是我妹妹介绍我去看的，她们班上成人礼看了这个当时没看完，然后后面发烧回家把它又完整的看了一遍；我看了，然后本来是昨天看的，准备写些什么的；因为昨天一天面试了两轮，有点累；然后睡了昨天睡的很好；  </p><p>妹妹： 张锡锋<br>妹妹：原来我常常想，别人尊重我，是因为我很优秀；可是到了衡中才发现，别人尊重我，是因为别人很优秀，这是衡中学子独有的青春魅力。  </p><p>我跟我妹的关系，是一种十分平等的关系，就比如说推荐我或者说安利我看某个觉得意义非常大的一个视频什么的；或者是….总之我认为我现在和家人之间的一个相处的一个模式就是与家人都是一个平等的一个状态；我可以告诉你我现在的一个状态；你也向我倾诉你的心声；我觉得这种状态非常的好；好了不扯了；  </p><p>这个视频昨天看到后面其实我泪目了。<br>打动人心的地方可能在于的确有些话戳中心坎了。也有可能是我的心底还不够坚强坚硬吧。然后容易感动的缘故。  </p><p>总的来说我希望我，我认识我爱的人爱我的人不管年龄多少岁余生都能够朝着自己的一个目标而努力奋斗追逐着。  </p><p>下面是看视频的他的一个演讲的内容；我也是一边听一边写；对了其实我发现，就是在b站上面其实每天有50上下左右的人在看这个视频；其实他的这场演讲带来的力量也是很大的，能够做到一种就是正面积极向上在自己处于低糜或者是迷茫的这样一种状态下，然后给人一种就是正确的这样一个方向指引的作用是非常值得学习的；  </p><p>我也是其中的受益者即使我当前已经离开学校的生活步入社会了。  </p><p>好了不多说了，我这人就是容易比较话多有个时候自己跟自己说话都能说得睡不着觉。害，愁人。(｡•ˇ‸ˇ•｡)  </p><p>对了，建议请使用原速度进行播放，不要快进。（更有感觉）  </p><h2 id="演讲稿"><a href="#演讲稿" class="headerlink" title="演讲稿"></a>演讲稿</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">尊敬的老师，亲爱的同学们，大家好！（此时他鞠躬<span class="number">90</span>度，不错小伙子，哈哈哈哈哈~~~）</span><br><span class="line"></span><br><span class="line">我是<span class="number">838</span>班的张锡锋。</span><br><span class="line"></span><br><span class="line">相信很多同学应该认识我，在大家眼里，我扮演更多的通常是个谐星的角色。  </span><br><span class="line"></span><br><span class="line">可是大家似乎忘记了，在我这看似狂野，实则狂野的外表下（不哦老阿姨觉得你长的挺清秀的哦哈哈哈哈），也隐藏着一颗憧憬阳光的心。（很好）</span><br><span class="line"></span><br><span class="line">所以，我站在这里，与大家分享关于学习，（此处应该加个逗号，不然就变成了“学习我的看法” emm）我的看法。</span><br><span class="line"></span><br><span class="line">我演讲的主题是：青春与梦想。  </span><br><span class="line"></span><br><span class="line">话说这世间，唯有青春与梦想不可辜负。  </span><br><span class="line"></span><br><span class="line">花开正好，微风不燥，（我那句阳光正好微风不燥也是取自这里哈哈哈哈）我们扬帆，起航。  </span><br><span class="line"></span><br><span class="line">首先，青春，青春是什么颜色的？  </span><br><span class="line"></span><br><span class="line">是五月的花海，灿烂无比；是海边的浪花，永不停息；是仲夏的骄阳，激情四射。  </span><br><span class="line"></span><br><span class="line">青春在衡中，是绚丽多彩的；  </span><br><span class="line"></span><br><span class="line">原来啊，我常常想，别人尊重我，是因为，我很优秀。  </span><br><span class="line"></span><br><span class="line">可是，到了衡中才发现，别人尊重我，是因为，别人很优秀。  </span><br><span class="line"></span><br><span class="line">这，是衡中学子，独有的，青春魅力！  </span><br><span class="line"></span><br><span class="line">同样，正值青春，我们有犯错的权利。  </span><br><span class="line"></span><br><span class="line">记得第一次交改错本，我问老师要改多少？（好了，他在讲述他的二货经历了，跟我有的一比）</span><br><span class="line"></span><br><span class="line">老师说，根据个人情况，在精不在多。  </span><br><span class="line"></span><br><span class="line">哦呜？  </span><br><span class="line"></span><br><span class="line">是吗？</span><br><span class="line"></span><br><span class="line">这可是您说的。</span><br><span class="line"></span><br><span class="line">说时迟那时快，我顿时绽放了一个耀眼的笑容。（这个笑容可以想象）</span><br><span class="line"></span><br><span class="line">我心不在焉，草草了事。</span><br><span class="line"></span><br><span class="line">可是，改错发下来时却是，一片万紫千红的样子。  </span><br><span class="line"></span><br><span class="line">上面，有详细的批注，评语是这样的：这个改错改的不错，有些题改着改着就错了。（唉哟这个老师很皮哦）</span><br><span class="line"></span><br><span class="line">我们老师青春活泼的力量，就这样让学习生活妙趣横生。  </span><br><span class="line"></span><br><span class="line">其次，是这里青春的学习氛围（其实他这里停顿了一定时间，就是等着下面的同学渐渐静下来然后再说话，嗯，挺好的），当你满眼，都是追求卓越的字样时，便也，没理由落后了。  </span><br><span class="line"></span><br><span class="line">（好了，二货的自黑开始了）连我这个，被同学们誉为：古娜拉黑暗之神的人，也，早已经，在前往卓越的路上。</span><br><span class="line"></span><br><span class="line">我喜欢，在某个课间琢磨那些，优雅的，美丽的数学题。（的确，如果真的觉得诶这个的确十分有趣，其实是会慢慢的沉下去真正喜欢上这些以前觉得枯燥乏味的东西。比如说数据结构）</span><br><span class="line"></span><br><span class="line">（好了，二货长吸一口气，哈哈）小东西，真别致。（他这里又在等下面的声音静下来一点然后才开始说话，不错）</span><br><span class="line"></span><br><span class="line">我喜欢，在某天清晨头昏脑胀时，回想刚刚学过的，系统命名法。  </span><br><span class="line"></span><br><span class="line">哇，这一瞬间有一百万个可能。  </span><br><span class="line"></span><br><span class="line">我喜欢，某天晚上躺在床上，回想曾经背过的老子，“知人者智，自知者明。圣人者有力，自胜者强。” 我好困啊……</span><br><span class="line"></span><br><span class="line">第二，梦想。</span><br><span class="line"></span><br><span class="line">有一条路，人烟稀少寸步难行，但是，却不得不坚持前进，因为它的尽头，种着梦想。（这个时候我想到了一首纯音乐可以停下就是叫啥来着 the right path；然后通过这首纯音乐，我也发现了一首意义非常对于我而言非常好的一首小诗；黄色的树林里分出两条路 我选择了人迹更少的一条 从此决定了我一生的道路；同样也送给你们；有个时候听纯音乐，其实也是在听自己内心的声音。）</span><br><span class="line"></span><br><span class="line">同学们，你的梦想是什么？（我以前可能不知道，但是我现在知道了，也知道我前进的方向是什么了。）</span><br><span class="line"></span><br><span class="line">相信，很多人的回答都会是清北这样的顶尖名校。</span><br><span class="line"></span><br><span class="line">我们选择它们不仅仅因为它们是名校，还因为它们坐落的城市，它们美丽的传说。  </span><br><span class="line"></span><br><span class="line">对于痴迷于地理学科的我来说，外面的世界，外面的城市就是我的梦想。  </span><br><span class="line"></span><br><span class="line">这里，广东，对外开放的前沿，我把它做成卡贴随身携带；</span><br><span class="line"></span><br><span class="line">这里，上海，全中国最大的城市，我把它拍成照片贴在课桌上；  </span><br><span class="line"></span><br><span class="line">这里，西安，大唐不夜城，我做梦都会想起它。</span><br><span class="line"></span><br><span class="line">看完这些，不知道同学们心里有什么感触；（感触嘛，也有的，我也想去外面的世界多看看多走走多经历）</span><br><span class="line"></span><br><span class="line">此刻，你的心里是否充满了对未来的渴望？</span><br><span class="line"></span><br><span class="line">我问同学们一个问题，请大家伸出右手。</span><br><span class="line"></span><br><span class="line">看，它像什么？（他举起了右手，说实话吗？像手）</span><br><span class="line"></span><br><span class="line">像右手？</span><br><span class="line"></span><br><span class="line">这都被你发现了吗？（不错啊，都很皮，哈哈哈哈）</span><br><span class="line"></span><br><span class="line">同学们，果然见多识广啊！（那是那是，谦虚一点，自己人知道就行）</span><br><span class="line"></span><br><span class="line">请大家，五指并拢，放于腰间，慢慢高举，举过头顶，张开。</span><br><span class="line"></span><br><span class="line">成功了吗？那恭喜你！你给自己，放了个烟花。（不错的小伙子，哈哈哈哈）</span><br><span class="line"></span><br><span class="line">可是，烟花虽美，转瞬即逝。（我这个烟花不太美，五指太短了看不出来烟花的样子）</span><br><span class="line"></span><br><span class="line">现在，请同学们伸出你的烟花，把它攥成拳。</span><br><span class="line"></span><br><span class="line">大家看，它又像什么？（像石头）</span><br><span class="line"></span><br><span class="line">好，我们不要再来了。。</span><br><span class="line"></span><br><span class="line">请大家把你的右拳置于你的耳边，如果你能清楚地听到脉搏的律动，那么我告诉你：这，是生命。  </span><br><span class="line"></span><br><span class="line">我们梦想很美，很远大；</span><br><span class="line"></span><br><span class="line">但是只有把掌握成拳，用尽全力，挥向生活，这样，才是青春路上，该有的姿态。（不错，好样的，我怎么感觉我在，，创建我自己的弹幕。。。。）</span><br><span class="line"></span><br><span class="line">同学们，你，有没有感到一种震撼？</span><br><span class="line"></span><br><span class="line">相信，很多人都会跟我一样，因为这是一种念想。</span><br><span class="line"></span><br><span class="line">一种发自内心，由内而外的，对城市，对未来的渴望。</span><br><span class="line"></span><br><span class="line">少年们早已不想拘泥于这里，只能在所谓，抖音、电影里，去观望别人的生活。（是的，所以，我们要做的是过好自己的生活，而不是去羡慕别人，其实自己也可以）</span><br><span class="line"></span><br><span class="line">可是，为什么我们就只能做那个躲在阴暗的角落里，新鲜的舞台之上，光鲜亮丽的别人的那个，卑微的人。</span><br><span class="line"></span><br><span class="line">这样不行。</span><br><span class="line"></span><br><span class="line">一点儿都不好玩。（我也觉得，因为你不觉得干巴巴的看着别人的生活，只会让自己emm觉得自己的生活并没有，怎么说呢如果自己的三观并不是摆的很正的话，就会产生一种攀比的这样一种心理情绪，这样是非常不好的。）</span><br><span class="line"></span><br><span class="line">我们，会走出去，顺境也好逆境也好，人生，本就是一场与种种困难无休无尽的斗争，一场，敌众我寡的斗争。（卧槽，他这里好像念错了，念成了敌寡敌众的斗争，但是当前他并没有就是因为这个点的失误而后面演讲的不好，这一点很好其实，面对失误并不慌张而是顺利的接入下一句话这样子，不错小伙子）</span><br><span class="line"></span><br><span class="line">我曾把自己向往的大学热爱的城市，拍成照片贴在课桌上，每当我精疲力竭时，都要看一下它（方便找回自己当初的信念不会感到迷茫的这样一种方式，其实也是引导自己走出低落的这样一种情绪或者说避免低落；其实我也有，就是写一些话然后经常去看，鼓励自己的这样一种方式），然后质问自己，就这样啦，你就这点东西？（是的，我也这样傻逼式自嘲）你真的真的到了最后歇斯底里不能坚持的地步了吗？</span><br><span class="line"></span><br><span class="line">你的理想是诗，理想是梦，理想是远方的田野，是穿越世界的旅行！</span><br><span class="line"></span><br><span class="line">但现在你能做的所有，只是，把手握紧！（嗯）</span><br><span class="line"></span><br><span class="line">厚积薄发！（嗯）</span><br><span class="line"></span><br><span class="line">你，只有付出！（嗯）</span><br><span class="line"></span><br><span class="line">付出你的时间，赌上你的尊严，拿出你的全部！你的everything!（嗯，是的，努力了才有收获，不努力什么也没有）</span><br><span class="line"></span><br><span class="line">当别人打游戏时你在学习，当别人睡懒觉时你在学习，你含着泪在深夜里舞蹈，在回忆里奔跑！（其实这句话好像才是打动我的点，就是听了这些话很容易就联想到以前自己努力坚持的一些画面这样子）</span><br><span class="line"></span><br><span class="line">没有人，在年少时想成为一个普通人。</span><br><span class="line"></span><br><span class="line">尽管生活，它会剥夺你的所爱践踏你的尊严，把你踩在脚下遍体鳞伤。</span><br><span class="line"></span><br><span class="line">但你，怎能，倒下！（但我，怎能，倒下！）</span><br><span class="line"></span><br><span class="line">你的身后，是挚爱的人；</span><br><span class="line"></span><br><span class="line">那些受过的伤都将成为你的勋章，都是你，送给未来的自己最好的礼物！（是的，就像是我之前说，emm，希望自己能够成为未来的自己的一块垫脚石/踏脚石）</span><br><span class="line"></span><br><span class="line">我，也有梦想啊！（我的梦想是，在java开发这一行当中慢慢的沉淀自己，遇见更多更好的人）</span><br><span class="line"></span><br><span class="line">我告诉自己，总有一天，我会站在金色的舞台上，聚光灯打向我，摄像机对准我，所有人的目光注视着我，我能站在台上侃侃而谈。此刻，世界只有我一人！（emm不错）</span><br><span class="line"></span><br><span class="line">我要让平日里轻蔑我的对手知道，我要让他们亲口说出那三个字：（我爱你？对不起？我恨你？我可能平时emm肥皂去看多了？）</span><br><span class="line"></span><br><span class="line">你，赢了！（厉害）</span><br><span class="line"></span><br><span class="line">如果说，青春，是足迹，那梦想，一定，叫做远方。</span><br><span class="line"></span><br><span class="line">请同学们相信，生活明朗，万物可爱；（是的，我确实相信着这句话）</span><br><span class="line"></span><br><span class="line">人间值得，未来可期。（是的，人间值得，未来可期！）</span><br><span class="line"></span><br><span class="line">（加油，诶我刚把网页给叉掉了，他结尾其实好像也同样是鞠躬了<span class="number">90</span>度，不错。小伙子。）</span><br></pre></td></tr></table></figure><h2 id="未选择的路"><a href="#未选择的路" class="headerlink" title="未选择的路"></a>未选择的路</h2><p>从前可能觉得名人名言只会发生在名人身上，其实名人也只是将自己的所感表达了出来；来纾解自己的某一种情绪而已；其实很多的时候去读某一首小诗某一句经典名句再联想一下自己的生活，很多的时候是的确有很大的一个共同之处的。<br>这就是共鸣吧。<br>将自己的表达通过文字的形式温柔的表达了出来。  </p><p>好了不说了，今天面试问了微服务，我直接说我不会。现在挨打的时候到了。去看书去了。  </p><p>对了，读这首小诗的时候，bgm切换成 <strong>the right path</strong>跟配哦~（the right path其实有段时间，在去年吧，我循环了很久，因为本身去年是一个害怕成长但又渴望成长，迷茫的一个状态，挺丧的，所以说，这个时候要么找朋友倾诉要么，听纯音乐静下心来听听自己心底的声音。建议一定要将这种情绪排解出来，不要压抑自己，不好，因为经历过，所以知道，去学会坦诚学会怎么样去接受容纳自己。希望看文的道友们也能像演讲人一样，或许是此刻或许是未来的某一个时间点能够慢慢绽放属于自己的那一星光亮。）  </p><p>诶诶诶我突然发现，我拍的这个照片跟我这个选择的路，有点睛的这样一个作用，哈哈哈哈哈，你看，这时候我今天拍的云，很漂亮，不像一条道路吗？哈哈哈可能是我想多了哈哈哈哈。  </p><p>好了话不多说我撤了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">《未选择的路》</span><br><span class="line"></span><br><span class="line">罗伯特 弗罗斯特</span><br><span class="line"></span><br><span class="line">黄色的树林里分出两条路，</span><br><span class="line"></span><br><span class="line">可惜我不能同时去涉足，</span><br><span class="line"></span><br><span class="line">我在那路口久久伫立，</span><br><span class="line"></span><br><span class="line">我向着一条路极目望去，</span><br><span class="line"></span><br><span class="line">直到它消失在丛林深处。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">但我却选择了另外一条路，</span><br><span class="line"></span><br><span class="line">它荒草凄凄，十分幽寂，</span><br><span class="line"></span><br><span class="line">显得更诱人，更美丽；</span><br><span class="line"></span><br><span class="line">虽然在这两条小路上，</span><br><span class="line"></span><br><span class="line">都很少留下旅人的足迹；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">虽然那天清晨落叶满地，</span><br><span class="line"></span><br><span class="line">两条路都未经脚印污染。</span><br><span class="line"></span><br><span class="line">啊，留下一条路等改日再见！</span><br><span class="line"></span><br><span class="line">但我知道路径延绵无尽头，</span><br><span class="line"></span><br><span class="line">恐怕我难以再返回。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">也许多少年后在某个地方，</span><br><span class="line"></span><br><span class="line">我将轻声叹息把往事回顾：</span><br><span class="line"></span><br><span class="line">一片树林里分出两条路，</span><br><span class="line"></span><br><span class="line">而我选择了人迹更少的一条，</span><br><span class="line"></span><br><span class="line">从此决定了我一生的道路。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;观看笔记：&lt;a href=&quot;https://www.bilibili.com/video/BV1j4411j79x/?spm_id_from
      
    
    </summary>
    
    
      <category term="心情" scheme="https://fengshana.github.io/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="心情" scheme="https://fengshana.github.io/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>112节Redis入门到精通【黑马程序员】</title>
    <link href="https://fengshana.github.io/2020/05/13/%E3%80%90REDIS%E3%80%91/%E3%80%90REDIS%E3%80%91112%E8%8A%82Redis%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E3%80%90%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98%E3%80%91/"/>
    <id>https://fengshana.github.io/2020/05/13/%E3%80%90REDIS%E3%80%91/%E3%80%90REDIS%E3%80%91112%E8%8A%82Redis%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E3%80%90%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98%E3%80%91/</id>
    <published>2020-05-13T13:49:09.207Z</published>
    <updated>2020-05-27T10:38:01.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看视频: <a href="https://www.bilibili.com/video/BV1CJ411m7Gc?from=search&amp;seid=17203994801277039493" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1CJ411m7Gc?from=search&amp;seid=17203994801277039493</a></p><h2 id="112节Redis入门到精通【黑马程序员】"><a href="#112节Redis入门到精通【黑马程序员】" class="headerlink" title="112节Redis入门到精通【黑马程序员】"></a>112节Redis入门到精通【黑马程序员】</h2><h3 id="课程安排"><a href="#课程安排" class="headerlink" title="课程安排"></a>课程安排</h3><h4 id="Windows环境进行讲解"><a href="#Windows环境进行讲解" class="headerlink" title="Windows环境进行讲解"></a>Windows环境进行讲解</h4><ol><li>Redis基础</li></ol><ul><li>Redis入门</li><li>数据类型（数据的存储格式）</li><li>通用命令</li><li>Jedis（Java如何连接redis以及操作redis）</li></ul><h4 id="Linux环境实操（实操性实用性强）"><a href="#Linux环境实操（实操性实用性强）" class="headerlink" title="Linux环境实操（实操性实用性强）"></a>Linux环境实操（实操性实用性强）</h4><ol start="2"><li>Redis高级</li></ol><ul><li>持久化</li><li>redis.conf</li><li>事务</li><li>集群</li></ul><ol start="3"><li>Redis应用</li></ol><ul><li>企业级解决方案</li></ul><h3 id="redis入门-NoSQL介绍"><a href="#redis入门-NoSQL介绍" class="headerlink" title="redis入门-NoSQL介绍"></a>redis入门-NoSQL介绍</h3><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li>Redis简介</li><li>Redis的下载与安装</li><li>Redis的基本操作</li></ul><h4 id="中国被世界黑的最惨的一天"><a href="#中国被世界黑的最惨的一天" class="headerlink" title="中国被世界黑的最惨的一天"></a>中国被世界黑的最惨的一天</h4><p>2007年10月30日，北京奥运会门票面向境内公众第二阶段预售正式启动。<br>上午一开始，公众提交申请空前踊跃。<br>上午9时至10时，官方票务网站的<font style="color:red">浏览量</font>达到了<font style="color:red">800万次</font>，票务呼叫中心热线从9时至10时的<font style="color:red">呼入量</font>超过了<font style="color:red">380万人次</font>。<br>由于瞬间访问数量过大，技术系统应对不畅，造成很多申购者无法及时提交申请，为此背景奥组委票务中心对广大公众未能及时、便捷地实现奥运门票预定表示歉意。  </p><p>人太多（全世界的冲击）  </p><h4 id="不可回避的问题"><a href="#不可回避的问题" class="headerlink" title="不可回避的问题"></a>不可回避的问题</h4><p>奥运会门票预售系统开放第一天，上午9点正式开始售票到中午12点，3个小时内，票务网站被浏览次数达到<font style="color:red">2000万次</font>。  </p><h4 id="一个神奇的网站"><a href="#一个神奇的网站" class="headerlink" title="一个神奇的网站"></a>一个神奇的网站</h4><p>春运，切肤之痛（一般两种状态：正在走向崩溃的路上or崩溃）： <strong>盘点12306： 一个总在“崩溃中”的神奇网站</strong><br><strong>淘宝崩完12306崩 连着4天，每天都有平台崩溃…..</strong>  </p><p>对应的问题点都是访问量比较大；  </p><h4 id="大型翻车现场"><a href="#大型翻车现场" class="headerlink" title="大型翻车现场"></a>大型翻车现场</h4><p><strong>京东促销爆服务器 刘强东：再搞一次</strong></p><ul><li>人员过多</li><li>访问量比较大</li><li>流量过大</li></ul><h4 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h4><p><strong>表层现象</strong></p><ul><li><strong>海量用户</strong></li><li><strong>高并发</strong>（所有人一块进来访问网站，网站扛不住）</li></ul><p><strong>核心问题</strong></p><h4 id="罪魁祸首—–关系型数据库"><a href="#罪魁祸首—–关系型数据库" class="headerlink" title="罪魁祸首—–关系型数据库"></a>罪魁祸首—–关系型数据库</h4><p>数据访问中影响因素：  </p><ul><li><strong>性能瓶颈：磁盘IO性能低下</strong><ul><li>数据库是保存在磁盘上的，而磁盘的IO性能也就是读写性能相对来说比较低下；</li><li>CPU的数据交换是和高速缓存Cache来做；</li><li>Cache的数据交换和内存做；</li><li>内存的数据交换和硬盘做；</li><li>提供基础数据的这些信息在硬盘上存储；而且是一层一层的往上进行传递；导致性能低下；</li></ul></li><li><strong>扩展瓶颈：数据关系复杂，扩展性差，不便于大规模集群</strong><ul><li>数据库中数据的存储格式；</li><li>数据库不仅仅存储数据；更多的还需要进行描述数据关系（表与表之间的多关联）；（呈现网状关联，前后交叉，错综复杂，扩展性差，牵一发而动全身）</li></ul></li></ul><h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><h5 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h5><ul><li>降低磁盘IO次数，越低越好（针对IO性能差） ——- 内存存储</li><li>去除数据间关系，越简单越好 ——– 不存储关系，仅存储数据</li></ul><p>NoSQL: 即 <strong>Not-Only SQL</strong> （<strong>泛指</strong>非关系型的数据库），（<strong>定位</strong>）作为关系型数据库的<strong>补充</strong>；<br>（<br>数据还是得存在硬盘上，<br>不能将全部的数据移到内存当中去；<br>内存当中的数据还是从硬盘当中来；<br>所以NoSQL的定位是补充；<br>）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Not</span> <span class="string">不；  </span></span><br><span class="line"><span class="attr">Only</span> <span class="string">仅仅；只是；  </span></span><br><span class="line"><span class="attr">Not</span> <span class="string">Only 不仅仅，不只是；</span></span><br></pre></td></tr></table></figure><p>最终指向的即为做事情不能够仅仅只用SQL；与数据存储访问的类似的<strong>泛指</strong>称作是NoSQL；  </p><p>作用： 应对基于<strong>海量用户</strong>和海量数据前提下的数据处理问题（<strong>高并发</strong>）；</p><p>针对的是大量用户对大量数据访问出现的一个集中的大量访问从而出现的问题；<br>少量数据少量用户依旧可以使用但是未免有点杀鸡焉用牛刀的意思；  </p><p>所以一定得定义好NoSQL是用来干嘛的；它是对于关系型数据库的补充起到该做用；  </p><p><strong>NoSQL特征</strong>：<br>（特征都是相对的；没有绝对的特征；兴许再过几年就是普遍性的一个特点了）</p><ul><li><strong>可扩容，可伸缩</strong>；</li><li><strong>大数据</strong>量下<strong>高性能</strong></li><li><strong>灵活</strong>的<strong>数据类型</strong>（能兼容数据库中的数据）</li><li><strong>高可用</strong>（与<strong>集群</strong>相关进行了解）</li></ul><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>常见的<strong>NoSQL数据库</strong>解决方案：  </p><ul><li><font style="color:red;font-weight:bolder;">Redis</font></li><li>memcache</li><li>HBase</li><li>MongoDB</li></ul><p>已经在市场上存留了一定时间了；并不是新出来的这样一种技术；<br>针对的不同场景；所体现的价值不一样；  </p><h5 id="解决方案（电商场景为例）"><a href="#解决方案（电商场景为例）" class="headerlink" title="解决方案（电商场景为例）"></a>解决方案（电商场景为例）</h5><p><strong>MySQL</strong>  </p><ol><li>商品基本信息</li></ol><ul><li>名称</li><li>价格</li><li>厂商</li></ul><p><strong>MongoDB</strong>  </p><p>高速处理，专用作文档处理的地方；  </p><ol start="2"><li>商品附加信息</li></ol><ul><li>描述</li><li>详情</li><li>评论</li></ul><p><strong>分布式文件系统</strong></p><ol start="3"><li>图片信息</li></ol><p><strong>ES、Lucene、solr</strong></p><ol start="4"><li>搜索关键字</li></ol><p><strong>Redis、memcache、tair</strong>  </p><ol start="5"><li><strong>热点</strong>信息(<strong>访问性较高</strong>)</li></ol><ul><li><strong>高频</strong></li><li><strong>波段性</strong></li></ul><p>Redis所处位置：  </p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">（商品评价信息）|<span class="string">  </span>|<span class="string">        （热点信息存储）</span>|<span class="string">  </span>|<span class="string">              </span>|<span class="string">    （搜索关键字及全文检索）</span>|<span class="string">  </span>|<span class="string">                         </span>|<span class="string"> </span>|<span class="string">（商品图片）</span></span><br><span class="line"><span class="string">-----------------------    ----------------------           </span>|<span class="string">                -----------------------          ----------------------</span></span><br><span class="line">|<span class="string"> MongoDB集群（文档） </span>|<span class="string">     </span>|<span class="string"> Redis集群（缓存） </span>|<span class="string">            </span>|<span class="string">                </span>|<span class="string"> Solr集群（全文检索）</span>|<span class="string">           </span>|<span class="string"> FastDFS集群（图片）</span>|</span><br><span class="line">-----------------------    ----------------------           |<span class="string">                -----------------------          ----------------------</span></span><br><span class="line"><span class="string">-------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">-------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">    </span>|<span class="string">              </span>|<span class="string">              </span>|<span class="string">              </span>|<span class="string">              </span>|<span class="string">              </span>|</span><br><span class="line">---------      ---------      ---------      ---------      ---------      ---------</span><br><span class="line">|<span class="string"> MySQL </span>|<span class="string">      </span>|<span class="string"> MySQL </span>|<span class="string">      </span>|<span class="string"> MySQL </span>|<span class="string">      </span>|<span class="string"> MySQL </span>|<span class="string">      </span>|<span class="string"> MySQL </span>|<span class="string">      </span>|<span class="string"> MySQL </span>|</span><br><span class="line">---------      ---------      ---------      ---------      ---------      ---------</span><br><span class="line">                                      基本信息存储</span><br></pre></td></tr></table></figure><h3 id="redis入门-redis简介"><a href="#redis入门-redis简介" class="headerlink" title="redis入门-redis简介"></a>redis入门-redis简介</h3><p>概念：<font style="color:red;font-weight:bolder;">Redis（Remote Dictionary Server）</font>是用<strong>C语言</strong>开发的一个开源的高性能<font style="color:red;font-weight:bolder;">键值对（key-value）</font>数据库。  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Remote 远程；  </span><br><span class="line">Dictionary 字典；（提供功能）  </span><br><span class="line">Server 服务；</span><br></pre></td></tr></table></figure><p>类似于Java当中的一种结构、存储模型Map；<br>比如说名字对应人；<br>（但是好像不太适合，身份证号对应人可能还好一点）<br>这就属于一个键值对；<br>Redis就是这样的一个数据库；<br>Redis当中存放的数据就是一个键对应一个值这样子；<br>不像接触的MySQL数据库；（数据库、数据表、记录行、值）；<br>而Redis是一个键则对应一个取值；这也是其性能高的一个原因；（一个名称对应一个值）  </p><p>了解了Redis是什么之后下面就来说说Redis的特征了；  </p><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ol><li>数据间<strong>没有必然的关联关系</strong>（也算是关系型数据库的弱势）</li><li>内部采用<strong>单线程</strong>机制进行工作（不会手脑并用，操作原子性强就能保证很多安全性的东西）</li><li><strong>高性能</strong>。官方提供测试数据，50个并发执行 100 000 个请求，读的速度是110000 次/s ， 写的速度是 81000 次/s。</li><li><strong>多数据类型</strong>支持</li></ol><ul><li><strong>字符串</strong>类型 <strong>string</strong></li><li><strong>列表</strong>类型 <strong>list</strong></li><li><strong>散列</strong>类型 <strong>hash</strong></li><li><strong>集合</strong>类型 <strong>set</strong></li><li><strong>有序集合</strong>类型 <strong>sorted_set</strong></li></ul><ol start="5"><li><strong>持久化</strong>支持。可以进行<strong>数据灾难恢复</strong>（数据在内存当中进行存储，必定会有短电的情况，万一在内存中存储的某些重要数据一旦没了可咋办；这就很尴尬了；所以做了个数据灾难恢复处理）  </li></ol><h4 id="Redis的应用"><a href="#Redis的应用" class="headerlink" title="Redis的应用"></a>Redis的应用</h4><ul><li>为<strong>热点数据加速查询</strong>（主要场景），如热点商品、热点新闻、热点资讯、推广等高访问量信息等；（这个数据必然成为热点）  </li><li><strong>任务队列</strong>，如秒杀、抢购、购票排队等（消息队列）</li><li><strong>即时信息查询</strong>，如个位排行榜、各类网站访问统计、公交到站信息、在线人数信息（聊天室、网站）、设备信号等；（刷新速度快，包括缓存等技术，保证其实时性；）</li><li><strong>时效性信息控制</strong>，如验证码控制（5分钟、30分钟有效等）、投票控制等；（时效性可以使用redis做控制）</li><li><strong>分布式数据共享</strong>，如分布式集群架构中的session分离</li><li><strong>消息队列</strong></li><li><strong>分布式锁</strong></li></ul><h3 id="redis入门-redis下载安装与服务启动"><a href="#redis入门-redis下载安装与服务启动" class="headerlink" title="redis入门-redis下载安装与服务启动"></a>redis入门-redis下载安装与服务启动</h3><p>目录：  </p><ul><li>Redis简介</li><li><font style="color:red;">Redis的下载与安装</font></li><li>Redis的基本操作</li></ul><h4 id="Redis-的下载"><a href="#Redis-的下载" class="headerlink" title="Redis 的下载"></a>Redis 的下载</h4><ul><li>Linux（适用于企业及开发）<ul><li>Redis高级开始使用</li><li>以4.0版本作为主版本</li></ul></li><li>Windows版本（适合零基础学习）<ul><li>Redis入门使用</li><li>以3.2版本为主版本</li><li>下载地址：<a href="https://github.com/MSOpenTech/redis/tags" target="_blank" rel="noopener">https://github.com/MSOpenTech/redis/tags</a></li><li>选择此版本下载：<a href="https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100</a></li><li>下载类型：<a href="https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100</a></li></ul></li></ul><p>Redis安装特别特别特别简单；绿色版软件；解压缩下即可；  </p><ul><li>配置相关<ul><li>redis.windows.conf</li><li>redis.windows-service.conf</li></ul></li><li>文档(说明性内容)<ul><li>Redis on Windows RElease Note.docx</li><li>Redis on Windows.docx</li><li>Windows Service Documentation.docx</li></ul></li><li>主要看的文件（exe文件）<ul><li>redis-benchmark.exe<ul><li>redis-benchmark.exe用于来做性能测试使用</li></ul></li><li>redis-check-aof.exe<ul><li>作用：redis-check-aof.exe用于做持久化使用</li></ul></li><li>redis-cli.exe<ul><li>全称redis-client；</li></ul></li><li>redis-server.exe<ul><li>启动redis的一个可执行文件；</li><li>启动完了之后就相当于mysql启了一个服务器类似；</li><li>但是如果是需要去操作这个redis数据库就需要使用另外一个客户端，也就是另外一个exe可执行文件redis-cli.exe</li></ul></li></ul></li><li>目前使用得到的即redis-server.exe以及redis-cli.exe</li></ul><p>使用即：<strong>双击运行redis-server.exe</strong> 文件即可；  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 进程号以及当前启动的时间；</span><br><span class="line">[<span class="number">2460</span>] <span class="number">24</span> Sep <span class="number">13</span>:<span class="number">11</span>:<span class="number">03.987</span></span><br><span class="line"></span><br><span class="line"># 警告没有指定配置文件；当前使用的是默认的配置文件</span><br><span class="line"># Warning: no config file specified, using the <span class="keyword">default</span> config.</span><br><span class="line"></span><br><span class="line"># 为了指定配置文件所使用的的配置文件位置</span><br><span class="line"># In order to specify a config file use F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>\redis-server.exe /path/to/redis.conf</span><br><span class="line"></span><br><span class="line"># redis版本 以及emm 多少位的是</span><br><span class="line">Redis <span class="number">3.2</span><span class="number">.100</span> (<span class="number">00000000</span>/<span class="number">0</span>) <span class="number">64</span> bit</span><br><span class="line"></span><br><span class="line"># redis当前的端口号（redis对外提供服务，所使用的的端口号是<span class="number">6379</span>；ip地址即本机<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="keyword">or</span> localhost）</span><br><span class="line">Port: <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"># redis当前所启动时的进程 process id号</span><br><span class="line"># 每启动一个redis服务就相当于是 Redis redis=new Redis(); new了一个Redis对象一样</span><br><span class="line"># 那么一个对象就是一个实例；那么这个PID可以说是这个实例的ID</span><br><span class="line"># 测试：将当前的这个双击出来的redis-server.exe进行关闭，重新双击redis-server.exe时会发现 PID会发生改变为<span class="number">13028</span>或者是其他的数值</span><br><span class="line"># 如果想要有两个redis-server的服务如何处理；双击一次redis-server再双击一次是没有用的；这样的做法导致的结果是第二次双击的时候会出现闪退现象原因就是端口<span class="number">6379</span>被占；即因为已经存在了一个redis服务了，而存在的该redis服务的端口号是<span class="number">6379</span></span><br><span class="line"># 这个时候就要去另外生成一个redis.conf 配置文件；修改其端口为其他的值；与本机上端口号数值不冲突的一个值</span><br><span class="line"></span><br><span class="line">PID: <span class="number">2460</span></span><br><span class="line"></span><br><span class="line">      http:<span class="comment">//redis.io</span></span><br><span class="line"></span><br><span class="line"># 以下为redis服务端的执行日志</span><br><span class="line"># 回头去操作了redis-cli.exe；那么就将会在redis-server.exe该cmd打服务端日志；哎呀；就是一个服务端后台；redis-cli.exe就是一个客户端别纠结了；</span><br><span class="line">[<span class="number">13028</span>] <span class="number">24</span> Sep <span class="number">13</span>:<span class="number">11</span>:<span class="number">59</span>:<span class="number">345</span> # Server started. Redis version <span class="number">3.2</span><span class="number">.100</span></span><br><span class="line">[<span class="number">13028</span>] <span class="number">24</span> Sep <span class="number">13</span>:<span class="number">11</span>:<span class="number">59.345</span> * The server <span class="keyword">is</span> now ready to accept connections on port <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>redis的客户端，<strong>双击运行redis-cli.exe</strong> 文件即可；（在此处就能够去操作连接服务端，操作的方式是命令行式的）  </p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h4><p>核心文件：  </p><ul><li>redis-server.exe 服务器启动命令</li><li>redis-cli.exe 命令行客户端</li><li>redis.windows.conf redis核心配置文件</li><li>redis-benchmark.exe 性能测试工具</li><li>redis-check-aof.exe AOF文件修复工具</li><li>redis-check-dump.exe RDB文件检查工具（快照持久化文件）</li></ul><h4 id="启动Redis"><a href="#启动Redis" class="headerlink" title="启动Redis"></a>启动Redis</h4><p>服务器启动使用redis-server.exe<br>客户端连接使用redis-cli.exe  </p><p>或者通过CMD 命令提示符来进行启动也是一样的；<br>windows+r调起CMD；</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ASUS&gt;f:</span><br><span class="line"></span><br><span class="line">F:\&gt;cd Redis</span><br><span class="line"></span><br><span class="line">F:\Redis&gt;cd Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span></span><br><span class="line"></span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;</span><br><span class="line"></span><br><span class="line">#查看该目录下的子目录</span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;dir</span><br><span class="line"></span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;redis-server</span><br><span class="line"></span><br><span class="line">--------------------------------------------</span><br><span class="line"></span><br><span class="line"># 再调起一个CMD命令提示符 shell端</span><br><span class="line">C:\Users\ASUS&gt;f:</span><br><span class="line"></span><br><span class="line">F:\&gt;cd Redis</span><br><span class="line"></span><br><span class="line">F:\Redis&gt;cd Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span></span><br><span class="line"></span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;</span><br><span class="line"></span><br><span class="line">#查看该目录下的子目录</span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;dir</span><br><span class="line"></span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;redis-cli</span><br></pre></td></tr></table></figure><h3 id="redis入门-redis基础操作"><a href="#redis入门-redis基础操作" class="headerlink" title="redis入门-redis基础操作"></a>redis入门-redis基础操作</h3><p>目录Contents:  </p><ul><li>Redis简介</li><li>Redis的下载与安装</li><li>Redis的基本操作</li></ul><h4 id="命令行模式工具使用思考"><a href="#命令行模式工具使用思考" class="headerlink" title="命令行模式工具使用思考"></a>命令行模式工具使用思考</h4><ul><li>功能性命令</li><li>清除屏幕信息</li><li>帮助信息查阅</li><li>退出指令</li></ul><p>redis-存放数据(用于客户端操作指令)  </p><h5 id="信息添加-往里放"><a href="#信息添加-往里放" class="headerlink" title="信息添加(往里放)"></a>信息添加(往里放)</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key <span class="built_in">value</span> [EX <span class="built_in">seconds</span>] [PX <span class="built_in">milliseconds</span>] [NX|XX]</span><br></pre></td></tr></table></figure><ul><li>功能<blockquote><p>设置 key，value 数据</p></blockquote></li><li>命令<blockquote><p><strong>set</strong> key value</p></blockquote></li><li>范例<blockquote><p>set name laowang</p></blockquote></li></ul><h5 id="信息查询-往外取"><a href="#信息查询-往外取" class="headerlink" title="信息查询(往外取)"></a>信息查询(往外取)</h5><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get</span> <span class="built_in">key</span></span><br></pre></td></tr></table></figure><p>注意；如果 key 不存在，将返回 nil(空)  </p><ul><li>功能<blockquote><p>根据 key 查询对应的 value，如果不存在，返回空（nil）</p></blockquote></li><li>命令<blockquote><p><strong>get</strong> key</p></blockquote></li><li>范例<blockquote><p>get name</p></blockquote></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">F:\&gt;cd Redis</span><br><span class="line"></span><br><span class="line">F:\Redis&gt;cd Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span></span><br><span class="line"></span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">set</span> name laowang</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> name</span><br><span class="line"><span class="string">"laowang"</span></span><br><span class="line"></span><br><span class="line"># 取一个不存在的key</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> names</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line"># 在redis当中进行清除屏幕指令</span><br><span class="line">clear</span><br><span class="line"># 在windows，即cmd下使用 cls 进行清屏</span><br></pre></td></tr></table></figure><h5 id="清除屏幕信息"><a href="#清除屏幕信息" class="headerlink" title="清除屏幕信息"></a>清除屏幕信息</h5><ul><li>功能<blockquote><p>清除屏幕中的信息</p></blockquote></li><li>命令<blockquote><p>clear</p></blockquote></li></ul><h5 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h5><ul><li>功能<blockquote><p>获取命令帮助文档，获取组中所有命令信息名称</p></blockquote></li><li>命令<blockquote><p>help 命令名<br>  help @组名</p></blockquote></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"># 如果想要看 <span class="keyword">set</span> 指令如何使用则输入以下命令行</span><br><span class="line"></span><br><span class="line">F:\&gt;cd Redis</span><br><span class="line"></span><br><span class="line">F:\Redis&gt;cd Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span></span><br><span class="line"></span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help <span class="keyword">get</span></span><br><span class="line"></span><br><span class="line">  GET key # 命令格式；即指令</span><br><span class="line">  summary: Get the value of a key # 功能描述；总结描述，获取一个key所对应的取值</span><br><span class="line">  since: <span class="number">1.0</span><span class="number">.0</span> # 出现版本；最早的在<span class="number">1.0</span><span class="number">.0</span>版本就有此命令；当前版本为<span class="number">3.2</span><span class="number">.100</span> 该版本</span><br><span class="line">  group: <span class="built_in">string</span> # 所属群组；这个命令属于一个群组；该群组名称叫做<span class="built_in">string</span>；</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help</span><br><span class="line">redis-cli <span class="number">3.2</span><span class="number">.100</span></span><br><span class="line">To <span class="keyword">get</span> help about Redis commands type:</span><br><span class="line">      # 可以去获取一个列表命令</span><br><span class="line">      # 可以获取得到&lt;group&gt;在这个群组当中的所有命令</span><br><span class="line">      # 即比如说 help @<span class="built_in">string</span> 可以获取得到在<span class="built_in">string</span>该群组当中的所有命令</span><br><span class="line">      <span class="string">"help @&lt;group&gt;"</span> to <span class="keyword">get</span> a list of commands <span class="keyword">in</span> &lt;group&gt;</span><br><span class="line"></span><br><span class="line">      # help 命令名称即可以获取得到的是有关于该命令的所有帮助信息</span><br><span class="line">      <span class="string">"help &lt;command&gt;"</span> <span class="keyword">for</span> help on &lt;command&gt;</span><br><span class="line"></span><br><span class="line">      #可以获取一个列表可能帮助的提示</span><br><span class="line">      <span class="string">"help &lt;tab&gt;"</span> to <span class="keyword">get</span> a list of possible help topics</span><br><span class="line"></span><br><span class="line">      # quit即用于退出</span><br><span class="line">      <span class="string">"quit"</span> to exit</span><br><span class="line"></span><br><span class="line">To <span class="keyword">set</span> redis-cli perferences:</span><br><span class="line">      <span class="string">":set hints"</span> enable online hints</span><br><span class="line">      <span class="string">":set nohints"</span> disable online hints</span><br><span class="line">Set your preferences <span class="keyword">in</span> ~/.redisclirc</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line">  SET key value [EX seconds] [PX milliseconds] [NX|XX]</span><br><span class="line">  summary: Set the <span class="built_in">string</span> value of a key</span><br><span class="line">  since: <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">  group: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"># tab x <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @generic</span><br><span class="line"># tab x <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @<span class="built_in">string</span></span><br><span class="line"># tab x <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @list</span><br><span class="line"># tab x <span class="number">4</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @<span class="keyword">set</span></span><br><span class="line"># tab x <span class="number">5</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @sorted_set</span><br><span class="line"># tab x <span class="number">6</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @hash</span><br><span class="line"># tab x <span class="number">7</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @pubsub</span><br><span class="line"># tab x <span class="number">8</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @transactions</span><br><span class="line"># tab x <span class="number">9</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @connection</span><br><span class="line"># tab x <span class="number">10</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @server</span><br><span class="line"># tab x <span class="number">11</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @scripting</span><br><span class="line"># tab x <span class="number">12</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @hyperloglog</span><br><span class="line"># tab x <span class="number">13</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @cluster</span><br><span class="line"># tab x <span class="number">14</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @geo</span><br><span class="line"># tab x <span class="number">15</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @APPEND</span><br><span class="line"># tab x <span class="number">16</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @AUTH</span><br><span class="line"># tab x <span class="number">17</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BGREWRITEAOF</span><br><span class="line"># tab x <span class="number">18</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BGSAVE</span><br><span class="line"># tab x <span class="number">19</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BITCOUNT</span><br><span class="line"># tab x <span class="number">20</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BITFIELD</span><br><span class="line"># tab x <span class="number">21</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BITOP</span><br><span class="line"># tab x <span class="number">22</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BITPOS</span><br><span class="line"># tab x <span class="number">23</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BLPOP</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BRPOP</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BRPOPLPUSH</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @CLIENT GETNAME</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @CLIENT KILL</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @CLIENT LIST</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @CLIENT REPLY</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @CLIENT SETNAME</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @CLIENT ADDSLOTS</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"># (我在干什么傻逼事，我以为有尽头，在这里一直tab * n)</span><br></pre></td></tr></table></figure><h5 id="退出客户端命令行模式"><a href="#退出客户端命令行模式" class="headerlink" title="退出客户端命令行模式"></a>退出客户端命令行模式</h5><ul><li>功能<blockquote><p>退出客户端</p></blockquote></li><li>命令<blockquote><p>quit<br>  exit<br>  &lt;ESC &gt;</p></blockquote></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在cmd当中进行打卡redis-cli；然后按键esc；退出到dos窗口下</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br><span class="line"></span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h5><ol><li>Redis简介（NoSQL数据库；通过以key-value的形式进行存储）</li><li>Redis的下载与安装（绿色版本；容易安装；当前是windows环境3.2.100版本；后期基于linux环境4.0版本来进行实操）</li><li>Redis的基本操作<blockquote><ul><li>set/get(设置键值与取值)</li><li>clear（清屏）</li><li>help（获取帮助信息）</li></ul></blockquote></li></ol><h3 id="数据类型-数据类型简介"><a href="#数据类型-数据类型简介" class="headerlink" title="数据类型-数据类型简介"></a>数据类型-数据类型简介</h3><h4 id="课程安排-1"><a href="#课程安排-1" class="headerlink" title="课程安排"></a>课程安排</h4><h5 id="课程计划"><a href="#课程计划" class="headerlink" title="课程计划"></a>课程计划</h5><h6 id="Windows环境"><a href="#Windows环境" class="headerlink" title="Windows环境"></a>Windows环境</h6><ol><li>redis基础<ul><li>Redis入门</li><li>数据类型</li><li>通用命令</li><li>Jedis</li></ul></li></ol><h6 id="linux环境"><a href="#linux环境" class="headerlink" title="linux环境"></a>linux环境</h6><ol start="2"><li><p>Redis高级</p><ul><li>持久化</li><li>redis.conf</li><li>事务</li><li>集群</li></ul></li><li><p>Redis应用</p><ul><li>企业级解决方案</li></ul></li></ol><h4 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h4><h5 id="目录Contents"><a href="#目录Contents" class="headerlink" title="目录Contents"></a>目录Contents</h5><ul><li><font style="color:red;">数据存储类型介绍</font></li><li>string</li><li>hash</li><li>list</li><li>set</li><li>sorted_set</li><li>数据类型实践案例</li></ul><h4 id="业务数据的特殊性"><a href="#业务数据的特殊性" class="headerlink" title="业务数据的特殊性"></a>业务数据的特殊性</h4><p>为什么设计了五种数据类型（string，list，hash，set，sorted_set），即这五种数据类型的前世今生；  </p><p>一定是发现某一种数据它需要存入到redis当中了；再将这种数据的特征抽出来；然后做成一种数据类型；也就是说用到哪一种就做哪一种；<br>然后总之到现在总结出来了5种足够使用了即足够日常开发了；<br>如果有新需求来了又需要新的数据类型；即后面再去加新的数据类型设计新的数据类型即可；<br>且redis的数据类型并不只有这五种数据类型（string，list，hash，set，sorted_set），后面还会继续介绍其他的一些数据类型；  </p><p>总之还是要回来分析业务情况；通过具体的业务情况找到合适的数据类型进行存储数据；<br>redis最初定位的是作为缓存使用的；那么缓存当中放什么，这个就很关键；</p><h5 id="作为缓存使用"><a href="#作为缓存使用" class="headerlink" title="作为缓存使用"></a>作为缓存使用</h5><ol><li>原始业务功能设计（应用场景：秒杀）<ul><li>秒杀</li><li>京东618</li><li>天猫双十一互动</li><li>12306排队购票</li></ul></li><li>运营平台监控到的突发高频访问数据<ul><li>突发时政要闻，被强势关注围观(娱乐八卦阵-不明真相的吃瓜群众，不能预期预计其成为热点消息热点新闻，但是可以进行平台对其监控处理，平台监控到其（未被预期成为热点的信息）被高频次访问)</li></ul></li><li>高频、复杂的统计数据（应用场景：直播在线人数）<ul><li>在线人数</li><li>投票排行榜（女团男团给人投票实时刷新）</li></ul></li></ol><h5 id="附加功能"><a href="#附加功能" class="headerlink" title="附加功能"></a>附加功能</h5><p>比如说客户量突然变多从200个的访问量客户到以万为单位的客户；（高并发，机器支撑不住）  </p><p>系统功能优化或升级</p><ul><li>单服务器升级集群</li><li>Session管理</li><li>Token管理</li></ul><h5 id="Redis数据类型（5种常用的数据类型）"><a href="#Redis数据类型（5种常用的数据类型）" class="headerlink" title="Redis数据类型（5种常用的数据类型）"></a>Redis数据类型（5种常用的数据类型）</h5><p>可以与java当中的数据类型进行一下类比记忆；它们有很多的相似之处；  </p><ul><li>string        String</li><li>hash          HashMap</li><li>list          LinkedList</li><li>set           HashSet</li><li>sorted_set    TreeSet</li></ul><h3 id="数据类型-string基本操作"><a href="#数据类型-string基本操作" class="headerlink" title="数据类型-string基本操作"></a>数据类型-string基本操作</h3><h4 id="目录Contents-1"><a href="#目录Contents-1" class="headerlink" title="目录Contents"></a>目录Contents</h4><ul><li>数据存储类型介绍</li><li>string</li><li>hash</li><li>list</li><li>set</li><li>sorted_set</li><li>数据类型实践案例</li></ul><h4 id="redis-数据存储格式"><a href="#redis-数据存储格式" class="headerlink" title="redis 数据存储格式"></a>redis 数据存储格式</h4><p>对于redis来说，里面存储数据是一个映射关系；</p><ul><li>redis 自身是一个 Map，其中所有的数据都是采用 <font style="color:red;font-weight:bolder;">key: value</font> 的形式进行存储</li><li><font style="color:red;font-weight:bolder;">数据类型</font> 指的是 存储的数据 的类型，也就是 value 部分的类型，key 部分永远都是字符串</li><li></li></ul><p>这个key，名称是用来访问这个数据使用的；</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Redis 存储空间</span><br><span class="line"></span><br><span class="line">左边为key(永远都是字符串)    右边为value</span><br><span class="line">---------------------------------------------</span><br><span class="line">|  name |                   |    laowang   |</span><br><span class="line">---------------------------------------------</span><br><span class="line"></span><br><span class="line">---------------------------------------------</span><br><span class="line">|  age  |                   |    101       |</span><br><span class="line">---------------------------------------------</span><br><span class="line"></span><br><span class="line">---------------------------------------------</span><br><span class="line">|  名称  |                  |    数据     |</span><br><span class="line">---------------------------------------------</span><br><span class="line"></span><br><span class="line">---------------------------------------------</span><br><span class="line">|  key  |                   |    value     |</span><br><span class="line">---------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="string-类型"><a href="#string-类型" class="headerlink" title="string 类型"></a>string 类型</h4><ul><li>存储的数据：单个数据，最简单（最常用）的数据存储类型，也是最常用的数据存储类型</li><li>存储数据的格式：一个存储空间保存一个数据</li><li>存储内容：通常使用字符串，如果字符串以整数的形式展示，可以作为数字操作使用（但是仍然是一个字符串）<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Redis 存储空间</span><br><span class="line"></span><br><span class="line">---------------------------------------------</span><br><span class="line">|  key1  |------------------&gt;|    laowang   |</span><br><span class="line">---------------------------------------------</span><br><span class="line">|  key1  |------------------&gt;|   4006184000 |</span><br><span class="line">---------------------------------------------</span><br></pre></td></tr></table></figure></li></ul><h4 id="string-类型数据的基本操作"><a href="#string-类型数据的基本操作" class="headerlink" title="string 类型数据的基本操作"></a>string 类型数据的基本操作</h4><ul><li>添加/修改数据<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">key</span> <span class="built_in">value</span></span><br></pre></td></tr></table></figure></li><li>获取数据<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="keyword">value</span></span><br></pre></td></tr></table></figure></li><li>删除数据<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">del</span> <span class="built_in">key</span></span><br></pre></td></tr></table></figure></li></ul><p>练习：  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;redis-cli</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">set</span> name laowang</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> name</span><br><span class="line"><span class="string">"laowang"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">set</span> age <span class="number">11111</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> age</span><br><span class="line"><span class="string">"11111"</span></span><br><span class="line"></span><br><span class="line"># 删除该数据则该数据从redis当中不再有了；</span><br><span class="line"># 删除完成之后返回 (<span class="built_in">int</span>eger) <span class="number">1</span> 代表删除成功；</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; del age</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"></span><br><span class="line"># 这个时候redis的内存当中就不存在该key: age；value: <span class="number">11111</span> 该数据了；</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> age</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line"># 当再去进行删除一个redis内存当中不存在的数据</span><br><span class="line"># 这个时候就返回 (<span class="built_in">int</span>eger)<span class="number">0</span> ；表示删除失败；</span><br><span class="line"># 在redis当中，操作如果是以成功失败为标识的话；都是使用的(<span class="built_in">int</span>eger) <span class="number">1</span> / (<span class="built_in">int</span>eger) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; del age</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>添加/修改多个数据<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span> m 是 单词 Multiple[英 /ˈmʌltɪpl/] 的简写</span><br><span class="line"># <span class="number">2.</span> adj. 多重的；多样的；许多的；n. 倍数；[电]并联；复数 multiples</span><br><span class="line"># <span class="number">3.</span> 就是多个的意思，mset一次性设置多个键值；mget一次性取多个值出来；</span><br><span class="line"># <span class="number">4.</span> 以及原来如果存在该key以及该key所对应的取值；则如果再次设置mset；就将发生覆盖原来key的取值</span><br><span class="line"># <span class="number">5.</span> 通过mget进行取出一个不存在的key时同样返回nil；</span><br><span class="line"># <span class="number">6.</span> 格式: mset key1 value1 key2 value2 ...</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mset a <span class="number">1</span> b <span class="number">2</span> c <span class="number">3</span> d <span class="number">4</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> a</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> b</span><br><span class="line"><span class="string">"2"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> c</span><br><span class="line"><span class="string">"3"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> d</span><br><span class="line"><span class="string">"4"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mget a b c d</span><br><span class="line"><span class="number">1</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"3"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"4"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mset a <span class="number">111</span> b <span class="number">222</span> c <span class="number">333</span> d <span class="number">444</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mget a b c d</span><br><span class="line"><span class="number">1</span>) <span class="string">"111"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"222"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"333"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"444"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mget a e c d</span><br><span class="line"><span class="number">1</span>) <span class="string">"111"</span></span><br><span class="line"><span class="number">2</span>) (nil)</span><br><span class="line"><span class="number">3</span>) <span class="string">"333"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"444"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mget z i p</span><br><span class="line"><span class="number">1</span>) (nil)</span><br><span class="line"><span class="number">2</span>) (nil)</span><br><span class="line"><span class="number">3</span>) (nil)</span><br></pre></td></tr></table></figure></li><li>获取多个数据<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 格式：mget key1 key2 ...</span><br><span class="line"></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; set a <span class="number">11111</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure></li><li>获取数据字符个数（字符串长度）<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 格式：strlen key</span><br><span class="line"></span><br><span class="line"># a 该key的value有<span class="number">5</span>个字符（长度）</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; strlen a</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; strlen name</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">7</span></span><br></pre></td></tr></table></figure></li><li>追加信息到原始信息后部（如果原始信息存在就追加，否则新建）<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 格式：append key value</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> a</span><br><span class="line"><span class="string">"11111"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; append a <span class="number">22222</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> a</span><br><span class="line"><span class="string">"1111122222"</span></span><br><span class="line"></span><br><span class="line"># append一个在redis内存当中并不存在的key也会成功；即不存在则新建；</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; append laowang <span class="number">999999</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">6</span></span><br><span class="line"></span><br><span class="line"># 当这个变量对应的存储值如果存在则追加；不存在则新建</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> laowang</span><br><span class="line"><span class="string">"999999"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数据类型-单指令操作与多指令操作的选择之惑"><a href="#数据类型-单指令操作与多指令操作的选择之惑" class="headerlink" title="数据类型-单指令操作与多指令操作的选择之惑"></a>数据类型-单指令操作与多指令操作的选择之惑</h3><h4 id="string-类型数据的基本操作-1"><a href="#string-类型数据的基本操作-1" class="headerlink" title="string 类型数据的基本操作"></a>string 类型数据的基本操作</h4><p>单数据操作与多数据操作如何选择<br>（什么时候用set更好；什么时候用mset更好）</p><h4 id="单数据操作与多数据操作的选择之惑"><a href="#单数据操作与多数据操作的选择之惑" class="headerlink" title="单数据操作与多数据操作的选择之惑"></a>单数据操作与多数据操作的选择之惑</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">key</span> <span class="built_in">value</span></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="built_in">vs</span></span><br></pre></td></tr></table></figure><p>mset key1 value1 key2 value2 …</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">区别：  </span><br><span class="line"></span><br><span class="line">* <span class="built_in">set</span>一次性只能设置一个<span class="built_in">key</span>的取值<span class="built_in">value</span></span><br><span class="line">* mset一次性只能设置多个<span class="built_in">key</span>的取值<span class="built_in">value</span></span><br><span class="line">* <span class="built_in">get</span>与mget同理</span><br><span class="line"></span><br><span class="line">一条指令的执行过程</span><br></pre></td></tr></table></figure><hr><p>|           |——–set—-》|          |<br>| 应用服务器 |                | Redis服务|<br>|           |《——result—|          |</p><hr><p>一条指令执行的整个过程<br>首先指令到达以后发送给redis;<br>redis拿到指令以后；结束完把结果返回给服务器；<br>那么在这个过程当中；<br>有这么几个地方是需要耗费时间的；</p><ol><li>set指令从应用服务器发送到redis服务这个过程是需要耗费时间的</li><li>到达redis服务，执行指令同样是需要耗费时间的</li><li>那么redis返回查询到的数据回去到应用服务器也是需要耗费时间的；</li></ol><p>那么如果是三个指令的话；那么上述过程将会是一个O(n)的过程即上述过程执行3遍；</p><ol><li>发送指令 x 3</li><li>执行指令 x 3</li><li>返回结果 x 3<br>那么其总执行时间为多少？<br>假定指令发送与指令返回的时间一样那么总执行时间为：</li></ol><p>单指令（set）3条指令的执行过程时间为<br>发送返回时间 x 6 + 执行时间 x 3</p><p>如果是多指令（mset）3条指令的执行过程为<br>发送返回时间 x 2 + 执行时间 x 3</p><p>均衡一下发送时长和执行时长之间的关系；<br>假如说当前需要操作50（大数据量）个数据；set与mset的效率差距；<br>没有明确的结论说什么时候用set什么时候用mset；<br>都是结合具体的业务情况才能作出选择出更适合某个业务场景下的指令；</p><p>如果一次发送完所消耗的时长执行完的时长非常的大的话，那么对于单线程的环境来说并不适用；所以说面对这种情况一定需要及时切割；</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 数据类型-数值增减操作</span><br><span class="line"></span><br><span class="line">#### string 类型数据的扩展操作</span><br><span class="line"></span><br><span class="line">##### 业务场景</span><br><span class="line"></span><br><span class="line">在开发当中，随着业务进行数据量也会越来越大；一张表能够存储的数据量不能够让其无限极的进行扩张；否则会非常影响查询效率；那么这个时候采取的方式就是将一张数据量大的表切割分割成几张小表；甚至将一个库当中的表分散到几个库这样的处理操作；那么这对应的操作即分库分表；</span><br><span class="line">在这里不考虑分库问题仅仅考虑分表问题；</span><br><span class="line">那么表有了而表中的id是一个一个连续自增的；</span><br><span class="line">那么如果将这些数据分到别的表当中；</span><br><span class="line">就将会出现一个问题；每一个表控制自己的主键自增；会出现问题；即主键重复；</span><br><span class="line">于是就需要去解决主键重复的问题；</span><br><span class="line"></span><br><span class="line">大型企业及应用中，分表操作是基本操作，使用多张表存储同类型数据；</span><br><span class="line">但是对应的主键 id 必须保证统一性，不能重复。</span><br><span class="line">Oracle数据库具有 sequence 设定（有序列的概念所以可以解决分表时主键重复问题），可以解决该问题。</span><br><span class="line">但是 MySQL 数据库并不具有类似的机制，那么该如何解决？</span><br><span class="line"></span><br><span class="line">把原来的表分成若干张表之后；只要保证一点；所有的主键id不重复即可；  </span><br><span class="line">这个主键id原本由数据库控制现在由其他服务进行控制；</span><br><span class="line"></span><br><span class="line">##### 解决方案</span><br><span class="line"></span><br><span class="line">* 设置数值数据增加指定范围的值</span><br></pre></td></tr></table></figure><p>  incr key<br>  incrby key increment<br>  incrbyfloat key increment<br>  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>设置数值数据减少指定范围的值</span><br></pre></td></tr></table></figure><br>  decr key<br>  decrby key decrement<br>  <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">对一个字符串进行操作；如果该字符串的取值是一个纯数字；</span><br><span class="line">那么对其进行+<span class="number">1</span>（increment）/<span class="number">-1</span>（decrement）操作</span><br></pre></td></tr></table></figure><br>127.0.0.1:6379&gt; set num 1<br>OK</p><p>127.0.0.1:6379&gt; incr num<br>(integer) 2</p><p>127.0.0.1:6379&gt; get num<br>“2”</p><p>127.0.0.1:6379&gt; incr num<br>(integer) 3</p><p>127.0.0.1:6379&gt; incr num<br>(integer) 4</p><p>127.0.0.1:6379&gt; get num<br>“4”</p><p>127.0.0.1:6379&gt; decr num<br>(integer) 3</p><p>127.0.0.1:6379&gt; get num<br>“3”</p><h1 id="查看-incrby-命令详细"><a href="#查看-incrby-命令详细" class="headerlink" title="查看 incrby 命令详细"></a>查看 incrby 命令详细</h1><p>127.0.0.1:6379&gt; help incrby</p><p>  INCRBY key increment</p><h1 id="为一个key增加一个整数值；by-the-given-amount-用给定的值进行增加；"><a href="#为一个key增加一个整数值；by-the-given-amount-用给定的值进行增加；" class="headerlink" title="为一个key增加一个整数值；by the given amount 用给定的值进行增加；"></a>为一个key增加一个整数值；by the given amount 用给定的值进行增加；</h1><h1 id="即默认incr-是-1；decr-是-1"><a href="#即默认incr-是-1；decr-是-1" class="headerlink" title="即默认incr 是+1；decr 是 -1"></a>即默认incr 是+1；decr 是 -1</h1><h1 id="而incrby-与-decrby-则是让它-n；或者是让它-n；"><a href="#而incrby-与-decrby-则是让它-n；或者是让它-n；" class="headerlink" title="而incrby 与 decrby 则是让它 +n；或者是让它 -n；"></a>而incrby 与 decrby 则是让它 +n；或者是让它 -n；</h1><p>  summary: Increment the integer value of a key by the given amount<br>  since: 1.0.0<br>  group: string</p><p>127.0.0.1:6379&gt; incrby num 10<br>(integer) 13</p><p>127.0.0.1:6379&gt; get num<br>“13”</p><p>127.0.0.1:6379&gt; decrby num 2<br>(integer) 11</p><p>127.0.0.1:6379&gt; get num<br>“11”</p><h1 id="incrbyfloat-float则与小数有关；"><a href="#incrbyfloat-float则与小数有关；" class="headerlink" title="incrbyfloat float则与小数有关；"></a>incrbyfloat float则与小数有关；</h1><p>127.0.0.1:6379&gt; incrbyfloat num 0.5<br>“11.5”</p><p>127.0.0.1:6379&gt; get num<br>“11.5”</p><p>127.0.0.1:6379&gt; incrbyfloat num 0.00000000009<br>“11.500000000089999”</p><p>127.0.0.1:6379&gt; get num<br>“11.500000000089999”</p><h1 id="尝试-incrby-添加的increment为float类型取值"><a href="#尝试-incrby-添加的increment为float类型取值" class="headerlink" title="尝试 incrby 添加的increment为float类型取值"></a>尝试 incrby 添加的increment为float类型取值</h1><p>127.0.0.1:6379&gt; incrby num 0.9</p><h1 id="报错；错误值不是一个integer类型取值或者超出其范围取值"><a href="#报错；错误值不是一个integer类型取值或者超出其范围取值" class="headerlink" title="报错；错误值不是一个integer类型取值或者超出其范围取值"></a>报错；错误值不是一个integer类型取值或者超出其范围取值</h1><p>(error) ERR value is not an integer or out of range</p><h1 id="即-incr、incrby、decr、decrby专用于操作整数；incrbyfloat用于操作小数"><a href="#即-incr、incrby、decr、decrby专用于操作整数；incrbyfloat用于操作小数" class="headerlink" title="即 incr、incrby、decr、decrby专用于操作整数；incrbyfloat用于操作小数"></a>即 incr、incrby、decr、decrby专用于操作整数；incrbyfloat用于操作小数</h1><h1 id="需要注意的一点是：incrby-与-decrby-后面的取值-increment与-decrement可以是正数也可以是负数；"><a href="#需要注意的一点是：incrby-与-decrby-后面的取值-increment与-decrement可以是正数也可以是负数；" class="headerlink" title="需要注意的一点是：incrby 与 decrby 后面的取值 increment与 decrement可以是正数也可以是负数；"></a>需要注意的一点是：incrby 与 decrby 后面的取值 increment与 decrement可以是正数也可以是负数；</h1><p>127.0.0.1:6379&gt; set num1 1<br>OK</p><h1 id="num1-1-1-1-0"><a href="#num1-1-1-1-0" class="headerlink" title="( + num1 ) + ( - 1 ) = 1 - 1 = 0"></a>( + num1 ) + ( - 1 ) = 1 - 1 = 0</h1><p>127.0.0.1:6379&gt; incrby num1 -1<br>(integer) 0</p><p>127.0.0.1:6379&gt; get num1<br>“0”</p><h1 id="num1-1-0-1-1"><a href="#num1-1-0-1-1" class="headerlink" title="( + num1 ) + ( 1 ) = 0 + 1 = 1"></a>( + num1 ) + ( 1 ) = 0 + 1 = 1</h1><p>127.0.0.1:6379&gt; incrby num1 1<br>(integer) 1</p><p>127.0.0.1:6379&gt; get num1<br>“1”</p><h1 id="num1-2-1-2-1"><a href="#num1-2-1-2-1" class="headerlink" title="( + num1 ) + ( - 2 ) = 1 - 2 = -1"></a>( + num1 ) + ( - 2 ) = 1 - 2 = -1</h1><p>127.0.0.1:6379&gt; incrby num1 -2<br>(integer) -1</p><h1 id="num1-2-1-2-3"><a href="#num1-2-1-2-3" class="headerlink" title="( + num1 ) + ( - 2 ) = -1 - 2 = -3"></a>( + num1 ) + ( - 2 ) = -1 - 2 = -3</h1><p>127.0.0.1:6379&gt; decrby num1 2<br>(integer) -3</p><p>127.0.0.1:6379&gt; get num1<br>“-3”</p><h1 id="num1-1-3-3-3-3-0"><a href="#num1-1-3-3-3-3-0" class="headerlink" title="( + num1 ) + ( - 1 ) = -3 - ( -3 ) = -3 + 3 = 0"></a>( + num1 ) + ( - 1 ) = -3 - ( -3 ) = -3 + 3 = 0</h1><p>127.0.0.1:6379&gt; decrby num1 -3<br>(integer) 0</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### <span class="type">string</span>作为数值操作</span><br><span class="line"></span><br><span class="line">* <span class="type">string</span>在redis内部存储默认就是一个字符串，当遇到增减类型操作incr、decr时就会转变成数值型进行计算；(归根结底其还是一个字符串)</span><br><span class="line">* redis所有的操作都是原子性的，采用单线程处理所有业务，命令是一个一个执行的；因此无需考虑并发带来的数据；</span><br><span class="line">* 注意：&lt;font style=<span class="string">"color:red;"</span>&gt;按数值进行操作的数据，如果原始数据不能转成数值，或则超越了redis数值上限范围，将报错&lt;/font&gt;。</span><br><span class="line"><span class="number">9</span> <span class="number">22</span> <span class="number">33</span>  <span class="number">7203</span> <span class="number">6854</span> <span class="number">77</span> <span class="number">5807</span> （java中long型数据最大取值，Long.MAX_VALUE）</span><br></pre></td></tr></table></figure><h1 id="1-第一种情况：原始数据不能转成数值"><a href="#1-第一种情况：原始数据不能转成数值" class="headerlink" title="1. 第一种情况：原始数据不能转成数值"></a>1. 第一种情况：原始数据不能转成数值</h1><p>  127.0.0.1:6379&gt; set num2 abc<br>  OK<br>  127.0.0.1:6379&gt; incr num2<br>  (error) ERR value is not an integer or out of range</p><h1 id="2-第二种情况，超越redis数值上限范围"><a href="#2-第二种情况，超越redis数值上限范围" class="headerlink" title="2. 第二种情况，超越redis数值上限范围"></a>2. 第二种情况，超越redis数值上限范围</h1><p>  127.0.0.1:6379&gt; incrby num2 11111111111111111111111111111111111111111111111111111111111111<br>  (error) ERR value is not an integer or out of range<br>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; **Tips <span class="number">1</span>:**</span><br><span class="line">  * redis用于控制数据库表主键id，为数据库表主键提供生成策略，保障数据库表的主键唯一性</span><br><span class="line">  * 此方案适用于所有数据库，且支持数据库集群</span><br><span class="line"></span><br><span class="line">### 数据类型-数据时效性设置</span><br><span class="line"></span><br><span class="line">#### string 类型数据的扩展操作</span><br><span class="line"></span><br><span class="line">##### 业务场景</span><br><span class="line"></span><br><span class="line">* “最强女生” 启动海选投票，只能通过微信投票，每个微信号每<span class="number">4</span>个小时只能投<span class="number">1</span>票；</span><br><span class="line">* 电商商家开启热门商品推荐，热门商品不能一直处于热门期，每种商品热门期维持<span class="number">3</span>天，<span class="number">3</span>天后自动取消热门；</span><br><span class="line">* 新闻网站会出现热点新闻，热点新闻最大的特征是时效性，如何自动控制热点新闻的时效性</span><br></pre></td></tr></table></figure><br>news_id: HB314790725 3分钟时效性：03:00（进行倒数计时）<br>                                 ↓ ↓ ↓<br>news_id: HB314790725 3分钟时效性：00:00</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 解决方案</span><br><span class="line"></span><br><span class="line">* 设置数据具有指定的生命周期(数据能活多久，比如三分钟、五分钟之类的验证码时效性)</span><br></pre></td></tr></table></figure><h1 id="1-这两个命令的差别在于生命周期的单位不同"><a href="#1-这两个命令的差别在于生命周期的单位不同" class="headerlink" title="1. 这两个命令的差别在于生命周期的单位不同"></a>1. 这两个命令的差别在于生命周期的单位不同</h1><h1 id="2-setex命令的时间单位为-秒seconds"><a href="#2-setex命令的时间单位为-秒seconds" class="headerlink" title="2. setex命令的时间单位为 秒seconds"></a>2. setex命令的时间单位为 秒seconds</h1><h1 id="3-psetex命令的时间单位为-毫秒milliseconds"><a href="#3-psetex命令的时间单位为-毫秒milliseconds" class="headerlink" title="3. psetex命令的时间单位为 毫秒milliseconds"></a>3. psetex命令的时间单位为 毫秒milliseconds</h1><h1 id="格式：setex-key-seconds-value"><a href="#格式：setex-key-seconds-value" class="headerlink" title="格式：setex key seconds value"></a>格式：setex key seconds value</h1><h1 id="格式：psetex-key-milliseconds-value"><a href="#格式：psetex-key-milliseconds-value" class="headerlink" title="格式：psetex key milliseconds value"></a>格式：psetex key milliseconds value</h1><p>  #示例(10秒后过期)：<br>  127.0.0.1:6379&gt; setex tel 10 1<br>  OK<br>  127.0.0.1:6379&gt; get tel<br>  “1”<br>  127.0.0.1:6379&gt; get tel<br>  “1”<br>  127.0.0.1:6379&gt; get tel<br>  (nil)<br>  127.0.0.1:6379&gt;</p><h1 id="如果在-setex-之后重新对同一个键进行-set-key-value；则setex命令所指定的生命周期将不再起作用"><a href="#如果在-setex-之后重新对同一个键进行-set-key-value；则setex命令所指定的生命周期将不再起作用" class="headerlink" title="如果在 setex 之后重新对同一个键进行 set key value；则setex命令所指定的生命周期将不再起作用"></a>如果在 setex 之后重新对同一个键进行 set key value；则setex命令所指定的生命周期将不再起作用</h1><p>  127.0.0.1:6379&gt; setex tel 10 1<br>  OK<br>  127.0.0.1:6379&gt; set tel 2<br>  OK<br>  127.0.0.1:6379&gt; get tel<br>  “2”<br>  127.0.0.1:6379&gt;<br>  <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; **Tips <span class="number">2</span>:**</span><br><span class="line"></span><br><span class="line">* redis 控制数据的生命周期，通过数据是否失效控制业务行为，适用于所有具有时效性限定控制的操作</span><br><span class="line"></span><br><span class="line">### key的命名规范</span><br><span class="line"></span><br><span class="line">#### <span class="built_in">string</span> 类型数据操作的注意事项</span><br><span class="line"></span><br><span class="line">* 数据操作不成功的反馈与数据正常操作之间的差异</span><br><span class="line">  ① 表示运行结构是否成功</span><br><span class="line">    * （<span class="built_in">int</span>eger）<span class="number">0</span> ---&gt; <span class="literal">false</span> 失败</span><br><span class="line">    * （<span class="built_in">int</span>eger）<span class="number">1</span> ---&gt; <span class="literal">true</span>  成功</span><br><span class="line">  </span><br><span class="line">  ② 表示运行结果值</span><br><span class="line">    * （<span class="built_in">int</span>eger）<span class="number">3</span> ---&gt; <span class="number">3</span>个</span><br><span class="line">    * （<span class="built_in">int</span>eger）<span class="number">1</span> ---&gt; <span class="number">1</span>个</span><br><span class="line">* 数据未获取到</span><br><span class="line">  ①（nil）等同于<span class="literal">null</span>，不存在</span><br><span class="line">* 数据最大存储量</span><br><span class="line">  ① <span class="number">512</span>MB（上限）</span><br><span class="line">* 数据计算最大范围（java中的long的最大值）</span><br><span class="line">  ① <span class="number">9</span> <span class="number">22</span> <span class="number">33</span> <span class="number">7203</span> <span class="number">6854</span> <span class="number">7758</span> <span class="number">07</span></span><br><span class="line">  ① <span class="number">-9</span> <span class="number">22</span> <span class="number">33</span> <span class="number">7203</span> <span class="number">6854</span> <span class="number">7758</span> <span class="number">07</span></span><br><span class="line">  ③ 比 <span class="number">9</span> <span class="number">22</span> <span class="number">33</span> <span class="number">7203</span> <span class="number">6854</span> <span class="number">7758</span> <span class="number">07</span>还要大；比<span class="number">-9</span> <span class="number">22</span> <span class="number">33</span> <span class="number">7203</span> <span class="number">6854</span> <span class="number">7758</span> <span class="number">07</span>还要小；则抛出异常Error；</span><br><span class="line"></span><br><span class="line">#### <span class="built_in">string</span> 类型应用场景</span><br><span class="line"></span><br><span class="line">##### 业务场景</span><br><span class="line"></span><br><span class="line">主页高频访问信息显示控制，例如新浪微博大V主页显示粉丝数与微博数量；  </span><br><span class="line"></span><br><span class="line">这种数据如何放入到redis当中怎样进行存储？</span><br><span class="line"></span><br><span class="line">##### 解决方案</span><br><span class="line"></span><br><span class="line">* 在redis中为大V用户设定用户信息，以用户主键和属性值作为key，后台设定定时刷新策略即可</span><br></pre></td></tr></table></figure></p><h1 id="表名：主键名：主键值：属性名"><a href="#表名：主键名：主键值：属性名" class="headerlink" title="表名：主键名：主键值：属性名"></a>表名：主键名：主键值：属性名</h1><p>  eg:  user:id:3506728370:fans         —&gt;     12210947<br>  eg:  user:id:3506728370:blogs        —&gt;     6164<br>  eg:  user:id:3506728370:focuss       —&gt;     83</p><p>  127.0.0.1:6379&gt; set user:id:00789:fans 123456789<br>  OK</p><p>  127.0.0.1:6379&gt; set user:id:00789:blogs 789<br>  OK</p><p>  127.0.0.1:6379&gt; set user:id:00789 {id:00789,blogs:789,,fans:123456789}<br>  OK</p><p>  127.0.0.1:6379&gt; incr user:id:00789:fans<br>  (integer) 123456790</p><h1 id="是直接存储属性取值还是通过json方式哪一种比较好；"><a href="#是直接存储属性取值还是通过json方式哪一种比较好；" class="headerlink" title="是直接存储属性取值还是通过json方式哪一种比较好；"></a>是直接存储属性取值还是通过json方式哪一种比较好；</h1><h1 id="第一种可以取第二种也可以取出；"><a href="#第一种可以取第二种也可以取出；" class="headerlink" title="第一种可以取第二种也可以取出；"></a>第一种可以取第二种也可以取出；</h1><h1 id="第一种改变数据会要方便一些；"><a href="#第一种改变数据会要方便一些；" class="headerlink" title="第一种改变数据会要方便一些；"></a>第一种改变数据会要方便一些；</h1><h1 id="第二种一改全改；两者没有说好坏需要看具体的业务逻辑情况、业务场景而定、选择；"><a href="#第二种一改全改；两者没有说好坏需要看具体的业务逻辑情况、业务场景而定、选择；" class="headerlink" title="第二种一改全改；两者没有说好坏需要看具体的业务逻辑情况、业务场景而定、选择；"></a>第二种一改全改；两者没有说好坏需要看具体的业务逻辑情况、业务场景而定、选择；</h1><p>  127.0.0.1:6379&gt;</p>  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>在redis中以json格式存储大V用户信息，定时刷新（也可以）</span><br></pre></td></tr></table></figure><p>  eg:  user:id:3506728370         —&gt;     {id:3506728370,name:春晚,fans:123456789,blogs:6164,focus:83}<br>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; **Tips3:**</span><br><span class="line"></span><br><span class="line">* redis应用于各种结构型和非结构型高热读数据访问加速</span><br><span class="line"></span><br><span class="line">#### key的设置约定</span><br><span class="line"></span><br><span class="line">* 数据库中的热点数据key命令惯例</span><br></pre></td></tr></table></figure></p><hr><pre><code>表名 ：主键名 ：主键值   ：字段名</code></pre><hr><pre><code>eq1 : order :   id  : 29437595 : name</code></pre><hr><pre><code>eq2 : equip :   id  : 390472345: type</code></pre><hr><pre><code>eq3 : news  :   id  : 202004150: title</code></pre><hr>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">redis当中的大数据还是来自于数据库（mysql）；也有小部分不是来自于数据库；  </span><br><span class="line"></span><br><span class="line">### 数据类型-hash类型介绍与基本操作</span><br><span class="line"></span><br><span class="line">#### 目录Contents</span><br><span class="line"></span><br><span class="line">* 数据存储类型介绍</span><br><span class="line">* string</span><br><span class="line">* hash</span><br><span class="line">* list</span><br><span class="line">* set</span><br><span class="line">* sorted_set</span><br><span class="line"></span><br><span class="line">#### hash类型</span><br><span class="line"></span><br><span class="line">##### 存储的疑惑</span><br><span class="line"></span><br><span class="line">* string当中以json方式存储数据的格式；</span><br></pre></td></tr></table></figure><hr><p>| h_user user:id:3506728370 |——–&gt;| {name:春晚, fans:12210862, blogs:6164, focus:83}|</p><hr><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(取出数据还行，但是对于修改数据就显得笨拙)  </span><br><span class="line"></span><br><span class="line">对于上述操作；对象类型数据的存储如果具有比较**频繁的更新需求操作**会显得笨重  </span><br><span class="line">那么此时针对这种比较频繁的更新需求操作转换成<span class="built_in">string</span>以属性单个进行存储取值方式则他们这几个数据是分散分离的：</span><br></pre></td></tr></table></figure><hr><p>|—————————————–         ———–         |<br>|| h_user user:id:3506728370       :name |——–&gt;|  春晚  |          |<br>|—————————————–         ———–         |<br>|                                                                      |<br>|—————————————–         ————        |<br>|| h_user user:id:3506728370       :fans |——–&gt;| 12210862 |        |<br>|—————————————–         ————        |<br>|                                                                      |<br>|——————————————         ———–        |<br>|| h_user user:id:3506728370       :blogs |——–&gt;|  83     |        |<br>|——————————————         ———–        |</p><hr><pre><code>|       |       ||       |       ||       |       |↓       ↓       ↓</code></pre><hr><p>|                              ————————————–  |<br>|                              |                                    |  |<br>|——————————|———–         ———       |  |<br>|| h_user user:id:3506728370   |   :name |——–&gt;|  春晚  |       |  |<br>|——————————|———-         ———-       |  |<br>|                              |                                    |  |<br>|——————————|———-         ————     |  |<br>|| h_user user:id:3506728370   |   :fans |——–&gt;| 12210862 |     |  |<br>|——————————|———-         ————     |  |<br>|                              |                                    |  |<br>|——————————|———–         ——–        |  |<br>|| h_user user:id:3506728370   |   :blogs |——–&gt;|  83 |         |  |<br>|——————————|———–         ——–        |  |<br>|                              |                                    |  |<br>|                              ————————————–  |<br>|————————————————————————<br>                   |       |       |<br>                   |       |       |<br>                   |       |       |<br>                   ↓       ↓       ↓<br>#换结构；左边主键合一；右边将属性对上其值放一块；redis为键值对数据库；类似于redis里面放redis的意思；😂；对应的数据还是value</p><hr><p>|                                               ————————————–  |<br>|                                               | 存储空间                           |  |<br>|                                               |   ——–         ———-      |  |<br>|                                               |   | name |         |  春晚  |      |  |<br>|                                               |   ——–         ———-      |  |<br>|—————————–                  |                                    |  |<br>|| h_user user:id:3506728370 |—————–&gt;|   ——–         ————    |  |<br>|—————————–                  |   | fans |         | 12210862 |    |  |<br>|                                               |   ——–         ————    |  |<br>|                                               |                                    |  |<br>|                                               |   ———         ——–       |  |<br>|                                               |   | blogs |         |  83  |       |  |<br>|                                               |   ———         ——–       |  |<br>|                                               |                                    |  |<br>|                                               ————————————–  |</p><hr><pre><code>|       |       ||       |       ||       |       |↓       ↓       ↓</code></pre><hr><p>|                                               ———————————————————– - |<br>|                                               | 存储空间（右边的该结构即hash）                             |  |<br>|                                               |   ——————–         ——————–      |  |<br>|                                               |   |  field  |  name |         |  value  |  春晚  |        |  |<br>|                                               |   ——————–         ——————–      |  |<br>|—————————————-       |                                                          |  |<br>||   key    | h_user user:id:3506728370 |——&gt;|   ——————–         ———————-    |  |<br>|—————————————-       |   |  field  |  fans |         |  value  |  12210862 |    |  |<br>|                                               |   ——————–         ———————-    |  |<br>|                                               |                                                          |  |<br>|                                               |   ——————–         ——————–      |  |<br>|                                               |   |  field  |  blogs |         |  value  |  83  |        |  |<br>|                                               |   ——————–         ——————–      |  |<br>|                                               |                                                          |  |<br>|                                               ————————————————————  |</p><hr><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">或者说key对应的不再是一个单独的数据了；而是一堆数据；</span><br><span class="line">而这一对数据它的整体结构和前面所看的那个结构是一模一样的；这就是所谓的hash类型；</span><br><span class="line"></span><br><span class="line">#### hash类型</span><br><span class="line"></span><br><span class="line">* 新的存储需求：对一系列存储的数据进行编组，方便管理，典型应用存储对象信息；（可以理解为是redis当中的小型redis）</span><br><span class="line">* 需要的存储结构：一个存储空间保存多个键值对数据；</span><br></pre></td></tr></table></figure><hr><p>|                                               ———————————————————– - |<br>|                                               | hash存储空间                                              |  |<br>|                                               |   ——————–         ——————-       |  |<br>|                                               |   |      field1     |          |      value1     |       |  |<br>|                                               |   ——————–         ——————-       |  |<br>|—————————————-       |                                                          |  |<br>||                key                   |——&gt;|   ——————–        ———————-     |  |<br>|—————————————-       |   |      field2     |          |      value2     |       |  |<br>|                                               |   ——————–        ———————-     |  |<br>|                                               |                                                          |  |<br>|                                               |   ——————–         ——————–      |  |<br>|                                               |   |      field3      |         |      value3     |       |  |<br>|                                               |   ——————–         ——————–      |  |<br>|                                               |                                                          |  |<br>|                                               ————————————————————  |</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">hash</span>底层其实为一个<span class="built_in">hash</span>表的存储结构；  </span><br><span class="line"><span class="built_in">hash</span>存储结构优化：  </span><br><span class="line"></span><br><span class="line">* 如果field数量较少，存储结构优化为类数组（还不是真数组）结构</span><br><span class="line">* 如果field数量较多，存储结构使用HashMap结构</span><br><span class="line"></span><br><span class="line"><span class="comment">#### hash 类型数据的基本操作</span></span><br><span class="line"></span><br><span class="line">* 添加/修改数据(属性存在则进行修改；属性不存在则进行新增)</span><br></pre></td></tr></table></figure><p>  hset key field value<br>  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>获取数据</span><br></pre></td></tr></table></figure><br>  hget key field<br>  hgetall key<br>  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>删除数据</span><br></pre></td></tr></table></figure><br>  hdel key field1 [field2 …]<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure></p><h1 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h1><p>127.0.0.1:6379&gt; hset user name laowang<br>(integer) 1<br>127.0.0.1:6379&gt; hset user age 100<br>(integer) 1<br>127.0.0.1:6379&gt; hset user gender girl<br>(integer) 1</p><h1 id="将值全部取出"><a href="#将值全部取出" class="headerlink" title="将值全部取出"></a>将值全部取出</h1><p>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laowang”<br>3) “age”<br>4) “100”<br>5) “gender”<br>6) “girl”</p><h1 id="进行单个取值"><a href="#进行单个取值" class="headerlink" title="进行单个取值"></a>进行单个取值</h1><p>127.0.0.1:6379&gt; hget user name<br>“laowang”<br>127.0.0.1:6379&gt; hget user gender<br>“girl”<br>127.0.0.1:6379&gt; hget user age<br>“100”</p><h1 id="进行删除属性"><a href="#进行删除属性" class="headerlink" title="进行删除属性"></a>进行删除属性</h1><p>127.0.0.1:6379&gt; hdel user gender<br>(integer) 1<br>127.0.0.1:6379&gt; hdel user age name<br>(integer) 2<br>127.0.0.1:6379&gt; hdel user age<br>(integer) 0<br>127.0.0.1:6379&gt; hgetall user<br>(empty list or set)</p><h1 id="设置值；重新赋值则覆盖原来存在的值"><a href="#设置值；重新赋值则覆盖原来存在的值" class="headerlink" title="设置值；重新赋值则覆盖原来存在的值"></a>设置值；重新赋值则覆盖原来存在的值</h1><p>127.0.0.1:6379&gt; hset user name laowang<br>(integer) 1<br>127.0.0.1:6379&gt; hset user name laoli<br>(integer) 0<br>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laoli”<br>127.0.0.1:6379&gt; hset user name laowang<br>(integer) 0<br>127.0.0.1:6379&gt; hget user name<br>“laowang”</p><h1 id="查看长度；检查的是field的数量；"><a href="#查看长度；检查的是field的数量；" class="headerlink" title="查看长度；检查的是field的数量；"></a>查看长度；检查的是field的数量；</h1><p>127.0.0.1:6379&gt; hlen user<br>(integer) 1</p><h1 id="检查field是否存在；0不存在；1存在"><a href="#检查field是否存在；0不存在；1存在" class="headerlink" title="检查field是否存在；0不存在；1存在"></a>检查field是否存在；0不存在；1存在</h1><p>127.0.0.1:6379&gt; hexists user gender<br>(integer) 0<br>127.0.0.1:6379&gt; hexists user name<br>(integer) 1</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 数据类型-hash扩展操作与使用注意事项</span><br><span class="line"></span><br><span class="line">#### hash 类型数据扩展操作</span><br><span class="line"></span><br><span class="line">(key当中的field不会进行重复，就如果重复设置相同的field将会发生覆盖；而不同的field所对应的是允许相同值存在的)</span><br></pre></td></tr></table></figure><p>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laowang”<br>3) “gender”<br>4) “101.09”<br>5) “age”<br>6) “101.09”<br>127.0.0.1:6379&gt; hset user name laoli<br>(integer) 0<br>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laoli”<br>3) “gender”<br>4) “101.09”<br>5) “age”<br>6) “101.09”</p><p>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laowang”<br>3) “gender”<br>4) “girl”<br>5) “age”<br>6) “101.09”<br>127.0.0.1:6379&gt; hset user gender 101.09<br>(integer) 0<br>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laowang”<br>3) “gender”<br>4) “101.09”<br>5) “age”<br>6) “101.09”</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">* </span>获取哈希表中所有的字段名或字段值</span><br></pre></td></tr></table></figure><p>  hkeys key<br>  hvals key<br>  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>设置指定字段的数值数据增加指定范围的值</span><br></pre></td></tr></table></figure><br>  hincrby key field increment<br>  hincrbyfloat key field increment<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><br>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laowang”<br>3) “gender”<br>4) “girl”<br>5) “age”<br>6) “100”<br>127.0.0.1:6379&gt; hkeys user</p><p>1) “name”<br>2) “gender”<br>3) “age”<br>127.0.0.1:6379&gt; hvals user</p><p>1) “laowang”<br>2) “girl”<br>3) “100”<br>127.0.0.1:6379&gt; hincrby user age 1<br>(integer) 101<br>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laowang”<br>3) “gender”<br>4) “girl”<br>5) “age”<br>6) “101”<br>127.0.0.1:6379&gt; hincrbyfloat user age 0.09<br>“101.09”<br>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laowang”<br>3) “gender”<br>4) “girl”<br>5) “age”<br>6) “101.09”</p><p>127.0.0.1:6379&gt; hset user2 name laowang<br>(integer) 1</p><h1 id="返回形式都是通过列表的形式进行返回"><a href="#返回形式都是通过列表的形式进行返回" class="headerlink" title="返回形式都是通过列表的形式进行返回"></a>返回形式都是通过列表的形式进行返回</h1><p>127.0.0.1:6379&gt; hkeys user2</p><p>1) “name”</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">#### hash类型数据操作的注意事项</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>hash类型下的value只能存储字符串，不允许存储其他数据类型，不允许嵌套现象。如果数据未获取到，对应的值为（nil）</span><br><span class="line"><span class="bullet">* </span>每个hash 可以存储2^32 - 1 个键值对；（上限）</span><br><span class="line"><span class="bullet">* </span>hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性。但是hash设计初衷<span class="strong">**不是为了存储大量对象而设计**</span>的，<span class="strong">**切记不可滥用**</span>，<span class="strong">**更不可以将hash作为对象列表使用**</span>(随着存储大量对象，那么效率将会降低)；</span><br><span class="line"><span class="bullet">* </span>hgetall 操作可以获取全部属性，如果内部field过多，遍历整体数据效率就会低，有可能成为数据访问瓶颈。（每次查询的时候最好是要哪个查询那个即使用hget key field这种方式；因为有些时候拿出一些不需要的数据有个时候会很影响效率）</span><br><span class="line"></span><br><span class="line"><span class="section">### 数据类型-hash实现购物车</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### hash 类型应用场景</span></span><br><span class="line"></span><br><span class="line"><span class="section">##### 业务场景</span></span><br><span class="line"></span><br><span class="line">电商网站购物车设计与实现  </span><br><span class="line"></span><br><span class="line">（京东电商网站购物车）  </span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>不同用户的购物车是共用还是各用个的（每个用户的id可以进行区分）；</span><br><span class="line"><span class="bullet">2. </span>一个购物车中是一样商品还是多样商品?</span><br><span class="line"><span class="bullet">3. </span>一个商品存在有对应购买的数量；</span><br><span class="line"></span><br><span class="line">此时:  </span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>可以使用  用户id:key  ，即用户id作为key；</span><br><span class="line"><span class="bullet">2. </span>用用户所买的商品编号作为field，即 商品id:field；</span><br><span class="line"><span class="bullet">3. </span>那么对应的value即该商品所购买的数量，即 数量:value；</span><br><span class="line"><span class="bullet">4. </span>那么此时结构完成。</span><br><span class="line"></span><br><span class="line">问题： 购物车所对应的操作，redis当中的hash是否支持？  </span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>商品数量的读取：取值：hget</span><br><span class="line"><span class="bullet">2. </span>商品数量的增加、设置：增加:hincrby；设置:hset</span><br><span class="line"><span class="bullet">3. </span>删除购物车中某一商品: 删除:hdel</span><br><span class="line"><span class="bullet">4. </span>全选获取得到全部的商品：全选:hgetall</span><br><span class="line"><span class="bullet">5. </span>获取商品总数量: 总量:hlen</span><br><span class="line"></span><br><span class="line"><span class="section">##### 业务分析</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>仅分析购物车的redis存储模型</span><br><span class="line"><span class="bullet">  * </span>添加、浏览、更改数量、删除、清空</span><br><span class="line"><span class="bullet">* </span>购物车与数据库间持久化同步（不讨论）</span><br><span class="line"><span class="bullet">* </span>购物车与订单间关系（不讨论）</span><br><span class="line"><span class="bullet">  * </span>提交购物车：读取数据生成订单</span><br><span class="line"><span class="bullet">  * </span>商家临时价格调整：隶属于订单级别</span><br><span class="line"><span class="bullet">* </span>未登录用户购物车信息存储（不讨论）</span><br><span class="line"><span class="bullet">  * </span>cookie存储</span><br><span class="line"></span><br><span class="line"><span class="section">##### 解决方案</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>以客户id作为key，每位客户创建一个hash存储结构存储对应的购物车信息</span><br><span class="line"><span class="bullet">* </span>将商品编号作为field，购买数量作为value进行存储</span><br><span class="line"><span class="bullet">* </span>添加商品，追加全新的field与value</span><br><span class="line"><span class="bullet">* </span>浏览：遍历hash</span><br><span class="line"><span class="bullet">* </span>更改数量：自增/自减，设置value值</span><br><span class="line"><span class="bullet">* </span>删除商品：删除field</span><br><span class="line"><span class="bullet">* </span>清空：删除field</span><br><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><p>127.0.0.1:6379&gt; hmset 001 g01 100 g02 200<br>OK<br>127.0.0.1:6379&gt; hmset 002 g02 1 g04 7 g06 100<br>OK<br>127.0.0.1:6379&gt; hset 001 g03 9<br>(integer) 1<br>127.0.0.1:6379&gt; hgetall 001</p><p>1) “g01”<br>2) “100”<br>3) “g02”<br>4) “200”<br>5) “g03”<br>6) “9”<br>127.0.0.1:6379&gt; hdel 001 g01<br>(integer) 1<br>127.0.0.1:6379&gt; hgetall 001</p><p>1) “g02”<br>2) “200”<br>3) “g03”<br>4) “9”<br>127.0.0.1:6379&gt; hincrby 001 g03 1<br>(integer) 10<br>127.0.0.1:6379&gt; hgetall 001</p><p>1) “g02”<br>2) “200”<br>3) “g03”<br>4) “10”</p><pre><code>##### 当前设计是否加速了购物车的呈现当前仅仅是将数据存储到了redis中，并没有起到加速的作用，商品信息还需要二次查询数据库购物车到底看到的是什么，第一个商品id是什么?  商品信息还必须二次去数据库进行查询；当前的这种方案查看购物车只是存购物车，并没有提高效率；##### 分析要解决的问题* 每条购物车中的商品记录保存成两条field### hash实现抢购### 数据类型-list类型介绍与基本操作### 数据类型-list阻塞数据获取### 数据类型-list扩展操作删除数据### 数据类型-list实现日志消息队列### 数据类型-set类型介绍与基本操作### 数据类型-set操作随机数据### 数据类型-set数据交并差操作### 数据类型-set实现权限校验### 数据类型-set实现网站访问量统计### 数据类型-set实现黑白名单### set类型介绍与基本操作### 数据类型-sorted_set基本操作（2）### 数据类型-sorted_set实现排行榜### set实现时效性任务管理### set带有权重的任务管理### 数据类型-案例-按次结算的服务控制### 数据类型-案例-微信接收消息顺序控制### 通用指令-key基本操作### 通用指令-key时效性控制操作### 通用指令-key查询操作### 通用指令-key其他操作### 通用指令-db基本操作### 通用指令-db其他操作### jedis-jedis简介### jedis-helloworld（jedis版）### jedis-jedis常规操作演示### jedis-业务请求次数控制案例需求分析### jedis-程序结构搭建### jedis-程序代码实现### jedis-工具类制作### jedis-可视化客户端介绍### linux环境安装redis-基于Linux安装redis### linux环境安装redis-指定端口启动服务### linux环境安装redis-指定配置文件启动服务### linux环境安装redis-配置文件启动目录管理### 持久化-持久化简介#### 课程安排##### 课程计划&gt; Windows环境1. Redis基础  * Redis入门  * 数据类型  * 通用命令  * Jedis&gt; Linux 环境2. Redis高级  * Redis安装  * 持久化  * 事务  * 删除策略  * redis.conf  * 高级数据类型3. Redis集群4. 企业级解决方案#### 目录Contents* 持久化简介* RDB* AOF* RDB与AOF区别* 持久化应用场景首先什么是持久化？针对redis当中的持久化方案进行逐一讲解，并对方案之间进行一个比对；#### 意外的断电写论文的时候断电了。#### “自动备份”其实是将内存当中的数据与在硬盘当中的数据做了一个关联。### 持久化-save指令### 持久化-RDB相关配置### 持久化-数据恢复过程演示### 持久化-save指令工作原理### 持久化-bgsave指令与工作原理### 持久化-save配置与工作原理### 持久化-RDB三种启动方式对比与优缺点分析### 持久化-AOF简介### 持久化-AOF持久化策略基本操作### 持久化-AOF重写概念与命令执行### 持久化-AOF自动重写配置### 持久化-AOF重写工作原理### 持久化-RDB与AOF方案对比### 持久化-持久化应用场景分析### 事务-redis事务简介### 事务-事务的基本操作（定义，取消，执行）### 事务-事务的工作流程### 事务-事务操作的注意事项### 事务-锁### 事务-死锁解决方案### 删除策略-过期数据的概念### 删除策略-过期数据的底层存储结构### 删除策略-定时删除与惰性删除### 删除策略-定期删除### 删除策略-逐出策略### 服务器配置-redis.conf配置### 高级数据类型-bitmaps介绍与基本操作### 高级数据类型-bitmaps扩展操作### 高级数据类型-HyperLogLog### 高级数据类型-CEO### 主从复制-主从复制简介### 主从复制-主从复制的作用### 主从复制-主从复制的三个阶段### 主从复制-工作流程（1）建立连接阶段### 主从复制-搭建主从结构### 主从复制-工作流程（2）数据同步阶段（简）### 主从复制-数据同步阶段注意事项### 主从复制-运行id(runid)### 主从复制-复制缓冲区与偏移量### 主从复制-工作流程（2）数据同步与命令传播阶段（全）### 主从复制-心跳机制与命令传播阶段工作流程### 主从复制-常见问题（1）### 主从复制-常见问题（2）### 主从复制-常见问题（3）### 哨兵-哨兵简介### 哨兵-哨兵结构搭建### 哨兵-工作原理（1）### 哨兵-工作原理（2）### 哨兵-工作原理（3）### 集群-集群简介### 集群-集群存储结构设计### 集群-cluster集群搭建### 集群-设置与获取数据### 集群-主从下线与主从切换### 企业级解决方案-缓存预热### 企业级解决方案-缓存雪崩### 企业级解决方案-缓存击穿### 企业级解决方案-缓存穿透### 企业级解决方案-性能指标监控### 企业级解决方案-性能指标监控命令</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;观看视频: &lt;a href=&quot;https://www.bilibili.com/video/BV1CJ411m7Gc?from=search
      
    
    </summary>
    
    
      <category term="面试" scheme="https://fengshana.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="https://fengshana.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="redis" scheme="https://fengshana.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>缓存四大问题</title>
    <link href="https://fengshana.github.io/2020/05/12/%E3%80%90REDIS%E3%80%91/%E3%80%90REDIS%E3%80%91redis%E7%BC%93%E5%AD%984%E5%A4%A7%E9%97%AE%E9%A2%98/"/>
    <id>https://fengshana.github.io/2020/05/12/%E3%80%90REDIS%E3%80%91/%E3%80%90REDIS%E3%80%91redis%E7%BC%93%E5%AD%984%E5%A4%A7%E9%97%AE%E9%A2%98/</id>
    <published>2020-05-12T14:42:25.316Z</published>
    <updated>2020-05-29T11:37:00.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1gZ4y1s7Aw" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1gZ4y1s7Aw</a></p><p>之前这个的视频下架了，我就没办法再回过头去再看一遍；现在知道了，一边看一定得一定得做笔记。不然下次悄悄地没有了。想哭都没地方。  </p><h2 id="缓存穿透详解及实战"><a href="#缓存穿透详解及实战" class="headerlink" title="缓存穿透详解及实战"></a>缓存穿透详解及实战</h2><ol><li><strong>如何使用缓存？</strong></li></ol><p>（思路十分简单）</p><p>controller层(对于数据的访问)：  </p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">OrderService orderService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function">Integer <span class="title">insertOrder</span><span class="params">(Order order)</span></span>&#123; <span class="function"><span class="keyword">return</span> orderService.<span class="title">insertOrder</span><span class="params">(order)</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/updateOrder"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function">Integer <span class="title">updateOrder</span><span class="params">(Order order)</span></span>&#123; <span class="function"><span class="keyword">return</span> orderService.<span class="title">updateOrder</span><span class="params">(order)</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于一条数据的访问；通过id进行查询数据；</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/selectid"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function">R <span class="title">selectOrderById</span><span class="params">(Integer id)</span></span>&#123; <span class="function"><span class="keyword">return</span> orderService.<span class="title">selectOrderById</span><span class="params">(id)</span></span>;&#125;</span><br></pre></td></tr></table></figure><p>service层：  </p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.xxx.testcache.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="params">...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> interface OrderService&#123;</span><br><span class="line">  <span class="built_in">Integer</span> insertOrder(<span class="keyword">Order</span> <span class="keyword">order</span>);</span><br><span class="line"></span><br><span class="line">  R selectOrderById(<span class="built_in">Integer</span> id);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="keyword">Order</span>&gt; selectOrderAll();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Integer</span> updateOrder(<span class="keyword">Order</span> <span class="keyword">order</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service impl（实现）层：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//查询缓存；</span></span><br><span class="line">  <span class="comment">//第一次查询缓存，即查询redis；</span></span><br><span class="line">  <span class="comment">//valueOperations这个对象专门针对于redis当中String类型的一个操作；</span></span><br><span class="line">  <span class="comment">//valueOperations是与SpringBoot整合之后的一个对象；valueOperations的上级即为redis；</span></span><br><span class="line">  <span class="comment">//valueOperations专用于操作字符串String类型；</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="comment">//如果缓存当中存在该对象则直接返回；</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//否则如果缓存当中不存在该对象则查询数据库；</span></span><br><span class="line">  <span class="comment">//查询数据库之后，再将该数据加入到缓存当中；</span></span><br><span class="line">  <span class="comment">//方便下一次查询的时候更够查询得到该记录，该对象；</span></span><br><span class="line">  <span class="comment">//然后返回给前端</span></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;finally&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果数据库也查询不到；则返回前端：无此数据</span></span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//思路简单：缓存当中有则返回该记录给前端；缓存当中没有则再查询数据库；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper层：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.xxx.testcache.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="params">...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> interface OrderMapper&#123;</span><br><span class="line">  </span><br><span class="line">    @<span class="keyword">Select</span>(<span class="string">"insert into t_order (id,name) values (#&#123;id&#125;, #&#123;name&#125;)"</span>)</span><br><span class="line">    <span class="built_in">Integer</span> insertOrder(<span class="keyword">Order</span> <span class="keyword">order</span>);</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Select</span>(<span class="string">"select * from t_order where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="keyword">Order</span> selectOrderById(<span class="built_in">Integer</span> id);</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Select</span>(<span class="string">"select * from t_order"</span>)</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="keyword">Order</span>&gt; selectOrderAll();</span><br><span class="line"></span><br><span class="line">    @Update(<span class="string">"update t_order set  `name`=#&#123;name&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="built_in">Integer</span> updateOrder(<span class="keyword">Order</span> <span class="keyword">order</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>为什么要使用缓存？</strong></li></ol><p>（1）<strong>提高性能</strong>；  </p><p><strong>查询redis比查询数据库快</strong>；<br>现在的nosql数据库一般多用为redis；<br>那么关系型数据库一般多用为mysql；<br>所以当前举例关系型数据库以mysql为主；<br>非关系型数据库以redis为主进行讲解；  </p><p>（2）<strong>保护数据库</strong>；  </p><p>如果没有缓存redis，则每一次请求都将要去访问数据库；<br>那么由此也就造成了<strong>数据库的访问压力</strong>；<br>特别是在一些大公司当中，其访问量特别特别多的；<br>那么如果此时所有的查询请求都去往数据库的话，那么服务器数据库的压力也是非常大的；<br>所以当使用缓存之后；可以看到使用了缓存则，大部分请求都将会在[ <strong>命中缓存</strong> ]该步骤时进行返回给前端（就不再去访问数据库了）；<br>第一次查询将查询数据库；第二次查询就不再会去查询数据库了而是会去查询缓存；  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="comment">//查询缓存</span></span><br><span class="line">Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//命中缓存</span></span><br><span class="line"><span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">  <span class="comment">//正常返回数据</span></span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">···</span><br></pre></td></tr></table></figure><p>一般对于加入到缓存当中的数据，会加一个过期时间；<br>比如当前有一个促销活动，需要卖出商品；<br>且该商品的促销时间只做三天；<br>那么就可以给该商品数据的缓存数据设置一个三天的过期时间；<br><strong>一般会给缓存当中的数据设置一个过期时间</strong>；  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br></pre></td></tr></table></figure><p>此段代码即普通程序员所写代码；<br>如果该段代码在中小型公司存在问题不大；<br>但是如果该段代码放在大公司当中，该段代码就不能够这样写了；  </p><p>因为大公司当中要求特别高（╮(╯▽╰)╭）；  </p><p>且该段代码当中存在缓存三大问题中的两大问题没有解决：第一个问题是<strong>缓存穿透</strong>；第二个问题就是<strong>缓存击穿</strong>；</p><ol start="3"><li><strong>缓存有三个问题？</strong>  </li></ol><p>（1） <strong>缓存穿透</strong></p><p>指的是 <strong>查询数据库和缓存当中都没有的数据</strong>（<strong>查询的为空数据</strong>）</p><p>（当前测试库当中的数据仅仅只有8条数据；但是现在查询数据id为2000的数据记录）</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//id</span>为2000的该数据在测试库当中并不存在</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:500</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"查询无果"</span>&#125;</span><br><span class="line"><span class="string">//</span>尽管查询无果；但是该操作，即查询id为2000的该操作依然查询了数据库；</span><br><span class="line"><span class="string">//</span>前面说查询缓存，是为了保护数据库；</span><br><span class="line"><span class="string">//</span>但是现在一个不存在的数据，进行查询的时候每一次都进行查询了数据库；</span><br><span class="line"><span class="string">//</span>由于数据库当中不存在该数据记录行，那么缓存当中也肯定不会存在有该数据记录行</span><br><span class="line"></span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1001</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1001</span>, <span class="string">"name"</span>:<span class="string">"王昭君"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br></pre></td></tr></table></figure><p>问题代码分析：<br>1、第一次查询缓存，查询无果之后，查询数据库；<br>2、数据库也查询不到则查询无果；<br>3、在数据记录行在数据库当中记录为空该情况下，该段代码每一次都将会去查询数据库；  </p><p>当前市面上有<strong>两种解决缓存穿透问题的方案</strong>：</p><p>（1）<strong>缓存空对象</strong>：代码简单，效果不好<br>（2）<strong>布隆过滤器</strong>：代码复杂，效果很好（一般用<strong>布隆过滤器</strong>）</p><p><strong>缓存空对象</strong>的实现思路：</p><p>当去查询一条在数据库当中不存在的数据记录行的时候；<br>不管该数据记录行在数据库当中查询得到或者查询不到，都将该信息交给缓存；  </p><p>service impl（实现）层：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//查询缓存；</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="comment">//查询出来的对象进行判断是否其实例属于空对象</span></span><br><span class="line">    <span class="keyword">if</span>( redisObj instanceOf NullValueResultDO)&#123;</span><br><span class="line">      <span class="comment">//如果属于空对象则直接返回查询无果该响应结果</span></span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//此处添加else判断，当该数据记录行在数据库当中查询不到的时候的处理操作</span></span><br><span class="line">        <span class="comment">//如果数据库当中查询不到，那么此时使用一个空对象加入到缓存当中去；</span></span><br><span class="line">        <span class="comment">//当加入的内容为空对象的时候，那么每次查询开头的时候也就同样需要判断；是否为空对象，如果为空对象则直接返回前端查询无果；就将不再去进行查询数据库这一操作了；</span></span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, <span class="keyword">new</span> <span class="constructor">NullValueResultDO()</span>, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">//加入缓存</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;finally&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>空对象</strong> NullValueResultDO(无属性):</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.testcache.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NullValueResultDO</span>&#123;</span></span><br><span class="line">  <span class="comment">//private String name;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询数据记录行在数据库当中为空的情况分析：<br><strong>1、</strong> 第一次查询缓存，缓存当中没有命中，即缓存当中不存在该数据记录；</p><p><strong>2、</strong> 此时查询数据库，查询数据库中发现该数据行为空；则将该一个空对象加入到缓存当中，其id为查询的内容，其值为空对象；则此时进行返回</p><p><strong>3、</strong> 第二次进行查询缓存，同样查询的数据在数据库当中数据记录行为空；<br>则此时先进行查询缓存，缓存当中存在该数据记录行，也就是存在id为查询id的记录值；<br>则此时当缓存命中之后进行判断缓存的该实例是否为空对象;<br>如果为空对象则直接返回查询无果否则返回查询数据；</p><p><strong>缓存穿透</strong>该第一种解决方案（<strong>缓存空对象</strong>）的<strong>效果为什么不好</strong>？<br>原因：</p><ul><li>每一次换<strong>不同的查询</strong>，且每一次不同的查询（即id不同）明知该数据在数据库当中查询不到；但是<strong>都还是会去查询一次</strong>；</li><li>缓存空对象解决的问题是<strong>一个key</strong>（即一个id）<strong>对其进行多次访问</strong>的这样一个问题（当过期时间失效则又将会去查询一遍数据库）；</li><li>如果存在查询数据为大量空数据则将会导致redis当中<strong>存在有大量的空对象</strong>（空数据）（恶意大规模查询明知道数据库当中为记录行为空的数据（空数据）；）弊端就在于<strong>占用redis的内存</strong>；</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//id</span>为2000的该数据在测试库当中并不存在</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:500</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"查询无果"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>此时响应的内容是查询的缓存当中的数据；</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>此时响应的内容是查询的缓存当中的数据；</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>此时响应的内容是查询的缓存当中的数据；</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>此时响应的内容是查询的缓存当中的数据；</span><br><span class="line"></span><br><span class="line"><span class="params">---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2002</span><br><span class="line"><span class="string">//</span>第一次查询缓存当中不存在的内容就将会去查询一遍数据库；</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:500</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"查询无果"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2003</span><br><span class="line"><span class="string">//</span>第一次查询缓存当中不存在的内容就将会去查询一遍数据库；</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:500</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"查询无果"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2004</span><br><span class="line"><span class="string">//</span>第一次查询缓存当中不存在的内容就将会去查询一遍数据库；</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:500</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"查询无果"</span>&#125;</span><br></pre></td></tr></table></figure><p>谷歌有一个框架叫做 <strong>Guava</strong>；在这个 <strong>Guava</strong> 框架当中已经写好了<strong>布隆过滤器</strong>；即已经提供了<strong>布隆过滤器</strong>；缺陷在于 <strong>Guava</strong> 框架当中的该<strong>布隆过滤器</strong>不支持分布式；</p><p><strong>布隆过滤器应用</strong></p><p>maven安装依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>27.0.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>安装依赖之后就可以直接使用；<br>调用其静态方法就可以直接创建出一个布隆过滤器；<br>如果对布隆过滤器没有认识的道友，可以将布隆过滤器理解为一个ArrayList集合，就理解为java当中的一个集合即可；  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBloomFilter</span>&#123;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="built_in">size</span> = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//size         预计要插入多少条数据</span></span><br><span class="line"><span class="comment">//fpp          容错率--&gt;出现误判的概率是多少</span></span><br><span class="line"><span class="comment">//bloomFilter  位数组</span></span><br><span class="line"><span class="comment">//list         创建的是object数组</span></span><br><span class="line"><span class="comment">//bit          数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//位数组  21亿  JVM内存     数据不会进行持久化  256M</span></span><br><span class="line"><span class="comment">//redis   42亿  redis内存   redis的持久化数据   512M==42亿位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//bit[]</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), <span class="built_in">size</span>, <span class="number">0.001</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//List list = new ArrayList();</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Integer[] integers = new Integer[Integer.MAX_VALUE];</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//当前该循环会生成1~100,0000 当中所有的数值；</span></span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; = <span class="built_in">size</span> ; i++ )&#123;</span><br><span class="line">    <span class="comment">//将这些1~100,0000的数值全部添加到布隆过滤器bloomFilter(集合)当中</span></span><br><span class="line">    bloomFilter.<span class="built_in">put</span>(i);</span><br><span class="line">    <span class="comment">//bloomFilter.put("老王");</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  List&lt;Integer&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10000</span>);</span><br><span class="line">  <span class="comment">//故意取10000个不在过滤器里的值，看看有多少个会被认为在过滤器里</span></span><br><span class="line">  <span class="comment">//size + 10000 = 100,0000+1000;</span></span><br><span class="line">  <span class="comment">//size + 20000 = 100,0000+2000;</span></span><br><span class="line">  <span class="comment">//该数值肯定大于100,0000；肯定与第一次循环当中的数值相同；</span></span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="built_in">size</span> + <span class="number">10000</span> ; i &lt; <span class="built_in">size</span> + <span class="number">20000</span> ; i++ )&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用该数值i在布隆过滤器当中是否存在的方法；如果存在则加入布隆过滤器；否则不加入布隆过滤器；</span></span><br><span class="line">    <span class="comment">//之前将布隆过滤器比喻为java当中的ArrayList集合；</span></span><br><span class="line">    <span class="comment">//则当前期望的是：此时当前该循环当中是不会任何一个数值加入到该布隆过滤器bloomFilter当中去的，也就是该ArrayList集合当中去；</span></span><br><span class="line">    <span class="keyword">if</span>(bloomFiilter.mightContain(i))&#123;<span class="comment">//误判</span></span><br><span class="line">      <span class="built_in">list</span>.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  System.out.<span class="built_in">println</span>(<span class="string">"误判的数量："</span>+<span class="built_in">list</span>.<span class="built_in">size</span>);</span><br><span class="line">  <span class="comment">//响应为：10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>布隆过滤器确确实实是一个集合对象</li><li>布隆过滤器当中仅存在两个方法，<ul><li>第一个方法是put(Object obj);（将数据取值加入到布隆过滤器当中）；</li><li>第二个方法是mightContain(Object obj);（判断数据取值是否在布隆过滤器当中存在）</li></ul></li><li>加入到布隆过滤器当中的数据无法被修改(update)被删除(delete)被取出来(get)；只能够进行添加(put)以及判断是否存在(mightContain);</li><li>mightContain 该方法有可能判断失误；</li><li>此时理解布隆过滤器可以理解为一个特殊的集合对象；</li></ul><p>定义布隆过滤器仅需要做（定义）：<br>(1) size 预计要插入多少数据（预计插入量）<br>(2) fpp  容错率（<strong>False positive probability</strong>）—&gt;出现误判的概率是多少（即上述当中误判的次数是可以由自己定义的；容错率是百分之百会有的；不能定义为0；如果定义为0就将会抱错）</p><p>误判：传一个key到该布隆过滤器（“ArrayList”）当中进行判断；该数据是否存在（mightContain）在该布隆过滤器当中；而该方法mightContain有可能会判断失误；而导致不存在在布隆过滤器当中的key也被判断出存在在该布隆过滤器当中了；（明明不存在，有可能会被判断为存在）  </p><p>判断的该<strong>容错率</strong>取值<strong>越低</strong>；其底层的<strong>内存消耗</strong>则将<strong>越大</strong>；<br>而<strong>容错率</strong>取值<strong>越高</strong>；则<strong>内存开销</strong>则<strong>小</strong>；</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> static <span class="built_in">int</span> size = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> static BloomFilter&lt;Integer&gt; bloomFilter=<span class="module-access"><span class="module"><span class="identifier">BloomFilter</span>.</span></span>create(<span class="module-access"><span class="module"><span class="identifier">Funnels</span>.</span></span>integer<span class="constructor">Funnel()</span>,size, <span class="number">0.001</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//此时第一次打印出现的误判次数为10次；</span></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">  <span class="keyword">private</span> static <span class="built_in">int</span> size = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> static BloomFilter&lt;Integer&gt; bloomFilter=<span class="module-access"><span class="module"><span class="identifier">BloomFilter</span>.</span></span>create(<span class="module-access"><span class="module"><span class="identifier">Funnels</span>.</span></span>integer<span class="constructor">Funnel()</span>,size, <span class="number">0.1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//此时第二次打印出现的误判次数为1033次；</span></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">  <span class="keyword">private</span> static <span class="built_in">int</span> size = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> static BloomFilter&lt;Integer&gt; bloomFilter=<span class="module-access"><span class="module"><span class="identifier">BloomFilter</span>.</span></span>create(<span class="module-access"><span class="module"><span class="identifier">Funnels</span>.</span></span>integer<span class="constructor">Funnel()</span>,size, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//此时第二次打印出现的抛出异常，报错；</span></span><br><span class="line">  <span class="comment">//即布隆过滤器的容错率不能为0</span></span><br><span class="line">  <span class="comment">//java.lang.ExceptionInInitializerError</span></span><br><span class="line">  <span class="comment">//Caused by: java.lang.IllegalArgumentException:False positive probability(0.0) must be &gt; 0.0</span></span><br></pre></td></tr></table></figure><p><strong>布隆过滤器原理</strong><br>布隆过滤器的底层实现依赖于bit数组；<br>1个字节byte为8位；<br>1024个字节为1M；<br>所以其单位是很小；<br>512M=524288byte</p><p>由于位数组，即byte只有一位；所以其取值就只能够是0和1；<br>默认该数组当中的白色格子取值value全部为0；而蓝色格子取值value为1；</p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXy93sfkaGWRUBapr9y3pHbtQ6yRyawhbsd7*AS4G1K*c*Gb56IM9A4pA41f7IAo4fIom1PvvFF11WuEdaLRX51c!/r" alt="布隆过滤器"></p><p>左边即为往布隆过滤器当中进行put方法操作的结果（把数据加入到布隆过滤器）；</p><p>那么其位数组就会发生变化；<br>变化的表现有：</p><ul><li>该布隆过滤器其数组当中所有的key取值value默认都为0</li><li>当添加完一条数据（“老王”）之后，就会出现三个格子，变成黄色；也就代表着，该三个格子所处index位置（可以不为3个，只是说该图经过计算得为3个（举个例子不要当真）；<ul><li>为什么被计算出来为3个index位置的格子被改成了1；</li><li>其实也可以改下，将其改成10个index位置被改颜色为黄色，即将默认取值0改成1），其value值被改变称为1了；默认为0；</li></ul></li><li>如何修改的呢？<ul><li>上述为3个index位置被改变颜色为黄色，即将默认取值改变为1；</li><li>那么此时可以认为是3个hash函数对该加入到布隆过滤器当中的该取值“老王”进行了hash；</li><li>那么3个hash函数对“老王”该取值进行了hash之后，就会得到有一个数字；</li><li>打个比方：hash(“老王”)=1212121；hash某一字符串都将得到一个数值；</li><li>通过hash获取的到一个数值之后，在对该布隆过滤器该数组的长度进行<strong>取余</strong>；</li><li>比如说该布隆过滤器该数组的长度是40；</li><li>那么就会将对“老王”进行hash得到的数值 对 该布隆过滤器数组的长度进行 取余；即1212121%40=3；（该3是随意捏造的；不要当真；只是一个例子）</li><li>那么此时布隆过滤器就将会将index取值为3的该位置的默认取值0改为1；</li><li>步骤：首先对加入到布隆过滤器的数值进行hash，经过hash之后就会得到一个数值；将该数值进行取余该布隆过滤器数组的长度得到的数值就是在该布隆过滤器数组当中的一个下标；则将该下标的默认取值0进行修改为1；</li><li>当前为什么会有3个不同的位置被改变颜色为黄色呢（即改变默认取值为1）?原因就在于有3个不同的hash函数，存在有不同的hash函数则将有3个不同位置的数组index被改变默认取值0为1；（通过hash函数对加入到布隆过滤器当中的取值进行hash得到下标位置再进行取余数组长度得到在该数组当中的下标index位置）</li><li>使用了3个不同的hash函数对该put(Object obj) obj对象进行了hash</li><li>hash算法存在有多个，比如说hash32，hash16…(都是进行hash，只是hash的函数不一样；为什么是三个不同的hash呢？可以是10个100个n个不同的hash；自己设定；自己喜欢就好；喜欢多少个就多少个)</li><li>hash函数多并不一定导致容错率低，只能说是一种因素；</li></ul></li></ul><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX1IOvYMzL*IGr4hMfNmq0SLpSUjWiYQqv*cQR*MK3kZarTxU*24HFj0FaxTXP9dLIO.fiVY2eH4cPYFmojOxc8M!/r" alt="布隆过滤器mightContain判断是否存在"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX1nwjJZCSD2X9riQotNbwt9nUD*060h1sSAaCk5hI9WOQJEcFG3tGpPrepg4ztfFPKkDeVMefdqHGj9ns7B99jw!/r" alt="布隆过滤器put方法"></p><p>位数组（布隆过滤器）当中默认全部为0，当时当插入的数据量过大，即位数组当中将有大部分原本默认取值为0的index将被改变取值为1；</p><p>当前插入到布隆过滤器当中的数据有21条数据记录行：<br>1、2、3、4、5、6、7、8、9、10、11、12、13、14、15、16、17、18、19、20、老王</p><p><strong>可能存在（误判的原因）</strong><br>（1）当进行查找“老王”时，是可以查找得到的；<br>（2）当进行查找 1 时，是可以查找得到的；  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXw6xgVJROJh3BJY6xFr9VJp6l4Zz7Pw*B3XR97Ym8Flrt07pQJDvc4W*10SFkqDBy5AkMwUaqHzOjviy6g9514Q!/r" alt="bloomFilter插入数据量大进行数据判断时"></p><p>（3）当进行查找 111 时，也是可以查找得到的；此时就出现了<strong>误判</strong>；<br>该取值111并不是加入到布隆过滤器当中的数值；<br>而是21条数据添加通过3个不同的hash取余数组长度得到各个不同的在数组当中的下标位置index；<br>恰巧就将 111 该取值进行3个不同的hash函数得出的3个不同的数值取余数组长度得到的3个不同位置下标index的默认取值0进行了改值为1；<br>而111该数值的三个在布隆过滤器数组当中index下标位置取值默认为0被修改为1；<br>并非是111进行mightContain时进行修改的；<br>而是当添加21条数据记录时进行修改的；<br>也就是当[<strong>因素1</strong>]添加到布隆过滤器当中的数据量过大时，如果[<strong>因素2</strong>]有多个hash函数（<strong>hash冲突</strong>），那么布隆过滤器当中就可能存在多个下标位置index的取值由0改变为1的这种情况；  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX6G6Nkh9oP4j1AI.xWFqKAqs9pJ6hpqT9bcebJgsD1MnDW3AU*HyNTcnfjGcwoSGm1Y5nNUuczxo97CBCFXTZsA!/r" alt="bloomFilter插入数据量大误判情况的产生"></p><p>1、为什么布隆过滤器没有取出的方法即get方法；—&gt;因为其布隆过滤器底层没有进行保存其加入到布隆顾虑器当中真实的取值；只有位数组；<br>2、布隆过滤器也没有delete方法；—&gt;由于在布隆过滤器当中该位数组当中其下标位置index要删除的位置其位置，同一个位置也有可能是其他数值所占的下标位；（<strong>hash冲突</strong>）；如果将该下标位置index的取值改为0；那么也将会影响其他的数值的下标取值；也就是说；当其他的数据进行判断是否存在时，原本其他数据的下标位置index取值为1；当前因为有需要要进行删除的数据所以对该布隆过滤器的下标位置index取值进行更改为从1变为0；其他数据的下标位置与当前要删除的数据的下标位置相撞相同了（<strong>hash冲突</strong>）；如果当前要删除的数据将该布隆过滤器数组当中下标位置的取值改为了0；则其他数据下次进行mightContain判断的时候将会被判断为不存在；所以布隆过滤器没有删除delete该方法；<br>3、布隆过滤器为什么会出现误判？—&gt;<strong>误判</strong>的缘故就在于存在<strong>hash冲突</strong>  </p><p><strong>出现误判的概率，即容错率与什么因素有关？</strong>  </p><ul><li><strong>数组长度</strong></li><li><strong>hash算法的个数</strong></li></ul><p><strong>（1）</strong>首先，数组的长度是肯定会影响容错率的；如果数组的长度是100,0000；同样是添加21条数据；那么误判的概率就不会又这么高了（即111不存在的数据也能够判断mightContain为存在）；所以数组的长度是一个影响误判的因素；<br><strong>（2）</strong>第二，hash算法的个数；如果数组的长度是100,0000；且该布隆过滤器当中存在有10个hash算法<br>(不同hash函数越多，则误判的概率越小，即不同hash函数个数越多，即算的在布隆过滤器当中的下标位置越多，而只有当满足算出来的所有的下标位置的取自为1，才将返回可能存在；否则只要满足有一个算出来的index其下标取值不为1，即为0的这种情况则返回绝对不存在；)，</p><p>（不同hash个数函数取余数组长度所得出的位置必须是全部为1才能够判断其值<br>[即判断值是否存在在布隆过滤当中]存在于布隆过滤器当中；<br>即存在有3个不同的hash函数，查询数值117；<br>布隆过滤器数组当中仅只有2个位置可证明该117存在于布隆过滤器当中，即这两个下标位置取值value为1，还有一个index value为0；<br>而hash个数有3个，此时能够证明的只有2个，所以判断为绝对不存在；<br>即只有当查询的数值通过n个不同的hash算法在布隆过滤器数组当中需要有n个不同下标地址的index其取值value必须全部为1；<br>才能够判断为可能存在在该布隆过滤器数组当中；否则判断为绝对不存在；）</p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX1loeM8HGC*c1AuLK0zUPiHTgZ1ljiSnfjWcgvZCtpiFflSI8eyoV.J9xxKSa2wiJDTtvnfmwuqphXXn4wPQ7B4!/r" alt="bloomFilter数据量判断mightContain绝对不存在的情况"></p><p>即如果数组长度越小；而不同的hash函数个数越多；<br>则容错率就将会增大<br>（即误判的几率增大，也就是说在数组长度小的情况下，而hash函数多，即算出来的在布隆过滤器数组当中的下标位置越多，即这些算出来的下标位置的取值就都将会被改为1，到时候布隆过滤器数组当中的下标位置index就将会有大量取值变动由0变为1；这样就会增大误判的几率，也就是说容错率也就增大了；）</p><p>所以说；跟数组的长度以及hash函数的个数必须要配合使用才能够达到布隆过滤器最好的效果；（hash函数的个数必须要与数组长度相匹配；）</p><p>numBits 即Google Guava框架中创建出来的位数组的长度；<br>size：100,0000（预计插入数值记录行），fpp：0.001（容错率）===(创建出来)===&gt;numBits：14377587（位数组长度），numHashFunction：10（hash函数的个数）</p><p>size：100,0000（预计插入数值记录行），fpp：0.1（容错率）===(创建出来)===&gt;numBits：4792539（位数组长度），numHashFunction：3（hash函数的个数）</p><ul><li>hash个数越多（容错率越高），运算开销越大；（性能和容错率之间取一个）；  </li><li>要性能高则hash个数少点；要准确率越高则hash个数越多则容错率越高；<br>容错率低好还是高好?看具体业务需求；</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Preconditions</span>.</span></span>check<span class="constructor">NotNull(<span class="params">strategy</span>)</span>;</span><br><span class="line"><span class="keyword">if</span>(expectedInsertions<span class="operator"> == </span><span class="number">0L</span>)&#123;</span><br><span class="line">  expectedInsertions = <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//numBits 位数组长度</span></span><br><span class="line"><span class="comment">//expectInsertions 预计插入布隆过滤器数组的数据量</span></span><br><span class="line"><span class="comment">//fpp 容错率（判断出错的概率）</span></span><br><span class="line">long numBits = optimal<span class="constructor">NumOfBits(<span class="params">expectedInsertions</span>, <span class="params">fpp</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hash函数个数</span></span><br><span class="line"><span class="built_in">int</span> numHashFunctions = optimal<span class="constructor">NumOfHashFunctions(<span class="params">expectedInsertions</span>, <span class="params">numBits</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//numBits与numHashFunctions 需要进行配合使用，一起使用更佳哦~</span></span><br><span class="line"><span class="comment">//只需要关注预计插入布隆过滤器数据记录行与容错率即可；位数组长度与hash函数个数不需要进行关心；因为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">BloomFilter(<span class="params">new</span> LockFreeBitArray(<span class="params">numBits</span>)</span>, numHashFunctions, funnel, strategy);</span><br><span class="line">&#125;catch(IllegalArgumentException var10)&#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * long n   预计插入数据量</span></span><br><span class="line"><span class="comment">  * double m 容错率</span></span><br><span class="line"><span class="comment">  * description 算出hash函数个数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">@VisibleForTesting</span><br><span class="line">static <span class="built_in">int</span> optimal<span class="constructor">NumOfHashFunctions(<span class="params">long</span> <span class="params">n</span>,<span class="params">double</span> <span class="params">m</span>)</span>&#123;</span><br><span class="line">  return <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(<span class="number">1</span>, (<span class="built_in">int</span>)<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>round( double(m)<span class="operator"> / </span>(double)n<span class="operator"> * </span><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>log(<span class="number">2.0</span>D) ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * long n   预计插入数据量</span></span><br><span class="line"><span class="comment">  * double p 容错率</span></span><br><span class="line"><span class="comment">  * description 算出位数组长度</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">@VisibleForTesting</span><br><span class="line">static long optimal<span class="constructor">NumOfBits(<span class="params">long</span> <span class="params">n</span>,<span class="params">double</span> <span class="params">p</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p<span class="operator"> == </span><span class="number">0.0</span>D)&#123;</span><br><span class="line">    p = <span class="number">4.9E-324</span>D;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (long)((double)(-n)<span class="operator"> * </span><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>log(p)<span class="operator"> / </span>(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>log(<span class="number">2.0</span>D)<span class="operator"> * </span><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>log(<span class="number">2.0</span>D) ) );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己手写<strong>分布式的布隆过滤器</strong></p><p>手写布隆过滤器之前；怎么来实现；</p><ul><li>需要有一个位数组<ul><li>该位数组如何来的呢?</li><li>其实redis当中也存在有布隆过滤器；redis当中的位数组；redis当中的位数组哪里来；即首先redis当中需要存在这样一个数据结构；</li></ul></li></ul><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FLUSHALL</span><br><span class="line"></span><br><span class="line"><span class="built_in">keys</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> laowang abc #<span class="built_in">key</span>:laowang；<span class="built_in">value</span>:abc</span><br><span class="line"></span><br><span class="line"># <span class="built_in">set</span> api底层如何如何存储<span class="built_in">value</span>的取值（redis底层如何来存储该<span class="built_in">key</span>：laowang的取值<span class="built_in">value</span> abc的？）</span><br><span class="line"># redis底层进行存储<span class="built_in">key</span>的取值<span class="built_in">value</span>是通过位数组来进行存储的；</span><br></pre></td></tr></table></figure><p>首先将 abc 该字符串转换为二进制取值；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/**</span></span><br><span class="line">  <span class="string">*</span>  <span class="string">a</span> <span class="string">~</span> <span class="string">z</span> <span class="number">97</span> <span class="string">~</span> <span class="number">122</span></span><br><span class="line">  <span class="string">*</span>  <span class="string">第</span> <span class="number">33</span> <span class="string">~</span> <span class="number">126</span> <span class="string">号（共</span> <span class="number">94</span> <span class="string">个）是字符，其中第</span> <span class="number">48</span> <span class="string">~</span> <span class="number">57</span> <span class="string">号为</span> <span class="number">0</span> <span class="string">~</span> <span class="number">9</span> <span class="string">这十个阿拉伯数字</span></span><br><span class="line">  <span class="string">*/</span></span><br><span class="line"><span class="string">public</span> <span class="string">static</span> <span class="string">void</span> <span class="string">main(String[]</span> <span class="string">args)&#123;</span></span><br><span class="line">  <span class="string">toBinary("abc");//</span> <span class="number">24</span><span class="string">---999</span>   <span class="number">0</span>   <span class="number">1000</span>  <span class="number">1</span></span><br><span class="line">  <span class="string">//打印结果为</span> <span class="number">1100001</span> <span class="number">1100010</span> <span class="number">1100011</span></span><br><span class="line">  <span class="string">//1100001和1100010类似，其实在二进制当中a和b只需要将第六位和第七位调换一下顺序即可；</span></span><br><span class="line">  <span class="string">//redis用位数组，二进制的方式来进行保存set</span> <span class="string">key所对应的value取值</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>验证redis使用位数组（二进制）进行保存key的取值value;</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setbit laowang <span class="number">6</span> <span class="number">1</span> # 设置key为laowang其value值的二进制位；设置其value值的二进制位的第<span class="number">6</span>位取值为<span class="number">1</span>；</span><br><span class="line"></span><br><span class="line">setbit laowang <span class="number">7</span> <span class="number">0</span> # 设置key为laowang其value值的二进制位；设置其value值的二进制位的第<span class="number">7</span>位取值为<span class="number">0</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> laowang # 获取redis当中key为laowang的取值value</span><br><span class="line">#当前响应为 “bbc”</span><br><span class="line"></span><br><span class="line"># 原本key:laowang存储的value取值为：abc</span><br><span class="line"># abc 在redis底层存储结构为位数组，即二进制数值；即为<span class="number">1100001</span> <span class="number">1100010</span> <span class="number">1100011</span></span><br><span class="line"># 当前setbit这两个操作即将 <span class="number">1100001</span> <span class="number">1100010</span> 这两个进行了修改为 <span class="number">11000011</span> <span class="number">1100011</span></span><br><span class="line"># 所以redis再次查询的时候其取值变为了 “bbc”</span><br></pre></td></tr></table></figure><p>在redis当中，String类型的value值其在redis底层，就是通过位数组来进行保存存储的；<br>在底层当中，当前“abc” or “bbc” 其在redis底层当中位数长度为 3 * 8 = 24 位；<br>底层的位数组的长度只有这么长；</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setbit laowang <span class="number">1000</span> <span class="number">0</span> # 设置进行修改key为laowang 其value值在redis底层的位数组（二进制）的第<span class="number">1000</span>个位置，即下标为<span class="number">999</span>的这个位置index修改取值为<span class="number">0</span>；</span><br><span class="line"># 当时当前 key:laowang 该value值在redis底层的其位数组长度是没有<span class="number">1000</span>的；</span><br><span class="line"># 在java当中，执行setbit laowang <span class="number">1000</span> <span class="number">0</span> 就将会造成数组越界</span><br><span class="line"># 那么在redis当中，当进行设置第<span class="number">1000</span>个位置上取值为<span class="number">0</span>时，abc 该value字符串在redis底层的位数组（二进制）是如何保存的就依然是如何保存，即依然保存为<span class="number">1100001</span> <span class="number">1100010</span> <span class="number">1100011</span>；</span><br><span class="line"># redis底层会自动进行扩容的操作；即abc的位数组长度为<span class="number">24</span>；所占据的index为<span class="number">0</span> ~ <span class="number">23</span>，即前面index为 <span class="number">0</span> ~ <span class="number">23</span>时，存储二进制值依然为 <span class="number">1100001</span> <span class="number">1100010</span> <span class="number">1100011</span> ； 那么即从index为<span class="number">24</span>开始到<span class="number">999</span>，这之间则全部用<span class="number">0</span>进行代替；（index为<span class="number">999</span>即为第<span class="number">1000</span>个位置的index）</span><br><span class="line">#setbit laowang <span class="number">1000</span> <span class="number">1</span> #即index为<span class="number">24</span>到<span class="number">998</span>全部为<span class="number">0</span>，而下标为<span class="number">999</span>（即第<span class="number">1000</span>个位置）的取值为<span class="number">1</span>；</span><br><span class="line"># 中间扩容的取值全部使用 <span class="number">0</span> 这一默认取值来进行代替；</span><br><span class="line"></span><br><span class="line">get laowang<span class="comment">;</span></span><br><span class="line"><span class="comment">#此时响应为“bbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\\x00\x00\x00\x00\x00\x00\x00\x00\x00....”</span></span><br><span class="line"><span class="comment">#redis底层进行扩容，扩容其默认取值为0；即扩容时是扩容的位数组，因为其二进制全部是0；而转化出来之后就是该结果</span></span><br></pre></td></tr></table></figure><p>现在位数组已经找到了，且还能够进行自动扩容；也就是redis底层对String类型操作set key value这一api，底层所使用的的数据结构（位数组）；</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setbit laowang666 <span class="number">10000</span> <span class="number">0</span></span><br><span class="line"><span class="meta"># key:laowang666 ; value: 相当于创建了一个length为 10000 的位数组；并且其底层的value值为 0(二进制取自)；即到第10000位置之前二进制数值全部是0；</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 在redis当中称之为 位图；本质还是属于String类型；</span></span><br><span class="line"><span class="meta"># redis版本5.0.5</span></span><br><span class="line">keys *</span><br><span class="line"><span class="meta"># laowang666</span></span><br><span class="line"><span class="meta"># laowang</span></span><br></pre></td></tr></table></figure><p>实现</p><p>application.yml  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line"><span class="attr">bloom:</span></span><br><span class="line">  <span class="attr">filter:</span></span><br><span class="line">    <span class="attr">expectedInsertions:</span> <span class="number">1000</span></span><br><span class="line">    <span class="attr">fpp:</span> <span class="number">0.</span><span class="string">001F</span></span><br></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.testcache.<span class="built_in">filter</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line">#ConfigurationProperties 自动装配属性</span><br><span class="line">@ConfigurationProperties(<span class="string">"bloom.filter"</span>)</span><br><span class="line">@Component</span><br><span class="line"><span class="keyword">public</span> class RedisBloomFilter&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//预计插入量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> expectedInsertions;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//误判率</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> fpp;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//bit数组长度</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> numBits;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//hash函数数量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">int</span> numHashFunctions;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">long</span> getExpectedInsertions()&#123;<span class="keyword">return</span> expectedInsertions;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> setExpectedInsertions(<span class="keyword">long</span> expectedInsertions)&#123;<span class="keyword">this</span>.expectedInsertions = expectedInsertions;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">double</span> getFpp()&#123;<span class="keyword">return</span> fpp;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> setFpp(<span class="keyword">double</span> fpp)&#123;<span class="keyword">this</span>.fpp = fpp;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//@PostConstruct</span></span><br><span class="line">  <span class="comment">//即Spring容器初始化的时候</span></span><br><span class="line">  <span class="comment">//在该类进行初始化的时候，就将会回调该方法init；对numBits以及numHashFunctions进行初始化值</span></span><br><span class="line">  @PostConstruct</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> init()&#123;</span><br><span class="line">    <span class="keyword">this</span>.numBits = optimalNumOfBits(expectedInsertions, fpp);</span><br><span class="line">    <span class="keyword">this</span>.numHashFunctions = optimalNumOfHashFunctions(expectedInsertions, fpp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算hash函数个数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * long n   预计插入数据量</span></span><br><span class="line"><span class="comment">  * double m 容错率</span></span><br><span class="line"><span class="comment">  * description 算出hash函数个数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">//@VisibleForTesting</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">int</span> optimalNumOfHashFunctions(<span class="keyword">long</span> n,<span class="keyword">double</span> m)&#123;</span><br><span class="line">  <span class="keyword">return</span> Math.<span class="built_in">max</span>(<span class="number">1</span>, (<span class="built_in">int</span>)Math.<span class="built_in">round</span>( <span class="keyword">double</span>(m) / (<span class="keyword">double</span>)n * Math.<span class="built_in">log</span>(<span class="number">2.0</span>D) ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算bit数组长度</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * long n   预计插入数据量</span></span><br><span class="line"><span class="comment">  * double p 容错率</span></span><br><span class="line"><span class="comment">  * description 算出位数组长度</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">//@VisibleForTesting</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">long</span> optimalNumOfBits(<span class="keyword">long</span> n,<span class="keyword">double</span> p)&#123;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="number">0.0</span>D)&#123;</span><br><span class="line">    p = <span class="number">4.9E-324</span>D;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">long</span>)((<span class="keyword">double</span>)(-n) * Math.<span class="built_in">log</span>(p) / (Math.<span class="built_in">log</span>(<span class="number">2.0</span>D) * Math.<span class="built_in">log</span>(<span class="number">2.0</span>D) ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 判断 keys 是否存在于集合，</span></span><br><span class="line"><span class="comment">  * 是 则返回 true</span></span><br><span class="line"><span class="comment">  * 否 则返回 false</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">boolean</span> isExists(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">    <span class="keyword">long</span>[] indexs = getIndexs(<span class="built_in">key</span>);</span><br><span class="line">    List list = redisTemplate.executePipelined(<span class="keyword">new</span> RedisCallback&lt;<span class="keyword">Object</span>&gt;()&#123;</span><br><span class="line"></span><br><span class="line">      @Nullable</span><br><span class="line">      @Override</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">Object</span> doInRedis(RedisConnection redisConnection) <span class="keyword">throws</span> DataAccessException&#123;</span><br><span class="line">        redisConnection.openPipeline();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> index : indexs)&#123;</span><br><span class="line">          redisConnection.getBit(<span class="string">"bf:laowang"</span>.getBytes(),index);</span><br><span class="line">        &#125;</span><br><span class="line">        redisConnection.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> !list.contains(<span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 将 key 存入 redis bitmap 位图</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> put(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;<span class="comment">// 老王laowang</span></span><br><span class="line">  <span class="keyword">long</span>[] indexs = getIndexs(<span class="built_in">key</span>);</span><br><span class="line">  redisTemplate.executePipeline(<span class="keyword">new</span> RedisCallback&lt;<span class="keyword">Object</span>&gt;()&#123;</span><br><span class="line"></span><br><span class="line">    @Nullable</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> doInRedis(RedisConnection redisConnection) <span class="keyword">throws</span> DataAccessException&#123;</span><br><span class="line">      redisConnection.openPipeline();<span class="comment">//打开管道，提高效率</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">long</span> index:indexs)&#123;</span><br><span class="line">        redisConnection.setBit(<span class="string">"bf:laowang"</span>.getBytes(), index, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//setbit laowang 7262 1</span></span><br><span class="line">        <span class="comment">//此时key写死；</span></span><br><span class="line">        <span class="comment">//index将修改的动态的index下标位置；</span></span><br><span class="line">        <span class="comment">//0代表false；1代表true；即与扩容默认为0修改取值为1做法一致；在redis当中0是位数组进行扩容时的默认值；1则为put进来的数据其位置下标index就需要改变该index上的取值0变成1；在java当中true即代表1；false即代表0</span></span><br><span class="line">      &#125;</span><br><span class="line">      redisConnection.close();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据 key 获取 bitmap 下标； 一个hash函数对 20+1  20+2 3个不同的hash函数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span>[] getIndexs(<span class="keyword">String</span> <span class="built_in">key</span>)&#123; <span class="comment">//laowang 老王</span></span><br><span class="line">    <span class="keyword">long</span> hash1 = hash(<span class="built_in">key</span>);</span><br><span class="line">    <span class="keyword">long</span> hash2 = hash1 &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">long</span>[] result = <span class="keyword">new</span> <span class="keyword">long</span>[numHashFunctions]; <span class="comment">// 10</span></span><br><span class="line">    <span class="keyword">for</span>( <span class="built_in">int</span> i = <span class="number">0</span> ; i &lt; numHashFunctions ; i++ )&#123; <span class="comment">//numHashFunctions hash函数的数量</span></span><br><span class="line">    <span class="keyword">long</span> combinedHash = hash1 + i * hash2;</span><br><span class="line">    <span class="comment">//i 动态值，所以2个不同的hash再加上该一个带有动态值i则将会有三个不同的取值</span></span><br><span class="line">    <span class="comment">//引用三个不同的hash算法对同一个字符串key进行运算也可以的；</span></span><br><span class="line">    <span class="keyword">if</span>(combinedHash &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        combinedHash = ^combinedHash;</span><br><span class="line">    &#125;</span><br><span class="line">    result[i] = combinedHash % numBits;<span class="comment">//对数组的长度numBits进行取余</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">expectedInsertions</span> = <span class="number">1000</span></span><br><span class="line"><span class="attr">fpp</span> = <span class="number">0.001</span></span><br><span class="line"><span class="attr">numBits</span> = <span class="number">14377</span></span><br><span class="line"><span class="attr">numHashFunctions</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">key</span> = <span class="string">"1001"</span></span><br><span class="line"><span class="attr">indexs</span> = &#123;long[<span class="number">10</span>]@<span class="number">7667</span>&#125;</span><br><span class="line"><span class="attr">0</span> = <span class="number">7262</span></span><br><span class="line"><span class="attr">1</span> = <span class="number">6438</span></span><br><span class="line"><span class="attr">2</span> = <span class="number">5614</span></span><br><span class="line"><span class="attr">3</span> = <span class="number">4790</span></span><br><span class="line"><span class="attr">4</span> = <span class="number">3966</span></span><br><span class="line"><span class="attr">5</span> = <span class="number">3142</span></span><br><span class="line"><span class="attr">6</span> = <span class="number">2318</span></span><br><span class="line"><span class="attr">7</span> = <span class="number">1494</span></span><br><span class="line"><span class="attr">8</span> = <span class="number">670</span></span><br><span class="line"><span class="attr">9</span> = <span class="number">14223</span></span><br><span class="line"><span class="comment"># 0 ~ 9 ：10个下标</span></span><br></pre></td></tr></table></figure><p>RedisDataInit</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.testcache.datainit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisDataInit</span>&#123;</span></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  OrderService orderService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  RedisBloomFilter redisBloomFilter;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostConstruct</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> init()&#123;</span><br><span class="line">    List&lt;Order&gt; orders = orderService.selectOrderAll();</span><br><span class="line">    <span class="keyword">for</span>(Order <span class="string">order:</span>orders)&#123;</span><br><span class="line">      redisBloomFilter.put(String.valueOf(order.getId));<span class="comment">//订单表的id</span></span><br><span class="line">      <span class="comment">//将订单表中的id添加到布隆过滤器当中在容器启动的时候</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行查询</p><p>service impl（实现）层：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//解决缓存穿透</span></span><br><span class="line">  <span class="comment">//如果布隆过滤器当中存在id则说明数据库当中存在该条记录；则可以继续往下走</span></span><br><span class="line">  <span class="comment">//返回false说明布隆过滤器当中并不存在该id也就说明数据库以及缓存当中都不会有该条数据id</span></span><br><span class="line">  <span class="comment">//此处布隆过滤器由于存在误判的情况也就是容错率；但是现在应用的场景是缓存穿透也就是避免去进行查询数据库；而布隆过滤器误判的结果也就是仅仅让数据库多查一次而已；所以设想下如果有100000个恶意查询空对象请求；那么相比于100000个恶意查询空对象请求而言，布隆过滤器则要显得十分优越了；即便是存在有误判也比100000好；也需要看容错率的概率是多少；</span></span><br><span class="line">  <span class="keyword">if</span> (!bloomFilter.is<span class="constructor">Exist(String.<span class="params">valueOf</span>(<span class="params">id</span>)</span>))&#123;</span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"非法访问"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//查询缓存；</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;finally&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">localhost<span class="function">:8080</span>/selectid?id=2002</span><br><span class="line"><span class="string">//</span>由于有布隆过滤器的存在将不会去进行查询redis缓存也不会去查询数据库</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:600</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"非法访问"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2003</span><br><span class="line"><span class="string">//</span>由于有布隆过滤器的存在将不会去进行查询redis缓存也不会去查询数据库</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:600</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"非法访问"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2004</span><br><span class="line"><span class="string">//</span>由于有布隆过滤器的存在将不会去进行查询redis缓存也不会去查询数据库</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:600</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"非法访问"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="params">------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1001</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1001</span>, <span class="string">"name"</span>:<span class="string">"老王1"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1002</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1002</span>, <span class="string">"name"</span>:<span class="string">"老王2"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1003</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1003</span>, <span class="string">"name"</span>:<span class="string">"老王3"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1004</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1004</span>, <span class="string">"name"</span>:<span class="string">"老王4"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1005</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1005</span>, <span class="string">"name"</span>:<span class="string">"老王5"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br></pre></td></tr></table></figure><p>复杂：</p><ul><li>维护麻烦</li><li>往数据库当中进行添加数据时，同时也需要往布隆过滤器当中进行添加put；不然的就就会被布隆过滤器当做是非法请求被拦截下来；</li><li>如果订单表当中存在10万的数据；删除了8万的数据量；现在仅剩下2万的数据量；但是布隆过滤器没有办法进行删除；这个时候就需要进行考虑重建布隆过滤器即重新初始化该布隆过滤器；即从头到尾的再去跑一边put方法，即又重新将订单表当中的记录进行查询出来将其order id重新put入布隆过滤器当中</li><li>这个重建布隆过滤器得使用定时任务来进行；定时任务多少合适需要看删除的数据量大小多不多；</li></ul><h2 id="缓存击穿详解及实战"><a href="#缓存击穿详解及实战" class="headerlink" title="缓存击穿详解及实战"></a>缓存击穿详解及实战</h2><p>上述代码存在两大问题，一是缓存穿透；二是缓存击穿；<br>缓存击穿问题也就是对于热点数据访问的问题；</p><p><strong>缓存击穿</strong>：在查询时，数据库有数据，缓存当中没有（数据刚好失效）；</p><p>情况分析：</p><p>（1）这条数据没有人访问过；说明该数据并非为热点数据；<br>（2）一般为数据刚好失效（由于将数据加入到缓存当中时，会加入一个过期时间；比如该数据当好面临过期时间失效，即理解为redis自动将该数据进行删除了[“自动删除”需要加双引号；涉及到redis当中的一个删除特点；可以先这么认为redis现在自动将该数据进行了删除]，但是来了<strong>并发访问</strong>，由于该数据又是一个热点数据）；</p><p>缓存击穿和缓存穿透是两个不同的问题；</p><p>模拟热点数据失效访问情形：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">keys *</span><br><span class="line"><span class="meta">#laowang666</span></span><br><span class="line"><span class="meta">#laowang</span></span><br><span class="line"><span class="meta">#bf:laowang</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.testcache.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@org</span>.junit.Test</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">    TicketsRunBle ticketsRunBle = <span class="keyword">new</span> TicketsRunBle();</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">99</span> ; i++)&#123;</span><br><span class="line">      Thread thread = <span class="keyword">new</span> Thread(ticketsRunBle, <span class="string">"窗口"</span>);</span><br><span class="line">      thread.start();</span><br><span class="line">      countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">    Thread.currentThread.join();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketsRunBle</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      countDownLatch.await();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    try&#123;</span></span><br><span class="line"><span class="comment">//        Socket socket = new Socket("127.0.0.1", 1333);</span></span><br><span class="line"><span class="comment">//    &#125;catch(IOException e)&#123;</span></span><br><span class="line"><span class="comment">//      e.printStackTrace();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    List&lt;HttpMessageConverter&lt;?&gt;&gt; fastJsonHttpMessageConverters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    fastJsonHttpMessageConverters.add(<span class="keyword">new</span> FastJsonHttpMessageConverters);</span><br><span class="line">    restTemplate.setMessageConverters(fastJsonHttpMessageConverters);</span><br><span class="line">    R forObject = restTemplate.getForObject(<span class="string">"http://localhost:8080/selectid?id=1001"</span>,R<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(forObject);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即可以认为该段代码被99个人（线程）同时执行；</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//99个线程同时进行布隆过滤器的判断</span></span><br><span class="line"><span class="keyword">if</span> (!bloomFilter.is<span class="constructor">Exist(String.<span class="params">valueOf</span>(<span class="params">id</span>)</span>))&#123;</span><br><span class="line">     return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"非法访问"</span>)</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//99个线程同时查询缓存；</span></span><br><span class="line"> Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//当热点数据失效时，则此时redisObj则为空</span></span><br><span class="line"> <span class="comment">//命中缓存</span></span><br><span class="line"> <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">   <span class="comment">//正常返回数据</span></span><br><span class="line">   return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//所以此时就会有99个线程同时去查询数据库；</span></span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line">     Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">     <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">       valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;finally&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br></pre></td></tr></table></figure><p>即上述代码将会有99次进行查询数据库的记录；</p><p>解决方案<br>使用分布式锁，即查询数据库之前进行加锁；<br>OrderServiceImpl</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">valueOperations valueOperations;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">CacheTemplate cacheTemplate;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">RedisBloomFilter RedisBloomFilter;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line"><span class="keyword">private</span> RedisLock redisLock;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">SendMessageUtil sendMessageUtil;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Integer insert<span class="constructor">Order(Order <span class="params">order</span>)</span>&#123;</span><br><span class="line">  Integer integer = orderMapper.insert<span class="constructor">Order(<span class="params">order</span>)</span>;</span><br><span class="line">  return integer;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//解决缓存穿透</span></span><br><span class="line">  <span class="keyword">if</span> (!bloomFilter.is<span class="constructor">Exist(String.<span class="params">valueOf</span>(<span class="params">id</span>)</span>))&#123;</span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"非法访问"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//查询缓存；</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="keyword">if</span>( redisObj instanceOf NullValueResultDO)&#123;</span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//在查询数据库之前进行加锁</span></span><br><span class="line">  redisLock.lock(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询缓存；</span></span><br><span class="line">    redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line">    <span class="comment">//命中缓存</span></span><br><span class="line">    <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">      <span class="keyword">if</span>( redisObj instanceOf NullValueResultDO)&#123;</span><br><span class="line">        return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//正常返回数据</span></span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//查询数据库</span></span><br><span class="line">      Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;finally&#123;</span><br><span class="line">        <span class="comment">//解锁</span></span><br><span class="line">        redisLock.unlock(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大并发访问数据库最容易导致数据库崩掉；</p><p>测试并模拟；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">keys</span> <span class="string">*</span></span><br><span class="line"><span class="attr">del</span> <span class="string">1001</span></span><br></pre></td></tr></table></figure><p>上述代码仅会有1次访问数据库的机会；<br>分析：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//99个线程同时访问布隆过滤器判断该id是否非法访问</span></span><br><span class="line">  <span class="keyword">if</span> (!bloomFilter.is<span class="constructor">Exist(String.<span class="params">valueOf</span>(<span class="params">id</span>)</span>))&#123;</span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"非法访问"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//99个线程同时查询缓存；</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//由于热点数据的失效；所以导致99个线程同时都没有命中缓存</span></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="keyword">if</span>( redisObj instanceOf NullValueResultDO)&#123;</span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//由于在查询数据库之前进行加锁，所以此时99个线程将会依次进行查询数据库操作；（并发）</span></span><br><span class="line">  <span class="comment">//即此时有一个线程拿着锁进入了代码块；还有98个线程在外面等着；</span></span><br><span class="line">  redisLock.lock(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//相当于99个线程中第一个进入代码块的那一个线程会查询两次redis缓存；查询一次数据库；查询完成之后将数据加入到缓存当中去；finally最后进行解锁；紧接着98个线程第二个线程又会拿着锁进来；.....</span></span><br><span class="line">      <span class="comment">//转折点就在这里；当第一个进来的线程将数据查询完成并加入到缓存之后；后面的98个线程再次到redis缓存当中进行取值的时候那么这个时候就能够有值获取出来了；由于第一个线程已经查询过数据库并将取值加入到了缓存当中去了；</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//虽然有锁阻塞，但是却只有一次操作数据库此处；98个线程都去进行操作缓存；所以说这个效率是十分明显的；非常快；</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询缓存；</span></span><br><span class="line">    redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line">    <span class="comment">//命中缓存</span></span><br><span class="line">    <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">      <span class="keyword">if</span>( redisObj instanceOf NullValueResultDO)&#123;</span><br><span class="line">        return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//正常返回数据</span></span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//查询数据库</span></span><br><span class="line">      Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;finally&#123;</span><br><span class="line">        <span class="comment">//解锁</span></span><br><span class="line">        redisLock.unlock(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果此处没有使用分布式锁而是使用的synchronized则；selectOrderById查询数据为1001、1002、1003、1004、1005查询id不同，查询数据并不相同，但是却还是会被阻塞；这个效率就很低了；<br>而刚刚那种处理方式是：redisLock.lock(String.valueOf(id));是对查询id相同；即该这一类都是查询相同同一个id的并发请求的锁；<br>针对的是对于同一个查询内容的多个线程进行阻塞；<br>而对于不同查询内容的多个线程是进行分别阻塞的；<br>也就是说假设有99*2个线程，该99个线程都是进行查询id为1001的查询请求；则redisLock则对该98个线程进行阻塞，其中一个线程拿着id为1001的锁先进入代码块进行查询；（此时id为1001的数据过期失效）<br>而另外99个线程都是进行查询id为1002的查询请求所以此时这另外的这99个线程（查询id为1002的这99个线程），也会存在有一个线程拿着id为1002的锁先进入代码块，而其余的98个线程在外等候，阻塞；（此时id为1001的数据过期失效）</p><p>synchronized与redisLock这两者锁的粒度不一样；  </p><p>RedisLock</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ThreadLock用于保存某个线程共享变量</span></span><br><span class="line"><span class="comment">//对于同一个static ThreadLocl，不同线程只能从中get，set，remove自己的变量，而不会影响其他的线程</span></span><br><span class="line"><span class="keyword">private</span> ThreadLocal&lt;<span class="keyword">String</span>&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> lock(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">  <span class="built_in">boolean</span> b = tryLock(<span class="built_in">key</span>);</span><br><span class="line">  <span class="keyword">if</span>(b)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      Thread.sleep(<span class="number">50</span>);</span><br><span class="line">  &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  lock(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> tryLock(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">  <span class="keyword">String</span> uuid = UUID.randomUUID().toString();</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码封装<br>OrderServiceImpl</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> R selectOrderById(<span class="built_in">Integer</span> id)&#123;</span><br><span class="line">  <span class="keyword">return</span> cacheTemplate.redisFindCache(<span class="built_in">String</span>.valueOf(id), <span class="number">10</span>, TimeUnit.MINUTES, <span class="literal">new</span> CacheLoadble&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Order</span> load()&#123;</span><br><span class="line">      <span class="keyword">return</span> orderMapper.selectOrderById(id);<span class="comment">//此处仅需要写自己的业务逻辑即可</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="params">...</span></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="keyword">Order</span>&gt; selectOrderAll()&#123; <span class="keyword">return</span> orderMapper.selectOrderAll();&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">Integer</span> updateOrder(<span class="keyword">Order</span> <span class="keyword">order</span>)&#123;</span><br><span class="line">  redisTemplate.delete(<span class="built_in">String</span>.value(<span class="keyword">order</span>.getId()));</span><br><span class="line">  <span class="built_in">Integer</span> <span class="built_in">integer</span> = orderMapper.updateOrder(<span class="keyword">order</span>);</span><br><span class="line">  <span class="keyword">order</span>.setName(<span class="string">"0"</span>);</span><br><span class="line">  sendMessageUtil.placeOrderMessage(<span class="keyword">order</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">integer</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CacheTemplate</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">package com.xxx.testcache.template;</span><br><span class="line"></span><br><span class="line">import ...</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public <span class="keyword">class</span> CacheTemplate&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line"><span class="keyword">private</span> ValueOperations valueOperations;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">RedisBloomFilter redisBloomFilter;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line"><span class="keyword">private</span> Redisson redisson;</span><br><span class="line"></span><br><span class="line"><span class="comment">//private Lock lock = new ReentrantLock();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询缓存  有     直接返回前端</span></span><br><span class="line"><span class="comment">//          没有   查询数据库，加入缓存放回</span></span><br><span class="line"><span class="comment">//为什么要使用缓存：保护数据库；提高性能</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * key 键</span></span><br><span class="line"><span class="comment">  * expire 过期时间</span></span><br><span class="line"><span class="comment">  * unit 过期时间单位</span></span><br><span class="line"><span class="comment">  * cacheLoadble 回调接口方法</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">public R redis<span class="constructor">FindCache(String <span class="params">key</span>, <span class="params">long</span> <span class="params">expire</span>, TimeUnit <span class="params">unit</span>, CacheLoadble&lt;T&gt; <span class="params">cacheLoadble</span>, <span class="params">boolean</span> <span class="params">b</span>)</span>&#123;</span><br><span class="line"> <span class="comment">//--------------------- 缓存穿透-------------------------------------</span></span><br><span class="line">  <span class="comment">//解决缓存穿透</span></span><br><span class="line">  <span class="keyword">if</span>(!bloomFilter.is<span class="constructor">Exist(<span class="params">key</span>)</span>)&#123;</span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(600)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"非法访问"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//查询缓存</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------缓存击穿--------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  redisLock.lock(key);</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//查询缓存；</span></span><br><span class="line">      redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//命中缓存</span></span><br><span class="line">      <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">          <span class="comment">//正常返回数据</span></span><br><span class="line">          return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">     T load = cacheLoadble.load<span class="literal">()</span>;<span class="comment">//查询数据库</span></span><br><span class="line">    <span class="keyword">if</span>(load != null)&#123;</span><br><span class="line">      valueOperations.set(key, load, expire, <span class="built_in">unit</span>);<span class="comment">//加入缓存</span></span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;finally&#123;</span><br><span class="line">      <span class="comment">//解锁</span></span><br><span class="line">      redisLock.unlock(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">key</span>)</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存雪崩及解决方案"><a href="#缓存雪崩及解决方案" class="headerlink" title="缓存雪崩及解决方案"></a>缓存雪崩及解决方案</h2><p>缓存雪崩问题：</p><ol><li>redis服务器挂了</li><li>大部分数据失效</li></ol><p>比如有100W的商品数据，设置的过期时间统一是10天；则10天后大部分数据统一失效；而查询请求不断；这个时候也就容易导致数据库崩掉；即引发雪崩问题；</p><p>(redis缓存击穿指的是热点数据失效解决的是并发请求)</p><p>针对这种情况的处理方式：</p><p>[<strong>规避</strong>]<br>（1）redis搭建高可用集群（cluster）<br>（2）错开数据过期时间</p><p>如果已经出现了缓存雪崩问题；则处理方式为降级 熔断；</p><h2 id="数据一致性及解决方案"><a href="#数据一致性及解决方案" class="headerlink" title="数据一致性及解决方案"></a>数据一致性及解决方案</h2><p><strong>什么时候出现数据不一致的情况</strong></p><ul><li>更新数据的时候；<ul><li>先更新数据库，再更新缓存<ul><li>（步骤1）先更新数据库（步骤2）再更新缓存；<ul><li>如果此时更新缓存失败；则会导致数据库中是新数据，缓存中是旧数据，数据就出现了不一致</li></ul></li><li>1.线程A更新数据库；2.线程B更新数据库；4.线程A更新缓存；3.线程B更新缓存；<ul><li>更新数据库如果因为网络等原因，B却比A更早更新了缓存，这就导致了脏数据（不一致）</li><li>解决方案：先删除缓存；再修改数据库。如果数据库修改失败了，那么数据库中是旧数据，缓存中是空的，那么数据不会不一致；因为读的时候缓存没有，则读数据库中旧数据，然后更新到缓存中。</li></ul></li><li>解决方案一[<strong>延时双删</strong>]：1.线程A删除缓存 2.线程B查询缓存，发现为空 3.线程B查询数据库并加入缓存 4.线程A更新数据库 5.线程A删除缓存（第五步一定要执行成功）</li><li>解决方案二[<strong>串行化</strong>]</li></ul></li></ul></li></ul><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX4pgLmAu8VahKl7KcdIHB0TUz5G4e7vKThDgFA4qONmduoQbaGmQQkOcSL4ZRToJCp.Uf19bAH3AwkYd90x7O1U!/r" alt="数据一致性问题1"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX.XryE.7uV.ikOi43KtZHMMeFc5xE9CdpCZxb813hOndwi1w1ZBWEexHrxFZIBZfelNT79b7aY12qTQp7NauUZ8!/r" alt="数据一致性问题2"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX3mOzKCW7tUhJUWL8ztU7xPj*Pe*Joo30G7me5QGmt7Sxi5j5klGAArIsMW*y8bO.byfXwfDCTDh.6x5I.sLatg!/r" alt="数据一致性问题3"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX*S1qKXmK2eYWqUYxPcUsgsF6L*V72VsmLXrkJ.UnQ7ePKGiWhTZhWMp1b6T2ekmO6bUvjPP2Xe6sCMSxuyCrPc!/r" alt="数据一致性解决方案一"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX*S1qKXmK2eYWqUYxPcUsgsF6L*V72VsmLXrkJ.UnQ7ePKGiWhTZhWMp1b6T2ekmO6bUvjPP2Xe6sCMSxuyCrPc!/r" alt="数据一致性解决方案一"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXzQqwZMYfv*FkdsRt6pLKtRDNNQ8Pv2ce3feyq1.6u.ytk1wClBaFMU15A2dvCGK8aMDt0c6XmLkiGohBxyNLTo!/r" alt="数据一致性方案二串行化1"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX2CGSzajo.b8bZBcqLFBQeGmscwTpI*sRf3EyyWT3nGZ8bOZlQ82XlsrsHCkd*Z7RoJHLOsDtirE785Nk*g.jaA!/r" alt="数据一致性方案二串行化2"></p><p>第五步一定要执行成功，实现：<br>StockListener采用了延时队列；</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">SendMessageUtil sendMessageUtil;</span><br><span class="line"></span><br><span class="line">@<span class="constructor">RabbitListener(<span class="params">queue</span> = <span class="string">"stock_queue"</span>, <span class="params">containerFactory</span>=<span class="string">"simpleRabbitListenerContainerFactory"</span>)</span></span><br><span class="line">public void get<span class="constructor">StockMessage(Message <span class="params">message</span>, Channel <span class="params">channel</span>)</span> throws Exception&#123;</span><br><span class="line">  <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"接收到了消息"</span>+<span class="keyword">new</span> <span class="constructor">String(<span class="params">message</span>.<span class="params">getBody</span>()</span>,<span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">  Order order = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse<span class="constructor">Object(<span class="params">new</span> String(<span class="params">message</span>.<span class="params">getBody</span>()</span>,<span class="string">"UTF-8"</span>), <span class="module-access"><span class="module"><span class="identifier">Order</span>.</span></span><span class="keyword">class</span>);</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">      redisTemplate.delete(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(Order.<span class="params">getId</span>()</span>));</span><br><span class="line">      channel.basic<span class="constructor">Ack(<span class="params">message</span>.<span class="params">getMessageProperties</span>()</span>.getDeliveryTag,<span class="literal">false</span>);</span><br><span class="line">  &#125;catch(Exception e)&#123;</span><br><span class="line">      <span class="built_in">int</span> count = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">order</span>.<span class="params">getName</span>()</span>);</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(order.get<span class="constructor">Name()</span>);</span><br><span class="line">      channel.basic<span class="constructor">Ack(<span class="params">message</span>.<span class="params">getMessageProperties</span>()</span>.get<span class="constructor">DeliveryTag()</span>, <span class="literal">false</span>);</span><br><span class="line">      <span class="comment">//重试5次；如果5次仍然不成功则记录到日志；到时候人为进行处理（人为干预）；</span></span><br><span class="line">      <span class="keyword">if</span>(count!=<span class="number">5</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        order.set<span class="constructor">Name(String.<span class="params">valueOf</span>(<span class="params">count</span>)</span>);</span><br><span class="line">        sendMessageUtil.place<span class="constructor">OrderMessage(<span class="params">order</span>)</span>;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      loggerFactory.error(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">order</span>.<span class="params">getId</span>)</span>);</span><br><span class="line">      e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redis 版本6.0之后即为多线程；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;观看笔记：&lt;a href=&quot;https://www.bilibili.com/video/BV1gZ4y1s7Aw&quot; target=&quot;_bl
      
    
    </summary>
    
    
      <category term="面试" scheme="https://fengshana.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="https://fengshana.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="redis" scheme="https://fengshana.github.io/tags/redis/"/>
    
      <category term="缓存" scheme="https://fengshana.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ实战指南</title>
    <link href="https://fengshana.github.io/2020/05/12/%E3%80%90RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%E3%80%91/RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%9704/"/>
    <id>https://fengshana.github.io/2020/05/12/%E3%80%90RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%E3%80%91/RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%9704/</id>
    <published>2020-05-12T03:35:27.484Z</published>
    <updated>2020-05-12T10:23:14.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>《RabbitMQ实战指南》 - 朱忠华  </p><h2 id="第4章-RabbitMQ进阶"><a href="#第4章-RabbitMQ进阶" class="headerlink" title="第4章 RabbitMQ进阶"></a>第4章 RabbitMQ进阶</h2><p>前一章所讲述的是一些基础的概念及使用方法，比如 <font style="color:red;font-weight:bolder">创建交换器</font>、<font style="color:red;font-weight:bolder">队列</font>和<font style="color:red;font-weight:bolder">绑定关系</font> 等。  </p><p>但是其中有许多细节并未陈述，对使用过程中的一些“坑”也并未提及，一些高级用法也并未展现，所以本章的内容就是要弥补这些缺憾。  </p><p>本章以 <font style="color:red;font-weight:bolder">RabbitMQ</font> 基础使用知识为前提，阐述一些根据特色的细节及功能，为读者更进一步地掌握 <font style="color:red;font-weight:bolder">RabbitMQ</font> 提供基准。</p><h2 id="消息何去何从"><a href="#消息何去何从" class="headerlink" title="消息何去何从"></a>消息何去何从</h2><p>mandatory 和immediate 是channel.basicPublish 方法中的两个参数，他们都有 当消息传递过程中不可达目的地时将消息返回给生产者的功能。  </p><p>RabbitMQ 提供的 备份交换器（Alternate Exchange） 可以 将未能被交换器路由的消息（没有绑定队列或者没有匹配的绑定）存储起来， 而不用返回给客户端。  </p><p>对于初学者来说，特别容易将 mandatory 和immediate 这两个参数混淆，而对于备份交换器更是一筹莫展，本章对此一一展开探讨。  </p><blockquote><p>mandatory</p></blockquote><p>[<br>  adj. 强制的；托管的；命令的<br>  n. 受托者（等于 mandatary）<br>  复数 mandatories<br>  网络释义 强制的；强制性；命令的；义务的；<br>  mandatory 强制的；强制性；命令的；义务的；<br>  mandatory plan 指令性计划；强制性计划；指令性打算；指令性规划；<br>  mandatory offer 强制要约；强制性要约；强制性收购建议；强制性收购；<br>]</p><blockquote><p>immediate</p></blockquote><p>[<br>  adj. 立即的；直接的；最接近的；<br>  网络释义 立刻；立即的；即时；直接的<br>  immediate 立刻；立即的；即时；直接的<br>  immediate employer 直接雇主<br>  immediate mode 直接模式；立即模式；即时模式<br>]</p><h3 id="mandatory-参数"><a href="#mandatory-参数" class="headerlink" title="mandatory 参数"></a>mandatory 参数</h3><p>当 mandatory 参数 设为 true 时，交换器无法根据自身的类型和路由键找到一个符合条件的队列，那么 RabbitMQ 会调用 Basic.Return 命令将消息返回给生产者。  </p><p>当 mandatory 参数 设置为 false 时，出现上述情形（交换器无法根据自身的类型和路由键找到一个符合条件的队列），则消息直接被丢弃。  </p><p>那么生产者如何获取到 没有被正确路由到合适队列的消息 呢？<br>这时候可以通过调用 channel.addReturnListener 来添加 ReturnListener 监听器实现。  </p><p>使用 mandatory 参数的关键代码清单如下所示：  </p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">channel.basicPublish(</span><br><span class="line">  EXCHANGE_NAME,</span><br><span class="line">  <span class="string">""</span>,</span><br><span class="line">  <span class="keyword">true</span>,</span><br><span class="line">  MessageProperties.PERSISTENT_TEXT_PLAIN,</span><br><span class="line">  <span class="string">"mandatory test"</span>.getBytes()</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  channel.addReturnListener(</span><br><span class="line">    <span class="keyword">new</span> ReturnListener()&#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> handleReturn(</span><br><span class="line">        <span class="built_in">int</span> replyCode,</span><br><span class="line">        <span class="keyword">String</span> replyText,</span><br><span class="line">        <span class="keyword">String</span> exchange,</span><br><span class="line">        <span class="keyword">String</span> routingKey,</span><br><span class="line">        AMQP.BasicProperties basicProperties,</span><br><span class="line">        <span class="built_in">byte</span>[] body</span><br><span class="line">      ) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="keyword">String</span> message = <span class="keyword">new</span> <span class="keyword">String</span>(body);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Basic.Return 返回的结果是："</span>+message);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>上面代码中 生产者 没有成功地将消息路由到队列，此时 RabbitMQ 会通过 Basic.Return 返回 “mandatory test” 这条消息，之后生产者客户端通过 ReturnListener 监听到了这个时间，上面代码的最后输出应该是 “Basic.Return 返回的结果是：mandatory test”。  </p><p>从 AMQP 协议层面来说，其对应的流转过程如图：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">----------</span>|<span class="string">                              </span>|<span class="string">----------</span>|</span><br><span class="line">|<span class="string"> Producer </span>|<span class="string">                              </span>|<span class="string">  Broker  </span>|</span><br><span class="line">|<span class="string">----------</span>|<span class="string">                              </span>|<span class="string">----------</span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">     |<span class="string">  此处省略 Connection 和 Channel的开启     </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">     |<span class="string">  Basic.Publish--------------------------&gt;</span>|</span><br><span class="line">     |<span class="string">                                          </span>|<span class="string">&lt;-----没有路由到队列</span></span><br><span class="line"><span class="string">     </span>|<span class="string">&lt;-----------------------------Basic.Return</span>|</span><br><span class="line">     |<span class="string">                  (Basic.Return会携带消息) </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">     |<span class="string">    此处省略Connection和Channel的关闭      </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br></pre></td></tr></table></figure><h3 id="immediate-参数"><a href="#immediate-参数" class="headerlink" title="immediate 参数"></a>immediate 参数</h3><p>当 immediate 参数设为 true时，如果交换器在消息</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;笔记&quot;&gt;&lt;a href=&quot;#笔记&quot; class=&quot;headerlink&quot; title=&quot;笔记&quot;&gt;&lt;/a&gt;笔记&lt;/h2&gt;&lt;p&gt;《RabbitMQ实战指南》 - 朱忠华  &lt;/p&gt;
&lt;h2 id=&quot;第4章-RabbitMQ进阶&quot;&gt;&lt;a href=&quot;#第4章-Rabbi
      
    
    </summary>
    
    
      <category term="RabbitMQ" scheme="https://fengshana.github.io/categories/RabbitMQ/"/>
    
    
      <category term="笔记" scheme="https://fengshana.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="RabbitMQ" scheme="https://fengshana.github.io/tags/RabbitMQ/"/>
    
      <category term="RabbitMQ实战指南" scheme="https://fengshana.github.io/tags/RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>Redis设计与实现</title>
    <link href="https://fengshana.github.io/2020/05/11/%E3%80%90Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%91/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B001/"/>
    <id>https://fengshana.github.io/2020/05/11/%E3%80%90Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%91/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B001/</id>
    <published>2020-05-11T12:26:03.085Z</published>
    <updated>2020-05-12T16:14:33.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>查阅了很多的如何学习Redis；发现很多人推荐了这本书《Redis设计与实现》（黄健宏著）  </p><p>于是，我想看了；<br>一口气吃不成一个胖子；我觉得多看书还挺好的；<br>对技术充满敬畏。突然有一种肃然起敬的感觉。不知道为什么。<br>我不想再这么浅显的过着，平庸乏味，单薄，好像仔细一想就能看透我这一生的轨迹。<br>我不想这么活着。我得有自己的信念，得有自己所坚持所热爱所为之奋斗一生的东西。<br>我不想，到一定年龄结婚生子，到一定年龄，成为了自己不想成为的人；  </p><p>redis github: <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">https://github.com/antirez/redis</a>  </p><h2 id="The-Design-and-Implementation-of-Redis（Redis设计与实现）"><a href="#The-Design-and-Implementation-of-Redis（Redis设计与实现）" class="headerlink" title="The Design and Implementation of Redis（Redis设计与实现）"></a>The Design and Implementation of Redis（Redis设计与实现）</h2><p><strong>Redis设计与实现</strong><br>黄健宏 著  </p><p>The Design and Implementation of Redis.  </p><ul><li>由资深 Redis 技术专家撰写，深入了解 Redis 技术聂牧的必读之作。</li><li>从源码角度解析 Redis 的架构设计、实现原理和工作机制，为高效使用 Redis 提供原理性指导。  </li></ul><blockquote><p>design</p></blockquote><p>[<br>  n. 设计；构思；设计图样；装饰图案；打算<br>  v. 设计；构思；计划；制造；意欲<br>  n.(Design) (巴、印、俄)迪赛（人名）<br>  复数 designs；<br>  过去式 designed；<br>  过去分词 designed；<br>  现在分词 designing；<br>  第三人称单数 designs；<br>  网络释义 设计、外观设计、图案、工艺特色<br>  design 设计；外观设计；图案；工艺特色<br>  Fashion Design 时装设计；时尚设计；服装设计；服装设计专业<br>  urban design 城市设计；城区设计；都市设计；城市化规划<br>]</p><blockquote><p>implementation</p></blockquote><p>[<br>  n.[ 计] 实现；履行；安装启用<br>  网络释义 实现；实施；实现；执行<br>  implementation 实现；实施；实现；执行<br>  base implementation 基实现<br>  policy implementation 政策实施；政策执行；政策的实施；政策执行<br>]</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本书全面而完整的讲解了 Redis 的 内部机制 与 实现方式。  </p><p>对 Redis 的大多数单机功能以及所有多机功能的实现原理进行了介绍。  </p><p>展示了这些功能的 核心数据结构 以及 关键的算法思想 ， 图示丰富，描述清晰，并给出大量参考信息。  </p><p>通过阅读本书，读者可以快速、有效地了解 Redis 的 内部构造 以及 运作机制，更好、更高效地使用 Redis。  </p><p>本书主要分为四大部分。  </p><ol><li><strong>第一部分</strong>：“数据结构与对象”</li></ol><p>介绍了 Redis 中的各种 对象及其数据结构，并说明这些 数据结构 如何影响 对象的功能和性能。</p><ol start="2"><li><strong>第二部分</strong>：“单机数据库的实现”</li></ol><p>对 Redis 实现单机数据库的方法 进行了介绍，包括 数据库、RDB持久化、AOF持久化、事件等；</p><ol start="3"><li><strong>第三部分</strong>：”多机数据库的实现“</li></ol><p>对 Redis 的 Sentinel、复制、集群 三个多机功能进行了介绍。</p><ol start="4"><li><strong>第四部分</strong>：”独立功能的实现“</li></ol><p>对 Redis 中各个相对独立的功能模块进行了介绍，涉及 发布与订阅、事务、Lua脚本、排序、二进制位数组、慢查询日志、监视器等。  </p><p>本书作者专门维护了 <a href="http://www.redisbook.com" target="_blank" rel="noopener">www.redisbook.com</a> 网站，提供带有详细注释的 Redis源码，以及本书相关的更新内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;查阅了很多的如何学习Redis；发现很多人推荐了这本书《Redis设计与实现》（黄健宏著）  &lt;/p&gt;
&lt;p&gt;于是，我想看了；&lt;br&gt;一口气
      
    
    </summary>
    
    
      <category term="Redis" scheme="https://fengshana.github.io/categories/Redis/"/>
    
    
      <category term="笔记" scheme="https://fengshana.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Redis" scheme="https://fengshana.github.io/tags/Redis/"/>
    
      <category term="Redis设计与实现" scheme="https://fengshana.github.io/tags/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
</feed>
