<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>全面深入讲解MySQL数据库优化03</title>
      <link href="/2020/05/29/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%9603/"/>
      <url>/2020/05/29/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%9603/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;seid=13531213796559959972" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;seid=13531213796559959972</a>  </p><p>本课程作为MySQL高级课程，主要讲解了：  </p><ul><li><strong>MySQL</strong>中的<strong>视图</strong>/<strong>存储过程</strong>/<strong>触发器</strong>/<strong>索引</strong>等对象的使用</li><li>常见的<strong>SQL</strong>语句<strong>优化</strong>的技巧</li><li><strong>应用优化</strong></li><li><strong>数据库优化</strong></li><li><strong>数据库日志</strong></li></ul><p>等方面的知识，并通过综合案例，对课程中的知识进行一个整合应用。  </p><p>本课程旨在通过MySQl高级部分内容，可以在满足现有业务需求基础上，对<strong>MySQL底层的体系结构</strong>，及<strong>底层的优化</strong>有一个深入的理解，对<strong>系统的整体性能</strong>进行提升。  </p><h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li><strong>应用优化</strong></li><li><strong>MySQL中查询缓存优化</strong></li><li><strong>MySQL内存管理以及优化</strong></li><li><strong>MySQL并发参数</strong>调整</li><li><strong>MySQL锁</strong>问题</li><li>常用SQL技巧</li></ul><h2 id="应用优化"><a href="#应用优化" class="headerlink" title="应用优化"></a>应用优化</h2><p>前面章节，介绍了很多<strong>数据库的优化措施</strong>，但是在实际生产环境中，由于<strong>数据库 本身的性能 局限</strong>，就必须对前台的应用进行一些优化，来<strong>降低 数据库的 访问压力</strong>。  </p><h3 id="使用连接池"><a href="#使用连接池" class="headerlink" title="使用连接池"></a>使用连接池</h3><p>对于<strong>访问数据库</strong>来说，<strong>建立连接的代价</strong>是比较<strong>昂贵</strong>的，因为<strong>频繁的 创建关闭连接</strong>，是比较<strong>耗费资源</strong>的，有必要<strong>建立数据库连接池</strong>，以<strong>提高访问的性能</strong>。  </p><h3 id="减少对MySQL的访问"><a href="#减少对MySQL的访问" class="headerlink" title="减少对MySQL的访问"></a>减少对MySQL的访问</h3><h4 id="减少对数据进行重复检索"><a href="#减少对数据进行重复检索" class="headerlink" title="减少对数据进行重复检索"></a>减少对数据进行重复检索</h4><p>在编写应用代码时，需要能够<strong>理解 对 数据库的 访问逻辑</strong>。  </p><p><strong>能够 一次连接 就 获取得到结果的，就 不用两次连接</strong>，这样可以<strong>大大减少 对 数据库 无用的重复请求</strong>。  </p><p>比如，需要获取书籍的id和name字段，则查询如下：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure><p>之后，在业务逻辑中有需要获取得到书籍状态信息，则查询如下：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> ,<span class="keyword">status</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure><p>这样，就需要向数据库提交两次请求，数据库就要做两次查询操作。<br>其实完全可以用一条SQL语句得到想要的结果。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> ,<span class="keyword">status</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure><h4 id="增加cache层"><a href="#增加cache层" class="headerlink" title="增加cache层"></a>增加cache层</h4><p>在应用中，可以在应用中<strong>增加 缓存 层</strong> 来达到<strong>减轻数据库负担</strong>的目的。  </p><p>缓存层有很多种，也有很多实现方式，只要达到<strong>降低数据库的负担</strong>又能<strong>满足应用需求</strong>就可以。  </p><p>因此可以部分数据从数据库中抽取出来放到应用端以<strong>文本方式存储</strong>，或者使用<strong>框架（Mybatis，Hibernate）提供的一级缓存、二级缓存</strong>，或者使用<strong>redis数据库</strong>来<strong>缓存数据</strong>。  </p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p><strong>负载均衡</strong>是应用中使用非常<strong>普遍</strong>的一种<strong>优化方式</strong>。  </p><p><strong>负载均衡的机制</strong>就是利用<strong>某种均衡算法</strong>，将<strong>固定的负载量</strong> <strong>分到 不同的 服务器</strong>上，一次来<strong>降低 单台服务器的 负载</strong>，达到<strong>优化</strong>的效果。  </p><h4 id="利用MySQL复制分流查询"><a href="#利用MySQL复制分流查询" class="headerlink" title="利用MySQL复制分流查询"></a>利用MySQL复制分流查询</h4><p>通过<strong>MySQL的 主从复制</strong>，实现<strong>读写分离</strong>，使得<strong>增删改操作 走 主节点</strong>，<strong>查询操作 走 从结点</strong>，从而可以<strong>降低 单台服务器的读写压力</strong>。  </p><h4 id="采用分布式数据库架构"><a href="#采用分布式数据库架构" class="headerlink" title="采用分布式数据库架构"></a>采用分布式数据库架构</h4><p><strong>分布式数据库</strong>架构适合<strong>大数据量、负载高</strong>的情况，它有<strong>良好的 拓展性 和 高可用性</strong>。<br>通过在<strong>多台服务器</strong>之间<strong>分布数据</strong>，可以实现在<strong>多台服务器</strong>之间的<strong>负载均衡</strong>，<strong>提高访问效率</strong>。  </p><h2 id="查询缓存-概述及流程"><a href="#查询缓存-概述及流程" class="headerlink" title="查询缓存 - 概述及流程"></a>查询缓存 - 概述及流程</h2><h3 id="Mysql中查询缓存优化-概述"><a href="#Mysql中查询缓存优化-概述" class="headerlink" title="Mysql中查询缓存优化-概述"></a>Mysql中查询缓存优化-概述</h3><p><strong>开启mysql的 查询缓存</strong>，当<strong>执行完全相同的SQL语句</strong>的时候，<strong>服务器</strong>就会直接<strong>从缓存中读取结果</strong>；<br>当<strong>数据被修改</strong>，之前的<strong>缓存就会失效</strong>，<strong>修改比较频繁的 表 不适合 做 查询缓存</strong>。  </p><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><ol><li><strong>客户端</strong> <strong>发送一条查询SQL</strong> 给 <strong>服务器</strong></li><li><strong>服务器</strong>先会 <strong>检查查询缓存</strong>，如果<strong>命中</strong>了<strong>缓存</strong>，则<strong>立即返回存储在缓存中的结果</strong>。否则进入下一阶段。</li><li><strong>服务器端</strong>进行<strong>SQL解析</strong>、<strong>预处理</strong>，再由<strong>优化器</strong>生成对应的<strong>执行计划</strong>；</li><li><strong>MySQL</strong>根据<strong>优化器生成的执行计划</strong>，调用<strong>存储引擎的API</strong>来<strong>执行查询</strong>；</li><li>将结果<strong>缓存</strong>并<strong>返回给客户端</strong>；</li></ol><h2 id="查询缓存-配置参数"><a href="#查询缓存-配置参数" class="headerlink" title="查询缓存 - 配置参数"></a>查询缓存 - 配置参数</h2><h3 id="查询缓存配置"><a href="#查询缓存配置" class="headerlink" title="查询缓存配置"></a>查询缓存配置</h3><ol><li>查看当前的<strong>MySQL数据库 是否 支持 查询缓存</strong>：  </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p  </span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'have_query_cache'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>have_query_cache</td>    <td>YES</td>  </tr></table><ol start="2"><li>查看当前<strong>MySQL 是否 开启了 查询缓存</strong>：  </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'query_cache_type'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>query_cache_type</td>    <td>OFF(关闭)</td>  </tr></table><ol start="3"><li>查看 <strong>查询缓存 的 占用大小</strong>（建议按照1024倍数进行增大）：  </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'query_cache_size'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>query_cache_size</td>    <td>1048576（单位为字节，占用内存空间约为：1048576/1024/1024约为 1M的内存空间）</td>  </tr></table><ol start="4"><li>查看<strong>查询缓存 的 状态变量</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">STATUS</span> <span class="keyword">LIKE</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1038344</td>  </tr>  <tr>    <td>Qcache_hits</td>    <td>13</td>  </tr>  <tr>    <td>Qcache_inserts</td>    <td>6</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>16</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>4</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> demo_02; <span class="comment"># 切换数据库也算是一次查询mysql底层当中</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item; <span class="comment"># 耗费时间2.76 second</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item; <span class="comment"># 耗费时间2.53 second</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks（可用的内存块的个数）</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory（可用的内存空间）</td>    <td>1038344</td>  </tr>  <tr>    <td>Qcache_hits（查询缓存的命中次数）</td>    <td>13</td>  </tr>  <tr>    <td>Qcache_inserts（添加到缓存当中的次数）</td>    <td>6</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes（如果内存空间不足，将内存中数据移出缓存空间次数）</td>    <td>0</td>  </tr>  <tr>    <td style="color:red;font-weight:bolder;">Qcache_not_cached(当前查询没有进行缓存次数)</td>    <td style="color:red;font-weight:bolder;">19</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>4</td>  </tr></table><table>  <tr>    <th>参数</th>    <th>含义</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>查询缓存中的可用内存块数</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>查询缓存的可用内存量</td>  </tr><tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>查询缓存命中数</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts</td>    <td>添加到查询缓存的查询数</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>由于内存不足而从查询缓存中删除的查询数</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached</td>    <td>非缓存查询的数量（由于query_cache_type设置而无法缓存或者未缓存）</td>  </tr>  <tr>    <td>Qcache_queries_in_cache</td>    <td>查询缓存中注册的查询数</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>查询缓存中的块总数</td>  </tr></table><h2 id="查询缓存-开启查询缓存"><a href="#查询缓存-开启查询缓存" class="headerlink" title="查询缓存 - 开启查询缓存"></a>查询缓存 - 开启查询缓存</h2><p>MySQL的查询缓存默认是关闭的，需要手动配置参数 query_cache_type，来开启查询缓存。  </p><p>query_cache_type 该参数的可取值有三个：  </p><table>  <tr>    <th>值</th>    <th>定义</th>  </tr>  <tr>    <td>OFF 或 0</td>    <td>查询缓存功能关闭</td>  </tr>    <tr>    <td>ON 或 1</td>    <td>查询缓存功能打开，SELECT的结果符合缓存条件即会缓存；否则不予缓存；显式指定SQL_NO_CACHE，则不予缓存</td>  </tr>    <tr>    <td> DEMAND 或 2</td>    <td>查询缓存功能按需进行，<span style="color:red;font-weight:bolder;">显式指定 SQL_CACHE 的SELECT语句才会缓存</span>；其他均不予缓存</td>  </tr></table><p>在 /usr/my.cnf配置中，增加以下配置：  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在开启mysql的查询缓存</span></span><br><span class="line"><span class="attr">query_cache_type</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>配置完毕之后，重启服务即可生效；  </p><p>然后就可以在命令行执行SQL语句进行验证，执行一条比较耗时的SQL语句，然后再执行多次，查看后面几次的执行时间；  </p><p>获取通过查看查询缓存的缓存命中数，来判定是否走了查询缓存。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/my.cnf</span><br><span class="line">query_cache_type:1</span><br><span class="line"></span><br><span class="line">service mysql restart<span class="comment">#重启mysql</span></span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> demo_02;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 2.58 second</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="string">'Qcache'</span>%;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1038344</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>4</td>  </tr>  <tr>    <td>Qcache_inserts</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr>    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>2</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>4</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1038344</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_inserts</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr>    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>2</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>4</td>  </tr></table><h2 id="查询缓存-SELECT选项"><a href="#查询缓存-SELECT选项" class="headerlink" title="查询缓存 - SELECT选项"></a>查询缓存 - SELECT选项</h2><p>可以在SELECT语句中指定两个与查询缓存相关的选项：  </p><ul><li>SQL_CACHE：如果查询结果是可缓存的，并且query_cache_type 系统变量的值为ON或者DEMAND，则缓存查询结果；  </li><li>SQL_NO_CACHE: 服务器不使用查询缓存，它既不检查查询缓存，也不检查结果是否已缓存，也不缓存查询结果。  </li></ul><p>例子：  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT SQL_CACHE id, name <span class="keyword">FROM</span> customer;</span><br><span class="line">SELECT SQL_NO_CACHE id,name <span class="keyword">FROM</span> customer;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item  <span class="keyword">limit</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span>  <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1038344</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>5</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr>    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>2</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>8</td>  </tr></table><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL_NO_CACHE <span class="built_in">title</span>, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> id=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1038344</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>6</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts（添加到缓存的数量）</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>2</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>8</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL_NO_CACHE title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1038344</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>6</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts（添加到缓存的数量）</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>8</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL_NO_CACHE title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> SQL_NO_CACHE title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1035936</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>6</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts（添加到缓存的数量）</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>3</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>8</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">SQL_CACHE</span> title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">SQL_CACHE</span> title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1038344</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>7</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts（添加到缓存的数量）</td>    <td>4</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>4</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>10</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">SQL_CACHE</span> title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">SQL_CACHE</span> title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1038344</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>9</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts（添加到缓存的数量）</td>    <td>4</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>4</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>10</td>  </tr></table><h2 id="查询缓存-失效场景"><a href="#查询缓存-失效场景" class="headerlink" title="查询缓存 - 失效场景"></a>查询缓存 - 失效场景</h2><table>  <tr>    <th>值</th>    <th>定义</th>  </tr>  <tr>    <td>OFF 或 0</td>    <td>查询缓存功能关闭</td>  </tr>    <tr>    <td>ON 或 1</td>    <td>查询缓存功能打开，<span style="color:red;font-weight:bolder;">SELECT的结果符合缓存条件即会缓存</span>；否则不予缓存；显式指定SQL_NO_CACHE，则不予缓存</td>  </tr>    <tr>    <td> DEMAND 或 2</td>    <td>查询缓存功能按需进行，显式指定 SQL_CACHE 的SELECT语句才会缓存；其他均不予缓存</td>  </tr></table><p>开启mysql的查询缓存，当执行<strong>完全相同的SQL语句</strong>的时候，服务器就会直接从缓存中读取结果；当数据被修改，之前的缓存就会失效，修改比较频繁的表不适合做查询缓存。</p><ol><li>SQL语句不一致的情况，要想命中查询缓存，查询的SQL语句必须一致。  </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SQL1：</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#3000000 耗时0.00 second</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#SQL2：</span></span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#3000000 耗时2.79 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1033888</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>11</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr>    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>12</td>  </tr></table><ol start="2"><li>当查询语句中有一些不确定的时候，则不会缓存。如：now()、current_date()、curdate()、curtime()、rand()、uuid()、user()、database()；  </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>(); <span class="comment"># 耗时 0.01 second</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>(); <span class="comment"># 耗时 0.01 second；时间是发生了变化的；即不会走缓存</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1033888</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>11</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>7</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>12</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SQL1：</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> updatetime &lt; <span class="keyword">now</span>() <span class="keyword">limit</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#SQL2：</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#SQL3：</span></span><br><span class="line"><span class="keyword">select</span> databse();</span><br></pre></td></tr></table></figure><ol start="3"><li>不适用任何表查询语句。  </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'Hello'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1033888</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>11</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>8</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>12</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'A'</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>查询mysql、information_schema 或者 performance_schema 数据库中的表时，不会走查询缓存。  </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"><span class="comment">#information_schema</span></span><br><span class="line"><span class="comment">#mysql</span></span><br><span class="line"><span class="comment">#performance_schema</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.engines;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1033888</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>11</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>9</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>12</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.engines;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Qcache_free_blocks</td>    <td>1</td>  </tr>  <tr>    <td>Qcache_free_memory</td>    <td>1033888</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_hits</td>    <td>11</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_inserts</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_lowmen_prunes</td>    <td>0</td>  </tr>  <tr style="color:red;font-weight:bolder;">    <td>Qcache_not_cached(当前查询没有进行缓存)</td>    <td>10</td>  </tr>  <tr>    <td>Qcache_queryies_in_cache</td>    <td>5</td>  </tr>  <tr>    <td>Qcache_total_blocks</td>    <td>12</td>  </tr></table><ol start="5"><li><p>在存储的函数，触发器或者时间的主体内执行的查询；</p></li><li><p>如果表更改，则使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除。这包括使用<strong>MERGE</strong>映射到已更改表的查询。一个表可以被许多类型的语句，如被改变INSERT、UPDATE、DELETE、TRUNCATE TABLE、ALTER TABLE、DROP TABLE 或者 DROP DATABASE。  </p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> tb_item <span class="keyword">set</span> title=<span class="string">'test1'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 2.67 second；该SQL失效；但是失效的同时又去进行了缓存；当前查询时并未缓存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second；此时再去查询；即查询的缓存区内的内容</span></span><br></pre></td></tr></table></figure><h2 id="内存优化-优化原则"><a href="#内存优化-优化原则" class="headerlink" title="内存优化 - 优化原则"></a>内存优化 - 优化原则</h2><h3 id="内存优化原则"><a href="#内存优化原则" class="headerlink" title="内存优化原则"></a>内存优化原则</h3><ol><li>将尽量多的内存分配给MySQL做缓存(提高mysql的访问效率)，但要给操作系统和其他程序预留足够内存；</li><li>MyISAM存储引擎的数据文件读取依赖于操作系统自身的I/O缓存，因此，如果有MyISAM表，就要预留更多的内存给操作系统做I/O缓存。</li><li>排序区、连接区等缓存是分配给每个数据库会话（session）专用的，其默认值的设置要根据最大连接数合理分配，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽。</li></ol><h2 id="内存优化-MyISAM内存优化"><a href="#内存优化-MyISAM内存优化" class="headerlink" title="内存优化 - MyISAM内存优化"></a>内存优化 - MyISAM内存优化</h2><p>MyISAM的缓存机制：  </p><p>MyISAM存储引擎使用key_buffer缓存索引块（没有缓存数据块），加速MyISAM索引的读写速度，对于MyISAM表的数据块，mysql没有特别的缓存机制，完全依赖于操作系统的I/O缓存。  </p><p><strong>key_buffer_size</strong>  </p><p>key_buffer_size决定MyISAM索引块缓存区的大小，直接影响到MyISAM表的存取效率。  </p><p>可以在mysql参数文件中设置key_buffer_size的值，对于一般MyISAM数据库，建议至少将1/4可用内存分配给key_buffer_size。  </p><p>在/usr/my.cnf 中做如下配置：  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">key_buffer_size</span>=<span class="number">512</span>M</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'key_buffer_size'</span>;<span class="comment">#mysql 命令行</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>key_buffer_size</td>    <td>8388608(单位为字节；默认大小)</td>  </tr></table><p><strong>read_buffer_size</strong>  </p><p>如果需要经常顺序扫描MyISAM表，可以通过增大read_buffer_size的值来改善性能。  </p><p>但是需要注意的是read_buffer_size是每个session独占的，如果默认值设置太大，就会造成内存浪费。  </p><p><strong>read_rnd_buffer_size</strong>  </p><p>对于需要做排序的MyISAM表的查询，如带有 order by 子句的SQL，适当增加read_rnd_buffer_size的值，可以改善此类的SQL性能。  </p><p>但是需要注意的是read_rnd_buffer_size 是每个session独占的，如果默认值设置太大，就会造成内存浪费。  </p><h2 id="内存优化-InnoDB内存优化"><a href="#内存优化-InnoDB内存优化" class="headerlink" title="内存优化 - InnoDB内存优化"></a>内存优化 - InnoDB内存优化</h2><p>innodb的缓存机制：<br>InnoDB用一块内存区做IO缓存池，该缓存池不仅用来缓存InnoDB的索引块，而且也用来缓存InnoDB的数据块。  </p><p><strong>innodb_buffer_pool_size</strong>  </p><p>该变量决定了innodb存储引擎表数据和索引数据的最大缓存区大小。<br>在保证操作系统以及其他程序有足够内存可用的情况下，innodb_buffer_pool_size的值越大，缓存命中率越高，访问innodb表的需要的磁盘I/O就越少，性能也就越高。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'innodb_buffer_pool_size'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>innodb_buffer_pool_size</td>    <td>134217728(单位为字节；默认大小128M；134217728/1024-->131072（换算成B），134217728/1024/1024-->128（换算成M）；)</td>  </tr></table><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="keyword">my</span>.cnf</span><br><span class="line"><span class="comment"># innodb_buffer_pool_size=512M #修改内容</span></span><br></pre></td></tr></table></figure><p><strong>innodb_log_buffer_size</strong>  </p><p>决定了innodb重做日志缓存的大小，对于避免产生大量更新记录的大事务，增加innodb_log_buffer_size的大小，可以避免innodb在事务提交前就执行不必要的日志写入磁盘操作。  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/my.cnf</span><br><span class="line"><span class="comment"># innodb_log_buffer_size=10M #修改内容</span></span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><h2 id="并发参数调整"><a href="#并发参数调整" class="headerlink" title="并发参数调整"></a>并发参数调整</h2><h3 id="mysql并发参数调整"><a href="#mysql并发参数调整" class="headerlink" title="mysql并发参数调整"></a>mysql并发参数调整</h3><p>从实现上来说，MySQL Server是多线程结构，包括后台线程和客户服务线程。  </p><p>多线程可以有效利用服务器资源，提高数据库的并发性能。  </p><p>在mysql中，控制并发连接和线程的主要参数包括 max_connections、back_log、thread_cache_size、table_open_size；  </p><h4 id="max-connections（最大连接数）"><a href="#max-connections（最大连接数）" class="headerlink" title="max_connections（最大连接数）"></a>max_connections（最大连接数）</h4><p>采用max_connections 控制允许连接到MySQL数据库的最大数量，默认值是151。  </p><p>如果状态变量 connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已经达到允许最大值而失败，这时可以考虑增大max_connections的值。  </p><p>MySQL最大可支持的连接数，取决于很多因素，包括给定操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度，期望的响应时间等。  </p><p>在Linux平台下，性能好的服务器，支持500-1000个连接都不是难事，需要根据服务器性能进行评估设定。  </p><h4 id="back-log"><a href="#back-log" class="headerlink" title="back_log"></a>back_log</h4><p>back_log 参数控制MySQL监听TCP端口时设置的积压请求栈大小。  </p><p>如果mysql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。  </p><p>5.6.6版本之前默认值为50，之后的版本默认为50+（max_connections/5），但最大不超过900。  </p><p>如果需要数据库在较短的时间内处理大量连接请求，可以考虑适当增大back_log的值。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'back_log'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>back_log</td>    <td>80(默认个数)</td>  </tr></table><h4 id="table-open-cache"><a href="#table-open-cache" class="headerlink" title="table_open_cache"></a>table_open_cache</h4><p>该参数用来控制所有SQL语句执行线程可打开表缓存的数量，而在执行SQL语句时，每一个SQL执行线程至少要打开一个表缓存，该参数的值应该根据设置的最大连接数max_connections 以及每个连接执行关联查询中涉及的白鸥的最大数量来决定。  </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max_connections x N<span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'table_open_cache'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>table_open_cache</td>    <td>2000(默认大小)</td>  </tr></table><h4 id="thread-cache-size（线程缓存大小）"><a href="#thread-cache-size（线程缓存大小）" class="headerlink" title="thread_cache_size（线程缓存大小）"></a>thread_cache_size（线程缓存大小）</h4><p>为了加快连接数据库的速度，MySQL会缓存一定数量的客户服务线程（线程池）以备重用，通过参数 thread_cache_size 可控制MySQL缓存客户服务线程的数量（线程池的大小）。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'thread_cache_size'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>thread_cache_size</td>    <td>9(默认大小9个线程)</td>  </tr></table><h4 id="innodb-lock-wait-timeout（innodb行锁的等待时间）"><a href="#innodb-lock-wait-timeout（innodb行锁的等待时间）" class="headerlink" title="innodb_lock_wait_timeout（innodb行锁的等待时间）"></a>innodb_lock_wait_timeout（innodb行锁的等待时间）</h4><p>该参数是用来设置InnoDB事务等待行锁的时间，默认值时候50ms。  </p><p>可以根据需要进行动态设置。  </p><p>对于需要快速反馈的业务系统来说，可以将行锁的等待时间调小，以避免事务长时间挂起；  </p><p>对于后台运行的批量处理程序来说，可以将行锁的等待时间调大，以避免发生大的回滚操作。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'innodb_lock_wait_timeout'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>innodb_lock_wait_timeout</td>    <td>50</td>  </tr></table><h2 id="锁-锁的概述及分类"><a href="#锁-锁的概述及分类" class="headerlink" title="锁 - 锁的概述及分类"></a>锁 - 锁的概述及分类</h2><h3 id="锁概述"><a href="#锁概述" class="headerlink" title="锁概述"></a>锁概述</h3><p>锁是计算机协调多个进程 或者 线程 并发访问某一资源的机制（避免争抢）。  </p><p>在数据库中，除了传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的资源。  </p><p>如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。  </p><p>从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。  </p><h3 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h3><p>从对数据操作的粒度分为：  </p><ol><li>表锁：操作时，会锁定整个表</li><li>行锁：操作时，会锁定当前操作行</li></ol><p>从对数据操作的类型分：  </p><ol><li>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响</li><li>写锁（排它锁）：当前操作没有完成之前，他会阻断其他写锁和读锁</li></ol><h2 id="锁-MySQL对锁的支持"><a href="#锁-MySQL对锁的支持" class="headerlink" title="锁 - MySQL对锁的支持"></a>锁 - MySQL对锁的支持</h2><p>相对其他数据库而言，MySQL的锁机制比较简单。  </p><p>其最显著的特点是不同的存储引擎支持不同的锁机制。  </p><p>下标罗列出了各个存储引擎对锁的支持情况。  </p><table>  <tr>    <th>存储引擎</th>    <th>表级锁</th>    <th>行级锁</th>    <th>页面锁</th>  </tr>  <tr>    <td>MyISAM</td>    <td>支持</td>    <td>不支持</td>    <td>不支持</td>  </tr>    <tr>    <td>InnoDB</td>    <td>支持</td>    <td>支持</td>    <td>不支持</td>  </tr>    <tr>    <td>MEMORY</td>    <td>支持</td>    <td>不支持</td>    <td>不支持</td>  </tr>    <tr>    <td>BDB</td>    <td>支持</td>    <td>不支持</td>    <td>支持</td>  </tr></table><p>MySQL这三种锁的特性可大致归纳如下：  </p><table>  <tr>    <th>锁类型</th>    <th>特定</th>  </tr>  <tr>    <td>表级锁</td>    <td>偏向MyISAM存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</td>  </tr>    <tr>    <td>行级锁</td>    <td>偏向InnoDB存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</td>  </tr>    <tr>    <td>页面锁</td>    <td>开销和加锁时间介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发度一般。</td>  </tr></table><p>从上述特点可见，很难笼统的说哪种锁更好，只能就具体应用的特点来说哪种锁更合适。  </p><p>仅从锁的角度来说：<br>  表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web应用；<br>  而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理（OLTP）系统；  </p><h2 id="锁-MyISAM表锁-读锁"><a href="#锁-MyISAM表锁-读锁" class="headerlink" title="锁 - MyISAM表锁 - 读锁"></a>锁 - MyISAM表锁 - 读锁</h2><p>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。</p><p>MyISAM存储引擎支持表锁，这也是MySQL开始几个版本中唯一支持的锁类型。  </p><h3 id="如何加表锁"><a href="#如何加表锁" class="headerlink" title="如何加表锁"></a>如何加表锁</h3><p>MyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等），会自动给涉及的表加写锁，这个过程并不需要用户干预。  </p><p>因此，用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。  </p><p>显示加表锁语法：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加读锁：  </span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> table_name <span class="keyword">read</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#加写锁：  </span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> table_name write;</span><br></pre></td></tr></table></figure><h3 id="读锁案例"><a href="#读锁案例" class="headerlink" title="读锁案例"></a>读锁案例</h3><p>准备环境  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">create database demo_03<span class="built_in"> default </span><span class="attribute">charset</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line">use demo_03;</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">'tb_book'</span>(</span><br><span class="line">  <span class="string">'id'</span> INT(11) AUTO_INCREMENT,</span><br><span class="line">  <span class="string">'name'</span> VARCHAR(50)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'publish_name'</span> DATE<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'status'</span> CHAR(1)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (<span class="string">'id'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=myisam<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入tb_book 基础数据</span></span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">'tb_user'</span>(</span><br><span class="line">  <span class="string">'id'</span> INT(11) AUTO_INCREMENT,</span><br><span class="line">  <span class="string">'name'</span> VARCHAR(50)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY(<span class="string">'id'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=myisam<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入tb_user 基础数据</span></span><br><span class="line"></span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">lock table tb_book read;</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> tb_books;</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> tb_user;# Table <span class="string">'tb_user'</span> was <span class="keyword">not</span> locked with LOCK TABLES 锁定tb_book表途中无法去操作其他表；除非当前tb_book表锁释放；</span><br><span class="line"></span><br><span class="line">update tb_book <span class="builtin-name">set</span> name =<span class="string">'solr'</span> where <span class="attribute">id</span>=2;#当前对tb_book表进行的锁是读锁，而不是写锁；所以当前无法进行更新；Table <span class="string">'tb_book'</span> was locked with a READ lock <span class="keyword">and</span> can<span class="string">'t be updated.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">unlock tables;#只有当当前的tb_book表当中的读锁进行解锁，其他客户端连接mysql的该表时才能够进行写锁；否则将一直等待当前该tb_book的读锁释放；</span></span><br></pre></td></tr></table></figure><p>如果对MyISAM表进行操作了读锁，其不会阻塞其他线程的读操作，但是会阻塞其他线程的写操作。  </p><h2 id="锁-MyISAM表锁-写锁"><a href="#锁-MyISAM表锁-写锁" class="headerlink" title="锁 - MyISAM表锁 - 写锁"></a>锁 - MyISAM表锁 - 写锁</h2><p>写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当前客户端</span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> tb_book write;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> tb_book <span class="keyword">set</span> <span class="keyword">name</span> =<span class="string">'solr'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_book(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'es'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他客户端</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book;<span class="comment">#其他客户端将一直处于等待状态，除非当前客户端的写锁释放（即当前客户端的业务操作完成），否则其他客户端一直处于等待状态。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当前客户端</span></span><br><span class="line"><span class="keyword">unlock</span> <span class="keyword">tables</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他客户端</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book;<span class="comment">#当 当前客户端释放锁之后，该其他客户端即立刻能查询到数据。</span></span><br></pre></td></tr></table></figure><h2 id="锁-MyISAM表锁-小结"><a href="#锁-MyISAM表锁-小结" class="headerlink" title="锁 - MyISAM表锁 - 小结"></a>锁 - MyISAM表锁 - 小结</h2><p>锁模式的互相兼容性如表所示：  </p><table>  <tr>    <th>当前锁模式/请求锁模式</th>    <th>None（理解为当前客户端获取得到的锁）</th>    <th>读锁（其他客户端对于读操作是否可行）</th>    <th>写锁（其他客户端对于写操作是否可行）</th>  </tr>  <tr>    <th>读锁</th>    <td>是（当前客户端获取得到的读锁）</td>    <td>是（其他客户端可以进行读操作）</td>    <td>否（其他客户端无法进行写操作）</td>  </tr>    <tr>    <th>写锁</th>    <td>是（当前客户端获取得到的写锁）</td>    <td>否（其他客户端无法进行读操作）</td>    <td>否（其他客户端无法进行写操作）</td>  </tr></table><p>由上表可见：  </p><ol><li>对MyISAM表的读操作，不会阻塞其他用户对同一张表的读请求，但是会阻塞对同一张表的写请求。</li><li>对MyISAM表的写操作，则会阻塞其他用户对同一张表的读和写操作。</li></ol><p>简而言之，就是读锁会阻塞写，但是不会阻塞读；而写锁，则既会阻塞读，又会阻塞写。  </p><p>此外，MyISAM的读写锁调度是写操作优先，这也是MyISAM不适合做写为主的表的存储引擎的原因。<br>因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</p><h2 id="锁-MyISAM表锁-查看锁争用情况"><a href="#锁-MyISAM表锁-查看锁争用情况" class="headerlink" title="锁 - MyISAM表锁 - 查看锁争用情况"></a>锁 - MyISAM表锁 - 查看锁争用情况</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><p>Database: 数据库  </p><p>Table: 数据表  </p><p>In_use: 表当前被查询使用的次数。如果该数为零，则表是打开的，但是当前没有被使用。  </p><p>Name_locked: 表名称是否被锁定。名称锁定用于取消表或者对表进行重命名等操作。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> tb_book write;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> <span class="keyword">tables</span>;<span class="comment">#database: demo_03; table: tb_book ; In_use(正在使用):1；Name_locked:0</span></span><br><span class="line"><span class="keyword">unlock</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Table_locks%'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Table_lockes_immediate</td>    <td>70</td>  </tr>    <tr>    <td>Table_locks_waited</td>    <td>0</td>  </tr></table><p>Table_locks_immediate: 指的是能够立即获得表级锁的次数，每次立即获取锁，值加1；  </p><p>Table_locks_waited: 指的是不能立即获取表级锁而需要等待的次数，每等待一次，该值加1，此值高说明存在着较为严重的表级锁争用情况。</p><h2 id="锁-InnoDB行锁-介绍及背景知识"><a href="#锁-InnoDB行锁-介绍及背景知识" class="headerlink" title="锁 - InnoDB行锁 - 介绍及背景知识"></a>锁 - InnoDB行锁 - 介绍及背景知识</h2><h3 id="行锁介绍"><a href="#行锁介绍" class="headerlink" title="行锁介绍"></a>行锁介绍</h3><p>InnoDB默认支持行锁，也支持表锁；  </p><p>行锁特点：偏向InnoDB存储迎请，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。<br>（由于锁定粒度最小，所以发生锁冲突的概率最低，二者存在关联）  </p><p>InnoDB与MyISAM的最大不同有两点：一是支持事务；二是采用了行级锁；<br>(事务和行级锁之间存在关联，支持事务的原因即在于InnoDB采用的是行级锁)</p><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><p><strong>事务及其ACID属性</strong>  </p><p>事务是由一组SQL语句组成的逻辑处理单元。<br>事务具有以下4个特性，简称为事务ACID属性。  </p><table>  <tr>    <th>ACID属性</th>    <th>含义</th>  </tr>  <tr>    <td>原子性（Atomic）</td>    <td>事务是一个原子操作单元，其对数据的修改，要么全部成功，要么全部失败</td>  </tr>  <tr>    <td>一致性（Consistent）</td>    <td>在事务开始和完成时，数据都必须保持一致状态</td>  </tr>  <tr>    <td>隔离性（Isolation）</td>    <td>数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境下运行</td>  </tr>  <tr>    <td>持久性（Durable）</td>    <td>事务完成之后，对于数据的修改是永久的</td>  </tr></table><p><strong>并发事务处理带来的问题</strong>  </p><table>  <tr>    <th>问题</th>    <th>含义</th>  </tr>  <tr>    <td>丢失更新（Lost Update）</td>    <td>当两个或者多个事务选择同一行，最初的事务修改的值，会被后面的事务修改的值覆盖</td>  </tr>  <tr>    <td>脏读（Dirty Reads）</td>    <td>当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据（一个事务读取到了另外一个事务还未提交的数据）</td>  </tr>  <tr>    <td>不可重复度（Non_repeatable Reads）</td>    <td>一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现和以前独处的数据不一致</td>  </tr>  <tr>    <td>幻读（Phantom Reads）</td>    <td>一个事务按照相同的查询条件重新读取以前查询过的数据，却发现其他事务插入了满足其查询条件的新数据。</td>  </tr></table><p><strong>事务隔离级别</strong>  </p><p>为了解决上述提到的事务并发问题，数据库提供一定的事务隔离机制来解决这个问题。  </p><p>数据库的事务隔离越严格，并发副作用越小，但付出的代价也就越大(性能越低)，因为事务隔离实质上就是使用事务在一定程度上“串行化”进行，这显然与“并发”是矛盾的。  </p><p>数据库的隔离级别有4个，由低到高依次为Read uncommitted、Read committed、Repeatable read、Serializable ，这四个界别可以逐个解决脏写、脏读、不可重复度、幻读这几类问题。  </p><table>  <tr>    <th>隔离级别</th>    <th>丢失更新</th>    <th>脏读</th>    <th>不可重复读</th>    <th>幻读</th>  </tr>  <tr>    <td>Read uncommitted</td>    <td>x</td>    <td>√</td>    <td>√</td>    <td>√</td>  </tr>    <tr>    <td>Read committed</td>    <td>x</td>    <td>x</td>    <td>√</td>    <td>√</td>  </tr>   <tr>    <td>Repeatable read(默认)</td>    <td>x</td>    <td>x</td>    <td>x</td>    <td>√</td>  </tr>    <tr>    <td>Serializable</td>    <td>x</td>    <td>x</td>    <td>x</td>    <td>x</td>  </tr></table><p>备注： √ 代表可能出现， x 代表不会出现。  </p><p>MySQL的数据库的默认隔离级别是 Repeatable read，查看方式：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'tx_isolation'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>tx_isolation</td>    <td>REPEATABLE-READ</td>  </tr></table><h2 id="锁-InnoDB行锁-类型"><a href="#锁-InnoDB行锁-类型" class="headerlink" title="锁 - InnoDB行锁 - 类型"></a>锁 - InnoDB行锁 - 类型</h2><h3 id="InnoDB的行锁模式"><a href="#InnoDB的行锁模式" class="headerlink" title="InnoDB的行锁模式"></a>InnoDB的行锁模式</h3><p><strong>InnoDB</strong>实现了以下<strong>两种类型的行锁</strong>：  </p><ul><li><p><strong>共享锁（S）</strong>： 又称为<strong>读锁</strong>，<br>简称<strong>S锁</strong>，</p></li><li><p><em>共享锁*</em>就是<strong>多个事务</strong> 对于 <strong>同一数据</strong> 可以 <strong>共享一把锁</strong>，都能 <strong>访问到 数据</strong>，<br>但是 <strong>只能读 不能修改</strong>。  </p></li><li><p><strong>排它锁（X）</strong>：又称为<strong>写锁</strong>，<br>简称<strong>X锁</strong>，</p></li><li><p><em>排它锁*</em>就是<strong>不能与其他锁 并存</strong>。<br>如果<strong>一个事务 获取了 一个数据行的排它锁</strong>，</p></li><li><p><em>其他事务*</em>就<strong>不能再获取</strong> <strong>该行的其他锁</strong>，<br>包括<strong>共享锁和排它锁</strong>，<br>但是 <strong>获取排它锁的事务</strong> 可以<strong>对数据 进行 读取 和 修改</strong>。  </p></li></ul><p>对于<strong>UPDATE、DELETE和INSERT</strong>语句，<strong>InnoDB</strong>会<strong>自动</strong>给涉及数据集 加 <strong>排它锁（X）</strong>；<br>对于<strong>普通SELECT语句</strong>，<strong>InnoDB不会加任何锁</strong>；  </p><p>可以通过以下语句<strong>显式</strong>给记录集加<strong>共享锁或者排它锁</strong>：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#共享锁（S）</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> ...... <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#排它锁（X）</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> ....... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span></span><br></pre></td></tr></table></figure><h3 id="案例准备工作"><a href="#案例准备工作" class="headerlink" title="案例准备工作"></a>案例准备工作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_innodb_lock(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>),</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">16</span>),</span><br><span class="line">  sex <span class="built_in">varchar</span>(<span class="number">1</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入基础数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建单列索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_test_innodb_lock_id <span class="keyword">on</span> test_innodb_lock(<span class="keyword">id</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_test_innodb_lock_name <span class="keyword">on</span> test_innodb_lock(<span class="keyword">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><h3 id="行锁基本演示"><a href="#行锁基本演示" class="headerlink" title="行锁基本演示"></a>行锁基本演示</h3><table>  <tr>    <th>Session-1</th>    <th>Session-2</th>  </tr>  <tr>    <td>关闭自动提交功能（set autocommit=0;）</td>    <td>关闭自动提交功能（set autocommit=0;）</td>  </tr>  <tr>    <td>可以正常的查询出全部的数据（select * from test_innodb_lock;）</td>    <td>可以正常的查询出全部的数据（select * from test_innodb_lock;）</td>  </tr>  <tr>    <td>查询id为3的数据；（select * from test_innodb_lock where id=3;）</td>    <td>查询id为3的数据；（select * from test_innodb_lock where id=3;）</td>  </tr>   <tr>    <td>更新id为3的数据，但是不提交（update test_innodb_lock set name='AI' where id=3;）</td>    <td>更新id为3的数据，在Session-1的更新提交完成之前一直处于等待状态；（update test_innodb_lock set name='AII' where id=3;）</td>  </tr><tr>    <td>通过commit，提交事务（commit;）</td>    <td>接触阻塞，更新正常进行（update test_innodb_lock set name='AII' where id=3;）</td>  </tr>  <tr>    <td colspan="2">以上，操作的都是同一行的数据，接下来，演示不同行的数据；</td>  </tr>  <tr>    <td>更新id为3的数据，正常的获取到行锁，执行更新；(update test_innodb_lock set name='a1' where id =3;)</td>    <td>由于与Session-1操作不是同一行，获取当前行锁，执行更新；（update test_innodb_lock set name ="C1" where id=5;）</td>  </tr></table><h2 id="锁-InnoDB行锁-行锁升级为表锁"><a href="#锁-InnoDB行锁-行锁升级为表锁" class="headerlink" title="锁 - InnoDB行锁 - 行锁升级为表锁"></a>锁 - InnoDB行锁 - 行锁升级为表锁</h2><p>如果不通过索引条件检索数据，那么innodb将对表中的所有记录加锁，实际效果跟表锁一样。  </p><p>查看当前表的索引：show index from test_innodb_lock;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> test_innodb_lock\G;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Session-1</th>    <th>Session-2</th>  </tr>  <tr>    <td>关闭事务的自动提交（set autocommit=0;）</td>    <td>关闭事务的自动提交（set autocommit=0;）</td>  </tr>  <tr>    <td>执行更新语句（update test_innodb_lock set sex='2' where <span style="color:red;font-weight:bolder;">name=400</span>; ）</td>    <td>执行更新语句，但是出于阻塞状态（update test_innodb_lock set sex='2' where id=9;）</td>  </tr>   <tr>    <td>提交事务（commit;）</td>    <td>解除阻塞，执行更新成功（update test_innodb_lock set sex='2' where id=9;）</td>  </tr>  <tr>    <td></td>    <td>执行提交操作（commit;）</td>  </tr></table><p>由于执行更新时，name字段本来为varchar类型，但是Session-1当中name作为数字类型来使用，所以存在类型转换，索引失效，最终行锁变为表锁；  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> test_innodb_lock;<span class="meta">#查看表结构</span></span><br></pre></td></tr></table></figure><p>索引失效：name字段本来的类型为varcahr类型；如果是varchar类型但是在使用的时候，没有给其name字段的取值加上单引号，那么这个时候索引就将失效；索引失效，行锁升级为表锁；</p><h2 id="锁-InnoDB行锁-间隙锁危害"><a href="#锁-InnoDB行锁-间隙锁危害" class="headerlink" title="锁 - InnoDB行锁 - 间隙锁危害"></a>锁 - InnoDB行锁 - 间隙锁危害</h2><p>当用 <strong>范围条件</strong>，而不是使用相等条件检索数据，并请求共享或者排它锁的时候，InnoDB会给符合条件的已有数据进行加锁；<br>对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP）”，InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的 间隙锁（Next-Key锁）；  </p><p>ID &lt; 10 ：  </p><ul><li>1,2,3,4,5,6,7,8,9</li><li>1,2,3,4,6,9(此时当中的5 和 7、8 则称之为间隙)</li></ul><p>示例：  </p><table>  <tr>    <th>Session-1</th>    <th>Session-2</th>  </tr>  <tr>    <td>关闭事务自动提交（set autocommit=0;）</td>    <td>关闭事务自动提交（set autocommit=0;）</td>  </tr>  <tr>    <td>根据id范围更新数据（update test_innodb_lock set name='332423' where id < 4 ;）</td>    <td>插入id为2的记录，处于阻塞状态（insert into test_innodb_lock values(2,'1001','1'); ）</td>  </tr>    <tr>    <td>提交事务（commit;）</td>    <td>解除阻塞，执行插入操作（insert into test_innodb_lock values(2,'1001','1'); ）</td>  </tr>   <tr>    <td></td>    <td>提交事务（commit;）</td>  </tr></table><h2 id="锁-InnoDB行锁-争用情况查看"><a href="#锁-InnoDB行锁-争用情况查看" class="headerlink" title="锁 - InnoDB行锁 - 争用情况查看"></a>锁 - InnoDB行锁 - 争用情况查看</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">show status like <span class="string">'innodb_row_lock%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#Innodb_row_lock_current_waits: 当前正在等待锁定的数量；</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#Innodb_row_lock_time： 从系统启动到现在锁定总时间长度</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#Innodb_row_lock_time_avg: 每次等待所花平均时长</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#Innodb_row_lock_time_max: 从系统启动到现在等待最长的一次所花时间</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#Innodb_row_lock_waits： 系统启动后到现在总共等待的次数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#当等待的次数很高，而且每次等待的时长也不小的时候，就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手制定优化计划。</span></span><br></pre></td></tr></table></figure><h2 id="锁-InnoDB行锁-总结"><a href="#锁-InnoDB行锁-总结" class="headerlink" title="锁 - InnoDB行锁 - 总结"></a>锁 - InnoDB行锁 - 总结</h2><p><strong>Innodb存储引擎</strong> 由于实现了 <strong>行级锁定</strong> ，<br>虽然在 <strong>锁定机制</strong> 的实现方面带来了 <strong>性能损耗</strong> 可能比表锁会更高一些，<br>但是在 <strong>整体并发处理能力方面</strong>要远远 <strong>优于</strong> <strong>MyISAM的表锁</strong> 的。  </p><p>当 <strong>系统并发量较高</strong> 的时候，<strong>InnoDB的整体性能</strong> 和 <strong>MyISAM</strong> 相比就会有比较<strong>明显的优势</strong>。  </p><p>但是，<strong>InnoDB的行级锁</strong> 同样也有其脆弱的一面，但<strong>使用不当</strong>的时候，可能会让<strong>InnoDB的整体性能</strong>不仅<strong>不能比MyISAM高</strong>，甚至<strong>可能</strong>会<strong>更差</strong>。  </p><p><strong>优化建议</strong>：  </p><ul><li>尽可能让所有 <strong>数据检索</strong> 都能通过 <strong>索引</strong> 来完成，<strong>避免 无索引 行锁</strong> <strong>升级</strong>为<strong>表锁</strong></li><li><strong>合理设计索引</strong>，尽量 <strong>缩小锁的范围</strong></li><li>尽可能<strong>减少索引条件</strong>，以及<strong>索引范围</strong>，<strong>避免间隙锁</strong></li><li>尽量<strong>控制事务大小</strong>，<strong>减少锁定资源量和时间长度</strong></li><li>尽可能使用<strong>低级别事务隔离</strong>（前提：但是需要<strong>业务层面满足需求</strong>）</li></ul><h2 id="SQL技巧-SQL执行顺序及正则表达式"><a href="#SQL技巧-SQL执行顺序及正则表达式" class="headerlink" title="SQL技巧 - SQL执行顺序及正则表达式"></a>SQL技巧 - SQL执行顺序及正则表达式</h2><h3 id="SQL执行顺序"><a href="#SQL执行顺序" class="headerlink" title="SQL执行顺序"></a>SQL执行顺序</h3><p>编写顺序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">  &lt;<span class="keyword">select</span> <span class="keyword">list</span>&gt;</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  &lt;left_table&gt; &lt;join_type&gt;</span><br><span class="line"><span class="keyword">JOIN</span></span><br><span class="line">  &lt;right_table&gt; <span class="keyword">ON</span> &lt;join_condition&gt;</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  &lt;where_condition&gt;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  &lt;group_by_list&gt;</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">  &lt;having_condition&gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  &lt;order_by_condition&gt;</span><br><span class="line"><span class="keyword">LIMIT</span></span><br><span class="line">  &lt;limit_params&gt;</span><br></pre></td></tr></table></figure><p>执行顺序  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> &lt;left_table&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ON</span> &lt;join_condition&gt;</span><br><span class="line"></span><br><span class="line">&lt;join_type&gt; <span class="keyword">JOIN</span> &lt;right_table&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> &lt;where_condition&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;group_by_list&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">HAVING</span> &lt;having_condition&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> &lt;<span class="keyword">select</span> list&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;order_by_condition&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">LIMIT</span> &lt;limit_params&gt;</span><br></pre></td></tr></table></figure><h3 id="正则表达式使用"><a href="#正则表达式使用" class="headerlink" title="正则表达式使用"></a>正则表达式使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则表达式 regexp</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'^j'</span>;<span class="comment">#查询name字段取值以 “j” 字符开头的记录行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'S$'</span>;<span class="comment">#查询name字段取值以 “S” 字符结尾的记录行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'[uvw]'</span>;<span class="comment">#查询name字段取值包含 “u”、“v”、“w” 字符的记录行</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>符号</th>    <th>含义</th>  </tr>  <tr>    <td>^</td>    <td>在字符串开始处进行匹配</td>  </tr>    <tr>    <td>$</td>    <td>在字符串末尾处进行匹配</td>  </tr>    <tr>    <td>.</td>    <td>匹配任意单个字符，包括换行符</td>  </tr>  <tr>    <td>[...]</td>    <td>匹配出括号内的任意字符</td>  </tr>  <tr>    <td>[^...]</td>    <td>匹配不出括号内的任意字符</td>  </tr>  <tr>    <td>a*</td>    <td>匹配零个或者多个a（包括空串）</td>  </tr>  <tr>    <td>a+</td>    <td>匹配一个或者多个a（不包括空串）</td>  </tr>  <tr>    <td>a?</td>    <td>匹配零个或者一个a</td>  </tr>    <tr>    <td>a1|a2</td>    <td>匹配a1或者a2</td>  </tr>    <tr>    <td>a(m)</td>    <td>匹配m个a</td>  </tr>      <tr>    <td>a(m,)</td>    <td>至少匹配m个a</td>  </tr>      <tr>    <td>a(m,n)</td>    <td>匹配m个a 到n个a</td>  </tr>      <tr>    <td>a(,n)</td>    <td>匹配0到n个a</td>  </tr>      <tr>    <td>(...)</td>    <td>将模式元素组成单一元素</td>  </tr></table><h2 id="SQL技巧-数字函数与字符串函数"><a href="#SQL技巧-数字函数与字符串函数" class="headerlink" title="SQL技巧 - 数字函数与字符串函数"></a>SQL技巧 - 数字函数与字符串函数</h2><h3 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h3><table>  <tr>    <th>函数名称</th>    <th>作用</th>  </tr>  <tr>    <td>ABS</td>    <td>求绝对值</td>  </tr>    <tr>    <td>SQRT</td>    <td>求二次方根</td>  </tr>    <tr>    <td>MOD</td>    <td>求余数</td>  </tr>    <tr>    <td>CEIL和CEILING</td>    <td>两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</td>  </tr>  <tr>    <td>FLOOR</td>    <td>向下取整，返回值转化为一个BIGINT</td>  </tr>  <tr>    <td>RAND</td>    <td>生成一个0-1之间的随机数，传入整数参数是，用来产生重复序列</td>  </tr>  <tr>    <td>ROUND</td>    <td>对所传入参数进行四舍五入</td>  </tr>    <tr>    <td>SIGN</td>    <td>返回参数的符号</td>  </tr>    <tr>    <td>POW和POWER</td>    <td>两个函数的功能相同，都是所传参数的次方的结果值</td>  </tr>  <tr>    <td>SIN</td>    <td>求正弦值</td>  </tr>  <tr>    <td>COS</td>    <td>求余弦值</td>  </tr>  <tr>    <td>ACOS</td>    <td>求反余弦值，与函数COS互为反函数</td>  </tr>    <tr>    <td>TAN</td>    <td>求正切值</td>  </tr>  <tr>    <td>ATAN</td>    <td>求反正切值，与函数TAN互为反函数</td>  </tr>  <tr>    <td>COT</td>    <td>求余切值</td>  </tr></table><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table>  <tr>    <th>函数名称</th>    <th>作用</th>  </tr>  <tr>    <td>LENGTH</td>    <td>计算字符串长度函数，返回字符串的字节长度</td>  </tr>    <tr>    <td>CONCAT</td>    <td>合并字符串函数，返回结果为连接参数产生的字符串，参数可以使用一个或者多个</td>  </tr>    <tr>    <td>INSERT</td>    <td>替换字符串函数</td>  </tr>    <tr>    <td>LOWER</td>    <td>将字符串中的字母转换为小写</td>  </tr>    <tr>    <td>UPPER</td>    <td>将字符串中的字母转换为大写</td>  </tr>    <tr>    <td>LEFT</td>    <td>从左侧截取字符串，返回字符串左边的若干个字符</td>  </tr>    <tr>    <td>RIGTH</td>    <td>从右侧截取字符串，返回字符串右边的若干个字符</td>  </tr>    <tr>    <td>TRIM</td>    <td>删除字符串左右两侧的空格</td>  </tr>    <tr>    <td>REPLACE</td>    <td>字符串替换函数，返回替换后的新字符串</td>  </tr>    <tr>    <td>SUBSTRING</td>    <td>截取字符串，返回从指定位置开始的指定长度的字符串</td>  </tr>    <tr>    <td>REVERSE</td>    <td>字符串反转（逆序）函数，返回与原始字符串顺序相反的字符串</td>  </tr></table><h2 id="SQL技巧-日期函数与聚合函数"><a href="#SQL技巧-日期函数与聚合函数" class="headerlink" title="SQL技巧 - 日期函数与聚合函数"></a>SQL技巧 - 日期函数与聚合函数</h2><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><table>  <tr>    <th>函数名称</th>    <th>作用</th>  </tr>  <tr>    <td>CURDATE和CURRENT_DATE</td>    <td>两个函数作用相同，返回当前系统的日期值</td>  </tr>  <tr>    <td>CURTIME和CURRENT_TIME</td>    <td>两个函数作用相同，返回当前系统的时间值</td>  </tr>  <tr>    <td>NOW和SYSDATE</td>    <td>两个函数作用相同，返回当前系统的日期和时间值</td>  </tr>  <tr>    <td>MONTH</td>    <td>获取指定日期中的月份</td>  </tr>  <tr>    <td>MONTHNAME</td>    <td>获取指定日期中的月份英文名称</td>  </tr>  <tr>    <td>DAYNAE</td>    <td>获取指定日期对应的星期几的英文名称</td>  </tr>  <tr>    <td>DAYOFWEEK</td>    <td>获取指定日期对应的一周的索引位置值</td>  </tr>  <tr>    <td>WEEK</td>    <td>获取指定日期是一年中的第几周，返回值的范围是否为0~52或者1~53</td>  </tr>  <tr>    <td>DAYOFYEAR</td>    <td>获取指定日期是一年中的第几天，返回值范围是1~366</td>  </tr>  <tr>    <td>DAYOFMONTH</td>    <td>获取指定日期是一个月中的第几天，返回值是1~31</td>  </tr>  <tr>    <td>YEAR</td>    <td>获取年份，返回值范围是1970~2069</td>  </tr>  <tr>    <td>TIME_TO_SEC</td>    <td>将时间参数转换为秒数</td>  </tr>  <tr>    <td>SEC_TO_TIME</td>    <td>将秒数转换为时间，与TIME_TO_SEC互为反函数</td>  </tr>  <tr>    <td>DATE_ADD和ADDDATE</td>    <td>两个函数功能相同，都是向日期添加指定的时间间隔</td>  </tr>  <tr>    <td>DATE_SUB和SUBDATE</td>    <td>两个函数功能相同，都是向日期减去指定的时间间隔</td>  </tr>  <tr>    <td>ADDTIME</td>    <td>时间加法运算，在原始时间上添加指定的时间</td>  </tr>  <tr>    <td>SUBTIME</td>    <td>时间减法运算，在原始时间上减去指定时间</td>  </tr>  <tr>    <td>DATEDIFF</td>    <td>获取两个日期之间间隔，返回参数1减去参数2的值</td>  </tr>  <tr>    <td>DATE_FORMAT</td>    <td>格式化指定的日期，根据参数返回指定格式的值</td>  </tr>  <tr>    <td>WEEKDAY</td>    <td>获取指定日期在一周内的对应的工作日索引</td>  </tr></table><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><table>  <tr>    <th>函数名称</th>    <th>作用</th>  </tr>  <tr>    <td style="color:red;font-weight:bolder;">MAX</td>    <td>查询 <span style="color:red;font-weight:bolder;">指定列的最大值</span></td>  </tr>  <tr>    <td style="color:red;font-weight:bolder;">MIN</td>    <td>查询 <span style="color:red;font-weight:bolder;">指定列的最小值</span></td>  </tr>  <tr>    <td style="color:red;font-weight:bolder;">COUNT</td>    <td><span style="color:red;font-weight:bolder;">统计查询结果的行数</span></td>  </tr>  <tr>    <td style="color:red;font-weight:bolder;">SUM</td>    <td>求和，返回 <span style="color:red;font-weight:bolder;">指定列的总和</span></td>  </tr>  <tr>    <td style="color:red;font-weight:bolder;">AVG</td>    <td>求平均值，返回 <span style="color:red;font-weight:bolder;">指定列数据的平均值</span></td>  </tr></table><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><h2 id="常用工具-mysql"><a href="#常用工具-mysql" class="headerlink" title="常用工具 - mysql"></a>常用工具 - mysql</h2><h2 id="常用工具-mysqladmin"><a href="#常用工具-mysqladmin" class="headerlink" title="常用工具 - mysqladmin"></a>常用工具 - mysqladmin</h2><h2 id="常用工具-mysqlbinlog与mysqldump"><a href="#常用工具-mysqlbinlog与mysqldump" class="headerlink" title="常用工具 - mysqlbinlog与mysqldump"></a>常用工具 - mysqlbinlog与mysqldump</h2><h2 id="常用工具-mysqlimport与source"><a href="#常用工具-mysqlimport与source" class="headerlink" title="常用工具 - mysqlimport与source"></a>常用工具 - mysqlimport与source</h2><h2 id="常用工具-mysqlshow"><a href="#常用工具-mysqlshow" class="headerlink" title="常用工具 - mysqlshow"></a>常用工具 - mysqlshow</h2><h2 id="日志-错误日志"><a href="#日志-错误日志" class="headerlink" title="日志 - 错误日志"></a>日志 - 错误日志</h2><h2 id="日志-二进制日志（statement）"><a href="#日志-二进制日志（statement）" class="headerlink" title="日志 - 二进制日志（statement）"></a>日志 - 二进制日志（statement）</h2><h2 id="日志-二进制日志（row及日志删除）"><a href="#日志-二进制日志（row及日志删除）" class="headerlink" title="日志 - 二进制日志（row及日志删除）"></a>日志 - 二进制日志（row及日志删除）</h2><h2 id="日志-查询日志"><a href="#日志-查询日志" class="headerlink" title="日志 - 查询日志"></a>日志 - 查询日志</h2><h2 id="日志-慢查询日志"><a href="#日志-慢查询日志" class="headerlink" title="日志 - 慢查询日志"></a>日志 - 慢查询日志</h2><h2 id="复制-原理"><a href="#复制-原理" class="headerlink" title="复制 - 原理"></a>复制 - 原理</h2><h2 id="案例-需求及环境准备"><a href="#案例-需求及环境准备" class="headerlink" title="案例 - 需求及环境准备"></a>案例 - 需求及环境准备</h2><h2 id="案例-基本工程导入"><a href="#案例-基本工程导入" class="headerlink" title="案例 - 基本工程导入"></a>案例 - 基本工程导入</h2><h2 id="案例-AOP记录日志"><a href="#案例-AOP记录日志" class="headerlink" title="案例 - AOP记录日志"></a>案例 - AOP记录日志</h2><h2 id="案例-日志查询后端-mapper接口"><a href="#案例-日志查询后端-mapper接口" class="headerlink" title="案例 - 日志查询后端 - mapper接口"></a>案例 - 日志查询后端 - mapper接口</h2><h2 id="案例-日志查询后端-Service-amp-Controller"><a href="#案例-日志查询后端-Service-amp-Controller" class="headerlink" title="案例 - 日志查询后端 - Service&amp;Controller"></a>案例 - 日志查询后端 - Service&amp;Controller</h2><h2 id="案例-日志查询-前端"><a href="#案例-日志查询-前端" class="headerlink" title="案例 - 日志查询 - 前端"></a>案例 - 日志查询 - 前端</h2><h2 id="案例-系统性能优化分析"><a href="#案例-系统性能优化分析" class="headerlink" title="案例 - 系统性能优化分析"></a>案例 - 系统性能优化分析</h2><h2 id="案例-系统性能优化-分页优化"><a href="#案例-系统性能优化-分页优化" class="headerlink" title="案例 - 系统性能优化 - 分页优化"></a>案例 - 系统性能优化 - 分页优化</h2><h2 id="案例-系统性能优化-索引优化"><a href="#案例-系统性能优化-索引优化" class="headerlink" title="案例 - 系统性能优化 - 索引优化"></a>案例 - 系统性能优化 - 索引优化</h2><h2 id="案例-系统性能优化-读写分离概述"><a href="#案例-系统性能优化-读写分离概述" class="headerlink" title="案例 - 系统性能优化 - 读写分离概述"></a>案例 - 系统性能优化 - 读写分离概述</h2><h2 id="案例-系统性能优化-数据源配置"><a href="#案例-系统性能优化-数据源配置" class="headerlink" title="案例 - 系统性能优化 - 数据源配置"></a>案例 - 系统性能优化 - 数据源配置</h2><h2 id="案例-系统性能优化-AOP切换数据源"><a href="#案例-系统性能优化-AOP切换数据源" class="headerlink" title="案例 - 系统性能优化 - AOP切换数据源"></a>案例 - 系统性能优化 - AOP切换数据源</h2><h2 id="案例-系统性能优化-AOP切换数据源-测试"><a href="#案例-系统性能优化-AOP切换数据源-测试" class="headerlink" title="案例 - 系统性能优化 - AOP切换数据源 - 测试"></a>案例 - 系统性能优化 - AOP切换数据源 - 测试</h2><h2 id="案例-系统性能优化-AOP切换数据源-原理解析"><a href="#案例-系统性能优化-AOP切换数据源-原理解析" class="headerlink" title="案例 - 系统性能优化 - AOP切换数据源 - 原理解析"></a>案例 - 系统性能优化 - AOP切换数据源 - 原理解析</h2><h2 id="案例-系统性能优化-应用优化"><a href="#案例-系统性能优化-应用优化" class="headerlink" title="案例 - 系统性能优化 - 应用优化"></a>案例 - 系统性能优化 - 应用优化</h2>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 数据库优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全面深入讲解MySQL数据库优化02</title>
      <link href="/2020/05/29/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%9602/"/>
      <url>/2020/05/29/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%9602/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;seid=13531213796559959972" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;seid=13531213796559959972</a>  </p><p>本课程作为MySQL高级课程，主要讲解了：  </p><ul><li><strong>MySQL</strong>中的<strong>视图</strong>/<strong>存储过程</strong>/<strong>触发器</strong>/<strong>索引</strong>等对象的使用</li><li>常见的<strong>SQL</strong>语句<strong>优化</strong>的技巧</li><li><strong>应用优化</strong></li><li><strong>数据库优化</strong></li><li><strong>数据库日志</strong></li></ul><p>等方面的知识，并通过综合案例，对课程中的知识进行一个整合应用。  </p><p>本课程旨在通过MySQl高级部分内容，可以在满足现有业务需求基础上，对<strong>MySQL底层的体系结构</strong>，及<strong>底层的优化</strong>有一个深入的理解，对<strong>系统的整体性能</strong>进行提升。  </p><h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><blockquote><p>Mysql高级-day02</p></blockquote><p>1） MySql的体系结构概览（MySQL内部原理，内部执行流程有一个认识）<br>2） <strong>存储引擎</strong>（InnoDB以及MyISAM）<br>3） <strong>优化SQL</strong>步骤（从哪些方面以及参考指标）<br>4） <strong>索引的使用</strong>（在<strong>SQL优化</strong>中如何使用）<br>5） <strong>SQL优化</strong>  </p><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><h3 id="MySQL的体系结构概览"><a href="#MySQL的体系结构概览" class="headerlink" title="MySQL的体系结构概览"></a>MySQL的体系结构概览</h3><p><strong>MySQL的体系结构</strong>图和在进行<strong>Web开发的三层架构</strong>是相类似的；  </p><p><strong>Web开发时的三层架构</strong>：<br><strong>（1）</strong> 前端发起请求先到达controller；<br><strong>（2）</strong> controller调service；service调用dao;<br><strong>（3）</strong> dao再去访问数据库；  </p><p>mysql的体系结构当中，首先最上面的部分<strong>Connectors</strong>实际上代表的就相当于是<strong>客户端</strong>；<br>在客户端连接当中Natice C API，JDBC，ODBC,.NET，PHP,Perl，Python，Ruby，Cobol这些个；<br>JDBC就很熟悉了；在Java程序当中可以通过JDBC来进行操作mysql；<br>所以最上面部分即mysql连接的客户端通过JDBC来进行操作；<br>然后紧接着中层即MySQL Server；  </p><p>MySQL Server当中最上面一层即<strong>Connection Pool连接池</strong>；<br>在连接池当中有很多的组件模块Authentication、Thread Reuse、Connection Limits、Check Memory、Caches；<br>也就是客户端发起一个连接；<br>这个连接就会到<strong>MySQL Server的这个Connection Pool连接池当中</strong>来进行<strong>获取一个连接 来 执行 对应的请求</strong>；<br>当然，在MySQL Server的Connection Pool进行获取连接的时候还需要进行认证、连接最大数、缓存等相关操作；<br>此为MySQL Server的第一层连接层；<br>连接层主要负责的就是客户端发起一个请求，<br>MySQL Server接收到这个请求之后，开启一段线程进行与客户端请求相关的操作；<br>这是连接层；  </p><p>MySQL Server当中的第二层即Management Services &amp; Utillties、SQL Interface、Parser、Optimizer、Caches &amp; Buffers 这一部分；<br>MySQL Server第二层当中有很多的组件；<br>其中第一个（第一个模块）即MySQL的管理服务以及一些工具；管理层Management Services当中可以进行数据的备份与恢复以及集群安全以及系统配置相关的内容（Backup &amp; Recovery，Security，Replication，Cluster，Administrator，Configuration，Migration &amp; Metadata）<br>第二层的第二个模块：SQL Interface即SQL的一个接口，在此当中可以去进行执行或者是去封装DML、DDL语句以及存储过程、存储函数、视图、触发器等等相关数据库对象（DML、DDL、Stored Procedures，Views ，Triggers ，etc.）</p><p>第二层的第三个模块即：Parser，Parser就是一个解析器，这个解析器解析的是客户端发起的一个请求，客户端发起的这个请求就是SQL语句，SQL语句需要经过这个解析器Parser的解析，解析之后并且在这一块进行相关的过滤（Query Translation,Object Privilege）  </p><p>解析完成之后，在MySQL的内部还需要几个过程；<br>第二层的第四个模块：Optimizer，这个过程实际上称作优化器；即在解析完成了前端请求过来的SQL语句并进行相关的过滤之后，MySQL内部还须要通过其内部的一个优化器，对前端请求来的SQL语句解析并过滤后进行一个优化处理；MySQL内部会按照其内部自己的一个优化体系来进行优化（Access Paths，Statistics）  </p><p>当优化完成之后，接下来还需要进行缓存的一个操作：<br>第二程的第五个模块：Caches &amp; Buffers，即查询在缓存当中有没有要查询的数据；如果存在有对应的树据信息，那么这个时候可能就直接返回给前端客户端了；（Global and Engine ，Specific Caches &amp; Buffers）  </p><p>所以第二层当中的这五个模块就是MySQL的服务层操作；即将前端请求的SQL语句进行封装起来并且进行解析以及相关过滤，以及对其进行优化，最终还需要操作MySQL当中的缓存区的信息；  </p><p>MySQL Server的第三层：Pluggable Storage Engines(Memory，Index &amp; Storage Management)，此处实际指的是存储引擎；<br>Pluggable插件式的存储引擎；<br>以下是MySQL当中的存储引擎:<br>（MyISAM、InnoDB、NDB、Archive、Federated、Memory、Merge、Partner、Community、Custom ….）<br>MySQL版本5.5之后默认的存储引擎即为InnoDB；<br>引擎：发动机；<br>存储引擎是什么？（与飞机上的引擎比较类似，比如客机则有客机的引擎，客机即运送乘客、旅客；但是还有对应的货机，那么货机即对应的即运输货物的；还有直升机等等；不同的飞机有不同的飞机引擎；不同的飞机引擎在相对应的机型当中都发挥着不同的作用；在操作的时候需要考虑到，用户是什么，然后去考虑更适合哪一种引擎，对应的发动机；同样对于mysql的存储引擎是一个道理；存储引擎则需要根据存储的数据不同或者是需求不同而选择不同的存储引擎来进行存储不同的数据；）<br>MySQL Server的第三层为存储引擎层；  </p><p>MySQL Server的第四层即存储层：File system（NTFS，ufs，ext2/3，NFS，SAN，NAS）<br>Files &amp; Logs（Redo，Undo，Data，Index，Binary，Error，Query and Slow）<br>在操作MySQL数据库中表当中的数据的时候，不管是插入还是查询或者修改删除等操作；实际上最终都是操作的File system即文件系统；最终操作的都是文件系统当中的文件；而这个文件系统即就处于磁盘当中；所以最下面一层就文件系统；最重要操作的也就是文件系统；除了在表结构当中的数据，还有对应的索引信息、二进制错误、查询、慢查询日志等；  </p><p>此为MySQL体系结构当中的四层；  </p><p>第一层连接层；负责接收客户端的发送的请求；然后MySQL Server开启一段线程进行相关的认证授权之后再来进行请求的处理；<br>第二层服务层：服务层在主要起到备份恢复、SQL封装、解析过滤、SQL语句优化、缓存查询等相关操作；<br>第三层存储引擎层，选择合适的存储引擎对相关数据进行相关的处理；<br>第四层文件系统：当第三层的数据进行相关的处理完成之后，则需要将数据最终写入文件系统当中，即实际的物理磁盘当中；</p><p>整个MySQL由以下组成：  </p><ul><li>Connection Pool：连接池组件</li><li>Management Service &amp; Utillties: 管理服务和工具组件</li><li>SQL Interface: SQL接口组件</li><li>Parser: 查询分析器组件</li><li>Optimizer: 优化器组件</li><li>Caches &amp; Buffers: 缓冲池组件</li><li>Pluggable Storage Engines: 存储引擎</li><li>File System: 文件系统</li></ul><ol><li>连接层<br>最上层是一些客户和连接服务，包含本地socket通信和大多数基于客户端/服务端工具实现的类似于TCP/IP的通信。<br>主要完成一些类似于连接处理、授权认证、以及相关的安全方案。<br>在该层上引入了线程池的概念，未通过认证安全接入的客户端提供线程。<br>同样在该层上可以实现基于SSL的安全连接，服务器也会为安全接入的每个客户端验证它所具有的的操作权限；  </li><li>服务层<br>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。<br>所有跨存储引擎的功能也在这一层实现，如过程、函数等。<br>在该层，服务器会解析查询并创建相应的内部解析树，并对其完成响应的优化如确定表的查询顺序，是否利用索引等，最后生成响应的执行操作。<br>如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。  </li><li>引擎层<br>存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。<br>不同的存储引擎具有不同的功能，这样可以根据自己的需要，来选取合适的存储引擎；  </li><li>存储层<br>数据存储层，主要是将数据存储在文件系统之上，并完成与存储引擎的交互；  </li></ol><p>和其它数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。<br>主要体现在存储引擎上，插件式的存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离。<br>这种架构可以根据业务的需求和实际需要选择合适的存储引擎；  </p><h2 id="存储引擎-概述"><a href="#存储引擎-概述" class="headerlink" title="存储引擎 - 概述"></a>存储引擎 - 概述</h2><p>和大多数的数据库不同，MySQL中有一个存储引擎的概念，针对不同的存储需求可以选择最优的存储引擎；<br>存储引擎就是存储数据，建立索引，更新查询数据等等技术的实现方式。<br>存储引擎是基于表的，而不是基于库的。<br>索引存储引擎也可被称为表类型。<br>Oracle、SQLServer等数据库只有一种存储引擎。<br>MySQL提供了插件式的存储引擎架构。<br>索引MySQl存在多种存储引擎，可以根据需要使用相应引擎，或者编写存储引擎。<br>MySQL5.0支持的存储引擎包含：InnoDB、MyISAM、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED等，其中InnoDB和BDB提供食物安全表，其他存储引擎是非事务安全表；<br>可以通过指定 show engines，来进行查询当前数据库支持的存储引擎；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">engines</span>;</span><br></pre></td></tr></table></figure><p>创建新表时，如果不指定存储引擎，那么系统就会使用默认的存储引擎。<br>MySQL5.5之前的默认存储引擎是MyISAM，5.5之后就改为InnoDB；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p <span class="comment">#连接mysql</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">engines</span>;</span><br><span class="line"><span class="comment"># Engine 存储引擎的名字</span></span><br><span class="line"><span class="comment"># Support 是否支持该存储引擎，YES/NO/DEFAULT，DEFAULT默认，默认支持的存储引擎InnoDB</span></span><br><span class="line"><span class="comment"># comment 注释</span></span><br></pre></td></tr></table></figure><blockquote><p>Comment注释</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MyISAM : MyISAM <span class="keyword">storage</span> engines</span><br><span class="line">MRG_MYISAM : COLLECTION <span class="keyword">OF</span> IDENTICAL MyISAM <span class="keyword">tables</span></span><br><span class="line">MEMORY : Hash based,stored <span class="keyword">in</span> memory,useful <span class="keyword">for</span> <span class="keyword">temporary</span> <span class="keyword">tables</span></span><br><span class="line">BLACKHOLE : /dev/<span class="keyword">null</span> <span class="keyword">storage</span> engine (anything you wirte <span class="keyword">to</span> it disappears)</span><br><span class="line">CSV : CSV <span class="keyword">storage</span> engine</span><br><span class="line">PERFIRMANCE_SCHEMA : Performance <span class="keyword">Schema</span></span><br><span class="line">ARCHIVE : Archive <span class="keyword">storage</span> engine</span><br><span class="line">FEDERATED ： Federated MySQL <span class="keyword">storage</span> engine</span><br><span class="line">InnoDB ： Support <span class="keyword">transaction</span>,<span class="keyword">row</span>-<span class="keyword">level</span> locking, <span class="keyword">and</span> <span class="keyword">foreign</span> keys # 支持事务，支持行级锁并且支持外键</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看数据库当中的词汇？</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%storage_engine%'</span>;</span><br><span class="line"></span><br><span class="line">default_storage_engine InnoDB</span><br><span class="line">default_tmp_storage_engine InnoDB</span><br><span class="line">storage_engine InnoDB</span><br></pre></td></tr></table></figure><h2 id="存储引擎-特性"><a href="#存储引擎-特性" class="headerlink" title="存储引擎 - 特性"></a>存储引擎 - 特性</h2><p>下面重点介绍几种常用的存储引擎，并对比各个存储引擎之间的区别，如下表所示：  </p><table>    <tr>      <th>特点</th>      <th style="background-color:lightblue;color:red;font-weight:bolder;">InnoDB</th>      <th style="background-color:lightblue;color:red;font-weight:bolder;">MyISAM</th>      <th>MEMORY</th>      <th>MERGE</th>      <th>NDB</th>    </tr>    <tr>      <td>存储限制</td>      <td>64TB</td>      <td>有</td>      <td>有</td>      <td>没有</td>      <td>有</td>    </tr>    <tr>      <td style="background-color:lightblue;color:red;font-weight:bolder;">事务安全</td>      <td>支持</td>      <td></td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <td style="background-color:lightblue;color:red;font-weight:bolder;">锁机制</td>      <td style="background-color:lightgreen;color:red;font-weight:bolder;">行锁（适合高并发）</td>      <td style="background-color:lightgreen;color:red;font-weight:bolder;">表锁</td>      <td>表锁</td>      <td>表锁</td>      <td>行锁</td>    </tr>    <tr>      <td>B树索引</td>      <td>支持</td>      <td>支持</td>      <td>支持</td>      <td>支持</td>      <td>支持</td>    </tr>    <tr>      <td>哈希索引</td>      <td>（当前我看到的是支持的）</td>      <td></td>      <td>支持</td>      <td></td>      <td></td>    </tr>    <tr>      <td>全文索引</td>      <td>支持（5.6版本之后）</td>      <td>支持</td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <td>集群索引</td>      <td>支持</td>      <td></td>      <td></td>      <td></td>      <td></td>    </tr>    <tr>      <td>数据索引</td>      <td>支持</td>      <td></td>      <td>支持</td>      <td></td>      <td>支持</td>    </tr>     <tr>      <td>索引缓存</td>      <td>支持</td>      <td>支持</td>      <td>支持</td>      <td>支持</td>      <td>支持</td>    </tr> <tr>      <td>数据可压缩</td>      <td></td>      <td>支持</td>      <td></td>      <td></td>      <td></td>    </tr> <tr>      <td>空间使用</td>      <td>高</td>      <td>低</td>      <td>N/A</td>      <td>低</td>      <td>低</td>    </tr> <tr>      <td>内存使用</td>      <td>高</td>      <td>低</td>      <td>中等</td>      <td>低</td>      <td>高</td>    </tr>     <tr>      <td>批量插入速度</td>      <td>低</td>      <td>高</td>      <td>高</td>      <td>高</td>      <td>高</td>    </tr>     <tr>      <td style="background-color:lightblue;color:red;font-weight:bolder;">支持外键</td>      <td style="background-color:lightgreen;color:red;font-weight:bolder;">支持</td>      <td></td>      <td></td>      <td></td>      <td></td>    </tr></table><p>下面将重点介绍最常使用的两种存储引擎：InnoDB、MyISAM，另外两种MEMORY、MERGE，了解即可；  </p><h2 id="存储引擎-InnoDB特性"><a href="#存储引擎-InnoDB特性" class="headerlink" title="存储引擎 - InnoDB特性"></a>存储引擎 - InnoDB特性</h2><p>InnoDB存储引擎是MySQL的默认存储引擎。<br>InnoDB存储引擎提供了具有提交、回滚、崩溃恢复能力的事务安全。<br>但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些，并且会占用更多的磁盘空间以保留数据和索引；  </p><p>InnoDB存储引擎不同于其他存储引擎的特点：  </p><p><strong>事务控制</strong></p><p>MySQL 当中事务默认自动提交；  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create database demo_02<span class="built_in"> default </span><span class="attribute">charset</span>=utf8mb4;  </span><br><span class="line">use demo_01;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table goods_innodb(</span><br><span class="line">  id int(11) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  name varchar(20) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  primary key(id)</span><br><span class="line">)<span class="attribute">ENGINE</span>=innodb<span class="built_in"> default </span><span class="attribute">charset</span>=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> goods_innodb(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Meta20'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>;<span class="comment"># 如不提交，则其他客户端无法查看得到插入的数据；</span></span><br><span class="line"><span class="comment"># MySQL默认的隔离级别为可重复读</span></span><br></pre></td></tr></table></figure><p><strong>外键约束</strong></p><p>MySQL支持外键的存储引擎只有InnoDB，在创建外键的时候，要求父表必须有对应的索引，子表在创建索引的时候，也会自动的创建对应的索引；<br>下面两张表中，<br>1） country_innodb是父表，country_id为主键索引；<br>2） city_innodb是子表，country_id字段为外键，对应于country_innodb表中的主键country_id；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> country_innodb(</span><br><span class="line">  country_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  counry_name <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> ,</span><br><span class="line">  primary <span class="keyword">key</span> (country_id)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> city_innodb(</span><br><span class="line">  city_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  city_name <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  country_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  primary <span class="keyword">key</span> (city_id),</span><br><span class="line">  <span class="keyword">key</span> idx_fk_country_id(country_id),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">'fk_city_contry'</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(country_id) <span class="keyword">REFERENCES</span> country_innodb(country_id) <span class="keyword">ON</span> DFLETE RESTRICT <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ON DELETE RESTRICT 在删除主表数据时，如果有关联记录则不删除</span></span><br><span class="line"><span class="comment"># ON UPDATE CASCADE 更新主表时，如果子表有关联记录，则更新子表记录  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> country_innodb <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'China'</span>),(<span class="literal">null</span>,<span class="string">'America'</span>),(<span class="literal">null</span>,<span class="string">'Japan'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> city_innodb <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Xian'</span>,<span class="number">1</span>),(<span class="literal">null</span>,<span class="string">'NewYork'</span>,<span class="number">2</span>),(<span class="literal">null</span>,<span class="string">'BeiJing'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>在创建索引时，可以指定在删除、更新父表时，对子表进行的相应操作，包括RESTRICT、CASCADE、SET NULL和NO ACTION。<br>RESTRICT和NO ACTION相同，是指限制在子表有关联记录的情况下，父表不能更新；<br>CASCADE表示父表在更新或者删除时，更新或者删除子表对应的记录；<br>SET NULL则表示父表在更新或者删除的时候，子表对应字段被SET NULL。<br>针对上面创建的两个表，子表在外键指定是ON DELETE RESTRICT ON UPDATE CASCADE方式的，那么在主表删除记录的时候，如果子表有对应记录，则不允许删除。主表在更新记录的时候，如果子表有对应记录，则子表也会对应更新；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> country_innodb;<span class="comment">#主表</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city_innodb;<span class="comment">#子表；子表当中的外键country_id指向主表country_innodb当中的主键country_id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> country_innodb <span class="keyword">where</span> country_id=<span class="number">2</span>;</span><br><span class="line"><span class="comment">#此处由于外键关联，所以导致删除报错，无法更新；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> country_innodb <span class="keyword">set</span> country_id=<span class="number">100</span> <span class="keyword">where</span> country_id=<span class="number">1</span>;</span><br><span class="line"><span class="comment">#此时子表当中关联有1；那么说则刚才的子表当中对应country_id也为1 的记录将会进行相应的更新；  </span></span><br><span class="line">查看主表以及子表：  </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> country_innodb;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city_innodb;</span><br></pre></td></tr></table></figure><p><strong>存储方式</strong></p><p>存储方式实际上指的是InnoDB这个存储引擎对应的表在数据库当中以数据文件的存储方式；<br>InnoDB存储表和索引有以下两种方式：  </p><ol><li>使用共享表空间存储，这种方式创建的表的表结构保存在.frm文件中，数据和索引保存在 innodb_data_home_dir和innodb_data_file_path定义的表空间中，可以是多个文件；  </li><li>使用多表空间存储，这种方式存储的表的表结构仍然存在.frm文件中，但是每个表的数据和索引单独保存在.ibd中；</li></ol><h2 id="存储引擎-MyISAM特性"><a href="#存储引擎-MyISAM特性" class="headerlink" title="存储引擎 - MyISAM特性"></a>存储引擎 - MyISAM特性</h2><p>MyISAM不支持事务，也不支持外键，其优势是访问的速度快，对事务的完整性没有要求或者以SELECT、INSERT为主的应用基本上都可以使用这个引擎来创建表，有以下两个比较重要的特点：  </p><p><strong>不支持事务</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods_myisam(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">engine</span>=myisam <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> goods_myisam <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'电脑3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><p>通过测试可以发现，在MyISAM存储引擎中，是没有事务控制的；  </p><p><strong>文件存储方式</strong></p><p>每个MyISAM在磁盘上存储成3个文件，其文件名都和表明相同，但拓展名称分别是：</p><ul><li><strong>.frm</strong> (<strong>存储表定义</strong>)</li><li><strong>.MYD</strong> (MYData，<strong>存储数据</strong>)</li><li><strong>.MYI</strong> (MYIndex，<strong>存储索引</strong>)</li></ul><h2 id="存储引擎-Memory与Merge特性"><a href="#存储引擎-Memory与Merge特性" class="headerlink" title="存储引擎 - Memory与Merge特性"></a>存储引擎 - Memory与Merge特性</h2><p>Memory（内存）存储引擎将表的数据放在内存中。<br>每个MEMORY表实际对应一个磁盘文件，格式是.frm，改文件中只存储表的数据结构，而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表达效率。<br>MEMORY类型的表访问非常的快，因为他的数据是存放在内存中的，并且默认使用HASH索引，但是服务一旦关闭，表中的数据就会丢失；  </p><p>MERGE（合并）存储引擎是一组MyISAM表的组合，这些MyISAM表必须结构完全相同，MERGE表本身并没有存储数据，对MERGE类型的表可以进行查询、更新、删除操作，这些操作实际上是对内部的MyISAM表进行的；  </p><p>对于MERGE类型表的插入操作是通过INSERT_METHOD子句定义插入的表，可以有三个不同的值，使用FIRST或者LAST值使得插入操作被相应的作用在第一或者是最后一个表上，不定义这个子句或者定义为NO，表示不能对这个MERGE表执行插入操作；  </p><p>可以对MERGE表进行DROP操作，但是这个操作知识删除MERGE表的定义，对内部的表是没有任何影响的；  </p><p>MERGE存储引擎与view视图有些类似；  </p><p>下面是一个创建和使用MERGE表的示例：<br>1）创建三个测试表 payment_2006、payment_2007、payment_all，其中payment_all是前两个表的MERGE表；</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">create table order_1990(</span><br><span class="line">  order_id int,</span><br><span class="line">  order_money double(10,2),</span><br><span class="line">  order_address varchar(50),</span><br><span class="line">  primary key (order_id)</span><br><span class="line">)<span class="attribute">engine</span>=myisam<span class="built_in"> default </span><span class="attribute">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line">create table order_1991(</span><br><span class="line">  order_id int,</span><br><span class="line">  order_money double(10,2),</span><br><span class="line">  order_address varchar(50),</span><br><span class="line">  primary key (order_id)</span><br><span class="line">)<span class="attribute">engine</span>=myisam<span class="built_in"> default </span><span class="attribute">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line">create table order_all(</span><br><span class="line">  order_id int,</span><br><span class="line">  order_money double(10,2),</span><br><span class="line">  order_address varchar(50),</span><br><span class="line">  primary key (order_id)</span><br><span class="line">)<span class="attribute">engine</span>=merge  </span><br><span class="line">union = ( order_1990, order_1991 )  </span><br><span class="line"><span class="attribute">INSERT_METHOD</span>=LAST  </span><br><span class="line">default <span class="attribute">charset</span>=utf8;</span><br></pre></td></tr></table></figure><p>2） 分别向两张表中插入记录  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1990 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">100.0</span>,<span class="string">'上海'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1990 <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">100.0</span>,<span class="string">'北京'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1991 <span class="keyword">values</span>(<span class="number">10</span>,<span class="number">100.0</span>,<span class="string">'北京'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1991 <span class="keyword">values</span>(<span class="number">11</span>,<span class="number">100.0</span>,<span class="string">'上海'</span>);</span><br></pre></td></tr></table></figure><p>3） 查询三张表当中的数据：<br>order_1990表中的数据：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> order_1990;</span><br></pre></td></tr></table></figure><p>order_1991表中的数据：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> order_1991;</span><br></pre></td></tr></table></figure><p>order_all表中的数据：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> order_all;</span><br></pre></td></tr></table></figure><h2 id="存储引擎-选择原则"><a href="#存储引擎-选择原则" class="headerlink" title="存储引擎 - 选择原则"></a>存储引擎 - 选择原则</h2><p>在选择存储引擎时，应该选择根据应用系统的特点选择合适的存储引擎。<br>对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合；<br>以下是几种常用的存储引擎的使用环境：  </p><ul><li>InnoDB<ul><li>是MySQL的默认存储引擎，用于事务处理应用程序，支持外键。</li><li>如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询以外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。  </li><li>InnoDB存储引擎除了有效的降低由于删除和更新导致的锁定，还可以确保事务的完整提交和回滚，对于类似于计费系统或者是财务系统等对数据准确性要求比较高的系统，InnoDB是最合适的选择；  </li></ul></li><li>MyISAM<ul><li>如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的；  </li></ul></li><li>MEMORY<ul><li>将所有的数据保存在内存当中RAM，在需要快速定位记录和其他类似数据环境下，可以提供几块的访问。</li><li>MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。  </li><li>MEMORY表通常用于更新不太频繁的小表，用以快速得到访问结果。  </li></ul></li><li>MERGE<ul><li>用于将一些列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用他们。</li><li>MERGE表的优点在于可以突破对单个MyISAM表的大小限制，并且通过将不同的表分布在多个磁盘上，可以有效的改善MERGE表的访问效率，这对于存储诸如数据仓库等VLDB环境十分合适。  </li></ul></li></ul><p>有一个点：就是有没有类似emm，MERGE然后内部基层的表的存储引擎是InnoDB这种的；如果是这种的话；不是有那个什么分库分表什么的？（我不太了解分库分表，乱说的）  </p><h2 id="优化SQL步骤-SQL执行频率"><a href="#优化SQL步骤-SQL执行频率" class="headerlink" title="优化SQL步骤 - SQL执行频率"></a>优化SQL步骤 - SQL执行频率</h2><p>在应用的开发过程中，由于初期数据量小，开发人员写SQL语句时更重视功能上的实现，但是当应用系统正式上线后，随着生产数据的急剧增长，很多SQL语句开始逐渐显露出性能问题，对生产的影响也越来越大，此时这些有问题的SQL语句就成为整个系统性能的瓶颈，因此必须要对它们进行优化，本章将详细介绍MySQL中优化SQL语句的方法。  </p><p>当面对一个有SQL性能问题的数据库时，应该从何处入手来进行系统的分析，使得能够尽快定位问题SQL并尽快解决问题。  </p><h3 id="查看SQL执行频率"><a href="#查看SQL执行频率" class="headerlink" title="查看SQL执行频率"></a>查看SQL执行频率</h3><p>MySQL客户端连接成功后，通过 <strong>show [ session | global ] status</strong> 命令可以提供<strong>服务器状态信息</strong>。<br><strong>show [ session | global ] status</strong> 可以根据需要加上参数 <strong>“session”</strong> 或者 <strong>“global”</strong> 来显示 <strong>session级</strong>（当前连接）的统计结果和 <strong>global级</strong>（自数据库上次启动至今）的统计结果。<br>如果不写，<strong>默认使用参数是“session”</strong>。  </p><p>下面的命令显示了当前session中所有统计参数的值：</p><blockquote><p>针对<strong>数据库</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Com_______'</span>; <span class="comment"># _ 占位字符，匹配的模糊字符 查询级别为session会话级别</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Com_______'</span>; <span class="comment"># _ 匹配的模糊字符 查询级别为global全局级别</span></span><br><span class="line"></span><br><span class="line">Com_binlog</span><br><span class="line">Com_commit</span><br><span class="line">Com_delete <span class="comment">#删除的次数</span></span><br><span class="line">Com_insert <span class="comment">#插入的次数</span></span><br><span class="line">Com_repair</span><br><span class="line">Com_select <span class="comment">#查询的次数</span></span><br><span class="line">Com_revoke</span><br><span class="line">Com_signal</span><br><span class="line">Com_update <span class="comment">#修改的次数</span></span><br><span class="line">Com_xa_end</span><br><span class="line"></span><br><span class="line"><span class="comment">#此时查询的为当前连接session的信息，并非为整个数据库全局的统计参数</span></span><br><span class="line"><span class="comment">#如果需要查询全局则：show global status like 'Com_______';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过知道当前数据库当中是以查询为主还是增删改为主；为SQL优化提供借鉴性指标</span></span><br></pre></td></tr></table></figure><p>Com_xxx表示每个xxx语句<strong>执行的次数</strong>，通常比较关心的是以下几个统计参数</p><table>  <tr>    <th>参数</th>    <th>含义</th>  </tr>  <tr>    <td>Com_select</td>    <td>执行select操作的次数，一次查询只累加1</td>  </tr>  <tr>    <td>Com_insert</td>    <td>执行INSERT操作的次数，对于批量插入的INSERT操作，只累加一次</td>  </tr>  <tr>    <td>Com_update</td>    <td>执行UPDATE操作的次数</td>  </tr>  <tr>    <td>Com_delete</td>    <td>执行DELETE操作的次数</td>  </tr>  <tr>    <td>Innodb_rows_read</td>    <td>select查询返回的行数</td>  </tr>  <tr>    <td>Innodb_rows_inserted</td>    <td>执行INSERT操作插入的行数</td>  </tr>  <tr>    <td>Innodb_rows_updated</td>    <td>执行UPDATE操作更新的行数</td>  </tr>  <tr>    <td>Innodb_rows_deleted</td>    <td>执行DELETE操作删除的行数</td>  </tr>  <tr>    <td>Connections</td>    <td>视图连接MySQL服务器的次数</td>  </tr>  <tr>    <td>Uptime</td>    <td>服务器工作时间</td>  </tr>  <tr>    <td>Slow_queries</td>    <td>慢查询的次数</td>  </tr></table><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Com_*** : 这些参数对于所有存储引擎的表操作都会进行累计</span><br><span class="line">Innodb_** : 这几个参数只是针对<span class="type">Innodb</span>存储引擎的，累加的算法也略有不同。</span><br></pre></td></tr></table></figure><blockquote><p>针对<strong>InnoDB存储引擎</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">针对于InnoDB：  </span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Innodb_rows_%'</span>;<span class="comment"># 此时查询出来的为InnoDB的各个操作所影响的行，数量</span></span><br><span class="line"></span><br><span class="line">Innodb_rows_deleted 2 <span class="comment"># 该存储引擎中删去的行数</span></span><br><span class="line">Innodb_rows_inserted 49<span class="comment"># 该存储引擎中插入的行数</span></span><br><span class="line">Innodb_rows_read 380<span class="comment"># 该存储引擎中读取的行数</span></span><br><span class="line">Innodb_rows_updated 15<span class="comment"># 更新的行数</span></span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="keyword">use</span> demo_01l</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> goods_innodb; <span class="comment"># Innodb_rows_read此时会增加，查询出来的结果集有n条记录，则Innodb_rows_read增加n</span></span><br><span class="line"></span><br><span class="line">Innodb_rows_deleted 2 <span class="comment"># 该存储引擎中删去的行数</span></span><br><span class="line">Innodb_rows_inserted 49<span class="comment"># 该存储引擎中插入的行数</span></span><br><span class="line">Innodb_rows_read 382<span class="comment"># 该存储引擎中读取的行数</span></span><br><span class="line">Innodb_rows_updated 15<span class="comment"># 更新的行数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> goods_innodb <span class="keyword">set</span> <span class="keyword">name</span> =<span class="string">'Meta30'</span>; <span class="comment"># Innodb_rows_update此时会增加；修改影响n条记录，则Innodb_rows_update增加n;</span></span><br><span class="line"></span><br><span class="line">Innodb_rows_deleted 2 <span class="comment"># 该存储引擎中删去的行数</span></span><br><span class="line">Innodb_rows_inserted 49<span class="comment"># 该存储引擎中插入的行数</span></span><br><span class="line">Innodb_rows_read 382<span class="comment"># 该存储引擎中读取的行数</span></span><br><span class="line">Innodb_rows_updated 17<span class="comment"># 更新的行数</span></span><br></pre></td></tr></table></figure><h2 id="优化SQL步骤-定位低效SQL"><a href="#优化SQL步骤-定位低效SQL" class="headerlink" title="优化SQL步骤 - 定位低效SQL"></a>优化SQL步骤 - 定位低效SQL</h2><p>可以通过以下<strong>两种方式</strong>定位执行效率较低的SQL语句。  </p><ul><li><strong>慢查询日志</strong>：通过慢查询日志定位那些执行效率较低的SQL语句，用 <strong>–log-slow-queries[ =file_name ]</strong> 选项启动时，mysqld写一个包含所有执行时间超过 <strong>long_query_time</strong> 秒的SQL语句的<strong>日志文件</strong>。</li><li><strong>show processlist</strong> ：<strong>慢查询日志</strong>在 查<strong>询结束以后才记录</strong>，所以在应该 用反映执行效率出现问题的时候 查询慢日志 并不能定位问题，可以使用 <strong>show processlist</strong> 命令查看当前MySQL在进行的线程，包括<strong>线程的状态、是否锁表</strong>等，可以<strong>实时地查看SQL的执行情况</strong>，同时<strong>对一些 锁表操作 进行 优化</strong>。(<strong>实时</strong>)  </li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">show processlist;</span><br><span class="line"></span><br><span class="line"><span class="meta">#（1）id列：用户登录mysql时，系统分配的“connection_id”，可以使用函数connection_id()查看；</span></span><br><span class="line"><span class="meta">#（2）user列：显示当前用户，如果不是root，这个命令就只显示用户权限范围的sql语句；</span></span><br><span class="line"><span class="meta">#（3）host列：显示这个语句是从哪个ip的哪个端口上发的，可以用来跟踪出现问题语句的用户；</span></span><br><span class="line"><span class="meta">#（4）db列：显示这个进程目前连接的是哪个数据库；</span></span><br><span class="line"><span class="meta">#（5）command列：显示当前连接的执行命令，一般取值为休眠（sleep）、查询（query）、连接（connect）等；</span></span><br><span class="line"><span class="meta">#（6）time列，显示这个状态持续的时间，单位是秒；</span></span><br><span class="line"><span class="meta">#（7）state列，显示使用当前连接的sql语句的状态，很重要的列。state描述的是语句执行中的某个状态。一个sql语句，以查询为例，可能需要经过copying to tmp table， sorting result， sending data等状态才可以完成。  </span></span><br><span class="line"><span class="meta">#（8）info列，显示这个sql语句，是判断问题语句的一个重要依据。</span></span><br></pre></td></tr></table></figure><h2 id="优化SQL步骤-explain指令介绍"><a href="#优化SQL步骤-explain指令介绍" class="headerlink" title="优化SQL步骤 - explain指令介绍"></a>优化SQL步骤 - explain指令介绍</h2><p>通过以上步骤查询到效率低的SQL语句后，<br>可以通过 <strong>EXPLAIN</strong> 或者 <strong>DESC</strong> <strong>命令</strong> 获取MySQL如何执行SELECT语句的信息，包括SELECT语句执行过程中表<strong>如何 连接 和 连接 的顺序</strong>。  </p><p>查询SQL语句的执行计划：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_item</td>    <td>const</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>4</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr></table><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="built_in">title</span>=<span class="string">'阿尔卡特（OT-979）冰川白 联通3G手机3'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_item</td>    <td>ALL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>9816098</td>    <td>Using where</td>  </tr></table><table>  <tr>    <th>字段</th>    <th>含义</th>  </tr>  <tr>    <td>id</td>    <td>select查询的序列号，是一组数字，表示的是查询中select子句或者是操作表的顺序。（与表结构执行的顺序有关系）</td>  </tr>  <tr>    <td>select_type</td>    <td>表示SELECT的类型，常见的取值有SIMPLE（简单表，即不使用表连接或者是子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个SELECT）等</td>  </tr>  <tr>    <td>table</td>    <td>输出结果集的表（当前输出的数据与哪一张表有关）</td>  </tr>  <tr>    <td>type</td>    <td>表示表的连接类型，性能由好到差的连接类型为（system---->const---->eq_ref------>ref------->ref_or_null------>index_merge------>index_subquery------->range------>index------>all）</td>  </tr>  <tr>    <td>possible_keys</td>    <td>表示查询时，可能使用的索引。</td>  </tr>  <tr>    <td>key</td>    <td>表示实际使用的索引</td>  </tr>  <tr>    <td>key_len</td>    <td>索引字段的长度</td>  </tr>  <tr>    <td>ref</td>    <td>引用</td>  </tr>  <tr>    <td>rows</td>    <td>扫描行的数量</td>  </tr>  <tr>    <td>extra</td>    <td>执行情况的说明和描述，额外的内容，前面几个字段当中没有表述清楚的，在这个字段当中表述出来</td>  </tr></table><blockquote><p><strong>explain</strong> 用来 <strong>查看 SQL语句 的 执行计划</strong>。</p></blockquote><h2 id="优化SQL步骤-explain之id"><a href="#优化SQL步骤-explain之id" class="headerlink" title="优化SQL步骤 - explain之id"></a>优化SQL步骤 - explain之id</h2><p><strong>环境准备</strong></p><p>用户表、角色表、用户角色表（多对多关系）  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="string">'t_role'</span>(</span><br><span class="line">  <span class="string">'id'</span> varchar(32) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'role_name'</span> varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'role_code'</span> varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'description'</span> varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (<span class="string">'id'</span>),</span><br><span class="line">  UNIQUE KEY <span class="string">'union_role_name'</span> (<span class="string">'role_name'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">'t_user'</span>(</span><br><span class="line">  <span class="string">'id'</span> varchar(32) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'username'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'name'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'password'</span> varchar(96)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (<span class="string">'id'</span>),</span><br><span class="line">  UNIQUE KEY <span class="string">'union_user_username'</span> (<span class="string">'user_name'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">'user_role'</span>(</span><br><span class="line">  <span class="string">'id'</span> int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> autoincrement,</span><br><span class="line">  <span class="string">'user_id'</span> varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'role_id'</span> varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (<span class="string">'id'</span>),</span><br><span class="line">  KEY <span class="string">'fk_ur_user_id'</span>(<span class="string">'user_id'</span>),</span><br><span class="line">  KEY <span class="string">'fk_ur_role_id'</span>(<span class="string">'role_id'</span>),</span><br><span class="line">  CONSTRAINT <span class="string">'fk_ur_role_id'</span> FOREIGN KEY (<span class="string">'role_id'</span>) REFERENCES <span class="string">'t_role'</span> (<span class="string">'id'</span>) ON DELETE <span class="literal">NO</span> ACTION ON UPDATE <span class="literal">NO</span> ACTION,</span><br><span class="line">  CONSTRAINT <span class="string">'fk_ur_user_id'</span> FOREIGN KEY (<span class="string">'user_id'</span>) REFERENCES <span class="string">'t_user'</span> (<span class="string">'id'</span>) ON DELETE <span class="literal">NO</span> ACTION ON UPDATE <span class="literal">NO</span> ACTION</span><br><span class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入用戶数据</span></span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'1'</span>,<span class="string">'老王'</span>,<span class="string">'xxxxxyyyyyyy'</span>,<span class="string">'超级管理员'</span>);</span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'2'</span>,<span class="string">'老李'</span>,<span class="string">'xxxxxyyyyyyyzzzzz'</span>,<span class="string">'系统管理员'</span>);</span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'3'</span>,<span class="string">'老头子'</span>,<span class="string">'xxxxxyyyytyyyzzzzz'</span>,<span class="string">'学生1'</span>);</span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'4'</span>,<span class="string">'老婆子'</span>,<span class="string">'xxxxxyywyyyyyzzzzz'</span>,<span class="string">'学生2'</span>);</span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'5'</span>,<span class="string">'super'</span>,<span class="string">'xxxxxyyfyyyyyzzzzz'</span>,<span class="string">'学生3'</span>);</span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'6'</span>,<span class="string">'admin'</span>,<span class="string">'xxxxxyyyyyyyzzzzze'</span>,<span class="string">'学生4'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入角色数据</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="comment"># 插入用户角色数据</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure><p><strong>explain当中的id字段</strong></p><p>id字段是select查询的序号(并不是自增，控制表结构的执行顺序)，是一组数字，表示是的是处查询中执行select子句或者是操作表的顺序，id情况有三种：<br><strong>（1）</strong> <strong>id相同表示加载表的顺序是从上到下</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_role r,t_user u,user_role ur <span class="keyword">where</span> r.id=ur.role_id <span class="keyword">and</span> u.id=ur.user_id;<span class="comment"># 多表联查</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>r</td>    <td>PRIMARY</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>5</td>    <td>NULL</td>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>ur</td>    <td>ref</td>    <td>fk_ur_user_id,fk_ur_role_id</td>    <td>fk_ur_role_id</td>    <td>99</td>    <td>db03.r.id</td>    <td>1</td>    <td>Using where</td>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>u</td>    <td>eq_ref</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>98</td>    <td>db.ur.user_id</td>    <td>1</td>    <td>NULL</td>  </tr></table><p><strong>（2）</strong> <strong>id不同id值越大，优先级越高，越先被执行</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_role <span class="keyword">WHERE</span> <span class="keyword">id</span>=</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> role_id <span class="keyword">FROM</span> user_role <span class="keyword">WHERE</span> user_id=</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> t_user <span class="keyword">WHERE</span> username=<span class="string">'stu1'</span></span><br><span class="line">  )</span><br><span class="line">)<span class="comment"># 嵌套子查询</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>PRIMARY</td>    <td>t_role</td>    <td>const</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>98</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr>  <tr>    <td>2</td>    <td>SUBQUERY</td>    <td>user_role</td>    <td>ref</td>    <td>fk_ur_user_id</td>    <td>fk_ur_user_id</td>    <td>99</td>    <td>const</td>    <td>1</td>    <td>Using where</td>  </tr>  <tr>    <td>3</td>    <td>SUBQUERY</td>    <td>t_user</td>    <td>const</td>    <td>unique_user_username</td>    <td>unique_user_username</td>    <td>137</td>    <td>const</td>    <td>1</td>    <td>Using index</td>  </tr></table><p><strong>（3）</strong> <strong>id有相同，也有不同，同时存在。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_role r,</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> user_role ur <span class="keyword">WHERE</span> ur.<span class="string">'user_id'</span>=<span class="string">'2'</span></span><br><span class="line">) a  </span><br><span class="line"><span class="keyword">WHERE</span> r.id=a.role_id;  </span><br><span class="line"><span class="comment">#三表查询又连接了一个子查询</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>PRIMARY</td>    <td>< derived2></td>    <td>ALL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>2</td>    <td>Using where</td>  </tr>  <tr>    <td>1</td>    <td>PRIMARY</td>    <td>r</td>    <td>eq_ref</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>98</td>    <td>a.role_id</td>    <td>1</td>    <td>NULL</td>  </tr>  <tr>    <td>2</td>    <td>DERIVED</td>    <td>ur</td>    <td>ref</td>    <td>fk_ur_user_id</td>    <td>fk_ur_user_id</td>    <td>99</td>    <td>const</td>    <td>1</td>    <td>Using index condition</td>  </tr></table><h2 id="优化SQL步骤-explain之select-type"><a href="#优化SQL步骤-explain之select-type" class="headerlink" title="优化SQL步骤 - explain之select_type"></a>优化SQL步骤 - explain之select_type</h2><p><strong>explain之select_type</strong><br>表示<strong>SELECT的类型</strong>，常见的取值，如下表所示（<strong>从上往下</strong>，<strong>效率越来越低</strong>）：  </p><table>  <tr>    <th>select_type</th>    <th>含义</th>  </tr>  <tr>    <td>SIMPLE</td>    <td>简单的select查询，查询中不包含子查询或者UNION。</td>  </tr>  <tr>    <td>PRIMARY</td>    <td>查询中若包含任何复杂的子查询，最外层查询标记为该标识。</td>  </tr>  <tr>    <td>SUBQUERY</td>    <td>在SELECT或者WHERE列表中包含了子查询。</td>  </tr>  <tr>    <td>DERIVED</td>    <td>在FROM列表中包含的子查询，被标记为DERIVED（衍生）MYSQL或递归执行这些子查询，把结果放在临时表中。</td>  </tr>  <tr>    <td>UNION</td>    <td>若第二个SELECT出现在UNION之后，则标记为UNION；若UNION包含在FROM子句的子查询中，外层SELECT将标记为：DERIVED</td>  </tr>  <tr>    <td>UNION RESULT</td>    <td>从UNION表获取结果的SELECT</td>  </tr></table><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item;</span><br><span class="line"># SIMPLE  </span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=(<span class="keyword">select</span> id <span class="keyword">from</span> user_role <span class="keyword">where</span> role_id=<span class="string">'9'</span>);  </span><br><span class="line"># <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id： <span class="keyword">PRIMARY</span> ；  </span><br><span class="line">#(<span class="keyword">select</span> id <span class="keyword">from</span> user_role <span class="keyword">where</span> role_id=<span class="string">'9'</span>)：SUBQUERY  </span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> a.* <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="string">'1'</span>,<span class="string">'2'</span>)) a;</span><br><span class="line"># <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="string">'1'</span>,<span class="string">'2'</span>): <span class="keyword">DERIVED</span>；存储至衍生的临时表</span><br><span class="line"># <span class="keyword">select</span> a.* <span class="keyword">from</span> ： <span class="keyword">PRIMARY</span>  derived2指的是<span class="keyword">derived</span>指的是衍生的表a，<span class="number">2</span>则指的是id，执行操作表顺序字段；</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'1'</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'2'</span>;</span><br><span class="line">#<span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'1'</span>: <span class="keyword">PRIMARY</span></span><br><span class="line">#<span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'2'</span> ： <span class="keyword">UNION</span></span><br><span class="line"># <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'1'</span>的结果  &amp;&amp;  <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'2'</span>的结果联合起来： <span class="keyword">UNION</span> RESULT</span><br></pre></td></tr></table></figure><h2 id="优化SQL步骤-explain之table-、type"><a href="#优化SQL步骤-explain之table-、type" class="headerlink" title="优化SQL步骤 - explain之table 、type"></a>优化SQL步骤 - explain之table 、type</h2><p><strong>explain之table</strong><br>展示这一行的数据是<strong>关于哪一张表</strong>的；  </p><p><strong>explain之type</strong><br><strong>type</strong>显示的是<strong>访问类型</strong>，是较为重要的一个指标，可取值为：  </p><table>  <tr>    <th>type</th>    <th>含义</th>  </tr>  <tr>    <td>NULL</td>    <td>MySQL不访问任何表，索引，直接返回结果</td>  </tr>  <tr>    <td>system</td>    <td>表只有一行记录（等同于系统表），这是const类型的特例，一般不会出现</td>  </tr>  <tr>    <td>const</td>    <td>表示通过索引一次就找到了，const用于比较primary key或者unique索引。因为只匹配一行数据，索引很快。如将主键置于where列表中，MySQL就能将该查询转换成一个常量。(根据主键或者唯一索引进行查询)</td>  </tr>  <tr>    <td>eq_ref</td>    <td>类似ref，区别在于使用的是唯一索引，使用主键的关联查询，关联查询出的记录只有一条。常见于主键或唯一索引扫描</td>  </tr>  <tr>    <td>ref</td>    <td>非唯一性索引扫描，返回皮诶某个单独值的所有行。本质上也是野种索引访问，返回所有匹配某个单独值的所有行（多个）</td>  </tr>  <tr>    <td>range</td>    <td>只检索给定返回的行，使用一个索引来选择行。where之后出现between，<，>，in等操作</，></td>  </tr>  <tr>    <td>index</td>    <td>index与ALL的区别为index类型只是遍历了索引树，通常比ALL快，ALL是遍历数据文件。</td>  </tr>  <tr>    <td>all</td>    <td>将遍历全表以找到匹配的行</td>  </tr></table><p><strong>type为NULL</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> now(); # 查询当前时间(查询效率非常高) ： <span class="keyword">type</span>-&gt;<span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>No tables used</td>  </tr></table><p><strong>type为system</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'1'</span>) a;： <span class="keyword">type</span>-&gt;<span class="keyword">system</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>PRIMARY</td>    <td>< derived2></td>    <td>system</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>1</td>    <td>NULL</td>  </tr>  <tr>    <td>2</td>    <td>DERIVED</td>    <td>t_user</td>    <td>const</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>98</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr></table><p><strong>type为const</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">id</span>=<span class="string">'1'</span>;<span class="comment"># 根据主键查询返回一条记录：type-&gt;const</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>t_user</td>    <td>const</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>98</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr></table><p><strong>type为const</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> username=<span class="string">'stu1'</span>;<span class="comment">#根据唯一索引查询返回一条记录：type-&gt;const</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>t_user</td>    <td>const</td>    <td>unique_user_username</td>    <td>unique_user_username</td>    <td>137</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr></table><p><strong>type为eq_ref</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_user;//id有1、2、3、4、5、6</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_role;//id有10、5、7、8、9</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user u ,t_role r <span class="keyword">where</span> u.id=r.id;<span class="comment">#业务逻辑层面不符合，只是数据库硬性查询（强行关联）出一个type为eq_ref的示例而已</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>r</td>    <td>ALL</td>    <td>PRIMARY</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>5</td>    <td>NULL</td>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>u</td>    <td>eq_ref</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>98</td>    <td>demo_02.r.id</td>    <td>1</td>    <td>NULL</td>  </tr></table><p><strong>type为ref</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> t_user;<span class="comment">#查询t_user表当中的索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_user_name <span class="keyword">on</span> t_user(<span class="string">'name'</span>);</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'a'</span>;<span class="comment">#根据非唯一性索引进行查询，返回的记录只有一条</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_keys</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>t_user</td>    <td>ref</td>    <td>idx_user_name</td>    <td>idx_user_name</td>    <td>137</td>    <td>const</td>    <td>1</td>    <td>Using index condition</td>  </tr></table><p><strong>type为range(范围查询)</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.（between <span class="keyword">and</span>）、（&gt;、&lt;、&gt;=、&lt;=）<span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><p><strong>type为index(指的即索引)</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user;//查询所有数据，进行全表扫描，即到数据文件当中进行读取；<span class="keyword">type</span>为<span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id <span class="keyword">from</span> t_user;//此时<span class="keyword">type</span>为<span class="keyword">index</span>；因为id为主键，主键则走主键索引；</span><br></pre></td></tr></table></figure><p>结果值从最好到最坏依次是：  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">NULL</span> &gt;<span class="built_in"> system </span>&gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; all</span><br></pre></td></tr></table></figure><h2 id="优化SQL步骤-explain之key-rows-extra"><a href="#优化SQL步骤-explain之key-rows-extra" class="headerlink" title="优化SQL步骤 - explain之key rows extra"></a>优化SQL步骤 - explain之key rows extra</h2><p><strong>explain之key</strong>  </p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">possible_keys:</span>显示可能应用在这张表的索引，一个或者多个；</span><br><span class="line"><span class="symbol">key:</span>实际使用的索引，如果为NULL，则没有使用索引；</span><br><span class="line">key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好（越短执行效率越高）；</span><br></pre></td></tr></table></figure><p><strong>explain之rows</strong>  </p><p>扫描行的数量。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="type">name</span> =<span class="string">'a'</span>;#<span class="type">name</span>建了索引，所以查询<span class="keyword">rows</span>为<span class="number">1</span>行</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">password</span>=<span class="string">'aaa'</span>;# <span class="keyword">password</span>没有建立索引，整表扫描；<span class="keyword">rows</span>即<span class="keyword">SQL</span>语句查询时所查询的行数；</span><br></pre></td></tr></table></figure><p><strong>explain之extra</strong>  </p><p><strong>其他的额外的执行计划信息</strong>，在该列展示。<br>（using_filesort以及using_temporary非常耗性能；<br>需要优化using_filesort以及using_temporary；保持using_index）</p><table>  <tr>    <th>extra</th>    <th>含义</th>  </tr>  <tr>    <td>using_filesort</td>    <td>说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取，称为“文件排序”</td>  </tr>  <tr>    <td>using_temporary</td>    <td>使用了临时表保存中间结果，MySQL对查询结果排序时使用临时表。常见于order by 和group by</td>  </tr>  <tr>    <td>using_index</td>    <td>表示相应的select操作使用了覆盖索引，避免访问表的数据行，效率不错。</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>;<span class="comment">#按照id进行排序</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">password</span>;<span class="comment">#根据文件进行排序；即需要扫描文件当中的内容，然后再去进行排序；效率非常低；这个时候如果需要进行优化的话，可以在password字段上与name一样建立索引；</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span>; <span class="comment">#此时依然是using_filesort根据文件排序</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> t_user <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span>;<span class="comment">#此时则使用的是using_index根据索引排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span>;<span class="comment">#此时extra为null，原因是根据name字段建立了索引</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">password</span>;<span class="comment">#此时password字段没有建立索引；extra为using temporary；using filesort效率低；</span></span><br></pre></td></tr></table></figure><h2 id="优化SQL步骤-show-profile"><a href="#优化SQL步骤-show-profile" class="headerlink" title="优化SQL步骤 - show profile"></a>优化SQL步骤 - show profile</h2><p>MySQL从5.0.37版本开始增加了对 <strong>show profiles</strong> 和 <strong>show profile</strong> 语句的支持。  </p><p><strong>show profiles</strong> 能够在做SQL优化时帮助了解时间都耗费到哪里去了；  </p><p>通过 <strong>have_profiling</strong> 参数，能够看到 <strong>当前MySQL 是否支持 profile</strong>；  </p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">select</span> <span class="comment">@@</span>have_profiling;<span class="meta">#系统变量；YES/NO</span></span><br></pre></td></tr></table></figure><p>默认 profiling 是关闭的，可以通过set语句在Session级别开启profiling：  </p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="symbol">@profiling</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> <span class="attribute">profiling</span>=1;# 开启profiling开关；0:未开启；1：开启</span><br></pre></td></tr></table></figure><p>通过profile，能够更清楚的了解SQL执行的过程；<br>首先，可以执行一系列的操作，如下图所示：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> db01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title=<span class="string">'abc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">profiles</span>;<span class="comment">#查看之前每一个操作的耗时情况 query_id(当前查询的id)、duration（执行的耗时时间）、query（查询的sql）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use db01;其实底层即select database();</span></span><br></pre></td></tr></table></figure><p>执行完上述命令之后，再执行show profiles指令，来查看SQL语句执行的耗时：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">profiles</span>;<span class="comment"># query_id、duration、query</span></span><br></pre></td></tr></table></figure><p>通过 show profile for query query_id 语句可以查看到该SQL执行过程中每个线程的状态和消耗的时间；  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show<span class="built_in"> profile </span><span class="keyword">for</span> query 6;#6即通过show profiles查询出来的query_id;  status、duration</span><br></pre></td></tr></table></figure><table>  <tr>    <th>status（经历的每一个阶段）</th>    <th>duration（每一个阶段的耗时情况）</th>  </tr>  <tr>    <td>starting（开启）</td>    <td>0.000046</td>  </tr>  <tr>    <td>checking permissions（校验权限）</td>    <td>...</td>  </tr>  <tr>    <td>opening tables（打开表）</td>    <td>...</td>  </tr>    <tr>    <td>init（初始化）</td>    <td>...</td>  </tr>    <tr>    <td>system lock（系统锁）</td>    <td>...</td>  </tr>    <tr>    <td>optimizing（优化器）</td>    <td>...</td>  </tr>    <tr>    <td>statistics（统计）</td>    <td>...</td>  </tr>    <tr>    <td>perparing（准备）</td>    <td>...</td>  </tr>    <tr>    <td>executing（执行）</td>    <td>...</td>  </tr>    <tr>    <td>sending data（发送数据）</td>    <td>...</td>  </tr>    <tr>    <td>end（结束）</td>    <td>...</td>  </tr>    <tr>    <td>query end（查询结束）</td>    <td>...</td>  </tr>    <tr>    <td>closing tabls（关闭表）</td>    <td>...</td>  </tr>    <tr>    <td>freeing itmes（释放其他项）</td>    <td>...</td>  </tr>    <tr>    <td>cleaning up（清除）</td>    <td>...</td>  </tr></table><p>（select count(*) from tb_item；该sql语句的时间都耗费在sending data上了；）  </p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">TIP:  </span></span><br><span class="line"><span class="code">    Sending data 状态表示MySQL线程开始访问数据行并把结果放回给客户端，而不仅仅是返回给客户端。  </span></span><br><span class="line"><span class="code">    由于Sending data 状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整个查询中耗时最长的状态。</span></span><br></pre></td></tr></table></figure><p>在获取到最耗时时间的线程状态后，MySQL支持进一步选择all、cpu、block io、context switch、page faults 等明细类型等查看MySQL在使用什么资源上耗费了过高的时间。<br>例如，选择查看CPU的耗费时间：  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select<span class="built_in"> profile </span>cpu <span class="keyword">for</span> query 6;# status、duration、CPU_user、CPU_System查询到的是id为6的该条sql语句在各个阶段当中cpu的耗费情况；</span><br><span class="line"></span><br><span class="line">select<span class="built_in"> profile </span>all <span class="keyword">for</span> query 6;# status、duration、CPU_user、CPU_system、context_voluntary、context_involuntary、block_ops_in、block_ops_out、<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure><blockquote><p>通过 <strong>show profile</strong> 可以 <strong>分析SQL语句 各个阶段的 耗时情况</strong></p></blockquote><h2 id="优化SQL步骤-trace工具"><a href="#优化SQL步骤-trace工具" class="headerlink" title="优化SQL步骤 - trace工具"></a>优化SQL步骤 - trace工具</h2><p>mysql的服务端server有一个步骤就是optimizer，优化sql部分；按照mysql当中具体对应的规则对SQL进行优化处理；trace即分析优化器</p><p><strong>trace分析优化器执行计划</strong><br>MySQL5.6提供了对SQL的跟踪 trace，通过trace文件能够进一步了解为什么优化器选择A计划，而不是B计划。  </p><p>打开trace，设置格式为JSON，并设置trace最大能够使用的内存大小，避免解析过程中因为默认内存过小而不能够完整展示。  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">SET</span> optimizer_trace =<span class="string">'enabled=on'</span>, <span class="attribute">end_markers_in_json</span>=on;# optimizer_trace =<span class="string">'enabled=on'</span>进行开启；<span class="attribute">end_markers_in_json</span>=on 设置格式为JSON</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">optimizer_trace_max_mem_size</span>=1000000;# 日志文件占用内存大小</span><br></pre></td></tr></table></figure><p>执行SQL语句：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>最后，检查information_schema.optimizer_trace就可以知道MySQL是如何执行SQL的：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> infomation_schema.optimizer_trace\G;# infomation_schema系统库；optimizer_trace系统库当中的日志表</span><br><span class="line"></span><br><span class="line"># QUERY 查询的SQL语句；<span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> id&lt;<span class="number">4</span>;</span><br><span class="line"># TRACE 跟踪信息；在跟踪信息当中最终<span class="keyword">select</span> * 当中的* 最终解析为tb_item表当中的每一个具体的字段</span><br></pre></td></tr></table></figure><h2 id="索引的使用-验证索引提升查询效率"><a href="#索引的使用-验证索引提升查询效率" class="headerlink" title="索引的使用 - 验证索引提升查询效率"></a>索引的使用 - 验证索引提升查询效率</h2><p><strong>索引的使用</strong><br>索引时候数据库优化最常用也是最重要的手段之一，通过索引通常可以帮助用户解决大多数的MySQL的性能优化问题；  </p><p><strong>验证索引提升查询效率</strong><br>在准备的表结构tb_item中，一共存储了300万条记录；  </p><p><strong>A.</strong> 根据ID查询  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_items;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1888</span>;<span class="comment">#id字段具有主键索引</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1999</span>\G;</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据title进行精确查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title=<span class="string">'阿尔卡特'</span>;<span class="comment">#查询速度慢，因为title字段没有索引，查询效率低，创建主键即自动生成主键索引；</span></span><br><span class="line"><span class="comment">#查看SQL语句的执行计划：  </span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title=<span class="string">'阿尔卡特'</span>\G;</span><br></pre></td></tr></table></figure><p>处理方案，针对title字段，创建索引：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_item_title <span class="keyword">on</span> tb_item(<span class="built_in">title</span>);</span><br></pre></td></tr></table></figure><p>索引创建完成之后，再次查询：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title=<span class="string">'阿尔卡特'</span>\G;</span><br><span class="line"><span class="comment"># 创建索引的过程中，mysql在做什么？表tb_item中有300万条记录，那么在创建索引的时候就会对这300万条记录重建索引；所以此时即数据库底层在重建索引；创建完索引之后再进行查询效率则变快；索引是优化查询最有效的方式之一；</span></span><br></pre></td></tr></table></figure><p>查询速度很快，接近0s，主要的原因是因为id为主键，有索引；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1999</span>\G;</span><br></pre></td></tr></table></figure><p><strong>准备环境</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">'tb_seller'</span>(</span><br><span class="line">  <span class="string">'sellerid'</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="string">'name'</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="string">'nickname'</span> <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  <span class="string">'password'</span> <span class="built_in">varchar</span>(<span class="number">60</span>),</span><br><span class="line">  <span class="string">'status'</span> <span class="built_in">varchar</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="string">'address'</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="string">'createtime'</span> datetime,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="string">'sellerid'</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入记录 导入基本数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_seller <span class="keyword">values</span> ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建联合索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name_sta_addr <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>,<span class="keyword">status</span>,address);</span><br></pre></td></tr></table></figure><p>创建了索引并不是一定会提高效率；创建了索引并且需要合理运用索引才能够提高查询效率；  </p><h2 id="索引的使用-全值匹配"><a href="#索引的使用-全值匹配" class="headerlink" title="索引的使用 - 全值匹配"></a>索引的使用 - 全值匹配</h2><p><strong>避免索引失效</strong>  </p><p><strong>(1)</strong> <strong>全值匹配</strong>，<strong>对索引中所有列都指定具体值</strong>。<br>该情况下，索引生效，执行效率提高。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>\G;</span><br></pre></td></tr></table></figure><h2 id="索引的使用-最左前缀法则"><a href="#索引的使用-最左前缀法则" class="headerlink" title="索引的使用 - 最左前缀法则"></a>索引的使用 - 最左前缀法则</h2><p><strong>避免索引失效</strong>  </p><p><strong>(2)</strong> <strong>最左前缀法则</strong><br>tb_seller创建了一个复合索引即name、status、address这三个字段；<br>如果索引了多列，要遵守<strong>最左前缀法则</strong>。<br>指的是查询<strong>从 索引的最左前列 开始</strong>，<strong>并且 不跳过 索引中的列</strong>。<br><strong>匹配最左前缀法则</strong>，走索引：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">'小米科技'</span>;<span class="comment"># key:idx_name_sta_addr； key_len：403</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'1'</span>;<span class="comment"># key:idx_name_sta_addr； key_len：410</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>;<span class="comment"># key:idx_name_sta_addr； key_len：813</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>;<span class="comment"># key:NULL key_len：NULL 此时则不再走索引；因为不再符合最左前缀法则，没有以最左边的列开始；  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span> <span class="keyword">and</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;<span class="comment"># key:idx_name_sta_addr； key_len：813 此时是走索引的；与where列表当中字段的先后顺序无关；会检查where条件列表中包不包含最左列；而是与复合索引当中的是否存在有复合索引当中的最左字段；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span> ;<span class="comment">#跳过索引列不走索引; key:idx_sellter_name_sta_addr；key_len: 403；此时索引的长度是403；也就是这是执行 explain select * from tb_seller where name ='小米科技'; 时所走的索引；即后面的 and address='北京市' 并未走索引；</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>违反最左前缀法则，索引失效</strong>；<br><strong>需要包含 复合索引当中的最左列</strong>，并且<strong>不能跳过</strong> <strong>复合索引当中的某一列</strong>进行查询否则复合索引失效；</p></blockquote><h2 id="索引的使用-索引失效情况（范围查询、字段运算）"><a href="#索引的使用-索引失效情况（范围查询、字段运算）" class="headerlink" title="索引的使用 - 索引失效情况（范围查询、字段运算）"></a>索引的使用 - 索引失效情况（范围查询、字段运算）</h2><p><strong>避免索引失效</strong>  </p><p><strong>（3）</strong> <strong>范围查询右边的列</strong>，<strong>不能使用索引</strong>；<br>根据前面的两个字段name、status查询是走索引的，但是最后一个条件address没有用到索引。  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">explain select * <span class="keyword">from</span> tb_seller where <span class="attribute">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="attribute">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> <span class="attribute">address</span>=<span class="string">'北京市'</span>;# key:idx_name_sta_addr； key_len：813；此时三个字段name、status、address三个字段都走了索引；  </span><br><span class="line"></span><br><span class="line">explain select * <span class="keyword">from</span> tb_seller where name =<span class="string">'小米科技'</span> <span class="keyword">and</span> status &gt;<span class="string">'1'</span> <span class="keyword">and</span><span class="built_in"> address </span>=<span class="string">'北京市'</span>;# key:idx_name_sta_addr； key_len：410;此时走的索引是name和status字段的索引；而范围查询status&gt;<span class="string">'1'</span>之后的address并没有走索引；  </span><br><span class="line"><span class="comment"># 范围查询之后的索引字段将失效</span></span><br></pre></td></tr></table></figure><p><strong>（4）</strong> 不要在<strong>索引列</strong>上<strong>进行运算操作</strong>，索引将失效；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller  <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;<span class="comment">#此时走索引</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">substring</span>(<span class="keyword">name</span>,<span class="number">3</span>,<span class="number">2</span>)=<span class="string">'科技'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">substring</span>(<span class="keyword">name</span>,<span class="number">3</span>,<span class="number">2</span>)=<span class="string">'科技'</span>;<span class="comment">#此时key为null以及key_len为null；而type为ALL则说明了进行了全表扫描；没有走索引</span></span><br></pre></td></tr></table></figure><p><strong>（5）</strong> <strong>字符串不加单引号</strong>，会造成索引失效；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'0'</span>;<span class="comment"># 此时key:idx_name_sta_addr；key_len：410；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="number">0</span>;<span class="comment"># 此时key：idx_name_sta_addr；key_len：403；索引长度为403；则说明走的索引为name字段的索引；而status字段的索引并没有走；造成了status=0 该索引字段的失效；当status字段取值没有加单引号时，mysql底层检测到status字段为varchar类型所以会对其没有加单引号的取值进行隐式类型转换；隐式类型转换了之后该status索引字段就失效了；因为底层对该字段进行了运算操作；</span></span><br></pre></td></tr></table></figure><h2 id="索引的使用-覆盖索引"><a href="#索引的使用-覆盖索引" class="headerlink" title="索引的使用 - 覆盖索引"></a>索引的使用 - 覆盖索引</h2><p><strong>避免索引失效</strong>  </p><p><strong>（6）</strong> <strong>尽量使用覆盖索引</strong>，<strong>避免使用 select *</strong>  </p><p><strong>尽量使用覆盖索引</strong>（只访问索引的查询（索引列完全包含查询列））， <strong>减少select *</strong> ；  </p><p>如果查询列，<strong>超出索引列</strong>，也会<strong>降低性能</strong>；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">'小米科技'</span>;</span><br><span class="line"><span class="comment"># extra为using index condition指的是：在查询的时候确实用到了name这个字段的索引；</span></span><br><span class="line"><span class="comment">#但是用到了name这个字段的索引信息之后，在返回数据的时候还需要进行索引回调查询；  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">name</span> , <span class="keyword">status</span> ,address <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;</span><br><span class="line"><span class="comment"># 此时extra为using where ;using index；</span></span><br><span class="line"><span class="comment"># 此时表示的是：可以通过索引进行查询；但是此时并不需要进行回调查询了；</span></span><br><span class="line"><span class="comment"># 原因就在于查询的字段在索引结构当中已经被记录了；</span></span><br><span class="line"><span class="comment"># 所以并不需要去进行回调查询；  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">name</span> , <span class="keyword">status</span>  <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>; <span class="comment">#同上</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">name</span> ,  address <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>; <span class="comment">#同上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">name</span> ,  address ,<span class="keyword">password</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;</span><br><span class="line"><span class="comment"># 复合索引当中并未包括password字段则此时name索引字段以及address索引字段当中并没有包括password字段的信息，</span></span><br><span class="line"><span class="comment"># 则此时需要去回调查询password字段的信息；</span></span><br><span class="line"><span class="comment"># 即extra为using index_condition</span></span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">TIP:  </span></span><br><span class="line">索引回调查询指的是：  </span><br><span class="line"><span class="code">    using index : 使用覆盖索引的时候就会出现</span></span><br><span class="line"><span class="code">    using where : 在查找使用索引的情况下，需要回表去查询所需的数据</span></span><br><span class="line"><span class="code">    using index condition ：查找使用了索引，但是需要回表查询数据（从索引当中拿到了数据，然后再到表结构当中去拿到该数据对应的一整行数据，因为该name索引字段并没有记录所有的数据，只是记录了那么字段的数据；所以需要回表查询数据；即用了索引还需要回调查询）</span></span><br><span class="line"><span class="code">    using index ; using where : 查找使用了索引，但是需要的数据都在索引列中能找到，索引不需要回表查询数据</span></span><br></pre></td></tr></table></figure><p><strong>（7）</strong> <strong>in走索引，not in 索引失效</strong></p><h2 id="索引的使用-or索引失效情况"><a href="#索引的使用-or索引失效情况" class="headerlink" title="索引的使用 - or索引失效情况"></a>索引的使用 - or索引失效情况</h2><p><strong>避免索引失效</strong><br>（7）用or分隔开的条件，如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到；  </p><p>示例：name字段是索引列，而createtime不是索引列，中间是or进行连接是不走索引的；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> createtime=<span class="string">'2088-01-01 12:00:00'</span>\G;<span class="comment">#key:idx_name_sta_addr； key_len: 403;此时走索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">or</span> createtime=<span class="string">'2088-01-01 12:00:00'</span>\G;<span class="comment">#key:idx_name_sta_addr； key_len: NULL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> nickname=<span class="string">'小米官方旗舰店'</span>;<span class="comment">#此时走索引；key_len:403;走的是name字段的索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">or</span> nickname=<span class="string">'小米官方旗舰店'</span>;<span class="comment">#换成or之后，nickname字段非索引字段；所以此时将全表扫描；不会走索引；key_len:NULL；以及type为ALL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or之后的字段如果没有索引的话；那么整个where列表当中即便有索引字段也将都失效，不再走索引；</span></span><br></pre></td></tr></table></figure><h2 id="索引的使用-like模糊匹配"><a href="#索引的使用-like模糊匹配" class="headerlink" title="索引的使用 - like模糊匹配"></a>索引的使用 - like模糊匹配</h2><p><strong>避免索引失效</strong>  </p><p><strong>（8）</strong> <strong>以%开头的Like模糊查询</strong>，索引失效。  </p><p>如果仅仅是尾部模糊查询，索引不会失效。<br>如果是头部模糊查询匹配，则索引失效。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">like</span> <span class="string">'小米科技'</span>;#key: idx_name_sta_addr； key_len: <span class="number">403</span>; 此时走索引；索引走的是<span class="type">name</span>字段</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">like</span> <span class="string">'%小米科技'</span>;#key: <span class="keyword">NULL</span>； key_len: <span class="keyword">NULL</span>; 此时不走索引；且<span class="keyword">type</span>为<span class="keyword">ALL</span>；全表扫描</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">like</span> <span class="string">'%小米科技%'</span>;#key: <span class="keyword">NULL</span>； key_len: <span class="keyword">NULL</span>; 此时不走索引；且<span class="keyword">type</span>为<span class="keyword">ALL</span>；全表扫描</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">like</span> <span class="string">'科技%'</span>;#key: idx_name_sta_addr； key_len: <span class="number">403</span>; 此时走索引；索引走的是<span class="type">name</span>字段</span><br></pre></td></tr></table></figure><p>类似 “%科技%” 这种情况在业务逻辑处理当中还是比较多的；但是这样效率将十分低下；所以针对这种情况的处理方式为：<br>覆盖索引：覆盖索引指的是，尽量不要使用select * 这种方式进行查询；而是使用复合索引当中的那些索引列，即索引字段；即复合索引为idx_name_sta_addr，当中包含的索引字段为name、status、address；所以select 查询列名称的时候尽量查询的列名称为复合索引当中的索引列，或者是其他索引的字段（例如唯一索引的索引字段、主键索引的索引字段等）；<br>即通过覆盖索引就可以解决 “%科技%” like模糊查询效率低下的情况（条件是select 查询的字段都需要是索引字段，如果出现了查询非索引字段则将不再走索引）；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> sellerid <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%科技%'</span>;<span class="comment"># 则此时是走索引的；key:idx_seller_name_sta_addr；key_len：813；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> sellerid,<span class="keyword">name</span> <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%科技%'</span>;<span class="comment"># 则此时是走索引的；key:idx_seller_name_sta_addr；key_len：813；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> sellerid,<span class="keyword">name</span>,<span class="keyword">status</span>,address <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%科技%'</span>;<span class="comment"># 则此时是走索引的；key:idx_seller_name_sta_addr；key_len：813；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> sellerid,<span class="keyword">name</span>,<span class="keyword">status</span>,address,<span class="keyword">password</span> <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%科技%'</span>;<span class="comment"># 则此时是不走索引的，由于password字段并不是索引字段，所以将造成不会走索引的局面；key:NULL；key_len：NULL；</span></span><br></pre></td></tr></table></figure><h2 id="索引的使用-全表扫描更快"><a href="#索引的使用-全表扫描更快" class="headerlink" title="索引的使用 - 全表扫描更快"></a>索引的使用 - 全表扫描更快</h2><p><strong>避免索引失效</strong>  </p><p><strong>（9）</strong> 如果<strong>MySQL评估</strong>使用索引比全表更慢，则不使用索引；  </p><p>如果发现走全表扫描比走索引要快，这个时候mysql就会走全表扫描；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address=<span class="string">'北京市'</span>;<span class="comment">#此时key:NULL 以及key_len: NULL；由于address是复合索引当中的索引字段但是又不满足最左前缀法则；所以不走索引；  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);<span class="comment">#在tb_seller表中的address字段上建立索引；单列索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address=<span class="string">'北京市'</span>;<span class="comment"># 但是此时仍然没有走索引；possible_key出现有idx_seller_address；但是key为NULL；以及key_len为NULL；type为ALL；即走的还是全表扫描</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address=<span class="string">'西安市'</span>;<span class="comment">#此时是走索引的，key为idx_address；key_len为403;索引走的是address字段；extra为using index condition</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#同样一条SQL语句，只是传入的参数不同；也就导致了是否走索引的不同；一个是全表扫描没有走索引；而另外一个是走了索引idx_seller_address；  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#原因就在于：这个与数据库当中的数据是存在一定的关系的；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller; <span class="comment">#该表当中一共有12条记录；这12条记录当中出现有address为“北京市”的记录行数就有11条记录；只有一条是1条是“西安市”；  </span></span><br><span class="line"><span class="comment">#如果数据量大，且精确查询的内容又在表中占比大；此时就极有可能走的是全表扫描而非走索引了；速度更快</span></span><br></pre></td></tr></table></figure><h2 id="索引的使用-NULL值的判定"><a href="#索引的使用-NULL值的判定" class="headerlink" title="索引的使用 - NULL值的判定"></a>索引的使用 - NULL值的判定</h2><p><strong>避免索引失效</strong>  </p><p><strong>（10）</strong> <strong>is NULL，is  NOT NULL</strong>  <strong><span style="color:red;">有时</span></strong> 索引失效；  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">explain</span>  <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"># 此时是走索引的；key：idx_seller_address ;key_len：<span class="number">403</span> 走的索引字段为address</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span>  <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"># 此时是没有走索引的；key：<span class="keyword">null</span> ;key_len:<span class="keyword">null</span>;<span class="keyword">type</span>:<span class="keyword">all</span> 走的是全表扫描</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line"># 当前该表当中每一条记录都address字段记录取值都是 <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"># 当前<span class="keyword">explain</span> <span class="keyword">where</span> address <span class="keyword">is</span> <span class="keyword">null</span>时走了索引，</span><br><span class="line"># 即address <span class="keyword">is</span> <span class="keyword">null</span>这样的记录在表当中占比较少此时则走索引；</span><br><span class="line"># 而<span class="keyword">explain</span> <span class="keyword">where</span> address <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>时没有走索引；</span><br><span class="line"># 而此时 address <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>则在表当中占比较多；</span><br><span class="line"># 所以就不会去走索引而是全表扫描；</span><br><span class="line"># 这个与前面所说的全表扫描更快是一个道理；</span><br><span class="line"># 全表扫描与走索引的这两种方式哪一种更快就选择哪一种方式；</span><br><span class="line"># 也就是说mysql底层会去自动的判断如果走全表扫描更快就走全表扫描；</span><br><span class="line"># 如果走索引更快就走索引的这种方式；  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"># 此时走索引；key:idx_name_sta_addr；key_len：<span class="number">403</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"># 此时不走索引；key:<span class="keyword">null</span>； key_len：<span class="keyword">null</span>; <span class="keyword">type</span>：<span class="keyword">ALL</span> 走的是全表扫描</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"># 此时不走索引；key：<span class="keyword">null</span>；key_len: <span class="keyword">null</span> ; <span class="keyword">type</span>:<span class="keyword">all</span> 走的是全表扫描</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"># 此时走了索引；key:idx_name; key_len:<span class="number">138</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> <span class="type">name</span> =<span class="keyword">null</span> <span class="keyword">where</span> id &lt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_user;</span><br><span class="line"># 则此时除了id为<span class="number">1</span>的记录其余的记录的<span class="type">name</span>字段就变成了<span class="keyword">null</span>；</span><br><span class="line"># 所以如果此时查询t_user表当中<span class="type">name</span>字段为<span class="keyword">is</span> <span class="keyword">null</span>则走全表扫描；</span><br><span class="line"># 而查询<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>则走索引；</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> t_user;#此时在t_user表当中<span class="type">name</span>字段是存在索引的；</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"># key:<span class="keyword">null</span> ; key_len:<span class="keyword">null</span>;<span class="keyword">type</span>:<span class="keyword">all</span> 走的是全表扫描（原因就在于此时在表当中记录<span class="type">name</span>字段为<span class="keyword">null</span>占比大于<span class="type">name</span>字段<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>；</span><br><span class="line"># 所以全表扫描与走索引的方式这两者相比较之下，全表扫描更快；）</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"># 此时是走索引的；key:idx_user_name;key_len:<span class="number">138</span>;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 也就是说<span class="keyword">is</span> <span class="keyword">null</span>与<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>；</span><br><span class="line"># 有时是会走索引的有时又不会走索引；</span><br><span class="line"># 这要分情况而定；</span><br><span class="line"># 这个根据数据库当中的数据量来决定的；</span><br><span class="line"># 如果查询的字段在数据量当中的<span class="keyword">null</span>值占比较多,那么这个时候<span class="keyword">is</span> <span class="keyword">null</span>将会走全表扫描而<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>则走索引；</span><br><span class="line"># 如果查询的字段在数据量当中绝大部分都是存在有值的也就是说<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>占据较多；</span><br><span class="line"># 则此时<span class="keyword">is</span> <span class="keyword">null</span>就会走索引；而<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>则走全表扫描；</span><br></pre></td></tr></table></figure><h2 id="索引的使用-in和not-in"><a href="#索引的使用-in和not-in" class="headerlink" title="索引的使用 - in和not in"></a>索引的使用 - in和not in</h2><p><strong>避免索引失效</strong>  </p><p><strong>（11）</strong> <strong>in 走索引； not in 索引失效</strong>；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> sellerid <span class="keyword">in</span> (<span class="string">'oppo'</span>,<span class="string">'xiaomi'</span>,<span class="string">'sina'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> sellerid <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'oppo'</span>,<span class="string">'xiaomi'</span>,<span class="string">'sina'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> sellerid <span class="keyword">in</span> (<span class="string">'oppo'</span>,<span class="string">'xiaomi'</span>,<span class="string">'sina'</span>);</span><br><span class="line"><span class="comment"># 此时使用了索引；key:PRIMARY；key_len:402;  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> sellerid <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'oppo'</span>,<span class="string">'xiaomi'</span>,<span class="string">'sina'</span>);</span><br><span class="line"><span class="comment"># 此时未走索引；索引失效；key:NULL；key_len:NULL；type:ALL 全表扫描</span></span><br></pre></td></tr></table></figure><h2 id="索引的使用-单列索引与复合索引选择"><a href="#索引的使用-单列索引与复合索引选择" class="headerlink" title="索引的使用 - 单列索引与复合索引选择"></a>索引的使用 - 单列索引与复合索引选择</h2><p><strong>避免索引失效</strong>  </p><p><strong>（12）</strong> <strong>单列索引 和 复合索引</strong>  </p><p><strong>尽量使用 复合索引，而少量使用 单列索引</strong>；  </p><p>创建复合索引：  </p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create <span class="built_in">index</span> idx_name_sta_address on tb_seller(<span class="keyword">name</span>,<span class="keyword">status</span>,address);</span><br><span class="line"></span><br><span class="line">就相当于创建了三个索引：  </span><br><span class="line">* <span class="keyword">name</span></span><br><span class="line">* <span class="keyword">name</span> + <span class="keyword">status</span></span><br><span class="line">* <span class="keyword">name</span> + <span class="keyword">status</span> + address</span><br></pre></td></tr></table></figure><p>创建单列索引：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_status <span class="keyword">on</span> tb_seller(<span class="keyword">status</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br></pre></td></tr></table></figure><p>当对name、status、address字段进行搜索的时候，数据库只会选择一个索引；<br>所以此时在这种情况下单列索引并不占优势；  </p><p>数据库会选择一个最优的索引来使用，并不会使用全部索引；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tb_seller;<span class="comment">#查看tb_seller表当中的索引</span></span><br><span class="line"><span class="comment"># PRIMARY 主键索引</span></span><br><span class="line"><span class="comment"># idx_name_sta_address name</span></span><br><span class="line"><span class="comment"># idx_name_sta_address status</span></span><br><span class="line"><span class="comment"># idx_name_sta_address address</span></span><br><span class="line"><span class="comment"># idx_seller_address address</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除单列索引</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> <span class="keyword">from</span> idx_seller_address <span class="keyword">on</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看tb_seller表的索引</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span>  <span class="keyword">status</span>=<span class="string">'0'</span> <span class="keyword">and</span> address=<span class="string">'西安市'</span>;<span class="comment">#此时使用复合索引；key:idx_name_sta_addr；key_len：813</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除复合索引</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_name_sta_address <span class="keyword">on</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建单列索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_status <span class="keyword">on</span> tb_seller(<span class="keyword">status</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看单列索引</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tb_seller;</span><br><span class="line"><span class="comment">#PRIMARY 主键索引</span></span><br><span class="line"><span class="comment"># idx_seller_name 单列索引name字段</span></span><br><span class="line"><span class="comment"># idx_seller_status 单列索引status字段</span></span><br><span class="line"><span class="comment"># idx_seller_address 单列索引address字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'0'</span> <span class="keyword">and</span> address=<span class="string">'西安市'</span>;</span><br><span class="line"><span class="comment"># 此时走索引但是；key:idx_seller_name; key_len:403;</span></span><br><span class="line"><span class="comment"># 只走了name字段的索引；</span></span><br><span class="line"><span class="comment"># 而status字段以及address字段的索引未走；</span></span><br><span class="line"><span class="comment"># 相当于白创建了status以及address字段的索引了；</span></span><br><span class="line"><span class="comment"># 即此时possible_key：idx_seller_name、idx_seller_status、idx_seller_address；这三个索引可能都会用到；</span></span><br><span class="line"><span class="comment"># 但是实际上只用到了idx_seller_name索引；即name字段的索引；</span></span><br><span class="line"><span class="comment"># 为什么选择了name字段来作为该SQL的索引；</span></span><br><span class="line"><span class="comment"># 原因在于：数据库会选择一个最优的索引来使用；并不会使用全部索引；也就意味着name该字段的索引在这三个索引当中最优；</span></span><br><span class="line"><span class="comment"># 为什么name该字段的索引idx_seller_name最优，</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line"><span class="comment"># 因为在此表当中，name查询的精确值为“小米科技”辨识度最高，记录行为1；</span></span><br><span class="line"><span class="comment"># 而status字段取值为0的记录行超过1；</span></span><br><span class="line"><span class="comment"># address字段取值为“西安市”记录行也只有1；</span></span><br><span class="line"><span class="comment"># 也应该是遵循了从左到右的一个判断；所以此时idx_seller_name索引最优；</span></span><br><span class="line"><span class="comment"># 从而走了idx_seller_name索引；  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">status</span>=<span class="string">'0'</span> <span class="keyword">and</span> address=<span class="string">'西安市'</span>;</span><br><span class="line"><span class="comment"># 此时没有name字段；</span></span><br><span class="line"><span class="comment"># 而address在数据表当中辨识度最高；</span></span><br><span class="line"><span class="comment"># 即记录行为1；所以此时走的索引自然即为idx_seller_address；</span></span><br><span class="line"><span class="comment"># key:idx_seller_address;key_len:403;possible_key:idx_seller_status,idx_seller_address;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">status</span>=<span class="string">'0'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>;</span><br><span class="line"><span class="comment"># 如果此时address取精确值为“北京市”；</span></span><br><span class="line"><span class="comment"># 而在数据库当中address取值为“北京市”的记录行辨识度并不高；</span></span><br><span class="line"><span class="comment"># 也就是取值为“北京市”的address字段其记录行有很多超过1，即总共12条记录，有11条记录当中的address都是“北京市”，从而其辨识度并不高；</span></span><br><span class="line"><span class="comment"># 而此时status字段相比较之下，取值为0的记录行数，总行数12行，而status取值为0的记录行数为3行，那么此时较之address的辨识度自然是要高一些；</span></span><br><span class="line"><span class="comment"># 所以将走status字段的索引，即idx_seller_status索引；</span></span><br><span class="line"><span class="comment"># possible_key:idx_seller_status,idx_seller_address；key:idx_seller_status;key_len:7；</span></span><br></pre></td></tr></table></figure><p>也就是说：数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部的索引；  </p><h2 id="索引的使用-查看索引使用情况"><a href="#索引的使用-查看索引使用情况" class="headerlink" title="索引的使用 - 查看索引使用情况"></a>索引的使用 - 查看索引使用情况</h2><p><strong>查看索引使用情况</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Handler_read%'</span>;<span class="comment">#查看的是当前会话中索引的使用情况</span></span><br><span class="line"><span class="comment">#Variable_name  Value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Handler_read%'</span>;<span class="comment">#查看的是全局中索引的使用情况</span></span><br></pre></td></tr></table></figure><table border="1">  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>Handler_read_first</td>    <td>0</td>  </tr>  <tr>    <td>Handler_read_key</td>    <td>2</td>  </tr>  <tr>    <td>Handler_read_last</td>    <td>0</td>  </tr>    <tr>    <td>Handler_read_next</td>    <td>0</td>  </tr>    <tr>    <td>Handler_read_prev</td>    <td>0</td>  </tr>    <tr>    <td>Handler_read_rnd</td>    <td>0</td>  </tr>    <tr>    <td>Handler_read_rnd_next</td>    <td>22</td>  </tr></table><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Handler_read_first</span>: 索引中第一条被读的次数。如果较高，表示服务器正在自行大量全索引扫描（这个值越低越好）；</span><br><span class="line"></span><br><span class="line"><span class="attribute">Handler_read_key</span>: 如果索引正在工作，这个值代表一个行被索引值读取的次数；如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）；</span><br><span class="line"></span><br><span class="line"><span class="attribute">Handler_read_next</span>: 按照键顺序读下一行的请求数。如果用范围约束或者如果执行索引扫描来查询索引列，该值增加；  </span><br><span class="line"></span><br><span class="line"><span class="attribute">Handler_read_prev</span>: 按照键顺序读前一行的请求数，该读方法主要用于优化ORDER BY.....DESC；</span><br><span class="line"></span><br><span class="line"><span class="attribute">Handler_read_rnd</span>: 根据固定位置读一行的请求数。如果正执行大量查询并需要对结果进行排序该值较高。可能使用了大量需要MySQL扫描整个表的查询或者连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救；  </span><br><span class="line"></span><br><span class="line"><span class="attribute">Handler_read_rnd_next</span>: 在数据文件中读下一行的请求数。如果正进行大量的表扫描，该值要求较高。通常说明表索引不正确或者是写入的查询没有利用索引；</span><br></pre></td></tr></table></figure><h2 id="SQL优化-大批量插入数据"><a href="#SQL优化-大批量插入数据" class="headerlink" title="SQL优化 - 大批量插入数据"></a>SQL优化 - 大批量插入数据</h2><p><strong>大批量插入数据</strong>  </p><p>环境准备：  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="string">'tb_user_1'</span>(</span><br><span class="line">  <span class="string">'id'</span> int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">'username'</span> varchar(45) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'password'</span> varchar(96) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'name'</span> varchar(45) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'birthday'</span> datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'sex'</span> char(1)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'email'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'phone'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'qq'</span> varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'status'</span>  varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span> comment <span class="string">'用户状态'</span>,</span><br><span class="line">  <span class="string">'create_time'</span>  datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'update_time'</span> datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY(<span class="string">'id'</span>),</span><br><span class="line">  UNIQUE KEY <span class="string">'unique_user_username'</span>(<span class="string">'username'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">'tb_user_2'</span>(</span><br><span class="line">  <span class="string">'id'</span> int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">'username'</span> varchar(45) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'password'</span> varchar(96) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'name'</span> varchar(45) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'birthday'</span> datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'sex'</span> char(1)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'email'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'phone'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'qq'</span> varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'status'</span>  varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span> comment <span class="string">'用户状态'</span>,</span><br><span class="line">  <span class="string">'create_time'</span>  datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'update_time'</span> datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY(<span class="string">'id'</span>),</span><br><span class="line">  UNIQUE KEY <span class="string">'unique_user_username'</span>(<span class="string">'username'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>当使用load命令导入数据的时候，适当的设置可以提高导入的效率。  </p><p>引擎使用的是Innodb，Innodb底层使用的索引是B+树索引；而B+树索引当中的数据有顺序的；  </p><p>对于Innodb类型的表，有以下集中方式可以提高导入的效率：  </p><p><strong>（1）</strong> <strong>主键顺序插入</strong>  </p><p>因为<strong>InnoDB类型</strong>的表是<strong>按照主键的顺序</strong>保存的，所以将导入的数据<strong>按照主键的顺序排列</strong>，可以<strong>有效的提高 导入数据的 效率</strong>。  </p><p>如果<strong>InnoDB表 没有主键</strong>，那么系统会<strong>自动默认创建一个内部列</strong>作为<strong>主键</strong>，所以如果可以给表创建一个主键，将可以利用这点，来<strong>提高导入数据的效率</strong>。  </p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">脚本文件介绍：  </span><br><span class="line">  <span class="function"><span class="title">sql1</span>.<span class="built_in">log</span> -----&gt;</span> 主键有序</span><br><span class="line">  <span class="function"><span class="title">sql2</span>.<span class="built_in">log</span> -----&gt;</span> 主键无序</span><br></pre></td></tr></table></figure><p>插入ID顺序排列数据：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'/root/sql1.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_1'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment"># 耗费时长：20.58 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'/root/sql2.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_2'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">#耗费时长：1min 59.29 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_2;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sql1.log当中数据有序进行排列；sql2.log当中数据无序进行排列；</span></span><br><span class="line"><span class="comment">#而sql1.log当中的数据将插入到tb_user_1表；sql2.log当中的数据将插入到tb_user_2表当中；</span></span><br><span class="line"><span class="comment">#sql1.log与sql2.log当中数据量完全一致；只数据排列分布顺序不一致；</span></span><br><span class="line"></span><br><span class="line">head sql1.log <span class="comment">#linux 查看sql1.log前一部分的数据内容，id主键数据有序</span></span><br><span class="line">head sql2.log <span class="comment">#linux 查看sql2.log前一部分的数据内容，主键数据无序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'/root/sql1.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_1'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment"># load data 加载数据  </span></span><br><span class="line"><span class="comment">#local infile 从本地文件系统当中加载数据；</span></span><br><span class="line"><span class="comment">#'/root/sql1.log' 数据文件在linux当中的位置</span></span><br><span class="line"><span class="comment"># into table 'tb_user_1' 加载数据到具体表tb_user_1当中</span></span><br><span class="line"><span class="comment"># fields terminated by ',' 每一个域之间使用逗号,进行分隔</span></span><br><span class="line"><span class="comment"># lines terminated by '\n' 每一行之间使用\n进行分隔,也就是换行</span></span><br><span class="line"><span class="comment"># 回车之后，在导入数据的过程当中，还需要去进行维护索引，维护唯一索引；unique；</span></span><br><span class="line"><span class="comment"># sql1.log导入到tb_user_1表当中耗费时间为19.37 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_1;<span class="comment"># 1000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'/root/sql2.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_2'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">#回车之后，耗费的时间为 1min 51.42 second；和sql1.log导入tb_user_1时差距很大；  </span></span><br><span class="line"><span class="comment">#所以这样就验证了大批量导入数据时，有序数据导入表当中时耗费的时间小于无序数据导入表当中的时间；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_2;<span class="comment"># 1000000</span></span><br></pre></td></tr></table></figure><p><strong>（2）</strong> <strong>关闭唯一性校验</strong>  </p><p>在<strong>导入数据前</strong>执行 <strong>SET UNIQUE_CHECKS=0</strong> ，<strong>关闭唯一性校验</strong>，<br>在<strong>导入结束后</strong>执行 <strong>SET UNIQUE_CHECKS=1</strong>，<strong>恢复唯一性校验</strong>，可以<strong>提高导入的效率</strong>。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在tb_user_1表结构当中存在username字段的唯一性索引；如果存在唯一性索引则在插入数据的时候是需要对唯一性字段数据的取值进行校验的；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> UNIQUE_CHECKS=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> infiles <span class="string">'/root/sql1.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_1'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">#耗费时长为 19.39 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> UNIQUE_CHECKS=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>（3）</strong> <strong>手动提交事务</strong>  </p><p>如果应用使用<strong>自动提交</strong>的方式，<br>建议在<strong>导入前</strong>执行 <strong>SET AUTOCOMMIT=0</strong>，<strong>关闭自动提交</strong>，<br><strong>导入结束后</strong>再执行 <strong>SET AUTOCOMMIT=1</strong>；<strong>打开自动提交</strong>，也可以<strong>提高导入的效率</strong>。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> AUTOCOMMIT=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> infiles <span class="string">'/root/sql1.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_1'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">#耗费时长为 19.58 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> AUTOCOMMIT=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="SQL优化-insert优化"><a href="#SQL优化-insert优化" class="headerlink" title="SQL优化 - insert优化"></a>SQL优化 - insert优化</h2><p><strong>优化insert语句</strong>  </p><p>当进行数据的insert操作的时候，可以考虑采用以下几种优化方案。  </p><ul><li><p>如果需要同时对一张表插入很多行数据时，应该尽量使用多个值表的insert语句，这种方式将大大的缩减客户端与数据库之间的连接、关闭等消耗。<br>使得效率比分开执行的单个insert语句块。<br>示例，原始方式为：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br></pre></td></tr></table></figure><p>优化后的方案为：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'tom'</span>),(<span class="number">2</span>,<span class="string">'cat'</span>),(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br></pre></td></tr></table></figure></li><li><p>在<strong>事务中</strong>进行数据插入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li><li><p>数据<strong>有序插入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'Tim'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'Rose'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br></pre></td></tr></table></figure><p>优化后：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'Tim'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'Rose'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'Jerry'</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="SQL优化-orderby优化"><a href="#SQL优化-orderby优化" class="headerlink" title="SQL优化 - orderby优化"></a>SQL优化 - orderby优化</h2><p><strong>优化 order by 语句</strong>  </p><p><strong>环境准备</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">'emp'</span>(</span><br><span class="line">  <span class="string">'id'</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">'name'</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'age'</span> <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'salary'</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(<span class="string">'id'</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> DEAFULT <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">#基础数据插入</span></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp(age,salary);<span class="comment">#建立age、salary字段的复合索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">#PRIMARY 主键索引</span></span><br><span class="line"><span class="comment">#idx_emp_age_salary age 复合索引</span></span><br><span class="line"><span class="comment">#idx_emp_age_salary salary 复合索引</span></span><br></pre></td></tr></table></figure><p><strong>两种排序方式</strong>  </p><p><strong>（1）</strong> <strong>第一种是通过对返回数据进行排序，也就是通常说的 filesort 排序，所有不是通过索引直接返回排序结果的排序都叫做 FileSort排序</strong>。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age;#key:<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span>；Extra：<span class="keyword">Using</span> filesort;<span class="keyword">type</span>:<span class="keyword">ALL</span> 没有走索引，全表扫描（升序）</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age,salary;#key:<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span>；Extra：<span class="keyword">Using</span> filesort;<span class="keyword">type</span>:<span class="keyword">ALL</span> 没有走索引，全表扫描（升序）</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;#key:<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span>；Extra：<span class="keyword">Using</span> filesort;<span class="keyword">type</span>:<span class="keyword">ALL</span> 没有走索引，全表扫描（降序）</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>,salary <span class="keyword">desc</span>;#key:<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span>；Extra：<span class="keyword">Using</span> filesort;<span class="keyword">type</span>:<span class="keyword">ALL</span> 没有走索引，全表扫描（降序）</span><br><span class="line"></span><br><span class="line">#通过file sort 文件系统进行排序，效率较低</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;#<span class="keyword">type</span>：<span class="keyword">ALL</span>，key：<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;#<span class="keyword">type</span>：<span class="keyword">ALL</span>，key：<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><p><strong>（2）</strong> <strong>第二种通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</strong>。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;#走索引；key：idx_age_salary；key_len:<span class="number">9</span>；Extra：<span class="keyword">Using</span> <span class="keyword">index</span> 走索引</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;#走索引；key：idx_age_salary；key_len:<span class="number">9</span>；Extra：<span class="keyword">Using</span> <span class="keyword">index</span> 走索引</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;#走索引；key：idx_age_salary；key_len:<span class="number">9</span>；Extra：<span class="keyword">Using</span> <span class="keyword">index</span> 走索引</span><br><span class="line">#覆盖索引的用法；查询<span class="keyword">select</span> 的字段都是覆盖索引则这个时候使用的即为<span class="keyword">using</span> <span class="keyword">index</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age,salary,<span class="type">name</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;#走索引；key：<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span>；<span class="keyword">type</span>:<span class="keyword">ALL</span>；Extra：<span class="keyword">Using</span> filesort 全表扫描；由于查询的字段当中包含了非索引字段；即并未覆盖索引；所以走全表扫描的方式；id、age、salary这三个字段都有索引；而<span class="type">name</span>字段没有索引；</span><br></pre></td></tr></table></figure><p><strong>多字段排序</strong>  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id ,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age,salary;#key:idx_age_salary;key_len:<span class="number">9</span>;Extra:<span class="keyword">Using</span> <span class="keyword">index</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id ,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>,salary <span class="keyword">asc</span>;#key:idx_age_salary;key_len:<span class="number">9</span>;Extra:<span class="keyword">Using</span> <span class="keyword">index</span>(<span class="keyword">order</span> <span class="keyword">by</span> 如不标明<span class="keyword">desc</span>或者<span class="keyword">asc</span>;默认为<span class="keyword">asc</span>升序排序)</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>,salary <span class="keyword">desc</span>;#key:idx_age_salary;key_len:<span class="number">9</span>;Extra:<span class="keyword">Using</span> <span class="keyword">index</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>,salary <span class="keyword">desc</span>;#key:idx_age_salary;key_len:<span class="number">9</span>;Extra:<span class="keyword">Using</span> <span class="keyword">index</span>;<span class="keyword">Using</span> filesort此时就会出现Filesort</span><br><span class="line"></span><br><span class="line"># 即在使用<span class="keyword">order</span> <span class="keyword">by</span>进行多字段排序的时候，如果想要效率较高；那么此时最好这些多字段统一排序方式；要么都是升序要么都是降序；如果出现一升一降那么就会出现Filesort；文件系统排序造成效率低；</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">asc</span>,age <span class="keyword">asc</span>;#key:idx_age_salary;key_len:<span class="number">9</span>;Extra:<span class="keyword">Using</span> <span class="keyword">index</span>;<span class="keyword">Using</span> filesort；此时将age <span class="keyword">asc</span>进行了调后处理；也出现了Filesort</span><br><span class="line">#原因在于：</span><br><span class="line">#按照多字段进行排序，要么统一进行升序<span class="keyword">asc</span>要么统一进行降序排序；</span><br><span class="line">#如果按照多字段进行排序，那么排序的顺序需要和复合索引当中的字段顺序要保持一致；</span><br><span class="line">#复合索引为idx_emp_age_salary（age，salary）复合索引当中age字段的索引顺序先于salary字段的顺序；</span><br><span class="line">#而此时<span class="keyword">SQL</span>当中<span class="keyword">order</span> <span class="keyword">by</span>语句多字段排序salary字段先于age字段；所以此时Extra当中就出现了<span class="keyword">using</span> <span class="keyword">index</span>；也出现了<span class="keyword">using</span> filesort;</span><br></pre></td></tr></table></figure><p>了解了MySQL的排序方式，优化目标就清晰了：尽量减少额外的排序，通过索引直接返回有序数据。  </p><p>where条件和Order by 使用相同的索引并且Order by 的顺序和索引顺序相同，并且Order by的字段都是升序，或者都是降序。  </p><p>否则肯定需要额外的操作，这样就会出现FileSort排序；  </p><h3 id="Filesort的优化"><a href="#Filesort的优化" class="headerlink" title="Filesort的优化"></a>Filesort的优化</h3><p><strong>尽可能避免Filesort</strong>的出现，但是无法完全避免Filesort的出现；  </p><p>通过创建合适的索引，能够减少Filesort的出现。  </p><p>但是在某些情况下，条件限制不能让Filesort小时，那就需要加快Filesort的排序操作，对于Filesort，MySQL有两种排序算法：  </p><p>（1）两次扫描算法：MySQL4.1之前，使用该方式排序。<br>    首先，根据条件取出排序字段和行指针信息，然后在排序区 sort buffer中排序；<br>    如果sort buffer不够，则在临时表 temporary table中存储排序结果。<br>    完成排序之后，再根据航指针回表读取记录，该操作可能会导致大量随机I/O操作。  </p><p>（2）一次扫描算法：一次性取出满足条件的所有字段，然后在排序区sort buffer中排序后直接输出结果集。<br>    排序时内存开销较大，但是排序效率比两次扫描算法要高；  </p><p>MySQL 通过比较系统变量 max_length_for_sort_data 的大小和Query 语句取出的字段总大小，来判定合适哪一种排序算法，如果max_length_for_sort_data 更大，那么使用第二种优化之后的算法；否则使用第一种；  </p><p>可以适当提高 sort_buffer_size和 max_length_for_sort_data 系统变量，来增大排序区的大小，提高排序的效率。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'max_length_for_sort_data'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>max_length_for_sort_data</td>    <td>1024</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'sort_buffer_size'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>Variable_name</th>    <th>Value</th>  </tr>  <tr>    <td>sort_buffer_size</td>    <td>262144</td>  </tr></table><h2 id="SQL优化-group-by优化"><a href="#SQL优化-group-by优化" class="headerlink" title="SQL优化 - group by优化"></a>SQL优化 - group by优化</h2><p>由于GROUP BY 实际上也同样会进行排序操作，而且与ORDER BY相比，GROUP BY主要只是多了排序字后的分组操作。  </p><p>当然如果在分组的时候还是用了其他的一些聚合函数，那么还需要一些聚合函数的计算。  </p><p>所以，在GROUP BY的实现过程中，与ORDER BY一样也可以利用到索引。  </p><p>如果查询包含GROUP BY，但是用户想要避免排序结果的消耗，则可以执行order by null 禁止排序。  </p><p>如下：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,count(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age;#key:<span class="keyword">NULL</span>,key_len:<span class="keyword">NULL</span>;<span class="keyword">type</span>:<span class="keyword">ALL</span>;Extra:<span class="keyword">Using</span> <span class="keyword">temporary</span>;<span class="keyword">Using</span> filesort; 由此可以看出<span class="keyword">GROUP</span> <span class="keyword">BY</span> 底层进行了排序操作；<span class="keyword">Using</span> filesort</span><br><span class="line"><span class="meta">#Using temporary与Using Filesort都是比较耗时的操作；</span></span><br></pre></td></tr></table></figure><p>优化后：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,count(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">null</span>;#key:<span class="keyword">null</span>;key_len:<span class="keyword">null</span>;<span class="keyword">type</span>:<span class="keyword">All</span>;Extra:<span class="keyword">Using</span> <span class="keyword">temporary</span>;此时就没有<span class="keyword">Using</span> filesort了</span><br></pre></td></tr></table></figure><p>从上面的例子可以看出，第一个SQL语句需要进行“Filesort”，而第二个SQL语句由于order by null不需要进行“Filesort”，而上文提过FileSort往往非常耗费时间。  </p><p> 创建索引：  </p> <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_emp_age_salary  <span class="keyword">on</span> emp(age,salary);</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,<span class="built_in">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">order</span> <span class="keyword">by</span> <span class="literal">null</span>;#key:idx_emp_age_salary;key_len:9;extra:using <span class="keyword">index</span> 此时走索引；</span><br><span class="line">#<span class="keyword">group</span> <span class="keyword">by</span>语句也是可以通过索引来提高效率的；</span><br></pre></td></tr></table></figure><h2 id="SQL优化-子查询优化"><a href="#SQL优化-子查询优化" class="headerlink" title="SQL优化 - 子查询优化"></a>SQL优化 - 子查询优化</h2><p><strong>优化嵌套查询</strong>  </p><p>MySQL4.1 版本之后，开始支持SQL的子查询。  </p><p>这个技术可以使用select语句来创建一个单列的查询结果，然后吧这个结果来作为过滤条件用在另一个查询当中。  </p><p>使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。  </p><p>但是，有些情况下，子查询是可以被更高效的连接（JOIN）替代。(使用多表连接查询来替换子查询)  </p><p>示例，查找有角色的所有用户信息：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;<span class="comment"># t_user 用户表 , t_role 角色表 , user_role 用户角色中间表 ；</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> ( <span class="keyword">select</span> user_id <span class="keyword">from</span> user_role);</span><br></pre></td></tr></table></figure><p>执行计划为：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="keyword">select</span> user_id <span class="keyword">from</span> user_role);</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>t_user</td>    <td>ALL</td>    <td>PRIMARY</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>6</td>    <td>Using where</td>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>< subquery2></td>    <td>eq_ref</td>    <td>< auto_key></td>    <td>< auto_key></td>    <td>99</td>    <td>demo_02.t_user.id</td>    <td>1</td>    <td>NULL</td>  </tr>  <tr>    <td>2</td>    <td>MATERIALIZED</td>    <td>user_role</td>    <td>index</td>    <td>fk_ur_user_id</td>    <td>fk_ur_user_id</td>    <td>99</td>    <td>NULL</td>    <td>6</td>    <td>Using index</td>  </tr></table><p>优化后：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user u,user_role ur <span class="keyword">where</span> u.id=ur.user_id;<span class="comment">#多表联查替代子查询</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>u</td>    <td>ALL</td>    <td>PRIMARY</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>6</td>    <td>NULL</td>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>ur</td>    <td>ref(ref的效率比index效率高)</td>    <td>fk_ur_user_id</td>    <td>fk_ur_user_id</td>    <td>99</td>    <td>demo_02.u.id</td>    <td>1</td>    <td>NULL</td>  </tr></table><h2 id="SQL优化-or优化"><a href="#SQL优化-or优化" class="headerlink" title="SQL优化 - or优化"></a>SQL优化 - or优化</h2><p><strong>对于包含 OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引，而且不能使用到复合索引；如果没有索引，则应该考虑增加索引</strong>。  </p><p>获取emp表中的所有的索引；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">show</span> index <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line">explain <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="built_in">where</span> id=<span class="number">1</span> <span class="built_in">or</span> name='Tom;#id为主键，即存在主键索引；而name字段没有设置索引；所以此时用<span class="built_in">or</span>来连接两个条件时，当中包含有一个非索引字段；所以不会走索引,索引失效，采用的是全表扫描；<span class="built_in">key</span>:NULL;key_len:NULL;<span class="built_in">type</span>:ALL;extra:Using <span class="built_in">where</span>；<span class="built_in">or</span>关键字如果想要走索引则<span class="built_in">or</span>连接的条件列字段需要是索引列；从而能够走索引否则全表扫描不走索引；</span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="built_in">where</span> age=<span class="number">20</span> <span class="built_in">or</span> salary=<span class="number">3500</span>;#<span class="built_in">key</span>:NULL,key_len:NULL;<span class="built_in">type</span>;All;extra:Using <span class="built_in">where</span>;此时未走索引；age与salary为复合索引当中的索引列；而<span class="built_in">or</span>关键字所连接的条件列当中字段的索引不能为复合索引列；可以为主键索引列、唯一索引列、单列索引等；就是不能为复合索引列其他皆可；</span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="built_in">where</span> id=<span class="number">1</span> <span class="built_in">or</span> age=<span class="number">30</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>t_user</td>    <td>ALL</td>    <td>PRIMARY</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>6</td>    <td>Using where</td>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>emp</td>    <td>index_merge</td>    <td>PRIMARY,idx_emp_age_salary</td>    <td>PRIMARY,idx_emp_age_salary</td>    <td>4,4</td>    <td>NULL</td>    <td>2</td>    <td>Using sort_union(idx_emp_age_salary,PRIMARY);Using where</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">or</span> <span class="keyword">id</span>=<span class="number">10</span> \G;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>emp</td>    <td>range</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>4</td>    <td>NULL</td>    <td>2</td>    <td>Using where</td>  </tr></table><p>建议使用 union 替换 or；  </p><p>优化：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> =<span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> =<span class="number">10</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>PRIMARY</td>    <td>emp</td>    <td>const(const效率远高于range)</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>4</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr>  <tr>    <td>2</td>    <td>UNION</td>    <td>emp</td>    <td>const</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>4</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr>  <tr>    <td>NULL</td>    <td>UNION RESULT</td>    <td>< union1,2></td>    <td>ALL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>Using temporary</td>  </tr></table><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">explain select * from emp where id=<span class="number">1</span> or age=<span class="number">20</span>;</span><br><span class="line"><span class="meta">#id 1</span></span><br><span class="line"><span class="meta">#select_type SIMPLE</span></span><br><span class="line"><span class="meta">#table emp</span></span><br><span class="line"><span class="meta">#possible_key PRIMARY,idx_emp_age_salary</span></span><br><span class="line"><span class="meta">#key idx_emp_age_salary,PRIMARY</span></span><br><span class="line"><span class="meta">#key_len 4,4</span></span><br><span class="line"><span class="meta">#ref NULL</span></span><br><span class="line"><span class="meta">#rows 2</span></span><br><span class="line"><span class="meta">#extra Using sort_union(idx_emp_age_salary,PRIMARY)</span></span><br><span class="line"><span class="meta">#type index_merge</span></span><br></pre></td></tr></table></figure><p>优化：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> age=<span class="number">20</span>;</span><br><span class="line"><span class="comment">#union即为一个求并集的一个操作；</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>PRIMARY</td>    <td>emp</td>    <td>const(const效率远高于range)</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>4</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr>  <tr>    <td>2</td>    <td>UNION</td>    <td>emp</td>    <td>ref(ref比index_merge效率高)</td>    <td>idx_emp_age_salary</td>    <td>idx_emp_age_salary</td>    <td>4</td>    <td>const</td>    <td>1</td>    <td>NULL</td>  </tr>  <tr>    <td>NULL</td>    <td>UNION RESULT</td>    <td>< union1,2></td>    <td>ALL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>Using temporary</td>  </tr></table><p>建议通过union替换or；<br>来比较下重要指标，发现主要差别是type和ref这两项；<br>type显示的是访问类型，是较为重要的一个指标，结果值从好到坏依次是：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">system</span> &gt; const &gt; eq_ref &gt; <span class="keyword">ref</span> &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; uniqe_subquery &gt; index_subquery &gt; range &gt; <span class="keyword">index</span> &gt; <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure><p>UNION语句的type值为ref，OR语句的type值为range，可以看到这是一个很明显的差距  </p><p>UNION语句的ref值为const，OR语句的type值为NULL，const表示是常量值引用，非常快  </p><p>这两项的差距就说明了UNION要优于OR；</p><h2 id="SQL优化-limit优化"><a href="#SQL优化-limit优化" class="headerlink" title="SQL优化 - limit优化"></a>SQL优化 - limit优化</h2><h3 id="优化分页查询"><a href="#优化分页查询" class="headerlink" title="优化分页查询"></a>优化分页查询</h3><p>一般分页查询时，通过创建覆盖索引能够比较好的提高性能。  </p><p>一个常见又非常头疼的问题就是 limit 2000000,10;   此时需要MySQL排序前2000010记录，仅仅返回 2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大。  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">limit</span> <span class="number">2000000</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_item</td>    <td>ALL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>9816098</td>    <td>NULL</td>  </tr></table><h3 id="优化思路一"><a href="#优化思路一" class="headerlink" title="优化思路一"></a>优化思路一</h3><p>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">slect count(*) from tb_item;#3000000</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">limit</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">limit</span> <span class="number">10</span>,<span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">limit</span> <span class="number">20</span>,<span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">limit</span> <span class="number">2000000</span>,<span class="number">10</span>;#查询效率低 此时为全表扫描没有使用得到索引；</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item t, (<span class="keyword">select</span> id <span class="keyword">from</span> tb_item <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">limit</span> <span class="number">2000000</span>,<span class="number">10</span>) a <span class="keyword">where</span> t.id=a.id;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>PRIMARY</td>    <td>< derived2></td>    <td>ALL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>NULL</td>    <td>2000010</td>    <td>NULL</td>  </tr>  <tr>    <td>1</td>    <td>PRIMARY</td>    <td>t</td>    <td>eq_ref</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>4</td>    <td>a.id</td>    <td>1</td>    <td>NULL</td>  </tr>    <tr>    <td>2</td>    <td>DERIVED</td>    <td>tb_item</td>    <td>index</td>    <td>NULL</td>    <td>PRIMARY</td>    <td>4</td>    <td>NULL</td>    <td>2903274</td>    <td>Using index</td>  </tr></table><h3 id="优化思路二"><a href="#优化思路二" class="headerlink" title="优化思路二"></a>优化思路二</h3><p>该方案适用于<strong>主键自增的表(且主键自增的列不能够出现断层)</strong>，可以把limit 查询转换成某个位置的查询；  </p><p><strong>断层</strong>：即指的是当在查询数据时，id主键自增列当中可能会有出现修改或者删除的操作，那么这个时候数据就不一定准确了；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> &gt; <span class="number">1000000</span> <span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_item</td>    <td>range</td>    <td>PRIMARY</td>    <td>PRIMARY</td>    <td>4</td>    <td>NULL</td>    <td>4908049</td>    <td>Using where</td>  </tr></table><h2 id="SQL优化-索引提示"><a href="#SQL优化-索引提示" class="headerlink" title="SQL优化 - 索引提示"></a>SQL优化 - 索引提示</h2><p><strong>使用SQL提示</strong>  </p><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。  </p><h3 id="USE-INDEX"><a href="#USE-INDEX" class="headerlink" title="USE INDEX"></a>USE INDEX</h3><p>在查询语句中 表名称的后面 ，添加 use index 来提供希望MySQL去<strong>参考</strong>的索引列表，就可以让MySQL不再考虑其他可用的索引。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_status <span class="keyword">on</span> tb_seller(<span class="keyword">status</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name_sta_addr <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>,<span class="keyword">status</span>,address);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_seller</td>    <td>ref</td>    <td>idx_seller_name_sta_address,idx_seller_name</td>    <td>idx_seller_name(数据库选择使用idx_seller_name索引)</td>    <td>403</td>    <td>const</td>    <td>1</td>    <td>Using index condition</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">use</span> <span class="keyword">index</span>(idx_seller_name_sta_address) <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_seller</td>    <td>ref</td>    <td>idx_seller_name_sta_address</td>    <td>idx_seller_name_sta_address</td>    <td>403</td>    <td>const</td>    <td>1</td>    <td>Using index condition</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">use</span> <span class="keyword">index</span>(idx_seller_name) <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_seller</td>    <td>ref</td>    <td>idx_seller_name</td>    <td>idx_seller_name</td>    <td>403</td>    <td>const</td>    <td>1</td>    <td>Using index condition</td>  </tr></table><h3 id="IGNORE-INDEX"><a href="#IGNORE-INDEX" class="headerlink" title="IGNORE INDEX"></a>IGNORE INDEX</h3><p>如果用户只是单纯的想让MySQL<strong>忽略</strong>一个或者多个索引，则可以使用 ignore index 作为 hint；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">ignore</span> <span class="keyword">index</span>(idx_seller_name) <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_seller</td>    <td>ref</td>    <td>idx_seller_name_sta_address</td>    <td>idx_seller_name_sta_address</td>    <td>403</td>    <td>const</td>    <td>1</td>    <td>Using index condition</td>  </tr></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">ignore</span> <span class="keyword">index</span>(idx_seller_name_sta_address) <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_seller</td>    <td>ref</td>    <td>idx_seller_name</td>    <td>idx_seller_name</td>    <td>403</td>    <td>const</td>    <td>1</td>    <td>Using index condition</td>  </tr></table><h3 id="FORCE-INDEX"><a href="#FORCE-INDEX" class="headerlink" title="FORCE INDEX"></a>FORCE INDEX</h3><p>为了<strong>强制</strong>MySQL使用一个特定的索引，可在查询中使用 force index 来作为 hint;</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address=<span class="string">'北京市'</span>;#实际没有使用到索引；<span class="keyword">type</span>:<span class="keyword">all</span>;key:<span class="keyword">null</span>;key_len:<span class="keyword">null</span>;extra:<span class="keyword">using</span> <span class="keyword">where</span>使用的是全表扫描；原因在于address为北京市时在表当中占比较多所以由mysql底层判断决定不走索引即全表扫描会快于走索引；所以此处没有使用得到索引；</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller use <span class="keyword">index</span>(idx_seller_address) <span class="keyword">where</span> address=<span class="string">'北京市'</span>;#此时则走索引</span><br></pre></td></tr></table></figure><table>  <tr>    <th>id</th>    <th>select_type</th>    <th>table</th>    <th>type</th>    <th>possible_key</th>    <th>key</th>    <th>key_len</th>    <th>ref</th>    <th>rows</th>    <th>Extra</th>  </tr>  <tr>    <td>1</td>    <td>SIMPLE</td>    <td>tb_seller</td>    <td>ALL</td>    <td>idx_seller_address</td>    <td>idx_seller_address</td>    <td>NULL</td>    <td>NULL</td>    <td>12</td>    <td>Using where</td>  </tr></table>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 数据库优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>史上最好~精通Spring Boot Cloud - 圣思园</title>
      <link href="/2020/05/29/%E3%80%90Spring%E3%80%91/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%A5%BD~%E7%B2%BE%E9%80%9ASpring%20Boot%20Cloud%20-%20%E5%9C%A3%E6%80%9D%E5%9B%AD/"/>
      <url>/2020/05/29/%E3%80%90Spring%E3%80%91/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%A5%BD~%E7%B2%BE%E9%80%9ASpring%20Boot%20Cloud%20-%20%E5%9C%A3%E6%80%9D%E5%9B%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1Eg4y187XT" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Eg4y187XT</a>  </p><h2 id="学习方法谈心"><a href="#学习方法谈心" class="headerlink" title="学习方法谈心"></a>学习方法谈心</h2><h2 id="SpringBoot与Cloud整体介绍"><a href="#SpringBoot与Cloud整体介绍" class="headerlink" title="SpringBoot与Cloud整体介绍"></a>SpringBoot与Cloud整体介绍</h2><h2 id="课程大纲深入解读与剖析"><a href="#课程大纲深入解读与剖析" class="headerlink" title="课程大纲深入解读与剖析"></a>课程大纲深入解读与剖析</h2><h2 id="微服务重要概念与权威解读"><a href="#微服务重要概念与权威解读" class="headerlink" title="微服务重要概念与权威解读"></a>微服务重要概念与权威解读</h2><h2 id="解读微服务重要论文"><a href="#解读微服务重要论文" class="headerlink" title="解读微服务重要论文"></a>解读微服务重要论文</h2><h2 id="深刻解读Martin-Fowler微服务经典文章"><a href="#深刻解读Martin-Fowler微服务经典文章" class="headerlink" title="深刻解读Martin Fowler微服务经典文章"></a>深刻解读Martin Fowler微服务经典文章</h2><h2 id="微服务数据治理与去中心化解读"><a href="#微服务数据治理与去中心化解读" class="headerlink" title="微服务数据治理与去中心化解读"></a>微服务数据治理与去中心化解读</h2><h2 id="微服务演进式设计与优缺点剖析"><a href="#微服务演进式设计与优缺点剖析" class="headerlink" title="微服务演进式设计与优缺点剖析"></a>微服务演进式设计与优缺点剖析</h2><h2 id="微服务宏观把控与深度剖析"><a href="#微服务宏观把控与深度剖析" class="headerlink" title="微服务宏观把控与深度剖析"></a>微服务宏观把控与深度剖析</h2><h2 id="SOA理论与概念深入剖析"><a href="#SOA理论与概念深入剖析" class="headerlink" title="SOA理论与概念深入剖析"></a>SOA理论与概念深入剖析</h2><h2 id="服务定义概念与原则"><a href="#服务定义概念与原则" class="headerlink" title="服务定义概念与原则"></a>服务定义概念与原则</h2><h2 id="SOA实现方式与模式"><a href="#SOA实现方式与模式" class="headerlink" title="SOA实现方式与模式"></a>SOA实现方式与模式</h2><h2 id="SOA的缺陷及其与微服务的关系"><a href="#SOA的缺陷及其与微服务的关系" class="headerlink" title="SOA的缺陷及其与微服务的关系"></a>SOA的缺陷及其与微服务的关系</h2><h2 id="SOA与微服务本质比较与透彻分析"><a href="#SOA与微服务本质比较与透彻分析" class="headerlink" title="SOA与微服务本质比较与透彻分析"></a>SOA与微服务本质比较与透彻分析</h2><h2 id="SpringBoot应用起步与配置"><a href="#SpringBoot应用起步与配置" class="headerlink" title="SpringBoot应用起步与配置"></a>SpringBoot应用起步与配置</h2><h2 id="SpringBoot应用配置分析与拆解"><a href="#SpringBoot应用配置分析与拆解" class="headerlink" title="SpringBoot应用配置分析与拆解"></a>SpringBoot应用配置分析与拆解</h2><h2 id="SpringBoot打包文件内容与结构深入分析"><a href="#SpringBoot打包文件内容与结构深入分析" class="headerlink" title="SpringBoot打包文件内容与结构深入分析"></a>SpringBoot打包文件内容与结构深入分析</h2><h2 id="使用Gradle构建SpringBoot应用"><a href="#使用Gradle构建SpringBoot应用" class="headerlink" title="使用Gradle构建SpringBoot应用"></a>使用Gradle构建SpringBoot应用</h2><h2 id="SpringBoot参数自动装配与loader机制详细分析"><a href="#SpringBoot参数自动装配与loader机制详细分析" class="headerlink" title="SpringBoot参数自动装配与loader机制详细分析"></a>SpringBoot参数自动装配与loader机制详细分析</h2><h2 id="SpringBootLoader源码分析及自定义类加载器作用分析"><a href="#SpringBootLoader源码分析及自定义类加载器作用分析" class="headerlink" title="SpringBootLoader源码分析及自定义类加载器作用分析"></a>SpringBootLoader源码分析及自定义类加载器作用分析</h2><h2 id="LaunchedURLClassLoader在FatJar中的重要作用分析及反射的经典应用"><a href="#LaunchedURLClassLoader在FatJar中的重要作用分析及反射的经典应用" class="headerlink" title="LaunchedURLClassLoader在FatJar中的重要作用分析及反射的经典应用"></a>LaunchedURLClassLoader在FatJar中的重要作用分析及反射的经典应用</h2><h2 id="JDWP远程调试详解"><a href="#JDWP远程调试详解" class="headerlink" title="JDWP远程调试详解"></a>JDWP远程调试详解</h2><h2 id="调试spring-boot-loader的启动与加载全流程"><a href="#调试spring-boot-loader的启动与加载全流程" class="headerlink" title="调试spring-boot-loader的启动与加载全流程"></a>调试spring-boot-loader的启动与加载全流程</h2><h2 id="SpringBootApplication注解深度解析"><a href="#SpringBootApplication注解深度解析" class="headerlink" title="@SpringBootApplication注解深度解析"></a>@SpringBootApplication注解深度解析</h2><h2 id="Configuration注解深入讲解"><a href="#Configuration注解深入讲解" class="headerlink" title="@Configuration注解深入讲解"></a>@Configuration注解深入讲解</h2><h2 id="SpringApplication源码分析与作用详解"><a href="#SpringApplication源码分析与作用详解" class="headerlink" title="SpringApplication源码分析与作用详解"></a>SpringApplication源码分析与作用详解</h2><h2 id="SpringBoot应用启动流程源码分析"><a href="#SpringBoot应用启动流程源码分析" class="headerlink" title="SpringBoot应用启动流程源码分析"></a>SpringBoot应用启动流程源码分析</h2><h2 id="SpringBoot启动流程分析"><a href="#SpringBoot启动流程分析" class="headerlink" title="SpringBoot启动流程分析"></a>SpringBoot启动流程分析</h2><h2 id="SpringApplication泛化与具体模式剖析"><a href="#SpringApplication泛化与具体模式剖析" class="headerlink" title="SpringApplication泛化与具体模式剖析"></a>SpringApplication泛化与具体模式剖析</h2><h2 id="工厂加载机制详尽分析"><a href="#工厂加载机制详尽分析" class="headerlink" title="工厂加载机制详尽分析"></a>工厂加载机制详尽分析</h2><h2 id="工厂缓存源码深度解析"><a href="#工厂缓存源码深度解析" class="headerlink" title="工厂缓存源码深度解析"></a>工厂缓存源码深度解析</h2><h2 id="Spring工厂Bean加载过程深度解析"><a href="#Spring工厂Bean加载过程深度解析" class="headerlink" title="Spring工厂Bean加载过程深度解析"></a>Spring工厂Bean加载过程深度解析</h2><h2 id="SpringApplication构造过程全景分析"><a href="#SpringApplication构造过程全景分析" class="headerlink" title="SpringApplication构造过程全景分析"></a>SpringApplication构造过程全景分析</h2><h2 id="ApplicationContext中央化组件作用详解"><a href="#ApplicationContext中央化组件作用详解" class="headerlink" title="ApplicationContext中央化组件作用详解"></a>ApplicationContext中央化组件作用详解</h2><h2 id="SpringApplicationRunListeners监听器容器详解"><a href="#SpringApplicationRunListeners监听器容器详解" class="headerlink" title="SpringApplicationRunListeners监听器容器详解"></a>SpringApplicationRunListeners监听器容器详解</h2><h2 id="观察着模式在SpringBoot中的经典应用"><a href="#观察着模式在SpringBoot中的经典应用" class="headerlink" title="观察着模式在SpringBoot中的经典应用"></a>观察着模式在SpringBoot中的经典应用</h2><h2 id="Environment组件的重要作用详解"><a href="#Environment组件的重要作用详解" class="headerlink" title="Environment组件的重要作用详解"></a>Environment组件的重要作用详解</h2><h2 id="Banner信息输出与定制内幕分析"><a href="#Banner信息输出与定制内幕分析" class="headerlink" title="Banner信息输出与定制内幕分析"></a>Banner信息输出与定制内幕分析</h2><h2 id="SpringBoot完整启动流程系统化总结"><a href="#SpringBoot完整启动流程系统化总结" class="headerlink" title="SpringBoot完整启动流程系统化总结"></a>SpringBoot完整启动流程系统化总结</h2><h2 id="SpringBoot重要模块详解"><a href="#SpringBoot重要模块详解" class="headerlink" title="SpringBoot重要模块详解"></a>SpringBoot重要模块详解</h2><h2 id="SpringBoot日志处理详解"><a href="#SpringBoot日志处理详解" class="headerlink" title="SpringBoot日志处理详解"></a>SpringBoot日志处理详解</h2><h2 id="SpringBoot整合JSP详解"><a href="#SpringBoot整合JSP详解" class="headerlink" title="SpringBoot整合JSP详解"></a>SpringBoot整合JSP详解</h2><h2 id="SpringBoot整合WebSocket详解"><a href="#SpringBoot整合WebSocket详解" class="headerlink" title="SpringBoot整合WebSocket详解"></a>SpringBoot整合WebSocket详解</h2><h2 id="SpringBoot整合SockJS详解"><a href="#SpringBoot整合SockJS详解" class="headerlink" title="SpringBoot整合SockJS详解"></a>SpringBoot整合SockJS详解</h2><h2 id="SpringBoot开发者工具与单元测试详解"><a href="#SpringBoot开发者工具与单元测试详解" class="headerlink" title="SpringBoot开发者工具与单元测试详解"></a>SpringBoot开发者工具与单元测试详解</h2><h2 id="Apache-Kafka介绍与面向MQ编程模式详解"><a href="#Apache-Kafka介绍与面向MQ编程模式详解" class="headerlink" title="Apache Kafka介绍与面向MQ编程模式详解"></a>Apache Kafka介绍与面向MQ编程模式详解</h2><h2 id="Apache-Kafka核心API与设计理念详解"><a href="#Apache-Kafka核心API与设计理念详解" class="headerlink" title="Apache Kafka核心API与设计理念详解"></a>Apache Kafka核心API与设计理念详解</h2><h2 id="Apache-Kafka分区副本与消费者组详解"><a href="#Apache-Kafka分区副本与消费者组详解" class="headerlink" title="Apache Kafka分区副本与消费者组详解"></a>Apache Kafka分区副本与消费者组详解</h2><h2 id="Apache-Kafka流式处理详解"><a href="#Apache-Kafka流式处理详解" class="headerlink" title="Apache Kafka流式处理详解"></a>Apache Kafka流式处理详解</h2><h2 id="Apache-Kafka生产者与消费者实例演示与解析"><a href="#Apache-Kafka生产者与消费者实例演示与解析" class="headerlink" title="Apache Kafka生产者与消费者实例演示与解析"></a>Apache Kafka生产者与消费者实例演示与解析</h2><h2 id="Apache-Kafka重点内容剖析与回顾"><a href="#Apache-Kafka重点内容剖析与回顾" class="headerlink" title="Apache Kafka重点内容剖析与回顾"></a>Apache Kafka重点内容剖析与回顾</h2><h2 id="Apache-Kafka分区构成与原则详解"><a href="#Apache-Kafka分区构成与原则详解" class="headerlink" title="Apache Kafka分区构成与原则详解"></a>Apache Kafka分区构成与原则详解</h2><h2 id="Apache-Kafka分区理论与作用详解"><a href="#Apache-Kafka分区理论与作用详解" class="headerlink" title="Apache Kafka分区理论与作用详解"></a>Apache Kafka分区理论与作用详解</h2><h2 id="Apache-Kafka分区与段之间的关系深入详解"><a href="#Apache-Kafka分区与段之间的关系深入详解" class="headerlink" title="Apache Kafka分区与段之间的关系深入详解"></a>Apache Kafka分区与段之间的关系深入详解</h2><h2 id="Apache-Kafka日志文件格式详解"><a href="#Apache-Kafka日志文件格式详解" class="headerlink" title="Apache Kafka日志文件格式详解"></a>Apache Kafka日志文件格式详解</h2><h2 id="Apache-Kafka脚本命令实战详解"><a href="#Apache-Kafka脚本命令实战详解" class="headerlink" title="Apache Kafka脚本命令实战详解"></a>Apache Kafka脚本命令实战详解</h2><h2 id="Apache-Kafka消费者组操作与主题删除原理详解"><a href="#Apache-Kafka消费者组操作与主题删除原理详解" class="headerlink" title="Apache Kafka消费者组操作与主题删除原理详解"></a>Apache Kafka消费者组操作与主题删除原理详解</h2><h2 id="Apache-Kafka重要操作详解与系统总结回顾"><a href="#Apache-Kafka重要操作详解与系统总结回顾" class="headerlink" title="Apache Kafka重要操作详解与系统总结回顾"></a>Apache Kafka重要操作详解与系统总结回顾</h2><h2 id="SpringBoot整合Apache-Kafka详解"><a href="#SpringBoot整合Apache-Kafka详解" class="headerlink" title="SpringBoot整合Apache Kafka详解"></a>SpringBoot整合Apache Kafka详解</h2><h2 id="SpringBoot操纵Apache-Kafka实例分析"><a href="#SpringBoot操纵Apache-Kafka实例分析" class="headerlink" title="SpringBoot操纵Apache Kafka实例分析"></a>SpringBoot操纵Apache Kafka实例分析</h2><h2 id="主流消息队列产品总结与分析"><a href="#主流消息队列产品总结与分析" class="headerlink" title="主流消息队列产品总结与分析"></a>主流消息队列产品总结与分析</h2><h2 id="SpringBoot对于SpringMVC的整合原理深度解析"><a href="#SpringBoot对于SpringMVC的整合原理深度解析" class="headerlink" title="SpringBoot对于SpringMVC的整合原理深度解析"></a>SpringBoot对于SpringMVC的整合原理深度解析</h2><h2 id="SpringServletContainerInitializer初始化流程详解"><a href="#SpringServletContainerInitializer初始化流程详解" class="headerlink" title="SpringServletContainerInitializer初始化流程详解"></a>SpringServletContainerInitializer初始化流程详解</h2>]]></content>
      
      
      <categories>
          
          <category> jdk8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SprigBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解java8</title>
      <link href="/2020/05/29/%E3%80%90JDK8%E3%80%91/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java8/"/>
      <url>/2020/05/29/%E3%80%90JDK8%E3%80%91/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1w4411e7T8?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1w4411e7T8?p=1</a>  </p><h2 id="JAVA8新特性课程介绍"><a href="#JAVA8新特性课程介绍" class="headerlink" title="JAVA8新特性课程介绍"></a>JAVA8新特性课程介绍</h2><h2 id="JAVA8新特性课程介绍续"><a href="#JAVA8新特性课程介绍续" class="headerlink" title="JAVA8新特性课程介绍续"></a>JAVA8新特性课程介绍续</h2><h2 id="lambda表达式初步与函数式接口"><a href="#lambda表达式初步与函数式接口" class="headerlink" title="lambda表达式初步与函数式接口"></a>lambda表达式初步与函数式接口</h2><h2 id="深入函数式接口与方法引用"><a href="#深入函数式接口与方法引用" class="headerlink" title="深入函数式接口与方法引用"></a>深入函数式接口与方法引用</h2><h2 id="lambda表达式深入与流初步"><a href="#lambda表达式深入与流初步" class="headerlink" title="lambda表达式深入与流初步"></a>lambda表达式深入与流初步</h2><h2 id="function接口详解"><a href="#function接口详解" class="headerlink" title="function接口详解"></a>function接口详解</h2><h2 id="function与bifunction函数式接口详解"><a href="#function与bifunction函数式接口详解" class="headerlink" title="function与bifunction函数式接口详解"></a>function与bifunction函数式接口详解</h2><h2 id="predicate深入剖析与函数式编程本质"><a href="#predicate深入剖析与函数式编程本质" class="headerlink" title="predicate深入剖析与函数式编程本质"></a>predicate深入剖析与函数式编程本质</h2><h2 id="supplier与函数式接口总结"><a href="#supplier与函数式接口总结" class="headerlink" title="supplier与函数式接口总结"></a>supplier与函数式接口总结</h2><h2 id="optional深入讲解"><a href="#optional深入讲解" class="headerlink" title="optional深入讲解"></a>optional深入讲解</h2><h2 id="方法引用详解"><a href="#方法引用详解" class="headerlink" title="方法引用详解"></a>方法引用详解</h2><h2 id="方法引用场景剖析与默认方法分析"><a href="#方法引用场景剖析与默认方法分析" class="headerlink" title="方法引用场景剖析与默认方法分析"></a>方法引用场景剖析与默认方法分析</h2><h2 id="stream介绍与操作方式详解"><a href="#stream介绍与操作方式详解" class="headerlink" title="stream介绍与操作方式详解"></a>stream介绍与操作方式详解</h2><h2 id="stream深度解析与源码实践"><a href="#stream深度解析与源码实践" class="headerlink" title="stream深度解析与源码实践"></a>stream深度解析与源码实践</h2><h2 id="stream实例剖析"><a href="#stream实例剖析" class="headerlink" title="stream实例剖析"></a>stream实例剖析</h2><h2 id="stream陷阱剖析"><a href="#stream陷阱剖析" class="headerlink" title="stream陷阱剖析"></a>stream陷阱剖析</h2><h2 id="内部迭代与外部迭代本质剖析及流本源分析"><a href="#内部迭代与外部迭代本质剖析及流本源分析" class="headerlink" title="内部迭代与外部迭代本质剖析及流本源分析"></a>内部迭代与外部迭代本质剖析及流本源分析</h2><h2 id="流的短路与并发流"><a href="#流的短路与并发流" class="headerlink" title="流的短路与并发流"></a>流的短路与并发流</h2><h2 id="stream分组与分区详解"><a href="#stream分组与分区详解" class="headerlink" title="stream分组与分区详解"></a>stream分组与分区详解</h2><h2 id="collector源码分析与收集器核心"><a href="#collector源码分析与收集器核心" class="headerlink" title="collector源码分析与收集器核心"></a>collector源码分析与收集器核心</h2><h2 id="collector同一性与结合性分析"><a href="#collector同一性与结合性分析" class="headerlink" title="collector同一性与结合性分析"></a>collector同一性与结合性分析</h2><h2 id="collector复合与注意事项"><a href="#collector复合与注意事项" class="headerlink" title="collector复合与注意事项"></a>collector复合与注意事项</h2><h2 id="收集器用法详解与多级分组和分区"><a href="#收集器用法详解与多级分组和分区" class="headerlink" title="收集器用法详解与多级分组和分区"></a>收集器用法详解与多级分组和分区</h2><h2 id="比较器详解与类型推断特例"><a href="#比较器详解与类型推断特例" class="headerlink" title="比较器详解与类型推断特例"></a>比较器详解与类型推断特例</h2><h2 id="比较器深入"><a href="#比较器深入" class="headerlink" title="比较器深入"></a>比较器深入</h2><h2 id="自定义收集器实现"><a href="#自定义收集器实现" class="headerlink" title="自定义收集器实现"></a>自定义收集器实现</h2><h2 id="自定义收集器深度剖析与并行流陷阱"><a href="#自定义收集器深度剖析与并行流陷阱" class="headerlink" title="自定义收集器深度剖析与并行流陷阱"></a>自定义收集器深度剖析与并行流陷阱</h2><h2 id="收集器枚举特性深度解析与并行流原理"><a href="#收集器枚举特性深度解析与并行流原理" class="headerlink" title="收集器枚举特性深度解析与并行流原理"></a>收集器枚举特性深度解析与并行流原理</h2><h2 id="collectors工厂类源码分析与实战"><a href="#collectors工厂类源码分析与实战" class="headerlink" title="collectors工厂类源码分析与实战"></a>collectors工厂类源码分析与实战</h2><h2 id="groupinby源码分析"><a href="#groupinby源码分析" class="headerlink" title="groupinby源码分析"></a>groupinby源码分析</h2><h2 id="partioningby与groupingbyconcurrent源码分析"><a href="#partioningby与groupingbyconcurrent源码分析" class="headerlink" title="partioningby与groupingbyconcurrent源码分析"></a>partioningby与groupingbyconcurrent源码分析</h2><h2 id="stream源码分析"><a href="#stream源码分析" class="headerlink" title="stream源码分析"></a>stream源码分析</h2><h2 id="stream与basestream源码分析"><a href="#stream与basestream源码分析" class="headerlink" title="stream与basestream源码分析"></a>stream与basestream源码分析</h2><h2 id="分割迭代器源码剖析"><a href="#分割迭代器源码剖析" class="headerlink" title="分割迭代器源码剖析"></a>分割迭代器源码剖析</h2><h2 id="分割迭代器与forkjoin详解"><a href="#分割迭代器与forkjoin详解" class="headerlink" title="分割迭代器与forkjoin详解"></a>分割迭代器与forkjoin详解</h2><h2 id="分割迭代器实现分析"><a href="#分割迭代器实现分析" class="headerlink" title="分割迭代器实现分析"></a>分割迭代器实现分析</h2><h2 id="ofprimitive与ofint实现原理剖析"><a href="#ofprimitive与ofint实现原理剖析" class="headerlink" title="ofprimitive与ofint实现原理剖析"></a>ofprimitive与ofint实现原理剖析</h2><h2 id="流源构造代码分析"><a href="#流源构造代码分析" class="headerlink" title="流源构造代码分析"></a>流源构造代码分析</h2><h2 id="referencepipeline与abstractpipeline源码深度解读"><a href="#referencepipeline与abstractpipeline源码深度解读" class="headerlink" title="referencepipeline与abstractpipeline源码深度解读"></a>referencepipeline与abstractpipeline源码深度解读</h2><h2 id="iteratorspliterator与流源操作方式详解"><a href="#iteratorspliterator与流源操作方式详解" class="headerlink" title="iteratorspliterator与流源操作方式详解"></a>iteratorspliterator与流源操作方式详解</h2><h2 id="流调用机制与原理大揭秘"><a href="#流调用机制与原理大揭秘" class="headerlink" title="流调用机制与原理大揭秘"></a>流调用机制与原理大揭秘</h2><h2 id="sink与opwrapsink源码解读"><a href="#sink与opwrapsink源码解读" class="headerlink" title="sink与opwrapsink源码解读"></a>sink与opwrapsink源码解读</h2><h2 id="terminalop源码分析与终止操作层次体系"><a href="#terminalop源码分析与终止操作层次体系" class="headerlink" title="terminalop源码分析与终止操作层次体系"></a>terminalop源码分析与终止操作层次体系</h2><h2 id="流延迟求值底层分析与sink连接机制揭秘"><a href="#流延迟求值底层分析与sink连接机制揭秘" class="headerlink" title="流延迟求值底层分析与sink连接机制揭秘"></a>流延迟求值底层分析与sink连接机制揭秘</h2><h2 id="stream中间操作与终止操作层次体系分析与设计思想剖析"><a href="#stream中间操作与终止操作层次体系分析与设计思想剖析" class="headerlink" title="stream中间操作与终止操作层次体系分析与设计思想剖析"></a>stream中间操作与终止操作层次体系分析与设计思想剖析</h2><h2 id="joda项目介绍与实战"><a href="#joda项目介绍与实战" class="headerlink" title="joda项目介绍与实战"></a>joda项目介绍与实战</h2><h2 id="java8全新日期与时间api详解与utc介绍"><a href="#java8全新日期与时间api详解与utc介绍" class="headerlink" title="java8全新日期与时间api详解与utc介绍"></a>java8全新日期与时间api详解与utc介绍</h2><h2 id="java8全新日期与时间api实战"><a href="#java8全新日期与时间api实战" class="headerlink" title="java8全新日期与时间api实战"></a>java8全新日期与时间api实战</h2>]]></content>
      
      
      <categories>
          
          <category> jdk8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk8 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MicroservicesGuide-走近微服务词汇</title>
      <link href="/2020/05/27/%E3%80%90MICROSERVICES%E3%80%91/%E3%80%90MICROSERVICES%E3%80%91MicroservicesGuide-%E8%B5%B0%E8%BF%91%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AF%8D%E6%B1%87/"/>
      <url>/2020/05/27/%E3%80%90MICROSERVICES%E3%80%91/%E3%80%90MICROSERVICES%E3%80%91MicroservicesGuide-%E8%B5%B0%E8%BF%91%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AF%8D%E6%B1%87/</url>
      
        <content type="html"><![CDATA[<h2 id="Microservices-Guide-微服务指南词汇导读"><a href="#Microservices-Guide-微服务指南词汇导读" class="headerlink" title="Microservices Guide 微服务指南词汇导读"></a>Microservices Guide 微服务指南词汇导读</h2><p>我觉得我对有道词典的翻译有点迷…..<br>感觉怪怪的；  </p><p><strong>software</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">so : f : t : wa : re ( 英 /ˈsɒftweə(r)/  )</span><br><span class="line">n. 软件</span><br><span class="line">网络释义 软件；软件；软件；软设备</span><br><span class="line">Software 软件；软件；软件；软设备</span><br><span class="line">free software 自由软件；自由软体；免费软件；自在软件</span><br><span class="line">software framework 软件框架；软体框架；软件架构</span><br><span class="line">software development 软件开发</span><br><span class="line">software design 软件设计；软件开发</span><br><span class="line">software<span class="built_in"> system </span>软件系统</span><br></pre></td></tr></table></figure><p><strong>development</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">de</span> : <span class="string">ve : lo : p : men : t ( 英 /dɪˈveləpmənt/  )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">发展；开发；发育；住宅小区（专指由同一开发商开发的）；[摄]显影</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">developments</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">开发；发展；发育；进化；</span></span><br><span class="line"><span class="attr">Development</span> <span class="string">开发；发展；发育；进化</span></span><br><span class="line"><span class="attr">Software</span> <span class="string">Development 软件开发；软体开发；软件发展；软件研发</span></span><br><span class="line"><span class="attr">Career</span> <span class="string">Development 生涯规划；职业规划；生涯发展；事业发展</span></span><br><span class="line"><span class="attr">sustainable</span> <span class="string">development 可持续发展</span></span><br><span class="line"><span class="attr">economic</span> <span class="string">development 经济发展；经济开发</span></span><br><span class="line"><span class="attr">with</span> <span class="string">the development of 随着 ... 发展</span></span><br></pre></td></tr></table></figure><p><strong>young</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">young</span> <span class="string">( 英 /jʌŋ/ )</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">年轻的；初期的；没有经验的</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">年轻人；（动物的）崽，仔</span></span><br><span class="line"><span class="meta">比较级</span> <span class="string">younger</span></span><br><span class="line"><span class="meta">最高级</span> <span class="string">youngest</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">youngs</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">年轻人；青年版；杨格</span></span><br><span class="line"><span class="attr">Young</span> <span class="string">年轻人；青年版；杨格</span></span><br><span class="line"><span class="attr">Neil</span> <span class="string">Young 尼尔 杨；尼尔杨</span></span><br><span class="line"><span class="attr">Brigham</span> <span class="string">Young 杨百翰；杨百翰大学；</span></span><br></pre></td></tr></table></figure><p><strong>profession</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">p</span> : <span class="string">ro : fe : ssion ( 英 /prəˈfeʃn/ )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">职业；专业；声明；宣布；表白</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">professions</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">职业；专业；专业；行业</span></span><br><span class="line"><span class="attr">profession</span> <span class="string">职业；专业；专业；行业</span></span><br><span class="line"><span class="attr">caring</span> <span class="string">profession 护理行业；照顾他人的职业</span></span><br><span class="line"><span class="attr">Profession</span> <span class="string">informationization 行业信息化</span></span><br><span class="line"><span class="attr">profession</span> <span class="string">of 宣称（感情、信念等）；表白</span></span><br><span class="line"><span class="attr">legal</span> <span class="string">profession 法律界；法律专业</span></span><br><span class="line"><span class="attr">medical</span> <span class="string">profession 医疗职业</span></span><br></pre></td></tr></table></figure><p><strong>still</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">s</span> : <span class="string">t : ill ( 英 /stɪl/  )</span></span><br><span class="line"><span class="meta">adv.</span> <span class="string">仍然；更；静止地</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">静止的；不动的；寂静的；平静的；不起泡的</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">寂静；剧照；蒸馏室</span></span><br><span class="line"><span class="meta">conj.</span> <span class="string">仍然；但是；尽管如此</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">蒸馏；使...静止；使....平静下来</span></span><br><span class="line"><span class="meta">vi.</span> <span class="string">静止；平静；蒸馏</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">静止；仍然；蒸馏釜；依然</span></span><br><span class="line"><span class="attr">still</span> <span class="string">静止；仍然；蒸馏釜；依然</span></span><br><span class="line"><span class="attr">still</span> <span class="string">camera 静物照相机；静物摄影集；拍照机</span></span><br><span class="line"><span class="attr">Still</span> <span class="string">wine 静止葡萄酒；静态葡萄酒；无气葡萄酒；平静葡萄酒</span></span><br><span class="line"><span class="attr">still</span> <span class="string">on 仍在进行</span></span><br><span class="line"><span class="attr">still</span> <span class="string">remains 仍然是</span></span><br><span class="line"><span class="attr">sit</span> <span class="string">still 安静地坐着</span></span><br></pre></td></tr></table></figure><p><strong>learning</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lear</span> : <span class="string">ning ( 英 /ˈlɜːnɪŋ/  )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">学习；学问</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">学习（learn的现在分词）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">学习；学习；学问；知识</span></span><br><span class="line"><span class="attr">learning</span> <span class="string">学习；学习；学问；知识</span></span><br><span class="line"><span class="attr">ensemble</span> <span class="string">learning 集成学习；围绕中心点的划分；组合算法</span></span><br><span class="line"><span class="attr">Blended</span> <span class="string">Learning 混合式学习；混合学习；混合式教学</span></span><br><span class="line"><span class="attr">learning</span> <span class="string">English 学习英语</span></span><br><span class="line"><span class="attr">higher</span> <span class="string">learning n. 高等教育；高深学问；（电影名称）校园大冲突</span></span><br><span class="line"><span class="attr">language</span> <span class="string">learning 语言学习</span></span><br></pre></td></tr></table></figure><p><strong>techniques</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">te</span> : <span class="string">chi : ni : qu : es ( chi 读 k 的音；qu 读 k 的音； 英 /tekˈni:ks/ )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">技术（technique的复数）；方法；技巧</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">技法；技术；技巧；网站架构</span></span><br><span class="line"><span class="attr">Techniques</span> <span class="string">技法；技术；技巧；网站架构</span></span><br><span class="line"><span class="attr">Sampling</span> <span class="string">techniques 采样技术；抽样技术；取样技术；采样妙技</span></span><br><span class="line"><span class="attr">Metallographic</span> <span class="string">Techniques 金相技术</span></span><br><span class="line"><span class="attr">application</span> <span class="string">Techniques 涂装技术</span></span><br><span class="line"><span class="attr">selling</span> <span class="string">techniques 推销技术</span></span><br><span class="line"><span class="attr">motivational</span> <span class="string">techniques 激励技能；激励方法（motivational technique 的复数）</span></span><br></pre></td></tr></table></figure><p><strong>building</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bu </span>: il : ding ( 英 /ˈ<span class="keyword">bɪldɪŋ/ </span> )</span><br><span class="line"><span class="symbol">n.</span> 建筑；建筑物</span><br><span class="line"><span class="symbol">v.</span> 建筑；建立；增加（<span class="keyword">build的ing形式）</span></span><br><span class="line"><span class="keyword">复数 </span><span class="keyword">buildings</span></span><br><span class="line"><span class="keyword">网络释义 </span>建筑物；大楼；号楼；房屋</span><br><span class="line"><span class="keyword">building </span>建筑物；大楼；号楼；房屋</span><br><span class="line"><span class="symbol">green</span> <span class="keyword">building </span>绿色建筑；绿色生态建筑；绿色修建</span><br><span class="line"><span class="symbol">Chrysler</span> <span class="keyword">Building </span>克莱斯勒大厦；克莱斯勒大楼；美国克莱斯勒大厦；克莱斯勒</span><br><span class="line"><span class="keyword">building </span>up 建造；装配；堆焊；建立增长</span><br><span class="line"><span class="symbol">office</span> <span class="keyword">building </span>办公大楼（等于office <span class="keyword">block）</span></span><br><span class="line"><span class="keyword">building </span>material 建筑材料</span><br></pre></td></tr></table></figure><p><strong>tools</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">too : l : s ( 英 /tuːlz/  )</span><br><span class="line">n. [计]工具，工具菜单；工具箱（tool的复数形式）</span><br><span class="line">v. 用工具加工<span class="built_in">..</span>. (tool的第三人称单数形式)</span><br><span class="line">网络释义 工具；刀具；面板；工具栏</span><br><span class="line">Tools 工具；刀具；面板；工具栏</span><br><span class="line">Game Tools 游戏常用工具；游戏常用支持工具集合；游戏开发工具；游戏工具</span><br><span class="line">Debugging Tools 调试工具；翟工具；排错工具；除错工具；</span><br><span class="line">hardware tools 五金工具；日用五金</span><br><span class="line">new tools 新工具</span><br><span class="line">machines <span class="keyword">and</span> tools 机具</span><br></pre></td></tr></table></figure><p><strong>effectively</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e : <span class="type">ffe</span> : <span class="type">c</span> : <span class="type">ti</span> : <span class="type">ve</span> : <span class="type">ly</span> ( 英 /ɪˈfektɪvli/ )</span><br><span class="line">adv. 有效地；生效地；有力地；实际上</span><br><span class="line">网络释义 有效地；起作用地；实际上；有用地</span><br><span class="line">effectively 有效地；起作用地；实际上；有用地</span><br><span class="line">effectively grounded 直接接地；有效被接地；有效接地；有效接地的</span><br><span class="line"><span class="keyword">use</span> effectively 有效利用；有效地利用</span><br></pre></td></tr></table></figure><p><strong>involved</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">in</span> : <span class="string">vol : ve : d (ve 读 v 的音 英 /ɪnˈvɒlvd/  )</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">有关的；卷入的；复杂的</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">涉及；使参与；包含（involve的过去时和过去分词）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">卷入；涉案；涉足；所涉及</span></span><br><span class="line"><span class="attr">Involved</span> <span class="string">卷入；涉案；涉足；所涉及</span></span><br><span class="line"><span class="attr">parties</span> <span class="string">involved 交换中的各方；当事人；当事者；互换中的各方</span></span><br><span class="line"><span class="attr">get</span> <span class="string">involved 介入；加入我们；项目介绍；参与</span></span><br><span class="line"><span class="attr">involved</span> <span class="string">in 涉及；包含；牵涉进...</span></span><br><span class="line"><span class="attr">involved</span> <span class="string">with 涉及；与...有关联</span></span><br><span class="line"><span class="attr">get</span> <span class="string">involved in 涉及；卷入</span></span><br></pre></td></tr></table></figure><p><strong>activity</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span> : <span class="string">c : ti : vi : ty ( 英 /ækˈtɪvəti/ )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">活动；行动；活跃</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">activities</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">活动；活性；活度；活动</span></span><br><span class="line"><span class="attr">Activity</span> <span class="string">活动；活性；活度；活动</span></span><br><span class="line"><span class="attr">logistics</span> <span class="string">activity 物流活动；物流</span></span><br><span class="line"><span class="attr">physical</span> <span class="string">activity 体力活动；体育活动；体能活动</span></span><br><span class="line"><span class="attr">economic</span> <span class="string">activity 经济活动</span></span><br><span class="line"><span class="attr">catalytic</span> <span class="string">activity 催化活性</span></span><br><span class="line"><span class="attr">physical</span> <span class="string">activity 身体活动；体育活动；体力活动</span></span><br></pre></td></tr></table></figure><p><strong>over</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">o : v : er ( 英 /ˈəʊvə(r)/  )</span><br><span class="line">adv. 倒下；翻转；穿过；完全覆盖；以上；大于；再；结束；改变；完毕；仔细地</span><br><span class="line">prep. 在<span class="params">...</span>上面；从<span class="params">...</span>上方；穿越；在<span class="params">...</span>的另一边；在<span class="params">...</span>的远端；从<span class="params">...</span>落下；遍及；多于；在<span class="params">...</span>期间；渡过；由于；关于；利用；通过；声音大于；高于；级别在<span class="params">...</span>之上；优先于；超过</span><br><span class="line">n. （板球）一轮投球</span><br><span class="line">adj. 倒下的；折起来的；结束的；剩下的</span><br><span class="line">v. 越过</span><br><span class="line">网络释义 结束；越过；超过</span><br><span class="line">over 结束；越过；超过</span><br><span class="line">hand over 移交；交出；让与</span><br><span class="line">Over There 那时那地；在那边；在那里；那边</span><br><span class="line"><span class="literal">all</span> over 到处；遍及；浑身；全部结束</span><br><span class="line">over there adv. 在那里</span><br><span class="line">over <span class="literal">and</span> over 反复；再三</span><br></pre></td></tr></table></figure><p><strong>decades</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">n.</span> <span class="string">数十年（decade的复数）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">十年；几十年；几十年来；台阶</span></span><br><span class="line"><span class="attr">decades</span> <span class="string">十年；几十年；几十年来；台阶</span></span><br><span class="line"><span class="attr">Mixed</span> <span class="string">Decades 某某年代风</span></span><br><span class="line"><span class="attr">Frogger</span> <span class="string">Decades 青蛙过河纪念版</span></span><br><span class="line"><span class="attr">over</span> <span class="string">the past decade 在过去的十年里</span></span><br></pre></td></tr></table></figure><p><strong>writing</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wri</span> : <span class="string">ting ( 英 /ˈraɪtɪŋ/  )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">书写；写作技能；著书立说；写作的职业；作品；著作；文字；笔迹</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">书写；写作（write的现在分词）</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">writings</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">写作；书写；文字</span></span><br><span class="line"><span class="attr">Writing</span> <span class="string">写作；书写；文字</span></span><br><span class="line"><span class="attr">Nature</span> <span class="string">Writing 自然写作；自然书写；自然文学</span></span><br><span class="line"><span class="attr">English</span> <span class="string">Writing 英语写作；英文写作；英文书面表达；写作</span></span><br><span class="line"><span class="attr">in</span> <span class="string">writing 书面；书面的；用书面写</span></span><br><span class="line"><span class="attr">writing</span> <span class="string">ability 写作能力；书写能力</span></span><br><span class="line"><span class="attr">writing</span> <span class="string">skill 写作技巧；书写技能；笔头</span></span><br></pre></td></tr></table></figure><p><strong>in the last two</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在最后两个</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">last</span> <span class="literal">two</span> months 在过去的两个月；在最后两个月</span><br><span class="line">In <span class="keyword">the</span> <span class="keyword">last</span> <span class="literal">two</span> years 在最后两年中</span><br><span class="line">In <span class="keyword">the</span> <span class="keyword">last</span> <span class="literal">two</span> decades 在最近二十年</span><br></pre></td></tr></table></figure><p><strong>website</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">we</span> : <span class="string">b : si : te ( 英 /ˈwebsaɪt/ )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">网站（全球资讯网的主机站）</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">websites</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">网站；网址；网站建设；站点</span></span><br><span class="line"><span class="attr">Website</span> <span class="string">网站；网址；网站建设；站点</span></span><br><span class="line"><span class="attr">Website</span> <span class="string">Design 网站设计；网页设计；网站建设；品牌网站形象设计</span></span><br><span class="line"><span class="attr">Website</span> <span class="string">Promotion 网站推广；网站推广常识；网站推广知识；企业网站网络推广；</span></span><br><span class="line"><span class="attr">website</span> <span class="string">design 网站设计</span></span><br><span class="line"><span class="attr">website</span> <span class="string">promotion 网站推广</span></span><br><span class="line"><span class="attr">website</span> <span class="string">development 网站开发；网页设计</span></span><br></pre></td></tr></table></figure><p><strong>patterns</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pa</span> : <span class="string">tter : n : s</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">模式（pattern的复数形式）</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">摹制；用图案装饰；复写（pattern的第三人称单数形式）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">花样；模型；木模；形态</span></span><br><span class="line"><span class="attr">patterns</span> <span class="string">花样；模型；木模；形态</span></span><br><span class="line"><span class="attr">fashionable</span> <span class="string">patterns 花色入时；花样进时；时尚模式；花样入时</span></span><br><span class="line"><span class="attr">Corrective</span> <span class="string">Patterns 调整浪形态；调剂浪形态</span></span><br><span class="line"><span class="attr">development</span> <span class="string">patterns 发展模式</span></span><br></pre></td></tr></table></figure><p><strong>practices</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">p :</span> <span class="string">ra :</span> <span class="string">c :</span> <span class="string">ti :</span> <span class="string">ce :</span> s ( 英 <span class="regexp">/ˈpræktɪsɪs/</span>  )</span><br><span class="line">n. 实践（practice 的复数）；练习</span><br><span class="line">v. 练习（practice的第三人称单数形式）</span><br><span class="line">网络释义 客户专区；业务中心</span><br><span class="line">Practices 客户专区；业务中心</span><br><span class="line">Disciplinazy Practices 惩戒性措施；性措施</span><br><span class="line">Agricultural practices 农业方式；耕作方法；农业方法</span><br><span class="line">cultural practices 文化实践；栽培技术</span><br><span class="line">foreign corrupt practices act 反国外行贿法规</span><br></pre></td></tr></table></figure><p><strong>easier</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ea</span> : <span class="string">si : er ( 英 /'iːzɪə/  )</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">更简单；容易些（easy 的比较级形式）；较早的</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">知易行难；更简单；更容易的；更便捷</span></span><br><span class="line"><span class="attr">Easier</span> <span class="string">知易行难；更简单；更容易的；更便捷</span></span><br><span class="line"><span class="attr">EASIER</span> <span class="string">RIDER 更逍遥的骑士</span></span><br><span class="line"><span class="attr">Work</span> <span class="string">easier 工作比较轻松</span></span><br><span class="line"><span class="attr">easier</span> <span class="string">said than done 说来容易做起来难</span></span><br><span class="line"><span class="attr">make</span> <span class="string">life easier 日子会过得更潇洒；生活变得更加舒适</span></span><br></pre></td></tr></table></figure><p><strong>useful</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">u</span> : <span class="string">se : ful ( 英 /ˈjuːsfl/  )</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">有用的；有益的；有帮助的</span></span><br><span class="line"><span class="meta">比较级</span> <span class="string">more useful；</span></span><br><span class="line"><span class="meta">最高级</span> <span class="string">most useful</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">有用的；有益；软碟通软件；有效的</span></span><br><span class="line"><span class="attr">useful</span> <span class="string">有用的；有益；软碟通软件；有效的</span></span><br><span class="line"><span class="attr">Useful</span> <span class="string">numbers 常用电话号码；常用电话；常用德律风号码；经常使用电话号头</span></span><br><span class="line"><span class="attr">useful</span> <span class="string">resistance 有益阻力</span></span><br><span class="line"><span class="attr">be</span> <span class="string">useful to 对...有用；具有...用途</span></span><br><span class="line"><span class="attr">useful</span> <span class="string">life 使用寿命；有效期</span></span><br><span class="line"><span class="attr">useful</span> <span class="string">data 有用数据和资料</span></span><br></pre></td></tr></table></figure><p><strong>began</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">be </span>: gan ( 英 /<span class="keyword">bɪˈɡæn/ </span>)</span><br><span class="line"><span class="symbol">v.</span> 开始；创建；着手于（<span class="keyword">begin的过去式）</span></span><br><span class="line"><span class="keyword">网络释义 </span>开始；贝加；开始了；才开始；</span><br><span class="line"><span class="keyword">began </span>开始；贝加；开始了；才开始</span><br><span class="line"><span class="keyword">Began </span>menopause 开始更年期</span><br><span class="line"><span class="symbol">Passion</span> <span class="keyword">began </span>翻译公司开始</span><br><span class="line"><span class="keyword">begin </span>with 以...开始；开始于...</span><br><span class="line"><span class="keyword">begin </span>at 几点开始；从..开始</span><br><span class="line"><span class="keyword">begin </span>again 重新开始；重做</span><br></pre></td></tr></table></figure><p><strong>place</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">p</span> : <span class="string">la : ce ( 英 /pleɪs/  )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">地方；住所；座位</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">放置；任命；寄予</span></span><br><span class="line"><span class="meta">vi.</span> <span class="string">名列前茅；取得名次</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">placed</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">placed</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">placing</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">places</span></span><br><span class="line"><span class="meta">第三人称单数</span> <span class="string">places</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">渠道；地方；放置；地点</span></span><br><span class="line"><span class="attr">Place</span> <span class="string">渠道；地方；放置；地点</span></span><br><span class="line"><span class="attr">Lanham</span> <span class="string">Place 朗豪坊；朗豪酒店；朗豪坊商场；朗豪酒店</span></span><br><span class="line"><span class="attr">Martin</span> <span class="string">Place 马丁广场；牛；火车站</span></span><br><span class="line"><span class="attr">in</span> <span class="string">place 适当；适当的；在适当的地方；在适当的位置</span></span><br><span class="line"><span class="attr">place</span> <span class="string">in 安排；放置</span></span><br><span class="line"><span class="attr">take</span> <span class="string">place 发生；举行</span></span><br></pre></td></tr></table></figure><p><strong>publish</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pub</span> : <span class="string">li : sh ( 英 /ˈpʌblɪʃ/  )</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">出版；发表；公布</span></span><br><span class="line"><span class="meta">vi.</span> <span class="string">出版；发行；刊印</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">published</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">published</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">publishing</span></span><br><span class="line"><span class="meta">第三人称单数</span> <span class="string">publishes</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">出版；公布；发布</span></span><br><span class="line"><span class="attr">publish</span> <span class="string">出版；公布；发布</span></span><br><span class="line"><span class="attr">publish</span> <span class="string">connections 发布连接</span></span><br><span class="line"><span class="attr">Publish</span> <span class="string">Entry 发布项；宣布项</span></span><br></pre></td></tr></table></figure><p><strong>articles</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ar</span> : <span class="string">ti : cle : s</span></span><br><span class="line"><span class="attr">n.[语]文章；物品；[法]条款（article的复数）；[语]冠词</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">使受协议条款的约束；指控（article的三单形式）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">冠词；文章；各条；本刊</span></span><br><span class="line"><span class="attr">Articles</span> <span class="string">冠词；文章；各条；本刊</span></span><br><span class="line"><span class="attr">Instant</span> <span class="string">Articles 即时文章；新闻快读；即时文汇；文章快手</span></span><br><span class="line"><span class="attr">Plastic</span> <span class="string">Articles 塑料制品；塑料件；整形篇；主要进口商品英文</span></span><br><span class="line"><span class="attr">articles</span> <span class="string">of association 公司章程；组织章程</span></span><br><span class="line"><span class="attr">articles</span> <span class="string">for daily use 生活用品</span></span><br><span class="line"><span class="attr">original</span> <span class="string">articles 原作；研究文章</span></span><br></pre></td></tr></table></figure><p><strong>colleagues</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">co</span> : <span class="string">lle : gu : es</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">同事；同行（colleague的复数）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">同仁；同人；同事；同事之间</span></span><br><span class="line"><span class="attr">Colleagues</span> <span class="string">同仁；同人；同事；同事之间</span></span><br><span class="line"><span class="attr">Visiting</span> <span class="string">Colleagues 拜访同事；造访同事</span></span><br><span class="line"><span class="attr">Complimenting</span> <span class="string">Colleagues 赞美同事；赞誉同事</span></span><br></pre></td></tr></table></figure><p><strong>joined</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jo</span> : <span class="string">in : ed ( 英 /dʒɔind/  )</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">加入；参加（join的过去式；过去分词）；[计]连接</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">加入；客户留言；连接；招生简章</span></span><br><span class="line"><span class="attr">joined</span> <span class="string">加入；客户留言；连接；招生简章</span></span><br><span class="line"><span class="attr">JOINED</span> <span class="string">Strategy 连接策略</span></span><br><span class="line"><span class="attr">joined</span> <span class="string">field 将两个表中连接字段</span></span><br><span class="line"><span class="attr">join</span> <span class="string">hands 携手；联手；齐心协力</span></span><br><span class="line"><span class="attr">join</span> <span class="string">in 加入；参加</span></span><br><span class="line"><span class="attr">join</span> <span class="string">hands with 握手；同...联合</span></span><br></pre></td></tr></table></figure><p><strong>ThoughtWorks</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>role</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ro : le ( 英 /rəʊl/  )</span><br><span class="line">n. 角色；任务</span><br><span class="line">网络释义 角色；作用；社会角色；任务</span><br><span class="line"><span class="keyword">Role</span> <span class="title">角色；作用；社会角色；任务</span></span><br><span class="line"><span class="title">role</span> playing 角色扮演；角色扮演法；职能演习；角色表演</span><br><span class="line"><span class="keyword">role</span> <span class="title">model</span> 行为榜样；角色模型；榜样；模范</span><br><span class="line"><span class="keyword">role</span> <span class="title">of</span> ....的角色</span><br><span class="line">play an important <span class="keyword">role</span> <span class="title">起到重要作用</span></span><br><span class="line"><span class="title">leading</span> <span class="keyword">role</span> <span class="title">主导作用；主导地位</span></span><br></pre></td></tr></table></figure><p><strong>learn</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lear</span> : <span class="string">n ( 英 /lɜːn/  )</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">学习；得知；认识到</span></span><br><span class="line"><span class="meta">vi.</span> <span class="string">学习；获悉</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">learned 或 learnt</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">learned 或 learnt</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">learning</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">学会；得知</span></span><br><span class="line"><span class="attr">Learn</span> <span class="string">学会；得知</span></span><br><span class="line"><span class="attr">learn</span> <span class="string">about 了解；得知；获悉；听到</span></span><br><span class="line"><span class="attr">learn</span> <span class="string">of 听到；获悉；获悉的事；听说</span></span><br><span class="line"><span class="attr">learn</span> <span class="string">from 向...学习</span></span><br><span class="line"><span class="attr">learn</span> <span class="string">English 学习英语</span></span><br><span class="line"><span class="attr">learn</span> <span class="string">about 了解；学习</span></span><br></pre></td></tr></table></figure><p><strong>deliver</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">de</span> : <span class="string">li : ver ( 英 /dɪˈlɪvə(r)/  )</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">交付；发表；递送；释放；给予（打击）；给...接生</span></span><br><span class="line"><span class="meta">vi.</span> <span class="string">实现；传送；履行；投递</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">投球</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">delivered</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">delivered</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">delivering</span></span><br><span class="line"><span class="meta">第三人称单数</span> <span class="string">delivers</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">投递；交付；发出；发表</span></span><br><span class="line"><span class="attr">deliver</span> <span class="string">投递；交付；发出；发表</span></span><br><span class="line"><span class="attr">deliver</span> <span class="string">value 价值传递；传递价值</span></span><br><span class="line"><span class="attr">Deliver</span> <span class="string">Hope 传递希望；递送希望</span></span><br><span class="line"><span class="attr">deliver</span> <span class="string">the goods 交货；履行诺言</span></span><br><span class="line"><span class="attr">deliver</span> <span class="string">a speech 发表演讲；发表讲话</span></span><br></pre></td></tr></table></figure><p><strong>clients</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">c : lien : ts</span><br><span class="line">n. 顾客；客户端；委托方（client的复数）；救济对象；应受账款</span><br><span class="line">网络释义 客户；客户端；案例；合作客户</span><br><span class="line">Clients 客户；客户端；案例；合作客户</span><br><span class="line">major clients 大客户；主要客户；客户</span><br><span class="line">Entertaining Clients 招待客户；款待客户；宴请客户；接待客户</span><br><span class="line">client<span class="built_in"> service </span>客户服务；向委托部门提供服务</span><br><span class="line">client base 客户群；基本顾客</span><br><span class="line">client side 客户端；使用端</span><br></pre></td></tr></table></figure><p><strong>pass</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pa</span> : <span class="string">ss ( 英 /pɑːs/  )</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">通过；经过；沿某方向前进；使达到（某位置）；传递；传球；遗留给；超过；变化；推移；度过；终止；几个；经表决通过（法律等）；允许；宣布；过；排泄；流通；放弃</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">及格；经过；通行证；道路，山口；传球；飞跃；阶段；鱼道；（桥牌）不叫；（击剑中的）戳刺；变戏法；（计算机）一次浏览</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">passed</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">passed</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">passing</span></span><br><span class="line"><span class="meta">第三人称单数</span> <span class="string">passes</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">传球；通过；经过；传递</span></span><br><span class="line"><span class="attr">Pass</span> <span class="string">传球；通过；经过；传递</span></span><br><span class="line"><span class="attr">scissor</span> <span class="string">pass 交叉传球；交织传球；穿插传球；传球</span></span><br><span class="line"><span class="attr">Khyber</span> <span class="string">Pass 开伯尔山口；开伯尔通道；咖喱王</span></span><br><span class="line"><span class="attr">pass</span> <span class="string">through 穿过....；通过...</span></span><br><span class="line"><span class="attr">come</span> <span class="string">to pass 实现；发生</span></span><br><span class="line"><span class="attr">pass</span> <span class="string">on 传递；继续；去世</span></span><br></pre></td></tr></table></figure><p><strong>wider</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wi</span> : <span class="string">d : er ( 英 /waɪdə(r)/  )</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">宽的；广阔的（wide的比较级形式）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">快尔达；世界发展经济研究所；宽的</span></span><br><span class="line"><span class="attr">WIDER</span> <span class="string">快尔达；世界发展经济研究所；宽的</span></span><br><span class="line"><span class="attr">wider</span> <span class="string">margin 较大差幅；俏利</span></span><br><span class="line"><span class="attr">wider</span> <span class="string">spreading 更大的穿电</span></span><br></pre></td></tr></table></figure><p><strong>industry</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">in</span> : <span class="string">du : s : try ( 英 /ˈɪndəstri/  )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">产业；工业；勤勉</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">industries</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">产业；工业；职业；行业</span></span><br><span class="line"><span class="attr">industry</span> <span class="string">产业；工业；职业；行业</span></span><br><span class="line"><span class="attr">water</span> <span class="string">industry 水利产业；水产业；水工业</span></span><br><span class="line"><span class="attr">automobile</span> <span class="string">industry 汽车工业；汽车产业；汽车业；汽车制造业</span></span><br><span class="line"><span class="attr">industry</span> <span class="string">and commerce 工商业</span></span><br><span class="line"><span class="attr">chemical</span> <span class="string">industry 化学工业</span></span><br><span class="line"><span class="attr">manufacturing</span> <span class="string">industry 制造业；制造工业</span></span><br></pre></td></tr></table></figure><p><strong>site</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">si</span> : <span class="string">te ( 英 /saɪt/ )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">地点；位置；场所</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">设置；为...选址</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">sited</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">sited</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">siting</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">sites</span></span><br><span class="line"><span class="meta">第三人称单数</span> <span class="string">sites</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">站点；场地；现场；场所</span></span><br><span class="line"><span class="attr">Site</span> <span class="string">站点；场地；现场；场所</span></span><br><span class="line"><span class="attr">Site</span> <span class="string">planning 敷地计划；总平面设计；场地规划</span></span><br><span class="line"><span class="attr">Site</span> <span class="string">Selection 选址；基地选择；场地选择</span></span><br><span class="line"><span class="attr">web</span> <span class="string">site 网页；网址</span></span><br><span class="line"><span class="attr">on</span> <span class="string">site 现场；原地；原位</span></span><br><span class="line"><span class="attr">construction</span> <span class="string">site 建筑工地；施工场地</span></span><br></pre></td></tr></table></figure><p><strong>developed</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">de : ve : lo : p : ed ( 英 /dɪˈveləpt/ )</span><br><span class="line">adj. 发达的（国家或地区）；成熟的</span><br><span class="line">网络释义 发达；自主开发；研制出；成熟的</span><br><span class="line">Developed 发达；自主开发；研制出；成熟的</span><br><span class="line">developed countries 发达国家；已开发国家；已发展国家；发达国家或工业化国家</span><br><span class="line">developed dimension 展开尺寸</span><br><span class="line">developed country n.发达国家</span><br><span class="line">developed<span class="built_in"> area </span>[计]展开面积</span><br><span class="line">less developed 欠发达地区；不发达的</span><br></pre></td></tr></table></figure><p><strong>respected</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">re :</span> <span class="string">s :</span> <span class="string">pe :</span> <span class="string">c :</span> <span class="string">te :</span> d ( 英 <span class="regexp">/ri'spektid/</span>  )</span><br><span class="line">adj. 受尊敬的</span><br><span class="line">v. 尊敬；重视（respect的过去式和过去分词）</span><br><span class="line">网络释义 推崇；受尊敬的；德高望重；受人尊敬</span><br><span class="line">Respected 推崇；受尊敬的；德高望重；受人尊敬</span><br><span class="line">Are respected 很受尊敬</span><br><span class="line">Respected person 德高望重的人</span><br><span class="line">respected ideas 公认理论；权威理论</span><br><span class="line">be respected <span class="keyword">as</span> 被尊为...</span><br></pre></td></tr></table></figure><p><strong>platform</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p : la : t : <span class="keyword">for</span> : m ( 英 /ˈplætfɔːm/  )</span><br><span class="line">n. 平台；月台；站台；坛；讲台；厚底松糕鞋</span><br><span class="line">网络释义 平台；站台；台；平台</span><br><span class="line">platform 平台；站台；台；平台</span><br><span class="line">side platform 侧式站台；侧式月台；侧向式站台；侧向收割台</span><br><span class="line">fixed platform 固定平台；固定式平台；固定式钻井平台</span><br><span class="line">service platform 工作台；操作平台</span><br><span class="line">offshore platform 海上平台；近海平台</span><br><span class="line">open platform 开放平台</span><br></pre></td></tr></table></figure><p><strong>edited</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">e</span> : <span class="keyword">di</span> :<span class="keyword">te</span> : <span class="keyword">d</span> ( 英 /'<span class="keyword">ed</span>ɪtɪ<span class="keyword">d</span>/  )</span><br><span class="line">adj. 编辑过的</span><br><span class="line">v. 编辑；校订；剪接；主编（<span class="keyword">edit</span>的过去式和过去分词）</span><br><span class="line">网络释义 编辑过的；编辑；分钟；已编辑</span><br><span class="line">Edited 编辑过的；编辑；分钟；已编辑</span><br><span class="line">Edited Books 编辑书籍</span><br><span class="line">SpinnBox Edited 旋转方块</span><br><span class="line"><span class="keyword">edit</span> box [计]编辑框</span><br><span class="line"><span class="keyword">edit</span> mode [计]编辑方式</span><br><span class="line"><span class="keyword">edit</span> <span class="keyword">window</span> 编辑窗口</span><br></pre></td></tr></table></figure><p><strong>published</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adj. 已发布的</span><br><span class="line">v. 出版；发行（publish的过去式）</span><br><span class="line">网络释义 刊登；刊出；刊发；刊载</span><br><span class="line">Published 刊登；刊出；刊发；刊载</span><br><span class="line">published<span class="built_in"> interface </span>已发布接口；发布接口</span><br><span class="line">published angle 预定</span><br><span class="line">published price 图书零售价；定价；公布价格</span><br></pre></td></tr></table></figure><p><strong>ThoughtWorkers</strong></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">**others**</span><br></pre></td></tr></table></figure><p>  o : ther : s ( 英 /ˈʌðə(r)z/   )<br>  pron. 其他人<br>  网络释义 其它；其他；全部信息；其他组件保养<br>  Others 其他；其它；全部信息；其他组件保养<br>  the others 小岛惊魂；神鬼第六感；其它<br>  Introduce Others 先容别人<br>  each other 彼此；互相<br>  on the other 另一方面<br>  on the other hand 另一方面</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*reach*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  rea : ch (  英 /riːtʃ/ )<br>  vi. 达到；延伸；伸出手；传开<br>  vt. 达到；影响；抵达；伸出<br>  n. 范围；延伸；河段；横风行驶<br>  第三人称单数 reaches<br>  过去式 reached<br>  过去分词 reached<br>  现在分词 reaching<br>  网络释义 到达；达到；到达率；化学品注册<br>  Reach 到达；达到；到达率；化学品注册<br>  Reach Me 书缘寻踪；抓住我；请与我联系；联系我<br>  reach out 伸出；提供援助；接纳我<br>  reach out vt. 伸出<br>  reach for 伸手去拿<br>  reach an agreement 达成协议；取得一致意见；达成共识</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*audience*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  au : di : en : ce ( 英 /ˈɔːdiəns/  )<br>  n. 观众；听众；读者；接见；正式会见；拜会<br>  网络释义 观众；听众；受众；阅听人<br>  Audience 观众；听众；受众；阅听人<br>  target audience 目标观众；目标消费者；目标大众；目标受众<br>  Audience area 听众区；看台区；观众区<br>  target audience 目标受众；目标观众；目标客户<br>  audience rating n. 收视率；试听率<br>  mass audience 大众受众</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*material*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  ma : te : ri : al ( 英 /məˈtɪəriəl/  )<br>  n. 材料；用具；（有指明特征的）人才；素材；曲目；布料<br>  adj. 物质的；身体需要的；和推理内容相关的；重要的；（证据或事实）决定性的；客观存在的；物欲的<br>  n. (Material)(意、美)妈特力娅丽（人名）<br>  复数 materials<br>  网络释义 材质；材料；物料；资料<br>  Material 材质；材料；物料；资料<br>  Material Girl 物质女孩；拜金女孩；物质女郎；拜金女郎<br>  insulating material 隔热材料；绝热材料；绝缘物<br>  raw material 原料<br>  teaching material 教学内容；教学资料<br>  new material 新材料</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*MicroServices*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  Mi: cro : Ser : vi : ce : s<br>  微服务；<br>  微服务架构<br>  网络释义 微服务；微服务架构<br>  Microservices 微服务；微服务架构<br>  cognitive microservices 认知微服务；认证微服务<br>  Microservices Architecture 微服务架构</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*Guide*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  gui : de  ( 英 /ɡaɪd/ )<br>  n. 指南；向导；入门书；<br>  vt. 引导；带领；操纵；<br>  vi. 担任向导；<br>  n.(Guide)人名；（法、葡）吉德<br>  过去式 guided；<br>  过去分词 guided；<br>  现在分词 guiding；<br>  复数 guides；<br>  第三人称单数 guides；<br>  网络释义 导游、指导、指南、领队<br>  Guide 导游；指导；指南；领队；<br>  guide post 路标；引导柱；导柱；导杆<br>  User Guide 说明书；用户指南；用户操作手册</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*In short*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  总之；<br>  简言之；<br>  网络释义 简言之；总之；简而言之；简单地说<br>  in short 简言之；总之；简而言之；简单地说<br>  in the short term 从短期来看<br>  in a short time 不久；在短时间内</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*architectural*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  ar : chi : te : c : tur : al（chi读ki的音，英 /ˌɑːkɪˈtektʃərəl/  ）<br>  adj. 建筑学的；建筑上的；符合建筑法的<br>  网络释义 建筑；建筑设计；建筑材质；建筑学的<br>  architectural 建筑；建筑设计；建筑材质；建筑学的<br>  architectural style 建筑风格；建筑形式；架构风格<br>  Architectural acoustics 建筑声学；建筑音响；构筑声学；建筑音响学</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*style*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  s : ty : le  （ 英 /staɪl/ ）<br>  n. 风格；时尚；类型；字体<br>  vt. 设计；称呼；使合潮流<br>  vi. 设计式样；用刻刀作装饰画<br>  n. (Style)人名；（英）斯泰尔<br>  过去式 styled；<br>  过去分词 styled；<br>  现在分词 styling；<br>  复数 styles；<br>  第三人称单数 styles；<br>  网络释义 风格；样式；款式；作风<br>  style 风格；样式；款式；作风<br>  Style 作风<br>  Text Style 字体样式；字布局；文字样式；文字布局</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="number">*a</span>pproach <span class="keyword">to</span>**</span><br></pre></td></tr></table></figure><p>  a : pp : roa : ch  （ 英 /əˈprəʊtʃ/  ）<br>  接近；约等于；通往…的方法<br>  网络释义 约等于；接近；类似；办法；<br>  approach to 约等于；接近；类似；办法<br>  approach h to criticality 接近临界<br>  approach h to 做某事的方法；约等于；接近；对…的态度</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*developing*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  de : ve : lo : ping  （ 英 /dɪˈveləpɪŋ/  ）<br>  adj. 发展中的；生长的；变化的<br>  n. 发展<br>  v. 发展；成长；产生；感受；使（摄影胶片）显影（develop的现在分词）<br>  网络释义 发展；发展中的；显影；开发<br>  Developing 发展；发展中的；显影；开发<br>  developing trend 发展趋势；发展走向；趋势<br>  developing machine 洗片机；显影机；头影机（这个头？我抄的有道词典上的）；显色机</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*single*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  sin : gle （ 英 /ˈsɪŋɡl/ ）<br>  adj. 单一的；单身的；单程的<br>  n. 一个；单打；单程票<br>  vt. 选出<br>  vi. 击出一垒安打<br>  过去式 singled<br>  过去分词 singled<br>  现在分词 singling<br>  复数 singles<br>  第三人称单数 singles<br>  网络释义 未婚；一垒安打；单曲；单一的；<br>  single 未婚；一垒安打；单曲；单一的<br>  single market 统一市场；北京市场；单一市场；同一市场<br>  single parent 单亲家庭；单亲；单父协同；单亲母亲</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="built_in">application</span>**</span><br></pre></td></tr></table></figure><p>  a : pp : li : ca : tion （ 英 /ˌæplɪˈkeɪʃn/  ）<br>  n. 应用；申请；应用程序；敷用；（对事物、学习等）投入<br>  网络释义 用途；应用软件；应用<br>  APPLICATION 用途；应用软件；应用<br>  application fee 申请费；报名费；申请费用；登记费<br>  patent application 专利申请；专利申请书；专利声请；专利申请说明书</p><p>  patent<br>  pa : ten : t  （英 /‘pæt(ə)nt; ‘peɪt(ə)nt/）<br>  n. 专利权；专利证；专利品；<br>  adj. 专利的；特许生产或销售的；显著的；公开的；（脉管等）开放的<br>  v. 取得…的专利权；授予专利<br>  复数 patents<br>  过去式 patented<br>  过去分词 patented<br>  现在分词 patenting<br>  第三人称单数 patents<br>  网络释义 专利权；专利；专利品；科技玩具<br>  patent 专利权；专利；专利品；科技玩具<br>  patent family 专利族；同族专利<br>  patent attorney 专利律师；专利代理人；称为专利法务人员</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">**a suite of**</span></span><br></pre></td></tr></table></figure><p>  s : ui : te（ui读wi的音， 英 /swiːt/ ）<br>  一系列<br>  网络释义 一套；一整组；详细翻译（详细翻译&gt;&gt;a suite of 一系列；一套…）<br>  a suite of 一套；一整组；详细翻译<br>  a suite of racks 一套机架<br>  a suite of paintings 一组从不同角度和层次反映同一中心思想和题材的绘画</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*small*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  s : ma : ll  （ 英 /smɔːl/  ）<br>  adj. 少的，小的；微弱的；几乎没有的；不重要的；幼小的<br>  adv. 小小地；卑鄙地<br>  n. 小件物品；矮小的人<br>  n. （Small）人名；（英）斯莫尔<br>  网络释义 小的；小型的；小码；卡片纸英国标准<br>  small 小的；小型的；小码；卡片纸英国标准<br>  small intestine 小肠<br>  small incision 小切口；隧道切口；微创；微小切口</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*services*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  s : er : vi : ce : s  （ 英 /‘sə:visis/ ）<br>  n. 服务；服务项目（service复数形式）<br>  v. 服务（service的第三人称单数）<br>  网络释义 服务；服务项目；服务范围；服务业<br>  Services 服务；服务项目；服务范围；服务业<br>  Services 服务<br>  Web Services 网络服务；Web服务；应用</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="keyword">each</span>**</span><br></pre></td></tr></table></figure><p>  ea : ch  （ 英 /iːtʃ/  ）<br>  det. （两个或两个以上的人或物中）各自<br>  pron. （两个或两个以上的人或物中）每个<br>  adv. 每个地<br>  adj. 各自的<br>  网络释义 每个；各自；每次；每一<br>  Each 每个；各自；每次；每一<br>  each other 互相；彼此；相互；取长补短<br>  Each line 每行</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="built_in">running</span>**</span><br></pre></td></tr></table></figure><p>  run : ning  （ 英 /ˈrʌnɪŋ/  ）<br>  n. 运转；赛跑；流出<br>  adj. 连续的；流动的；跑者的，运转着的<br>  v. 跑；运转（run的ing形式）；行驶<br>  n. (Running)人名；（英）朗宁<br>  网络释义 跑步；跑；磨合；运行<br>  running 跑步；跑；磨合；运行<br>  Running Man 过关斩将；奔跑吧兄弟；落跑老爸；奔跑的男人<br>  running shoes 跑步鞋；慢跑鞋；竞走鞋</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*own*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  o : wn （ 英 /əʊn/  ）<br>  vt. 拥有；承认<br>  vi. 承认<br>  adj. 自己的；特有的<br>  n. 自己的<br>  n.（Own）人名；（阿拉伯）奥恩（我就服这些人名，不会读是吧，读这个中文式译音人名就会读了）</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="built_in">process</span>**</span><br></pre></td></tr></table></figure><p>  p : ro : ce : ss  (  英 /prəˈses; (for n.) ˈprəʊses/ )<br>  n. （为达到某一目标的）过程；（自然变化的）工程；工艺流程；诉讼程序；传票；突起；进展；（发型）直发式<br>  v. 加工；审核；处理（数据）；队列行进；冲印（照片）；把（头发）弄成直发<br>  adj. 经过特殊加工的；照相板的；染印法的<br>  第三人称单数 processes<br>  过去式 processed<br>  过去分词 processed<br>  现在分词 processing<br>  复数 processes<br>  网络释义 进程；流程；过程<br>  process 进程；流程；过程<br>  Process Management 进程管理；过程管理；流程管理；进程管理<br>  Background Process 后台进程；背景程序；背景处理程序</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*communicating*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  com : mu : ni : ca : ting ( 英 /kə’mjʊnə,keɪtɪŋ/ )<br>  adj. （房间）相同的，相连的<br>  v. 交流；传递；传播（communicate的现在分词）<br>  网络释义 沟通；交流；通信的互通的；交流与通讯<br>  Communicating 沟通；交流；通信的互通的；交流与通讯<br>  communicating vessels 连通器；连通管<br>  Communicating junctions 通讯连接</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*lightweight*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  li : ght : wei : ght ( 英 /ˈlaɪtweɪt/ )<br>  n. 轻量级（拳击手）；比通常重量轻的人或东西；无足轻重的人（或事）<br>  adj. 轻量的；给人印象不深的；无足轻重的；比通常重量轻的；浅薄的；<br>  网络释义 轻量级；轻身的；轻量；轻量化；<br>  lightweight 轻量级；轻身的；轻量；轻量化<br>  lightweight 轻填料；轻质搀和料<br>  lightweight cover 轻型上盖；避雷保护</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*mechanisms*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  me : cha : ni : sm : s（cha 读 ke 的音，英 /‘mekənɪzəmz/ ）<br>  n. 机制；[计]机构（mechanism的复数）；机械；[机]机构学<br>  网络释义 发病机制；发生机制；机制；机构<br>  Mechanisms 发病机制；发生机制；机制；机构<br>  interaction mechanisms 互动机制；作用机制<br>  resistant mechanisms 耐药机制；抗病机制</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*often*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  o : f : ten ( 英 /ˈɒfn; ˈɒftən/  )<br>  adv. 常常；时常；往往，大多<br>  比较级 more often 或 oftener；<br>  最高级 most often 或 oftenest<br>  网络释义 经常；常常；时常；常有<br>  Often 进场；常常；时常；常有<br>  more often 更经常；经常；更多的时候；更多<br>  OFT OFTen 常常；再三</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*HTTP*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  H : T : T : P ( 英 /ˌeɪtʃ tiː tiː ˈpiː/  )<br>  abbr. 超文本传输协议（Hyper Text Transfer Protocol）<br>  网络释义 超文本传输协议（Hyper Text Transfer Protocol）；网站；平台；超文本传送协议</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*resource*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  re : sou : r : ce ( 英 /rɪˈsɔːs; rɪˈzɔːs/  )<br>  n. 资源，财力；办法；智谋<br>  vi. 向…提供资金<br>  网络释义 资源；资源类型；财力；办法<br>  Resource 资源；资源类型；财力；办法<br>  human resource 人力资源；激励；人事部<br>  computational resource 计算资源</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*API*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  A : P : I ( /ˌeɪ piː ˈaɪ/  )<br>  abbr. 空气污染指数（Air Pollution Index）；应用程序界面（Application Program Interface）；精确位置指示器（Accurate Position Indicator）；美国石油学会（American Petroleum Institute）；自动发音教学机（Automated Pronunciation Instructor）<br>  网络释义 美国石油协会；应用程序接口；美国石油学会；应用编程接口<br>  API 美国石油协会；应用程序接口；美国石油学会；应用编程接口<br>  Windows API 使用；调用；关于进程操作的；关于线程操作的<br>  Google API 谷歌应用界面；应用程序编程接口；网址二维码生成函数；应用程序接口</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*these*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  th : e : se ( 英 /ðiːz/  )<br>  det. 这些（this的复数）<br>  pron. 这些（this的复数）<br>  adj. 这些的（this的复数）<br>  网络释义 这些，此等；复数；这些个<br>  These 这些；此等；复数；这些个<br>  Know these 知其然；到知其然<br>  These payments 营养费</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*built*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  bu : il : t ( 英 /bɪlt/ )<br>  v. 建造，建立；逐步增强；把…嵌入（墙壁、物体等）（build的过去式和过去分词）<br>  adj. 有…体格的；身段优美的；….建成的<br>  网络释义 建起；比优丽；建有；建好<br>  Built 建起；比优丽；建有；建好<br>  Built NY 比优丽<br>  BLT Built 建造；制作<br>  built in 安装在里面的；装入的；机内的<br>  built up 组合<br>  built on 以…作基础</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="keyword">around</span>**</span><br></pre></td></tr></table></figure><p>  a : roun : d ( 英 /əˈraʊnd/  )<br>  adv. 在四周；朝对立面；到处；漫无目的的；在附近；大约；围绕；以圆周计算；现有；转弯<br>  prep. 围绕；在那边；绕着；同…一致；到处；以（已提及物）为中心；迂回<br>  网络释义 围绕；四处；在周围；大约<br>  Around 围绕；四处；在周围；大约；<br>  come around 苏醒；顺便来访；来访；复原<br>  stick around 在附近逗留或等待；在附近等着；在邻近勾留或等候；逗留<br>  all round 周围；到处，四处<br>  around here 附近；在这周围<br>  go around 四处走动；供应；（消息）流传</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*business*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  bu : si : ne : ss ( 英 /ˈbɪznəs/ )<br>  n. 商业，交易；生意；事务，业务；职业，行业；<br>  网络释义 商业；生意；企业；业务<br>  Business 商业；生意；企业；业务<br>  Business 业务<br>  business cycle 商业周期；经济周期；商业周期；景气循环<br>  business card 名片；商务名片<br>  in business 经商；在经营；在商界<br>  business philosophy 经营理念，经营哲学</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*capabilities*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  ca : pa : bi : li : ti : es ( 英 /ˌkeɪpəˈbɪlətɪs/  )<br>  n. 能力（capability的复数）；功能；性能<br>  网络释义 能力；功能；权限；责任<br>  capabilities 能力；功能；权限；责任<br>  economic capabilities 经济实力；经济能力<br>  defense capabilities 防卫作战能力；防务能力；防卫功能；<br>  process capability 加工能力；工序能力<br>  design capability 设计能力</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*independently*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  in : de : pen : den : t : ly ( 英 /ˌɪndɪˈpendəntli/  )<br>  adv. 独立地；自立地<br>  网络释义 各自地；独立地；独自地；自立地<br>  independently 各自地；独立地；独自地；自立地<br>  think independently 独立思考；独立的思考<br>  living independently 独立生活<br>  independently of 独立于…之外；与…无关</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*deployable*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  de : p : lo : y : a : ble<br>  adj. 可开展的<br>  网络释义 可开展的；散播性<br>  deployable 可开展性的；散播性<br>  Deployable Structures 折叠结构；可展结构<br>  deployable joint 运动关节</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*fully*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  fu : lly ( 英 /ˈfʊli/  )<br>  adv. 充分地；完全地；彻底地<br>  n. (Fully)人名；（法）菲利<br>  网络释义 完全地；彻底地；充分地；十分地<br>  fully 完全地；彻底地；充分地；十分地<br>  FULLY OPENING 全开口；全启齿；齐闭口<br>  fully  secured 足额担保；全额担保<br>  fully automatic 全自动的<br>  fully integrated 完全整合<br>  fully loaded 满载</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="built_in">auto</span>mated**</span><br></pre></td></tr></table></figure><p>  au : to : ma : te : d ( 英 /ˈɔːtəˌmeɪtɪd/  )<br>  adj. 自动化的；机械化的<br>  v. 自动化（automate的过去分词）；自动操作<br>  网络释义 自动化的；自动的；机械化的；自动化<br>  automated 自动化的；自动的；机械化的；自动化<br>  automated design 自动设计；自动化设计；自动想象<br>  Automated inspection 自动化检验；自动检验<br>  automated machine 自动化机械；自动化的机器<br>  automated teller machine 自动柜员机<br>  automated welding 自动焊接</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*deployment*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  de : p : lo : y : men : t ( 英 /dɪˈplɔɪmənt/ )<br>  n. 调度，部署<br>  复数 deployments<br>  网络释义 部署；展开；发布；布防<br>  Deployment 部署，展开；发布；布防<br>  Deployment Editors 部署编辑器；安排编纂器<br>  Resources deployment 资源配置<br>  disposition n.调度，部署</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*machinery*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  ma  chi : ne : ry ( 英 /məˈʃiːnəri/  )<br>  n. 机械；机器；机构；机械装置<br>  网络释义 机械；机器；机具<br>  machinery 机械；机器；机具<br>  packaging machinery 包装机械；包装设备；包装机器；放大器<br>  Electrical Machinery 电机学；电力机械；电机；电机驱动<br>  machinery and equipment 机器及设备<br>  construction machinery 建筑机械；施工机械<br>  agricultural machinery 农业机械</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*there*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  the : re ( 英 /ðeə(r)/  )<br>  adv. 在那里；在那边；在那点上；<br>  int. 你瞧<br>  n. 那个地方<br>  网络释义 那里；在那里；那儿；那<br>  There 那里；在那里；那儿；那<br>  Always There 永驻；守候一生；到约定的那时；总在我身旁<br>  There be 句型；的句子结构；存在句；结构<br>  out there 到战场；在那里<br>  over there adv. 在那里<br>  go there 去那里</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*bare*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  b : are ( 英 /beə(r)/ )<br>  adj. 空的；赤裸的；无遮蔽的<br>  vt. 露出；使赤裸<br>  n. (Bare)人名；（英）贝尔<br>  比较级 barer<br>  最高级 barest<br>  过去式 bared<br>  过去分词 bared<br>  现在分词 baring<br>  网络释义 赤裸的；光光；赤裸；仅仅的<br>  bare 赤裸的；光光；裸露；仅仅的<br>  bare mass 裸质量<br>  bare machine 裸机；硬件计算机；裸机<br>  bare of vt. 几乎没有，缺乏<br>  lay bare 揭发，暴露；公开<br>  bare feet 赤脚；光脚；光着脚</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*minimum*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  mi : ni : mum ( 英 /ˈmɪnɪməm/ )<br>  n. 最小值；最低限度；最小化；最小量<br>  adj.最小的；最低的<br>  复数 minimums 或 minima<br>  网络释义 最小的；最低；起码；最小量<br>  minimum 最小的；最低；起码；最小量<br>  minimum charge 最低费用；最低运费；最低收费<br>  minimum balance 最小库存余量；最低余额；存款限制；把费用减到最低限度</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="keyword">bare </span>minimum of**</span><br></pre></td></tr></table></figure><p>  最低限度的<br>  网络释义 Bare Minimum Of Expense 最低支出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*centralized*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  cen : tra : li : ze : d ( 英 /‘sentrəlaɪzd/  )<br>  adj. 集中的；中央集权的<br>  v. 集中（centralize的过去分词）<br>  网络释义 集中的，中央集权的；一致<br>  Centralized 集中的；中央集权的；一致<br>  centralized control 集中控制；中央控制；集中控制方式；中心控制<br>  Centralized Monitoring 集中监控；中化监查<br>  centralized management 集中式管理；集权管理<br>  centralized control 集中控制<br>  centralized processing 集中式处理</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*management*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  ma : na : ge : men : t ( 英 /ˈmænɪdʒmənt/  )<br>  n. 管理；管理人员；管理部门；操纵；经营手段<br>  复数 managements<br>  网络释义 管理；经营；管理学；管理层；<br>  Management 管理；经营；管理学；管理层<br>  Management Accounting 管理会计；管理会计学；治理会计；会计管理<br>  performance management 绩效管理；业绩管理；性能管理<br>  management system 管理系统；经营责任制<br>  quality management 质量管理<br>  project management 项目管理；专案管理</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*written*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  wri : tten ( 英 /ˈrɪtn/  )<br>  adj. 书面的，成文的，文字的<br>  v. 写（writen的过去分词）<br>  网络释义 写成；写给；书面；成文<br>  Written 写成；写给；书面；成文<br>  written English 书面英语；书面语；书面表达；英语书面语<br>  written notice 书面通知；面通知；书面通知<br>  written by 由…所写<br>  written english 书面英语<br>  written consent 书面同意；同意书</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*different*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  di : ffe : ren : t ( 英 /ˈdɪfrənt/  )<br>  adj. 不同的；个别的；与众不同的<br>  网络释义 不同；差异；两样<br>  Different 不同；差异；两样<br>  different from 不同于；两回事；不同；区别于<br>  Different Seasons 四季奇谭；不同的季节；肖申克的救赎；不同季节<br>  different from 与…不同，不同于<br>  different kinds 不同的种类<br>  in different ways 以不同方式；用不同方法；通过不同的方式</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*programming*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  pro : g : ram : ming ( 英 /ˈprəʊɡræmɪŋ/  )<br>  n. 设计；规划；编制程序；[计]程序编制<br>  网络释义 编程；程序设计；编程；程序编制<br>  programming 编程；程序设计；编程；程序编制<br>  Linear Programming 线性规划；第二十九章；线性程序编制；线性规划法<br>  generic programming 泛型；泛型编程；程序设计；类属编程<br>  linear programming n. 线性规划<br>  programming language 编程语言；程序设计语言<br>  dynamic programming 动态规划；动态程序设计</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*languages*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  lan : g : ua : ge : s ( 美 /‘læŋgwɪdʒ/ )<br>  n. 语系，语种；语言文字（language复数）<br>  网络释义 语文；语言；语言能力；语言学<br>  Languages 语文；语言；语言能力；语言学<br>  altaic languages 阿尔泰语系；阿尔泰语言<br>  Uralic languages 乌拉尔语系<br>  modern languages 现代语言（modern language的复数）<br>  foreign languages school 外语学校<br>  romance languages 罗曼斯语（由拉丁语演变而成的语言）</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="keyword">use</span>**</span><br></pre></td></tr></table></figure><p>  u : se ( 英 /juːz/  )<br>  n. 使用；用途；发挥<br>  vt. 利用；耗费<br>  vi. 使用，运用<br>  n.(Use)人名；（德）乌泽<br>  过去式 used<br>  过去分词 used<br>  现在分词 using<br>  复数 uses<br>  第三人称单数 using<br>  网络释义 使用；用途；利用；应用<br>  use 使用；用途；利用；应用<br>  use up 用完；用光；耗尽<br>  Use Case 用例；用例图<br>  make use of 使用；利用<br>  in use 在使用中<br>  of use 有用</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="class"><span class="keyword">data</span>**</span></span><br></pre></td></tr></table></figure><p>  da : ta ( 英 /ˈdeɪtə; ˈdɑːtə/  )<br>  n. 数据（datum的复数）；资料<br>  n. (Data)人名；(日)驮太 (姓)；(印、葡)达塔<br>  网络释义 数据；资料；数据区；参考数据<br>  data 数据；资料；数据区；参考数据<br>  Data Center 数据中心；资料中心；数据交互中心<br>  data collection 数据收集；数据采集；数据搜集；搜集资料<br>  data processing 数据处理<br>  experimental data 实验数据；试验数据<br>  data mining 数据挖掘技术（即指从资料中发掘咨询或知识）</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*storage*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  s : to : ra : ge ( 英 /ˈstɔːrɪdʒ/  )<br>  n. 存储；仓库；贮藏所<br>  复数 storages<br>  网络释义 存储；储存；保管；贮藏；<br>  Storage 存储；储存；保管；贮藏<br>  storage room 行李仓；储物室；储藏室；贮藏室<br>  cold storage 冷藏；冷藏库；冷库；冷藏公司<br>  data storage 数据存储<br>  storage system 存储系统；存储器存储系统<br>  energy storage 蓄能；能量储存；储能器</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*technologies*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>  te : ch : no : lo : gi : es (  美 /tɛk’nɑlədʒi/  )<br>  n. 技术；科技（technology的复数）<br>  网络释义 姓；科技<br>  Technologies 姓；科技<br>  Agilent Technologies 安捷伦科技公司；安捷伦科技有限公司；安捷伦<br>  United Technologies 联合技术；联合技术公司；联合科技；联合科技公司<br>  united technologies 联合科技（财富500强公司之一，总部所在地美国，主要经营航空航天）<br>  cleaner technologies 净化技术；清洁技术<br>  lucent technologies 美国朗讯科技公司（财富500强公司之一）<br>```</p>]]></content>
      
      
      <categories>
          
          <category> MICROSERVICES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MICROSERVICES </tag>
            
            <tag> 词汇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MicroservicesGuide-走近微服务</title>
      <link href="/2020/05/27/%E3%80%90MICROSERVICES%E3%80%91/%E3%80%90MICROSERVICES%E3%80%91MicroservicesGuide-%E8%B5%B0%E8%BF%91%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/05/27/%E3%80%90MICROSERVICES%E3%80%91/%E3%80%90MICROSERVICES%E3%80%91MicroservicesGuide-%E8%B5%B0%E8%BF%91%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Nothing better than a buzy Saturday morning.</p></blockquote><p>为什么想要翻译这篇博客呢，因为也是看了b站上的一个学习springboot的一个视频，而且我今天面试的时候人家问了微服务是什么，然后由此可得我万分后悔没有当时通篇翻译这篇博客。<br>好了现在后悔也挽救不了我的愚不可及了。<br>观看笔记：<a href="https://www.bilibili.com/video/BV1Eg4y187XT" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Eg4y187XT</a><br>就是这个视频告诉了我：推荐看哦~<br>为了不后悔，以后每件事情，能做笔记就一定要压着自己做，不然会后悔的；  </p><h2 id="Microservices-Guide-微服务指南（翻译）"><a href="#Microservices-Guide-微服务指南（翻译）" class="headerlink" title="Microservices Guide 微服务指南（翻译）"></a>Microservices Guide 微服务指南（翻译）</h2><p>链接：<a href="https://www.martinfowler.com/microservices/" target="_blank" rel="noopener">https://www.martinfowler.com/microservices/</a>  </p><blockquote><p>A guide to material on martinfowler.com about microservices.<br><strong>Matin Fowler</strong><br>21 Aug 2019  </p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">martinfowler.com网站关于微服务的一个材料指南</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">--------------------------------------------------------</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">有道词典翻译：</span></span><br><span class="line"><span class="keyword">martinfowler.com </span>上关于微服务的材料指南。</span><br></pre></td></tr></table></figure><h3 id="Microservices-Guide"><a href="#Microservices-Guide" class="headerlink" title="Microservices Guide"></a>Microservices Guide</h3><h4 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h4><blockquote><p>In short , the microservice architectural style is an approach to developing a single application as a <strong>suite of small services</strong> , each <strong>running in its own process</strong>  and communicating with lightweight mechanisms , often an HTTP resource API .<br>These services are <strong>built around business capabilities</strong> and <strong>independently deployable</strong> by fully automated deployment machinery .<br>There is a bare minimum of centralized management of these services , which may be written in different programming languages and use different data storage technologies .<br>– <strong>James Lewis</strong> and <strong>Martin Fowler</strong>（2014）  </p></blockquote><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">简而言之，</span><br><span class="line">微服务架构风格 是一种近似于 将一个单体应用程序作为一个小型服务套件来进行开发的风格，</span><br><span class="line">每一个小型服务都运行在它自身的进程当中，</span><br><span class="line">并且通过轻量级机制进行相互间的交流，</span><br><span class="line">通常是以一种超文本传输协议资源应用编程接口的方式进行交互。</span><br><span class="line">这些服务都是围绕业务逻辑来进行构建的并且通过全自动化部署机制来进行独立部署。</span><br><span class="line">最低限度的集中式管理着这些服务（这些服务的集中管理非常少），</span><br><span class="line">通过这种方式，</span><br><span class="line">或许可以使用不同的程序语言进行编写以及使用不同的数据存储技术。</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------</span><br><span class="line"></span><br><span class="line">有道词典翻译：</span><br><span class="line"></span><br><span class="line">简而言之，</span><br><span class="line">微服务体系结构风格是一种将单个应用程序作为一组小服务进行开发的方法，</span><br><span class="line">每个小服务都在自己的进程中运行，并与轻量级机制<span class="params">(通常是HTTP资源API)</span>进行通信。</span><br><span class="line">这些服务是围绕业务功能构建的，</span><br><span class="line">并且可以通过完全自动化的部署机制独立部署。</span><br><span class="line">这些服务的集中管理非常少，</span><br><span class="line">它们可以用不同的编程语言编写，</span><br><span class="line">并使用不同的数据存储技术。</span><br><span class="line">——詹姆斯·刘易斯和马丁·福勒<span class="params">(<span class="number">2014</span>)</span></span><br></pre></td></tr></table></figure><h3 id="Introduce-Martin-Fowler"><a href="#Introduce-Martin-Fowler" class="headerlink" title="Introduce - Martin Fowler"></a>Introduce - Martin Fowler</h3><p>了解微服务之前首先来看看<strong>Martin Fowler</strong>老爷子的自我介绍；<br>Fowler刚被我打成了Flower；  </p><p>简介链接：<a href="https://www.martinfowler.com" target="_blank" rel="noopener">https://www.martinfowler.com</a>  </p><h4 id="Contents-1"><a href="#Contents-1" class="headerlink" title="Contents"></a>Contents</h4><blockquote><p>Software development is a young profession , and we are still learning the techniques and building the tools to do it effectively .<br>I’ve been involved in this activity for over three decades and in the last two I’ve been writing on this website about patterns and practives that make it easier to build userful software .<br>The site began as a place to put my own writing , but I also use it to publish articles by my colleagues .  </p></blockquote><blockquote><p>In 2000 , I joined ThoughtWorkds , where my role is to learn about the techniques that we’ve learned to deliver software for our clients , and pass these techniques on to the wider software industry .<br>As this site has developed into a respected platform on software development , I’ve edited and published articles by me colleagues , both ThoughtWorkers and others , to help useful writing reach a wider audience .  </p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">软件发展是一个年轻的专业技术，</span><br><span class="line">并且我们是仍然在学习这门技术 和 构建一些工具去有效的完成它。</span><br><span class="line">我已经参与到这一项活动（工作）当中已经超过三十年了，</span><br><span class="line">并且在最近两年内，</span><br><span class="line">我在这个网站站点上已经编写了关于如何更容易的去构建有用的软件的一些思想模式以及练习方法；</span><br><span class="line">这个站点开始时作为来存放我自己的一个写作的一个地方，</span><br><span class="line">但是我也使用这个地方来进行发布一些通过我同事们写的文章；</span><br><span class="line"></span><br><span class="line">在<span class="number">2000</span>年，我加入到了ThoughtWorks，</span><br><span class="line">在这个地方我扮演的角色是去学习这一项技术，</span><br><span class="line">我们已经学习到去为我们的客户实现软件，</span><br><span class="line">以及通过这些技术在更广阔的软件产业当中；</span><br><span class="line">这个站点已经逐渐发展成为一个受人尊敬的平台在软件发展史当中，</span><br><span class="line">我已经写了很多以及发布了很多我同事写的文章，同时还有ThoughtWorkers的员工以及其他人；</span><br><span class="line">来帮助有用的写作，即逐渐成为一个有深度的受众；</span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line"></span><br><span class="line">有道词典翻译：</span><br><span class="line">软件开发是一个年轻的职业，</span><br><span class="line">我们仍然在学习技术和构建工具来有效地完成它。</span><br><span class="line">我已经参与这项活动超过<span class="number">30</span>年了，</span><br><span class="line">在过去的两年中，</span><br><span class="line">我一直在这个网站上撰写关于使构建有用软件变得更容易的模式和实践的文章。</span><br><span class="line">这个网站一开始是一个放置我自己的文章的地方，</span><br><span class="line">但我也用它来发表我同事的文章。</span><br><span class="line"><span class="number">2000</span>年，我加入了ThoughtWorks，</span><br><span class="line">在这里，我的职责是学习我们为客户交付软件的技术，</span><br><span class="line">并将这些技术传递给更广泛的软件行业。</span><br><span class="line">随着这个网站发展成为一个受人尊敬的软件开发平台，</span><br><span class="line">我已经编辑并发表了我的同事们的文章，</span><br><span class="line">包括ThoughtWorkers和其他人，</span><br><span class="line">以帮助更广泛的读者阅读有用的文章。</span><br></pre></td></tr></table></figure><h3 id="A-website-on-building-software-effectively"><a href="#A-website-on-building-software-effectively" class="headerlink" title="A website on building software effectively"></a>A website on building software effectively</h3><p>A website on building software effectively</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在一个网站上有效地构建软件</span><br><span class="line"></span><br><span class="line"><span class="comment">-------------------------</span></span><br><span class="line"></span><br><span class="line">一个有效开发软件的网站</span><br></pre></td></tr></table></figure><h4 id="Contents-2"><a href="#Contents-2" class="headerlink" title="Contents"></a>Contents</h4><blockquote><p>If there’s a theme that runs through my work and writing on this site , it’s the interplay between the shift towards agile thinking and the technical patterns and practices that make agile software development practical .<br>While specifics of technology change rapidly in our profession , fundamental practices and patterns are more stable .<br>So writing about these allows me to have articles on this site that are several years old but still as relevant as when they were written .  </p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">如果 这是一个主题（定语：贯穿着我的工作经历以及在这个站点上的文字）</span><br><span class="line">那么在 转变成敏捷式思维 与 技术的模式和使得敏捷式软件开发 变成事实 这两者之间其实是相互影响的。</span><br><span class="line">当 技术的特性 在我们的职业该行当中 发展改变十分迅速 时，</span><br><span class="line">基本的实践练习 与 模式 就变得需要十分的牢固。</span><br><span class="line">所以编写这些关于 容许我在这个站点（定语：虽然才只有几岁即虽然才开始几年，但是只要当遇到与之相关的他们就都会被一致持续写入进来）上拥有了的文章。</span><br><span class="line"></span><br><span class="line"><span class="comment">---------------------------------------------</span></span><br><span class="line"></span><br><span class="line">有道词典翻译：</span><br><span class="line">如果说我在这个站点上的工作和写作中贯穿着一个主题，那就是敏捷思维的转变与使敏捷软件开发切实可行的技术模式和实践之间的相互作用。</span><br><span class="line">虽然技术细节在我们的职业中变化很快，但基本的实践和模式更加稳定。</span><br><span class="line">所以写这些东西让我可以在这个网站上写一些文章，这些文章已经有好几年的历史了，但是仍然和当初写的时候一样重要。</span><br></pre></td></tr></table></figure><blockquote><p>As software becomes more critical to modern business , software needs be able to react quickly to changes ,  allowing new features to be be conceived , developed and put into production rapidly .<br>The techniques of <font style="color:red;font-weight:bolder">agile software development</font> began in the 1990s and became steadily more popular in the last decade .<br>The focus on a flexible approach to planning , which allows software products to change direction as the user’s needs change and as product managers learn more about how to make their users effective .<br>While widely accepted now , agile approaches are not easy , requiring significant skills for a team , but more importantly a culture of open collaboration both within the team and with a team’s partners .  </p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">当软件为了现在的业务逻辑就越需要批评，</span><br><span class="line">软件需要能够快速地对改变做出反应，允许一些新特性被构思实现，发展以及迅速地落实成为一个产品。</span><br><span class="line">敏捷式开发软件的这项技术开始在<span class="number">1990</span>年的时候，直到在近十年内开始稳定地变得越发流行起来了。</span><br><span class="line">集中于在一个灵活性上，类似于规划预期中，它允许软件产品来进行定向的改变当客户需要进行改变以及当产品管理者学到更多关于如何让他们的客户变得印象深刻。</span><br><span class="line">当现在被更广泛的接受，敏捷式的处理是并不容易的，它要求重大的的技能对于一个团队来说，但是更重要的是一个开源合作的文化，这两者都需要团队以及团队成员之间的协作。</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">有道词典翻译：</span><br><span class="line">随着软件在现代商业中变得越来越重要，</span><br><span class="line">软件需要能够对变化做出快速反应，</span><br><span class="line">允许快速构思、开发新特性并将其投入生产。</span><br><span class="line">敏捷软件开发技术开始于<span class="number">20</span>世纪<span class="number">90</span>年代，并在过去十年中逐渐流行起来。</span><br><span class="line">他们专注于一种灵活的计划方法，</span><br><span class="line">这种方法允许软件产品随着用户需求的变化而改变方向，</span><br><span class="line">并且随着产品经理更多地了解如何让他们的用户更有效。</span><br><span class="line">虽然敏捷方法现在已被广泛接受，</span><br><span class="line">但它并不简单，</span><br><span class="line">需要团队的重要技能，</span><br><span class="line">但更重要的是团队内部和团队合作伙伴之间的开放协作文化。</span><br></pre></td></tr></table></figure><blockquote><p>This need to respond fluently to changes has an important impact upon the <font style="color:red;font-weight:bolder">architecture</font> of a software system.<br>The software needs to be built in such a way that it is able to adapt to unexpected changes in features .<br>One of the most important ways to do this is to write clear code , making it easy to understant what the program is supposed to do .<br>This code should be devided into modules which allow developers to understand only the parts of the system they need to make a change .<br>This production code should be supported with automated tests that can detect any errors made when making a change while providing examples of how internal structures are used .<br>Large and complex software efforts may find the <font style="color:red;font-weight:bolder">microservices</font> architectural style helps teams deploy software with less entangling dependencies .  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Creating software that has a good architecture isn’t something that can be done first time .<br>Like good prose , it needs regular revisions and programmers learn more about what the product needs to do and how best to design the product to achieve its goals .<br><font style="color:red;font-weight:bolder">Refactoring</font> is an essential technique to allow a program to be changed safety .<br>It consists of making small changes that don’t alter the observable behavior of the software .<br>Bt combining lots of small changes , developers can revise the software’s structure supporting significant modifications that weren’t planned when the system was first conceived .  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Software that runs only on a developer’s machine isn’t providing value to the customers of the software .<br>Traditionally releasing software has been a long and complicated process , one that hinders the need to evolve software quickly .<br><font style="color:red;font-weight:bolder">Continuous Delivery</font> uses automation and collaborative workflows to remove this bottleneck , allowing teams to release software as often as the customers demand .<br>For Continuous Delivery to be possible , we need to build in a solid foundation of <font style="color:red;font-weight:bolder">Testing</font> , with a range of automated tests that can give us confidence taht our changes haven’t introduced any bugs .<br>This leads us to integrate testing into programming , which can act to improve our architectural .  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Photostream"><a href="#Photostream" class="headerlink" title="Photostream"></a>Photostream</h3><h3 id="Data-Management"><a href="#Data-Management" class="headerlink" title="Data Management"></a>Data Management</h3><h4 id="Contents-3"><a href="#Contents-3" class="headerlink" title="Contents"></a>Contents</h4><blockquote><p>There are many kinds of softeare out there , the kind I’m primarily engaged is Enterprise Applications .<br>One of the enduring problems we need to tackle in this world is <font style="color:red;font-weight:bolder">data management</font> .<br>The aspectes of data management I’ve focused on here are how to migrate data stores as their applications respond to changing needs , coping with different contexts across a large enterprice , the role of NoSQL databases , and the broader issues of coping with data that is both Big and Messy .  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Domain-Specific-Languages"><a href="#Domain-Specific-Languages" class="headerlink" title="Domain-Specific Languages"></a>Domain-Specific Languages</h3><h3 id="Contents-4"><a href="#Contents-4" class="headerlink" title="Contents"></a>Contents</h3><blockquote><p>A common problem in complex software systems is how to capture complicated domain logic in a way that programmers can both easily manipulate and also easily communicate to domain experts .<br><font style="color:red;font-weight:bolder">Domain-Specific Languages</font>(DSLs) create a custom language for a particular problem , either with custom parsers or by conventions within a host language .  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h3><h4 id="Contents-5"><a href="#Contents-5" class="headerlink" title="Contents"></a>Contents</h4><blockquote><p>I’ve written seven books on software development , including Refactoring , Patterns of Enterprise Application Architectural , and UML Distilled .<br>I’m also the editor of a signature series for Addison-Wesley that includes five jolt award winners .<br><font style="color:red;font-weight:bolder">My Books Page…</font>  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Conference-Talks"><a href="#Conference-Talks" class="headerlink" title="Conference Talks"></a>Conference Talks</h3><h4 id="Contents-6"><a href="#Contents-6" class="headerlink" title="Contents"></a>Contents</h4><blockquote><p>I’m often asked to give talks at conferences , from which I’ve inferred that I’m a pretty good speaker - which is ironic since I really hate giving talks .<br>You can form your own opinion of my talks by watching videos of some my conference talks .<br><font style="color:red;font-weight:bolder"> My Videos Page…</font>  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Board-Games"><a href="#Board-Games" class="headerlink" title="Board Games"></a>Board Games</h3><h4 id="Contents-7"><a href="#Contents-7" class="headerlink" title="Contents"></a>Contents</h4><blockquote><p>I’ve long been a fan of board games , I enjoy a game that fully occupies my mind , clearing out all the serious thoughts for a bit , while enjoying the company of good friends .<br>Modern board games saw dramatic improvement in the 1990’s with the rise of Eurogames , and I expect many people would be surprised if they haven’t tried any of this new generation .<br>I also appear regularly on <font style="color:red;font-weight:bolder">Heavy Cardboard</font> .<br><font style="color:red;font-weight:bolder">My Board Games page…</font>  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MICROSERVICES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> MICROSERVICES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全面深入讲解MySQL数据库优化01</title>
      <link href="/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%9601/"/>
      <url>/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%9601/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;seid=13531213796559959972" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;seid=13531213796559959972</a>  </p><p>本课程作为MySQL高级课程，主要讲解了：  </p><ul><li><strong>MySQL</strong>中的<strong>视图</strong>/<strong>存储过程</strong>/<strong>触发器</strong>/<strong>索引</strong>等对象的使用</li><li>常见的<strong>SQL</strong>语句<strong>优化</strong>的技巧</li><li><strong>应用优化</strong></li><li><strong>数据库优化</strong></li><li><strong>数据库日志</strong></li></ul><p>等方面的知识，并通过综合案例，对课程中的知识进行一个整合应用。  </p><p>本课程旨在通过MySQl高级部分内容，可以在满足现有业务需求基础上，对<strong>MySQL底层的体系结构</strong>，及<strong>底层的优化</strong>有一个深入的理解，对<strong>系统的整体性能</strong>进行提升。  </p><h2 id="课程内容介绍"><a href="#课程内容介绍" class="headerlink" title="课程内容介绍"></a>课程内容介绍</h2><blockquote><p>Mysql高级-day01</p></blockquote><p>MySQL高级课程简介</p><ol><li>Linux系统安装MySQL</li><li><strong>索引</strong></li><li><strong>视图</strong></li><li><strong>存储过程</strong>和<strong>函数</strong></li><li><strong>触发器</strong></li></ol><h3 id="MySQL高级课程简介"><a href="#MySQL高级课程简介" class="headerlink" title="MySQL高级课程简介"></a>MySQL高级课程简介</h3><table>    <tr>      <th>序号</th>      <th>Day01</th>      <th>Day02</th>      <th>Day03</th>      <th>Day04</th>    </tr>    <tr>      <td>1</td>      <td>Linux系统安装MySQL</td>      <td>体系结构</td>      <td>应用优化</td>      <td>MySQL常用工具</td>    </tr>    <tr>      <td>2</td>      <td>索引</td>      <td>存储引擎</td>      <td>查询缓存优化</td>      <td>MySQL日志</td>    </tr>    <tr>      <td>3</td>      <td>视图</td>      <td>优化SQL步骤</td>      <td>内存管理及优化</td>      <td>MySQl主从复制</td>    </tr>    <tr>      <td>4</td>      <td>存储过程和函数</td>      <td>索引使用</td>      <td>MySQL锁问题</td>      <td>综合案例</td>    </tr>    <tr>      <td>5</td>      <td>触发器</td>      <td>SQL优化</td>      <td>常用SQL技巧</td>      <td></td>    </tr></table><h2 id="Linux上安装MySQL"><a href="#Linux上安装MySQL" class="headerlink" title="Linux上安装MySQL"></a>Linux上安装MySQL</h2><h3 id="下载Linux安装包"><a href="#下载Linux安装包" class="headerlink" title="下载Linux安装包"></a>下载Linux安装包</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>/<span class="regexp">/dev.mysql.com/downloads</span><span class="regexp">/mysql/</span><span class="number">5.7</span>.html<span class="comment">#downloads</span></span><br></pre></td></tr></table></figure><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><ol><li><strong>卸载</strong>centos中预安装的mysql</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep -i mysql # 查询服务器当中mysql的安装包是否存在，存在则显示出存在安装包的名称</span><br><span class="line"></span><br><span class="line">rpm -e mysql-libs<span class="number">-5.1</span><span class="number">.71</span><span class="number">-1.e16</span>.x86_64 --nodeps # 对已存在的安装包(mysql-libs<span class="number">-5.1</span><span class="number">.71</span><span class="number">-1.e16</span>.x86_64)进行卸载</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>上传</strong>mysql的安装包</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alt + p -------&gt;put E:/tset/MySQL<span class="number">-5.6</span><span class="number">.22</span><span class="number">-1.e16</span>.i686.rpm-bundle.tar（MySQL安装包的目录）</span><br><span class="line"></span><br><span class="line"># 使用SecureCRT远程连接服务器工具，alt+p命令进入sftp模式；再执行put （MySQL安装包的目录）[ 上传 ]</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>解压</strong>mysql的安装包</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir mysql</span><br><span class="line"></span><br><span class="line">tar -xvf MySQL-<span class="number">5.6</span>.<span class="number">22</span>-<span class="number">1</span><span class="selector-class">.e16</span><span class="selector-class">.i686</span><span class="selector-class">.rpm-bundle</span><span class="selector-class">.tar</span> -c /root/mysql</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>安装</strong>依赖包</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装第三方的依赖库；yum -y 在线安装需连接网络</span><br><span class="line">yum -y install libaio.so<span class="number">.1</span> libgc_s.so<span class="number">.1</span> libstdc++.so<span class="number">.6</span> libncurses.so<span class="number">.5</span> --setopt=protected_multilib=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">yum update listdc++<span class="number">-4.4</span><span class="number">.7</span><span class="number">-4.e16</span>.x86_64 # 更新第三方类包</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>安装</strong>mysql-client</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">MySQL-client-5</span><span class="selector-class">.6</span><span class="selector-class">.22-1</span><span class="selector-class">.e16</span><span class="selector-class">.i686</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure><ol start="6"><li><strong>安装</strong>mysql-server</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">MySQL-server-5</span><span class="selector-class">.6</span><span class="selector-class">.22-1</span><span class="selector-class">.e16</span><span class="selector-class">.i686</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure><blockquote><p>Linux</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ipconfig</span> <span class="comment"># 查看本机ip地址，内网地址</span></span><br></pre></td></tr></table></figure><h2 id="启动及登录MySQL"><a href="#启动及登录MySQL" class="headerlink" title="启动及登录MySQL"></a>启动及登录MySQL</h2><blockquote><p><strong>启动mysql</strong>命令</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service mysql status  # 查看mysql服务状态</span><br><span class="line">service mysql start   # 启动mysql服务</span><br><span class="line">service mysql stop    # 停止mysql服务</span><br></pre></td></tr></table></figure><blockquote><p><strong>登录mysql</strong></p></blockquote><p>mysql 安装完成之后，会自动生成一个<strong>随机密码</strong>，并且保存在一个密码文件中：/root/<strong>.mysql_secret</strong>；  </p><blockquote><p><strong>查看</strong>随机密码</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/root/</span>.mysql_secret</span><br></pre></td></tr></table></figure><blockquote><p><strong>登录</strong>命令</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta"># -u 指的是用户</span></span><br><span class="line"><span class="meta"># -p 指的是该用户所对应的密码</span></span><br></pre></td></tr></table></figure><blockquote><p>登录之后，修改密码命令</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> = <span class="keyword">password</span>(<span class="string">'itcast'</span>);</span><br><span class="line"><span class="comment"># itcast即明文密码</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>授权远程访问</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'itcast'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>防火墙</strong></p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service iptables status # 查看防火墙状态</span><br><span class="line">service iptables stop # 关闭防火墙</span><br></pre></td></tr></table></figure><h2 id="索引-概述"><a href="#索引-概述" class="headerlink" title="索引 - 概述"></a>索引 - 概述</h2><p><strong>MySQL官方</strong>对<strong>索引</strong>的定义为：  </p><p><strong>索引</strong>（<strong>index</strong>）是 <strong>帮助</strong> MySQL <strong>高效 获取数据</strong> 的 <strong>数据结构</strong>（<strong>有序</strong>）。  </p><p>在数据之外，<strong>数据库系统</strong> 还 <strong>维护</strong>着 满足 <strong>特定查找</strong> <strong>算法</strong> 的 <strong>数据结构</strong>，<br>这些 <strong>数据结构</strong> 以 某种方式 <strong>引用</strong>（<strong>指向</strong>）<strong>数据</strong>，<br>这样就可以在这些 <strong>数据结构</strong> 上实现 <strong>高级查找算法</strong>，<br>这种 <strong>数据结构</strong> 就是 <strong>索引</strong>。<br>如下面的示意图所示：  </p><p>左边是数据库，一共有两列七条记录，最左边的是数据记录的物理地址<br>（注意 <strong>逻辑上 相邻的记录</strong> 在<strong>磁盘上</strong> 也 <strong>不是一定物理相邻</strong> 的）。  </p><p>为了<strong>加快Col2的查找</strong>，可以<strong>维护</strong>右边所示的<strong>二叉查找树</strong>，<br>每个<strong>结点</strong>分别包含 <strong>索引键值</strong> 和一个 <strong>指向</strong> <strong>对应数据记录</strong> <strong>物理地址</strong> 的 <strong>指针</strong>，<br>这样就可以运用 <strong>二叉查找</strong> 快速后去到相应数据。  </p><p>一般来说 <strong>索引本身也很大</strong>，<br><strong>不可能全部存储在内存</strong> 中，<br>因此索引往往以 <strong>索引文件</strong> 的形式 <strong>存储在磁盘</strong> 上，<br><strong>索引</strong>是数据库中用来 <strong>提供性能</strong> 的最常用的工具。  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mspaint</span> <span class="comment"># windows打开画板</span></span><br></pre></td></tr></table></figure><table>  <tr>    <td>物理地址</td>    <td>Col1</td>    <td>Col2</td>  </tr>  <tr>    <td>0x07</td>    <td>1</td>    <td>34</td>  </tr>  <tr>    <td>0x56</td>    <td>2</td>    <td>77</td>  </tr>  <tr>    <td>0x6A</td>    <td>3</td>    <td>5</td>  </tr>  <tr>    <td>0xF3</td>    <td>4</td>    <td>91</td>  </tr>  <tr>    <td>0x90</td>    <td>5</td>    <td>22</td>  </tr>  <tr>    <td>0x77</td>    <td>6</td>    <td>59</td>  </tr>  <tr>    <td>0xD1</td>    <td>7</td>    <td>3</td>  </tr></table><p>当前该为一张数据库表；<br>在数据库表的左侧展示的是每一条记录的一个<strong>物理地址</strong>；<br>右侧则是两列；<br>一列字段Col1是序号；<br>Col2字段数据可以认为就是主键数据；<br>数据库表结构有了，接下来查询数据；  </p><p><strong>（1）第一种情况</strong>：<br><strong>查询主键Col2为34的数据</strong>；<br>因为这个时候只存在表，<strong>没有设置索引</strong>这些方便查询的<strong>数据结构</strong>；<br>所以这个时候就会在表当中 <strong>自上而下</strong> 的进行 <strong>遍历</strong>；<br>这个时候就会去遍历到第一个，发现第一个的主键id，Col2的值就是34；此时即拿到数据；<br>这样的话 <strong>只</strong> 需要 <strong>查询一条记录</strong>；<br>而且<strong>查询第一条记录就是</strong>，那么这样的话<strong>查询速度</strong>是<strong>很快</strong>的；<br>这只是第一种情况；  </p><p><strong>（2）第二种情况</strong>：<br><strong>查询主键Col2 id为91的记录行数据</strong>；<br>那么还是需要<strong>自上而下</strong>从id为34的记录行数据开始<strong>遍历</strong>；<br>那么第一条记录不是；<br>第二条记录不是；<br>第三条记录也不是；<br>直到第四条记录的时候发现数据行id是91；<br>那么这个时候也就是需要去遍历列表4次，查询4次才能够得到结果；  </p><p><strong>（3）第三种情况</strong>：<br><strong>查询主键Col2 id为3的记录行数据</strong>；<br>这个时候再来看，如果说遍历查询的元素id是3；<br>那么这个时候依然是 <strong>从上往下</strong> 进行<strong>遍历</strong>，一直<strong>遍历到</strong>列表的<strong>最底部</strong>；<br>才能将3查找出来；那么这个时候就相当于需要进行一个<strong>全表扫描</strong>的这样一个操作；<br>对于当前该表当中只有6、7条数据；<br>但是如果在<strong>实际开发</strong>当中<strong>数据量</strong>比较<strong>大</strong>；<br>一张表当中存储了几百万上千万的记录；<br>那么这个时候如果只有表中的记录，而没有索引的话；<br>这个时候就会造成一种现象，在查找的时候<strong>从上往下</strong>进行<strong>整表扫描</strong>，所以这种<strong>查询效率</strong>是<strong>非常慢</strong>的；  </p><p>以上就是第一种情况，即<strong>没有建立索引</strong>的情况；<br><strong>查询效率很慢</strong>；  </p><p>下面分析<strong>有了索引</strong>之后，又是<strong>如何</strong>进行<strong>查找</strong>的；<br>此时有了表结构还需要对表结构当中的<strong>字段进行建立索引</strong>；<br><strong>索引就是一种数据结构</strong>；<br>那么此时就可以使用<strong>数据结构</strong>来表示这种表当中的索引；<br>这里使用一种 <strong>数据结构 二叉树</strong>；  </p><p>既然是 <strong>二叉树</strong>；<br>那么二叉树当中的第一个结点，也就是34；<br>即<strong>根节点</strong>；<br>34即作为当前该树状结构的<strong>根结点</strong>；  </p><p>接下来第二行记录是77；  </p><p>对于<strong>二叉树</strong>来说，<strong>二叉树</strong>有一个特点；<br>即当<strong>根结点已经存在</strong>的时候，<strong>再插入下一个结点</strong>；<br>则需要将 <strong>下一个结点的数值</strong>与<strong>根结点的数值</strong> 进行 <strong>比较大小</strong>；<br>如果<strong>比根结点小</strong>则放在<strong>左边</strong>，称之为生成一个<strong>左子树</strong>；<br>如果<strong>比根结点大</strong>则放在<strong>右边</strong>，称之为生成一个<strong>右子树</strong>，作为<strong>右子树</strong>存在；</p><p>这个时候77是比34要大的，所以放在34的右边，即77为34<strong>根结点</strong>的一个<strong>子节点</strong>；  </p><p>接下来第三行是5，需要对5也要进行插入到二叉树该数据结构当中，那么此时也是需要进行与34根结点进行比较的；<br>此时5比34要小；那么则放在根结点34的左边，所以此时34根结点又有一个子节点5；  </p><p>当5插入到二叉树结构当中之后，接着下一行记录91；<br>则首先将91与34根结点进行比较大小；<br>显然91比34要大，则处于根结点34的右边；  </p><p>当前使用的是<strong>二叉树</strong>的这种<strong>数据结构</strong>，也就意味着 <strong>每一个结点</strong> <strong>最多</strong> 都<strong>只能有</strong> <strong>2个分支</strong>；所以称之为<strong>二叉树</strong>；  </p><p>所以当此时34 <strong>根结点</strong> 已经有了两个分支之后，那么此时91比34大，但是34的右边已经有元素77了，所以这个时候91就需要去和77去进行比较；<br>77与91进行比较，91显然要大，所以放在77的右侧，作为77的一个<strong>右子节点</strong>存在；  </p><p>接下来是第5行记录数据集22；22比34小，显然要放在根结点的左侧；<br>但是<strong>根结点</strong>的<strong>左侧</strong>已经有<strong>左子节点</strong>也就是5；<br>那么此时22就去与5进行比较，显然22比5大；也就放在5的右边；称为5的<strong>右子结点</strong>；  </p><p>最后还剩下最后两条记录，一个是59一个是3；<br>快速过一下；59首先和34这个元素进行比较；<br>显然59比34大需要放在34的右侧；<br>然34已经有右子结点77了，那么这个时候59和77进行比较；<br>显然77大于59，那么这个时候就将59放置在77的左侧，叶子结点91的左边，成为77的左子节点；  </p><p>同理最后一个元素，3也是同样的方式；<br>3与34进行比较；显然3比34要小；<br>然此时34是存在有<strong>左子节点</strong>5的；<br>那么这个时候就将3与5进行比较；显然3比5要小；<br>那么这个时候；就把3放在5的左侧；<br>成为5的左子节点，叶子结点22的左侧；  </p><p>此时到此为止二叉树已经构建完毕；二叉树构建完毕之后再来进行分析；<br>构建了一棵二叉树之后就能够提高查询效率吗？  </p><p>（<br>我认为；<br>在二叉树一定的深度下，二叉树依然会存在查询效率慢的情况；<br>）  </p><p>二叉树构建好了之后，再来进行搜索；<br>如果按照刚才的查询情况；<br>先进行搜索34这一数值；  </p><p>搜索二叉树；那么就需要到索引的结构二叉树的数据结构当中来进行搜索；<br>在进行<strong>二叉树搜索</strong>的时候，是<strong>从根结点处开始进行查询匹配数值</strong>；<br>即树状结构当中最顶层的这一节点即为根结点；<br>最底层的结点，即3、22、59、91这四个结点称之为<strong>叶子结点</strong>；<br>那么<strong>二叉树的搜索</strong>是<strong>从根节点开始进行搜索的</strong>；  </p><p>走根结点34；这个时候就已经将34查询到了，那么这个时候就可以直接进行返回即可；<br>但是如果这一块当中查询的并不是34而是3；<br>那么此时仍然先会去搜索根结点34，将要查询搜索的值3去与根节点34进行比较；<br>发现3比根结点要小；<br>所以此时就会去根结点的左侧，即左子树当中去进行查找3；  </p><p><strong>二叉树</strong>当中<strong>根结点的左边</strong>的称之为<strong>左子树</strong>；<strong>右边</strong>则称之为<strong>右子树</strong>；  </p><p>那么在左子树当中通过3去跟根结点的左子节点5进行比较，那么此时5比3要大；<br>所以紧接着，让3去跟结点5的左子节点3去进行比较；<br>所以在这个时候就找到了3这个元素；<br>而找到了3之后，二叉树的这种数据结构是如何关联到表当中具体行数当中的具体数据的呢？<br>这个时候就需要看笔记当中提到的一句话：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</span><br></pre></td></tr></table></figure><p>那也就意味着，二叉树这种数据结构当中的每一个结点都是需要 <strong>指向</strong>具体表当中具体行数的具体数据；<br>那么从刚才的查询规律当中<strong>从上而下</strong>进行查找3，则从根结点34到左子节点5，再从5到5的左子节点3查找到了3这一元素的指向/引用即可找到在具体某表当中的具体某一行的数据；<br>那么这样的话就查找到了数据；  </p><table>  <tr>    <td>物理地址</td>    <td>Col1</td>    <td>Col2</td>  </tr>  <tr>    <td>0x07</td>    <td>1</td>    <td>34</td>  </tr>  <tr>    <td>0x56</td>    <td>2</td>    <td>77</td>  </tr>  <tr>    <td>0x6A</td>    <td>3</td>    <td>5</td>  </tr>  <tr>    <td>0xF3</td>    <td>4</td>    <td>91</td>  </tr>  <tr>    <td>0x90</td>    <td>5</td>    <td>22</td>  </tr>  <tr>    <td>0x77</td>    <td>6</td>    <td>59</td>  </tr>  <tr>    <td>0xD1</td>    <td>7</td>    <td>3</td>  </tr></table><blockquote><p><strong>分析</strong>：<strong>没有建立索引</strong> 的表与 <strong>建立了索引</strong> 的表当中，建立了索引之后 <strong>性能</strong> 的一个 <strong>提升</strong> ；</p></blockquote><ul><li><p><strong>没有建立索引</strong> 的表：<br>在没有建立索引的情况下，如果是要进行查询数据元素3；<br>那么则需要把整张表当中所有的数据都需要进行 <strong>遍历</strong> 一遍即 <strong>全表扫描</strong> ，直到找到3这个id数据；  </p></li><li><p><strong>建立了索引</strong> 的表：<br>如果是在建立了索引的这种情况之下；<br>那么同样还是查找元素3；<br>只需要查找第一次34；第二次5；第三次3即可；三次即可；<br>那么这样的话这个时候通过 <strong>索引</strong> 由 <strong>二叉树</strong> 这种 <strong>数据结构</strong> 实现的话就 <strong>不再需要去遍历整张表的数据</strong> 了；<br>通过 <strong>二叉树</strong> 这种 <strong>数据结构</strong> 就可以 <strong>快速</strong> 的 <strong>定位</strong> 到3这个查询的数据元素；<br>那么这就是<strong>索引</strong>；<strong>索引的目的</strong> 即在于 <strong>快速</strong> 的来 <strong>查找数据</strong>；  </p></li></ul><h2 id="索引-优势和劣势"><a href="#索引-优势和劣势" class="headerlink" title="索引 - 优势和劣势"></a>索引 - 优势和劣势</h2><blockquote><p><strong>优势</strong><br>1） 类似于书籍的 <strong>目录索引</strong> ， <strong>提高数据检索的效率</strong> ， <strong>降低数据库的IO成本</strong> ；<br>2） 通过 <strong>索引列</strong> 对 <strong>数据</strong> 进行 <strong>排序</strong> ， <strong>降低数据排序的成本</strong> ，<strong>降低CPU的消耗</strong> ；  </p></blockquote><blockquote><p><strong>劣势</strong><br>1）实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录， <strong>索引列</strong> 也是要 <strong>占用空间</strong> 的；（并不放在内存当中而是 <strong>放在磁盘当中</strong> ， <strong>索引占用磁盘空间</strong> ）<br>2）虽然 <strong>索引</strong> <strong>大大提高了查询效率</strong> ，同时却也 <strong>降低</strong> 了 <strong>更新表的速度</strong> ，如对表进行 <strong>INSERT、UPDATE、DELETE</strong> （都需要 <strong>对索引进行维护</strong>，也就是相关实现该索引的数据结构当中存储的数据也要进行变动）。因为 <strong>更新表</strong> 时，MySQL不仅要 <strong>保存数据</strong> ，还要 <strong>保存</strong> 一下 <strong>索引文件</strong> 每次 <strong>更新添加</strong> 了 <strong>索引列的字段</strong> ，都会因为更新所带来的的 <strong>键值变化</strong> 后的索引信息。（所以 <strong>索引的字段并不是越多越好也会影响到性能</strong> ）  </p></blockquote><h2 id="索引-索引结构"><a href="#索引-索引结构" class="headerlink" title="索引 - 索引结构"></a>索引 - 索引结构</h2><p><strong>索引</strong> 是在<strong>MySQL</strong>的 <strong>存储引擎</strong> 层中实现的，而不是在服务器层实现的。  </p><p>所以每种存储引擎的索引都不一定完全相同；也不是所有的存储引擎都支持所有的索引类型。  </p><p>MySQL目前提供了以下4中索引：  </p><ul><li><strong>BTREE索引</strong>：最常见的索引类型，大部分索引都支持 <strong>B树索引</strong> ；</li><li><strong>HASH索引</strong>：只有 <strong>Memory引擎</strong> 支持，<br>使用场景简单（刚刚看了下我当前MySQL数据库现在InnoDB也支持HASH哦）；</li><li><strong>R-tree索引（空间索引）</strong>：<strong>空间索引</strong> 是 <strong>MyISAM引擎</strong> 的一个 <strong>特殊索引类型</strong> ，<br>主要用于 <strong>地理空间数据类型</strong> ，<br>通常使用较少，不做特别介绍；</li><li><strong>Full-text（全文索引）</strong>：<strong>全文索引</strong> 也是 <strong>MyISAM</strong> 的一个 <strong>特殊索引类型</strong>，<br>主要用于 <strong>全文索引</strong> ，</li><li><em>InnoDB*</em> 从 <strong>MySQL5.6</strong> 版本开始支持 <strong>全文索引</strong> ；  </li></ul><p>这个统计应该也有些时候了；不是一定正确的哦；<br>需要结合当前不同版本的MySQL来说明；<br>我还是贴一下吧；  </p><h3 id="MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持"><a href="#MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持" class="headerlink" title="MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持"></a>MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持</h3><table>  <tr>    <th>索引</th>    <th>InnoDB引擎</th>    <th>MyISAM引擎</th>    <th>Memory引擎</th>  </tr>  <tr>    <td>BTREE索引</td>    <td>支持</td>    <td>支持</td>    <td>支持</td>  </tr>  <tr>    <td>HASH索引</td>    <td>不支持</td>    <td>不支持</td>    <td>支持</td>  </tr>  <tr>    <td>R-tree索引</td>    <td>不支持</td>    <td>支持</td>    <td>不支持</td>  </tr>  <tr>    <td>Full-text索引</td>    <td>5.6版本之后支持</td>    <td>支持</td>    <td>不支持</td>  </tr></table><p>平常所说的索引，如果没有特别指明，都是指 <strong>B+树</strong> （ <strong>多路搜索树</strong> ，并不一定是二叉的）结构组织的索引。<br>其中 <strong>聚集索引</strong>、 <strong>复合索引</strong> 、 <strong>前缀索引</strong> 、 <strong>唯一索引</strong> 默认都是使用 <strong>B+tree树索引</strong> ，统称为 <strong>索引</strong> 。  </p><h2 id="索引-索引结构-BTREE"><a href="#索引-索引结构-BTREE" class="headerlink" title="索引 - 索引结构 - BTREE"></a>索引 - 索引结构 - BTREE</h2><p><strong>BTree</strong> 又叫做 <strong>多路平衡搜索树</strong> ，一棵 <strong>m</strong> 叉的 <strong>BTree</strong> 特性如下：  </p><ul><li><strong>树</strong> 中每个 <strong>结点</strong> <strong>最多</strong> 包含 <strong>m</strong> 个孩子；</li><li><strong>除根结点与叶子结点</strong>外，<br>每个 <strong>结点</strong> <strong>至少</strong> 有[ <strong>cell ( m / 2 )</strong> ]（cell<strong>向上取整</strong>）个 <strong>孩子</strong> ；</li><li>若<strong>根结点不是叶子结点，则至少有两个孩子</strong>；</li><li><strong>所有的叶子结点都在同一层</strong>；</li><li>每个<strong>非叶子结点</strong>由 <strong>n</strong> 个 <strong>key</strong> 与 <strong>n + 1</strong> 个<strong>指针</strong>组成，<br>其中 <strong>[cell ( m / 2 ) -1 ] &lt; = n &lt; =  m - 1</strong></li></ul><p>（对于<strong>二叉树</strong>来说，<strong>树</strong>中的每个<strong>结点</strong> <strong>最多有2个分支</strong> ）  </p><p>以5叉BTree为例（当前根结点下最多有5个分支，即每个结点下最多包含5个孩子），key的数量：公式推导[ cell ( m / 2 ) - 1 ] &lt; = n &lt; = m-1 ；所以 2 &lt; = n &lt; = 4。<br>当n&gt;4时，中间节点分裂到父节点，两边结点分裂。<br>插入 C N G A H E K Q M F W L T Z D P R X Y S 数据为例；<br>1）插入前4个字母C N G A；  </p><table border="1">  <tr>    <td>A</td>    <td>C</td>    <td>G</td>    <td>N</td>  </tr></table><p>（按照26个字母排队顺序，字母A在C前，C排在G前，G排在N前的顺序进行排列）  </p><p>2）插入H ，n &gt; 4，中间元素G字母向上分裂到新的结点；  </p><table border="1">  <tr>    <td>A</td>    <td>C</td>    <td>G</td>    <td>H</td>    <td>N</td>  </tr></table><p>所以演变成中间元素G字母向上分裂到新的结点，即G分裂到父节点；</p><table border="1"><tr>     <td colspan="5" style="text-align:center">G</td>  </tr>  <tr>    <td>A</td>    <td>C</td>    <td></td>    <td>H</td>    <td>N</td>  </tr></table><br><table border="1">  <tr>     <td></td>    <td></td>      <td></td>     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">G</td>     <td></td>     <td></td>    <td></td>  </tr>  <tr>     <td></td>    <td></td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>     <td></td>    <td></td>  </tr>  <tr>    <td colspan="8"></td>  </tr>  <tr>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C</td>    <td></td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span> N</td>  </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>新插入的H结点会在元素G之后，那么排序也就是 A C G H N 这个样子的一个排序；那么此时的中间的结点就是G元素了；那么按照规则，当n&gt;4时，中间节点分裂到父节点；此时的G元素结点就将会进行一次分裂；分裂至父节点（H插入至BTree则G分裂至父节点）；而此时两边结点进行一次分裂；也就是原本的中间元素中间节点G左边的A、C以及右边的（新插入的）H、N就将会被分裂成父节点G的两边结点；左边的A、C分裂至父节点G的左子节点；右边的H、N分裂至父节点G的右子结点；  </p><p>接下来继续进行插入操作；插入元素E；<br>插入的E首先进行跟根结点G进行比较前后顺序；比较完成之后，E应该是在根结点G的排位在前的；所以应该被放在根结点G的左侧；也就是结点A、C该侧，A、C、E这三个元素也是需要进行排出一个顺序来的，那么也就是A、C、E这样的一个顺序排列放置；插入的是左边；由于左边元素未构成5个，所以不做任何的（分裂）变化等；  </p><p>接下来再继续插入元素K；<br>在K插入元素的时候就需要拿G与K元素的前后排位顺序进行比较，K的排位顺序比G大，所以插入到根结点G的右侧，也就是H、N所在该侧；插入的是右边，即插入时也需要与H、N这两个元素相进行比较排位顺序，也就是K元素插入到H、N这两个元素的中间；那么此时右侧的元素未构成5个所以不作任何变化；  </p><p>接下来继续插入Q；<br>插入Q也是需要与根节点G相进行比较排位顺序的；得出Q是在G之后，那么就将Q放在G根节点的右侧，然后将Q进行与节点元素H、K、N相进行比较；得到排列顺序H、K、N、Q这样一个排列顺序，当然此时仍然不需要做出（分裂）变化；因为此时n并没有超过4；只有当n超过4的时候才会发生分裂的变化；分叉小于等于4的情况下并不做任何的分裂改变只进行结点元素间的大小排位；  </p><p>在此之前一直在说分裂；当前已经分裂过一次；也就是A、C、G、H、N的时候进行将G分裂至父节点；A、C结点与H、N结点进行两边结点的分裂；并且插入了三个新的元素E、K、Q；  </p><p>此时需要说明的是：  </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每个非叶子结点由 n 个 <span class="type">key</span> 与 n + <span class="number">1</span> 个指针组成，其中[ cell( m / <span class="number">2</span>) <span class="number">-1</span> ] &lt; = n &lt; = m<span class="number">-1</span></span><br></pre></td></tr></table></figure><p>n+1个指针值的就是每个结点下都有两个方块，这两个方块都是指针存储区域；<br>指针的含义：当进行插入一个元素的时候，比如说插入元素E；当插入E元素的时候会进行与根节点G进行一个前后顺序排位的一个对比；如果E比G要小；那么E元素就需要放在G的左侧，指向左侧；成为根结点当中的左子节点当中的一个；那么这个时候就由G结点的左指针指向左子节点的方向；通过左边的这个指针指向左边的这个数据块；小于G那么这个指针就指向的是小于G的这个数据块（也就是左侧的左子结点）；大于G那么指向的就是大于G的这个数据块（也就是右侧的右子结点）；  </p><p>即</p><table border="1">  <tr>    <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">G</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>  </tr>  <tr>    <td colspan="11"></td>  </tr>  <tr>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C<span style="margin-left:5px;margin-right:5px;"></span> E</td>    <td></td>    <td></td>    <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> N <span style="margin-left:5px;margin-right:5px;"></span> Q</td>  </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>接下来继续插入M元素；M与G根结点相进行比较，应该是属于在G的后面的；所以应该排放在G的右侧；通过G的右指针指向右边的数据块；M插入进来之后，应该要介于K和N之间；也就是说此时G的右子结点当中的排列顺序为H、K、M、N、Q这样一个排列顺序；这个时候就需要将M插入到K和N之间；但是当M插入到K和N之间之后，此时右子结点当中的元素已经超过了4个，即5个了；超过4个元素那么此时就要发生分裂变化，M结点刚好是中间节点；即会要发生中间节点（新插入的元素）M结点元素最终需要向上分裂到G父节点当中去，以及同时左右两边的元素H、K以及H、Q需要分裂变化成两块；  </p><p>问题：明白没有？小朋友？<br>答：明白了！(ಥ_ಥ)  </p><p>经过分裂之后再来看其指针；那么根结点当中的三个指针分别指的是；第一个指针指的是小于根节点当中的G元素则指针指向左侧第一个数据元素块A、C、E；第二个指针，则因为根节点当中存在两个元素；所以中间这个第二个指针用于大于根节点当中的G元素而小于根节点当中的M元素则指向中间的H、K的这个数据块；最后根节点当中的第三个指针用于大于根节点当中M元素的指向第三个数据元素块即N、Q；  </p><p>问题：明白？小朋友？<br>答：明白了！o(ﾟДﾟ)っ！  </p><p>当前为插入M的数据结构；  </p><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">G<span style="margin-left:5px;margin-right:5px;"></span> M</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="14"></td>  </tr>  <tr>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C<span style="margin-left:5px;margin-right:5px;"></span> E</td>    <td></td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    N <span style="margin-left:5px;margin-right:5px;"></span> Q</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>当前M插入完成之后，继续插入F、W、L、T这四个数据元素；<br>那么此时插入F、W、L、T这四个数据元素时是不需要进行分裂变化的；因为当这四个元素插入进来之后，各个数据块当中的key 结点都没有超过4；所以是不需要进行分裂变化处理的；  </p><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">G<span style="margin-left:5px;margin-right:5px;"></span> M</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="18"></td>  </tr>  <tr>    <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C<span style="margin-left:5px;margin-right:5px;"></span> E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    N <span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span> T<span style="margin-left:5px;margin-right:5px;"></span> W</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>上述F、W、L、T这四个元素插入完成之后，接着插入元素Z；<br>插入Z的时候，首先会进行与根节点的G和M相进行比较；Z元素比G、M都要大；所以就由根结点的第三个指针指向第三个数据块，也就是N、Q、T、W；走向第三个数据块时又会与第三个数据块当中的元素相进行比较得到其元素排列顺序N、Q、T、W、Z这样一个排列摆放位置；所以此时将Z插入第三个数据块当中的最后一个位置，当Z元素出现在W元素之后的时候，此时观察第三个数据库块当中的元素个数已经超过了4，即已经成为5个了，那么此时这5个元素当中中间元素需要进行向上分裂，分裂至父节点，然后其左右两边需要分裂成两个数据块；该第三个数据块当中的中间元素为T；T元素此时应当符合条件需要分裂至上一节点父节点当中去；以及T元素在分裂至父节点之前原来两边的结点需要进行分裂成两块也就是N、Q结点以及W、Z结点这两大块进行分裂开来称为单独的结点；</p><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">G<span style="margin-left:5px;margin-right:5px;"></span> M<span style="margin-left:5px;margin-right:5px;"></span> T</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="20"></td>  </tr>  <tr>    <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C<span style="margin-left:5px;margin-right:5px;"></span> E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    N <span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span>     </td>    <td></td><td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    W<span style="margin-left:5px;margin-right:5px;"></span> Z</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>当元素Z插入完成之后，接下来进行插入元素D；<br>元素D和根结点当中的G、M、T相比，显然是都小于这三者的；所以由根结点当中的第一个指针进行指向第一个数据块，也就是A、C、E、F这个数据块当中来；并且D元素需要进行与数据块元素当中的A、C、E、F这四个元素需要进行比较排序顺序大小；即通过排序顺序可得A、C、D、E、F；插入进来之后，此时该数据块当中的key元素大于4个了，即出现了5个；那么此时就需要将该数据块元素当中的那个中间元素（D作为该数据块当中的中间元素存在），也就是刚刚新插入的元素D进行向上分裂至父节点G、M、T当中去，且分裂至父节点的元素D也需要与G、M、T进行一个排序，排序得到D、G、M、T这样一个排列顺序；那么此时分裂至父节点的元素D的两边的元素同样也需要进行分裂成两个结点；即A、C与E、F进行分裂开来；<br>最终出现的数据结构：  </p><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span> G<span style="margin-left:5px;margin-right:5px;"></span> M<span style="margin-left:5px;margin-right:5px;"></span> T</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="22"></td>  </tr>  <tr>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C    </td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    N <span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span>     </td>    <td></td><td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    W<span style="margin-left:5px;margin-right:5px;"></span> Z</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>当元素D插入完成之后，接着进行插入元素P、R、X、Y；<br>插入P、R、X、Y时并不需要进行相应的变化分裂；因为插入到数据块当中元素key并没有满足 &gt; 4 的这样一个条件；所以并不需要做出分裂；  </p><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span> G<span style="margin-left:5px;margin-right:5px;"></span> M<span style="margin-left:5px;margin-right:5px;"></span> T</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="26"></td>  </tr>  <tr>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C    </td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    N<span style="margin-left:5px;margin-right:5px;"></span> P<span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span> R</td>    <td></td><td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>当插入元素P、R、X、Y这四个元素之后，接下来进行插入最后一个元素S；<br>S首先和根结点当中的是个元素D、G、M、T进行比较；显然介于M与T之间；即大于M而小于T这样一个范围；从而使得根结点的第四个指针指向第四个数据块，即N、P、Q、R这一个数据块当中；而当S插入到第四个数据块当中首先也是需要进行比较排序顺序大小的；有顺序可得；得到顺序为N、P、Q、R、S这样一个顺序排列；将S插入到该数据块当中来；此时第四个数据块当中的元素个数已经达到了5个，也就是超过了4个就需要进行分裂了；那么此时；该数据块当中的中间元素为Q；也就是Q元素需要进行向上分裂至父节点D、G、M、T该数据块当中去；以及Q元素两边的元素需要进行分裂，也就是N、P与R、S这两块分裂开来；<br>但是Q如果此时向上进行分裂，而此时父节点当中的元素对向上分裂来的Q元素进行排序得到D、G、M、Q、T；父节点插入元素Q；父节点当中的元素也达到了了5个；也需要进行分裂；其父节点当中的中间元素为M元素，则此时M元素继续向上进行分裂，则M更新称为该BTree的根节点；而M两边的元素，即D、G两元素与Q、T两元素则这两块进行分裂开来，D、G块称为根结点M的左子节点，Q、T块称为M根结点的右子结点；这就是所提到的五叉BTree结构的一个演变过程；</p><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">M</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="28"></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span>  G    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    Q <span style="margin-left:5px;margin-right:5px;"></span> T</td>         <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>      <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>      <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td colspan="28"></td>  </tr>  <tr>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C    </td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    N<span style="margin-left:5px;margin-right:5px;"></span> P</td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">R<span style="margin-left:5px;margin-right:5px;"></span> S</td>    <td></td><td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>      <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>了解了五叉BTree数据结构的一个演变过程之后回过头来再看；一棵m叉的BTree特性；<br>如果是一个五叉的BTree；<br>则：  </p><ul><li>树中每个结点最多包含m个孩子；即树中每个结点最多包含5个孩子；不能多于5个，即不能多于m个；  </li></ul><blockquote><p>举例</p></blockquote><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span> G<span style="margin-left:5px;margin-right:5px;"></span> M<span style="margin-left:5px;margin-right:5px;"></span> T</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="26"></td>  </tr>  <tr>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C    </td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    N<span style="margin-left:5px;margin-right:5px;"></span> P<span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span> R</td>    <td></td><td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><ul><li>除根结点与叶子结点外，每个结点至少有 [ cell( m / 2 )]个孩子；即每个结点至少有5/2=3（向上取整）个孩子；M为根节点；AC块、EF块、HKL块、NP块、RS块、WXYZ块为叶子结点；所以仅剩DG块与QT块非叶子结点也非根节点；这两块分别有三个字节点，DG块的孩子即AC块、EF块、HKL块；QT块的孩子即NP块、RS块、WXYZ块；  </li></ul><blockquote><p>举例</p></blockquote><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">M</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="28"></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span>  G    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    Q <span style="margin-left:5px;margin-right:5px;"></span> T</td>         <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>      <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>      <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td colspan="28"></td>  </tr>  <tr>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C    </td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    N<span style="margin-left:5px;margin-right:5px;"></span> P</td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">R<span style="margin-left:5px;margin-right:5px;"></span> S</td>    <td></td><td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>      <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><ul><li>若根结点不是叶子结点，则至少有两个孩子；</li></ul><blockquote><p>举例</p></blockquote><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">M</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="28"></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span>  G    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    Q <span style="margin-left:5px;margin-right:5px;"></span> T</td>         <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>      <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>      <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td colspan="28"></td>  </tr>  <tr>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C    </td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    N<span style="margin-left:5px;margin-right:5px;"></span> P</td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">R<span style="margin-left:5px;margin-right:5px;"></span> S</td>    <td></td><td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>      <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><ul><li>所有的叶子结点都在同一层；</li></ul><blockquote><p>举例</p></blockquote><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">M</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="28"></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span>  G    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    Q <span style="margin-left:5px;margin-right:5px;"></span> T</td>         <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>      <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>      <td></td>    <td></td>    <td></td>    <td></td>    <td></td><td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td colspan="28"></td>  </tr>  <tr>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C    </td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">    N<span style="margin-left:5px;margin-right:5px;"></span> P</td>    <td></td>    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">R<span style="margin-left:5px;margin-right:5px;"></span> S</td>    <td></td><td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>      <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><ul><li>每个非叶子结点由n个key与n+1个指针组成；其中[ cell( m / 2)-1] &lt; = n &lt; = m - 1；即</li></ul><p>key即指的每一个结点当中的元素；指针即用来指向数据块</p><table border="1">  <tr>    <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>     <td></td>    <td></td>     <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">G<span style="margin-left:5px;margin-right:5px;"></span> M</td>     <td></td>    <td></td>     <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td></td>    <td></td>     <td></td>     <td></td>     <td></td>  </tr>  <tr>    <td colspan="18"></td>  </tr>  <tr>    <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C<span style="margin-left:5px;margin-right:5px;"></span> E<span style="margin-left:5px;margin-right:5px;"></span> F</td>    <td></td>    <td></td>    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L    </td>    <td></td>    <td></td>      <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">    N <span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span> T<span style="margin-left:5px;margin-right:5px;"></span> W</td>      </tr>  <tr>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td></td>    <td></td>    <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>    <td></td>    <td></td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>     <td style="background-color:lightgreen;color:black;">指针</td>  </tr></table><p>到此已经提到了两种数据结构，一种是二叉树；一种是BTree；这两个数据结构可以拿过来相互比较一下优劣；  </p><p>BTree数据结构相对于二叉树相比；存在有多个分支；而二叉树一个结点仅仅只存在有两个结点；那么对于相同数据量来说，二叉树的数据层次，也就是二叉树的深度要更高一些；一旦层次更深也就意味着查找数据的时候；磁盘的IO的次数也就更多；从而导致查询的效率也就比较低；<br>到此，该BTree树就已经构建完成了，BTREE树和二叉树相比，查询数据的效率更高，因为对于相同的数据量来说，BTREE的层次结构相比二叉树小，因此搜索速度更快；  </p><h2 id="索引-索引结构-B-TREE"><a href="#索引-索引结构-B-TREE" class="headerlink" title="索引 - 索引结构 - B+TREE"></a>索引 - 索引结构 - B+TREE</h2><p>B+Tree为BTree的变种，B+Tree与BTree的区别为：<br>1） n叉B+Tree最多含有n个key，而BTree最多含有n-1个key；<br>2） B+Tree的叶子结点保存所有的key信息，依照key大小顺序排列；<br>3） 所有的非叶子结点都可以看做是key的索引部分；  </p><p>没有子节点的结点称之为叶子结点；叶子结点当中包含了所有key的信息；叶子结点当中的key才是完整的包含了所有的key的信息；包含了所有的数据信息；根结点当中以及非叶子结点当中的key起到的是一个索引的作用；索引就是为了查找到叶子结点当中的key；而且对于B+树来说所有的数据都是存储在叶子结点上面了；非叶子结点是不存在数据信息的；B树当中的所有数据是跟结点挂钩的；B+树当中所有的key存储在叶子结点所有的数据也都存储在叶子结点上了；<br>这也是B+树与B树的一个区别；  </p><p>B+Tree相对于BTree的一个优势：<br>由于B+Tree只有叶子结点保存key信息，查询任何key都要从root走到叶子（非叶子结点上的key都是起到一个索引的作用并没有数据，叶子结点上的key才关联着相关的数据信息），所以B+Tree的查询效率更加稳定；  </p><h2 id="索引-索引结构-MySQL中的B-Tree"><a href="#索引-索引结构-MySQL中的B-Tree" class="headerlink" title="索引 - 索引结构 - MySQL中的B+Tree"></a>索引 - 索引结构 - MySQL中的B+Tree</h2><p>MySQL索引数据结构对经典的B+Tree进行了优化。<br>在原B+Tree的基础上，增加一个指向相邻叶子结点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能；<br>问题：为什么要增加这样一个指针？<br>答：方便进行查询；  </p><blockquote><p>增加该指针的原因在于：方便进行范围搜索；  </p></blockquote><p>举例：如果想要进行搜索id为9~15的数据；由于有该指针相连所以从9一直查询链表下一结点到15即可；<br>所以该链表指针的作用主要是用来提高区间访问的性能；  </p><h2 id="索引-索引分类"><a href="#索引-索引分类" class="headerlink" title="索引 - 索引分类"></a>索引 - 索引分类</h2><p>1） 单值索引：即一个索引值包含单个列，一个表可以有多个单列索引(一个索引当中只包含一个列；比如现在需要对某一张表当中建立索引；该表当中有多个字段name、gender、age、help_category_id等字段，但是只针对name该字段该列进行建立索引；help_category_id也可以建立个索引；则当前存在两个索引，但是每个索引只对应了相对应的一列；这个叫做单列索引或者是单值索引；一个表当中可以包含有多个单列索引)<br>2） 唯一索引：索引列的值必须唯一，但允许有空值；（当前表当中某一个字段或者是某一列当中其值都是唯一的；也就是说如果存在有列当中的值都是唯一的；那么必要情况下就可以针对该列建立一个唯一索引，在唯一索引的该列当中允许包括有多个NULL值；）<br>3） 复合索引：即一个索引包含多个列（比如：经常在查询当中需要对name字段以及parent_category_id或者是说age字段进行联合查询，那么此时可以将name字段以及age字段组合起来建立一个复合索引，即一个索引当中包含了两个列或者说多个列；那么这种索引称之为复合索引）；  </p><h2 id="索引-索引语法"><a href="#索引-索引语法" class="headerlink" title="索引 - 索引语法"></a>索引 - 索引语法</h2><p>索引在创建表的时候，可以同时创建，也可以随时增加新的索引；<br>准备环境：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> demo_01 <span class="keyword">default</span> charset=utf8mb4;</span><br><span class="line"></span><br><span class="line">use demo_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">'city'</span>(</span><br><span class="line">    <span class="string">'city_id'</span> <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT;</span><br><span class="line">    <span class="string">'city_name'</span> <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">    <span class="string">'country_id'</span> <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (<span class="string">'city_id'</span>)</span><br><span class="line">)ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">'country'</span>(</span><br><span class="line">    <span class="string">'country_id'</span> <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT;</span><br><span class="line">    <span class="string">'country_name'</span> <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (<span class="string">'country_id'</span>)</span><br><span class="line">)ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'city'</span>(<span class="string">'city_id'</span>,<span class="string">'city_name'</span>,<span class="string">'country_id'</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'西安'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'city'</span>(<span class="string">'city_id'</span>,<span class="string">'city_name'</span>,<span class="string">'country_id'</span>) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'NewYork'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'city'</span>(<span class="string">'city_id'</span>,<span class="string">'city_name'</span>,<span class="string">'country_id'</span>) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'北京'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'city'</span>(<span class="string">'city_id'</span>,<span class="string">'city_name'</span>,<span class="string">'country_id'</span>) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'上海'</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'country'</span>(<span class="string">'country_id'</span>,<span class="string">'country_name'</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'China'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'country'</span>(<span class="string">'country_id'</span>,<span class="string">'country_name'</span>) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'America'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'country'</span>(<span class="string">'country_id'</span>,<span class="string">'country_name'</span>) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Japan'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'country'</span>(<span class="string">'country_id'</span>,<span class="string">'country_name'</span>) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'UK'</span>);</span><br></pre></td></tr></table></figure><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>语法：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">UNIQUE</span> | <span class="keyword">FULL</span> <span class="built_in">TEXT</span> |SPATIAL] <span class="keyword">INDEX</span> index_name</span><br><span class="line">[ <span class="keyword">using</span> index_type ]</span><br><span class="line"><span class="keyword">ON</span> tb1_name(index_col_name, .... )</span><br><span class="line"></span><br><span class="line">index_col_name : column_name[ ( <span class="keyword">length</span> ) ] [ <span class="keyword">ASC</span> | <span class="keyword">DESC</span> ]</span><br></pre></td></tr></table></figure><p>索引的类型：UNIQUE唯一索引、FULLTEXT全文索引、SPATIAL；索引类型可选；可以不进行指定；<br>index_name：索引的名称；<br>using index_type：索引所使用的哪一个类型；如果不指定；则使用，默认的索引类型即B+树索引类型；<br>ON tb1_name(index_col_name, ….)：进行指定对哪一张表的哪几个字段创建索引；  </p><p>在MySQL当中，如果当前该字段是主键的话；则默认该字段默认有一个索引叫做主键索引；  </p><p>所以此时在city表当中对city_id字段的索引不必再进行创建；可以在city_name字段上创建索引；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_city_name <span class="keyword">on</span> city(city_name);<span class="comment">#此时在city_name字段上创建的该索引为普通索引；</span></span><br></pre></td></tr></table></figure><p>示例：为city表中的city_name 字段创建索引：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_city_name <span class="keyword">on</span> city(city_name);</span><br></pre></td></tr></table></figure><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><p>语法：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> <span class="built_in">table_name</span>; #<span class="built_in">table_name</span>，索引所建立在该字段，该字段所处的表的名称</span><br></pre></td></tr></table></figure><p>示例：查看city表中的索引信息：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> city\G; <span class="comment">#\G格式化</span></span><br></pre></td></tr></table></figure><p>在MySQL当中会默认对主键city_id字段创建一个索引就称作是主键索引key_name：primary；<br>而刚刚对city_name创建的索引则为key_name：idx_city_name；<br>主键索引primary以及刚刚没有指定索引类型的idx_city_name的索引类型都是BTREE类型；即B+Tree索引，BTree索引；</p><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>语法：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> tb1_name;</span><br><span class="line"><span class="comment"># index_name索引的名称</span></span><br><span class="line"><span class="comment"># 该index_name索引所具体在的表的名称</span></span><br></pre></td></tr></table></figure><p>示例：想要删除city表上的索引[ idx_city_name ]，可以操作如下：  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_city_name <span class="keyword">on</span> city;</span><br></pre></td></tr></table></figure><p>删除之后可以通过以下命令来进行查看删除的索引是否仍然存在；</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> <span class="built_in">table_name</span>\G;</span><br></pre></td></tr></table></figure><h3 id="ALTER指令"><a href="#ALTER指令" class="headerlink" title="ALTER指令"></a>ALTER指令</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># alter 修改</span></span><br><span class="line"><span class="comment"># 该语句添加一个主键，这意味着索引值必须唯一，且不能为NULL；</span></span><br><span class="line">1. <span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> primary <span class="keyword">key</span>(column_list);</span><br><span class="line"></span><br><span class="line"><span class="comment"># unique 唯一的</span></span><br><span class="line"><span class="comment"># 这条语句创建索引的值必须是唯一的（除了NULL意外，NULL可能会出现多次）</span></span><br><span class="line"><span class="comment"># Non_unique:0 #Non不，unique唯一；0：否定；双重否定等于肯定；即唯一</span></span><br><span class="line"><span class="comment"># 当创建普通索引时其Non_unique:1；即不唯一；  </span></span><br><span class="line">2. <span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> <span class="keyword">unique</span> index_name(column_list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加普通索引，索引值可以出现多次</span></span><br><span class="line">3. <span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> <span class="keyword">index</span> index_name(column_list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该语句指定了索引为FULLTEXT，用于全文索引</span></span><br><span class="line">4. <span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> fulltext index_name(column_list);</span><br></pre></td></tr></table></figure><p>示例：添加唯一索引  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> city <span class="keyword">add</span>  <span class="keyword">unique</span>  idx_city_name(city_name);</span><br></pre></td></tr></table></figure><h2 id="索引-索引设计原则"><a href="#索引-索引设计原则" class="headerlink" title="索引 - 索引设计原则"></a>索引 - 索引设计原则</h2><p>索引的设计可以遵循一些已有的原则，创建索引的时候请尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引；  </p><ul><li>对查询频次较高，且数据量比较大的表建立索引；</li><li>索引字段的选择，最佳候选列应当从where子句的条件中提取（即查询条件当中的字段），如果where子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合。</li><li>使用唯一索引，区分度越高，使用索引的效率越高；</li><li>索引可以有效的提升查询数据的效率，但是索引数量不是多多益善；索引越多，维护索引的代价自然也就水涨船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价（维护索引的数据结构），降低DML操作的效率，增加响应操作的时间消耗；另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但是无疑提高了选择的代价；</li><li>使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I/O效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，乡音的可以有效地提升MySQL访问索引的I/O效率。</li><li>利用最左前缀，N个列组合而成的组合索引，那么相当于是创建了N个索引，如果查询时where子句中使用了组成该索引的前几个字段，那么这条查询SQL可以利用组合索引来提升性能；  </li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">创建复合索引：</span><br><span class="line"></span><br><span class="line">CREATE <span class="built_in">INDEX</span> idx_name_email_status ON tb_seller(<span class="keyword">NAME</span>,email,<span class="keyword">STATUS</span>);</span><br><span class="line"></span><br><span class="line">就相当于</span><br><span class="line">      对<span class="keyword">name</span> 创建了索引；</span><br><span class="line">      对<span class="keyword">name</span> , email 创建了索引；</span><br><span class="line">      对<span class="keyword">name</span> , email , <span class="keyword">status</span> 创建了索引；</span><br><span class="line">只需要创建这么一个索引，在查询<span class="keyword">name</span>单个字段的时候就将会走索引；在查询<span class="keyword">name</span>，email这两个字段的时候也会走索引；在查询<span class="keyword">name</span>,email,<span class="keyword">status</span>这三个字段的时候也会走索引；  </span><br><span class="line">最左索引：最左指的是复合索引当中的第一个字段，只要查询的时候包含第一个字段，那么这个时候就会走索引；</span><br></pre></td></tr></table></figure><h2 id="视图-创建及修改视图"><a href="#视图-创建及修改视图" class="headerlink" title="视图 - 创建及修改视图"></a>视图 - 创建及修改视图</h2><p>视图（View）是一种虚拟存在的表。<br>视图并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。<br>通俗的讲，视图就是一条SELECT语句执行后返回的结果集。<br>所以在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。  </p><p>视图相对于普通表的又是主要包括以下几项：  </p><ul><li>简单：使用视图的用户完全不需要关心后面对应表的结构、关联条件和筛选条件，对用户来说已经是过滤好的符合条件的结果集。  </li><li>安全：使用视图的用户只能访问他们被允许查询的结果喜，对表的权限管理并不能先知道某个行某个列，但是通过视图就可以简单的实现；</li><li>数据独立：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响；</li></ul><h3 id="创建或者修改视图"><a href="#创建或者修改视图" class="headerlink" title="创建或者修改视图"></a>创建或者修改视图</h3><blockquote><p>创建视图的语法为</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">OR</span> <span class="keyword">REPLACE</span>] [ ALGORITHM = &#123; UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE &#125; ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">VIEW</span> view_name [ (column_list) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line"></span><br><span class="line">[ <span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span> ] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span> ]</span><br></pre></td></tr></table></figure><blockquote><p>修改视图的语法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> [ ALGORITHM = &#123; UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE &#125; ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">VIEW</span> view_name [ (column_list) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line"></span><br><span class="line">[ WITE [ <span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span> ] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span> ]</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">选项：</span><br><span class="line">    <span class="keyword">WITH</span> [ <span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span> 决定了是否允许更新数据使记录不在满足视图的条件；</span><br><span class="line">    <span class="keyword">LOCAL</span> 只要满足本视图的条件就可以更新</span><br><span class="line">    <span class="keyword">CASCADED</span> 必须满足所有针对该视图的所有视图的条件才可以更新（默认值）</span><br><span class="line"></span><br><span class="line">    <span class="keyword">CREATE</span> [ <span class="keyword">OR</span> <span class="keyword">REPLACE</span>] 创建或者是替换</span><br><span class="line">    <span class="keyword">AS</span> select_statement select_statement即<span class="keyword">select</span>语句</span><br></pre></td></tr></table></figure><p>示例：在视图当中展示国家以及其相关城市的信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>; <span class="comment"># 显示在该数据库下所有的表</span></span><br><span class="line">desc table_name; <span class="comment"># 显示该table_name当中的表结构</span></span><br><span class="line">desc city;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city c,country t <span class="keyword">where</span> c.country_id=t.country_id;</span><br><span class="line"><span class="keyword">select</span> c.*,t.country_name <span class="keyword">from</span> city c,country t <span class="keyword">where</span> c.country_id=t.country_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> view_city_country <span class="keyword">as</span> <span class="keyword">select</span> c.*,t.country_name <span class="keyword">from</span> city c,country t <span class="keyword">where</span> c.country_id=t.country_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> view_city_country;<span class="comment"># 查询视图与表操作一致</span></span><br><span class="line"><span class="keyword">update</span> view_city_country <span class="keyword">set</span> city_name=<span class="string">'西安市'</span> <span class="keyword">where</span> city_id=<span class="number">1</span>;<span class="comment">#修改视图与表操作一致</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city; <span class="comment"># 这个时候基础表当中的数据也会被更新掉；也就是说此时的视图修改操作是会影响到基础表当中的数据；  </span></span><br><span class="line">虽然视图能够做到更新，但是并不建议去更新数据；因为视图就是用来简化查询操作的，不建议更新视图；</span><br></pre></td></tr></table></figure><h2 id="视图-查看及删除视图"><a href="#视图-查看及删除视图" class="headerlink" title="视图 - 查看及删除视图"></a>视图 - 查看及删除视图</h2><h3 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h3><p>从MySQL5.1版本开始，使用SHOW TABLES命令的时候不仅会显示表的名字，同时也会显示视图的名字，而不存在单独显示视图的SHOW VIEWS命令。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;<span class="comment"># 显示表以及视图的名称</span></span><br></pre></td></tr></table></figure><p>同样，在使用SHOW TABLE STATUS命令的时候，不但可以显示表的信息，同时也可以显示视图的信息；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span>; <span class="comment"># 显示表以及视图的信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'city_country_view'</span>\G; <span class="comment"># 示例查看视图city_country_view</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span> view_city_country; <span class="comment"># 查看创建视图时所使用的的SQL语句是什么</span></span><br></pre></td></tr></table></figure><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><p>语法：  </p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">DROP</span> <span class="meta">VIEW</span> [ <span class="meta">IF</span> EXISTS ] view_name [, view_name ] ... [ <span class="meta">RESTRICT</span> | <span class="meta">CASCADE</span> ]</span><br></pre></td></tr></table></figure><p>示例，删除视图city_country_view:  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> city_country_view;# or <span class="keyword">DROP</span> <span class="keyword">VIEW</span> <span class="keyword">if</span> <span class="keyword">exists</span> city_country_view;</span><br></pre></td></tr></table></figure><h2 id="存储过程-概述"><a href="#存储过程-概述" class="headerlink" title="存储过程 - 概述"></a>存储过程 - 概述</h2><p>存储过程和函数是实现经过编译并存储在数据库中的一段SQL语句的集合，调用存储过程和函数可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率时有好处的。<br>存储过程和函数的区别在于函数必须有返回值，而存储过程没有；<br>函数：是一个有返回值的过程；<br>存储过程：是一个没有返回值的函数；</p><h2 id="存储过程-创建调用查询删除语法"><a href="#存储过程-创建调用查询删除语法" class="headerlink" title="存储过程 - 创建调用查询删除语法"></a>存储过程 - 创建调用查询删除语法</h2><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">procedure_name</span> <span class="params">( [proc_parameter[,.....]])</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    -- <span class="title">SQL</span>语句</span></span><br><span class="line"><span class="function"><span class="title">end</span>;</span></span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">select</span> '<span class="title">Hello</span> <span class="title">MySQL</span>';</span></span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h4 id="知识小贴士"><a href="#知识小贴士" class="headerlink" title="知识小贴士"></a>知识小贴士</h4><p>DELEMITER<br>    该关键字用来声明SQL语句的分隔符，告诉MySQL解释器，改短命令是否已经结束了，mysql是否可以执行了，默认情况下，delimiter是分号;<br>    在命令行客户端中，如果一行命令以分号结束，那么回车后，mysql将会执行该命令；</p><h3 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> procedure_name();</span><br></pre></td></tr></table></figure><h3 id="查看存储过程"><a href="#查看存储过程" class="headerlink" title="查看存储过程"></a>查看存储过程</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 查询db_name 数据库中的所有的存储过程</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> mysql.proc <span class="keyword">where</span> db=<span class="string">'db_name'</span>;</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> mysql.proc <span class="keyword">where</span> db=<span class="string">'demo_01'</span>$ #示例</span><br><span class="line"></span><br><span class="line">-- 查询存储过程的状态信息</span><br><span class="line">show <span class="function"><span class="keyword">procedure</span> <span class="title">status</span>;</span></span><br><span class="line">show <span class="function"><span class="keyword">procedure</span> <span class="title">status</span>$ # 示例</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">-- 查询某个存储过程的定义</span></span><br><span class="line"><span class="function"><span class="title">show</span> <span class="title">create</span> <span class="title">procedure</span> <span class="title">test</span>.<span class="title">pro_test1</span> \<span class="title">G</span>;</span></span><br><span class="line">show <span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test</span>\<span class="title">G</span>$ #示例</span></span><br></pre></td></tr></table></figure><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DROP <span class="function"><span class="keyword">PROCEDURE</span> [ <span class="title">IF</span> <span class="title">EXISTS</span> ] <span class="title">sp_name</span>;</span></span><br><span class="line"></span><br><span class="line">drop <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test1</span>$ # 示例</span></span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-变量"><a href="#存储过程-语法-变量" class="headerlink" title="存储过程 - 语法 - 变量"></a>存储过程 - 语法 - 变量</h2><p>存储过程是可以编程的，意味着可以使用变量，表达式，控制结构，来完成比较复杂的功能。(使得SQL具有过程化语言的处理能力)  </p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>DECLARE</li></ul><p>通过DECLARE可以定义一个局部变量，该变量的作用返回只能在BEGIN…END块中。  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE var_name[ <span class="built_in">..</span>. ]<span class="built_in"> type </span>[DEFAULT value]</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">num</span> <span class="title">int</span> <span class="title">default</span> 5;</span></span><br><span class="line">    <span class="keyword">select</span> num+ <span class="number">10</span>;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">num</span> <span class="title">int</span> <span class="title">default</span> 10;</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'num的值为'</span>,num);</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test1()$</span><br><span class="line">call pro_test2()$</span><br><span class="line"></span><br><span class="line">delimiter $</span><br></pre></td></tr></table></figure><ul><li>SET</li></ul><p>直接赋值使用SET，可以赋常量或者赋表达式，具体语法如下：  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">SET</span> var_name = expr [ , <span class="attribute">var_name</span>=expr ] <span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">pro_test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">BEGIN</span></span></span><br><span class="line"><span class="function">    <span class="title">DECLARE</span> <span class="title">NAME</span> <span class="title">VARCHAR</span><span class="params">(20)</span>;</span></span><br><span class="line">    <span class="keyword">SET</span> NAME = <span class="string">'MYSQL'</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> NAME ;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">pro_demo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">num</span> <span class="title">int</span> <span class="title">default</span> 0;</span></span><br><span class="line">    <span class="keyword">set</span> num = num +<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">select</span> num;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test3()$</span><br><span class="line">call pro_demo()$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>也可以通过 select….into 方式进行赋值操作；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_test5()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> countnum <span class="built_in">int</span>;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> countnum <span class="keyword">from</span> city;</span><br><span class="line">    <span class="keyword">select</span> countnum;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> PPROCEDURE pro_demo()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> <span class="keyword">num</span> <span class="built_in">int</span>;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> <span class="keyword">num</span> <span class="keyword">from</span> city;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'city表中的记录数为'</span>,<span class="keyword">num</span>);</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> pro_test5()$</span><br><span class="line"><span class="keyword">call</span> pro_demo()$</span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-if判断"><a href="#存储过程-语法-if判断" class="headerlink" title="存储过程 - 语法 - if判断"></a>存储过程 - 语法 - if判断</h2><h3 id="if条件判断"><a href="#if条件判断" class="headerlink" title="if条件判断"></a>if条件判断</h3><p>语法结构：  </p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> search_condition then statement_list</span><br><span class="line">      [ <span class="keyword">elseif</span> search_condition then statement_list ] ...</span><br><span class="line">      [ <span class="keyword">else</span> statementlist ]</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br></pre></td></tr></table></figure><p>需求：  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">根据定义的身高变量，判定当前身高的所属的身材类型</span><br><span class="line"></span><br><span class="line"><span class="number">180</span>及以上----------》身材高挑</span><br><span class="line"><span class="number">170</span> ~ <span class="number">180</span>----------》标准身材</span><br><span class="line"><span class="number">170</span>一下------------》一般身材</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">delimiter &amp;</span><br><span class="line">create procedure pro_test4()</span><br><span class="line">begin</span><br><span class="line">    declare height int<span class="built_in"> default </span>175;</span><br><span class="line">    declare description varchar(50)<span class="built_in"> default </span><span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> hegith &gt;= 180 then</span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'身材高挑'</span>;</span><br><span class="line">    elseif height &gt;=170 <span class="keyword">and</span> height &lt; 180 then</span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'标准身材'</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'一般身材'</span>;</span><br><span class="line">    end <span class="keyword">if</span>;</span><br><span class="line">    select concat(<span class="string">'身高'</span>,height,<span class="string">'对应的身材类型为'</span>,description);</span><br><span class="line">end$</span><br><span class="line"></span><br><span class="line">call pro_test()$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-输入参数"><a href="#存储过程-语法-输入参数" class="headerlink" title="存储过程 - 语法 - 输入参数"></a>存储过程 - 语法 - 输入参数</h2><p><strong>传递参数</strong></p><p>语法格式：  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">procedure_name</span><span class="params">([ <span class="keyword">in</span> / <span class="keyword">out</span> / inout ]参数名称 参数类型)</span></span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># <span class="title">IN</span> 该参数可以作为输入，也就是需要调用方传入值，默认</span></span><br><span class="line"><span class="function"># <span class="title">OUT</span> 该参数作为输出，也就是该参数可以作为返回值</span></span><br><span class="line"><span class="function"># <span class="title">INOUT</span> 既可以作为输入参数，也可以作为输出参数</span></span><br></pre></td></tr></table></figure><p><strong>IN - 输入</strong></p><p>需求：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据定义的身高变量，判定当前身高的所属的身材类型</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line">create procedure pro_test5(<span class="keyword">in</span> height int)</span><br><span class="line">begin</span><br><span class="line">    declare description varchar(50)<span class="built_in"> default </span><span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> hegith &gt;= 180 then</span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'身材高挑'</span>;</span><br><span class="line">    elseif height &gt;=170 <span class="keyword">and</span> height &lt; 180 then</span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'标准身材'</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'一般身材'</span>;</span><br><span class="line">    end <span class="keyword">if</span>;</span><br><span class="line">    select concat(<span class="string">'身高'</span>,height,<span class="string">'对应的身材类型为'</span>,description);</span><br><span class="line">end$</span><br><span class="line"></span><br><span class="line">call pro_test5(198)$</span><br><span class="line">call pro_test5(178)$</span><br><span class="line">call pro_test5(158)$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-输出参数"><a href="#存储过程-语法-输出参数" class="headerlink" title="存储过程 - 语法 - 输出参数"></a>存储过程 - 语法 - 输出参数</h2><p>需求：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据传入的身高变量，获取当前身高的所属的身材类型</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test5</span><span class="params">(<span class="keyword">in</span> height int ,<span class="keyword">out</span> description varchar(10)</span>)</span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="title">height</span> &gt;=180 <span class="title">then</span></span></span><br><span class="line"><span class="function">        <span class="title">set</span> <span class="title">description</span>='身材高挑';</span></span><br><span class="line">    elseif height &gt;= <span class="number">170</span> <span class="keyword">and</span> height &lt; <span class="number">180</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> description=<span class="string">'身材标准'</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">set</span> description=<span class="string">'一般身材'</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test5(<span class="number">188</span>,@description)$</span><br><span class="line"># @description 代表用户的变量；用户的会话变量</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> @description$ # 查询用户会话变量取值</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p><strong>小知识</strong><br>@description：这种变量要在变量名称前面加上“@”符号，叫做用户会话变量，代表整个会话过程它都是有作用的，这个类似于全局变量一样。<br>@@global.sort_buffer_size:这种在变量前加上“@@”，叫做系统变量；  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">set</span> <span class="variable">@name</span>=<span class="string">'itcast'</span>$</span><br><span class="line"></span><br><span class="line"><span class="literal">select</span> <span class="variable">@name</span>$</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-case结构"><a href="#存储过程-语法-case结构" class="headerlink" title="存储过程 - 语法 - case结构"></a>存储过程 - 语法 - case结构</h2><p>语法结构：  </p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">方式一：  </span><br><span class="line"><span class="keyword">CASE</span> case_value <span class="meta"># case_value 条件</span></span><br><span class="line">    <span class="keyword">WHEN</span> when_value <span class="keyword">THEN</span> statement_list <span class="meta"># statement_list SQL语句</span></span><br><span class="line">    [ <span class="keyword">WHEN</span> when_value <span class="keyword">THEN</span> statement_list ] ...</span><br><span class="line">    [ <span class="keyword">ELSE</span> statement_list ]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方拾二：  </span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">WHEN</span> search_condition <span class="keyword">THEN</span> statement_list <span class="meta"># search_condition 条件表达式；如果该表达式为真只执行THEN后的statement_list SQL语句</span></span><br><span class="line">    [ <span class="keyword">WHEN</span> search_condition <span class="keyword">THEN</span> statement_list ] ...</span><br><span class="line">    [ <span class="keyword">ELSE</span> statement_list ]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure><p>需求：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定一个月份，然后计算出所在的季度</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test7</span><span class="params">( mon int)</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">result</span> <span class="title">varchar</span><span class="params">(10)</span>;</span></span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">      when mou&gt;=<span class="number">1</span> <span class="keyword">and</span> mon &lt;=<span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> <span class="keyword">result</span>=<span class="string">'第一季度'</span>;</span><br><span class="line">      when mou&gt;=<span class="number">4</span> <span class="keyword">and</span> mon &lt;=<span class="number">6</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> <span class="keyword">result</span>=<span class="string">'第二季度'</span>;</span><br><span class="line">      when mou&gt;=<span class="number">7</span> <span class="keyword">and</span> mon &lt;=<span class="number">9</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> <span class="keyword">result</span>=<span class="string">'第三季度'</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">set</span> <span class="keyword">result</span>=<span class="string">'第四季度'</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'传递的月份为'</span>,mon,<span class="string">'， 计算出的结果为：'</span>,<span class="keyword">result</span>) <span class="keyword">as</span> content;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test7(<span class="number">7</span>)$</span><br><span class="line">call pro_test7(<span class="number">2</span>)$</span><br><span class="line">call pro_test7(<span class="number">11</span>)$</span><br><span class="line">call pro_test7(<span class="number">9</span>)$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-while循环"><a href="#存储过程-语法-while循环" class="headerlink" title="存储过程 - 语法 - while循环"></a>存储过程 - 语法 - while循环</h2><p>语法结构：  </p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> search_condition <span class="keyword">do</span> <span class="comment"># search_condition 条件成立执行循环；条件不成立则跳出循环</span></span><br><span class="line">    statement_list</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">while</span>;</span><br></pre></td></tr></table></figure><p>需求：  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算从<span class="number">1</span>加到n的值</span><br></pre></td></tr></table></figure><p>示例:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test8(n <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> total <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">declare</span> <span class="keyword">start</span> <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    while <span class="keyword">start</span> &lt;= n <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">set</span> total=total+<span class="keyword">start</span>;</span><br><span class="line">        <span class="keyword">start</span>=<span class="keyword">start</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> pro_test8(<span class="number">3</span>)$</span><br><span class="line"><span class="keyword">call</span> pro_test8(<span class="number">6</span>)$</span><br><span class="line"><span class="keyword">call</span> pro_test8(<span class="number">100</span>)$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-repeat循环"><a href="#存储过程-语法-repeat循环" class="headerlink" title="存储过程 - 语法 - repeat循环"></a>存储过程 - 语法 - repeat循环</h2><p>有条件的循环控制语句，当满足条件的时候退出循环。<br>while是满足条件才执行，repeat是满足条件就退出循环。  </p><p>语法结构：  </p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REPEAT</span></span><br><span class="line">    statement_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">UNTIL</span> search_condition</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">REPEAT</span>;</span><br></pre></td></tr></table></figure><p>需求：  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算从<span class="number">1</span>加到n的值</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test9</span><span class="params">(n int)</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">total</span> <span class="title">int</span> <span class="title">default</span> 0;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">repeat</span></span><br><span class="line">        <span class="keyword">set</span> total=total+n;</span><br><span class="line">        <span class="keyword">set</span> n=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">until</span> n=<span class="number">0</span> # 此处不加分号；加分号报错；满足当前条件则跳出循环</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test10(<span class="number">50</span>)$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-loop循环"><a href="#存储过程-语法-loop循环" class="headerlink" title="存储过程 - 语法 - loop循环"></a>存储过程 - 语法 - loop循环</h2><h3 id="loop语句"><a href="#loop语句" class="headerlink" title="loop语句"></a>loop语句</h3><p>LOOP实现简单的循环，退出循环的条件需要使用其他的语句定义，通常可以使用LEAVE语句实现，具体语法如下：  </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ begin_label: ] <span class="keyword">LOOP</span></span><br><span class="line">    statement_list</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span> [ end_label ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果不在 statement_list 中增加退出循环的语句，那么LOOP语句可以用来实现简单的死循环</p><h3 id="leave语句"><a href="#leave语句" class="headerlink" title="leave语句"></a>leave语句</h3><p>用来从标注的流程构造中退出，通常和BEGIN….END或者循环一起使用。<br>下面是一个使用LOOP和LEAVE的简单例子，退出循环；</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">pro_test10</span><span class="params">(n int)</span></span></span><br><span class="line"><span class="function"><span class="title">BEGIN</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">total</span> <span class="title">int</span> <span class="title">default</span> 0;</span></span><br><span class="line"></span><br><span class="line">    ins:<span class="keyword">LOOP</span></span><br><span class="line">        <span class="keyword">IF</span> n &lt;= <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">          leave ins;</span><br><span class="line">        <span class="keyword">ELSE</span></span><br><span class="line">          <span class="keyword">SET</span> total=total+n;</span><br><span class="line">          <span class="keyword">SET</span> n=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">LOOP</span> ins;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test10</span><span class="params">(n int)</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">total</span> <span class="title">int</span> <span class="title">default</span> 0;</span></span><br><span class="line"></span><br><span class="line">    c:<span class="keyword">loop</span></span><br><span class="line">        <span class="keyword">set</span> total=total+n;</span><br><span class="line">        <span class="keyword">set</span> n=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> n&lt;<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">            leave c; # 满足条件跳出循环</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">loop</span> c;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test10(<span class="number">100</span>)$</span><br><span class="line">call pro_test10(<span class="number">99</span>)$</span><br><span class="line">call pro_test10(<span class="number">3</span>)$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-游标介绍"><a href="#存储过程-语法-游标介绍" class="headerlink" title="存储过程 - 语法 - 游标介绍"></a>存储过程 - 语法 - 游标介绍</h2><p>游标是用来存储查询结果集的数据类型，唉存储过程和函数中可以使用光标对结果集进行循环的处理。<br>光标的使用包括光标的声明、OPEN、FETCH和CLOSE。  </p><h2 id="存储过程-语法-游标基本操作"><a href="#存储过程-语法-游标基本操作" class="headerlink" title="存储过程 - 语法 - 游标基本操作"></a>存储过程 - 语法 - 游标基本操作</h2><p>其语法分别如下：  </p><p>声明光标：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span> <span class="keyword">for</span> select_statement;</span><br></pre></td></tr></table></figure><p>OPEN光标：  </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPEN cursor_name<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>FETCH光标：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FETCH cursor_name INTO var_name [ , var_name ] <span class="string">...</span> <span class="comment"># 每抓取一次，即获取结果集当中每一行数据；调用一次指针往下指向一次；调用一次指针往下指向一次；当指针指到最后没有数据的那一行时，即此时就应该退出游标了；</span></span><br></pre></td></tr></table></figure><p>CLOSE光标：  </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLOSE cursor_name<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>示例：<br>初始化脚本:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'姓名'</span>,</span><br><span class="line">  age <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">comment</span> <span class="string">'年龄'</span>,</span><br><span class="line">  salary <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">comment</span> <span class="string">'薪水'</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="string">'id'</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">id</span>,<span class="keyword">name</span>,age,salary) <span class="keyword">values</span> (<span class="literal">null</span>,<span class="string">'金毛狮王'</span>,<span class="number">55</span>,<span class="number">3800</span>),(<span class="literal">null</span>,<span class="string">'白眉鹰王'</span>,<span class="number">60</span>,<span class="number">4400</span>),(<span class="literal">null</span>,<span class="string">'青翼蝠王'</span>,<span class="number">38</span>,<span class="number">2800</span>),(<span class="literal">null</span>,<span class="string">'素衫龙王'</span>,<span class="number">42</span>,<span class="number">1800</span>);</span><br></pre></td></tr></table></figure><p>需求：  </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询emp表中数据，并逐行获取进行显示</span></span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delimiter</span> $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test11()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> e_id <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">declare</span> e_name <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line">    decalre e_age <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">declare</span> e_salary <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">declare</span> emp_result <span class="keyword">cursor</span> fro <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> emp_result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_naem,e_age,e_salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_naem,e_age,e_salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_naem,e_age,e_salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_naem,e_age,e_salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_naem,e_age,e_salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">close</span> emp_result;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"># emp表当中只有四条数据，如果<span class="keyword">fetch</span>的次数大于表当中的数据，那么<span class="keyword">fetch</span>表中总行数依然可以打印出来，一旦<span class="keyword">fetch</span>大于表中的总行数则进行报错；</span><br><span class="line"></span><br><span class="line"># 通过<span class="keyword">fetch</span>一行一行进行抓取记录编写的效率十分低；</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> pro_test11();</span><br><span class="line"><span class="keyword">delimiter</span> ;</span><br></pre></td></tr></table></figure><h2 id="存储过程-语法-循环获取游标"><a href="#存储过程-语法-循环获取游标" class="headerlink" title="存储过程 - 语法 - 循环获取游标"></a>存储过程 - 语法 - 循环获取游标</h2><blockquote><p>循环当中，游标的fetch退出判断</p></blockquote><p>1） count(*) into num;  num –<br>2） mysql存在机制，变量，通过改变该变量取值状态及退出fetch  </p><p>示例：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delimiter</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test12()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> e_id <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    decalre e_name <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line">    decalre e_age <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    decalre e_salary <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">declare</span> has_data <span class="type">int</span> <span class="keyword">default</span> <span class="number">1</span>;#当has_data为<span class="number">1</span>时表示还有数据；当has_data为<span class="number">0</span>时表示没有数据</span><br><span class="line"></span><br><span class="line">    <span class="keyword">declare</span> emp_result <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line">    <span class="keyword">DECLARE</span> <span class="keyword">EXIT</span> <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">NOT</span> <span class="built_in">FOUND</span> <span class="keyword">set</span> has_data=<span class="number">0</span>;#退出当前游标指向程序并设置has_data为<span class="number">0</span>；此为mysql提供的一种机制；同时该句话需要声明在声明游标的下方；当游标进行<span class="keyword">fetch</span>获取不到数据的时候，此时会进行触发；</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> emp_reuslt;</span><br><span class="line"></span><br><span class="line">    repeat</span><br><span class="line">        <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_name,e_age,e_salary;</span><br><span class="line">        <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line">        <span class="keyword">until</span> has_data=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span> repeat;</span><br><span class="line">    <span class="keyword">close</span> emp_result;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> pro_test12()$</span><br><span class="line"></span><br><span class="line"><span class="keyword">delimiter</span> ;</span><br></pre></td></tr></table></figure><h2 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h2><p>语法结构：  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION function_name([ param<span class="built_in"> type </span><span class="built_in">..</span>. ])</span><br><span class="line">RETURNS type</span><br><span class="line">BEGIN</span><br><span class="line">    <span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><p>案例：<br>定义一个存储过程，请求满足条件的总记录数：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delimiter</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> count_city(countryId <span class="type">int</span>)</span><br><span class="line"><span class="keyword">returns</span> <span class="type">int</span> # 此处不需要分号</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> cnum <span class="type">int</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> count(*) <span class="keyword">into</span> cnum <span class="keyword">from</span> city <span class="keyword">where</span> country_id = countryId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cnum;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">delimiter</span> ;</span><br><span class="line"></span><br><span class="line"># 存储过程虽然没有返回值；但是依然可以返回结果；因为其参数列表当中有<span class="keyword">in</span>、<span class="keyword">out</span>（返回值）、<span class="keyword">inout</span>；存储函数能做的事情；存储过程也可以做；</span><br></pre></td></tr></table></figure><blockquote><p>调用存储函数命令</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> count_city(<span class="number">1</span>)$</span><br><span class="line"><span class="keyword">select</span> count_city(<span class="number">2</span>)$</span><br></pre></td></tr></table></figure><blockquote><p>删除存储函数命令</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop <span class="keyword">function</span> <span class="title">count_city$</span></span><br></pre></td></tr></table></figure><h2 id="触发器-介绍"><a href="#触发器-介绍" class="headerlink" title="触发器 - 介绍"></a>触发器 - 介绍</h2><p>触发器是与表有关的数据库对象，指的是在insert、update、delete之前或者之后，触发并执行触发器中定义的SQL语句集合，触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作；  </p><p>使用别名OLD和NEW来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。<br>现在触发器还只支持行级触发，不支持语句级触发。  </p><table>  <tr>    <th>触发器类型</th>    <th>NEW和OLD的使用</th>  </tr>  <tr>    <td>INSERT型触发器</td>    <td>NEW表示将要或者已经新增的数据</td>  </tr>  <tr>    <td>UPDATE型触发器</td>    <td>OLD表示修改之前的数据，NEW表示将要或者已经修改后的数据</td>  </tr>  <tr>    <td>DELETE型触发器</td>    <td>OLD表示将要或者已经删除的数据</td>  </tr></table><h2 id="触发器-创建及应用"><a href="#触发器-创建及应用" class="headerlink" title="触发器 - 创建及应用"></a>触发器 - 创建及应用</h2><h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h3><p>语法结构：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trigger_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">before</span>/<span class="keyword">after</span> <span class="keyword">insert</span>/<span class="keyword">update</span>/<span class="keyword">delete</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># before 在...之前/after 在...之后</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">on</span> tb1_name</span><br><span class="line"></span><br><span class="line">[ <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> ] <span class="comment">-- 当前操作的是一个行级触发器;oracle数据库当中既有行级触发器也有语句级的触发器；而mysql数据库当中只支持行级触发器现还不支持语句级触发器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  trigger_stmt;<span class="comment">--触发的内容</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>需求：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过触发器记录 emp表的数据变更日志，包含新增、修改、删除；</span><br></pre></td></tr></table></figure><p>示例：  </p><p>首先创建一张日志表:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_logs(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">    operation <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'操作类型，insert/update/delete'</span>,</span><br><span class="line">    operate_time datatime <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'操作时间'</span>,</span><br><span class="line">    operate_id <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'操作表的id'</span>,</span><br><span class="line">    operate_params <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">comment</span> <span class="string">'操作参数'</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="string">'id'</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>$</span><br></pre></td></tr></table></figure><p>创建insert性触发器，完成插入数据时的日志记录；  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELIMITER</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">trigger</span> emp_logs_insert_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">on</span> emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs(id,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(</span><br><span class="line">      <span class="keyword">null</span>,<span class="string">'insert'</span>,now(),<span class="built_in">new</span>.id,concat( <span class="string">'插入后 ( id：'</span>, <span class="built_in">new</span>.id , <span class="string">', name: '</span> , <span class="built_in">new</span>.name , <span class="string">' ,  age: '</span> ,  <span class="built_in">new</span>.age , <span class="string">' , salary: '</span> , <span class="built_in">new</span>.salary , <span class="string">')'</span>)</span><br><span class="line">    );</span><br><span class="line">    # 此处的<span class="built_in">new</span>.id即新插入emp表中数据的记录的id，即emp当中的id字段；</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(id,<span class="type">name</span>,age,salary) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">'光明左使'</span>,<span class="number">30</span>,<span class="number">3500</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp$</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp_logs$</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(id,<span class="type">name</span>,age,salary) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">'光明右使'</span>,<span class="number">35</span>,<span class="number">3800</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">trigger</span> emp_logs_update_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">update</span></span><br><span class="line"><span class="keyword">on</span> emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs(id,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(</span><br><span class="line">      <span class="keyword">null</span>,<span class="string">'update'</span>,now(),<span class="built_in">new</span>.id,</span><br><span class="line">      concat( </span><br><span class="line">        <span class="string">'修改前 ( id：'</span>, <span class="built_in">old</span>.id ,</span><br><span class="line">        <span class="string">',name: '</span> , <span class="built_in">old</span>.name ,</span><br><span class="line">        <span class="string">',age: '</span> ,  <span class="built_in">old</span>.age ,</span><br><span class="line">        <span class="string">',salary: '</span> , <span class="built_in">old</span>.salary ,</span><br><span class="line">        <span class="string">') 修改后( id：'</span>, <span class="built_in">new</span>.id ,</span><br><span class="line">        <span class="string">',name: '</span> , <span class="built_in">new</span>.name ,</span><br><span class="line">        <span class="string">',age: '</span> ,  <span class="built_in">new</span>.age ,</span><br><span class="line">        <span class="string">',salary: '</span> , <span class="built_in">new</span>.salary ,</span><br><span class="line">        <span class="string">')'</span>  </span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">    # 此处的<span class="built_in">new</span>.id即新插入emp表中数据的记录的id，即emp当中的id字段；</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> age=<span class="number">39</span> <span class="keyword">where</span> id=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp$</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp_logs$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">trigger</span> emp_logs_delete_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span> emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs(id,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(</span><br><span class="line">      <span class="keyword">null</span>,<span class="string">'delete'</span>,now(),<span class="built_in">old</span>.id,</span><br><span class="line">      concat(</span><br><span class="line">        <span class="string">'删除前( id：'</span>, <span class="built_in">old</span>.id ,</span><br><span class="line">        <span class="string">',name: '</span> , <span class="built_in">old</span>.name ,</span><br><span class="line">        <span class="string">',age: '</span> ,  <span class="built_in">old</span>.age ,</span><br><span class="line">        <span class="string">',salary: '</span> , <span class="built_in">old</span>.salary ,</span><br><span class="line">        <span class="string">')'</span>  </span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp$</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp_logs$</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp$</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp_logs$</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELIMITER</span> ;</span><br></pre></td></tr></table></figure><h2 id="触发器-查看及删除"><a href="#触发器-查看及删除" class="headerlink" title="触发器 - 查看及删除"></a>触发器 - 查看及删除</h2><h3 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h3><p>语法结构：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> [ <span class="built_in">schema_name</span>.] trigger_name</span><br></pre></td></tr></table></figure><p>如果没有指定schema_name，默认为当前数据库。</p><h3 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h3><p>可以通过执行SHOW TRIGGERS 命令查看触发器的状态、语法等信息。<br>语法结构：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> triggers;</span><br><span class="line"></span><br><span class="line"># Event 触发器监听的事件 <span class="keyword">INSERT</span>/<span class="keyword">UPDATE</span>/<span class="keyword">DELETE</span></span><br><span class="line"># <span class="keyword">Table</span> 对于哪一张表监听的触发器</span><br><span class="line"># <span class="keyword">Timing</span> 触发器是前置触发<span class="keyword">BEFORE</span>还是后置触发<span class="keyword">AFTER</span></span><br><span class="line"># <span class="keyword">Statement</span> 触发器定义</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 数据库优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql索引底层数据结构</title>
      <link href="/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91MySql%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91MySql%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<br><a href="https://www.bilibili.com/video/BV13x411Z7AQ?from=search&amp;seid=12763347691863057372" target="_blank" rel="noopener">https://www.bilibili.com/video/BV13x411Z7AQ?from=search&amp;seid=12763347691863057372</a></p><h3 id="索引的本质"><a href="#索引的本质" class="headerlink" title="索引的本质"></a>索引的本质</h3><p><strong>索引的本质</strong></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANXwvSlPCJJI2vYZaT3H0rZCG38flqH5eE7TMAOK*DSM1BhWXXI4cugphYQTkM94HMJ9GHGpkBn3QA6a5u74EOK8M!/r" alt="索引"></p><ul><li><strong>索引</strong> 是 <strong>帮助MySQL</strong> <strong>高效 获取数据</strong> 的 <strong>排好序</strong> 的 <strong>数据结构</strong></li><li><strong>索引存储在文件里</strong></li><li><strong>索引结构</strong><ul><li><strong>二叉树</strong></li><li><strong>红黑树</strong></li><li><strong>HASH</strong></li><li><strong>BTREE</strong></li></ul></li></ul><blockquote><p><strong>问题</strong>：有没有在生产环境SQL查询的非常慢，需要优化的。<br><strong>答</strong>：真的有过，就是上一家公司做的那个项目关系到全国，省，市，区，县这种的，每次一统计吧就是全国的那种统计，就是该省下有多少人注册了，该市下有多少人注册了…..这种，每次加载大半天都搞不赢，那个页面都出不来。<br>这个属于慢查询吗？<br>我也不是很清楚诶。反正就是数据量贼大，然后用的Oracle数据库，因为还有就是交易量很大。  </p></blockquote><blockquote><p><strong>问题</strong>： 遇到这种问题第一时间想到的优化是什么？<br><strong>答</strong>：额，我好像也没有做什么优化，通过主键来进行查询，就是交易量特别大的时候，然后去查询的时候，就是使用的交易表TRANS 当中的主键去进行查询大部分是。<br>然后就是因为是二次开发这个系统，所以在Oracle数据库当中是存在之前的开发者所写的索引的。<br>然后就是不去使用外键，就是外键关联的外键这种不去进行使用，而是有些表当中额怎么说呢，就是有些表当中记录的字段存在，而另外一张表当中因为不去进行关联查询trans表这种数据量大的表就自己这张表也会记录一些数据这种。<br>尽量通过主键去查询，因为通过其他的去查询，比如字符串这种的碰到有些时候会很慢。<br>或者是还有就是写那个查询，navicat当中写个查询然后保存。<br>我想不到其他的了，因为没有怎么用过索引。  </p></blockquote><p><strong>首先检查索引</strong>；  </p><ol><li>查看<strong>SQL</strong>当中的<strong>where</strong>当中的<strong>查询字段</strong> <strong>是否有加索引</strong>；  </li><li>或者说加了索引 <strong>是否正确索引</strong> 呢；<br>只要SQL不太烂，正常的走索引，数据量几百万上千万行的数据表，查询的速度依然会很快。  </li></ol><blockquote><p><strong>思考</strong>： 一个几百万上千万数据量的表，只要加上了索引，然后查询的条件又是走的索引，关键的字段，为什么查找的速度就能够提高很多，性能会高？<br><strong>答</strong>：因为索引就相当于是书的页码，比如我要查询新华字典当中的某一个字，找到它的索引，也就是它的页码，一下子就能找到了。<br>不过至于它的底层方面的原理我不是很清楚。没有过这方面的研究，我也只是听说过是通过b+ 树实现的？  </p></blockquote><p><strong>索引的定义</strong>：<strong>索引</strong> 是 <strong>帮助MySQL</strong> <strong>高效 获取数据</strong> 的 <strong>排好序</strong> 的 <strong>数据结构</strong>。<br><strong>索引结构</strong>：  </p><ul><li><strong>二叉树</strong></li><li><strong>红黑树</strong></li><li><strong>HASH(哈希表)</strong></li><li><strong>BTREE（B树）</strong></li></ul><p><strong>数据表</strong> 是 <strong>存储在磁盘文件</strong> 当中；<br>所装MySQL当中的data目录，目录下为数据库；<br><strong>表数据</strong>实际上就 <strong>存放在磁盘上</strong> 了；<br>那<strong>从数据表当中去读取数据的时候查询某一行数据</strong>的时候，意味着就需要从<strong>磁盘</strong>上去<strong>查询</strong>这个数据表当中的数据。<br>如果该数据<strong>没有加索引 则 从第一行开始进行查找</strong>；<br>select * from t where t.col2=89;<br>如果该表t没有加任何索引则需要从该表<strong>第一行</strong>开始<strong>遍历</strong>。<br><strong>逐行查找逐行比对</strong>。<br>直到查找到<strong>n次</strong>磁盘查找到数据匹配位置。<br>如果要查找的<strong>数据在末尾</strong>，<strong>数据量非常大</strong>的情况下，每次从<strong>表头进行查找</strong>，<strong>性能非常差</strong>。<br>这也就是 <strong>全表扫描</strong>。  </p><blockquote><p><strong>问题</strong>：有什么办法<strong>优化SQL查询</strong>？  </p><ul><li>给<strong>字段加索引</strong>。<br>给col2字段加上索引后，即便是该表当中存在数据量十分大，查询起来的效率也会很高。<br>这个原因是什么？<br>给该字段加上索引之后，该字段作为索引字段之后，它在该表中的存储结构，该字段的存储结构就有一点区别。  </li><li><em>索引本质上是一种数据结构*</em>。<br>所以当给col2字段加上索引之后，那么就会将该col2字段列的数据通过<strong>以一种数据结构进行存储起来</strong>。  </li></ul></blockquote><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p><strong>二叉树（Binary Search Trees，简写BST）</strong>：<a href="https://www.cs.usfca.edu/~galles/visualization/BST.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/BST.html</a>  </p><p>比方说，常见的<strong>数据结构</strong>-<strong>二叉树</strong>，<br>将col2字段该列的数据放到二叉树当中来，<br>该字段col2的列的数据，每一个数据都放到二叉树当中去；  </p><p>而 <strong>二叉树的每一个结点</strong> 是一个 <strong>key-value</strong> 的一个取值；<br>也就是说 <strong>key</strong> 其实即为 <strong>索引字段</strong> ，而 <strong>value</strong> 则为 <strong>箭头的指针</strong> ；<br><strong>索引字段</strong>所对应的这<strong>一行的数据</strong>，在<strong>磁盘</strong>上的一个<strong>文件指针</strong>；<br>如果通过一个合理的方式，或者说是一个好一点的数据结构，来放索引的这个字段，以及每一个索引对应的这一行数据，<strong>磁盘文件指针</strong>；<br>那么再去看查找这行数据。  </p><p><strong>数据结构-二叉树</strong>常识：  </p><ul><li><strong>根节点（父节点）的右孩子取值大于根节点（父节点）取值</strong>；</li><li><strong>根节点（父节点）的左孩子取值小于根节点（父节点）取值</strong>；</li><li><strong>从左到右依次递增</strong>；</li></ul><p>如果要查找 select * from t where t.col2=89这一行数据；<br>用<strong>索引字段</strong>去查找的话，那么<strong>先走索引</strong>；<br>而<strong>索引</strong>是当前被放在<strong>二叉树</strong>这样一种数据结构当中去了；<br>那么再去进行查找；<br>那么肯定是从<strong>根结点</strong>开始进行查找；<br>那么第一次查询，从磁盘上进行查询结点后发现34和89对不上，错了；<br>89是大于34的；<br>按照<strong>二叉树数据结构</strong>的这样一个特点、特性；<br>找到该<strong>根结点的右边的子结点</strong>，一找即发现当前右边的子结点即为当前查询的结点；<br>然后通过<strong>找到的该结点</strong>找到<strong>该结点所对应的value</strong>；<br>该<strong>value</strong>放的就是这个 <strong>索引字段</strong> <strong>所对的那一行</strong>的<strong>数据磁盘文件指针</strong>；<br>那么就可以很快查找得到；  </p><p>通过一种<strong>合理的数据结构</strong>来放刚加的这个索引字段；那么这个<strong>查找的速度</strong>就会变得<strong>快</strong>很多。  </p><p><strong>MySQL的底层原理并不是二叉树</strong>。<br><strong>MySQL的底层是B+树</strong>；<br>MySQL的最终底层为什么选择B+树而不选择其他的数据结构？  </p><p>通过一种<strong>合理的数据结构</strong>来放<strong>索引的字段</strong>，那么<strong>查找的效率</strong>就将会<strong>快</strong>很多；<br>就<strong>不用一行一行</strong>的去<strong>遍历</strong>表，即<strong>不用全表扫描式</strong> <strong>查询某一行数据</strong> ；<br>而是可以先快速的<strong>从索引的数据结构当中</strong> <strong>快速的定位到某一个索引</strong>，<br>再把<strong>这个索引</strong> <strong>对应的那一行数据</strong> 的 <strong>磁盘文件指针</strong> 给查询出来，<br>就能够<strong>快速的</strong> 从<strong>磁盘上</strong> 找到 <strong>该行</strong> 要 <strong>查询的数据</strong>；  </p><p><strong>索引具体是什么样的数据结构？</strong>  </p><p>MySQL官方没有选择二叉树，说明<strong>二叉树</strong>在<strong>某些场景</strong>下是<strong>存在问题</strong>的；  </p><p>for example:  </p><p>假设表t，将<strong>col1作为索引字段</strong>，那么SQL语句就需要变成：<br>select * from t <strong>where t.col1</strong>=6;来进行查找；<br>现在将col1作为一个<strong>二叉树</strong>；<br>当<strong>t表在插入数据</strong>的时候，<strong>二叉树插入数据</strong>的一个变化过程；<br><strong>二叉树</strong>这样一个<strong>索引结构的变化</strong>；<br>插入第一行数据首先会去<strong>维护这个索引</strong>，第一列col1的数据呈现的<strong>规律为顺序递增，递增</strong>；<br>每插入一行数据会先要去<strong>维护索引的这个数据结构</strong>；<br><strong>索引</strong>在<strong>二叉树</strong>当中存在一个<strong>递增</strong>的规律，<strong>顺序递增</strong>；<br>每插入一个数据，首先要<strong>维护二叉树（Binary Search Trees）递增顺序的一个字段</strong>；<br><strong>二叉树</strong>如果是<strong>维护这样一个递增顺序的字段</strong>作为索引会是一个什么样的一个情况；  </p><ul><li>索引-BinarySearchTrees插入递增数据<br><img src="/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91MySql%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95-BinarySearchTrees%E6%8F%92%E5%85%A5%E9%80%92%E5%A2%9E%E6%95%B0%E6%8D%AE.gif" alt="索引-BinarySearchTrees插入递增数据"></li></ul><blockquote><p>国外二叉树（各种数据结构）的一个教学网站（解析动画演示）：<br><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p></blockquote><p>插入第一行数据，再插入第二行数据，先进行<strong>维护</strong>这个<strong>索引</strong>；<br>如果<strong>二叉树维护的是这种单边增长的这种字段</strong>，而<strong>二叉树正好作为索引的底层数据结构</strong>，此时就会出现问题；<br><strong>二叉树</strong>也会变成<strong>单边增长</strong>；<br><strong>二叉树</strong>对于这种col1字段是<strong>单边增长</strong>的这种情况是不符合的；<br>这种用二叉树存储索引字段，就跟在数据表中去<strong>全表扫描</strong>没有任何区别，效果一样,没有什么区别；<br><strong>二叉树</strong>这种数据结构对于索引的存储，<strong>索引字段的存储</strong>在某些方面是<strong>存在局限</strong>的；  </p><ul><li>索引-BinarySearchTrees查询递增数据<br><img src="/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91MySql%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95-BinarySearchTrees%E6%9F%A5%E8%AF%A2%E9%80%92%E5%A2%9E%E6%95%B0%E6%8D%AE.gif" alt="索引-BinarySearchTrees查询递增数据"></li></ul><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><p><strong>红黑树</strong>：<a href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/RedBlack.html</a>  </p><p>问题：是否听说过<strong>红黑树</strong>？<br>答：听说过，且jdk1.8当中HashMap当中链表长度达到8之后就会将数据结构链表转化成红黑树这种数据结构；  </p><p>二叉树不行，则看看其他的更好的数据结构是否能够更好的存储索引字段;<br>红黑树也是一种常见的数据结构；<br>jdk在1.8之后，HashMap底层的链表实际上就是用红黑树来做了一个优化；  </p><p><strong>插入递增数据 会 自动平衡</strong>；  </p><ul><li>索引-RedBlack插入递增数据<br><img src="/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91MySql%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95-RedBlack%E6%8F%92%E5%85%A5%E9%80%92%E5%A2%9E%E6%95%B0%E6%8D%AE.gif" alt="索引-RedBlack插入递增数据"></li></ul><p>查询时相对于二叉树来说要少一点；<br>用<strong>红黑树</strong>来存储索引字段，相对于用普通的二叉树来存储来说，性能稍微高一点；<br><strong>红黑树</strong>针对于这种单边增长的这种情况，只要<strong>单边出现3个连续递增的结点</strong>会做一个<strong>自动平衡</strong>的处理；<br>那么存储同样的数据的话，整体的<strong>高度</strong>相对来说<strong>红黑树</strong>肯定要<strong>比二叉树要短</strong>；  </p><ul><li>索引-RedBlack查询递增数据<br><img src="/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91MySql%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95-RedBlack%E6%9F%A5%E8%AF%A2%E9%80%92%E5%A2%9E%E6%95%B0%E6%8D%AE.gif" alt="索引-RedBlack查询递增数据"></li></ul><p><strong>问题</strong>：<strong>二叉树 是可以 自动平衡</strong>的，那么想一想如果用二叉树来做索引字段存储的数据结构有没有什么<strong>弊端</strong>？在哪些业务场景当中可能又有一些<strong>小问题</strong>？<br>答：我想不太出来诶。  </p><ul><li><strong>红黑树范围查询</strong></li><li>当数据量小的时候查询起来,效率还在线上；<br>如果<strong>当数据量大</strong>的话，<strong>红黑树</strong>将<strong>不断的往下增长</strong>；</li><li><em>树的高度*</em>有可能变成<strong>2的n次方</strong>；<br>这个<strong>n即为树的高度</strong>；<br>每个结点即2，这个树能够存多少索引字段，即2的n次方；</li><li>如果说要查找的n，要查找的那一行的索引字段刚好是在树的叶子结点上面。<br>一般是从<strong>根节点上进行遍历</strong>，那么<strong>查找遍历的次数</strong>至少是<strong>树的n</strong>，<strong>高度次</strong>这么多；<br>那么从磁盘上要经过几十次，一个结点查找一次，查找一次有一个专业的术语，跟磁盘打一次交道，叫做<strong>磁盘IO</strong>，这样的话针对<strong>磁盘IO</strong>来说性能是不高的；<br>效率不是特别高；<br>可以说效率比较低了；<br>如果还经历几十次这样的<strong>磁盘IO</strong>，性能是肯定没有办法接受的；</li></ul><p><strong>红黑树</strong>这种数据结构，<strong>一旦表的数据量特别大</strong>的时候，<strong>查找数据的效率</strong>依然会<strong>很慢</strong>；<br>因为查找数据可能就在叶子结点上；<br><strong>红黑树</strong>在<strong>数据量大的时候</strong>也是存在<strong>弊端</strong>的；  </p><p>红黑树不行，可以对其做一点点改造；  </p><p>即便是<strong>大数量情况</strong>下，几百万甚至是上千万的数据量下；<br>通过一种数据结构能够<strong>快速的定位</strong>到所需要的那个数据的索引的字段；<br>从而根据那个索引的字段能够得到结点当中的那个value值，也就是<strong>索引所在那一行数据的磁盘文件指针</strong>来<strong>定位到磁盘上的某一个位置</strong>查找到这一行数据；  </p><p>可以对红黑树进行改造进行优化；  </p><p><strong>红黑树</strong>也是<strong>二叉树</strong>；叫做<strong>二叉平衡树</strong>；<br>因为<strong>红黑树会自动平衡</strong>；在红黑树的基础上做一下改造，从而解决在大数据量这种情况下出现的弊端<br>（因为<strong>树的高度太高</strong>，也就是树<strong>存储大数据量的情况</strong>下，<strong>树的高度太高</strong>，<strong>磁盘IO</strong>就将<strong>随着树的高度height增长而增长</strong>）；  </p><p>问题： 对红黑树进行改造，让红黑树效率更高一点？  </p><ul><li><strong>n叉树</strong></li><li>原来<strong>结点存储到磁盘</strong>上面，之前<strong>结点就只存储一个索引字段</strong>；<br>那么可以将这个<strong>结点弄大一点</strong>，也就是将它的<strong>磁盘存储空间分配大一点</strong>（也就是让这个<strong>结点上多存储几个索引字段</strong>）；<br>且<strong>每一个索引</strong>之间<strong>都可以进行分叉</strong>，<strong>分叉下的索引结点的磁盘存储空间</strong>也分配大一点，也存储多个索引字段，每一个结点都可以有多个结点（多个索引元素）；  </li></ul><p><strong>问题</strong>： 这样的存储结构，同样的大数据量的情况下，这样改造红黑树后的结构存储大数据量记录比改造前的红黑树，树的高度要小得多得多；  </p><p><strong>减小</strong>了<strong>红黑树</strong>的<strong>纵向</strong>，<strong>红黑树的高度</strong>，而<strong>增长</strong>了<strong>红黑树</strong>的<strong>横向</strong>；<br><strong>横向越长</strong>，<strong>存储同样大的数据量</strong>，<strong>树的高度就越矮</strong>；<br><strong>树的高度越矮</strong>，查找一行数据，也就是某一结点上的数据，那么其<strong>效率也就越高</strong>；  </p><p>已经慢慢接触到MySQL底层的数据结构：<br>这种改造其实就是<strong>B树</strong>  </p><ul><li>磁盘存取原理<ul><li>寻道时间（速度慢、费时）</li><li>旋转时间（速度较快）<br><img src="/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91MySql%E7%B4%A2%E5%BC%95/%E7%A3%81%E7%9B%98%E5%AD%98%E5%8F%96%E5%8E%9F%E7%90%86.png" alt="磁盘存取原理"></li></ul></li></ul><p>横向查找不就慢了吗？</p><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p><strong>B-Tree</strong></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANXx5xRm2O7Hw.CPoJY21PbGHy3.R9D2C3BHGRAwPaR*QEhgcUF1UMc2yymaSzxbgBOKNjFYrOEqnDAvX4*fMGPmY!/r" alt="索引"></p><ul><li><strong>度（Degree）</strong>-<strong>结点的 数据存储个数</strong></li><li><strong>叶子结点 具有 相同的深度</strong></li><li><strong>叶子结点的 指针 为 空</strong></li><li><strong>结点中的 数据key 从左到右 递增排列</strong></li></ul><p>刚刚说到红黑树不行，可以在<strong>红黑树的横向上</strong>做文章；<br><strong>存储同样大的数据量</strong>，<strong>树的高度</strong>将会大大的<strong>减小</strong>；<br>那就变成了引入<strong>B树</strong>；  </p><ul><li>索引-<strong>BTree</strong>插入递增数据<br><img src="/2020/05/27/%E3%80%90MYSQL%E3%80%91/%E3%80%90MYSQL%E3%80%91MySql%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95-BTree%E6%8F%92%E5%85%A5%E9%80%92%E5%A2%9E%E6%95%B0%E6%8D%AE.gif" alt="索引-BTree插入递增数据"></li></ul><p><strong>结点内 数据 有限</strong>，<strong>不能 无限放大</strong>；<br><strong>B树</strong>比<strong>红黑树</strong>来说有<strong>更大的优点</strong>；  </p><p><strong>问题</strong>：在<strong>横向上</strong>做文章，那<strong>横向查找不就慢了</strong>吗？  </p><p><strong>注意</strong>：一个<strong>结点的大小</strong> 是 <strong>有限制的</strong>；<br><strong>结点当中的 数据量 是 有限制的</strong>；<br><strong>不可能 无限延长、大</strong>；<br>比如说给这个结点设置几k大小，或者1Mb这么大；<br>如果这个结点太大；<br>一个结点对应磁盘上的一个磁盘文件地址，对应一个大的磁盘文件地址；<br>MySQL设计的是，<strong>尽量</strong>的<strong>一次 磁盘IO 查找</strong>，在进行查找的时候是希望一次性把这个<strong>结点</strong>放到<strong>内存</strong>；<br>MySQL<strong>查找一次</strong>，跟<strong>磁盘做一次磁盘IO交互</strong>的时候，它会把这一个<strong>横向结点</strong> 全部<strong>放到内存</strong>当中；<br>只要这一个<strong>结点的数据 都 放到 内存</strong>之后；<br>那之后再到这个横向结点当中再进行查找数据；<br>比方说要查找77，那么刚刚说经过了一次磁盘IO之后，会将这一个<strong>横向结点 当中的 所有索引元素 都 放到 内存 当中去</strong>，那么再去查找77，实际上就是从内存当中去进行查找这个77了；<br><strong>内存</strong>当中查找<strong>性能</strong>就非常<strong>快</strong>了；<br><strong>内存</strong>当中<strong>查找</strong>跟一次<strong>磁盘IO</strong>进行<strong>查找</strong>完全是<strong>不同级别</strong>的；<br>所以<strong>不用担心 横向查找 是否 会慢</strong>；  </p><p><strong>问题</strong>：那<strong>是否 能 将表中的 所有行数据 都 放在一个 横向结点 当中</strong>，将这个<strong>横向结点</strong>设置为<strong>无限大</strong>；几百MB或者是几个G的大小用以这个横向结点做存储索引元素？<br>那么<strong>一次查找</strong>即<strong>一次磁盘IO</strong>将这些<strong>数据一次性</strong>放到<strong>内存</strong>当中；<br>之后就是<strong>从 内存 当中 查询 索引数据</strong>；那就很快了？  </p><p>这个<strong>横向结点 不能 设置太大</strong>；<br>如果<strong>设置太大</strong>那么<strong>弊端将存在更多</strong>；<br>首先；<br>比如说几百万行上千万行的数据的索引怎么说也要几百MB，甚至1、2G来存储；<br>也跟<strong>索引的字段类型</strong>有关，比如说<strong>String类型</strong>或者<strong>UUID类型</strong>等就肯定要几百MB；<br>那么<strong>一次查找 就 全部放到 内存</strong>的话；<br><strong>一次磁盘IO</strong> 就 <strong>需要 花费 很长时间</strong>，而且<strong>一次磁盘IO 还不一定 能够 全部 放到 内存 当中去</strong>；<br><strong>一次磁盘IO 也是有 存在 大小限制 的</strong>；<br>就算<strong>一次磁盘IO 能够将 该横向结点 当中的 所有的索引元素 放到 内存 当中去</strong>，那也<strong>需要时间来放</strong>这几百MB的索引元素；<br>而且可以思考一下，事先就将这几百MB设置几个G的<strong>索引元素直接放到内存</strong>当中去，而<strong>真正去查找数据</strong>的时候<strong>可能 也就是 查找 最常用的 10% 都不到的 行数据</strong>；<br>如果老是将整张表的<strong>数据 全部都 一次性 放到 内存</strong>当中去；<br>那就将对这个<strong>内存 的 消耗 太过于 浪费</strong>；<br><strong>内存 的 资源</strong>是很<strong>宝贵</strong>的；<br>所以说这对该<strong>弊端</strong>；<br>MySQL对于这一个<strong>横向结点</strong>是<strong>不会将其设置过大</strong>；<br>尽量设置<strong>一个合适的大小</strong>；<br>让这个结点，通过<strong>一次磁盘IO</strong>能够<strong>快速 全部 存入 到 内存</strong>当中；  </p><p><strong>B-Tree</strong>应该叫做<strong>多叉平衡树</strong>；<br><strong>B-Tree</strong>有一个特点：在中间来看一样也<strong>满足二叉树的原则</strong>；  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX5q0FjtHgrmg9JO6KfRhTseVNI0ZlC7sOBVRXN8io620BWK0osf4XOQsJRaBrrA60171VhwueoMM9fAlldBY.Fs!/r" alt="索引"></p><p>56<strong>左边的所有元素</strong> 都 <strong>小于</strong>56相对来说 <strong>右边的元素</strong>；<br>而56<strong>右边的索引元素</strong>都是 <strong>大于</strong>56 <strong>左边的父元素</strong>；<br>20和49都小于56；<br>而20和49都大于15；  </p><p>然后<strong>B树</strong>还有一个特点就是在这一个结点当中，这一个<strong>横向结点</strong>当中<strong>从左到右</strong>它也<strong>是递增排序</strong>的；<br>15小于56；<br>56小于77；<br>这是<strong>B树</strong>的一个特性；<br>同时也是<strong>该数据结构的一个特性</strong>；  </p><p>也就是说要用<strong>B树</strong>来维护这个数据结构时，它会按照这个特性进行初始化好；<br>需要进行<strong>查询</strong>某一<strong>索引元素</strong>时也同样<strong>按照其特性</strong>去查找；<br>比方说要进行查找49这一索引元素；</p><p>那么MySQL的查找方式即为：先将<strong>第一个结点 横向结点 根结点</strong>通过<strong>磁盘IO</strong>之后<strong>放到 内存</strong>当中；<br>然后到<strong>内存</strong>当中进行去<strong>比对</strong>；<br>先<strong>比对</strong>15与49之间的<strong>大小</strong>；<br>49大于15，接着进行比对49与56；<br>则49小于56；<br>然后再去查找比对15和56中间的索引元素；<br>15和56中间存放的是指针，<strong>指针 存放的是 下一个索引元素</strong>，也就是<strong>下一个结点 所对应的 磁盘指针</strong>整个查询出来；<br>即<strong>该指针 所对应的 结点数据 全部放入到 内存</strong> 当中；<br>然后放到<strong>内存</strong>当中去进行<strong>比对大小</strong>；<br>然后接下来49与20进行比对，49大于20；<br>那么接着49与49进行比对；<br>就刚好相等；<br>刚好找到该索引元素了；<br>找到该索引元素之后，则<strong>每一个索引</strong>当中存放的为<strong>key-value</strong>；<br><strong>value</strong>当中即<strong>存储着 该索引 这一行数据 所在的磁盘文件 当中的 指针</strong>；<br>那么拿到这个data之后；<br><strong>磁盘文件指针</strong>就能够快速的找到<strong>磁盘文件数据</strong>；<br>即<strong>聚众索引</strong>；  </p><p><strong>MySQL真正的底层索引</strong>并<strong>不是用B树</strong>来进行实现；<br>而是使用的一种<strong>变种的B树</strong>，称之为<strong>B+树</strong>；  </p><h4 id="B-Tree-B-Tree变种"><a href="#B-Tree-B-Tree变种" class="headerlink" title="B+Tree(B-Tree变种)"></a>B+Tree(B-Tree变种)</h4><p><strong>B+Tree(B-Tree变种)</strong></p><ul><li><strong>非叶子结点 不存储 data，只存储 key，可以 增大 度</strong>；</li><li><strong>叶子结点 不存储 指针</strong>；</li><li><strong>顺序访问 指针，提高 区间 访问性能</strong>；</li></ul><p>什么叫做<strong>B+树</strong>，<strong>B+树</strong>是<strong>B树</strong>的一个<strong>变种</strong>；  </p><p><strong>B+树</strong> 与 <strong>B树</strong> 的 <strong>区别</strong>：<br><strong>B+树</strong>：所有的<strong>data</strong>都<strong>放到</strong>了<strong>叶子结点</strong>上；<br>而<strong>非叶子结点 没有</strong>了<strong>data</strong>；<br><strong>B+树</strong>的<strong>叶子结点</strong>上都有一个<strong>右指针</strong>；  </p><p><strong>问题</strong>：为什么<strong>B树</strong>当中<strong>非叶子结点</strong>上的<strong>data元素</strong>都<strong>移到</strong>了<strong>叶子结点</strong>上去了；<br><strong>B树</strong>当中每一个<strong>叶子结点</strong>并<strong>不重复</strong>；<br>而<strong>B+树</strong>当中一些<strong>关键的索引</strong>做了<strong>冗余</strong>；<br>不光是在<strong>叶子结点</strong>上，<strong>非叶子结点</strong>上也做了<strong>冗余</strong>；  </p><p><strong>非叶子结点</strong>上为什么<strong>没有data元素</strong>了？<br>这么一存的话（叶子结点上存data元素，非叶子结点不存data元素）；<br>那么就意味着整个<strong>B+树</strong>的<strong>叶子结点</strong>当中；<br>就有了数据表的<strong>完整的 所有行的 索引</strong>；<br>因为把<strong>每一行的 data 都往 叶子结点 上移动</strong>；<br>那么<strong>每一行数据</strong>都存在有一个<strong>data 的 磁盘文件指针</strong>；<br>那也就意味着；<strong>所有的行数据</strong>应该在<strong>叶子结点</strong>都有一份<strong>完整</strong>；<br>只不过某一些关键的索引的元素；<br>在<strong>非叶子结点上做</strong>了一个<strong>冗余</strong>；<br>15、20、49做了冗余；<br><strong>方便遍历数据</strong>；<br><strong>一次磁盘IO 取 更多的 k</strong>；  </p><p>其中<strong>常见的数据结构</strong>在<strong>不同场景下</strong>的<strong>区别</strong>  </p><p>MySQL实际上希望的是这一个<strong>结点的大小</strong>是有一个<strong>适当的大小</strong>，<strong>不能设置太大</strong>；<br>也就是说这一个<strong>结点的大小</strong>是<strong>存在有限制</strong>的；<br>每一个<strong>结点</strong>当中能够<strong>存储更小的元素</strong>，是不是也就意味着；<br>一个<strong>大结点</strong>当中里面能够<strong>存储 更多的 索引的 key</strong>；<br>也就是说能够存储更多的索引字段；<br>也就意味着这一个结点在大小相同的情况下；<br>比方说，<strong>默认 MySQL 把这个 结点的大小 设置为 16k</strong>；<br>在这一个<strong>大结点</strong>，一个<strong>大小固定的情况</strong>下面；<br>这一个<strong>大结点</strong>当中的每一个<strong>小结点</strong>如果把<strong>data元素</strong>移动到<strong>叶子结点</strong>上去；<br>是不是也就意味着整个这一个<strong>大结点</strong>可以<strong>横向</strong>可以<strong>存储 更多的 索引元素</strong>；  </p><p>那么如果<strong>横向</strong>可以<strong>存储 更多的 索引元素</strong>，那也就意味着这个<strong>横向结点 向下的分叉 也就 越多</strong>；<strong>分叉 分得更多</strong>，也就说明，<strong>存储 同样大的 数据量，树的高度 也就 更小</strong>了；那么 <strong>叶子结点 也就 更大</strong>了；  </p><p>为什么要将<strong>data移动到叶子结点</strong>上去的原因就在于：<strong>非叶子结点</strong>当中也就可以<strong>横向存放更多的索引元素</strong>；从而<strong>树的高度</strong>也就效率，<strong>查找的效率也就提高</strong>了上来；  </p><p><strong>MySQL</strong> <strong>默认</strong>把<strong>结点的大小</strong> <strong>设置</strong>为 <strong>16k</strong>；  </p><p><strong>SHOW GLOBAL STATUS like ‘Innodb_page_size’;</strong>  </p><table><tr><th>Variable_name</th><th>Value</th></tr><tr><td>Innodb_page_size</td><td>16384</td></tr></table><p>该sql语句查出来的值实际是上就是<strong>MySQL底层 存储 索引字段</strong>，<strong>B+树</strong>的这个<strong>大结点的大小</strong>；<br>当然也可以去进行修改该值；<br>但是一般并不推荐去修改该值；<br><strong>16384个字节</strong>；<br>实际上也就相当于是<strong>16k数据</strong>；<br>也就是<strong>16k的大小</strong>；<br>这个大小在<strong>磁盘上</strong>也就是<strong>分配的 16k 的一个 磁盘大小</strong>；  </p><p><strong>思考</strong>：刚刚将<strong>data元素 放到 叶子结点</strong>上面去了；<br>现在画的树的高度为3；<br>思考现在<strong>高度为3</strong>的该树<strong>一共可以存储多少索引字段</strong>？  </p><p>假设该索引字段的字段类型为<strong>bigint</strong>；<br><strong>表的主键/索引的类型</strong>一般为<strong>bigint</strong>；<br><strong>bigint</strong>在<strong>MySQL</strong>的<strong>底层的存储大小</strong>大概为<strong>8个字节byte</strong>；  </p><p><strong>大结点</strong>当中除了<strong>索引字段</strong> <strong>占据 n*8 个字节</strong>外，还存在有<strong>指针</strong>；<br><strong>指针</strong>在<strong>MySQL底层源码</strong>使用的是<strong>6个字节byte</strong>来进行<strong>存储</strong>这个<strong>指针</strong>；<br>这个<strong>指针</strong>说白了就是 <strong>下个结点 在 磁盘文件 上的 一个地址</strong>；  </p><p>也就是说这个<strong>大结点</strong>当中存储了这样一个<strong>小的索引</strong>，以及<strong>索引旁边的指针</strong>；<br>差不多也就是 <strong>8Byte+6Byte=14Byte（一个索引+一个指针）</strong>；<br>这一个<strong>大结点16k</strong>大概能够<strong>存储多少个索引</strong>；<br><strong>公式 = 16384Byte / ( 8Byte + 6Byte = 14Byte ) = 1,170.285714285714</strong><br>一个<strong>大的结点</strong>可存储的索引数约为<strong>1170个</strong>；也就是大概<strong>1k</strong>的样子；  </p><p>那么第二个结点，也可以进行<strong>存储 1170 个索引数</strong>；  </p><p>再说到<strong>叶子结点</strong>；<br>所有的<strong>data元素 都放到 叶子结点</strong>；<br>那么<strong>叶子结点 就会 变大</strong>；<br><strong>每一个小结点</strong>就<strong>都会变大</strong>了相比之前没有放data元素之前变大了；  </p><p>假设一下；<br>假设这个<strong>叶子结点</strong>当中的<strong>一个小叶子结点</strong>，也就是对应的这一行索引以及该索引所在的行的那个<strong>磁盘文件文件指针</strong>或者说<strong>这一行的其他数据</strong>就<strong>存储</strong>到这个<strong>小结点</strong>当中；<br>假设这个<strong>小结点</strong>就大一点，就<strong>存储1k的数据</strong>；<br>那么这一个存储该小结点的大结点同样是<strong>存储16k的数据</strong>；<br>那么也就是该<strong>结点</strong>所能够<strong>存储的索引元素 为 16个</strong>；<br>整个<strong>叶子结点</strong>当中可以容纳多少的<strong>索引元素</strong>（存储的所有的索引的数值）？<br><strong>公式：（ 根结点上 的 1170 这一层 ）1170 * 1170 * 16 = 21,902,400‬</strong><br>算出来的该值实际上就是该<strong>叶子结点</strong>上所有<strong>可以存储的 索引元素的 总和</strong>；  </p><p><strong>非叶子结点 的 所有的 索引元素 * 每一个叶子结点 可以存储的 多少个 索引行数据</strong>  </p><p>这个结果算出来差不多等于两千多万；<br>两千多万所算出来的东西；<br>也就意味着该<strong>叶子结点 能够放的 总索引元素 个数（小索引元素+data元素）</strong>大概是两千多万；（也就相当于是两千多万条/行数据）；  </p><p>使用<strong>B+树</strong>这么一改造之后；<br>发现<strong>同样树的高度</strong>；<br>高度为3；<br>该<strong>树</strong>就能够存储两千多万条个索引，也就说明可以支撑两千万行的表；<br>将这两千多万行数据的表当中的一字段作为索引存储到该数据结构当中，那么同样高度为3，height为3，查找一个元素比方说查找50；<br>那么从<strong>根结点 去进行 匹配 对比</strong>；<br>经过<strong>顺序查找</strong>；<br>50与父节点/根结点当中的15-56对比，查找中间的数值即该根结点的左节点；<br>也就是再跟15-28-49进行比较，得到50再去与该结点的下一结点比较即49-50；<br>最多经过三次<strong>磁盘IO</strong>；<br>就能够找到索要查找得到的元素50；<br><strong>性能十分高</strong>；  </p><p>这也就是为什么上千万行数据；只要<strong>索引字段</strong>建的比较的<strong>合理、合适</strong>；<br>那么其<strong>磁盘查找次数</strong>是非常<strong>少</strong>的；  </p><p>用<strong>B+树</strong>来说；常见的数据表，<strong>树的高度</strong>一般就控制在<strong>2~4</strong>之间；<br>不管如何查询；即使是<strong>查询到 叶子结点 的 速度</strong>也是十分<strong>快</strong>的；<br>只需要经过几次<strong>磁盘IO</strong>查找；  </p><h4 id="HASH表"><a href="#HASH表" class="headerlink" title="HASH表"></a>HASH表</h4><p><strong>MySQL</strong>的<strong>索引字段</strong>当中存在有<strong>索引方法</strong>；<br>点击下拉框进行选择索引方法（存在有两种实现：一种是<strong>BTREE</strong>；一种是<strong>HASH</strong>）<br><strong>HASH</strong> 也是官方的一种实现；但是使用的不多；<br>90%以上的场景都是使用的<strong>B树</strong>；<br>为什么<strong>不用 HASH表 的原因</strong>：<br><strong>HASH表 存储 索引 的原理</strong>：<br>比方说将col1作为索引字段；select * from t where t.col1=4;<br>通过一个<strong>hash算法</strong>，hash（4）；<br>对该4取了一个<strong>HASH</strong>；<br>得到的该结果，那么该结果就跟所查询的where t.col1(4)这一行<strong>数据所在磁盘文件</strong>是有一个<strong>映射关系</strong>的；<br>这就是<strong>HASH表</strong>的一个<strong>存储结构</strong>；<br><strong>HASH</strong>实际上就是一种<strong>算法</strong>；<br>比说MD5；MD5就是一种HASH算法；<br><strong>HASH</strong>就是将<strong>索引列</strong> 通过一种<strong>HASH算法</strong> 将 <strong>索引列的值 存放到 HASH 这一 数据结构 当中去</strong>；<br>那么select * from t where t.col1=6;进行查找该t.col1=6的数据行；<br>的HASH查找即为：对该col1=6；<br>该6的该<strong>取值</strong>做一次<strong>HASH算法 运算 得到 它的结果 hash(6)</strong>；<br>根据这个结果；只需要做<strong>一次映射</strong>就能够<strong>快速的定位</strong>到<strong>这一行 数据 所在的 文件磁盘指针</strong>；<br>那么即便是千万级别的数据也只需要通过<strong>hash() 一次HASH结果</strong> 进行 <strong>计算 定位 得到 索引 所在行 数据的 文件磁盘指针</strong> 也是能够快速的查找得到的；<br>感觉<strong>HASH</strong>表性能更高，比<strong>B+树</strong>效率更高；<br><strong>B+树</strong>还要经过两三次的树的一个<strong>遍历</strong>；<br>而<strong>HASH</strong>表的查找感觉更快；<br>只需要有这个索引字段，走索引，经过MYSQL底层定义好索引方法为<strong>HASH算法</strong>，<strong>只需要 一次HASH 计算结果 就能够拿到 该查找行 数据的 所在 文件磁盘指针</strong>；感觉性能很快；<br>甚至在数据量更大的表当中进行查找表尾的数据，也只需要经过一次<strong>HASH计算</strong>就能找到<strong>该行 数据 所在的 磁盘文件指针</strong>；  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANXzV2Z6K9IOXoYW6kFdX*NnL.fv6XCleV5BjrQCN4Bw3HvJfkZCF6LFsSX26xC5WuUZwgbGD9vBaj2.Lec10r*m8!/r" alt="索引"></p><blockquote><p>那么<strong>为什么 MySQL 一般用 B树 而不用 HASH表</strong> 呢？  </p></blockquote><p><strong>（1）</strong> <strong>范围查找太慢</strong>；<br>      比如说select * from t where t.col1&gt;6;<br>      那么当这种情况下；<br>      如果col1<strong>大于</strong>的数值，极端来想的话，也就相当于是<strong>全表扫描</strong>了；  </p><p><strong>（2）</strong> <strong>HASH</strong>只用于<strong>范围查找很少的情况</strong>下才进行使用；<br>      那么这个时候索引使用HASH是没有问题的；<br>      而正常情况下一般都会要使用得到<strong>范围查找</strong> ,<br>      所以这个时候使用<strong>B Tree更佳</strong>；  </p><p><strong>（3）</strong> 回到问题：为什么<strong>InnoDB 的 主键索引 的 叶子结点 上 存在有 指针（右指针）</strong>？<br>      在<strong>维护B+树</strong>的时候，比方说<strong>叶子结点</strong>的<strong>最后一个结点</strong> <strong>满了</strong>，那么就需要<strong>开辟 一个 新的 结点（下一个结点）</strong> 来进行<strong>存储 新的 索引元素</strong>；<br>      那么就将<strong>前面那个结点</strong><br>      （也就是之前叶子结点的最后一个结点满了的那个结点）<br>      中间<strong>开辟 一个 小小的 元素空间</strong>；<br>      把<strong>下一个 新开辟的 这一个结点的 磁盘文件地址的 指针 存放到 该新开辟的结点的 上一个结点的 那个 小元素空间 当中去</strong>；<br>      也就说白了；<br>      该<strong>新开辟的结点 的 上一结点 有一个 指针</strong>，<strong>指向 了 下一结点</strong>，也就是<strong>该新开辟的 结点 的 磁盘文件指针</strong>；<br>      通过有了这个<strong>指针</strong>；<br>      再联想<strong>HASH</strong>表的<strong>范围查找</strong>进行思考，那么是不是说明该指针就能够帮忙解决很大的问题；<br>      比方说：查找索引字段取值col1<strong>大于</strong>20取值的记录；<br>      从<strong>B+ 树的索引</strong>找到该20的这一个元素；<br>      因为<strong>整个 叶子结点的 索引元素</strong>都是<strong>从左到右 依次 递增形式</strong> 的；<br>      通过这个（右）指针顺藤摸瓜的形式<br>      （其实这里形成了一个<strong>双向指针</strong>，查询即小于20的元素也是一样的；<strong>双向链表</strong>），<br>      通过<strong>指针</strong>就能够找到大于20，也就是20这个索引元素后面的<strong>所有索引元素结点</strong>；<br>      最后放到一个<strong>大的集合</strong>当中去；也就是这条sql语句所要返回的<strong>结果集合</strong>；  </p><blockquote><p><strong>B+树</strong>的<strong>两个特性</strong>：  </p></blockquote><p><strong>（1）</strong> 为了让<strong>非叶子结点</strong>能够<strong>存储更多的索引</strong>；<br>          从而<strong>叶子结点上</strong>除了<strong>索引元素</strong>还存在有<strong>data元素</strong>；  </p><p><strong>（2）</strong> 在<strong>叶子结点 索引元素</strong>之间还存在有一个<strong>指针</strong> <strong>指向 下一 索引元素 结点 的 地址</strong>；<br>存在有一个<strong>双向 的 指针</strong>；<br>也就是为了<strong>解决</strong>如何<strong>高效的 进行 范围查找</strong>的这样一个问题；<br>所以<strong>高效的 范围查找</strong>也是<strong>可以</strong>进行<strong>走索引</strong>的；<br>在某种情况下，<strong>范围查找</strong>也是<strong>可以走索引</strong>的；<br>（因为<strong>存在指针</strong>，<strong>存在 顺序递增 顺序递减</strong> 的这样一个结构，那么则肯定是<strong>可以走 相关的索引</strong> 的）  </p><h5 id="B-Tree索引的性能分析"><a href="#B-Tree索引的性能分析" class="headerlink" title="B+Tree索引的性能分析"></a>B+Tree索引的性能分析</h5><ul><li>一般使用 <strong>磁盘I/O次数</strong> 评价<strong>索引结构的优劣</strong></li><li><strong>预读</strong>：<strong>磁盘</strong>一般会<strong>顺序向后</strong> <strong>读取</strong> <strong>一定长度 的 数据（页的 整数倍） 放入 内存</strong></li><li><strong>局部性原理</strong>：当一个<strong>数据被用到</strong>时，其<strong>附近的数据</strong>也<strong>通常</strong>会马上<strong>被使用</strong>；</li><li><strong>B+Tree结点 的 大小</strong>设为等于<strong>一个页</strong>，每次<strong>新建结点</strong>直接<strong>申请 一个页 的 空间</strong>，这样就保证<strong>一个结点 物理上 也存储在 一个页 里</strong>，就实现了<strong>一个结点 的 载入 只需 一次 I/O</strong>。</li><li><strong>B+Tree</strong>的<strong>度d</strong>一般会超过100；因此<strong>h非常小</strong>（<strong>一般为1~3之间</strong>）  </li><li>一般<strong>操作系统</strong>的<strong>最小 存储单元 为 页</strong>，<strong>1页 大小为 4k</strong>；  </li><li>查看<strong>Mysql 文件页 大小（16k）</strong>: <strong>SHOW GLOBAL STATUS like ‘Innodb_page_size’;</strong>  </li></ul><h5 id="为什么MySQL页文件默认为16k"><a href="#为什么MySQL页文件默认为16k" class="headerlink" title="为什么MySQL页文件默认为16k"></a>为什么MySQL页文件默认为16k</h5><p>假设一行数据大小为1k；<br>那么一页就能够存16条数据；<br>也就是一个叶子结点能够存16条数据；<br>再看非叶子结点，假设主键ID为bigint类型，那么长度为8B，指针大小在InnoDB源码中为6B，一共就是14B，那么一页里就可以存储16k/14=1170个（主键+指针）<br>那么一棵高度为2的B+树能存储的数据为1170<em>16=18720条，一棵高度为3的B+树能存储的数据为1170</em>1170*16=21902400（千万级条）  </p><h3 id="索引底层数据结构与算法"><a href="#索引底层数据结构与算法" class="headerlink" title="索引底层数据结构与算法"></a>索引底层数据结构与算法</h3><h3 id="InnoDB与MyISAM索引区别"><a href="#InnoDB与MyISAM索引区别" class="headerlink" title="InnoDB与MyISAM索引区别"></a>InnoDB与MyISAM索引区别</h3><p><strong>InnoDB形容表</strong>还是形容数据库？<br><strong>InnoDB以及MyISAM存储引擎</strong>是用来<strong>形容数据表</strong>的；  </p><p>当在设计表时，在选项当中有引擎选项存在有：ARCHIVE、BLACKHOLE、CSV、InnoDB、MEMORY、MRG MYISAM、MyISAM、PERFORMANCE SCHEMA…等等；  </p><p><strong>存储引擎是形容表</strong>的，最<strong>常见的存储引擎</strong>即<strong>InnoDB</strong>以及<strong>MyISAM</strong>这两种<strong>存储引擎</strong>；<br><strong>用的比较多的 为 InnoDB 该 存储引擎</strong>；  </p><p><strong>不同表 不同存储引擎 底层的数据结构 区别</strong>：  </p><p>test数据库对应都是存储在本地磁盘上的；<br>以数据库名命名的磁盘文件夹下；  </p><p><strong>表 = 表结构 + 数据 + 索引</strong>  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX8IZB7poXY4Ed7**8BhOfVx.BLlNb39BqBwC.ebBPiVr7.bXbWAXqMbGapRUkOP8BwmJQWBxopXJj*htdZrocUE!/r" alt="索引"></p><p><strong>InnoDB</strong>:<br>test.innodb.lock <strong>.frm</strong> - <strong>表结构等相关信息存储文件</strong><br>test.innodb.lock <strong>.ibd</strong> - <strong>表数据 + 表索引结构</strong>  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX*r9r8zOgb4r0dv8mg9Q5qMyppmh2cPcvbiy6hMFV9ap4rR0IrTk.u5U5HvIcDcxnTh0*XJn4IhWeLwxBiXTkPg!/r" alt="索引"></p><p><strong>InnoDB</strong>的表有一个<strong>主键</strong>，该<strong>主键自带索引</strong>；<br><strong>主键索引</strong>在<strong>InnoDB存储引擎</strong>下如何存储；<br>InnoDB的这种文件存储方式，MySQL官方在开发的时候，<br><strong>InnoDB当中的主键索引</strong>以及<strong>表当中的所有数据</strong>全部存储同一个文件，<br>叫做<strong>后缀为ibd的文件</strong>当中；  </p><p><strong>InnoDB存储方式</strong>当中的<strong>叶子结点当中的的data元素 所表示的内容</strong><br>与<br><strong>MyISAM存储方式</strong>当中<strong>叶子结点当中的data元素</strong> 所 <strong>表示的内容不一致</strong>；</p><p><strong>索引结构有点区别</strong>；</p><p><strong>MyISAM 叶子结点的 data元素</strong>当中所存为<strong>索引 所在行的 行数据的 磁盘文件指针</strong>；<br>但是发现<strong>InnoDB的主键索引</strong>，它的<strong>叶子结点 当中的 data元素</strong>当中所 存储的 为 <strong>索引所在行 的 其他所有列的 数据</strong>；<br><strong>这一行的 所有列数据 全部存储到 该data元素 当中去</strong>；<br>也就是说在<strong>InnoDB</strong>当中，通过一条sql语句，带有where查询通过索引进行查询的sql语句；<br><strong>只需要查找一个文件</strong>，从这个<strong>ibd文件</strong>当中<strong>一次性 定位到 索引元素</strong>，快速的就能根据data元素，这个索引所在行的其他的所有字段，将该行的所有字段进行查询出来<strong>放入内存</strong>当中去；<br>就查找到了所需要查找的元素；相对来说<strong>性能</strong>应该要<strong>比 MyISAM存储引擎的 性能</strong>会<strong>高一点</strong>；  </p><p><strong>InnoDB与MyISAM的底层存储</strong>是稍微有些<strong>区别</strong>的；  </p><p><strong>MyISAM</strong>：<br>test.myisam <strong>.frm</strong> - 该文件存储对<strong>表的表结构一些定义</strong>的一些数据；<br>test.myisam <strong>.MYD</strong> - 实际上存储的为<strong>表的数据</strong>，<strong>D英文单词data的简写</strong>（该表当中所有的数据行）；<br>test.myisam <strong>.MYI</strong> - 该表<strong>所对应的索引字段存储的位置</strong>；  </p><p><strong>主键自带主键索引</strong>；<br><strong>索引</strong>，它是一个<strong>数据结构</strong>，<strong>数据结构</strong>实际上存储在<strong>MYI文件</strong>当中；<br><strong>I即为Index首字母的简写</strong>；  </p><p><strong>MyISAM底层</strong>也为<strong>B+树数据结构</strong>进行<strong>存储</strong>；<br><strong>MyISAM索引底层存储</strong>，如何进行存储：  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX8sBSc*PWI*GgGhWe3pcWW625GV21FTGHFPkQrnPSFTCe3vCEKM3QCpTupcvYLjHH7f2N4y0qI7TTFDwZaL9fXc!/r" alt="索引"></p><p>col1是作为表的<strong>主键索引</strong>；<br>因为支持<strong>二叉查找</strong>，所以像15、20、49这种处于在中间的这些个数据将被作为<strong>冗余字段</strong>；<br>就更可以<strong>区分查找数据</strong>；<br>像二叉折半查找等；<br>一般取中间的元素作为<strong>冗余的索引</strong>；<br><strong>快速的过滤</strong>一些<strong>数据</strong>；<br><strong>减少查找次数</strong>；<br>将col1该字段列当中的所有数据放入到数据结构当中去；然后看；<br>原来在叶子结点当中存储的data元素，data元素存储的即<strong>该索引 所在行的 行数据的 磁盘文件指针</strong>；（地址指针，16进制的值）  </p><p>select * from t where t.col1=49;<br>col1<strong>主键索引</strong>；<br><strong>MySQL底层</strong>实际上先会去到<strong>MYI文件</strong>当中；<br>因为<strong>索引（数据结构）</strong>存储在<strong>MYI索引文件</strong>当中；<br>先拿col1=49在MYI文件当中快速地定位到结点为49的结点；<br>根据<strong>B+树的特性</strong>；<br>先<strong>从根结点 去进行 定位</strong>；<br>根结点当中的数据通过<strong>一次磁盘IO</strong>，根结点当中的索引元素将会被<strong>放到内存</strong>当中，49将会在<strong>内存</strong>当中与15-56-77相进行<strong>比较</strong>；<br>得到49在15-56之间；<br>49就将走15与56中间的向下的指针，左节点也就是存放有15-20-49这三个索引元素的该结点中，那么此时左节点当中的索引元素将会进行第二次磁盘IO的操作，将<strong>左节点当中的索引元素放到内存当中</strong>去，与查询的数据49相进行<strong>比较</strong>；<br>得到49在区间20-49之间；<br>最后到了<strong>叶子结点</strong>，该叶子结点当中包括两个小结点49-50以及2个data元素（指针），那么<strong>第三次磁盘IO</strong>时，将49-50该叶子结点<strong>放到内存当中去</strong>，49就将与49-50相进行比较得到49，该49即为要查找的元素；<br>49该小结点当中所对应的data元素拿出来，该data元素对于<strong>MyISAM存储引擎</strong>来说<strong>data元素 存储的是 为 该索引 所在行的 行数据的 磁盘文件指针</strong>；<br>当拿到获取得到该<strong>指针</strong>之后就将到<strong>MYD文件</strong>当中进行查询获取得到相应数据值；  </p><p><strong>面试题</strong>：<strong>聚集索引 or 聚众索引</strong>  </p><blockquote><p><strong>什么叫做聚集索引</strong>?  </p></blockquote><p><strong>聚集索引</strong> <strong>定义</strong>：<strong>叶结点 包含了 完整的 数据记录</strong>；  </p><p><strong>InnoDB的主键索引</strong>，<strong>ibd</strong>这个主键索引的这个文件；<strong>主键索引 其就叫做 聚集索引</strong>；<br>因为<strong>InnoDB的主键索引</strong>，它是跟它的<strong>文件数据行</strong>整个是存储在<strong>一个文件当中ibd文件</strong>；<br><strong>索引 和 数据 是 聚集存储 在一起 的</strong>；  </p><p><strong>有 聚集索引 即 存在 非 聚集索引</strong>；  </p><p><strong>MyISAM的主键索引</strong> 就称作是 <strong>非聚集索引</strong>；<br>因为<strong>MyISAM的主键索引</strong>存储在<strong>MYI文件</strong>当中；而<strong>数据</strong>存储在<strong>MYD文件</strong>当中；<br>那如果需要查找数据，每次都需要<strong>两个文件的一同查找</strong>才能查找得到；<br><strong>数据文件和索引文件分开存储</strong>了；<br>所以称<strong>MyISAM的 主键索引 为 非聚集索引</strong>；<strong>InnoDB的主键索引 称为 聚集索引</strong>；  </p><p>常见数据结构理论；  </p><p>结合具体的MySQL表来看一下；<br>不同的表底层如何进行存储；<br>MySQL的表无非就是MyISAM存储引擎/InnoDB存储引擎；<br>不同的表可能有不同的存储引擎；  </p><p><strong>MyISAM索引</strong>实现（<strong>非聚集</strong>）<br><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX2tYjinQbFQFT5hJICKOua.p8u*tNGRGnBmzDnCDDuui9JbsxaFmbrmLTSu0V4thfYO9zIg6UNnWwUY*NxnoWlU!/r" alt="索引"></p><ul><li><strong>MyISAM索引文件 和 数据文件</strong>是<strong>分离</strong>的；</li></ul><p><strong>InnoDB索引</strong>实现（<strong>聚集</strong>）</p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX*GhKIY3zUQdhemNpwYPZHMTx6WJ6HggRWyAqiDQHIGmxm2m2V7hUQmLQaYwj8CF*g.zfe8sCKjjxpzzRlDfl3I!/r" alt="索引"></p><ul><li><strong>表数据</strong>本身就是按照<strong>B+Tree</strong>组织的一个<strong>索引结构文件</strong></li><li><strong>聚集索引</strong>-<strong>叶结点 包含了 完整的 数据记录</strong></li><li>为什么<strong>InnoDB表必须要有主键</strong>？并且<strong>推荐使用 整型的 自增主键</strong>?  <ul><li>为什么必须要建主键，MySQL官方对于<strong>InnoDB的表</strong>，其数据就需要用一个<strong>索引B+树</strong>来组织；所以肯定是<strong>需要主键</strong>的；<br>（之间建了InnoDB的表但是没有建索引也建成功了）针对这种情况，MySQL会<strong>自动</strong>在<strong>底层建一个索引</strong>；<br>如果表中<strong>没有建索引</strong>，<strong>MySQL</strong>会在<strong>底层</strong>找一个<strong>唯一能标识</strong>这一行数据的字段作为索引；<br>如果找不到，它会<strong>默认</strong>给表<strong>生成</strong>一个类似像row_id，一个<strong>隐藏列</strong>作为<strong>主键索引，主键</strong>；<br>根据该表<strong>主键索引</strong>来<strong>维护</strong>整张表的<strong>数据</strong>；</li><li><em>MySQl官方*</em>设计的就是要用一个<strong>B+树的存储结构</strong>来组织；</li><li><em>B+树*</em>其实就是该<strong>索引，索引结构</strong>；<br>所以必须要有一个<strong>主键索引</strong>；<br>即便表中<strong>没有建立</strong>，<strong>MySQL</strong>也会<strong>默认生成一个隐藏的列/主键索引</strong>；  </li><li><strong>主键</strong>尽量为<strong>整型自增</strong>；为什么<strong>主键尽量为整型自增</strong>？<br>假设主键<strong>不设置为整型</strong>，设置为<strong>UUID类型</strong>，</li><li><em>UUID不为整型，而是字符串类型*</em>；<br>为什么<strong>不推荐使用 UUID</strong>，而<strong>推荐使用 整型 并且 自增 的类型</strong>；<br>首先用UUID，它是<strong>字符串类型</strong>的，而且是很长一串，字母+数字+其他符号；<br>这样<strong>存在的弊端</strong>有：  </li><li><em>（1）*</em> 相对于<strong>整型</strong>来说，首先，这一长串字符串的<strong>存储空间</strong>比整型大得多（<strong>字符串长度 越长 占用 空间 越大</strong>；</li><li><em>索引 存放在 磁盘上面，那么也将会 占用 磁盘存储空间*</em>；<br>那么UUID<strong>存储磁盘空间</strong>是肯定会要比整型类型字段要<strong>大得多</strong>）；  </li><li><em>（2）*</em> 而且，<strong>底层B+树索引</strong>去进行<strong>查找</strong>的时候；是需要进行结点之间<strong>比较大小的</strong>；<br>一个一个根据<strong>B+树</strong>，二叉一个个进行比较大小找对应的元素；<br>而结点当中存储的都为UUID，<strong>一个个去比较大小</strong>的话；<br>字符串比较大小，字符串跟数字进行比较，<strong>一位一位</strong>进行比较<strong>性能将会非常的低</strong>；<br>字符串去进行比较先要<strong>转成ASCII码值（国标码）</strong> ，<strong>按照码表当中的顺序</strong>进行<strong>比较大小</strong>；<br>这个<strong>性能就非常低</strong>了；<br>相对于整型来比较：<strong>数值</strong>之间的<strong>比较性能</strong>肯定是<strong>高的多</strong>的；  </li><li><em>（3）*</em> 为什么<strong>要使用自增的</strong>？</li><li><em>UUID肯定不是自增类型的*</em>；<br>正常情况下如果是使用<strong>顺序自增</strong>：<strong>插入的元素</strong>基本上是<strong>往后面进行插入的</strong>；</li><li><em>后面的结点空间满了*</em>，然后继续<strong>往后面去开辟一个空间继续放</strong>；<br>如果现在新加一个元素；<strong>叶子结点 从左到右 都是 依次递增的</strong>；<br>在<strong>每一个结点</strong>当中<strong>每一个元素</strong>都是<strong>依次递增</strong>，<strong>左边小于右边</strong>；</li><li><em>B+树*</em>当中的所有<strong>叶子结点 从左到右 都是 依次递增</strong>的；<br>现在将一个不是自增的新元素UUID进行插入；<br>而<strong>插入的位置</strong>正好是<strong>叶子结点中间的一个位置</strong>，而并不是结尾的位置；<br>比如插入到20与30的叶子结点中间；<br>那么这个时候将20和30想象成UUID类型的字符串内容；<br>当新元素UUID进行插入的时候就将会形成<strong>分裂</strong>的这种情况；<br>有可能就是将20与新元素新<strong>分裂出一个叶子结点</strong>，30<strong>单独分裂出去一个叶子结点</strong>；  </li><li><em>插入的元素需要进行分裂一次*</em>；然后还需要<strong>平衡一次</strong>；<br>相对于这种插入新元素，插入一个元素按<strong>顺序递增</strong>往<strong>后面进行一个一个递增的加元素</strong>的这种情况<strong>效率就要高</strong>多了；<br>这也就是为什么 <strong>B+ 树</strong>推荐的<strong>主键索引为整型并且自增类型</strong>；<br>因为<strong>自增</strong>它会<strong>尽可能的避免</strong>：<strong>新增的 该结点 插入到 叶子结点</strong>上去了之后，会<strong>导致叶子结点 原有的 已经满了的 大的 叶子结点 做分裂 以及 自动平衡</strong>；  </li><li><em>（4）*</em> <strong>指针（B+树的 叶子结点上的 右指针）的作用</strong>：叶子结点当中某一大结点如已经存满了16k的索引元素；按照<strong>B+树</strong> <strong>从左到右 的 依次递增 的 顺序</strong>；<br>假设当前该字段<strong>不是自增</strong>的；<br>现在来了一个新的元素需要进行插入数据，看到索引的值比方说为25；<br>那么按顺序这个索引值就应该插入到叶子结点20-30的中间；<br>但是当前该叶子结点的存储空间大小16k已经满了，已经存不下了；<br>那么此时在这种情况下：  </li><li><em>1&gt;*</em> <strong>当前叶子结点 的 存储空间 已经满</strong>了  </li><li><em>2&gt;*</em> 当前需要<strong>新插入 一个新的 索引元素</strong>，而该<strong>索引元素的大小取值</strong>应该放在该<strong>当前叶子结点的中间</strong>；<br>那么这个时候就需要进行<strong>叶子结点的分裂</strong>；</li><li><em>分裂成两个结点*</em>；<br>20与25这两个索引元素<strong>成为一个新的叶子结点</strong>；<br>而30将被<strong>分裂到另外一个叶子结点</strong>上面去；<br>而如果插入的元素都是递增类型的元素的话则比如说插入新元素100；<br>那么就肯定<strong>不再需要 往中间 去 进行 插入</strong>；<br>都是<strong>直接在后面 新开辟一块空间 来进行 存储 该新元素</strong>100；  </li></ul></li></ul><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX8fDAvL3g7DJ9HhnBQeGRqDvrpkZXABEIRyvGCl2wXfLlwUZMMrCWHUUoUCg2YMQdB8MP3ElixOLflsVbBIu18U!/r" alt="索引"></p><ul><li>为什么<strong>非主键索引结构 叶子结点 存储的是 主键值</strong>？（<strong>一致性 和 节省存储空间</strong>）  </li></ul><h3 id="索引最左前缀原理"><a href="#索引最左前缀原理" class="headerlink" title="索引最左前缀原理"></a>索引最左前缀原理</h3><ul><li>联合索引的底层存储结构长什么样?  </li></ul><p>(字段1，字段2，字段3)<br>比方说字段1、字段2、字段3是联合索引；  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX50m84lF6rjqlgyWXpKCriCR9zfdJdu7YbMYTBq.e8Oj47TQyP3KTeZ1anErrKoy5mNBgGaDtLH9DbfHrrCBYYg!/r" alt="索引"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 红黑树 </tag>
            
            <tag> MySql索引 </tag>
            
            <tag> B+树 </tag>
            
            <tag> B树 </tag>
            
            <tag> HASH表 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git工作流学习笔记</title>
      <link href="/2020/05/27/%E3%80%90GIT%E3%80%91/%E3%80%90GIT%E3%80%91Git%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/05/27/%E3%80%90GIT%E3%80%91/%E3%80%90GIT%E3%80%91Git%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Git工作流指南-分布式版本控制系统"><a href="#Git工作流指南-分布式版本控制系统" class="headerlink" title="Git工作流指南 分布式版本控制系统"></a>Git工作流指南 分布式版本控制系统</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1dW411U7ER?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1dW411U7ER?p=1</a><br>老师笔记： <a href="http://www.funtl.com/zh/git/" target="_blank" rel="noopener">http://www.funtl.com/zh/git/</a>  </p><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><ul><li>什么是<strong>版本控制系统</strong></li><li>什么是<strong>Git</strong></li><li>如何<strong>安装Git</strong></li></ul><h3 id="什么是版本控制系统"><a href="#什么是版本控制系统" class="headerlink" title="什么是版本控制系统"></a>什么是版本控制系统</h3><h4 id="为什么需要版本控制"><a href="#为什么需要版本控制" class="headerlink" title="为什么需要版本控制"></a>为什么需要版本控制</h4><p>在软件开发过程中，每天都会产生新的代码，<strong>代码合并</strong>的过程中可能会出现如下<strong>问题</strong>：  </p><ul><li><strong>代码覆盖或丢失</strong>；</li><li>代码写的不理想，希望<strong>还原</strong>之前的<strong>版本</strong>；</li><li>希望知道与之前<strong>版本的差别</strong>；</li><li>是<strong>谁</strong>修改了代码以及<strong>为什么</strong>修改；</li><li><strong>发版</strong>时希望分成<strong>不同的版本</strong>（测试版本、发行版本等）；</li></ul><p>因此，希望有一种<strong>机制</strong>，能够帮助我们：  </p><ul><li>可以<strong>随时回滚</strong>到之前的<strong>版本</strong>；</li><li>协同开发时，<strong>不会覆盖</strong>别人的代码；</li><li>留下<strong>修改记录</strong>，以便随时查看；</li><li><strong>发版</strong>时可以方便的管理<strong>不同的版本</strong>；</li></ul><h4 id="什么是版本控制系统-1"><a href="#什么是版本控制系统-1" class="headerlink" title="什么是版本控制系统"></a>什么是版本控制系统</h4><p>一个标准的<strong>版本控制系统</strong> <strong>Version Control System（VCS）</strong>，通常需要有以下功能：  </p><ul><li>能够<strong>创建Repository</strong>（<strong>仓库</strong>），用来<strong>保存代码</strong>；</li><li>协同开发时，方便将<strong>代码分发</strong>给团队成员；</li><li><strong>记录</strong>每次<strong>修改</strong>代码的内容、时间、原因等<strong>信息</strong>；</li><li>能够<strong>创建Branch（分支）</strong>，可以根据<strong>不同的场景</strong>进行<strong>开发</strong>；</li><li>能够<strong>创建Tag（标签）</strong>，<strong>建立</strong>项目<strong>里程碑</strong>；</li></ul><h4 id="版本控制系统的发展史"><a href="#版本控制系统的发展史" class="headerlink" title="版本控制系统的发展史"></a>版本控制系统的发展史</h4><p><strong>版本控制系统</strong>发展至今有几种<strong>不同的模式</strong>：  </p><h5 id="Local-VCS"><a href="#Local-VCS" class="headerlink" title="Local VCS"></a>Local VCS</h5><p><strong>本地</strong>使用 <strong>复制/粘贴</strong> 的方式进行管理，<strong>缺点</strong>是<strong>无法协同开发</strong></p><h5 id="Gentralized-VCS（Lock，悲观锁）"><a href="#Gentralized-VCS（Lock，悲观锁）" class="headerlink" title="Gentralized VCS（Lock，悲观锁）"></a>Gentralized VCS（Lock，悲观锁）</h5><p><strong>中央集中式版本控制系统</strong>团队共用仓库，当某人需要编辑文件时，<strong>进行锁定，以免其他人同时编辑时造成冲突</strong>，但不是很方便，<strong>其他人需要排队才能编辑文件，如果有人编辑了很久或是忘记解锁会造成其他人长时间等待</strong>的情况；  </p><p>如何理解悲观锁：总有刁民想害朕。<br>我要是面试这么答，会怎么样？  </p><h5 id="Gentralized-VCS（Merge，乐观锁）"><a href="#Gentralized-VCS（Merge，乐观锁）" class="headerlink" title="Gentralized VCS（Merge，乐观锁）"></a>Gentralized VCS（Merge，乐观锁）</h5><p><strong>中央集中式版本控制系统</strong>团队共用仓库，<strong>不采用悲观锁方式来避免冲突</strong>，而是时候发现如果别人也修改相同文件（冲突），再<strong>进行手动修改解决</strong>。  </p><p>有很多VCS属于这种类型，如：CVS、<strong>Subversion</strong>、Perforce等；  </p><p><strong>中央集中式版本控制系统</strong>的共同问题是，做<strong>任何操作都需要和服务器同步</strong>，如果<strong>服务器宕机则会造成无法继续工作的窘迫</strong>；  </p><p>如何理解乐观锁：天网恢恢疏而不漏。<br>我想给自己两锤子；  </p><h5 id="Distributed-VCS"><a href="#Distributed-VCS" class="headerlink" title="Distributed VCS"></a>Distributed VCS</h5><p><strong>分布式版本控制系统</strong>，<strong>本地</strong>也<strong>拥有完整的代码仓库</strong>，就不会出现上述集中式管理的问题，即使<strong>没有网络，依然可以commit和看log</strong>，也<strong>无需担心服务器同步</strong>问题；  </p><p>如：<strong>Git</strong>、Mercurial、Bazaar等就属于<strong>分布式版本控制系统</strong>。<strong>缺点</strong>是<strong>功能比较复杂</strong>，上手需要一定的学习时间；  </p><p>（<strong>分布式版本控制系统</strong>都有一个<strong>本地化</strong>的这样一个概念；<strong>区块链系统</strong>也能称之为一个<strong>分布式系统</strong>）  </p><h2 id="Git工作流"><a href="#Git工作流" class="headerlink" title="Git工作流"></a>Git工作流</h2><p><strong>Git工作流</strong>：<strong>代码管理</strong>的<strong>工作流程、方式</strong>  </p><ul><li><strong>Git工作流</strong>简介</li><li><strong>集中式工作流</strong></li><li><strong>功能分支工作流</strong></li><li><strong>GitFlow工作流</strong></li><li><strong>Forking工作流</strong></li><li><strong>Pull Requests</strong></li></ul><h3 id="Git工作流简介"><a href="#Git工作流简介" class="headerlink" title="Git工作流简介"></a>Git工作流简介</h3><p>工作流有各式各样的用法，但也正因此使得在实际工作中如何上手使用增加了难度。  </p><p>这篇指南通过总览公司团队中最常用的集中Git工作流让大家可以上手使用；  </p><p>在阅读的过程中请记住，本文中的集中工作流是作为方案指导而不是条例规定，在展示了各种工作流可能的用法后，可以从不同的工作流中挑选或揉合出一个满足自己需求的工作流；  </p><h4 id="集中式工作流"><a href="#集中式工作流" class="headerlink" title="集中式工作流"></a>集中式工作流</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXyIW2ezMoDhUXO*s5pTGue2N753CPNKcE42sPIP6l3d0rpu2DZjcGmC.Kga3cDUruqQwuWnPoetw.KevCfGSm5U!/r" alt="集中式工作流"></p><p>如果开发团队成员已经很熟<strong>Subversion</strong>，<strong>集中式工作流</strong>让你无需去适应一个全新流程就可以体验Git带来的收益。  </p><p>这个工作流也可以作为向更Git风格工作流迁移的友好过渡。  </p><p>（个人、三五个人的小团队）  </p><h4 id="功能分支工作流"><a href="#功能分支工作流" class="headerlink" title="功能分支工作流"></a>功能分支工作流</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX.QLkS1nyIjv6HHWnbV4dX7srariw7MEQpLi1gOAxL3ou18PqhQZr1mrBrEaIbVs5JuQWzjNbAd8lfxuJK8OGPM!/r" alt="功能分支工作流"></p><p><strong>功能分支工作流</strong>以<strong>集中式工作流</strong>为<strong>基础</strong>，不同的是为<strong>各个新功能</strong>分配<strong>一个专门的分支</strong>来开发。  </p><p>这样可以在把新功能继承到正式项目前，用<strong>Pull  Requests</strong>的方式<strong>讨论变更</strong>；  </p><p>（达到约12个人的团队）  </p><h4 id="Git-Flow工作流"><a href="#Git-Flow工作流" class="headerlink" title="Git Flow工作流"></a>Git Flow工作流</h4><p><strong>Git Flow工作流</strong>通过为<strong>功能开发</strong>、<strong>发布准备</strong>和<strong>维护分配独立的分支</strong>，让<strong>发布迭代</strong>过程<strong>更顺畅</strong>。  </p><p>严格的分支模型也为大型项目提供了一些非常必要的结构。  </p><p>（整个公司，这么一个团队的规模）  </p><h4 id="Forking工作流"><a href="#Forking工作流" class="headerlink" title="Forking工作流"></a>Forking工作流</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7NQkdqkFQWuuELLHKCcql5ABKaPDZFUejww*HH9qtsi8qr7IlATkqBkQ9PV1LJ9rT6faqWzcfgS3pJZnzLSzVg!/r" alt="Forking工作流"></p><p>Forking工作流是分布式工作流，充分利用了Git在分支和克隆上的优势。  </p><p>可以安全可靠地管理大团队的开发者（developer），并能接受不信任贡献者（contributor）的提交。  </p><p>（跨国合作。跨国团队的使用，一般用于Forking工作流）  </p><h4 id="Pull-Requests"><a href="#Pull-Requests" class="headerlink" title="Pull Requests"></a>Pull Requests</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXzYbgZ.02.6Smac50apszMyWGwg89uQEVJSVU01e69u2Dts1al5lueZ4HgBrr.WyV.0GtO*ZTdT3LpQtilbX2Vk!/r" alt="Pull Requests"></p><p><strong>功能分支工作流</strong>、<strong>GitFlow工作流</strong>、<strong>Forking工作流</strong>都会穿插一个<strong>Pull Requests</strong>的一个东西。  </p><p><strong>Pull Requests</strong>通常称为<strong>请求合并</strong>（<strong>Merge Pull Requests</strong>）；  </p><p><strong>Pull Requests</strong>让开发者更<strong>方便地进行协作</strong>的功能，提供了友好的Web界面可以在提议的修改合并到正式项目之前对修改进行讨论。  </p><p>（相当于一个评论系统）；</p><h3 id="集中式工作流-1"><a href="#集中式工作流-1" class="headerlink" title="集中式工作流"></a>集中式工作流</h3><p>转到<strong>分布式版本控制系统</strong>看起来像个令人生畏的任务，但不改变已用的工作流你也可以用上Git带来的收益。  </p><p>团队可以用和Subversion完全不变的方式来开发项目。  </p><p>但使用Git加强开发的工作流，<strong>Git比SVN有几个优势</strong>。  </p><p><strong>（1）</strong> 首先，每个开发者可以有属于自己的整个<strong>工程的本地拷贝</strong>。隔离的环境让各个开发者的工作和项目的其他部分（修改）独立开来——-即自由地提交到自己的本地仓库，先完全忽略上游的开发，直到方便的时候再把修改反馈上去。  </p><p><strong>（2）</strong> 其次，<strong>Git</strong>提供了<strong>强壮的分支和合并模型</strong>。不像SVN，Git的分支设计成可以作为一种用来在仓库之间集成代码和分享修改的 <strong>【失败安全】</strong> 的<strong>机制</strong>。  </p><h4 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX58rubGqwbukXS4rvP.hcw8vVDFpcMEKyanOzFC60vYY7EfnKsFaNa8DYFcGkpbCkTOCu8b0QXObUxn8ABvZn4U!/r" alt="工作方式"></p><p>像<strong>Subversion</strong>一样，<strong>集中式工作流</strong>以<strong>中央仓库</strong>作为项目<strong>所有修改的单点实体</strong>。  </p><p>相比SVN缺省的开发分支trunk，Git叫做master，所有修改提交到这个分支上。  </p><p>该工作流只用到master这一个分支。  </p><p>开发者开始先克隆中央仓库。  </p><p>在自己的项目拷贝中，像SVN一样的编辑文件和提交修改；  </p><p>但修改是存在本地的，和中央仓库完全隔离的；  </p><p>开发者可以把和上游的同步延后到一个方便时间点；  </p><p>要发布修改到正式项目中，开发者要把本地master分支的修改【推（push）】到中央仓库中。  </p><p>这相当于svn  commit操作，但push操作会把所有还不在中央仓库的本地提交都推上去。  </p><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7NAq94egRJ5nBPO8Co87th*P0cTdtAGYXp43mklxBxvhd73.i5d8Lm58WdsFYNrarV7XZaiqfrmkd3gUFAFW0o!/r" alt="解决冲突"></p><p>中央仓库代表了正式项目，所以提交历史应该被尊重且是稳定不变的。  </p><p>如果开发者本地的提交历史和中央仓库有分歧，Git会拒绝push提交否则会覆盖已经在中央库的正式提交。  </p><p>在开发者提交自己功能修改到中央库前，需要先fetch在中央库的新增提交，rebase自己提交到中央库提交历史之上。  </p><p>这样做的意思是在说，【我要把自己的修改加到别人已经完成的修改上。】最终的结果是一个完美的线性历史，就像以前的SVN的工作流中一样；  </p><p>如果本地修改和上游提交有冲突，Git会暂停rebase过程，给你手动解决冲突的机会。  </p><p>Git解决合并冲突，用和生成提交一样的git  status和git add命令，很一致方便。  </p><p>还有一点，如果解决冲突时遇到麻烦，Git可以很简单中止整个rebase操作，重来一次（或者让别人来帮助解决）。  </p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>一起逐步分解来看看一个常见的小团队如何用这个工作流来协作的。  </p><p>有两个开发者小明和小红，看他们是如何开发自己的功能并提交到中央仓库上的。  </p><h5 id="有人先初始化好中央仓库"><a href="#有人先初始化好中央仓库" class="headerlink" title="有人先初始化好中央仓库"></a>有人先初始化好中央仓库</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX9UbT3uXKi44e*o.QOIDNJOk403REJAlPsZkIyST70GEweXbAbks3cFR7TqiVMFHAtTg9MXSvYT6HSyIH1eLii4!/r" alt="有人先初始化好中央仓库"></p><p>第一步，有人在服务器上创建好中央仓库。  </p><p>如果是新项目，可以初始化一个空仓库；否则要导入已有的Git或SVN仓库。  </p><p>中央仓库应该是个裸仓库（bare repository），即没有工作目录（working directory）的仓库。  </p><h5 id="所有人克隆中央仓库"><a href="#所有人克隆中央仓库" class="headerlink" title="所有人克隆中央仓库"></a>所有人克隆中央仓库</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX8lXRlkamDF*h*SxpL42PuUsH4aIULseTwL66K.p5pWkVzGz*Bh8Nih.I7qaVf43t7zoP8GGUp44vHNS*NRccIY!/r" alt="所有人克隆中央仓库"></p><p>下一步，各个开发者创建整个项目的本地拷贝。  </p><p>通过git clone命令完成。  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span>  <span class="title">https</span>://github.com/path/to/repo.git</span><br></pre></td></tr></table></figure><p>基于后续会持续和克隆的仓库做交互的假设，克隆仓库时Git会自动添加远程别名origin指回【父】仓库。  </p><p>github即git的中央仓库；版本控制系统有一个版本仓库。  </p><p>github上public即开源，公开的意思，代码开源。  </p><p>如果是私有private则需要进行CreditCard 信用卡支付相应的金额；收费；  </p><h5 id="小明开发功能"><a href="#小明开发功能" class="headerlink" title="小明开发功能"></a>小明开发功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX3cSXX6681Ge8WeUymk3FFjspNtDVB3t7XeHuVufMD05ZhJzX9OyWJDCYAlloD65QJLNRkDaLpYfFLKjESAA0SM!/r" alt="小明开发功能"></p><p>在小明的本地仓库中，他使用标准的Git过程开发功能：编辑、暂存（Stage）和提交。  </p><p>如果你不熟悉暂存区（Stageing Area），这里说明一下：暂存区的用来准备一个提交，但可以不用把工作目录中所有的修改内容都包含进来。  </p><p>这样可以创建一个高度聚焦的提交，尽管本地修改很多内容。  </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status <span class="comment"># 查看本地仓库的修改状态</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> <span class="comment"># 暂存文件</span></span></span><br><span class="line">git commit <span class="comment"># 提交文件</span></span><br></pre></td></tr></table></figure><p>请记住，因为这些命令生成的是本地提交，小明可以按自己需求反复操作多次，而不用担心中央仓库有了什么操作。  </p><p>对需要多个更简单更原子分块的大功能，这个做法是很有用的；  </p><h5 id="小红开发功能"><a href="#小红开发功能" class="headerlink" title="小红开发功能"></a>小红开发功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX3AhXN0w*Kh7FwIloQiq3PMOUwp*anqXsBqPo.yaxL1hWnR.kZm*XseG5RhBNtuoS8.PVSKuKSdHEw1x7MixOxA!/r" alt="小红开发功能"></p><p>与此同时，小红在自己的本地仓库中用相同的编辑、暂存和提交过程开发功能。  </p><p>和小明一样，她也不关心中央仓库有没有新提交；当然更不关心小明在他的本地仓库中的操作，因为所有本地仓库都是私有的。  </p><h5 id="小明发布功能"><a href="#小明发布功能" class="headerlink" title="小明发布功能"></a>小明发布功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX2DDMKOOXZiA6a0j82260kNXKGqba7MbMMt5OmvuzTfK3A*Lxszb8CTdFEjjZXvIDOZez3cKxhQHt2dZMB.G9S4!/r" alt="小明发布功能"></p><p>一旦小明完成了他的功能开发，会发布他的本地提交到中央仓库中，这样其他团队成员可以看到他的修改。  </p><p>他可以用下面的git push  命令：  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><p>注意，origin是小明克隆仓库时Git创建的远程中央仓库别名。  </p><p>master参数告诉Git推送的分支。  </p><p>由于中央仓库自从小明克隆以来还没有被更新过，所以push操作不会有冲突，成功完成。  </p><h5 id="小红试着发布功能"><a href="#小红试着发布功能" class="headerlink" title="小红试着发布功能"></a>小红试着发布功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX49Hssuuk2yHbmsbkSdUuOtLRbTxRlP3xEORKm5txDWaExKbZyYnyzyBD0oDqcjETeUWkabVFxZpo*3gs9yQWHs!/r" alt="小红试着发布功能"></p><p>一起来看看在小明发布修改后，小红push修改会怎么样？  </p><p>她使用完全一样的push命令：  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><p>但她的本地历史已经和中央仓库有分歧了，Git拒绝操作并给出下面很长的出错消息：  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">error: failed <span class="keyword">to</span> push some refs <span class="keyword">to</span> <span class="string">'/path/to/repo.git'</span></span><br><span class="line">hin<span class="variable">t:</span> Updates were rejected because the tip of your current branch <span class="keyword">is</span> behind</span><br><span class="line">hin<span class="variable">t:</span> its remote counterpart. Merge the remote <span class="keyword">changes</span>(<span class="keyword">e</span>.g. <span class="string">'git pull'</span>)</span><br><span class="line">hin<span class="variable">t:</span> before pushing again.</span><br><span class="line">hin<span class="variable">t:</span> See the <span class="string">'Note about fast-forwards'</span> in <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>这避免了小红覆写正式的提交。  </p><p>她要先pull小明的更新到她本地仓库合并上她的本地修改后，再重试。  </p><h5 id="小红在小明的提交之上rebase"><a href="#小红在小明的提交之上rebase" class="headerlink" title="小红在小明的提交之上rebase"></a>小红在小明的提交之上rebase</h5><p>小红用git pull 合并上游的修改到自己的仓库中。  </p><p>这条命令类似svn update ——-拉取所有上游提交命令到小红的本地仓库，并尝试和她本地修改合并。  </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="comment">--rebase origin master</span></span><br></pre></td></tr></table></figure><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXyi6Y8l5sb1aRwQRlb0CiRDNdgM9NZtfk5D41PvfJEccriZP3FT6WnQ4PWKvEqz*e7LpBOfcXui.l9nUXAPUgd4!/r" alt="images"></p><p>–rebase 选项告诉Git把小红的提交移到同步了中央仓库修改后的master分支的顶部；  </p><p>如果忘了加这个选项，pull操作仍然可以完成，但每次pull操作要同步中央仓库别人修改时，提交历史会以一个多余的【合并提交】结尾。  </p><p>对于集中式工作流，最好是使用rebase而不是生成一个合并提交。  </p><h5 id="小红解决合并冲突"><a href="#小红解决合并冲突" class="headerlink" title="小红解决合并冲突"></a>小红解决合并冲突</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7FxPBYYYsKKPOWXqC*0rCPhZKJRqU86pJwCJIVi3g31ZcpHEH2b76upvPK6lrEAQ9UWa9VqeFjlEC4dX2PAHTw!/r" alt="小红解决合并冲突"></p><p>rebase操作过程是把本地提交一次一个地迁移到更新了的中央仓库master分支之上，这意味着可能要解决在迁移某个提交时出现的合并冲突，而不是解决包含了所有提交的大型合并时所出现的冲突。  </p><p>这样的方式让你尽可能保持每个提交的聚焦和项目历史的整洁。  </p><p>反过来，简化了哪里引入Bug的分析，如果有必要，回滚修改也可以做到对项目影响最小。  </p><p>如果小红和小明的功能是相关的，不大可能在rebase过程中有冲突。  </p><p>如果有，Git在合并有冲突的提交出暂停rebase过程，输出下面的信息并带上相关的指令：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CONFLICT</span> (content): Merge <span class="keyword">conflict</span> <span class="keyword">in</span></span><br></pre></td></tr></table></figure><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX5fiCqpawh2bvFoyuusAOSGHKu5sc59EGgvKP1aVmHVmey3BEhEwMSvuvtOXh1oSZU1zNvf5QV2G*SN2a1sgwiA!/r" alt="images"></p><p>Git 很赞的一点是，任何人可以解决他自己的冲突。  </p><p>在这个例子中，小红可以简单的运行 git status 命令来查看哪里有问题。  </p><p>冲突文件列在 Unmerged paths（未合并路径）一节中：  </p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Unmerged paths：</span><br><span class="line"><span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">use</span> <span class="string">"git reset HEAD &lt;some-file&gt;..."</span> <span class="variable">to</span> <span class="variable">unstage</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">use</span> <span class="string">"git add/rm &lt;some-file&gt;..."</span> <span class="variable">as</span> <span class="variable">appropriate</span> <span class="variable">to</span> <span class="variable">mark</span> <span class="variable">resolution</span>)</span></span></span><br><span class="line">#</span><br><span class="line"># both modified:&lt;some-file&gt;</span><br></pre></td></tr></table></figure><p>接着小红编辑这些文件。  </p><p>修改完成后，用老套路暂存这些文件，并让git rebase 完成剩下的事情：  </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span></span><br><span class="line"><span class="bash">git rebase --<span class="built_in">continue</span></span></span><br></pre></td></tr></table></figure><p>要做的就这些了。  </p><p>Git会继续一个一个的合并后面的提交，如其他的提交有冲突就重复这个过程。  </p><p>如果你碰到了冲突，但是发现搞不定，不要惊慌。  </p><p>只要执行下面这条命令，就可以回到你执行git pull –rebase命令前的样子：  </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase <span class="comment">--abort</span></span><br></pre></td></tr></table></figure><h5 id="小红成功发布功能"><a href="#小红成功发布功能" class="headerlink" title="小红成功发布功能"></a>小红成功发布功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX0kBnWeNL8ejRYU6ro4.2u6jfdf4WmDKrAtmoAnmJ9TQ4sDBTQl0i3xlqRsJMoYZns72c0lo3zm5ObKWH4CoUG0!/r" alt="小红成功发布功能"></p><p>小红完成和中央仓库的同步之后，就能成功发布她的修改了。  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>如你所见，仅仅使用几个Git命令，就可以模拟出传统Subversion开发环境。  </p><p>对于要从SVN迁移过来的团队来说这太好了，但是没有发挥出Git分布式本质的优势。  </p><p>如果你的团队适应了集中式工作流，但想要更流畅的协作效果，绝对值得探索一下功能分支工作流的收益。  </p><p>通过为一个功能分配一个专门的分支，能够做到一个新增功能集成到正式项目之前对新功能进行深入讨论。  </p><h3 id="功能分支工作流-1"><a href="#功能分支工作流-1" class="headerlink" title="功能分支工作流"></a>功能分支工作流</h3><p>一旦玩转了集中式工作流，在开发过程中可以很简单地加上功能分支，用来鼓励开发者之间协作和简化交流。  </p><p>功能分支工作流背后的核心思路是所有的功能开发应该在一个专门的分支，而不是在master分支上。  </p><p>这个隔离可以方便多个开发者在各自的功能上开发而不会弄乱主干代码。  </p><p>另外，也保证了master分支的代码一定不会是有问题的，极大有利于集成环境。  </p><p>功能开发隔离也让pull  requests工作流成为可能， pull requests工作流能为每一个分支发起一个讨论，在分支合入正式项目之前，给其它开发者有表示赞同的机会。  </p><p>另外，如果你在功能开发中有问题卡出了，可以开一个pull Requests来向同学们征求建议。  </p><p>这些做法的重点就是，pull Requests让团队成员之间互相评论工作变成非常方便！  </p><h4 id="工作方式-1"><a href="#工作方式-1" class="headerlink" title="工作方式"></a>工作方式</h4><p>功能分支工作流仍然用中央仓库，并且master分支还是代表了正式项目的历史。  </p><p>但不是直接提交本地历史到各自的本地master分支，开发者每次在开始新功能前先创建一个新分支。  </p><p>功能分支应该有个描述性的名字，比如 animated-menu-items 或者  issue-#1061，这样可以让分支有个清楚且高聚焦的用途。  </p><p>在master分支和功能分支之间，Git是没有技术上的区别，所以开发者可以用和集中式工作流完全一样的方式编辑、暂存和提交修改到功能分支上。  </p><p>另外，功能分支也可以（且应该）push到中央仓库中。  </p><p>这样不修改正是代码就可以和其他开发者分享提交的功能。  </p><p>由于master仅有的一个【特殊】分支，在中央仓库上存在多个功能分支不会有任何问题。  </p><p>当然这样做也可以很方便地备份各自的本地提交。  </p><h4 id="Pull-Requests-1"><a href="#Pull-Requests-1" class="headerlink" title="Pull Requests"></a>Pull Requests</h4><p>功能分支除了可以隔离功能的开发，也使得通过 Pull Requests讨论变更称为可能。  </p><p>一旦某个开发完成一个功能，不是立即合并到master，而是push到中央仓库的功能分支上并发起一个Pull Requests的请求去合并并修改到master。  </p><p>在修改成为主干代码之前，这让其他的开发者有机会先去Review变更。  </p><p>Code Review是Pull Requests的一个重要的收益。  </p><p>但是pull Requests目的是讨论代码一个通用方式。  </p><p>你可以把Pull  Requests作为专门给某个分支的讨论。  </p><p>这意味着可以在更早的开发过程中就可以进行Code Review。  </p><p>比如，一个开发者开发功能需要帮助时，要做的就是发起一个Pull Requests，相关的人就会自动收到通知，在相关的提交旁边能看到需要帮助解决的问题。  </p><p>一旦Pull  Requests被接受了，发布功能要做的就和集中式工作流就很像了。  </p><p>（1）首先，确定本地的master分支和上游的master分支是同步的。  </p><p>（2）然后合并功能分支到本地master分支，并push已经更新的本地master分支到中央仓库。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>下面的示例演示了如何把Pull Requests作为Code Review的方式，但注意Pull Requests可以用于很多其他的目的。  </p><h5 id="小红开始开发一个新功能"><a href="#小红开始开发一个新功能" class="headerlink" title="小红开始开发一个新功能"></a>小红开始开发一个新功能</h5><p>在开始开发功能之前，小红需要一个独立的分支。  </p><p>使用下面的命令新建一个分支。  </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b </span><span class="keyword">marys-feature </span>master</span><br></pre></td></tr></table></figure><p>这个命令检出一个基于master名为marys-feature的分支，Git的-b选项表示如果分支还不存在则新建分支。  </p><p>这个新分支上，小红按照老套路编辑、暂存和提交修改，按需要提交以实现功能：  </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span>  <span class="string">status</span></span><br><span class="line"><span class="attr">git</span> <span class="string">add</span></span><br><span class="line"><span class="attr">git</span> <span class="string">commit</span></span><br></pre></td></tr></table></figure><h5 id="小红要去吃个午饭"><a href="#小红要去吃个午饭" class="headerlink" title="小红要去吃个午饭"></a>小红要去吃个午饭</h5><p>（两个人、多个人同时开发，称之为协同开发）  </p><p>仓库：github、码云、码市、gitlab  </p><p>review 代码审核；  </p><p>早上小红为新功能添加了一些提交。  </p><p>去吃午饭前，push功能分支到中央仓库是很好的做法，这样可以方便地备份，如果和其他开发协作，也让他们可以看到小红的提交。  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> marys-<span class="built_in">feature</span></span><br></pre></td></tr></table></figure><p>这条命令  push marys-feature 分支到中央仓库（origin），-u选项设置本地分支去跟踪远程对应的分支。  </p><p>设置好跟踪的分支后，小红就可以使用git push 命令省去指定推送分支的参数。  </p><h5 id="小红完成功能开发"><a href="#小红完成功能开发" class="headerlink" title="小红完成功能开发"></a>小红完成功能开发</h5><p>小红吃完午饭回来，完成整个功能的开发。  </p><p>在合并到master之前，她发起一个Pull Requests让团队的其他人知道功能已经完成。  </p><p>但是首先，她要确认中央仓库中已经有她最近的提交。  </p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><p>然后，在她的Git GUI客户端中发起Pull Request，请求合并marys-feature到master，团队成员会自动收到通知。  </p><p>Pull Request很酷的是可以在相关的提交旁边显示评注，所以你可以很对某个变更集提问。  </p><h5 id="小黑收到Pull-Request"><a href="#小黑收到Pull-Request" class="headerlink" title="小黑收到Pull  Request"></a>小黑收到Pull  Request</h5><p>小黑收到Pull Request后会查看marys-feature的修改。  </p><p>决定在合并到正式项目前是否要做些修改，且通过Pull Request和小红来回的讨论。  </p><h5 id="小红再做修改"><a href="#小红再做修改" class="headerlink" title="小红再做修改"></a>小红再做修改</h5><p>要在做修改，小红用和功能第一个迭代完全一样的过程。  </p><p>编辑、暂存、提交并push更新到中央仓库。  </p><p>小红这些活动都会显示在Pull Request上，小黑可以断续做评注。  </p><p>如果小黑有需要，也可以把marys-feature分支拉到本地，自己来修改，他加的提交也会一样显示在Pull Request上。  </p><h5 id="小红发布她的功能"><a href="#小红发布她的功能" class="headerlink" title="小红发布她的功能"></a>小红发布她的功能</h5><p>一旦小黑可以接受Pull Request，就可以合并功能到稳定项目代码中（可以由小黑或者是小红来做这个操作）：  </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout master</span></span><br><span class="line"><span class="attr">git</span> <span class="string">pull</span></span><br><span class="line"><span class="attr">git</span> <span class="string">pull origin marys-feature</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push</span></span><br></pre></td></tr></table></figure><p>无论谁来做合并，首先要检出master分支并确认它是最新的。  </p><p>然后执行 git pull origin marys-feature 合并 marys-feature 分支到已经和远程一直的本地 master分支。  </p><p>你可以使用简单 git merge marys-feature命令，但是前面的命令可以保证总是最新的新功能分支。  </p><p>最后更新的master分支要重新push回到origin。  </p><p>这个过程常常会生成一个和并提交。  </p><p>有些开发者喜欢有合并提交。  </p><p>因为它像一个新功能和原来代码基线的连通符。  </p><p>但如果你偏爱线性的提交历史，可以在执行合并rebase新功能到master分支的顶部，这样生成一个快进（fast-forward）的合并。  </p><p>一些GUI客户端只要点一下【接受】按钮执行好上面的命令来自动化Pull Request接受过程。  </p><p>如果你的不能这样，至少在功能合并到master分子后自动关闭Pull Request。  </p><h5 id="与此同时，小明在做和小红一样的事情"><a href="#与此同时，小明在做和小红一样的事情" class="headerlink" title="与此同时，小明在做和小红一样的事情"></a>与此同时，小明在做和小红一样的事情</h5><p>当小红和小黑在marys-feature上工作并讨论她的Pull  Request的时候，小明在自己的功能分支上做完全一样的事情。  </p><p>通过隔离功能能到独立的分支上，每个人都可以自主的工作，当然必要的时候在开发者之间分享变更还是比较繁琐的。  </p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>到了这里，但愿你发现了功能分支可以很直接地在集中式工作流的仅有的master分支上完成多功能的开发。  </p><p>另外，功能分支还使用了Pull Request，使得可以在你的版本控制GUI客户端中讨论某个提交。  </p><p>功能分支工作流是开发项目异常灵活的方式。  </p><p>问题是，有时候太灵活了。  </p><p>对于大型团队，常常需要给不同分支分配一个更具体的角色。  </p><p>GitFlow工作流是管理功能开发、发布准备和维护的常用模式。  </p><h3 id="GitFlow工作流"><a href="#GitFlow工作流" class="headerlink" title="GitFlow工作流"></a>GitFlow工作流</h3><p>在实际开发当中，可能通常使用GitFlow工作流。  </p><p>GitFlow工作流定义了一个围绕项目发布的严格分支模型。  </p><p>虽然比功能分支工作流复杂几分，但是提供了一个用于健壮的用于管理大型项目的框架。  </p><p>GitFlow工作流没有用超出功能分支工作流的概念和命令。  </p><p>而是为不同的分支分配了一个很明确的角色，并定义分支之间如何交互和什么时候进行交互。  </p><p>除了使用功能分支，在做准备、维护和记录发布也是用各自的分支。  </p><p>当然你可以用上功能分支工作流所有的好处：Pull Request、隔离实验性开发和更高效的工作。  </p><h4 id="工作方式-2"><a href="#工作方式-2" class="headerlink" title="工作方式"></a>工作方式</h4><p>GitFlow工作流仍然用中央仓库作为所有开发者的交互中心。  </p><p>和其他工作流一样，开发者在本地工作并push分子到中央分支去。  </p><h5 id="历史分支"><a href="#历史分支" class="headerlink" title="历史分支"></a>历史分支</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX0DucqArpSZN8V1mN.Djx7WchltIFUxePFkxo0wF6tL9hJ92GPpyK1meBHYC6jQnh92Uk6*6zENCWbjq21uqLsI!/r" alt="历史分支"></p><p>相对使用仅有的一个master分支，GitFlow工作流使用两个分支来记录项目的历史。  </p><p>master分支存储了正式发布的历史，而develop分支作为功能的集成分支，这样也方便master分支上的所有提交分配一个版本号。  </p><p>剩下要说明的问题就是围绕这两个分支的区别展开。  </p><h5 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX4suzD8O2OoWbYPwQ150IFWgQS3qSKoLWdglLxIjfri4eWAHC*W6m9OYJM0vFH4CxIhXiOdTBQYoWLsUJ3d8M.k!/r" alt="功能分支"></p><p>每个新功能位于一个自己的分支，这样可以push到中央仓库以备份和协作。  </p><p>但是功能分支不是从master分支上拉出新分支，而是使用develop分支作为父分支。  </p><p>当新功能完成时，合并会develop分支。  </p><p>新功能提交应该从不直接与master分支交互。  </p><p>开源软件基本上是使用GitFlow来做代码版本管理的控制。  </p><p>注意，从各种含义和目的上来看，功能分支加上develop分支就是功能分支工作流的用法。  </p><p>但是GitFlow工作流没有在这里止步。  </p><h5 id="发布分支"><a href="#发布分支" class="headerlink" title="发布分支"></a>发布分支</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX1K5y5ivKrS*rhk3l.NtQVVaNHmKMdlqKelqYaRENh70*1X*IrEmFCJIhfs5U7wXELfZbYI1tihPDOGBwBPqt6E!/r" alt="发布分支"></p><p>一旦develop分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从develop分支上fork一个发布分支。  </p><p>新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上——-这个分支只应该叫Bug修复、文档生成或其他面向发布任务。  </p><p>一旦对外发布的工作都完成了，发布分支合并到master分支并飞配一个版本号打好Tag。  </p><p>另外，这些新建发部分之以来做的修改要合并回develop分支。  </p><p>使用一个用于发布准备的专门分支，使得一个团队可以在完善当前的发布版本的同时，另一个团队可以继续开发下个版本的功能。  </p><p>这也打造定义良好的开发阶段（比如，可以很轻松的说，【这周我们要做准备发布版本4.0】，并且在仓库的目录结构中可以实际看到）  </p><p>常用的分支约定：  </p><ul><li>用于新建发布分支的分支：develop</li><li>用于合并的分支：master</li><li>分支命名：release- 或 release/</li></ul><h5 id="维护分支"><a href="#维护分支" class="headerlink" title="维护分支"></a>维护分支</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX8qfvx9q8UhYcwpU4tSoxZoCzp2TGnchoEgJnBAd**ejGrSWx7H1n1RbZFVAdVlD7v3kEO6EHjpPFNMCD9pabTQ!/r" alt="维护分支"></p><p>维护分支或者说是热修复（hotfix）分支用于生成快速给产品发布版本（production release）打补丁，这是唯一可以从master分支fork出来的分支。  </p><p>修复完成，修改应该马上合并回master分支和develop分支（当前的发部分支），master分支应该用新的版本号打好Tag。  </p><p>为了Bug修复使用专门分支，让团队可以处理问题而不用打断其他工作或者是等待下一个发布循环。  </p><p>你可以把维护分支想成是一个直接在master分支上处理的临时发布。  </p><p>即hotfix，维护的是v1.0.0—&gt;v1.0.1这种；<br>第三位数修改的是Bug（hotfix维护版本第三位数）；第二位数修改的是功能（功能分支维护的是版本的第二位数）；第一位为大架构改变的时候进行修改（维护版本的第一位数）；  </p><p>GitFlow从这点上就可以与语义化规范牵扯上联系；  </p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p>下面的示例演示本工作流如何用于管理单个发布循环。  </p><p>假设你已经创建了一个中央仓库。  </p><h5 id="创建开发分支"><a href="#创建开发分支" class="headerlink" title="创建开发分支"></a>创建开发分支</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX4Xsg92Awirp0bThQ4n*YW8UWB.U5*XFBFsn5hkNOcst0hBz.q1uwuu*KDADM.W9naZBQq8eKQyo4iLkzk28e1g!/r" alt="创建开发分支"></p><p>第一步为master分支配套一个develop分支。  </p><p>简单来做可以本地创建一个空的develop分支，push到服务器上：  </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>develop</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>-u origin master</span><br></pre></td></tr></table></figure><p>以后这个分支将会包含了项目的全部历史。  </p><p>而master分支将只包含部分历史。  </p><p>其他开发者这时应该克隆中央仓库，建好develop分支的跟踪分支：  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">ssh</span>://user@host/path/to/repo.git</span><br><span class="line">git checkout -b develop origin/develop</span><br></pre></td></tr></table></figure><p>现在每个开发都有了这些历史分支的本地拷贝。  </p><h5 id="小红和小明开始开发新功能"><a href="#小红和小明开始开发新功能" class="headerlink" title="小红和小明开始开发新功能"></a>小红和小明开始开发新功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX2X16EiSaoizI9a2HRgo6HRlddb*dD0yGRzorFtrKInoqDMveDkX4.ujU1ZgrgxXoZf1vY83YLzd6Dl2YO5SDUc!/r" alt="小红和小明开始开发新功能"></p><p>这个示例中，小红和小明开始各自的功能开发。  </p><p>他们需要为各自的功能创建相应的分支。  </p><p>新分支不是基于master分支，而是应该基于develop分支：  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="built_in">some</span>-<span class="built_in">feature</span> develop</span><br></pre></td></tr></table></figure><p>他们用老套路添加提交到各自功能分支上：编辑、暂存、提交；  </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">status</span></span><br><span class="line"><span class="attr">git</span> <span class="string">add</span></span><br><span class="line"><span class="attr">git</span> <span class="string">commit</span></span><br></pre></td></tr></table></figure><h5 id="小红完成功能开发-1"><a href="#小红完成功能开发-1" class="headerlink" title="小红完成功能开发"></a>小红完成功能开发</h5><p>添加了提交后，小红觉得她的功能OK了。  </p><p>如果团队使用Pull Requests，这时候可以发起一个用于合并到develop分支。  </p><p>否则她可以直接合并到她本地的develop分之后push到中央仓库：  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="built_in">origin</span> develop</span><br><span class="line">git checkout develop</span><br><span class="line">git merge <span class="built_in">some</span>-<span class="built_in">feature</span></span><br><span class="line">git <span class="built_in">push</span></span><br><span class="line">git branch -d <span class="built_in">some</span>-<span class="built_in">feature</span></span><br></pre></td></tr></table></figure><p>第一条命令在合并功能前确保develop分支是最新的。  </p><p>注意，功能绝不应该直接合并到master分支。  </p><p>冲突解决方法和集中式工作流一样。  </p><h5 id="小红开始准备发布"><a href="#小红开始准备发布" class="headerlink" title="小红开始准备发布"></a>小红开始准备发布</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXxm6aYd1gMGOxylETc6cDcj7kTwBnGuyoyzYDL7pNxxvtXeo*D5bCxnVfWE*k.cQe8O4lhgkHo2zR.IIDII1kmA!/r" alt="小红开始准备发布"></p><p>这个时候小明正在实现他的功能。  </p><p>小红开始准备她的第一个项目正式发布（发布分支也叫预发布分支，预发布分支基于develop，只有预发布版本分支才能够去合并到master分支，而预发布版本是经过测试人员测试之后的没有问题的一个版本；master分支代码必须可以执行，没有被污染）。  </p><p>像功能开发一样，她用一个新的分支来做发布准备。  </p><p>这一步也确定了发布的版本号：  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b release<span class="number">-0.1</span> develop</span><br></pre></td></tr></table></figure><p>这个分支是清理分支、执行所有测试、更新文档和其他为下个发布做准备操作的地方，像是一个专门用于改善发布的功能分支。  </p><p>只要小红创建的这个分支push到中央仓库，这个发布就是功能冻结的。  </p><p>任何不在develop分支中的新功能都推到下一个发布循环中。  </p><h5 id="小红完成发布"><a href="#小红完成发布" class="headerlink" title="小红完成发布"></a>小红完成发布</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXx2fdZ*.CxsTwPMg235DDXkchbPbk7hNVec6.FIcmcf72k0vjzhdQvVlYt8u8ao*65n3gyQAyN5GOxndJKhwiNk!/r" alt="小红完成发布"></p><p>一旦准备好了对外发布，小红合并修改到master分支和develop分支上，删除发布分支。  </p><p>合并回develop分支很重要，因为在发布分支中已经提交的更新需要在后面的新功能中也要是可用的。  </p><p>另外，如果小红的团队要求Code  Review，这是一个发起Pull Request的理想时机。  </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout master</span></span><br><span class="line"><span class="attr">git</span> <span class="string">merge release-0.1</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push</span></span><br><span class="line"><span class="attr">git</span> <span class="string">checkout develop</span></span><br><span class="line"><span class="attr">git</span> <span class="string">merge release-0.1</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push</span></span><br><span class="line"><span class="attr">git</span> <span class="string">branch -d release-0.1</span></span><br></pre></td></tr></table></figure><p>发布分支是作为功能开发（develop分支）和对外发布（master分支）间的缓冲。  </p><p>只要有合并到master分支，就应该打好Tag以方便跟踪。  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> <span class="number">0.1</span> -m <span class="string">"Initial public release"</span> <span class="literal">master</span></span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p>Git有提供各种钩子（hook），即仓库有时间发生时触发执行的脚本。  </p><p>可以配置一个钩子，在你push中央仓库的master分支时，自动构建好对外发布。  </p><h5 id="最终用户发现Bug"><a href="#最终用户发现Bug" class="headerlink" title="最终用户发现Bug"></a>最终用户发现Bug</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXzsQH1hJotlrx1khR6EZ0dUlyxkaf9L1Yi66Fs6sohYE0UTifJNygNHa*okiIgZc5dg2qSXBW*VyQGtiyMr0yo8!/r" alt="最终用户发现Bug"></p><p>对外发布后，小红回去和小明一起做下个发布的新功能开发，直到有最终用户开了一个Ticket抱怨当前版本的一个Bug。  </p><p>为了处理Bug，小红（或者小明）从master分支上来去了一个维护分支（hotfix），提交修改以解决问题，然后直接合并回master分支：  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b issue-<span class="comment">#001 master</span></span><br><span class="line"><span class="comment"># Fix the bug</span></span><br><span class="line">git checkout <span class="literal">master</span></span><br><span class="line">git merge issue-<span class="comment">#001</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>就像发布分支，维护分支中新加这些重要修改需要包含到develop分支中，所以小红要执行一个合并操作，然后就可以安全地删除这个分支了：  </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout develop</span></span><br><span class="line"><span class="attr">git</span> <span class="string">merge issue-#001</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push</span></span><br><span class="line"><span class="attr">git</span> <span class="string">branch -d issue-#001</span></span><br></pre></td></tr></table></figure><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>到了这里，但愿你对集中式工作流、功能分支工作流和GitFlow工作流已经感觉很舒适了。  </p><p>你应该也牢固的掌握了本地仓库的潜能，push/pull模式和Git健壮的分支和合并模型。  </p><p>记住，这里演示的工作流只是可能用法的例子，而不是在实际工作中使用Git不可违逆的条例。  </p><p>所以不要畏惧按自己需要对工作流的用法做取舍，不变的目标就是让Git为你所用。  </p><p>（在整个GitFlow工作流当中，只会去进行省略功能分支Feature，Master、HotFix、Release、Develop是必不可少的分支，以便控制每一次版本的迭代）  </p><h3 id="Forking工作流-1"><a href="#Forking工作流-1" class="headerlink" title="Forking工作流"></a>Forking工作流</h3><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX2qjPC0eDN.Xf29HcBYoAsTtpBFvJhu8qPVkh5cv575QWLsHx3q8JbFYK3X5cts.Zn43gkCjc7OzyBcDFaNdl.g!/r" alt="Forking工作流"></p><p>Forking工作流和前面讨论的几种工作流有根本的不同。  </p><p>这种工作流不是适用单个服务器端仓库作为【中央】代码基线，而让各个开发者都有一个服务端仓库。  </p><p>这意味着各个代码贡献者有2个Git仓库而不是1个：一个本地私有的，另一个服务端公开的。  </p><p>Forking工作流的一个主要优势是，贡献的代码可以被集成，而不需要所有人都能push代码到仅有的中央仓库中。  </p><p>开发者push到自己的服务端仓库，而只有项目维护者才能push到正式仓库。  </p><p>这样项目维护者可以接受任何开发者的提交，但无需给他正式代码库的写权限。  </p><p>效果就是一个分布式的工作流，能为大型、自发性的团队（包括了不受信的第三方）提供灵活的方式来安全的写作。  </p><p>也让这个工作流称为开源项目的理想工作流。  </p><h4 id="工作方式-3"><a href="#工作方式-3" class="headerlink" title="工作方式"></a>工作方式</h4><p>和其他的Git工作流一样，Forking工作流要先有一个公开的正式仓库存储在服务器上，但一个新的开发者想要在项目上工作时，不是直接从正式仓库克隆，而是fork正式项目在服务器上创建一个拷贝。  </p><p>这个仓库拷贝作为他人公开仓库—–其他开发者不允许push到这个仓库，但可以pull到修改（后面很快就会看到这点很重要）。  </p><p>在创建了自己服务端拷贝之后，和之前的工作流一样，开发者执行git clone命令克隆仓库到本地机器上，作为私有的开发环境。  </p><p>要提交本地修改时，push提交到自己公开仓库中——-而不是正式仓库中。  </p><p>然后，给正式仓库发起一个pull request，让项目维护者知道有更新已经准备好可以集成了。  </p><p>对于贡献的代码，pull request也可以很方便地作为一个讨论的地方。  </p><p>为了集成功能到正式代码库，维护者pull贡献者的变更到自己的本地仓库中，检查变更以确保不会让项目出错，合并变更到自己本地的master分支，然后push master分支到服务器的正式仓库中。  </p><p>到此，贡献的提交成为了项目的一部分，其他的开发者应该执行pull操作与正式仓库同步自己本地仓库。  </p><h5 id="正式仓库"><a href="#正式仓库" class="headerlink" title="正式仓库"></a>正式仓库</h5><p>在Forking工作流中，【官方】仓库的叫法只是一个约定，理解这点很重要。  </p><p>从技术上来看，各个开发者仓库和正式仓库在Git卡那里没有任何区别。  </p><p>事实上，让正式仓库之所以正式的唯一原因是他是项目维护者的公开仓库。  </p><h5 id="Forking工作流的分支使用方式"><a href="#Forking工作流的分支使用方式" class="headerlink" title="Forking工作流的分支使用方式"></a>Forking工作流的分支使用方式</h5><p>所有的个人公开仓库实际商只是为了方便和其他的开发者共享分支。  </p><p>各个开发者应该用分支隔离各个功能，就像功能分支工作流和GitFlow工作流一样。  </p><p>唯一的区别是这些分支被共享了。  </p><p>在Forking工作流中这些分支会被pull到另一个开发者的本地仓库中，而在功能分支工作流和GitFlow工作流中是直接被push到正式仓库当中。  </p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><h5 id="项目维护者初始化正式仓库"><a href="#项目维护者初始化正式仓库" class="headerlink" title="项目维护者初始化正式仓库"></a>项目维护者初始化正式仓库</h5><p>和任何使用Git项目一样，第一步还是创建在服务器上一个正式仓库，让所有团队成员都可以访问到。  </p><p>通常这个仓库也会作为项目维护者的公开仓库。  </p><p>公开仓库应该是裸仓库，不管是不是正式代码库。  </p><p>所以项目维护者会运行像下面的命令来搭建正式仓库：  </p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh user<span class="symbol">@host</span></span><br><span class="line">git init --bare /path/<span class="keyword">to</span>/repo.git</span><br></pre></td></tr></table></figure><p>Bitbucket和Stash提供了一个方便的GUI客户端已完成上面命令行做的事。  </p><p>这个搭建中央仓库的过程和前面提到的工作流完全一样。  </p><p>如果有现存的代码库，维护者也要push到这个仓库中。  </p><h5 id="开发者fork正式仓库"><a href="#开发者fork正式仓库" class="headerlink" title="开发者fork正式仓库"></a>开发者fork正式仓库</h5><p>其他所有的开发需要fork正式仓库。  </p><p>可以用git clone命令用SSH协议连通到服务器，拷贝仓库到服务器另一个位置—–是的，fork操作基本上就只是一个服务端的克隆。  </p><p>Bitbucket和Stash上可以点一下按钮就让开发者完成仓库的fork操作。  </p><p>这一步完成后，每个开发都在服务端有一个自己的仓库。  </p><p>和正式仓库一样，这些仓库应该是裸仓库。  </p><h5 id="开发者克隆自己fork出来的仓库"><a href="#开发者克隆自己fork出来的仓库" class="headerlink" title="开发者克隆自己fork出来的仓库"></a>开发者克隆自己fork出来的仓库</h5><p>下一步，各个开发者要克隆自己的公开仓库，用熟悉的git clone命令。  </p><p>在这个示例中，假定用Bitbucket托管了仓库。  </p><p>记住，如果这样的话各个开发者需要有各自的Bitbucket账号，使用下面命令克隆服务端自己的仓库。  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://user@bitbucket.org/user/repo.git</span><br></pre></td></tr></table></figure><p>相比前面介绍的工作流只用了一个origin远程别名指向中央仓库，Forking工作流需要2个远程别名——-一个指向正式仓库，另一个指向开发者自己的服务端仓库。  </p><p>别名的名字可以任意命名，常见的约定是使用origin作为远程克隆的仓库的别名（这个别名会在运行git clone自动创建），upstream（上游）作为正式仓库的别名。  </p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span> upstream https://bitbucket<span class="meta">.org</span>/maintainer/repo</span><br></pre></td></tr></table></figure><p>需要自己用上面的命令创建upstream别名。  </p><p>这样可以简单地保持本地仓库和正式仓库的同步更新。  </p><p>注意，如果上游仓库需要认证（比如不是开源的），你需要提供用户：  </p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span> upstream https://user@bitbucket<span class="meta">.org</span>/maintainer/repo</span><br></pre></td></tr></table></figure><p>这时在克隆和pull正式仓库时，需要提供用户的密码。  </p><h5 id="开发者开发自己的功能"><a href="#开发者开发自己的功能" class="headerlink" title="开发者开发自己的功能"></a>开发者开发自己的功能</h5><p>在刚克隆的本地仓库中，开发者可以向其他工作流一样的编辑代码、提交修改和新建分支：  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="built_in">some</span>-<span class="built_in">feature</span></span><br><span class="line">// Edit <span class="built_in">some</span> code</span><br><span class="line">git commit -a -m <span class="string">"Add first draft of some feature"</span></span><br></pre></td></tr></table></figure><p>所有的修改都是私有的直到push到自己公开仓库中。  </p><p>如果正式项目已经向前走了，可以用git pull命令获得新的提交：  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull upstream <span class="literal">master</span></span><br></pre></td></tr></table></figure><p>由于开发者应该都在专门的功能分支上工作，pull操作结果会都是快进合并。  </p><h5 id="开发者发布自己的功能"><a href="#开发者发布自己的功能" class="headerlink" title="开发者发布自己的功能"></a>开发者发布自己的功能</h5><p>一旦开发者准备好了分享新功能，需要做两件事。  </p><p>（1）首先，通过push他的贡献代码到自己的公开仓库中，让其他的开发者都可以访问到。他的origin远程别名应该已经有了，所有要做的就是：  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span>  <span class="built_in">feature</span>-branch</span><br></pre></td></tr></table></figure><p>这里和之前的工作流的差异是，origin远程别名指向开发者自己的服务端仓库，而不是正式仓库。  </p><p>（2）第二件事，开发者要通知项目维护者，想要合并他的新功能到正式库中。Bitbucket和Stash提供了Pull Request按钮，弹出个表单让你指定哪个分支要合并到正式仓库。一般你会想集成你的功能分支到上游远程仓库的master分支中。  </p><h5 id="项目维护者集成开发者的功能"><a href="#项目维护者集成开发者的功能" class="headerlink" title="项目维护者集成开发者的功能"></a>项目维护者集成开发者的功能</h5><p>当项目维护者收到pull request时，他要做的是决定是否集成它到正式代码库中。  </p><p>有两种方式来做：  </p><ul><li>直接在pull request中查看代码</li><li>pull代码到他自己的本地仓库，再手动合并</li></ul><p>第一种做法更简单，维护者可以在GUI中查看变更的差异，做评注和执行合并。  </p><p>但如果出现了合并冲突，需要第二种做法来解决。  </p><p>这种情况下，维护者需要从开发者的服务端仓库中fetch功能分支，合并到他本地的master分支，解决冲突：  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch https:<span class="regexp">//</span>bitbucket.org<span class="regexp">/user/</span>repo feature-branch</span><br><span class="line"><span class="regexp">//</span>查看变更</span><br><span class="line">git checkout master</span><br><span class="line">git merge FETCH_HEAD</span><br></pre></td></tr></table></figure><p>变更集成到本地的master分支后，维护者要push变更到服务器上的正式仓库，这样其他的开发者都能访问到：  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><p>注意，维护者的origin是指向他自己公开仓库的，即是项目的正式代码库。  </p><p>到此，开发者的贡献完全集成到了项目中。  </p><h5 id="开发者和正式仓库做同步"><a href="#开发者和正式仓库做同步" class="headerlink" title="开发者和正式仓库做同步"></a>开发者和正式仓库做同步</h5><p>由于正式代码库往前走了，其他的开发需要和正式仓库做同步：  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull upstream <span class="literal">master</span></span><br></pre></td></tr></table></figure><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p>如果你之前是使用SVN，Forking工作流可能看起来像是一个激进的范式切换（paradigm shift）。  </p><p>但是不要害怕，这个工作流实际上就是在功能分支工作流之上引入了另一个抽象层。  </p><p>不是直接通过单个中央仓库来分享分支，而是把贡献代码发布到开发者自己的服务端仓库中。  </p><p>示例中解释了，一个贡献如何从一个开发者流到正式的master分支中，但是同样的方法可以把贡献集中到任意一个仓库中。  </p><p>比如，如果团队的几个人协作实现一个功能，可以在开发之间用相同的方法分享变更，完全不涉及正式仓库。  </p><p>这使得Forking工作流对于松散组织的团队来说是个非常强大的工具。  </p><p>任一开发者可以方便地和另一开发者分享变更，任何分支都能有效地合并到正式代码库中。  </p><h3 id="Pull-Requests-2"><a href="#Pull-Requests-2" class="headerlink" title="Pull Requests"></a>Pull Requests</h3><p>Pull Requests 是Bitbucket上方便开发者之间协作的功能。  </p><p>提供了一个用户友好的Web界面，在集成提交的变更到正式向目前可以对变更进行讨论。  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX1zLLMp65VmnavK5XDJUKS6zYUJDvvIJN*Lt1FNUoIJG0DkTCKRNuOGToGtjWmjIrVLu*fSpHVogAtzO4DgCm80!/r" alt="images"></p><p>开发者向团队成员通知功能开发已经完成，pull Requests是最简单的用法。  </p><p>开发者完成功能开发后，通过Bitbucket账号发起一个pull Request。这样让涉及这个功能的所有人知道，要去做Code Review和合并到master分支。  </p><p>但是，Pull  Request远不止一个简单的通知，而是为讨论提交的功能的一个专门论坛。  </p><p>如果变更有任何问题，团队成员反馈在Pull Request中，甚至pull新的提交微调功能。  </p><p>所有的这些活动都直接跟踪在Pull Request中。  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7SLIJSUYxrmcZpwuXYsQB1Ya2zpcBawWJ7atpdZcoSsGWSrxt3XnkjpSfeaAffmHrs3SyEpgZCaBKHAdN3ReSA!/r" alt="images"></p><p>相比其他的协作模型，这种分享提交的形式有助于打造一个更流畅的工作流。  </p><p>SVN和Git都能通过一个简单的脚本收到通知邮件；  </p><p>但是，讨论变更时，开发者通常只能去回复邮件。  </p><p>这样做会变得杂乱，尤其还要涉及后面的几个提交时。  </p><p>Pull Requests吧所有相关功能整合到一个和Bitbucket仓库界面集成的用户友好Web界面中。  </p><h4 id="解析Pull-Request"><a href="#解析Pull-Request" class="headerlink" title="解析Pull Request"></a>解析Pull Request</h4><p>当腰发起一个pull Request，你所要做的就是请求（Request）另一个开发者（比如项目的维护者），来pull你仓库中一个分支到他的仓库中。  </p><p>这意味着你要提供4个信息（源仓库、源分支、目的仓库、目的分支），以发起Pull Request。  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7SLIJSUYxrmcZpwuXYsQB1Ya2zpcBawWJ7atpdZcoSsGWSrxt3XnkjpSfeaAffmHrs3SyEpgZCaBKHAdN3ReSA!/r" alt="images"></p><h4 id="工作方式-4"><a href="#工作方式-4" class="headerlink" title="工作方式"></a>工作方式</h4><p>Pull Request可以和功能分支工作流、GitFlow工作流或Forking工作流一起使用。  </p><p>但Pull Request要求要么分支不同，要么仓库不同，所以不能用于集中式工作流。  </p><p>在不同的工作流中使用pull  Request会有一些不同，但基本的过程是这样的：  </p><ul><li>开发者在本地仓库新建一个专门的分支开发功能；</li><li>开发者push分支修改到公开的Bitbucket仓库中；</li><li>开发者通过Bitbucket发起一个Pull Request；</li><li>团队的其他成员review code，讨论并修改；</li><li>项目维护者合并功能到官方仓库中并关闭Pull Request；</li></ul><h4 id="在功能分支工作流中使用Pull-Request"><a href="#在功能分支工作流中使用Pull-Request" class="headerlink" title="在功能分支工作流中使用Pull Request"></a>在功能分支工作流中使用Pull Request</h4><p>功能分支工作流用一个共享的Bitbucket仓库来管理协作，开发者在专门的分支上开发功能。  </p><p>但不是立即合并到master分支上，而是在合并到主代码之前开发这应该开一个Pull Request发起功能的讨论。  </p><p>功能分支工作流只有一个公开的仓库，所以Pull Request的目的仓库和源仓库总是同一个。  </p><p>通常开发者会指定他的功能分支作为源分支，master分支作为目的分支。  </p><p>收到Pull Request后，项目维护者要决定如何做。  </p><p>如果功能没问题，就简单地合并到master分支，关闭Pull Request。  </p><p>但如果提交的变更有问题，他可以在Pull Request中反馈，之后的新加的评论也会评论之后接着显示出来。  </p><p>在功能还没有完全开发完的时候，也可能发起一个pull Request。  </p><p>比如开发者在实现某个需求时遇到了麻烦。  </p><p>他可以发一个包含正在进行工作的Pull Request。  </p><p>其他的开发者可以在Pull Request提供建议，或者甚至直接添加提交来解决问题。  </p><h4 id="在GitFlow工作流中使用Pull-Request"><a href="#在GitFlow工作流中使用Pull-Request" class="headerlink" title="在GitFlow工作流中使用Pull Request"></a>在GitFlow工作流中使用Pull Request</h4><p>GitFlow工作流和功能分支工作流类似，单围绕项目发布定义一个严格的分支模型。  </p><p>在GitFlow工作流中使用Pull Request让开发者在发布分支或者是维护分支上工作时，可以有个方便的地方对关于发布分支或者是维护分支的问题进行交流。  </p><p>GitFlow工作流中Pull Request的使用过程和上一节中完全一致：当一个功能、发布或者是热修复分支需要Review时，开发者简单发起一个Pull Request，团队的其他成员会通过Bitbucket收到通知。  </p><p>新功能一般合并到develop分支，而发布和热修复则要同时合并到develop分支和master分支上。  </p><p>Pull Request可能用作所有合并的正式管理。  </p><h4 id="在Forking工作流中使用Pull-Request"><a href="#在Forking工作流中使用Pull-Request" class="headerlink" title="在Forking工作流中使用Pull Request"></a>在Forking工作流中使用Pull Request</h4><p>在Forking工作流中，开发者push完成的功能到他自己的仓库中，而不是共享仓库。  </p><p>然后，他发一个Pull  Request，让项目维护者知道他的功能已经可以Review了。  </p><p>在这个工作流，Pull Request的通知功能非常有用，因为项目维护者不可能知道其他开发者在他们自己的仓库添加了提交。  </p><p>由于各个开发者有自己的公开仓库，Pull Request的源仓库和目标仓库不是同一个。  </p><p>源仓库是开发者的公开仓库，源分支是包含了修改的分支。  </p><p>如果开发者要合并修改到正式代码库中，那么目标仓库是正式仓库，目标分支是master分支。  </p><p>Pull Request也可以用于正式项目之外的其他开发者之间的协作。  </p><p>比如，如果一个开发者和一个团队成员一起开发一个功能，他们可以发起一个Pull Request，用团队成员的Bitbucket仓库作为目标，而不是正式项目的仓库。  </p><p>然后使用相同的功能分支作为源和目标分支。  </p><p>2个开发者之间可以在Pull Request中讨论和开发功能。  </p><p>完成开发后，他们可以发起另一个Pull  Request，请求合并功能到正式的master分支。  </p><p>在Forking工作流中，这样的灵活性称为一个强有力的协作工具。  </p><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><p>下面的示例演示了Pull Request如何在Forking工作流中使用。  </p><p>也同样适用于小团队的开发协作和第三方开发者向开源项目的贡献。  </p><p>在示例中，小红是个开发，小明是项目维护者。  </p><p>他们各自有一个公开的Bitbucket仓库，而小明的仓库包含了正式工程。  </p><h5 id="小红fork正式项目"><a href="#小红fork正式项目" class="headerlink" title="小红fork正式项目"></a>小红fork正式项目</h5><p>小红先要fork小明的Bitbucket仓库，开始项目的开发。  </p><p>她登录Bitbucket，浏览到小明的仓库页面，点fork按钮。  </p><p>然后为fork出来的仓库填写名字和描述，这样小红就有了服务端的项目拷贝了。  </p><h5 id="小红克隆她的Bitbucket仓库"><a href="#小红克隆她的Bitbucket仓库" class="headerlink" title="小红克隆她的Bitbucket仓库"></a>小红克隆她的Bitbucket仓库</h5><p>下一步，小红克隆自己刚才fork出来的Bitbucket仓库，以在本机上准备出工作拷贝。  </p><p>命令如下：  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://user@bitbucket.org/user/repo.git</span><br></pre></td></tr></table></figure><p>请记住，git clone 会自动创建origin远程别名，是指向小红fork出来的仓库。  </p><h5 id="小红开发新功能"><a href="#小红开发新功能" class="headerlink" title="小红开发新功能"></a>小红开发新功能</h5><p>在开始改代码前，小红要为新功能新建一个新分支。  </p><p>她会用这个分支作为Pull Request的源分支。  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="built_in">some</span>-<span class="built_in">feature</span></span><br></pre></td></tr></table></figure><h5 id="编辑代码"><a href="#编辑代码" class="headerlink" title="编辑代码"></a>编辑代码</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -<span class="keyword">a</span> -m <span class="string">"Add first draft of some feature"</span></span><br></pre></td></tr></table></figure><p>在新功能分支上，小红按照需要添加提交。  </p><p>甚至如果小红觉得功能分支上的提交历史太乱了，她可以用交互式rebase来删除或者压制提交。  </p><p>对于大型项目，整理功能分支的历史可以让项目维护者更容易看出在pull Request中做了什么内容。  </p><h5 id="小红push功能到她的Bitbucket仓库中"><a href="#小红push功能到她的Bitbucket仓库中" class="headerlink" title="小红push功能到她的Bitbucket仓库中"></a>小红push功能到她的Bitbucket仓库中</h5><p>小红完成功能后，push功能到她自己的Bitbucket仓库中（不是正是仓库），用下面简单的命令。  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> <span class="built_in">some</span>-branch</span><br></pre></td></tr></table></figure><p>这时她的变更可以让项目维护者看到了（后者任何想要看的协作者）  </p><h5 id="小红发起Pull-Request"><a href="#小红发起Pull-Request" class="headerlink" title="小红发起Pull Request"></a>小红发起Pull Request</h5><p>Bitbucket上有了她的功能分支后，小红可以用她的Bitbucket账号浏览到她fork出来的仓库页面，点右上角的[ Pull Request ]按钮，发起一个Pull Request。  </p><p>弹出的表单自动设置小红的仓库为源仓库，询问小红以指定源分支、目标仓库和目标分支。  </p><p>小红想要合并功能到正式仓库，所以源分支是她的功能分支，目标仓库是小明的公开仓库，而目标分支是master分支。  </p><p>另外，小红需要提供Pull Request的标题和描述信息。  </p><p>如果需要小明以外的人审核批准diamante，她可以把这些人填在[ Reviewers ]文本框中。  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX4eBUNEH.PnD8cXLFX3FNQ1TY28uOV3j2Ic*FLo6qk1HERoVGDzy.ccPi6KWHQ1Ha7aF4qrprhr6a71aswRPe1s!/r" alt="images"></p><p>创建好了Pull Request，通知会通过Bitbucket系统消息或者邮件（可选）发给小明。  </p><h5 id="小明-review-Pull-Request"><a href="#小明-review-Pull-Request" class="headerlink" title="小明 review Pull Request"></a>小明 review Pull Request</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXz.TEdJt9fHfFvRXR*aihUCZBZl8OSFD1T7r*7GIRRSRDePO5EI5YO0pxG7Qo02eHht0.LfxlnFiUPPKgPzRY4U!/r" alt="images"></p><p>在小明的Bitbucket仓库页面的[ Pull Request ]Tab可以看到所有人发起的Pull Request。  </p><p>点击小红的Pull Request会显示Pull Request的描述、功能的提交历史和每个变更的差异（diff）。  </p><p>如果小明想要合并到项目中，只要点一下[ Merge ]按钮，就可以同意Pull Request并合并到master分支。  </p><p>但如果像这个示例中一样，小明发现了在小红的代码中的一个小Bug，要在小红合并前修复。  </p><p>小明可以在整个Pull Request上加上评注，或者是选择历史中的某个提交加上评注。  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXywJcEdXUnF5drr2Tn8vpOshxucsOMz.iW9qg*vXiM80CBz6VcPZTn4e7NC2txFi9Xf.oe9HyW39vilYdBhizv0!/r" alt="images"></p><h5 id="小红补加提交"><a href="#小红补加提交" class="headerlink" title="小红补加提交"></a>小红补加提交</h5><p>如果小红对反馈有任何疑问，可以在Pull Request中响应，把Pull Request当做是她功能讨论的论坛。  </p><p>小红在她的功能分支新加提交以解决代码问题，并push到她的Bitbucket仓库中，就像前一轮中的做饭一样。  </p><p>这些提交会进入到Pull Request，小明在原来的评注旁边可以再次Review 变更。  </p><h5 id="小明接受Pull-Request"><a href="#小明接受Pull-Request" class="headerlink" title="小明接受Pull Request"></a>小明接受Pull Request</h5><p>最终，小明接受变更，合并功能分支到master分支，并关闭Pull Request。  </p><p>至此，功能集成到项目中，其他的项目开发者可以用标准的git pull命令pull这些变更到自己的本地仓库中。  </p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p>到了这里，你应该有了所有需要的工具来集成Pull Request到你自己的工作流。  </p><p>请记住，Pull Request并不是为了替代任何基于Git的协作工作流，而是它们的一个便利的补充，让团队成员间的协作更加轻松方便。  </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Git工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端页面双色球3</title>
      <link href="/2020/05/27/%E3%80%90%E5%91%A8%E5%BD%A4%E5%BD%A4%E3%80%91/%E3%80%90%E5%91%A8%E5%BD%A4%E5%BD%A4%E3%80%91%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%94%B9%E8%BF%9B3/"/>
      <url>/2020/05/27/%E3%80%90%E5%91%A8%E5%BD%A4%E5%BD%A4%E3%80%91/%E3%80%90%E5%91%A8%E5%BD%A4%E5%BD%A4%E3%80%91%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%94%B9%E8%BF%9B3/</url>
      
        <content type="html"><![CDATA[<h2 id="需求内容"><a href="#需求内容" class="headerlink" title="需求内容"></a>需求内容</h2><p><a href="https://github.com/fengshana/Mamai" target="_blank" rel="noopener">https://github.com/fengshana/Mamai</a>  </p><ol><li>分页加个页码</li><li>这个10出过了很多期的，最近的这一期130，4.10，到今天最新的一期不管数值多少，为止已经多少期没出了，求差值</li><li>把搜索的数字加个红色也行</li></ol><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX0OntByQ9RopVFKqFo2EAAP.w*ru3lHqrrQXKPPvOiJcpxdOfhwHYah.is4YlEKT.jSTullaIqHR6PMItPvTZnk!/r" alt="image"><br><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX6NdBhxBRYBUy.T6WIURM8FztiZEk0bzwnUWuk2wwu0zeYpSbcbz.bcVfsU6GZo8tyfIU60tglNtx0E4zdfuFgM!/r" alt="image"><br><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX.hsLuSnbnm1WocRcndLv9YK0y2Ojuh2G*eAAF14QcltwhNkZ.r8foxuxlNiqT.LK0X4HY7fncWH*Ik9RrigLc8!/r" alt="image"></p><h3 id="接触docker并部署项目"><a href="#接触docker并部署项目" class="headerlink" title="接触docker并部署项目"></a>接触docker并部署项目</h3><p>这边是将项目打包成jar包部署linux环境当中的docker容器内</p><p>参考Blog：</p><ul><li><a href="https://www.jianshu.com/p/397929dbc27d" target="_blank" rel="noopener">https://www.jianshu.com/p/397929dbc27d</a></li></ul><p>相关命令：</p><p>docker ps -a<br>docker images<br>docker stop 镜像的名称<br>docker start 镜像的名称</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">432 </span> cd ../logs/</span><br><span class="line"><span class="symbol">433 </span> tail -<span class="number">300</span>f access.<span class="keyword">log</span></span><br><span class="line"><span class="symbol">434 </span> ../sbin/nginx -s quit</span><br><span class="line"><span class="symbol">435 </span> ../sbin/nginx -s <span class="keyword">stop</span></span><br><span class="line"><span class="symbol">436 </span> cd ../conf</span><br><span class="line"><span class="symbol">437 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">438 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">439 </span> /<span class="keyword">usr</span>/local/nginx/sbin/nginx -c /<span class="keyword">usr</span>/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="symbol">440 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">441 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">442 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">443 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">444 </span> ../sbin/nginx  -s reload</span><br><span class="line"><span class="symbol">445 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">446 </span> cd </span><br><span class="line"><span class="symbol">447 </span> ll</span><br><span class="line"><span class="symbol">448 </span> cd apache-tomcat-<span class="number">8.5.51</span>/</span><br><span class="line"><span class="symbol">449 </span> ll</span><br><span class="line"><span class="symbol">450 </span> ccd logs/</span><br><span class="line"><span class="symbol">451 </span> ll</span><br><span class="line"><span class="symbol">452 </span> cd logs/</span><br><span class="line"><span class="symbol">453 </span> ll</span><br><span class="line"><span class="symbol">454 </span> cd ..</span><br><span class="line"><span class="symbol">455 </span> ll</span><br><span class="line"><span class="symbol">456 </span> cd ..</span><br><span class="line"><span class="symbol">457 </span> ll</span><br><span class="line"><span class="symbol">458 </span> more install.sh </span><br><span class="line"><span class="symbol">459 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">460 </span> cd /<span class="keyword">usr</span>/local/nginx/</span><br><span class="line"><span class="symbol">461 </span> ll</span><br><span class="line"><span class="symbol">462 </span> cd conf</span><br><span class="line"><span class="symbol">463 </span> more nginx.conf</span><br><span class="line"><span class="symbol">464 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">465 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">466 </span> ll</span><br><span class="line"><span class="symbol">467 </span> ps -ef |grep  java</span><br><span class="line"><span class="symbol">468 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">23983</span></span><br><span class="line"><span class="symbol">469 </span> ll</span><br><span class="line"><span class="symbol">470 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">23983</span></span><br><span class="line"><span class="symbol">471 </span> ps -ef |grep  java</span><br><span class="line"><span class="symbol">472 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">703</span></span><br><span class="line"><span class="symbol">473 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">474 </span> ll</span><br><span class="line"><span class="symbol">475 </span> <span class="keyword">mkdir</span> docker</span><br><span class="line"><span class="symbol">476 </span> ll</span><br><span class="line"><span class="symbol">477 </span> cd docker/</span><br><span class="line"><span class="symbol">478 </span> ll</span><br><span class="line"><span class="symbol">479 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">480 </span> cd ..</span><br><span class="line"><span class="symbol">481 </span> ll</span><br><span class="line"><span class="symbol">482 </span> cp Mamai-<span class="number">1.0</span>-SNAPSHOT.jar docker/</span><br><span class="line"><span class="symbol">483 </span> ll</span><br><span class="line"><span class="symbol">484 </span> cd docker/</span><br><span class="line"><span class="symbol">485 </span> ll</span><br><span class="line"><span class="symbol">486 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">487 </span> pwd</span><br><span class="line"><span class="symbol">488 </span> ll</span><br><span class="line"><span class="symbol">489 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">490 </span> docker build -t springbootdemo4docker .</span><br><span class="line"><span class="symbol">491 </span> docker images</span><br><span class="line"><span class="symbol">492 </span> docker <span class="keyword">run</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> springbootdemo4docker</span><br><span class="line"><span class="symbol">493 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">494 </span> ps -ef |grep java</span><br><span class="line"><span class="symbol">495 </span> docker logs --tail <span class="number">300</span> -f demo</span><br><span class="line"><span class="symbol">496 </span> docker ps</span><br><span class="line"><span class="symbol">497 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">498 </span> netstat -na</span><br><span class="line"><span class="symbol">499 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">500 </span> ps -ef|grep java</span><br><span class="line"><span class="symbol">501 </span> ll</span><br><span class="line"><span class="symbol">502 </span> more Dockerfile </span><br><span class="line"><span class="symbol">503 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">504 </span> docker-compose exec java bash</span><br><span class="line"><span class="symbol">505 </span> cd /<span class="keyword">usr</span>/local/bin/</span><br><span class="line"><span class="symbol">506 </span> docker-compose exec java bash</span><br><span class="line"><span class="symbol">507 </span> ll</span><br><span class="line"><span class="symbol">508 </span> netstat -lnp|grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">509 </span> ll</span><br><span class="line"><span class="symbol">510 </span> cd /<span class="keyword">usr</span>/local/nginx/conf</span><br><span class="line"><span class="symbol">511 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">512 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">513 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">514 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">515 </span> ll</span><br><span class="line"><span class="symbol">516 </span> cd apache-tomcat-<span class="number">8.5.51</span>/</span><br><span class="line"><span class="symbol">517 </span> ll</span><br><span class="line"><span class="symbol">518 </span> cd ..</span><br><span class="line"><span class="symbol">519 </span> ll</span><br><span class="line"><span class="symbol">520 </span> rm -rf apache-tomcat-<span class="number">8.5.51</span>/</span><br><span class="line"><span class="symbol">521 </span> ll</span><br><span class="line"><span class="symbol">522 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">523 </span> ll</span><br><span class="line"><span class="symbol">524 </span> wget https://mirrors.cnnic.cn/apache/tomcat/tomcat-<span class="number">9</span>/v9.<span class="number">0.7</span>/bin/apache-tomcat-<span class="number">9.0.7.</span>tar.gz</span><br><span class="line"><span class="symbol">525 </span> wget https://archive.apache.org/dist/tomcat/tomcat-<span class="number">8</span>/v8.<span class="number">0.23</span>/bin/apache-tomcat-<span class="number">8.0.23.</span>tar.gz</span><br><span class="line"><span class="symbol">526 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">527 </span> ll</span><br><span class="line"><span class="symbol">528 </span> tar -zxvf apache-tomcat-<span class="number">8.0.23.</span>tar.gz </span><br><span class="line"><span class="symbol">529 </span> ll</span><br><span class="line"><span class="symbol">530 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">531 </span> ll</span><br><span class="line"><span class="symbol">532 </span> cd apache-tomcat-<span class="number">8.0.23</span></span><br><span class="line"><span class="symbol">533 </span> ll</span><br><span class="line"><span class="symbol">534 </span> cd webapps/</span><br><span class="line"><span class="symbol">535 </span> ll</span><br><span class="line"><span class="symbol">536 </span> rm -rf docs/</span><br><span class="line"><span class="symbol">537 </span> rm -rf examples/</span><br><span class="line"><span class="symbol">538 </span> rm -rf host-manager/</span><br><span class="line"><span class="symbol">539 </span> rm -rf manager/</span><br><span class="line"><span class="symbol">540 </span> rm -rf ROOT/</span><br><span class="line"><span class="symbol">541 </span> ll</span><br><span class="line"><span class="symbol">542 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">543 </span> ll</span><br><span class="line"><span class="symbol">544 </span> cd ..</span><br><span class="line"><span class="symbol">545 </span> ll</span><br><span class="line"><span class="symbol">546 </span> cd work/</span><br><span class="line"><span class="symbol">547 </span> ll</span><br><span class="line"><span class="symbol">548 </span> cd ..</span><br><span class="line"><span class="symbol">549 </span> cd conf/</span><br><span class="line"><span class="symbol">550 </span> ll</span><br><span class="line"><span class="symbol">551 </span> vim server.xml </span><br><span class="line"><span class="symbol">552 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">553 </span> cd ..</span><br><span class="line"><span class="symbol">554 </span> cd webapps/</span><br><span class="line"><span class="symbol">555 </span> ll</span><br><span class="line"><span class="symbol">556 </span> pwd</span><br><span class="line"><span class="symbol">557 </span> cd ..</span><br><span class="line"><span class="symbol">558 </span> cd conf/</span><br><span class="line"><span class="symbol">559 </span> vim server.xml </span><br><span class="line"><span class="symbol">560 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">561 </span> ll</span><br><span class="line"><span class="symbol">562 </span> cd ..</span><br><span class="line"><span class="symbol">563 </span> ll</span><br><span class="line"><span class="symbol">564 </span> cd bin</span><br><span class="line"><span class="symbol">565 </span> ./startup.sh </span><br><span class="line"><span class="symbol">566 </span> cd ..</span><br><span class="line"><span class="symbol">567 </span> cd logs/</span><br><span class="line"><span class="symbol">568 </span> ll</span><br><span class="line"><span class="symbol">569 </span> ls</span><br><span class="line"><span class="symbol">570 </span> cd ..</span><br><span class="line"><span class="symbol">571 </span> ls</span><br><span class="line"><span class="symbol">572 </span> cd server</span><br><span class="line"><span class="symbol">573 </span> cd www</span><br><span class="line"><span class="symbol">574 </span> cd server</span><br><span class="line"><span class="symbol">575 </span> ls</span><br><span class="line"><span class="symbol">576 </span> cd tomcat</span><br><span class="line"><span class="symbol">577 </span> ls</span><br><span class="line"><span class="symbol">578 </span> cd bin</span><br><span class="line"><span class="symbol">579 </span> ls</span><br><span class="line"><span class="symbol">580 </span> cd apache-tomcat-<span class="number">8.5.12</span>/</span><br><span class="line"><span class="symbol">581 </span> ls</span><br><span class="line"><span class="symbol">582 </span> cd bin</span><br><span class="line"><span class="symbol">583 </span> ./startup.sh</span><br><span class="line"><span class="symbol">584 </span> ls</span><br><span class="line"><span class="symbol">585 </span> ./startup.sh</span><br><span class="line"><span class="symbol">586 </span> ./shutdown.sh</span><br><span class="line"><span class="symbol">587 </span> ./startup.sh</span><br><span class="line"><span class="symbol">588 </span> ll</span><br><span class="line"><span class="symbol">589 </span> cd apache-tomcat-<span class="number">8.0.23</span></span><br><span class="line"><span class="symbol">590 </span> ll</span><br><span class="line"><span class="symbol">591 </span> cd webapps/</span><br><span class="line"><span class="symbol">592 </span> ll</span><br><span class="line"><span class="symbol">593 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">594 </span> cd ..</span><br><span class="line"><span class="symbol">595 </span> cd webapps/</span><br><span class="line"><span class="symbol">596 </span> ll</span><br><span class="line"><span class="symbol">597 </span> cd myProject</span><br><span class="line"><span class="symbol">598 </span> ll</span><br><span class="line"><span class="symbol">599 </span> cd WEB-INF/</span><br><span class="line"><span class="symbol">600 </span> ll</span><br><span class="line"><span class="symbol">601 </span> cd classes/</span><br><span class="line"><span class="symbol">602 </span> ll</span><br><span class="line"><span class="symbol">603 </span> more application.properties </span><br><span class="line"><span class="symbol">604 </span> cd ..</span><br><span class="line"><span class="symbol">605 </span> ll</span><br><span class="line"><span class="symbol">606 </span> cd ..</span><br><span class="line"><span class="symbol">607 </span> ll</span><br><span class="line"><span class="symbol">608 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">609 </span> cd META-INF/</span><br><span class="line"><span class="symbol">610 </span> ll</span><br><span class="line"><span class="symbol">611 </span> cd ..</span><br><span class="line"><span class="symbol">612 </span> ll</span><br><span class="line"><span class="symbol">613 </span> cd WEB-INF/</span><br><span class="line"><span class="symbol">614 </span> ll</span><br><span class="line"><span class="symbol">615 </span> cd classes/</span><br><span class="line"><span class="symbol">616 </span> ll</span><br><span class="line"><span class="symbol">617 </span> cd templates/</span><br><span class="line"><span class="symbol">618 </span> ll</span><br><span class="line"><span class="symbol">619 </span> cd ..</span><br><span class="line"><span class="symbol">620 </span> ll</span><br><span class="line"><span class="symbol">621 </span> cd classes/</span><br><span class="line"><span class="symbol">622 </span> ll</span><br><span class="line"><span class="symbol">623 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">624 </span> ll</span><br><span class="line"><span class="symbol">625 </span> more application.properties </span><br><span class="line"><span class="symbol">626 </span> ll</span><br><span class="line"><span class="symbol">627 </span> cd templates/</span><br><span class="line"><span class="symbol">628 </span> ll</span><br><span class="line"><span class="symbol">629 </span> cd js/</span><br><span class="line"><span class="symbol">630 </span> ll</span><br><span class="line"><span class="symbol">631 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">632 </span> vim <span class="keyword">common</span>.js </span><br><span class="line"><span class="symbol">633 </span> cd .</span><br><span class="line"><span class="symbol">634 </span> cd ..</span><br><span class="line"><span class="symbol">635 </span> cd conf/</span><br><span class="line"><span class="symbol">636 </span> more server.xml </span><br><span class="line"><span class="symbol">637 </span> cd ..</span><br><span class="line"><span class="symbol">638 </span> cd webapps/</span><br><span class="line"><span class="symbol">639 </span> ll</span><br><span class="line"><span class="symbol">640 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">641 </span> cd myProject</span><br><span class="line"><span class="symbol">642 </span> ll</span><br><span class="line"><span class="symbol">643 </span> cd WEB-INF/</span><br><span class="line"><span class="symbol">644 </span> ll</span><br><span class="line"><span class="symbol">645 </span> cd ca</span><br><span class="line"><span class="symbol">646 </span> cd classes/</span><br><span class="line"><span class="symbol">647 </span> ll</span><br><span class="line"><span class="symbol">648 </span> cd templates/</span><br><span class="line"><span class="symbol">649 </span> ll</span><br><span class="line"><span class="symbol">650 </span> cd js/</span><br><span class="line"><span class="symbol">651 </span> ll</span><br><span class="line"><span class="symbol">652 </span> vim <span class="keyword">common</span>.js </span><br><span class="line"><span class="symbol">653 </span> ps -ef |grep java</span><br><span class="line"><span class="symbol">654 </span> netstat -lnp|grep <span class="number">8082</span></span><br><span class="line"><span class="symbol">655 </span> systemctl status firewalld</span><br><span class="line"><span class="symbol">656 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">657 </span> firewall-cmd --zone=public --add-port=<span class="number">80</span>/tcp --permanent</span><br><span class="line"><span class="symbol">658 </span> firewall-cmd --zone=public --add-port=<span class="number">8082</span>/tcp --permanent</span><br><span class="line"><span class="symbol">659 </span> firewall-cmd --reload</span><br><span class="line"><span class="symbol">660 </span> firewall-cmd --zone=public --query-port=<span class="number">8082</span>/tcp</span><br><span class="line"><span class="symbol">661 </span> history </span><br><span class="line"><span class="symbol">662 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">663 </span> ll</span><br><span class="line"><span class="symbol">664 </span> cd ..</span><br><span class="line"><span class="symbol">665 </span> cd bin/</span><br><span class="line"><span class="symbol">666 </span> ./shutdown.sh </span><br><span class="line"><span class="symbol">667 </span> netstat -lnp|grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">668 </span> netstat -lnp|grep <span class="number">8082</span></span><br><span class="line"><span class="symbol">669 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">1109</span></span><br><span class="line"><span class="symbol">670 </span> netstat -lnp|grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">671 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">672 </span> cd ..</span><br><span class="line"><span class="symbol">673 </span> cd conf/</span><br><span class="line"><span class="symbol">674 </span> ll</span><br><span class="line"><span class="symbol">675 </span> vim server.xml </span><br><span class="line"><span class="symbol">676 </span> cd ..</span><br><span class="line"><span class="symbol">677 </span> cd bin/</span><br><span class="line"><span class="symbol">678 </span> ./startup.sh </span><br><span class="line"><span class="symbol">679 </span> netstat -lnp|grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">680 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">681 </span> ll</span><br><span class="line"><span class="symbol">682 </span> cd ../logs/</span><br><span class="line"><span class="symbol">683 </span> more catalina.<span class="keyword">out</span> </span><br><span class="line"><span class="symbol">684 </span> cd ../webapps/</span><br><span class="line"><span class="symbol">685 </span> cd myProject</span><br><span class="line"><span class="symbol">686 </span> ll</span><br><span class="line"><span class="symbol">687 </span> cd WEB-INF/</span><br><span class="line"><span class="symbol">688 </span> ll</span><br><span class="line"><span class="symbol">689 </span> cd classes/</span><br><span class="line"><span class="symbol">690 </span> ll</span><br><span class="line"><span class="symbol">691 </span> cd templates/</span><br><span class="line"><span class="symbol">692 </span> ll</span><br><span class="line"><span class="symbol">693 </span> cd js/</span><br><span class="line"><span class="symbol">694 </span> ll</span><br><span class="line"><span class="symbol">695 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">696 </span> ll</span><br><span class="line"><span class="symbol">697 </span> vim <span class="keyword">common</span>.js </span><br><span class="line"><span class="symbol">698 </span> cd ..</span><br><span class="line"><span class="symbol">699 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">700 </span> ll</span><br><span class="line"><span class="symbol">701 </span> cd ..</span><br><span class="line"><span class="symbol">702 </span> cd bin/</span><br><span class="line"><span class="symbol">703 </span> ./shutdown.sh </span><br><span class="line"><span class="symbol">704 </span> ll</span><br><span class="line"><span class="symbol">705 </span> cd apache-tomcat-<span class="number">8.0.23</span></span><br><span class="line"><span class="symbol">706 </span> ll</span><br><span class="line"><span class="symbol">707 </span> cd webapps/</span><br><span class="line"><span class="symbol">708 </span> ll</span><br><span class="line"><span class="symbol">709 </span> rm -rf myProject</span><br><span class="line"><span class="symbol">710 </span> rm -rf myProject.war </span><br><span class="line"><span class="symbol">711 </span> cd ..</span><br><span class="line"><span class="symbol">712 </span> cd work/</span><br><span class="line"><span class="symbol">713 </span> ll</span><br><span class="line"><span class="symbol">714 </span> cd Catalina/</span><br><span class="line"><span class="symbol">715 </span> ll</span><br><span class="line"><span class="symbol">716 </span> cd localhost/</span><br><span class="line"><span class="symbol">717 </span> ll</span><br><span class="line"><span class="symbol">718 </span> rm -rf myProject/</span><br><span class="line"><span class="symbol">719 </span> ll</span><br><span class="line"><span class="symbol">720 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">721 </span> cd ../../../</span><br><span class="line"><span class="symbol">722 </span> ll</span><br><span class="line"><span class="symbol">723 </span> cd ..</span><br><span class="line"><span class="symbol">724 </span> cd </span><br><span class="line"><span class="symbol">725 </span> ll</span><br><span class="line"><span class="symbol">726 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">727 </span> history </span><br><span class="line"><span class="symbol">728 </span> ll</span><br><span class="line"><span class="symbol">729 </span> cd docker/</span><br><span class="line"><span class="symbol">730 </span> ll</span><br><span class="line"><span class="symbol">731 </span> docker <span class="keyword">run</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> springbootdemo4docker</span><br><span class="line"><span class="symbol">732 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">733 </span>  docker build -t springbootdemo4docker .</span><br><span class="line"><span class="symbol">734 </span> ll</span><br><span class="line"><span class="symbol">735 </span> more Dockerfile </span><br><span class="line"><span class="symbol">736 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">737 </span> ll</span><br><span class="line"><span class="symbol">738 </span> docker build -t springbootdemo5docker .</span><br><span class="line"><span class="symbol">739 </span> docker build -t springbootdemo4docker .</span><br><span class="line"><span class="symbol">740 </span> service docker restart</span><br><span class="line"><span class="symbol">741 </span> docker build -t springbootdemo5docker .</span><br><span class="line"><span class="symbol">742 </span> docker images</span><br><span class="line"><span class="symbol">743 </span> docker <span class="keyword">run</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> springbootdemo5docker</span><br><span class="line"><span class="symbol">744 </span> docker rmi <span class="number">05</span>c655fd2bd6</span><br><span class="line"><span class="symbol">745 </span> ps -ef |grep java</span><br><span class="line"><span class="symbol">746 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">2632</span></span><br><span class="line"><span class="symbol">747 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">2874</span></span><br><span class="line"><span class="symbol">748 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">749 </span> cd ..</span><br><span class="line"><span class="symbol">750 </span> ll</span><br><span class="line"><span class="symbol">751 </span> pwd</span><br><span class="line"><span class="symbol">752 </span> ll</span><br><span class="line"><span class="symbol">753 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">754 </span> ll</span><br><span class="line"><span class="symbol">755 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">756 </span> pwd</span><br><span class="line"><span class="symbol">757 </span> ll</span><br><span class="line"><span class="symbol">758 </span> cd docker/</span><br><span class="line"><span class="symbol">759 </span> ll</span><br><span class="line"><span class="symbol">760 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">761 </span> ll</span><br><span class="line"><span class="symbol">762 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">763 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">764 </span> cp ../Mamai-<span class="number">1.0</span>-SNAPSHOT.jar  Mamai-<span class="number">1.0</span>-SNAPSHOT.jar</span><br><span class="line"><span class="symbol">765 </span> ll</span><br><span class="line"><span class="symbol">766 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">767 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">768 </span> cd ..</span><br><span class="line"><span class="symbol">769 </span> ll</span><br><span class="line"><span class="symbol">770 </span> cear</span><br><span class="line"><span class="symbol">771 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">772 </span> ll</span><br><span class="line"><span class="symbol">773 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">774 </span> ll</span><br><span class="line"><span class="symbol">775 </span> tail -<span class="number">300</span>f tempMaima.txt </span><br><span class="line"><span class="symbol">776 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">777 </span> ll</span><br><span class="line"><span class="symbol">778 </span> cp Mamai-<span class="number">1.0</span>-SNAPSHOT.jar ./docker/</span><br><span class="line"><span class="symbol">779 </span> ll</span><br><span class="line"><span class="symbol">780 </span> cd docker/</span><br><span class="line"><span class="symbol">781 </span> ll</span><br><span class="line"><span class="symbol">782 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">783 </span> docker images</span><br><span class="line"><span class="symbol">784 </span> docker start <span class="number">05</span>c655fd2bd6</span><br><span class="line"><span class="symbol">785 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">786 </span> docker build -t springbootdemo6docker .</span><br><span class="line"><span class="symbol">787 </span> docker images</span><br><span class="line"><span class="symbol">788 </span> docker <span class="keyword">run</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> springbootdemo6docker</span><br><span class="line"><span class="symbol">789 </span> docker images</span><br><span class="line"><span class="symbol">790 </span> ll</span><br><span class="line"><span class="symbol">791 </span> cd ..</span><br><span class="line"><span class="symbol">792 </span> ll</span><br><span class="line"><span class="symbol">793 </span> tail -<span class="number">300</span>f tempMaima.txt </span><br><span class="line"><span class="symbol">794 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">795 </span> ll</span><br><span class="line"><span class="symbol">796 </span> cd docker/</span><br><span class="line"><span class="symbol">797 </span> docker images</span><br><span class="line"><span class="symbol">798 </span> docker rmi05c655fd2bd6</span><br><span class="line"><span class="symbol">799 </span> docker rmi <span class="number">05</span>c655fd2bd6</span><br><span class="line"><span class="symbol">800 </span> docker rmi springbootdemo4docker:latest </span><br><span class="line"><span class="symbol">801 </span> docker rmi -f <span class="number">05</span>c655fd2bd6</span><br><span class="line"><span class="symbol">802 </span> docker rmi springbootdemo5docker:latest</span><br><span class="line"><span class="symbol">803 </span> docker rmi -f <span class="number">05</span>c655fd2bd6</span><br><span class="line"><span class="symbol">804 </span> docker images</span><br><span class="line"><span class="symbol">805 </span> ls</span><br><span class="line"><span class="symbol">806 </span> Mamai-<span class="number">1.0</span>-SNAPSHOT.jar.sh <span class="keyword">stop</span></span><br><span class="line"><span class="symbol">807 </span> Mamai-<span class="number">1.0</span>-SNAPSHOT <span class="keyword">stop</span></span><br><span class="line"><span class="symbol">808 </span> Mamai-<span class="number">1.0</span>-SNAPSHOT.jar <span class="keyword">stop</span></span><br><span class="line"><span class="symbol">809 </span> top</span><br><span class="line"><span class="symbol">810 </span> ls</span><br><span class="line"><span class="symbol">811 </span> java -jar Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">812 </span> ls</span><br><span class="line"><span class="symbol">813 </span> ps -ef</span><br><span class="line"><span class="symbol">814 </span> ls</span><br><span class="line"><span class="symbol">815 </span> java -jar Mamai-<span class="number">1.0</span>-SNAPSHOT.jar</span><br><span class="line"><span class="symbol">816 </span> ls</span><br><span class="line"><span class="symbol">817 </span> java -jar Mamai-<span class="number">1.0</span>-SNAPSHOT.jar</span><br><span class="line"><span class="symbol">818 </span> ls</span><br><span class="line"><span class="symbol">819 </span> java -jar Mamai-<span class="number">1.0</span>-SNAPSHOT.jar</span><br><span class="line"><span class="symbol">820 </span> ll</span><br><span class="line"><span class="symbol">821 </span> tail -<span class="number">300</span>f tempMaima.txt </span><br><span class="line"><span class="symbol">822 </span> netstat -lnp|grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">823 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">824 </span> docker ps</span><br><span class="line"><span class="symbol">825 </span> ll</span><br><span class="line"><span class="symbol">826 </span> cd docker/</span><br><span class="line"><span class="symbol">827 </span> ll</span><br><span class="line"><span class="symbol">828 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">829 </span> docker ps</span><br><span class="line"><span class="symbol">830 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">831 </span> ps -ef |grep java</span><br><span class="line"><span class="symbol">832 </span> ps -ef |grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">833 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">834 </span> history </span><br><span class="line"><span class="symbol">835 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">836 </span> cd /</span><br><span class="line"><span class="symbol">837 </span> ll</span><br><span class="line"><span class="symbol">838 </span> cd www/</span><br><span class="line"><span class="symbol">839 </span> ll</span><br><span class="line"><span class="symbol">840 </span> cd server/</span><br><span class="line"><span class="symbol">841 </span> ll</span><br><span class="line"><span class="symbol">842 </span> cd nginx/</span><br><span class="line"><span class="symbol">843 </span> ll</span><br><span class="line"><span class="symbol">844 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">845 </span> ll</span><br><span class="line"><span class="symbol">846 </span> cd bin</span><br><span class="line"><span class="symbol">847 </span> ll</span><br><span class="line"><span class="symbol">848 </span> cd sbin/</span><br><span class="line"><span class="symbol">849 </span> ll</span><br><span class="line"><span class="symbol">850 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">851 </span> ll</span><br><span class="line"><span class="symbol">852 </span> cd .</span><br><span class="line"><span class="symbol">853 </span> cd ..</span><br><span class="line"><span class="symbol">854 </span> cd conf/</span><br><span class="line"><span class="symbol">855 </span> ll</span><br><span class="line"><span class="symbol">856 </span> cd ..</span><br><span class="line"><span class="symbol">857 </span> cd sbin</span><br><span class="line"><span class="symbol">858 </span> ./nginx -c ../conf/nginx.conf</span><br><span class="line"><span class="symbol">859 </span> cd ../conf/</span><br><span class="line"><span class="symbol">860 </span> ll</span><br><span class="line"><span class="symbol">861 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">862 </span> ../sbin/nginx -c nginx.conf</span><br><span class="line"><span class="symbol">863 </span> pwd</span><br><span class="line"><span class="symbol">864 </span> tail -<span class="number">300</span>f nginx.conf</span><br><span class="line"><span class="symbol">865 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">866 </span> cd ..</span><br><span class="line"><span class="symbol">867 </span> cd sbin/</span><br><span class="line"><span class="symbol">868 </span> ./nginx  -s reload</span><br><span class="line"><span class="symbol">869 </span> ll</span><br><span class="line"><span class="symbol">870 </span> cd ..</span><br><span class="line"><span class="symbol">871 </span> ll</span><br><span class="line"><span class="symbol">872 </span> cd logs/</span><br><span class="line"><span class="symbol">873 </span> l</span><br><span class="line"><span class="symbol">874 </span> ll</span><br><span class="line"><span class="symbol">875 </span> tail -<span class="number">300</span>f <span class="keyword">error</span>.<span class="keyword">log</span> </span><br><span class="line"><span class="symbol">876 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">877 </span> cd ..</span><br><span class="line"><span class="symbol">878 </span> ll</span><br><span class="line"><span class="symbol">879 </span> cd ..</span><br><span class="line"><span class="symbol">880 </span> cd </span><br><span class="line"><span class="symbol">881 </span> docker images</span><br><span class="line"><span class="symbol">882 </span> docker image ls</span><br><span class="line"><span class="symbol">883 </span> systemctl daemon-reload</span><br><span class="line"><span class="symbol">884 </span> docker images</span><br><span class="line"><span class="symbol">885 </span> service docker status</span><br><span class="line"><span class="symbol">886 </span> service docker start</span><br><span class="line"><span class="symbol">887 </span> systemctl  docker start</span><br><span class="line"><span class="symbol">888 </span> systemctl docker status</span><br><span class="line"><span class="symbol">889 </span> systemctl restart docker</span><br><span class="line"><span class="symbol">890 </span> systemctl status docker</span><br><span class="line"><span class="symbol">891 </span> docker ps</span><br><span class="line"><span class="symbol">892 </span> docker images</span><br><span class="line"><span class="symbol">893 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">894 </span> docker images</span><br><span class="line"><span class="symbol">895 </span> docker ps -a</span><br><span class="line"><span class="symbol">896 </span> history </span><br><span class="line"><span class="symbol">897 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">898 </span> docker images</span><br><span class="line"><span class="symbol">899 </span> docker ps</span><br><span class="line"><span class="symbol">900 </span> docker ps -a</span><br><span class="line"><span class="symbol">901 </span> docker start gifted_hamilton</span><br><span class="line"><span class="symbol">902 </span> docker ps</span><br><span class="line"><span class="symbol">903 </span> ll</span><br><span class="line"><span class="symbol">904 </span> tail -<span class="number">300</span>f tempMaima.txt </span><br><span class="line"><span class="symbol">905 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">906 </span> history </span><br><span class="line"><span class="symbol">907 </span> ll</span><br><span class="line"><span class="symbol">908 </span> docker ps -a</span><br><span class="line"><span class="symbol">909 </span> docker <span class="keyword">stop</span> gifted_hamilton</span><br><span class="line"><span class="symbol">910 </span> pwd</span><br><span class="line"><span class="symbol">911 </span> ll</span><br><span class="line"><span class="symbol">912 </span> cd docker/</span><br><span class="line"><span class="symbol">913 </span> l</span><br><span class="line"><span class="symbol">914 </span> ll</span><br><span class="line"><span class="symbol">915 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">916 </span> ll</span><br><span class="line"><span class="symbol">917 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">918 </span> ll</span><br><span class="line"><span class="symbol">919 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">920 </span> pwd</span><br><span class="line"><span class="symbol">921 </span> docker ps -a</span><br><span class="line"><span class="symbol">922 </span> ll</span><br><span class="line"><span class="symbol">923 </span> docker start gifted_hamilton</span><br><span class="line"><span class="symbol">924 </span> docker ps -a</span><br><span class="line"><span class="symbol">925 </span> ps -ef |grep java</span><br><span class="line"><span class="symbol">926 </span> ll</span><br><span class="line"><span class="symbol">927 </span> docker ps -a</span><br><span class="line"><span class="symbol">928 </span> docker <span class="keyword">stop</span> gifted_hamilton</span><br><span class="line"><span class="symbol">929 </span> cd docker/</span><br><span class="line"><span class="symbol">930 </span> ll</span><br><span class="line"><span class="symbol">931 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">932 </span> ll</span><br><span class="line"><span class="symbol">933 </span> pwd</span><br><span class="line"><span class="symbol">934 </span> ll</span><br><span class="line"><span class="symbol">935 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">936 </span> docker ps -a</span><br><span class="line"><span class="symbol">937 </span> docker start gifted_hamilton</span><br><span class="line"><span class="symbol">938 </span> docker ps -a</span><br><span class="line"><span class="symbol">939 </span> docker <span class="keyword">stop</span> gifted_hamilton</span><br><span class="line"><span class="symbol">940 </span> docker ps -a</span><br><span class="line"><span class="symbol">941 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">942 </span> docker ps -a</span><br><span class="line"><span class="symbol">943 </span> docker rm gifted_hamilton</span><br><span class="line"><span class="symbol">944 </span> docker ps -a</span><br><span class="line"><span class="symbol">945 </span> docker images</span><br><span class="line"><span class="symbol">946 </span> docker rmi springbootdemo6docker</span><br><span class="line"><span class="symbol">947 </span> docker iamges</span><br><span class="line"><span class="symbol">948 </span> docker images</span><br><span class="line"><span class="symbol">949 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">950 </span> ll</span><br><span class="line"><span class="symbol">951 </span> more Dockerfile </span><br><span class="line"><span class="symbol">952 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">953 </span> docker build -t mamai .</span><br><span class="line"><span class="symbol">954 </span> docker images</span><br><span class="line"><span class="symbol">955 </span> cd ..</span><br><span class="line"><span class="symbol">956 </span> ll</span><br><span class="line"><span class="symbol">957 </span> cd docker/</span><br><span class="line"><span class="symbol">958 </span> ll</span><br><span class="line"><span class="symbol">959 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">960 </span> more Dockerfile </span><br><span class="line"><span class="symbol">961 </span> docker <span class="keyword">run</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> mamai</span><br><span class="line"><span class="symbol">962 </span> docker ps -a</span><br><span class="line"><span class="symbol">963 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">964 </span> ll</span><br><span class="line"><span class="symbol">965 </span> cd .</span><br><span class="line"><span class="symbol">966 </span> c d..</span><br><span class="line"><span class="symbol">967 </span> cd ..</span><br><span class="line"><span class="symbol">968 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">969 </span> ll</span><br><span class="line"><span class="symbol">970 </span> rm -rf Ma</span><br><span class="line"><span class="symbol">971 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">972 </span> ll</span><br><span class="line"><span class="symbol">973 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">974 </span> ll</span><br><span class="line"><span class="symbol">975 </span> rm -rf apache-tomcat-<span class="number">8.0.23</span></span><br><span class="line"><span class="symbol">976 </span> rm -rf apache-tomcat-<span class="number">8.0.23.</span>tar.gz </span><br><span class="line"><span class="symbol">977 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">978 </span> ll</span><br><span class="line"><span class="symbol">979 </span> more install.sh </span><br><span class="line"><span class="symbol">980 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">981 </span> docker ps -a</span><br><span class="line"><span class="symbol">982 </span> docker <span class="keyword">stop</span> agitated_brown</span><br><span class="line"><span class="symbol">983 </span> ll</span><br><span class="line"><span class="symbol">984 </span> cd docker/</span><br><span class="line"><span class="symbol">985 </span> ll</span><br><span class="line"><span class="symbol">986 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">987 </span> ll</span><br><span class="line"><span class="symbol">988 </span> docker  images</span><br><span class="line"><span class="symbol">989 </span> docker ps -a</span><br><span class="line"><span class="symbol">990 </span> docker start agitated_brown</span><br><span class="line"><span class="symbol">991 </span> docker ps -a</span><br><span class="line"><span class="symbol">992 </span> top</span><br><span class="line"><span class="symbol">993 </span> df -h</span><br><span class="line"><span class="symbol">994 </span> top</span><br><span class="line"><span class="symbol">995 </span> ll</span><br><span class="line"><span class="symbol">996 </span> cd docker/</span><br><span class="line"><span class="symbol">997 </span> ll</span><br><span class="line"><span class="symbol">998 </span> more Dockerfile </span><br><span class="line"><span class="symbol">999 </span> history</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> docker </tag>
            
            <tag> 前端 </tag>
            
            <tag> 双色球 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解java虚拟机-线程安全与锁优化</title>
      <link href="/2020/05/26/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%91/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA13/"/>
      <url>/2020/05/26/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%91/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA13/</url>
      
        <content type="html"><![CDATA[<h2 id="深入java虚拟机-第五部分-高效并发"><a href="#深入java虚拟机-第五部分-高效并发" class="headerlink" title="深入java虚拟机-第五部分-高效并发"></a>深入java虚拟机-第五部分-高效并发</h2><h3 id="第13章-线程安全与锁优化"><a href="#第13章-线程安全与锁优化" class="headerlink" title="第13章 线程安全与锁优化"></a>第13章 线程安全与锁优化</h3><p>并发处理 的 广泛应用 是使得 Amdah1定律 代替 摩尔定律 成为 计算机性能发展源动力 的根本原因，也是人类 “压榨” 计算机运算能力 的 最有力武器。</p><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>在 软件业发展 的 初期，程序编写 都是以 算法 为核心的，<br>程序员会把 数据 和 过程 分别作为 独立的部分 来考虑，<br>数据 代表 问题空间 中的 客体，程序代码 则用于 处理这些数据，<br>这种 思维方式 直接站在 计算机的角度 去 抽象问题和解决问题，<br>称为 面向过程 的 编程思想。</p><p>与此同时，<br>面向对象 的 编程思想 是站在 现实世界的角度 去 抽象和解决问题，<br>它把 数据和行为 都看做是 对象的一部分，<br>这样可以让程序员能以 符合现实世界的 思维方式 来 编写和组织程序。</p><p>面向过程 的 编程思想 极大地 提升了 现代软件开发 的 生产效率 和 软件可以达到的规模，<br>但是 现实世界与计算机世界 之间不可避免地 存在一些差异。</p><p>例如，人们很难想象现实中的 对象 在一项工作进行期间，会被不停地中断和切换，对象的属性（数据）可能会在 中断期间 被修改和变“脏”，<br>而这些事件 在计算机世界中 则是很正常的事情。</p><p>有时候，良好的设计原则 不得不向现实做出一些让步，我们必须让 程序 在计算机中 正确无误地运行，<br>然后再考虑如何将 代码组织得更好，让 程序 运行得 更快。</p><p>对于这部分的主题“高效并发”来讲，首先需要保证 并发的正确性，然后在此基础上实现 高效。</p><p>本章先从 如何保证并发的正确性 和 如何实现线程安全讲起。</p><h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p>“线程安全”  这个名称，相信稍有经验的程序员都会听说过，甚至在 代码编写 和 走查的时候 可能还会将会挂在嘴边，<br>但是如何找到一个不太拗口的概念 来定义 线程安全 却不是一件容易的事情，<br>笔者尝试在Google中搜索它的概念，找到的是类似于 “如果一个对象可以安全地被多个线程同时使用，那它就是线程安全的”这样的定义——并不能说它不正确，但是人们无法从中获取到任何有用的信息。</p><p>（像我这种小白，也只是，听过，我可没有说过😶😶😶）</p><p>笔者认为《Java Concurrency In Practice》 的作者 Brian Goetz 对 “线程安全” 有一个比较恰当的定义：<br>“当 多个线程 访问 一个对象时，如果不用考虑这些 线程 在 运行时环境 下的 调度 和 交替执行，也不需要进行 额外的同步，或者在 调用方 进行任何其他的 协调操作，调用这个 对象的行为 都可以获得 正确的结果，那 这个对象 是 线程安全 的”。</p><p>这个定义比较 严谨，它要求 线程安全 的代码 都必须具备一个特征：<br>代码本身 封装 了所有必要的 正确性保障手段（如互斥同步等），<br>令 调用者 无需关心 多线程 的问题，更无须自己采取 任何措施 来 保证多线程的正确调用。</p><p>这点听起来简单，但其实并不容易做到，在大多数场景中，我们都会将这个定义弱化一些，如果把”调用这个对象的行为“限定为”单次调用“，<br>这个定义的其他描述也能够成立的话，我们就可以称它是 线程安全 了，为什么要 弱化 这个定义，现在暂且放下，稍后再详细探讨。</p><h5 id="Java语言中的线程安全"><a href="#Java语言中的线程安全" class="headerlink" title="Java语言中的线程安全"></a>Java语言中的线程安全</h5><p>我们已经有了 线程安全 的一个 抽象定义，<br>那接下来就讨论一下在 java语言 中，线程安全 具体是如何体现的？<br>有哪些操作是 线程安全 的？<br>我们这里讨论的 线程安全，就 限定与 多个线程之间 存在 共享数据访问 这个 前提，<br>因为如果一段代码 根本不会 与其他线程共享数据，那么从 线程安全 的 角度 来看，程序是 串行执行 还是 多线程执行 对它来说是完全没有区别的。</p><p>为了更加 深入地 理解 线程安全，在这里我们可以不把 线程安全 当做一个非真即假 的 二元排他项 来看待，<br>按照 线程安全 的 “安全程度” 由强至弱来排序，我们可以将Java语言中各种操作共享的数据分为以下5类：<br>不可变、绝对线程安全、相对线程安全、线程兼容和线程对立。</p><blockquote><p>这种划分方法也是 Brian Goetz在IBM developWorkers上发表的一篇论文中提出的，<br>这里写 “我们”  纯粹是笔者下笔行文中的语言用法。</p></blockquote><h6 id="1-不可变"><a href="#1-不可变" class="headerlink" title="1.不可变"></a>1.不可变</h6><p>在Java语言中（特指JDK1.5以后，即 Java内存模型 被 修正以后的 Java语言），<br>不可变（Immutable） 的 对象 一定是 线程安全的，<br>无论是 对象的方法 还是 方法的调用者，都不需要再采取 任何的线程安全保障措施，</p><p>在12章我们谈到 final关键字 带来的 可见性 时曾经提到过这一点，<br>只要一个 不可变的对象 被正确地 构建出来（没有发生 this 引用逃逸 的情况），<br>那其外部的 可见状态 永远也不会改变，<br>永远也不会看到它在 多个线程之中 处于 不一致 的状态。</p><p>“不可变” 带来的 安全性 是 最简单和最纯粹的。</p><p>Java语言中，如果 共享数据 是一个基本数据类型，那么只要在 定义时 使用 final关键字 修饰它 就可以保证它是 不可变的。</p><p>如果 共享数据 是一个对象，那就需要保证 对象的行为 不会对其 状态 产生任何影响 才行，</p><p>如果读者还没想明白这句话，不妨想一想 java.lang.String 类的对象，它是一个典型的 不可变对象，<br>我们调用它的 substring()、replace()和concat() 这些方法都 不会影响它 原来的值，只会返回一个新构造的字符串对象。</p><p>保证对象行为 不影响 自己状态的途径 有很多种，<br>其中最简单的就是把对象中 带有状态的变量 都声明为 final，<br>这样在 构造函数 结束之后，它就是 不可变的，<br>例如代码清单13-1中java.lang.Integer 构造函数所示的，<br>它通过将 内部状态变量 value 定义为 final 来保障 状态不变。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 13-1 JDK中Integer类的构造函数</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">/*<span class="strong">*</span></span><br><span class="line"><span class="strong">  *</span> The value of the &lt;code&gt;Integer&lt;/code&gt;.</span><br><span class="line"><span class="code">  * @serial</span></span><br><span class="line"><span class="code">  */</span></span><br><span class="line"><span class="code">  private final int value;</span></span><br><span class="line"></span><br><span class="line"><span class="code">  /**</span></span><br><span class="line"><span class="code">    * Constructs newly allocated &lt;code&gt;Integer&lt;/code&gt; object that</span></span><br><span class="line"><span class="code">    * represents the specified &lt;code&gt;int&lt;/code&gt; value.</span></span><br><span class="line"><span class="code">    *</span></span><br><span class="line"><span class="code">    * @param value the value to be represented by the &lt;code&gt;Integer&lt;/code&gt; object.</span></span><br><span class="line"><span class="code">    *</span></span><br><span class="line"><span class="code">    */</span></span><br><span class="line"><span class="code">    public Integer(int value)&#123;</span></span><br><span class="line"><span class="code">      this.value=value;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>在 Java API 中 符合 不可变要求 的类型，<br>除了上面提到的 String 之外，<br>常用的还有 枚举类型，以及 java.lang.Number的部分子类，<br>如Long和Double等数值包装类型，BigInteger和BigDecimal等大数据类型；</p><p>但同为 Number 的 子类型 的 原子类 AtomicInteger 和 AtomicLong 则并非不可变的，<br>读者不妨看看这两个原子类的源码，想一想为什么。</p><p>(emm，原因是不是那个value没有被标为final？Integer类当中的value被标记为final了，而AtomicInteger以及AtomicLong里面的value都没有被标记为final)</p><p>AtomicInteger类代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 AtomicInteger类</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Written by Doug Lea with assistance from members of JCP JSR-166</span></span><br><span class="line"><span class="comment"> * Expert Group and released to the public domain, as explained at</span></span><br><span class="line"><span class="comment"> * http://creativecommons.org/publicdomain/zero/1.0/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">package java.util.concurrent.atomic;</span><br><span class="line"><span class="keyword">import</span> java.util.function.IntUnaryOperator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.IntBinaryOperator;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>An &#123;@code int&#125; value that may be updated atomically.  See </span>the</span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>&#123;@link java.util.concurrent.atomic&#125; package specification for</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>description of </span>the<span class="markdown"> properties of atomic variables. An</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>&#123;@code AtomicInteger&#125; is used in applications </span>such<span class="markdown"> as atomically</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>incremented counters, and cannot be used as </span>a<span class="markdown"> replacement for </span>an</span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>&#123;@link java.lang.Integer&#125;. However, this class does extend</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>&#123;@code Number&#125; to allow uniform access by tools and utilities that</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>deal with numerically-based classes.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> *</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@since 1.5</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@author Doug Lea</span></span></span><br><span class="line"><span class="comment"><span class="markdown">*/</span></span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    private <span class="keyword">static</span> <span class="keyword">final</span> long serialVersionUID = <span class="number">6214790243416807050</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class="line">    private <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    private <span class="keyword">static</span> <span class="keyword">final</span> long valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredField</span>("<span class="title">value</span>"));</span></span><br><span class="line"><span class="class">        &#125; <span class="title">catch</span> (<span class="title">Exception</span> <span class="title">ex</span>) </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private volatile <span class="built_in">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Creates </span>a<span class="markdown"> new AtomicInteger with </span>the<span class="markdown"> given initial value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param initialValue </span>the<span class="markdown"> initial value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public AtomicInteger(<span class="built_in">int</span> initialValue) &#123;</span><br><span class="line">        value = initialValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Creates </span>a<span class="markdown"> new AtomicInteger with initial value &#123;@code 0&#125;.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public AtomicInteger() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Gets </span>the<span class="markdown"> current value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> current value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Sets to </span>the<span class="markdown"> given value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param newValue </span>the<span class="markdown"> new value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="keyword">void</span> <span class="keyword">set</span>(<span class="built_in">int</span> newValue) &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Eventually sets to </span>the<span class="markdown"> given value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param newValue </span>the<span class="markdown"> new value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@since 1.6</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="keyword">void</span> lazySet(<span class="built_in">int</span> newValue) &#123;</span><br><span class="line">        unsafe.putOrderedInt(<span class="keyword">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically sets to </span>the<span class="markdown"> given value and returns </span>the<span class="markdown"> old value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param newValue </span>the<span class="markdown"> new value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> previous value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> getAndSet(<span class="built_in">int</span> newValue) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndSetInt(<span class="keyword">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically sets </span>the<span class="markdown"> value to </span>the<span class="markdown"> given updated value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>if </span>the<span class="markdown"> current value &#123;@code ==&#125; </span>the<span class="markdown"> expected value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param expect </span>the<span class="markdown"> expected value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param update </span>the<span class="markdown"> new value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return &#123;@code true&#125; if successful. False return indicates that</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span></span>the<span class="markdown"> actual value was not equal to </span>the<span class="markdown"> expected value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> boolean compareAndSet(<span class="built_in">int</span> expect, <span class="built_in">int</span> update) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically sets </span>the<span class="markdown"> value to </span>the<span class="markdown"> given updated value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>if </span>the<span class="markdown"> current value &#123;@code ==&#125; </span>the<span class="markdown"> expected value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;</span></span></span>a<span class="markdown"><span class="xml"> href="package-summary.html#weakCompareAndSet"&gt;</span>May fail</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>spuriously and does not provide ordering guarantees<span class="xml"><span class="tag">&lt;/</span></span></span>a<span class="markdown"><span class="xml">&gt;</span>, </span>so<span class="markdown"> is</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>only rarely </span>an<span class="markdown"> appropriate alternative to &#123;@code compareAndSet&#125;.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param expect </span>the<span class="markdown"> expected value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param update </span>the<span class="markdown"> new value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return &#123;@code true&#125; if successful</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> boolean weakCompareAndSet(<span class="built_in">int</span> expect, <span class="built_in">int</span> update) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically increments by one </span>the<span class="markdown"> current value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> previous value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> getAndIncrement() &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically decrements by one </span>the<span class="markdown"> current value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> previous value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> getAndDecrement() &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically adds </span>the<span class="markdown"> given value to </span>the<span class="markdown"> current value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param delta </span>the<span class="markdown"> value to add</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> previous value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> getAndAdd(<span class="built_in">int</span> delta) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically increments by one </span>the<span class="markdown"> current value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> updated value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> incrementAndGet() &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically decrements by one </span>the<span class="markdown"> current value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> updated value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> decrementAndGet() &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">-1</span>) - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically adds </span>the<span class="markdown"> given value to </span>the<span class="markdown"> current value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param delta </span>the<span class="markdown"> value to add</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> updated value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> addAndGet(<span class="built_in">int</span> delta) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, delta) + delta;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically updates </span>the<span class="markdown"> current value with </span>the<span class="markdown"> results of</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>applying </span>the<span class="markdown"> given function, returning </span>the<span class="markdown"> previous value. The</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>function </span>should<span class="markdown"> be side-effect-free, since it may be re-applied</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>when attempted updates fail due to contention among threads.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param updateFunction </span>a<span class="markdown"> side-effect-free function</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> previous value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@since 1.8</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> getAndUpdate(IntUnaryOperator updateFunction) &#123;</span><br><span class="line">        <span class="built_in">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = <span class="keyword">get</span>();</span><br><span class="line">            next = updateFunction.applyAsInt(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically updates </span>the<span class="markdown"> current value with </span>the<span class="markdown"> results of</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>applying </span>the<span class="markdown"> given function, returning </span>the<span class="markdown"> updated value. The</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>function </span>should<span class="markdown"> be side-effect-free, since it may be re-applied</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>when attempted updates fail due to contention among threads.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param updateFunction </span>a<span class="markdown"> side-effect-free function</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> updated value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@since 1.8</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> updateAndGet(IntUnaryOperator updateFunction) &#123;</span><br><span class="line">        <span class="built_in">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = <span class="keyword">get</span>();</span><br><span class="line">            next = updateFunction.applyAsInt(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically updates </span>the<span class="markdown"> current value with </span>the<span class="markdown"> results of</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>applying </span>the<span class="markdown"> given function to </span>the<span class="markdown"> current and given values,</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>returning </span>the<span class="markdown"> previous value. The function </span>should<span class="markdown"> be</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>side-effect-free, since it may be re-applied when attempted</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>updates fail due to contention among threads.  The function</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>is applied with </span>the<span class="markdown"> current value as its first argument,</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>and </span>the<span class="markdown"> given update as </span>the<span class="markdown"> second argument.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param x </span>the<span class="markdown"> update value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param accumulatorFunction </span>a<span class="markdown"> side-effect-free function of two arguments</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> previous value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@since 1.8</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> getAndAccumulate(<span class="built_in">int</span> x,</span><br><span class="line">                                      IntBinaryOperator accumulatorFunction) &#123;</span><br><span class="line">        <span class="built_in">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = <span class="keyword">get</span>();</span><br><span class="line">            next = accumulatorFunction.applyAsInt(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Atomically updates </span>the<span class="markdown"> current value with </span>the<span class="markdown"> results of</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>applying </span>the<span class="markdown"> given function to </span>the<span class="markdown"> current and given values,</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>returning </span>the<span class="markdown"> updated value. The function </span>should<span class="markdown"> be</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>side-effect-free, since it may be re-applied when attempted</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>updates fail due to contention among threads.  The function</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>is applied with </span>the<span class="markdown"> current value as its first argument,</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>and </span>the<span class="markdown"> given update as </span>the<span class="markdown"> second argument.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param x </span>the<span class="markdown"> update value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@param accumulatorFunction </span>a<span class="markdown"> side-effect-free function of two arguments</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> updated value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@since 1.8</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> accumulateAndGet(<span class="built_in">int</span> x,</span><br><span class="line">                                      IntBinaryOperator accumulatorFunction) &#123;</span><br><span class="line">        <span class="built_in">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = <span class="keyword">get</span>();</span><br><span class="line">            next = accumulatorFunction.applyAsInt(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Returns </span>the<span class="markdown"> String representation of </span>the<span class="markdown"> current value.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@return </span>the<span class="markdown"> String representation of </span>the<span class="markdown"> current value</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="built_in">String</span> toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.toString(<span class="keyword">get</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Returns </span>the<span class="markdown"> value of this &#123;@code AtomicInteger&#125; as </span>an<span class="markdown"> &#123;@code int&#125;.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="built_in">int</span> intValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Returns </span>the<span class="markdown"> value of this &#123;@code AtomicInteger&#125; as </span>a<span class="markdown"> &#123;@code long&#125;</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>after </span>a<span class="markdown"> widening primitive conversion.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@jls 5.1.2 Widening Primitive Conversions</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public long longValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> (long)<span class="keyword">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Returns </span>the<span class="markdown"> value of this &#123;@code AtomicInteger&#125; as </span>a<span class="markdown"> &#123;@code float&#125;</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>after </span>a<span class="markdown"> widening primitive conversion.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@jls 5.1.2 Widening Primitive Conversions</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public float floatValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> (float)<span class="keyword">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Returns </span>the<span class="markdown"> value of this &#123;@code AtomicInteger&#125; as </span>a<span class="markdown"> &#123;@code double&#125;</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>after </span>a<span class="markdown"> widening primitive conversion.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@jls 5.1.2 Widening Primitive Conversions</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="built_in">double</span> doubleValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">double</span>)<span class="keyword">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>AtomicLong类代码：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 AtomicLong类</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Written by Doug Lea with assistance from members of JCP JSR-166</span></span><br><span class="line"><span class="comment"> * Expert Group and released to the public domain, as explained at</span></span><br><span class="line"><span class="comment"> * http://creativecommons.org/publicdomain/zero/1.0/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> java.util.concurrent.atomic;</span><br><span class="line"><span class="keyword">import</span> java.util.function.LongUnaryOperator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.LongBinaryOperator;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A &#123;<span class="doctag">@code</span> long&#125; value that may be updated atomically.  See the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> java.util.concurrent.atomic&#125; package specification for</span></span><br><span class="line"><span class="comment"> * description of the properties of atomic variables. An</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> AtomicLong&#125; is used in applications such as atomically</span></span><br><span class="line"><span class="comment"> * incremented sequence numbers, and cannot be used as a replacement</span></span><br><span class="line"><span class="comment"> * for a &#123;<span class="doctag">@link</span> java.lang.Long&#125;. However, this class does extend</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Number&#125; to allow uniform access by tools and utilities that</span></span><br><span class="line"><span class="comment"> * deal with numerically-based classes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Doug Lea</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicLong</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1927816293512124184</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup to use Unsafe.compareAndSwapLong for updates</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Records whether the underlying JVM supports lockless</span></span><br><span class="line"><span class="comment">     * compareAndSwap for longs. While the Unsafe.compareAndSwapLong</span></span><br><span class="line"><span class="comment">     * method works in either case, some constructions should be</span></span><br><span class="line"><span class="comment">     * handled at Java level to avoid locking user-visible locks.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> VM_SUPPORTS_LONG_CAS = VMSupportsCS8();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns whether underlying JVM supports lockless CompareAndSet</span></span><br><span class="line"><span class="comment">     * for longs. Called only once and cached in VM_SUPPORTS_LONG_CAS.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> native <span class="keyword">boolean</span> VMSupportsCS8();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicLong<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredField</span>("<span class="title">value</span>"));</span></span><br><span class="line"><span class="class">        &#125; <span class="title">catch</span> (<span class="title">Exception</span> <span class="title">ex</span>) &#123;</span> <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new AtomicLong with the given initial value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialValue the initial value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> AtomicLong(<span class="keyword">long</span> initialValue) &#123;</span><br><span class="line">        value = initialValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new AtomicLong with initial value &#123;<span class="doctag">@code</span> 0&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> AtomicLong() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the current value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> get() &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets to the given value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newValue the new value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> set(<span class="keyword">long</span> newValue) &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Eventually sets to the given value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newValue the new value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> lazySet(<span class="keyword">long</span> newValue) &#123;</span><br><span class="line">        unsafe.putOrderedLong(<span class="keyword">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically sets to the given value and returns the old value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newValue the new value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> getAndSet(<span class="keyword">long</span> newValue) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndSetLong(<span class="keyword">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically sets the value to the given updated value</span></span><br><span class="line"><span class="comment">     * if the current value &#123;<span class="doctag">@code</span> ==&#125; the expected value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expect the expected value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> update the new value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if successful. False return indicates that</span></span><br><span class="line"><span class="comment">     * the actual value was not equal to the expected value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> compareAndSet(<span class="keyword">long</span> expect, <span class="keyword">long</span> update) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapLong(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically sets the value to the given updated value</span></span><br><span class="line"><span class="comment">     * if the current value &#123;<span class="doctag">@code</span> ==&#125; the expected value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;a href="package-summary.html#weakCompareAndSet"&gt;May fail</span></span><br><span class="line"><span class="comment">     * spuriously and does not provide ordering guarantees&lt;/a&gt;, so is</span></span><br><span class="line"><span class="comment">     * only rarely an appropriate alternative to &#123;<span class="doctag">@code</span> compareAndSet&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expect the expected value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> update the new value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if successful</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> weakCompareAndSet(<span class="keyword">long</span> expect, <span class="keyword">long</span> update) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapLong(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically increments by one the current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> getAndIncrement() &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>L);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically decrements by one the current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> getAndDecrement() &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="keyword">this</span>, valueOffset, <span class="number">-1</span>L);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically adds the given value to the current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta the value to add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> getAndAdd(<span class="keyword">long</span> delta) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="keyword">this</span>, valueOffset, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically increments by one the current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the updated value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> incrementAndGet() &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>L) + <span class="number">1</span>L;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically decrements by one the current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the updated value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> decrementAndGet() &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="keyword">this</span>, valueOffset, <span class="number">-1</span>L) - <span class="number">1</span>L;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically adds the given value to the current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta the value to add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the updated value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> addAndGet(<span class="keyword">long</span> delta) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="keyword">this</span>, valueOffset, delta) + delta;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically updates the current value with the results of</span></span><br><span class="line"><span class="comment">     * applying the given function, returning the previous value. The</span></span><br><span class="line"><span class="comment">     * function should be side-effect-free, since it may be re-applied</span></span><br><span class="line"><span class="comment">     * when attempted updates fail due to contention among threads.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateFunction a side-effect-free function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> getAndUpdate(LongUnaryOperator updateFunction) &#123;</span><br><span class="line">        <span class="keyword">long</span> prev, next;</span><br><span class="line">        do &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = updateFunction.applyAsLong(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically updates the current value with the results of</span></span><br><span class="line"><span class="comment">     * applying the given function, returning the updated value. The</span></span><br><span class="line"><span class="comment">     * function should be side-effect-free, since it may be re-applied</span></span><br><span class="line"><span class="comment">     * when attempted updates fail due to contention among threads.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateFunction a side-effect-free function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the updated value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> updateAndGet(LongUnaryOperator updateFunction) &#123;</span><br><span class="line">        <span class="keyword">long</span> prev, next;</span><br><span class="line">        do &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = updateFunction.applyAsLong(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically updates the current value with the results of</span></span><br><span class="line"><span class="comment">     * applying the given function to the current and given values,</span></span><br><span class="line"><span class="comment">     * returning the previous value. The function should be</span></span><br><span class="line"><span class="comment">     * side-effect-free, since it may be re-applied when attempted</span></span><br><span class="line"><span class="comment">     * updates fail due to contention among threads.  The function</span></span><br><span class="line"><span class="comment">     * is applied with the current value as its first argument,</span></span><br><span class="line"><span class="comment">     * and the given update as the second argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x the update value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accumulatorFunction a side-effect-free function of two arguments</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> getAndAccumulate(<span class="keyword">long</span> x,</span><br><span class="line">                                       LongBinaryOperator accumulatorFunction) &#123;</span><br><span class="line">        <span class="keyword">long</span> prev, next;</span><br><span class="line">        do &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = accumulatorFunction.applyAsLong(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically updates the current value with the results of</span></span><br><span class="line"><span class="comment">     * applying the given function to the current and given values,</span></span><br><span class="line"><span class="comment">     * returning the updated value. The function should be</span></span><br><span class="line"><span class="comment">     * side-effect-free, since it may be re-applied when attempted</span></span><br><span class="line"><span class="comment">     * updates fail due to contention among threads.  The function</span></span><br><span class="line"><span class="comment">     * is applied with the current value as its first argument,</span></span><br><span class="line"><span class="comment">     * and the given update as the second argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x the update value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accumulatorFunction a side-effect-free function of two arguments</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the updated value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> accumulateAndGet(<span class="keyword">long</span> x,</span><br><span class="line">                                       LongBinaryOperator accumulatorFunction) &#123;</span><br><span class="line">        <span class="keyword">long</span> prev, next;</span><br><span class="line">        do &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = accumulatorFunction.applyAsLong(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the String representation of the current value.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the String representation of the current value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.toString(get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value of this &#123;<span class="doctag">@code</span> AtomicLong&#125; as an &#123;<span class="doctag">@code</span> int&#125;</span></span><br><span class="line"><span class="comment">     * after a narrowing primitive conversion.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@jls</span> 5.1.3 Narrowing Primitive Conversions</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> intValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value of this &#123;<span class="doctag">@code</span> AtomicLong&#125; as a &#123;<span class="doctag">@code</span> long&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> longValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value of this &#123;<span class="doctag">@code</span> AtomicLong&#125; as a &#123;<span class="doctag">@code</span> float&#125;</span></span><br><span class="line"><span class="comment">     * after a widening primitive conversion.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@jls</span> 5.1.2 Widening Primitive Conversions</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> floatValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">float</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value of this &#123;<span class="doctag">@code</span> AtomicLong&#125; as a &#123;<span class="doctag">@code</span> double&#125;</span></span><br><span class="line"><span class="comment">     * after a widening primitive conversion.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@jls</span> 5.1.2 Widening Primitive Conversions</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> doubleValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h6 id="2-绝对线程安全"><a href="#2-绝对线程安全" class="headerlink" title="2.绝对线程安全"></a>2.绝对线程安全</h6><p>绝对的 线程安全 完全满足 Brian Goetz 给出的 线程安全 的定义，<br>这个 定义 其实是很 严格的，<br>一个类 要达到 “不管 运行时环境 如何， 调用者 都不需要 任何额外的 同步措施” 通常需要付出很大的，甚至有时候是不切实际的代价。</p><p>在 Java API中 标注自己是 线程安全的类，大多数都不是 绝对的线程安全。</p><p>我们可以通过 Java API中 一个不是 “绝对线程安全” 的线程安全类 来看看这里的 “绝对” 是什么意思。</p><p>如果说 java.util.Vector 是一个 线程安全 的 容器，<br>相信所有的Java程序员对此都不会有异议，因为它的 add()、get()和size() 这类方法都是被 synchronized 修饰的，<br>尽管这样 效率很低，但确实是 安全的。</p><p>但是，即使它 所有的方法 都被 修饰成 同步，也不意味着 调用它的时候永远都不需要 同步手段了，<br>请看一下代码清单13-2中的测试代码。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 <span class="number">13</span><span class="number">-2</span> 对Vector线程安全的测试</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Vector&lt;Integer&gt; <span class="built_in">vector</span> = <span class="keyword">new</span> Vector&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">      <span class="built_in">vector</span>.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Thread removeThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>()&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">vector</span>.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="built_in">vector</span>.<span class="built_in">remove</span>(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  Thread printThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>()&#123;</span><br><span class="line">      <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">vector</span>.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>((<span class="built_in">vector</span>.<span class="built_in">get</span>(i)));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  removeThread.start();</span><br><span class="line">  printThread.start();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//不要同时产生过多的线程，否则会导致操作系统假死</span></span><br><span class="line">  <span class="keyword">while</span>(Thread.activeCount() &gt; <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"Thread-132"</span> java.lang.ArrayIndexOutOfBoundsException:</span><br><span class="line">Array index out <span class="keyword">of</span> range:<span class="number">17</span></span><br><span class="line">  at java.util.<span class="module-access"><span class="module"><span class="identifier">Vector</span>.</span></span>remove(<span class="module-access"><span class="module"><span class="identifier">Vector</span>.</span></span>java:<span class="number">777</span>)</span><br><span class="line">  at org.fenixsoft.mulithread.<span class="module-access"><span class="module"><span class="identifier">VectorTest$1</span>.</span></span>run(<span class="module-access"><span class="module"><span class="identifier">VectorTest</span>.</span></span>java:<span class="number">21</span>)</span><br><span class="line">  at java.lang.<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>run(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>java:<span class="number">662</span>)</span><br></pre></td></tr></table></figure><p>很明显，尽管这里使用到的 Vector的get()、remove()和size() 方法都是 同步的，<br>但是在 多线程 的环境下，如果不在 方法调用端 做额外的同步措施 的话，<br>使用这段代码 仍然是不安全的，因为如果另一个线程 恰好在错误的时间里 删除了一个元素，<br>导致序号 i 已经不再可用的话，<br>再用 i 访问数组就会 抛出一个ArrayIndexOutOfBoundsException</p><p>如果要保证这段代码能正确执行下去，我们不得不把 removeThread和printThread 的定义改成如代码清单13-3所示的样子。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 <span class="number">13</span><span class="number">-3</span> 必须加入同步 以保证Vector访问的线程安全性</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">Thread removeThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">  @Override</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>()&#123;</span><br><span class="line">    synchronized(<span class="built_in">vector</span>)&#123;</span><br><span class="line">      <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">vector</span>.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="built_in">vector</span>.<span class="built_in">remove</span>(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Thread printThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">  @Override</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>()&#123;</span><br><span class="line">    synchronized(<span class="built_in">vector</span>)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">vector</span>.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>((<span class="built_in">vector</span>.<span class="built_in">get</span>(i)));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h6 id="3-相对线程安全"><a href="#3-相对线程安全" class="headerlink" title="3.相对线程安全"></a>3.相对线程安全</h6><p>相对的 线程安全 就是我们 通常意义上 所讲的 线程安全，<br>它需要 保证 对这个对象 单独的操作 是 线程安全的，<br>我们在 调用的时候 不需要做 额外的保障措施，但是对于一些 特定顺序 的 连续调用，<br>就可能需要在 调用端 使用 额外的同步手段 来保证 调用的正确性。</p><p>上面代码清单13-2和代码清单13-3就是 相对线程安全的 明显的 案例。</p><p>在Java语言中，大部分的 线程安全类 都属于这种类型，例如 Vector、HashTable、Collections的synchronizedCollection() 方法包装的集合 等。</p><h6 id="4-线程兼容"><a href="#4-线程兼容" class="headerlink" title="4.线程兼容"></a>4.线程兼容</h6><p>线程兼容 是指 对象本身 并不是 线程安全的，<br>但是可以通过在 调用端 正确地 使用 同步手段 来保证对象 在并发环境中 可以安全地使用，<br>我们平常说 一个类不是线程安全的，绝大多数时候指的是这一种情况。</p><p>Java API中大部分的类 都是属于 线程兼容的，如与前面的 Vector和HashTable 相对应的集合类 ArrayList和HashMap 等。</p><h6 id="5-线程对立"><a href="#5-线程对立" class="headerlink" title="5.线程对立"></a>5.线程对立</h6><p>线程对立 是指无论 调用端 是否采取了 同步措施，<br>都无法在 多线程环境中 并发使用的代码。</p><p>由于Java语言天生就具备 多线程特性，线程对立 这种 排斥多线程的代码 时很少出现的，而且通常都是 有害的，应当尽量避免。</p><p>一个线程对立 的例子是 Thread 类的 suspend() 和 resume() 方法，<br>如果有两个线程 同时持有一个线程对象，一个尝试去中断线程，另一个尝试去恢复线程，<br>如果并发进行的话，无论调用时 是否进行了同步，目标线程都是存在 死锁风险 的，<br>如果 suspend() 中断的线程 就是 即将要执行 resume() 的那个线程，那就肯定要产生 死锁 了。</p><p>也正是由于这个原因， suspend() 和 resume() 方法已经被 JDK 声明废弃（@Deprecated）了。</p><p>常见的 线程对立 的操作还有 System.setIn()、System.setOut() 和 System.runFinalizersOnExit()等。</p><h5 id="线程安全的实现方法"><a href="#线程安全的实现方法" class="headerlink" title="线程安全的实现方法"></a>线程安全的实现方法</h5><p>了解了 什么是线程安全 之后，紧接着的一个问题就是我们应该 如何实现线程安全，<br>这听起来似乎是一件由代码如何编写来决定的事情，确实，如何实现线程安全 与 代码编写 有很大的关系，<br>但 虚拟机 提供的 同步和锁机制 也起到了非常重要的作用。</p><p>本节中，代码编写如何实现线程安全 和 虚拟机如何实现同步与锁 这两者都会有所涉及，相对而言更偏重后者一些，<br>只要读者了解了 虚拟机线程安全手段 的运作过程，自己去思考代码如何编写并不是一件困难的事情。</p><p>（周大大，你是认真的吗？😭😭😭 说出这句话的时候，考虑过像我这种小白的感受吗？🙃🙃🙃）</p><h6 id="1-互斥同步"><a href="#1-互斥同步" class="headerlink" title="1.互斥同步"></a>1.互斥同步</h6><p>互斥同步（Mutual Exclusion &amp; Synchronization） 是常见的一种 并发正确性保障手段。</p><p>同步 是指在 多个线程 并发访问 共享数据时，保证 共享数据 在同一个时刻 只被一个（或者是一些，使用信号量的时候）线程使用。</p><p>而 互斥 是 实现同步 的 一种手段，<br>临界区（Critical Section）、互斥量（Mutex）和信号量（Semaphore）都是主要的 互斥实现方式。</p><p>因此，在这4个字里面，互斥 是 因， 同步 是 果；互斥 是 方法，同步 是 目的。</p><p>在 Java 中，最基本的 同步互斥 手段就是 synchronized关键字，<br>synchronized关键字 经过 编译 之后， 会在 同步块 的前后 分别形成 monitorenter和monitorexit 这两个字节码指令，<br>这两个字节码 都需要一个 reference 类型的参数来指明要 锁定和解锁 的对象。</p><p>如果Java程序中的 synchronized明确指定了 对象参数，那就是 这个对象的reference；<br>如果没有明确指定，那就根据 synchronized 修饰的是实例方法还是类方法，去取对应的 对象实例 或 Class对象 来作为 锁对象。</p><p>根据 虚拟机规范 的要求，<br>在 执行 monitorenter 指令时，<br>首先 要尝试 获取 对象的锁。</p><p>如果 这个对象 没被 锁定，<br>或者 当前线程 已经拥有了 那个对象的锁，<br>把 锁 的 计数器 加1，<br>相应的，<br>在 执行 monitorexit 指令时 会将 锁计数器 减1，<br>当计数器为0时，锁 就 释放。</p><p>如果 获取 对象锁 失败，那 当前线程 就要 阻塞等待，直到 对象锁 被 另外一个线程 释放为止。</p><p>在 虚拟机规范 对 monitorenter和monitorexit 的行为描述中，有两点是需要特别注意的。</p><p>首先，synchronized同步块 对 同一条线程 来说 是可重入的，不会出现 自己把自己 锁死的问题。</p><p>其次，同步块 在 已进入的线程 执行完之前，会 阻塞 后面其他线程的进入。</p><p>第12章讲过，Java的线程 是映射到 操作系统 的 原生线程 之上的，如果要 阻塞或唤醒 一个线程，都需要 操作系统来帮忙完成，<br>这就需要从 用户态 转换到 核心态 中，因此 状态转换 需要耗费 很多的处理器时间。</p><p>对于 代码简单的 同步块（如被 synchronized修饰的 getter() 或 setter() 方法），<br>状态转换 消耗的时间 有可能比 用户代码 执行的时间 还要长。</p><p>所以 synchronized 是Java语言中一个 重量级（Heavyweight）的操作，有经验的程序员都会在 确实必要 的情况下 才使用这种操作。</p><p>而 虚拟机本身 也会进行一些 优化，<br>譬如在通知 操作系统阻塞线程 之前 加入一段 自旋等待过程，避免频繁地 切入到 核心态 之中。</p><p>除了 synchronized 之外，我们还可以使用 java.util.concurrent(下文称J.U.C) 包中的 重入锁（ReentrantLock） 来 实现同步，<br>在基本用法上， ReentrantLock与synchronized 很相似，<br>它们都具备一样的 线程重入特性，只是代码写法上有点区别，<br>一个表现为 API层面的 互斥锁（ lock()和unlock()方法 配合 try/finally语句块 来完成），<br>另一个表现为 原生语法层面的互斥锁。</p><p>不过，相比 synchronized，ReentrantLock 增加了一些 高级功能，<br>主要有以下3项：<br>等待可中断、可实现公平锁、以及 锁可以绑定多个条件。</p><p>等待可中断 是指 当持有锁的线程 长期不释放锁 的时候，正在 等待的线程 可以选择放弃等待，改为处理其他事情，可中断特性 对处理执行时间非常长的 同步块 很有帮助。</p><p>公平锁 是指 多个线程 在等待 同一个锁 时，必须按照 申请锁 的时间顺序 来依次 获得锁；<br>而 非公平锁 则不保证 这一点，<br>在 锁 被释放时，任何一个 等待锁的线程 都有机会 获得锁。<br>synchronized 中 的 锁 是非公平的，ReentrantLock 默认情况下  也是非公平的，但可以通过 带布尔值 的 构造函数 要求使用 公平锁。</p><p>锁绑定多个条件 是指 一个ReentrantLock对象 可以同时 绑定多个Condition对象，<br>而在 synchronized中， 锁对象 的 wait()和notify()或notifyAll()方法 可以实现一个 隐含的条件，<br>如果要和 多于一个的条件关联的时候， 就不得不 额外地添加一个锁，<br>而 ReentrantLock 则无需这样做，只需要 多次调用 newCondition()方法 即可。</p><p>如果需要使用上述功能，选用 ReentrantLock 是一个很好的选择，<br>那如果 是基于 性能考虑呢？<br>关于 synchronized和ReentrantLock 的 性能问题，<br>Brian Goetz对这两种锁在 JDK1.5与单核处理器，以及 JDK1.5与双Xeon处理器 环境下做了一组 吞吐量对比的实验，实验结果如图13-1和图13-2所示。</p><blockquote><p>本例中的数据及图片来源于 Brian Goetz 为 IBM developerWorks 撰写的论文：《Java theory and practice:More flexible, scalable locking in JDK5.0》，<br>原文地址是：<a href="http://www.ibm.com/developerworks/java/library/j-jtp10264/?S_TACT=" target="_blank" rel="noopener">http://www.ibm.com/developerworks/java/library/j-jtp10264/?S_TACT=</a> 105AGX53&amp;S_CMP=cn-a-j。</p></blockquote><p>（该链接有效，但是，我看的很是艰难😭😭😭😭救救这苦命的孩子吧，就像当初接入paypal支付🙃🙃🙃🙃）</p><p>从图13-1和图13-2可以看出，<br>多线程环境下 synchronized的吞吐量下降得 非常严重，<br>而 ReentrantLock 则能基本保持在同一个 比较稳定的水平 上。</p><p>与其说 ReentrantLock 性能好，还不如说 synchronized 还有非常大的优化余地。</p><p>后续的技术发展也证明了这一点，JDK1.6中加入了很多针对 锁的优化措施（13.3节我们就会讲解这些 优化措施），<br>JDK1.6发布之后，人们就发现 synchronized与ReentrantLock 的 性能 基本上是 完全持平 了。</p><p>因此，如果读者的程序 是使用 JDK1.6 或以上 部署 的话，<br>性能因素 就不再是 选择ReentrantLock 的理由了，<br>虚拟机 在 未来的性能改进中 肯定也会更加偏向于 原生的synchronized，<br>所以还是提倡在 synchronized 能实现需求的情况下，优先考虑使用 synchronized 来进行 同步。</p><h6 id="2-非阻塞同步"><a href="#2-非阻塞同步" class="headerlink" title="2.非阻塞同步"></a>2.非阻塞同步</h6><p>互斥同步 最主要的问题 就是 进行线程 阻塞和唤醒 所带来的的 性能问题，<br>因此这种 同步也称为 阻塞同步（Blocking Synchronization）。</p><p>从 处理问题的方式 上说，<br>互斥同步 属于一种 悲观的 并发策略，总是认为 只要不去做 正确的 同步措施（例如加锁），那就肯定会出现问题，<br>无论 共享数据 是否真的会出现竞争，它都要 进行加锁<br>（这里讨论的是 概念模型，实际上 虚拟机 会优化很大一部分 不必要的 加锁）、<br>用户态和心态转换、维护锁计数器 和 检查 是否有 被阻塞的线程 需要唤醒 等操作。</p><p>（这也就是所谓的 总有刁民想害朕 了）</p><p>随着 硬件指令集 的发展，我们有了另外一个选择：基于 冲突检测 的 乐观并发策略，<br>通俗地说，就是先进行操作，<br>如果没有其他线程 争用共享数据，那操作就成功了；<br>如果 共享数据 有争用，产生了 冲突，那就再采取其他的 补偿措施（最常见的补偿措施就是 不断地重试，直到成功为止），<br>这种 乐观的并发策略 的许多实现 都不需要把 线程挂起，因此这种 同步操作 称为 非阻塞同步（Non-Blocking Synchronization）。</p><p>为什么笔者说使用 乐观并发策略 需要 “硬件指令集的发展” 才能进行呢？</p><p>因为我们需要 操作和冲突检测 这两个步骤 具备 原子性，靠什么来保证呢？</p><p>如果这里 再使用 互斥同步 来保证就失去意义了，所以我们只能靠 硬件 来完成这件事情，<br>硬件 保证一个从 语义 上看起来需要多次操作的性能 只通过 一条处理器指令 就能完成，这类指令常用的有：</p><p>(我大概一辈子也用不到这些个东西)</p><ul><li>测试并设置（Test-and-Set）</li><li>获取并增加（Fetch-and-Increment）</li><li>交换（Swap）</li><li>比较并交换（Compare-and-Swap，下文称 CAS）</li><li>加载链接/条件存储（Load-Linked/Store-Conditional，下文称LL/SC）</li></ul><p>(但是还是得努力去试试。不怕一万就怕万一。)</p><p>其中，前面的3条 是20世纪就已经存在于 大多数指令集之中的 处理器指令，</p><p>后面的两条是 现代处理器 新增的，而且这两条指令的 目的和功能 是类似的。</p><p>在 IA64、x86 指令集 中有 cmpxchg指令 完成 CAS功能，<br>在 sparc-TSO 也有 casa指令 实现，而在 ARM 和 PowerPC 架构下，则需要使用 一对 ldrex/strex 指令 来完成 LL/SC 的功能。</p><p>CAS指令 需要有3个操作数，分别是 内存位置（在Java中可以简单理解为 变量的内存地址，用V表示）、旧的预期值（用A表示）和新值（用B表示）。</p><p>CAS指令 执行时，当且仅当 V 符合 旧预期值A 时，处理器 用 新值B 更新 V的值，否则它就不执行更新，<br>但是无论 是否更新了 V的值，都会返回 V的旧值，上述的处理过程是一个 原子操作。</p><p>在 JDK1.5 之后，Java程序 中才可以使用 CAS 操作，<br>该操作由 sun.misc.Unsafe类 里面的 compareAndSwapInt() 和 compareAndSwapLong() 等几个方法包装提供，<br>虚拟机 在 内部 对这些方法做了特殊处理，<br>即时编译出来的结果 就是一条 平台相关的 处理器CAS指令，没有方法调用的过程，或者可以认为是无条件 内联 进去了。</p><blockquote><p>这种被 虚拟机 特殊处理 的方法称为 固有函数（Intrinsics），类似的 固有函数 还有Math.sin()等。</p></blockquote><p>由于 Unsafe类 不是提供给 用户程序 调用的类（Unsafe.getUnsafe()的代码中 限制了只有 启动类加载器（Bootstrap ClassLoader） 加载的Class 才能访问它），<br>因此，如果不采用 反射手段 ， 我们只能通过其他的 Java API来间接使用它，如 J.U.C包 里面的 整数原子类，其中的 compareAndSet()和getAndIncrement() 等方法都是用了 Unsafe类 的 CAS操作。</p><p>我们不妨拿一段在第12章中没有解决的问题代码来看看 如何使用CAS操作来避免阻塞同步 ，代码如代码清单12-1所示。</p><p>我们曾经通过这段20个线程 自增10000次 的代码来证明 volatile变量不具备原子性，那么如何才能让它 具备原子性 呢？</p><p>把 “race++”操作或increase() 方法用 同步块 包裹起来当然是一个办法，但是如果改成如代码清单13-4所示的代码，那效率将会提高许多。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 <span class="number">13</span><span class="number">-4</span> Atomic的原子自增运算</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Atomic 变量自增运算测试</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @author zzm</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicTest</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AtomicInteger race = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">      race.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREADS_COUNT = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws Exception</span>&#123;</span><br><span class="line">      Thread[] threads = <span class="keyword">new</span> Thread[THREADS_COUNT];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREADS_COUNT; i++)&#123;</span><br><span class="line">        threads[i] = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">          @Override</span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>()&#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREADS_COUNT; i++)&#123;</span><br><span class="line">              increase();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        threads[i].start();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(Thread.activeCount() &gt; <span class="number">1</span>)</span><br><span class="line">          thread.<span class="built_in">yield</span>();</span><br><span class="line"></span><br><span class="line">      System.out.<span class="built_in">println</span>(race);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p>200000</p><p>使用 AtomicInteger 代替 int 后，程序输出了正确的结果，<br>一切都要归功于 incrementAndGet()方法 的 原子性。<br>它的实现 其实非常 简单，如代码清单13-5所示。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 13-5 incrementAndGet()方法的JDK源码</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">/*<span class="strong">*</span></span><br><span class="line"><span class="strong">  *</span> Atomically  increment by one the current value.</span><br><span class="line"><span class="code">  * @return the updated value</span></span><br><span class="line"><span class="code">  */</span></span><br><span class="line"><span class="code">  public final int incrementAndGet()&#123;</span></span><br><span class="line"><span class="code">    for(;;)&#123;</span></span><br><span class="line"><span class="code">      int current = get();</span></span><br><span class="line"><span class="code">      int next = current + 1;</span></span><br><span class="line"><span class="code">      if(compareAndSet(current, next))&#123;</span></span><br><span class="line"><span class="code">        return next;</span></span><br><span class="line"><span class="code">      &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>incrementAndGet()方法 在一个 无限循环 中，<br>不断尝试 将一个比当前值 大1的新值 赋值给自己。<br>如果失败了，那说明在执行 “获取-设置” 操作的时候 值已经有了修改，<br>于是 再次循环 进行下一次操作，直到设置成功为止。</p><p>尽管 CAS 看起来很美，但显然这种操作无法涵盖 互斥同步的所有使用场景，<br>并且 CAS 从语义上来说 并不是完美的，存在这样一个 逻辑漏洞：<br>如果一个 变量V 初次读取的时候是 A值，<br>并且在准备赋值的时候 检查到它仍然为A值，<br>那我们就能说它的值 没有被其他线程改变过了吗？<br>如果在这段期间 它的值曾经被改成了B， 后来又被改回A，<br>那 CAS操作 就会误认为它 从来没有被改变过。</p><p>这个 漏洞 称为 CAS操作 的 “ABA问题”。</p><p>J.U.C包 为了解决这个问题，提供了一个带有标记的 原子引用类“AtomicStampedReference”，<br>它可以通过控制 变量值的版本 来保证 CAS的正确性。</p><p>不过目前来说这个类 比较“鸡肋”，大部分情况下 ABA问题 不会影响 程序并发的正确性，<br>如果需要 解决ABA问题，改用传统的 互斥同步 可能会比 原子类更高效。</p><h6 id="3-无同步方案"><a href="#3-无同步方案" class="headerlink" title="3.无同步方案"></a>3.无同步方案</h6><p>要保证 线程安全，并不是一定就要进行 同步，两者没有 因果关系。</p><p>同步 只是保证 共享数据争用时的正确性 的手段，<br>如果一个方法 本来就不涉及 共享数据，<br>那它自然就无需 任何同步措施 去保证 正确性，<br>因此会有一些代码天生就是 线程安全的，笔者简单地介绍其中的两类。</p><p><strong>可重入代码（Reentrant Code）</strong>:<br>这种代码也叫做 纯代码（Pure Code），<br>可以在 代码执行的任何时刻 中断它，<br>转而去 执行另外一段代码（包括 递归调用它本身），<br>而在 控制权 返回后，<br>原来的程序 不会出现任何错误。</p><p>相对 线程安全 来说，<br>可重入性 是更基本的特性，<br>它可以保证 线程安全，<br>即所有的 可重入 的代码都是 线程安全的，<br>但是并非所有的 线程安全 的代码都是 可重入的。</p><p>可重入代码 有一些 共同的特征，<br>例如 不依赖存储在堆上的数据 和 公用的系统资源、用到的状态量 都由参数中传入、不调用非可重入的方法等。</p><p>我们可以通过一个简单的原则来判断 代码是否具备可重入性：<br>如果一个方法，它的返回结果是可以 预测的，只要输入了相同的数据，就都能返回相同的结果，那它就满足 可重入性 的要求，当然也就是 线程安全的。</p><p><strong>线程本地存储（Thread Local Storage）</strong>:<br>如果一段代码中 所需要的数据 必须与 其他代码 共享，<br>那就看看这些 共享数据的代码 是否能保证 在同一个线程中 执行？<br>如果能保证，我们就可以把 共享数据的可见范围 限制在 同一个线程之内，<br>这样，无须 同步  也能保证 线程之间 不出现 数据争用 的问题。</p><p>符合这种特点的应用并不少见，<br>大部分使用 消费队列的架构模式（如“生产者-消费者”模式）都会将 产品的消费过程 尽量在 一个线程中 消费完，<br>其中最重要的一个应用实例就是 经典Web交互模型 中的 “一个请求对应一个服务器线程”（Thread-per-Request） 的处理方式，<br>这种 处理方式的广泛应用 使得很多 Web服务端应用 都可以使用 线程本地存储 来解决 线程安全问题。</p><p>Java语言中，<br>如果 一个变量 要被 多线程 访问，可以使用 volatile关键字 声明它为 “易变的”；<br>如果 一个变量 要被 某个线程 独享，Java中就没有类似C++中 __declspec(thread)这样的关键字，<br>不过还是可以通过 java.lang.ThreadLocal类 来实现 线程本地存储 的功能。</p><blockquote><p>在 Visual C++ 中是 “<strong>declspec(thread)”关键字，而在 GCC 中是“</strong>thread”。</p></blockquote><p>每一个线程的 Thread对象中都有一个 ThreadLocalMap对象，<br>这个对象 存储了一组 以 ThreadLocal.threadLocalHashCode 为 键 ，以 本地线程变量 为 值 的 K-V值对，<br>ThreadLocal对象 就是 当前线程的ThreadLocalMap的 访问入口，<br>每一个 ThreadLocal对象 都包含了 一个独一无二的 threadLocalHashCode值，<br>使用这个值 就可以在线程 K-V值对 中找回 对应的本地线程变量。</p><h4 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h4><p>高效并发 是从 JDK1.5到JDK1.6的一个 重要改进，<br>HotSpot虚拟机 开发团队在这个版本上花费了大量的精力去实现 各种锁优化技术，<br>如 适应性自旋（Adaptive Spinning）、锁消除（Lock Elimination）、锁粗化（Lock Coarsening）、轻量级锁（Lightweight Locking）和偏向锁（Biased Locking）等，<br>这些技术都是为了 在线程之间 更高效地 共享数据，<br>以及 解决竞争问题，<br>从而 提高程序的执行效率。</p><h5 id="自旋锁与自适应自旋"><a href="#自旋锁与自适应自旋" class="headerlink" title="自旋锁与自适应自旋"></a>自旋锁与自适应自旋</h5><p>前面我们讨论 互斥同步 的时候，<br>提到了 互斥同步 对性能最大的影响 是阻塞的实现，<br>挂起线程 和 恢复线程 的操作都需要 转入内核态 中完成，<br>这些操作给系统的 并发性能 带来了很大的压力。</p><p>同时，虚拟机 的开发团队也注意到在许多应用上，<br>共享数据的锁定状态 只会持续很短的一段时间，<br>为了这段时间 去挂起和恢复线程 并不值得。</p><p>如果 物理机器 有一个以上的 处理器，<br>能让 两个或两个以上的线程 同时并行执行，<br>我们就可以让  后面请求锁的那个线程 “稍等一下”，<br>但不放弃 处理器的执行时间，<br>看看 持有锁的线程 是否很快就会释放锁。</p><p>为了让线程等待，我们只需让 线程执行一个忙循环（自旋），这项技术就是所谓的 自旋锁。</p><p>自旋锁 在 JDK1.4.2 中就已经引入，<br>只不过 默认 是 关闭的，<br>可以使用 -XX:+UseSpinning 参数来开启，<br>在 JDK1.6 中就已经改为 默认开启了。</p><p>自旋等待 不能代替 阻塞，<br>且先不说对 处理器数量的要求，<br>自旋等待 本身虽然 避免了线程切换的开销，<br>但它是要 占用处理器时间的，<br>因此，如果 锁 被占用的时间 很短，自旋等待 的 效果就会非常好，<br>反之，如果 锁 被占用的时间 很长，那么 自旋的线程 只会 白白消耗处理器资源，<br>而不会做 任何有用的工作，<br>反而会带来 性能上的浪费。</p><p>因此，自旋等待的时间 必须要有 一定的限度，<br>如果 自旋超过了限定的次数 仍然没有 成功获得锁，<br>就应当使用 传统的方式 去挂起线程了。</p><p>自旋次数 的 默认值 是 10次，用户可以使用参数-XX:PreBlockSpin 来更改。</p><p>在 JDK1.6 中引入了 自适应的自旋锁。</p><p>自适应 意味着 自旋的时间 不再固定了，<br>而是由 前一次在同一个锁上的自旋时间 及 锁的拥有者的状态 来决定。</p><p>如果在 同一个锁对象上，<br>自旋等待 刚刚成功获得过锁，并且 持有锁的线程 正在运行中，<br>那么 虚拟机 就会认为 这次自旋 也很有可能再次成功，<br>进而它将 允许 自旋等待 持续相对更长的时间，比如100个循环。</p><p>另外，如果 对于某个锁，自旋 很少成功获得过，<br>随着 程序运行和性能监控信息 的 不断完善，<br>虚拟机 对 程序锁 的 状况预测 就会越来越准确，<br>虚拟机 就会变得 越来越“聪明”了。</p><h5 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h5><p>锁消除 是指 虚拟机 即时编译器 在运行时，<br>对一些代码上 要求 同步，但是被检测到 不可能存在共享数据竞争的锁 进行 消除。</p><p>锁消除 的 主要判定依据 来源于 逃逸分析 的 数据支持（第11章已经讲解过 逃逸分析技术），<br>如果判断 在一段代码中，堆 上的所有 数据 都不会 逃逸出去 从而被 其他的线程访问到，<br>那就可以把它们当做 堆上数据对待，<br>认为它们是 线程私有的，同步加锁 自然也就无须运行。</p><p>也许读者会有疑问， 变量 是否逃逸，<br>对于 虚拟机 来说需要使用 数据流分析 来确定，<br>但是程序员自己应该时很清楚的，怎么会在 明知道不存在数据争用的情况下 要求同步呢？<br>答案是有许多 同步措施 并不是程序员自己加的，<br>同步的代码 在java程序中的 普遍程度 也许超过了大部分读者的想象。</p><p>我们来看看代码清单13-6中的例子，这段非常简单的代码 仅仅是输出3个字符串相加的结果，<br>无论是 源码字面上 还是 程序语义上 都没有同步。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 13-6 一段看起来没有同步的代码</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">public String concatString(String s1,String s2,String s3)&#123;</span><br><span class="line"><span class="code">  return s1+s2+s3;</span></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>我们也知道，<br>由于 String是一个不可变的类，对字符串的连接操作 总是通过生成 新的String对象 来进行的，<br>因此 Javac编译器 会对 String连接 做 自动优化。</p><p>在 JDK1.5 之前，会转化为 StringBuffer对象的连续append()操作，<br>在 JDK1.5及以后的版本中，会转为 StringBuilder对象的连续append()操作，<br>即代码清单13-6中的代码 可能会变成代码清单 13-7的样子。</p><blockquote><p>客观地说，既然谈到 锁消除与逃逸分析，那 虚拟机 就不可能是 JDK1.5之前的版本，实际上会转化为 非线程安全的StringBuilder 来完成字符串拼接，并不会加锁， 但这也不影响笔者用这个例子证明 Java对象中同步的普遍性。</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 13-7 Javac转化后的字符串连接操作</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">public String concatString(String s1,String s2,String s3)&#123;</span><br><span class="line"><span class="code">  StringBuffer sb = new StringBuffer();</span></span><br><span class="line"><span class="code">  sb.append(s1);</span></span><br><span class="line"><span class="code">  sb.append(s2);</span></span><br><span class="line"><span class="code">  sb.append(s3);</span></span><br><span class="line"><span class="code">  return sb.toString();</span></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>现在大家还认为这段代码没有涉及同步吗？<br>每个 StringBuffer.append() 方法中都有一个 同步块，锁就是sb对象。<br>虚拟机 观察 变量sb，很快就会发现它的 动态作用域 被限制在 concatString()方法内部。</p><p>也就是说，sb的所有引用 永远不会 “逃逸” 到 concatString() 方法之外，<br>其他线程 无法访问 到 它，<br>因此，虽然这里有锁，但是可以被 安全地消除掉，<br>在 即时编译 之后，这段代码就会忽略掉 所有的同步块 而直接执行了。</p><h5 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h5><p>原则上，我们在编写代码的时候，总是推荐将 同步块的作用范围 限制得 尽量小——只在 共享数据的实际作用域 中才进行同步，<br>这样是为了 使得需要 同步的操作数量 尽可能 变小，<br>如果存在 锁竞争，那等待 锁的线程 也能尽快拿到锁。</p><p>大部分情况下，上面的原则都是正确的，<br>但是如果 一系列的连续的动作 都对 同一个对象 反复加锁和解锁，<br>甚至 加锁操作 是出现在 循环体中的，<br>那即是没有 线程竞争，频繁地进行互斥同步操作 也会导致 不必要的性能损耗。</p><p>代码清单13-7中 连续的append()方法就属于这类情况。</p><p>如果 虚拟机 探测到有这样 一串零碎的操作 都对 同一个对象加锁，<br>将会把 加锁同步的范围 扩展（粗化）到 整个操作序列的外部，<br>以代码清单13-7为例，就是扩展到第一个append()操作之前 直至 最后一个append()操作之后，<br>这样只需要 加锁一次 就可以了。</p><h5 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h5><p>轻量级锁 是 JDK1.6之中 加入的 新型锁机制，<br>它名字中的 “轻量级” 是 相对于 使用 操作系统互斥量来实现的传统锁 而言的，<br>因此 传统的锁机制 就称为 “重量级”锁。</p><p>首先需要强调的一点是， 轻量级锁 并不是用来 代替 重量级锁 的，<br>它的本意 是在 没有多线程竞争的前提下，<br>减少 传统的重量级锁 使用 操作系统互斥量 产生的性能消耗。</p><p>要理解 轻量级锁，<br>以及后面会讲到的 偏向锁的原理和运作过程，<br>必须从 HotSpot虚拟机的对象（对象头部分）的内存布局开始介绍。</p><p>HotSpot虚拟机的对象头（Object Header）分为两部分信息，<br>第一部分 用于存储 对象自身的 运行时数据，如哈希码（HashCode）、GC分代年龄（Generational GC Age）等，<br>这部分数据的长度 在32位和64位的 虚拟机中 分别为 32bit和64bit，官方称它为 “Mark Word”，<br>它是 实现轻量级锁 和 偏向锁 的 关键。</p><p>另一部分 用于存储 指向方法区对象 类型数据的指针，<br>如果是数组对象的话，还会有一个额外的部分 用于存储 数组长度。</p><p>对象头信息 是与 对象自身定义的 数据无关的 额外存储成本，<br>考虑到 虚拟机的空间效率，<br>Mark Word 被设计成一个 非固定的数据结构 以便在 极小的空间内 存储尽量多的信息，<br>它会根据对象的状态 复用 自己的 存储空间。</p><p>例如，在32位的HotSpot虚拟机中 对象未被锁定的状态下，<br>Mark Word的 32bit空间的 25bit 用于存储 对象哈希码（HashCode），<br>4bit 用于存储 对象分代年龄，<br>2bit 用于存储 锁标志位，<br>1bit 固定为 0，<br>在其他状态（轻量级锁定、重量级锁定、GC标记、可偏向）下 对象的存储内容 见表13-1。</p><table>  <thead>    <tr>      <th colspan="2">表 13-1 HotSpot虚拟机对象头 Mark Word</th>    </tr>  </thead>  <tr>    <th>存储内容</th>    <th>标志位</th>    <th>状态</th>  </tr>  <tr>    <td>对象哈希码、对象分代年龄</td>    <td>01</td>    <td>未锁定</td>  </tr>    <tr>    <td>指向锁记录的指针</td>    <td>00</td>    <td>轻量级锁定</td>  </tr>    <tr>    <td>指向重量级锁的指针</td>    <td>10</td>    <td>膨胀（重量级锁定）</td>  </tr>   <tr>    <td>空，不需要记录信息</td>    <td>11</td>    <td>GC标记</td>  </tr>   <tr>    <td>偏向线程ID、偏向时间戳、对象分代年龄</td>    <td>01</td>    <td>可偏向</td>  </tr></table><p>简单地介绍了 对象的内存布局 后，<br>我们把话题返回到 轻量级锁的执行过程上。</p><p>在代码进入 同步块 的时候，<br>如果此 同步对象 没有被 锁定（锁标志位 为“01”状态），<br>虚拟机 首先将 在当前线程的 栈帧 中 建立一个名为 锁记录（Lock Record）的空间，<br>用于存储 锁对象目前的Mark Word的拷贝<br>（官方把这份拷贝加了一个 Displaced前缀，即 Displaced Mark Word），<br>这时候 线程堆栈 与 对象头的状态 如图13-3所示。</p><p>然后，<br>虚拟机 将使用 CAS操作 尝试将 对象的Mark Word 更新为指向 Lock Record的指针。</p><p>如果这个更新动作 成功了，那么这个线程 就拥有了 该对象的锁，<br>并且 对象Mark Word 的 锁标志位（Mark Word的最后2bit）将转变为“00”，<br>即表示此对象处于 轻量级锁定状态，<br>这时候 线程堆栈与对象头的状态 如图13-4所示。</p><blockquote><p>图13-3和图13-4来源于 HotSpot虚拟机的一位Senior Staff Engineer——Paul Hohensee所写的PPT “The Hotspot Java Virtual Machine”。</p></blockquote><p>如果这个更新动作 失败了，虚拟机 首先会检查 对象的Mark Word 是否指向 当前线程的栈帧，<br>如果只说明 当前线程已经拥有了这个对象的锁，那就可以直接 进入同步块 继续执行，<br>否则说明 这个锁对象 已经被其他线程 抢占了。</p><p>如果有两条以上的 线程 争用同一个锁，<br>那 轻量级锁 就不再有效，要 膨胀 为 重量级锁，<br>锁标志 的 状态值 变为 “10“，<br>Mark Word中存储的 就是指向 重量级锁（互斥量）的指针，<br>后面 等待锁的线程 也要进入 阻塞状态。</p><p>上面描述的是 轻量级锁的枷锁过程，<br>它的 解锁过程 也是通过 CAS操作来进行的，<br>如果 对象的Mark Word 仍然指向这 线程的锁记录，<br>那就用 CAS操作 把 对象的Mark Word 和 线程中复制的Displaced Mark Word替换回来，<br>如果替换成功，整个同步过程就完成了。<br>如果替换失败，说明有其他线程 尝试过获取该锁，那就要在释放锁的同时，唤醒被挂起的线程。</p><p>轻量级锁 能提升 程序同步性能 的依据是 “对于绝大部分的锁，在整个同步周期内都是不存在竞争的”，<br>这是一个经验数据。</p><p>如果没有竞争，轻量级锁使用 CAS操作 避免了使用 互斥量的开销，<br>但如果存在 锁竞争，除了互斥量的开销以外，还额外发生了 CAS操作，<br>因此在 有竞争的情况下， 轻量级锁 会比 传统的重量级锁 更慢。</p><h5 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h5><p>偏向锁 也是 JDK1.6 中引入的一项 锁优化，<br>它的目的是 消除数据在无竞争情况下的同步原语，进一步提高程序的运行性能。</p><p>如果说 轻量级锁 是在 无竞争的情况下 使用 CAS操作 去 消除同步使用的互斥量，<br>那 偏向锁 就是在 无竞争的情况下 想把 整个同步都消除掉，连CAS操作都不做了。</p><p>偏向锁的 “偏”，就是偏心的“偏”、偏袒的“偏”，<br>它的意思是 这个锁 会偏向于 第一个 获得它的线程，<br>如果在接下来的执行过程中，该锁 没有被其他的 线程获取，则持有 偏向锁的 线程 将永远不需要再进行 同步。</p><p>如果读者读懂了前面 轻量级锁 中 关于对象头Mark Word与线程之间 的 操作过程，<br>那 偏向锁的原理 理解起来就会很简单。</p><p>假设当前 虚拟机 启用了 偏向锁（启用参数 -XX:+UseBiasedLocking，这是 JDK1.6的默认值），<br>那么，当 锁对象 第一次 被线程获取的时候，虚拟机 将会把 对象头中的 标志位 设为 “01”，即偏向模式。</p><p>如果使用 CAS操作 把 获取到这个锁的线程的ID 记录在 对象的Mark Word之中，<br>如果 CAS操作 成功<br>持有 偏向锁的线程 以后每次进入这个锁 相关的同步块时，虚拟机都可以不再进行 任何同步操作<br>（例如 LOcking、Unlocking 及对 Mark Word的Update 等）。</p><p>当有 另外一个线程 去尝试 获取这个锁时，<br>偏向模式 就 宣告结束。</p><p>根据 锁对象 目前是否处于 被锁定 的状态，<br>撤销 偏向（Revoke Bias）后 恢复到 未锁定（标志位为 “01”） 或 轻量级锁定（标志位为“00”）的状态，<br>后续的同步操作 就如上面介绍的 轻量级锁那样执行。</p><p>偏向锁、轻量级锁的状态转化 及 对象的Mark Word的关系如图13-5 所示。</p><p>偏向锁 可以提高 带有 同步 但 无竞争的 程序性能。</p><p>它同样是一个带有 效益权衡（Trade Off）性质的优化，<br>也就是说，它并不一定总是对 程序运行 有利，<br>如果 程序中大多数的锁 总是被 多个不同的线程 访问，<br>那 偏向模式就是多余的。</p><p>在具体问题具体分析的前提下，有时候使用参数 -XX:-UseBiasedLocking 来 禁止偏向锁优化 反而可以 提升性能。</p><h4 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h4><p>本章介绍了 线程安全 所涉及的 概念和分类、同步实现的方式 及 虚拟机的底层运作原理，<br>并且介绍了 虚拟机 为了实现高效并发 所采取的的 一系列 锁优化措施。</p><p>许多资深的程序员都说过，能够写出 高伸缩性的并发程序 是一门艺术，<br>而 了解并发 在系统底层 是如何实现的，则是 掌握这门艺术的 前提条件，<br>也是成长为 高级程序员的必备知识之一。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机-Java内存模型与线程</title>
      <link href="/2020/05/26/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%91/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA12/"/>
      <url>/2020/05/26/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%91/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA12/</url>
      
        <content type="html"><![CDATA[<h2 id="深入java虚拟机-第五部分-高效并发"><a href="#深入java虚拟机-第五部分-高效并发" class="headerlink" title="深入java虚拟机-第五部分-高效并发"></a>深入java虚拟机-第五部分-高效并发</h2><h3 id="第12章-Java内存模型与线程"><a href="#第12章-Java内存模型与线程" class="headerlink" title="第12章 Java内存模型与线程"></a>第12章 Java内存模型与线程</h3><p><strong>并发处理的广泛应用</strong> 是使得 <strong>Amdah1定律 代替 摩尔定律</strong> 成为<strong>计算机性能发展源动力</strong> 的根本原因， 也是人类 “压榨” 计算机运算能力的最有利武器。  </p><blockquote><p><strong>Amdah1定律</strong> 代替 <strong>摩尔定律</strong> 成为 <strong>计算机性能发展源动力</strong> 的<strong>根本原因</strong>： <strong>并发处理的广泛应用</strong>。</p></blockquote><blockquote><p><strong>Amdah1定律</strong></p><ul><li>通过系统中 <strong>并行化与串行化</strong> 的 <strong>比重</strong> 来 <strong>描述</strong> <strong>多处理器系统</strong> 能获得的 <strong>运算加速能力</strong>；</li></ul></blockquote><blockquote><p><strong>摩尔定律</strong></p><ul><li>则用于 <strong>描述</strong> <strong>处理器</strong> <strong>晶体管数量</strong> 与 <strong>运行效率</strong> 之间的<strong>发展关系</strong>。</li></ul></blockquote><blockquote><p>这两个<strong>定律</strong> 的 <strong>更替</strong> 代表了：近年来 <strong>硬件发展</strong> 从追求 <strong>处理器频率</strong> 到 追求 <strong>多核心并行处理</strong> 的<strong>发展过程</strong>；</p></blockquote><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><strong>多任务处理</strong> 在 <strong>现代计算机操作系统</strong> 中 几乎已是一项必备的技能了。  </p><blockquote><p><strong>现代计算机操作系统</strong> 中，<strong>多任务处理</strong> 几乎已是一项必备的技能。</p></blockquote><p>在许多情况下，让 <strong>计算机</strong> <strong>同时去做几件事情</strong>， 不仅是因为 <strong>计算机的运算能力强大</strong> 了，还要一个很重要的原因是 <strong>计算机的运算速度</strong> 与 <strong>它的存储和通信子系统速度</strong> 的 <strong>差距太大</strong>，<br><strong>大量的时间</strong>都<strong>花费</strong>在<strong>磁盘I/O</strong> 、<strong>网络通信</strong>或者 <strong>数据库访问</strong>上。</p><blockquote><p>让计算机同时去做几件事情的原因：</p><ul><li>计算机的<strong>运算能力</strong>强大</li><li>计算机的 <strong>运算速度</strong> 与 它的 <strong>存储和通信子系统</strong> <strong>速度</strong> 的<strong>差距太大</strong>；</li><li>为了<strong>避免</strong>大量的<strong>时间</strong>都<strong>花费</strong>在 <strong>磁盘I/O</strong>、<strong>网络通信</strong>、<strong>访问数据库</strong>上;</li></ul></blockquote><p>如果不希望 <strong>处理器</strong> 在<strong>大部分时间</strong>里都处于 <strong>等待其他资源的状态</strong>，<br>就必须 使用一些手段 去把 <strong>处理器的预算能力</strong> <strong>压榨</strong> 出来，<br>否则就会<strong>造成</strong>很大的<strong>浪费</strong>，<br>而让<strong>计算机</strong> <strong>同时处理几项任务</strong> 则是最容易想到、也被证明 是非常有效的“压榨”手段；</p><blockquote><p><strong>处理器</strong> 在<strong>大部分时间</strong>里 都处于 <strong>等待其他资源的状态</strong></p></blockquote><blockquote><p>解决 处理器在大部分时间里 都处于 等待其他资源的状态 的手段 or 如何将 处理器的预算能力 压榨出来：</p><ul><li>让计算机 同时处理几项任务（最容易想到、也被证明是非常有效的“压榨”手段）</li></ul></blockquote><p>除了充分利用 <strong>计算机处理器的能力</strong> 外，<strong>一个服务端</strong> <strong>同时</strong>对 <strong>多个客户端提供服务</strong> 则是另一个更<strong>具体的并发应用场景</strong>。</p><blockquote><p>具体的<strong>并发应用场景</strong>：</p><ul><li>一个服务端 同时对 多个客户端 提供服务。</li><li>充分利用计算机处理器的能力（让计算机同时处理几项任务）；</li></ul></blockquote><p><strong>衡量</strong> <strong>一个服务性能</strong> 的 <strong>高低好坏</strong>，<br><strong>每秒事务处理数（Transactions Per Second， TPS）是最重要的指标之一</strong>，<br>它代表着 <strong>一秒内</strong>  <strong>服务端</strong> <strong>平均</strong> <strong>能响应</strong> <strong>的请求总数</strong>，<br>而 <strong>TPS 值</strong> 与 <strong>程序的 并发能力</strong> 又有 非常<strong>密切</strong>的<strong>关系</strong>。</p><blockquote><p><strong>每秒事务处理数（Transactions Per Second ，TPS）</strong></p><ul><li>每秒事务处理数（Transactions Per Second ，TPS）是 <strong>衡量</strong>一个服务<strong>性能高低好坏</strong>的最重要<strong>指标</strong>之一</li><li>每秒事务处理数（Transactions Per Second ，TPS） 代表着 <strong>一秒内 服务端的 平均 能响应 的 请求总数</strong>；</li><li>每秒事务处理数（Transactions Per Second ，TPS）与 <strong>程序的并发能力</strong> 有着非常<strong>密切</strong>的<strong>关系</strong>。</li></ul></blockquote><p>对于 <strong>计算量相同</strong> 的任务， <strong>程序线程</strong> <strong>并发协调</strong> 得 越<strong>有条不紊</strong>，<strong>效率</strong>自然就会<strong>提高</strong>；<br>反之，<strong>线程之间</strong> <strong>频繁阻塞</strong> 甚至 <strong>死锁</strong>，将会大大 <strong>降低</strong> <strong>程序</strong> 的 <strong>并发能力</strong>。</p><blockquote><p>计算量相同的任务，线程之间状态不同将导致不同的结果：</p><ul><li>程序线程 并发协调 有条不紊，效率提高；</li><li>线程之间 频繁阻塞 甚至 死锁，将会大大 降低 程序 的 并发 能力；</li></ul></blockquote><p><strong>服务端</strong> 是 java语言 最擅长的领域之一，这个领域的应用 占了 Java应用中最大的一块份额，</p><blockquote><p>必须以 <strong>代码的总体规模</strong> 来<strong>衡量</strong>， <strong>服务端应用</strong> <strong>不能</strong>与 <strong>JavaCard、移动终端</strong> 这些领域去比 <strong>绝对数量</strong>。</p></blockquote><p>不过 如何写好 并发应用程序 却又是 服务端程序开发的难点之一， 处理好并发方面的问题 通常需要更多的 编码经验 来支持。  </p><blockquote><p><strong>服务端 领域的应用</strong> 占用了java应用 中最大的一块份额。<br>服务端 程序开发的难点之一：如何写好 并发应用程序；<br>处理好并发方面的问题：通常需要更多的 编码经验 来支持；</p></blockquote><p>幸好 <strong>java语言和虚拟机</strong> 提供了许多工具，把 <strong>并发编程</strong> 的门槛 降低了不少。<br>并且各种 <strong>中间件服务器</strong>、<strong>各类框架</strong> 都努力地替程序员 <strong>处理尽可能多的线程并发细节</strong>，<br>使得程序员 在编码时能 <strong>更关注业务逻辑</strong>，<br>而 <strong>不是花费大部分时间</strong>去 <strong>关注此服务</strong> <strong>会同时被多少人调用</strong>、<strong>如何协调硬件资源</strong>。</p><blockquote><p>java语言和虚拟机 提供的许多 工具，降低了 并发编程 的 门槛。<br>各种中间件服务器、各类框架的好处：</p><ul><li>各种 中间件服务器、各类框架 处理尽可能多的线程并发细节；</li><li>程序员能够关注业务逻辑，避免花费大部分时间去 关注此服务 会同时被多少人调用、如何协调硬件资源等</li></ul></blockquote><p>无论<strong>语言、中间件和框架</strong> 如何先进，开发人员都<strong>不能期望 它们能独立完成所有并发处理的事情</strong>，了解 并发的内幕 也是 称为一个高级程序员 不可缺少的课程。<br>（🙃尽管我是如此垃圾，但是我依然热爱—–个屁🙃）</p><blockquote><p>不能去期望 某种语言、中间件或者框架 能够独立完成所有并发处理的事情。</p></blockquote><p>“<strong>高效并发</strong>” 是本书 讲解java虚拟机的最后一部分，<br>将会向读者介绍  <strong>虚拟机</strong>  如何实现 <strong>多线程、多线程之间</strong> 由于 <strong>共享</strong> 和 <strong>竞争数据</strong> 而 <strong>导致的</strong> 一系列 <strong>问题</strong> 及 <strong>解决方案</strong>。</p><h4 id="硬件的效率-与-一致性"><a href="#硬件的效率-与-一致性" class="headerlink" title="硬件的效率 与 一致性"></a>硬件的效率 与 一致性</h4><p>在正式讲解 <strong>java虚拟机并发相关</strong> 的知识之前，我们先花费一点时间去了解一下 <strong>物理计算机</strong>中的 <strong>并发问题</strong>，<br><strong>物理机</strong>遇到的 <strong>并发问题</strong> 与 <strong>虚拟机中的情况</strong> 有不少<strong>相似</strong>之处，<br><strong>物理机</strong> 对 <strong>并发的处理方案</strong> 对于 <strong>虚拟机的实现</strong> 也有相当大的参考意义。</p><blockquote><p>物理机与虚拟机</p><ul><li>物理机 遇到的 并发问题 与 虚拟机中的情况 有不少相似之处；</li><li>物理机 对 并发的处理方案 对于 虚拟机的实现 也有相当大的参考意义。</li></ul></blockquote><p>“让 <strong>计算机</strong> <strong>并发执行</strong> <strong>若干个</strong> <strong>运算任务</strong>” 与 “更<strong>充分</strong> 地 <strong>利用</strong> <strong>计算机处理器的效能</strong>” 之间的因果关系，看起来顺理成章，<br>实际上他们之间的关系 并没有想象中的那么简单，<br>其中一个 重要的<strong>复杂性</strong> 来源是 绝大多数的 <strong>运算任务</strong> 都 <strong>不可能</strong> <strong>只靠</strong> <strong>处理器“计算”</strong> 就能完成，<br><strong>处理器</strong> 至少 要与 <strong>内存交互</strong>，<br>如读取运算数据、存储运算结果等，<br>这个<strong>I/O</strong>操作是很<strong>难消除</strong>的<br>（<strong>无法仅靠寄存器</strong>来<strong>完成</strong>所有运算<strong>任务</strong>）。  </p><p>由于 <strong>计算机的存储设备</strong> 与 <strong>处理器的运算速度</strong> 有几个数量级的差距，<br>所以 <strong>现代计算机系统</strong> 都不得不加入 一层 <strong>读写速度</strong> <strong>尽可能接近</strong> <strong>处理器运算速度</strong> 的 <strong>高速缓存（Cache）</strong> 来作为 <strong>内存与处理器</strong> 之间的<strong>缓冲</strong>：<br>将运算需要使用的<strong>数据</strong> <strong>复制</strong>到 <strong>缓存</strong>中，<br>让<strong>运算</strong>能<strong>快速进行</strong>，<br>当<strong>运算结束</strong>后 再从 <strong>缓存</strong> <strong>同步</strong>回 <strong>内存</strong>之中，<br>这样 <strong>处理器</strong> 就 <strong>无需等待</strong> 缓慢的 <strong>内存读写</strong> 了。</p><blockquote><p>“让计算机 并发执行 若干个运算任务” 与 “更充分地利用计算机处理器的效能”之间因果关系的复杂性来源</p><ol><li>绝大多数的运算任务都不可能只靠 处理器“计算” 就能完成</li><li>处理器 至少 要与 内存交互（如读取运算数据、存储运算结果等）；这个I/O操作是很难消除的；</li><li>无法仅靠寄存器来完成所有运算任务；</li><li>计算机的存储设备 与 处理器的运算速度 有几个数量级的 差距。</li><li>现代计算机系统中加入了 一层 (读写速度尽可能接近处理器运算速度) 的 高速缓存（Cache） 来作为 <strong>内存与处理器之间的缓冲</strong>：<ul><li>将 运算 所需要使用到的 数据 复制到 缓存 中；</li><li>让运算能快速进行；</li><li>当运算结束后，再从 缓存 同步 回 内存 之中；</li><li>这样处理器 就无需等待 缓慢的 内存读写 了；</li></ul></li></ol></blockquote><p>基于 <strong>高速缓存</strong> 的 <strong>存储交互</strong> 很好地解决了 <strong>处理器 与 内存 的速度矛盾</strong>，<br>但是也为 计算机系统 带来更高的<strong>复杂度</strong>，<br>因为它引入了一个新的问题： <strong>缓存一致性（Cache Coherence）</strong>。  </p><blockquote><p>高速缓存 的 存储交互 优缺点：</p><ul><li>优点：解决了 处理器与内存 之间的 速度矛盾；</li><li>缺点：带来了新问题-缓存一致性（Cache Coherence）</li></ul></blockquote><p>在 <strong>多处理器系统</strong> 中，每个 <strong>处理器</strong> 都有 自己的 <strong>高速缓存</strong>，而它们又 <strong>共享</strong> <strong>同一主内存（Main Memory）</strong>。</p><p>当 <strong>多个处理器的运算任务</strong> 都设计 <strong>同一块</strong> <strong>主内存区域</strong> 时，<br> 将可能导致 <strong>各自的缓存数据不一致</strong>，<br> 如果真的发生这种情况，那同步回到 主内存时 以谁的缓存数据为准呢？  </p><p>为了<strong>解决一致性的问题</strong>，<br>需要 各个 <strong>处理器</strong> <strong>访问缓存</strong> 时 都 <strong>遵循</strong> 一些 <strong>协议</strong>，<br>在<strong>读写</strong>时 要<strong>根据协议</strong> 来进行<strong>操作</strong>，<br>这类协议有 MSI、MESI（Illinois Protocl）、MOSI、Synapse、Firefly 及 Dragon Protocol 等。  </p><p>在本章中将会多次提到的 “<strong>内存模型</strong>” 一词，<br>可以理解为 在<strong>特定的操作协议</strong>下，对 <strong>特定的内存或高速缓存</strong> 进行 <strong>读写访问的过程抽象</strong>。  </p><p><strong>不同架构的物理机器</strong> 可以拥有 <strong>不一样的内存模型</strong>，<br>而 <strong>java虚拟机</strong> 也有自己的<strong>内存模型</strong>，<br>并且这里介绍的 <strong>内存访问操作</strong> 与 <strong>硬件的缓存访问操作</strong>具有很高的<strong>可比性</strong>。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---------               -----------                ----------------               ------</span><br><span class="line">|<span class="string"> 处理器 </span>|<span class="string"> &lt;----------&gt; </span>|<span class="string"> 高速缓存 </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string">      缓存     </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string"> 主 </span>|</span><br><span class="line">---------               -----------               |<span class="string">               </span>|<span class="string">               </span>|<span class="string">    </span>|</span><br><span class="line">---------               -----------               |<span class="string">               </span>|<span class="string">               </span>|<span class="string">    </span>|</span><br><span class="line">|<span class="string"> 处理器 </span>|<span class="string"> &lt;----------&gt; </span>|<span class="string"> 高速缓存 </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string">     一致性    </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string"> 内 </span>|</span><br><span class="line">---------               -----------               |<span class="string">               </span>|<span class="string">               </span>|<span class="string">    </span>|</span><br><span class="line">---------               -----------               |<span class="string">               </span>|<span class="string">               </span>|<span class="string">    </span>|</span><br><span class="line">|<span class="string"> 处理器 </span>|<span class="string"> &lt;----------&gt; </span>|<span class="string"> 高速缓存 </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string">      协议     </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string"> 存 </span>|</span><br><span class="line">---------               -----------                ----------------               ------</span><br></pre></td></tr></table></figure><p>除了 <strong>增加</strong> <strong>高速缓存</strong> 之外，<br>为了使得 <strong>处理器内部 的 运算单位</strong> 能尽量被 <strong>充分使用</strong>，<br><strong>处理器</strong> 可能会对 <strong>输入代码</strong> 进行 <strong>乱序执行（Out-Of-Order Execution）优化</strong>，<br><strong>处理器</strong> 会在 <strong>计算之后</strong> 将<strong>乱序执行的结果</strong> <strong>重组</strong>，<br>保证 <strong>该结果 与 顺序执行 的结果是一致的</strong>，<br>但 <strong>并不保证 程序中 各个语句 计算的先后顺序 与 输入代码中的顺序 一致</strong>，<br>因此 ，<br>如果<strong>存在 一个计算任务 依赖 另外一个 计算任务的 中间结果</strong>，<br>那么其 <strong>顺序性并不能靠 代码的先后顺序 来保证</strong>。  </p><p>与 <strong>处理器的乱序执行优化</strong> 类似，<br><strong>java虚拟机</strong> 的 <strong>即时编译器</strong> 中也有类似的 <strong>指令重排序（Instruction Reorder）优化</strong>。</p><blockquote><p>处理器内部 的 运算单位，如何尽可能被 充分利用？</p><ul><li>增加高速缓存</li><li>乱序执行（Out-Of-Order Execution）优化<ul><li>处理器 可能会对 输入代码 进行 乱序执行（Out-Of-Order Execution）优化</li><li>处理器 会在 计算之后 将 乱序执行的结果 重组</li><li>保证 该结果 与 顺序执行 的结果 是一致的；</li><li>但并 不保证 程序中各个语句计算的先后顺序 与 输入代码中的顺序 一致；</li><li>如果存在 一个计算任务 依赖 另外一个计算任务的 中间结果，那么其顺序性 并不能依靠 代码的先后顺序 来保证。</li></ul></li></ul></blockquote><h4 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h4><p><strong>Java虚拟机规范</strong> 中试图定义一种  <strong>Java内存模型（Java Memory Model，JMM）</strong><br>来 <strong>屏蔽掉</strong> 各种 <strong>硬件和操作系统</strong> 的 <strong>内存访问差异</strong>，<br>以 <strong>实现</strong> 让 <strong>Java程序</strong> 在 <strong>各种平台</strong> 下都能达到<strong>一致的内存访问效果</strong>。</p><blockquote><p>本书中的 Java内存模型 都特指 目前正在使用的，即在 JDK1.2 之后建立起来并在 JDK1.5 中完备过的内存模型。</p></blockquote><p>在此之前，主流程序语言（C/C++等） <strong>直接使用</strong> <strong>物理硬件和操作系统的内存模型</strong>，<br>因此，会由于<strong>不同平台上内存模型的差异</strong>，有可能导致程序在一套平台上并发完全<strong>正常</strong>，而在另外一套平台上并发访问却经常<strong>出错</strong>，因此在某些场景就必须针对不同的平台来编写程序。</p><p><strong>定义Java内存模型</strong> 并非一件容易的事情，<br>这个模型必须定义得<strong>足够严谨</strong>，才能让Java的 <strong>并发内存访问操作</strong> <strong>不会产生歧义</strong>；<br>但是，也必须定义得<strong>足够宽松</strong>，使得 虚拟机的实现 有足够的自由空间 去利用 硬件的各种特性（寄存器、高速缓存和指令集中某些特有的指令）来 获取 更好的执行速度。<br>经过长时间的验证和修补，在 JDK1.5（实现了JSR-133）发布后，Java内存模型已经成熟和完善起来了。</p><blockquote><p>JSR-133：Java Memory Model and Thread Specification Revision （Java内存模型和线程规范修订）。</p></blockquote><h5 id="主内存和工作内存"><a href="#主内存和工作内存" class="headerlink" title="主内存和工作内存"></a>主内存和工作内存</h5><p>Java内存模型 的 主要目标 是 定义程序中 各个变量的 访问规则，即在 虚拟机中 将 变量存储到内存 和 从内存中取出变量 这样的底层细节。  </p><p>此处的 变量（Variables）与Java编程中所说的变量 有区别，它 包括了 实例字段、静态字段和构成数组对象的元素，但不包括 局部变量与方法参数，<br>因为后者是 线程私有的，不会被共享，自然就不会存在竞争问题。</p><blockquote><p>此处请读者注意区分概念：<br>如果 局部变量 是一个 reference 类型，它 引用的对象 在 Java堆中 可被 各个线程共享，但是 reference 本身在 Java栈的 局部变量表中，它是线程私有的。</p></blockquote><p>为了获得较好的 执行效能，Java内存模型 并没有限制 执行引擎 使用处理器的 特定寄存器 或 缓存 来和主内存进行交互，也没有限制 即时编译器 进行调整代码执行顺序 这类优化措施。</p><p>Java内存模型 规定了 所有的变量 都 存储在主内存（Main Memory）中（此处的 主内存 与介绍 物理硬件时的主内存 名字一样，两者也可以互相类比，但 此处仅是 虚拟机内存 的一部分）。</p><p>每条线程 还有自己的 工作内存（Working Memory， 可与前面讲的 处理器高速缓存 类比），线程 的 工作内存 中 保存了 被该线程 使用到的 变量 的 主内存 副本拷贝，线程 对 变量 的所有操作（读取、赋值等） 都 必须在工作内存中进行， 而不能直接读写主内存中的变量。  </p><blockquote><p>有不少读者会对这段描述中的 “拷贝副本” 提出疑问，<br>如 “假设线程中访问一个10MB的对象，也会把这10MB的内存复制一份拷贝出来吗？”<br>事实上并不会如此，这个对象的引用、对象中某个在线程访问到的字段 是有可能存在拷贝的，但 不会有 虚拟机 实现成 把整个对象拷贝一次。</p></blockquote><blockquote><p>根据 Java虚拟机规范 的规定<br>volatile变量 依然有工作内存的拷贝<br>但是由于 它 特殊的操作顺序性规定（后文会讲到），<br>所以看起来如同直接在主内存中读写访问一般，因此这里的描述对于 volatile也并不存在例外。</p></blockquote><p>不同的 线程之间 也无法 直接访问 对方工作内存中的 变量，线程间 变量值的传递 均需要 通过主内存来完成，线程、主内存、工作内存三者的交互关系；  </p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">------------              -----------                ----------------               ------</span><br><span class="line">|<span class="string"> Java线程 </span>|<span class="string"> &lt;----------&gt; </span>|<span class="string"> 工作内存 </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string">      Save     </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string"> 主 </span>|</span><br><span class="line">------------              -----------               |<span class="string">       和      </span>|<span class="string">               </span>|<span class="string">    </span>|</span><br><span class="line">------------              -----------               |<span class="string">               </span>|<span class="string">               </span>|<span class="string">    </span>|</span><br><span class="line">|<span class="string"> Java线程 </span>|<span class="string"> &lt;----------&gt; </span>|<span class="string"> 工作内存 </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string">     Load      </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string"> 内 </span>|</span><br><span class="line">------------              -----------               |<span class="string">               </span>|<span class="string">               </span>|<span class="string">    </span>|</span><br><span class="line">------------              -----------               |<span class="string">               </span>|<span class="string">               </span>|<span class="string">    </span>|</span><br><span class="line">|<span class="string"> Java线程 </span>|<span class="string"> &lt;----------&gt; </span>|<span class="string"> 工作内存 </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string">      操作     </span>|<span class="string">  &lt;----------&gt; </span>|<span class="string"> 存 </span>|</span><br><span class="line">------------              -----------                ----------------               ------</span><br></pre></td></tr></table></figure><p>这里所讲的 主内存、工作内存 与本书第2章所讲的Java内存区域中的Java堆、栈、方法区等并不是同一个层次的内存划分，<br>这两者基本上是没有关系的，<br>如果两者一定要勉强对应起来，<br>那从 变量、主内存、工作内存 的定义来看，<br>主内存 主要对应于 Java堆中的对象实例数据部分，<br>而 工作内存 则对应于 虚拟机栈中的部分区域。<br>从更低层次上说，<br>主内存 就直接对应于 物理硬件的内存 ，而为了 获取更好的运行速度，<br>虚拟机（甚至是硬件系统本身的优化措施）可能会让 工作内存 优先存储于 寄存器和高速缓存中，因为程序运行时 主要访问读写的 是工作内存。</p><blockquote><p>除了 实例数据，Java堆 还保存了 对象的其他信息<br>对于 HotSpot虚拟机 来讲，</p><ul><li>有 Mark Word（存储对象哈希码、GC标志、GC年龄、同步锁等信息）</li><li>Klass Point(指向存储类型元数据的指针)</li><li>及一些用于字节对齐补白的填充数据（如果实例数据刚好满足8字节对齐的话，则可以不存在补白）</li></ul></blockquote><h5 id="内存间交互操作"><a href="#内存间交互操作" class="headerlink" title="内存间交互操作"></a>内存间交互操作</h5><p>关于 主内存 与 工作内存 之间的 具体的 交互协议，<br>即 一个变量 如何从 主内存 拷贝到 工作内存、 如何从 工作内存 同步 回 主内存 之类的 实现细节，<br>Java内存模型 定义了以下 8种操作 来完成，<br>虚拟机实现时 必须保证 下面提及的每一种操作 都是 原子的、不可再分的（对于 double 和 long 类型的变量来说，load、store、read 和 write 操作在某些平台上允许有例外，这个问题在12.3.4节再讲）</p><blockquote><p>基于理解难度和严谨性考虑，最新的 JSR-133 文档中，已经放弃采用这8种操作去 定义Java内存模型的访问协议（仅是 描述方式 改变了，Java内存模型 并没有改变）。</p></blockquote><table>  <tr>    <th>operation</th>    <th>名称</th>    <th>作用变量</th>    <th>描述</th>  </tr>  <tr>    <td>lock</td>    <td>(锁定)</td>    <td>作用于 主内存 的 变量</td>    <td>它把 一个 变量 标识为 一条线程 独占 的 状态。</td>  </tr>  <tr>    <td>unlock</td>    <td>(解锁)</td>    <td>作用于 主内存 的 变量</td>    <td>它把 一个 处于锁定状态 的变量 释放出来，释放后的变量 才可以 被 其他线程 锁定。</td>  </tr>  <tr>    <td>read</td>    <td>(读取)</td>    <td>作用于 主内存 的 变量</td>    <td>它把 一个 变量的值 从 主内存 传输到 线程的工作内存中，以便随后的 load动作 使用。</td>  </tr>  <tr>    <td>load</td>    <td>(载入)</td>    <td>作用于 工作内存 的 变量</td>    <td>它把 read操作 从 主内存 中得到的 变量值 放入 工作内存 的变量副本 中。</td>  </tr>   <tr>    <td>use</td>    <td>(使用)</td>    <td>作用于 工作内存 的 变量</td>    <td>它把 工作内存中 一个变量的值 传递给 执行引擎，每当 虚拟机 遇到一个 需要使用到变量的值 的字节码指令时 将会执行这个操作。</td>  </tr>   <tr>    <td>assign</td>    <td>(赋值)</td>    <td>作用于 工作内存 的 变量</td>    <td>它把 一个 从执行引擎 接收到的值 赋给 工作内存的变量，每当 虚拟机 遇到 一个给变量赋值的字节码指令 时 执行这个操作。</td>  </tr>  <tr>    <td>store</td>    <td>(存储)</td>    <td>作用于 工作内存 的 变量</td>    <td>它把 工作内存 中 一个变量的值 传送到 主内存 中，以便 随后的write操作 使用。</td>  </tr>    <tr>    <td>write</td>    <td>(写入)</td>    <td>作用于 主内存 的 变量</td>    <td>它把 store操作 从 工作内存 中得到的 变量的值 放入 主内存 的 变量 中。</td>  </tr></table><p>如果要把 一个变量 从 主内存 复制到 工作内存，那就要 顺序地 执行 read和load 操作；<br>如果要把 变量 从 工作内存 同步回 主内存，就要 顺序地 执行 store和write 操作。</p><p>注意， Java内存模型 只要求上述 两个操作 必须按顺序执行，而没有保证是 连续执行。</p><p>也就是说，read和load之间，store和write之间 是可插入其他指令的，<br>如对主内存中的变量 a、b进行访问时，一种可能出现顺序是 read a、read b、load b、 load a。<br>除此之外，Java内存模型 还规定了 在执行上述8中基本操作时 必须满足如下规则：</p><ul><li>不允许 read和load、store和write 操作之一 单独出现；<ul><li>即 不允许 一个变量 从主内存读取了 但工作内存不接受；</li><li>或者从工作内存发起回写了 但主内存不接受的情况出现。</li></ul></li><li>不允许 一个线程 丢弃 它的 最近的 assign操作；<ul><li>即 变量 在 工作内存 中 改变了 之后 必须把 该变化 同步回 主内存。</li></ul></li><li>不允许 一个线程 无原因地（没有发生过任何assign操作）把 数据 从 线程的工作内存 同步回 主内存。</li><li>一个 新的变量 只能在 主内存 中“诞生”， 不允许 在工作内存中 直接使用 一个未被初始化（load或assign）的变量；<ul><li>换句话说，就是对 一个变量 实施 use、store操作之前，必须先执行过了 assign或load 操作；</li></ul></li><li>一个变量 在 同一时刻 只允许 一条线程 对其进行 lock操作，但 lock操作 可以被 同一条线程 执行多次，多次执行lock后，只有执行相同次数的 unlock操作，变量才会被解锁；</li><li>如果对 一个变量 执行 lock操作，那将会 清空工作内存 中 此变量的值，在 执行引擎 使用这个变量前，需要重新执行 load或assign操作 初始化变量的值。</li><li>如果 一个变量 事先没有被 lock操作 锁定，那就不允许 对它执行 unlock操作，也不允许去 unlock 一个被其他线程锁定住的 变量。</li><li>对 一个变量 执行 unlock操作 之前，必须先把 此变量 同步回 主内存 中（执行 store、write操作）；</li></ul><p>这 8种内存访问操作 以及 上述规则限定，再加上稍后介绍的对 volatile 的一些特殊规定，就已经完全确定了 java程序中 哪些内存访问操作 在并发下 是安全的。</p><p>由于这种定义 相当严谨 但又十分 烦琐（我觉得周大大这里可能是想打繁琐？），实践起来很麻烦，<br>所以 在12.3.6节中笔者将介绍这种定义的 一个等效判断原则 —– 先行发生原则，用来确定 一个访问 在并发环境下 是否 安全。</p><h5 id="对于-volatile-型变量的-特殊规则"><a href="#对于-volatile-型变量的-特殊规则" class="headerlink" title="对于 volatile 型变量的 特殊规则"></a>对于 volatile 型变量的 特殊规则</h5><p>关键字 volatile 可以说是 Java虚拟机 提供的 最轻量级 的 同步机制，<br>但是它 并不容易 完全被正确、 完整地理解，以至于许多程序员都习惯不去使用它，<br>遇到需要处理 多线程数据 竞争问题 的时候 一律使用 synchronized 来进行 同步。<br>（然而我也不是习惯不习惯的问题，是我根本不会用synchronized，不懂多线程并发这一块，根本没入门的问题）</p><p>了解 volatile变量的语义 对后面了解 多线程操作的其他特性 很有意义，<br>在本节中 我们将 多花费一些时间去弄清楚 volatile的语义 到底是什么。</p><p>Java内存模型 对 volatile 专门定义了 一些 特殊的访问规则，<br>在介绍 这些比较 拗口的规则定义 之前，笔者先用 不那么正式 但 通俗易懂的 语言 来介绍一下 这个关键字的作用。<br>（好人一生平安<del>~</del> 虽然我也不一定能看懂你通俗易懂的语言）</p><p>当 一个变量 定义为 volatile 之后，它 将具备 两种特性，<br>第一 是保证 此变量 对 所有线程 的 可见性，<br>这里的 “可见性” 是指当 一条线程 修改了 这个 变量的值，新值 对于 其他线程 来说 是可以立即得知的。<br>而 普通变量 不能做到这一点， 普通变量 的 值 在线程间 传递 均需要通过 主内存 来完成，<br>例如，线程A 修改 一个普通变量的值，然后 向 主内存 进行 回写，另外一条线程B 在线程A 回写完成 了之后 再从 主内存 进行 读取 操作，新变量值 才会对线程B可见。</p><p>（诶诶诶，这个我看懂了，可能原因在于我看了视频的原因，我怎么可以这么蠢。。。。）</p><p>关于 volatile变量的可见性，经常会被开发人员误会，认为以下描述成立：“volatile变量 对所有线程 是 立即可见 的，对 volatile变量 所有的 写操作 都能 立刻反应 到 其他线程之中，换句话说， volatile变量 在 各个线程中 是 一致的，所以基于 volatile变量 的 运算 在并发下 是安全的”。  </p><p>这句话的论据部分 并没有错， 但是其论据 并不能得出 “基于 volatile变量 的 运算 在并发下 是安全的”这个结论。  </p><p>（emm，我觉得论据部分也有点毛病，<br>个人观点：”volatile变量 对所有线程 是 立即可见的”， 立即可见吗？<br>不是之前说 普通变量的值在线程间传递均需要通过主内存来完成吗，<br>那既然是要通过主内存来完成的话，那是不是就需要执行那8个操作其中的read读取操作以及load、use操作等；<br>然后论据部分当中的 “对volatile变量 所有的 写操作 都能 立刻反应 到其他线程之中” 细品一下哦，能立刻反应？<br>不是8个操作当中工作内存的赋值操作assign这种的操作一旦有了还需要同步回主内存的吗？<br>也就是执行store以及write操作，以及立刻反映到其他线程之中难道不要 其他线程又要去清空其工作内存当中的该变量然后重新进行read、load….操作之类的？<br>还是说emm，<br>工作内存与主内存之间的这个交互非常快？快到那几个操作所需花费时间可以忽略不计所以说 立即可见、立即反应？<br>害，主要是自己也不懂，看了书和视频之后吧有问题也没有人可以解答下….〒▽〒）</p><p>volatile变量 在 各个线程的 工作内存 中不存在一致性问题<br>（在 各个线程的 工作内存中，volatile变量 也可以存在 不一致的 情况，但由于 每次使用之前 都要先刷新，执行引擎 看不到 不一致的情况，因此可以认为 不存在一致性问题），<br>但是Java里面的运算 并非 原子操作，导致 volatile变量 的运算 在 并发下一样是不安全的，</p><p>我们可以 通过一段简单的演示来说明原因，请看代码清单12-1 中演示的例子。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 <span class="number">12</span><span class="number">-1</span> <span class="keyword">volatile</span> 的运算</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * volatile 变量自增运算测试</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @author zzm</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> &#123;</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> race = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">        race++;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREADS_COUNT = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[THREADS_COUNT];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREADS_COUNT; i++)&#123;</span><br><span class="line">          threads[i] = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>()&#123;</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">                increase();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待所有累加线程都结束</span></span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount() &gt; <span class="number">1</span>)</span><br><span class="line">            Thread.<span class="built_in">yield</span>();</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(race);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>这段代码 发起了20个线程，每个线程 对 race变量 进行10000次自增操作，如果这段代码能够 正确并发 的话，最后输出的结果应该是200000。</p><p>读者运行完这段代码之后，并不会获得期望的结果，而且会发现 每次运行程序，输出的结果都不一样，都是一个小于 200000的数字，这是为什么呢？</p><p>问题就出现在 自增运算 “race++”之中，<br>我们用 Javap 反编译 这段代码之后，会得到代码清单12-2，<br>发现只有一行代码的 increase() 方法在 Class文件 中是由 4条字节码指令构成的（return 指令不是由 race++ 产生的，这条指令可以不计算），<br>从 字节码层面上 很容易就分析出 并发失败 的原因了：<br>当 getstatic指令 把 race 的值 取到 操作栈顶时，volatile关键字 保证了 race的值 在此时是正确的的，<br>但是在执行 iconst_1、iadd这些指令的时候，<br>其他线程 可能已经把 race的值 加大了，<br>而在 操作栈顶 的值 就变成了 过期的数据，<br>所以 putstatic 指令执行后就可能把 较小的 race值 同步回 主内存之中。</p><p>（恭喜我，竟然又看懂了这一段通俗易懂的话，原因可能在于我看了视频的缘故。。。）  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 <span class="number">12</span><span class="number">-2</span> VolatileTest 的字节码</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> increase();</span><br><span class="line">  Code:</span><br><span class="line">    Stack=<span class="number">2</span>, Locals=<span class="number">0</span>, Args_size=<span class="number">0</span></span><br><span class="line">    <span class="number">0</span>：   getstatic      #<span class="number">13</span>; <span class="comment">//Field race:I</span></span><br><span class="line">    <span class="number">3</span>：   iconst_1</span><br><span class="line">    <span class="number">4</span>：   iadd</span><br><span class="line">    <span class="number">5</span>：   putstatic      #<span class="number">13</span>; <span class="comment">//Field race:I</span></span><br><span class="line">    <span class="number">8</span>：   <span class="keyword">return</span></span><br><span class="line">  LineNumberTable:</span><br><span class="line">    Line <span class="number">14</span>: <span class="number">0</span></span><br><span class="line">    Line <span class="number">15</span>: <span class="number">8</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>客观地说，笔者在此使用 字节码 来分析 并发问题，仍然是 不严谨的，<br>因为即使 编译出来 只有一条字节码指令， 也不意味着 执行这条指令就是 一个原子操作。  </p><p>一条字节码指令 在 解释执行 时，解释器将要运行许多代码才能实现 它的语义，<br>如果是 编译执行，一条字节码指令 也可能 转化成若干条 本地机器码指令，<br>此处使用 -XX:+PrintAssembly 参数输出 反汇编 来分析会 更严谨 一些，<br>但考虑到读者阅读的方便，并且字节码已经能说明问题，所以此处使用字节码分析。</p><p>（我觉得这个考虑到读者方便，可能是考虑到了像我这种小白到时候看不懂，就解释的也就越讲越多越讲越多。。。。 真是太贴心了，贴心的暖宝宝）</p><p>由于 volatile变量 只能保证 可见性，<br>在不符合 以下两条规则的运算场景中，我们仍然要通过 加锁（使用 synchronized或java.util.concurrent中的原子类）来保证原子性。</p><ul><li>运算结果 并不依赖 变量 的当前值，或者 能够确保 只有单一的线程修改 变量的值。</li><li>变量 不需要 与 其他的状态变量 共同参与 不变约束。</li></ul><p>而在像 如下的代码清代12-3所示的 这类场景就很适合使用 volatile变量 来控制并发，当 shutdown() 方法被调用时，能保证 所有线程 中执行的 doWork() 方法都立即停下来。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 12-3 volatile 的使用场景</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">volatile boolean shutdownRequested;</span><br><span class="line"></span><br><span class="line">public void shutdown()&#123;</span><br><span class="line"><span class="code">      shutdownRequested = true;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void doWork()&#123;</span><br><span class="line"><span class="code">      while(!shutdownRequested)&#123;</span></span><br><span class="line"><span class="code">        // do stuff</span></span><br><span class="line"><span class="code">      &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>使用 volatile变量 的第二个语义 是 禁止指令重排序优化，<br>普通的变量 仅仅 会保证 在该方法的执行过程中 所有依赖 赋值结果 的地方 都能获取到 正确的结果，<br>而不能 保证 变量赋值 操作的顺序 与 程序代码中的执行顺序 一致。  </p><p>因为 在一个线程的方法 执行过程中 无法感知到这点，<br>这也就是 Java内存模型 中描述的所谓的 “线程内 表现为 串行 的语义”（Within-Tread As-If-Serial Semantics）。</p><p>上面的描述仍然不太容易理解，我们还是继续通过一个例子来看看为何 指令重排序 会 干扰 程序的并发执行，<br>演示程序如代码清单12-4所示。<br>（周大大真是说到我的心坎里去了，真是太为我这种人考虑了，岂止是不太容易理解！！简直，我都不好意思说自己是中国人了。害；╮(╯▽╰)╭）</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 12-4 指令重排序</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">Map configOptions;</span><br><span class="line"></span><br><span class="line">char[] configText;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此 变量 必须定义为 volatile</span></span><br><span class="line">volatile boolean initialized = false;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设以下代码在 线程A 中执行</span></span><br><span class="line"><span class="comment">// 模拟 读取配置信息，当读取完成后 将 initialized 设置为 true 以通知其他线程 配置可用</span></span><br><span class="line">configOptions = new HashMap();</span><br><span class="line">configText =  readConfigFile(fileName);</span><br><span class="line">processConfigOptions(configText, configOptions);</span><br><span class="line">initialized = true;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设以下代码在 线程B 中执行</span></span><br><span class="line"><span class="comment">// 等待 initialized 为 true，代表 线程A 已经把配置信息 初始化完成</span></span><br><span class="line">while (!initialized)&#123;</span><br><span class="line"><span class="code">  sleep();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 线程A 中初始化好的配置信息</span></span><br><span class="line">doSomethingWithConfig();</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>代码清单12-4中的程序是一段 伪代码，其中描述的场景十分常见，只是我们在处理配置文件时一般不会出现并发而已。  </p><p>如果定义 initialized变量 没有使用 volatile修饰，<br>就可能会由于 指令重排序的优化，<br>导致位于 线程A 中的最后一句代码 “initialized=true”被提前执行（这里虽然使用Java作为伪代码，但所指的 重排序优化 是 机器级 的 优化 操作，提前执行 是指 这句话对应的 汇编代码 被 提前执行），<br>这样在 线程B 中使用配置信息的代码 就可能出现错误，<br>而 volatile关键字 则可以避免此类情况的发生。</p><blockquote><p>volatile 屏蔽 指令重排序 的语义 在JDK1.5 才被完全修复，此前的JDK中 即使将变量声明为 volatile 也仍然不能完全避免 重排序 所导致的问题<br>(主要是 volatile变量 前后的代码 仍然存在 重排序 问题)，这点 也是在 JDK1.5 之前的Java中 无法安全地使用 DCL（双锁检测）来实现单例模式的原因。</p></blockquote><p>指令重排序 是 并发编程 中最容易让开发人员产生疑惑的地方，除了上面伪代码的例子之外，<br>笔者再举一个可以实际操作运行的例子来分析 volatile关键字 是如何 禁止指令重排序优化的。  </p><p>代码清单12-5是一段标准的 DCL单例代码，可以观察 加入volatile和未加入volatile关键字 所生成 汇编代码 的差别<br>（如何获得JIT的汇编代码，请参考4.2.7节）。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 12-5 DCL单例模式</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">public class Singleton&#123;</span><br><span class="line">    private volatile static Singleton instance;</span><br><span class="line"></span><br><span class="line">    public static Singleton getInstance()&#123;</span><br><span class="line">      <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">        synchronized ( Singleton.class )&#123;</span><br><span class="line">          <span class="keyword">if</span>(instance ==<span class="literal">null</span> )&#123;</span><br><span class="line">           <span class="built_in"> instance </span>= new Singleton();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">      Singleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>编译后，这段代码对 instance变量 赋值部分 如代码清单12-6所示。</p><p>(卧槽，我有病我为什么要抄这个代码清单12-6…)</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">                                代码清单 <span class="number">12</span><span class="number">-6</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">0x01a3de0f</span>: mov       $<span class="number">0x3375cdb0</span>,%esi           ; ...beb0cd75 <span class="number">33</span></span><br><span class="line">                                                 ;    &#123;oop(<span class="string">'Singleton'</span>)&#125;</span><br><span class="line"><span class="number">0x01a3de14</span>: mov       %eax,<span class="number">0x150</span>(%esi)           ; ..<span class="number">.89865001</span> <span class="number">0000</span></span><br><span class="line"><span class="number">0x01a3de1a</span>: shr       $<span class="number">0x9</span>,%esi                  ; ...clee09</span><br><span class="line"><span class="number">0x01a3de1d</span>: movb      $<span class="number">0x0</span>,<span class="number">0x1104800</span>(%esi)       ; ...c6860048 <span class="number">100100</span></span><br><span class="line"><span class="number">0x01a3de24</span>: lock  add1 $<span class="number">0x0</span>,(%esp)               ; ...f0830424 <span class="number">00</span></span><br><span class="line">                                                 ; *putstatic instance</span><br><span class="line">                                                 ; -</span><br><span class="line">Singleton::<span class="symbol">getInstance@</span><span class="number">24</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>通过 对比 就会发现， 关键变化 在于有 volatile修饰的变量，<br>赋值后（前面 mov %eax,0x150(%esi) 这句便是赋值操作） 多执行了一个” lock add1 $0x0,(%esp)” 操作，<br>这个操作相当于一个 内存屏障 （Memory Barrier 或 Memory Fence，指 重排序时 不能把 后面的指令 重排序到 内存屏障 之前的位置），<br>只有一个 CPU 访问 内存时，并不需要 内存屏障；<br>但如果有 两个或更多CPU 访问 同一块 内存，且 其中有一个在 观测 另一个，就需要 内存屏障 来保证 一致性了。</p><p>这句 指令 中的 “add1 $0x0,(%esp)”（把 ESP寄存器 的 值 加 0）显然是一个 空操作<br>（采用这个 空操作 而不是 空操作指令nop 是因为 IA32手册规定 lock前缀 不允许 配合 nop指令 使用），<br>关键在于 lock前缀，查询 IA32手册，<br>它的作用是使得 本CPU 的 Cache 写入了 内存，<br>该 写入动作 也会引起 别的CPU 或者 别的内核 无效化（Invalidate）其Cache，<br>这种操作相当于对 Cache中的变量 做了一次 前面介绍 Java内存模式 中所说的 ”store“和”write“操作。<br>所以通过这样一个 空操作，可让前面 volatile变量 的 修改 对 其他CPU 立即可见。</p><blockquote><p>Doug Lea 列出了各种处理器架构下的 内存屏障指令（<a href="http://g.oswego.edu/d1/jmm/cookbook.html）" target="_blank" rel="noopener">http://g.oswego.edu/d1/jmm/cookbook.html）</a></p></blockquote><blockquote><p>这个 <a href="http://g.oswego.edu/d1/jmm/cookbook.html" target="_blank" rel="noopener">http://g.oswego.edu/d1/jmm/cookbook.html</a> 我试了下访问不通；…</p></blockquote><p>（看到这些文字🙃，莫名我🙃就想起了高中的数学🙃还有大学的高等数学🙃。还想起了那个斐波拉契数列还有那个KMP模式匹配算法🙃，卧槽🙃）</p><blockquote><p>🙃🙃🙃捋一捋🙃🙃🙃</p><ul><li>加了volatile和不加volatile的区别：“0x01a3de24: lock  add1 $0x0,(%esp)               ; …f0830424 00”这一行代码是否存在</li><li>“0x01a3de14: mov       %eax,0x150(%esi)           ; …89865001 0000”这一句是赋值操作，相当于“instance = new Singleton();”这句话？</li><li>“add1 $0x0,(%esp)”相当于一个内存屏障；</li><li>内存屏障（Memory Barrier或 Memory Fence）作用：重排序时，不能把 后面的指令 重排序到 内存屏障 之前的位置<ul><li>举个例子，就好比emm之前那个代码块，两个线程，线程A与线程B；线程A负责读取配置信息；线程B等待线程A初始化配置信息完成；完成之后进行使用线程A初始化好的配置信息；在这当中如果线程A当中“initialized=true”这句话提前执行，那么就会导致线程B的判断失误不会再执行sleep()，从而执行下面的doSomethingWithConfig()方法；而此时执行这个方法就有可能会出错；</li></ul></li><li>“add1 $0x0,(%esp)”当中的esp指的是ESP寄存器</li><li>“add1 $0x0,(%esp)”该指令为一个空操作<ul><li>该 空操作 导致 本CPU 的 Cache 写入了 内存；</li><li>本CPU的Cache写入内存 相当于 Cache中的变量 做了一次“store”与“write”，也就是 同步回内存 的意思；</li><li>通过将 本CPU的Cache写入内存 的该空操作，从而使得volatile变量 的修改对其他CPU立即可见</li><li>这个空操作是不是也就是一个刷新的操作？类似？</li><li>意思也就是说这个ESP寄存器的值不是加0吗，那这个ESP寄存器的值这个应该是一个常量，然后加这个0对这个常量并不会起到什么影响，但是当中会有一个写操作，也就是assign这个操作；因为执行8个操作中其中的规则有一条是：不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存。</li><li>所以会去通过这样一个空操作，让前面的 volatile变量 的修改 对其他CPU立即可见</li><li>对了，这个CPU，其他CPU也就相当于是主内存了是吧</li></ul></li></ul></blockquote><p>那为何说 它禁止指令重排序 呢？<br>从 硬件架构 上讲，指令重排序 是指 CPU 采用了 允许将 多条指令 不按 程序规定的顺序 分开发送给 各相应 电路单元 处理。<br>但并不是说 指令任意重排， CPU 需要能 正确处理 指令 依赖情况 以保障 程序 能得出 正确的执行结果。</p><p>譬如<br>指令1 把 地址A 中的 值 加10，<br>指令2 把 地址A 中的 值 乘以2，<br>指令3 把 地址B 中的 值 减去3，<br>这时 指令1和指令2 是有依赖的，<br>它们之间的顺序 不能重排——–（A+10）<em>2和 A</em>2+10显然不相等，<br>但指令3 可以重排到指令1、2之前或者中间，<br>只要保证CPU执行后面 依赖到A、B值的操作时能获取到正确的A和B值即可。</p><p>所以在 本内CPU中（这个地方，本内？emm，是否是想说的是本内存or 本CPU啊？），重排序看起来依然是有序的。<br>因此， lock add1 $0x0,(%esp) 指令 把 修改 同步 到 内存时，意味着所有之前的 操作 都已经 执行完成，这样便形成了“指令重排序无法越过内存屏障”的效果。</p><p>解决了 volatile 的语义问题，再来看看在众多保障并发安全的工具中选用 volatile 的意义——-它能让我们的代码比使用其他的同步工具会更快吗？</p><p>在某些情况下，volatile 的 同步机制 的性能 确实要优于 锁（使用 synchronized 关键字 或 java.util.concurrent包里面的锁），<br>但是由于 虚拟机 对 锁 实行的许多 消除和优化，使得我们很难量化地认为 volatile 就会比 synchronized 快多少。  </p><p>如果让 volatile 自己与自己比较，那可以确定一个原则：<br>volatile变量 读操作的性能消耗 比 普通变量几乎没有什么差别，但是 写操作 则可能 会慢一些；<br>因为它需要 在本地代码中 插入许多 内存屏障指令 来保证 处理器 不发生 乱序执行。</p><p>不过即便如此，大多数场景下 volatile 的总开销 仍然要比 锁 低，<br>我们在 volatile与锁 中选择的唯一依据仅仅是 volatile的语义 能否满足使用场景的需求。</p><p>在本节的最后，我们回头看一下 Java内存模型 中对 volatile变量 定义的特殊规则。</p><p>假定 T 表示一个线程，V 和 W 分别表示 两个 volatile型变量，那么在进行read、load、use、assign、store和write 操作时需要满足如下规则：</p><ul><li>只有当 线程 T 对 变量 V 执行的前一个动作是 load 的时候，线程 T 才能对 变量 V 执行 use动作；<ul><li>并且，只有当 线程 T 对 变量 V 执行的 后一个动作 是 use 的时候，线程 T 才能对 变量 V 执行 load 动作。</li><li>线程 T 对 变量 V 的 use动作 可以认为是 和线程 T 对 变量 V 的 load、read动作相关联，必须连续一起出现<ul><li>（这条 规则 要求在 工作内存 中，每次使用 V 前都必须先从 主内存 刷新最新的值，用于保证 能看见 其他线程 对 变量 V 所做的修改后的值）。</li></ul></li></ul></li><li>只有当 线程 T 对 变量 V 执行的前一个动作是 assign 的时候，线程 T 才能对 变量 V 执行 store 动作；<ul><li>并且，只有当 线程 T 对变量 V 执行的 后一个动作 是 store 的时候可以认为是和 线程 T 对 变量 V 的store、write动作相关联，必须 连续 一起出现<ul><li>（这条 规则 要求在 工作内存中，每次修改 V 后都必须立刻 同步回 主内存 中，用于保证 其他线程 可以看到 自己对变量 V 所做的修改）</li></ul></li></ul></li><li>假定 动作 A 是 线程 T 对 变量 V 实施的 use 或 assign 动作；<br>假定 动作 F 是和 动作 A 相关联的 load 或 store 动作，<br>假定 动作 P 是和 动作 F 相关联的 read 或 write 动作；<br>类似的，<br>假定 动作 B 是 线程 T 对 变量 W 实施的 use 或 assign 动作，<br>假定 动作 G 是和动作 B 相关联的 load 或 store 动作，<br>假定 动作 Q 是和动作 G 相应的对 变量 W 的 read或write 动作。<br>如果 A 先于 B，那么 P 先于 Q<ul><li>（这条 规则 要求 volatile 修饰的变量 不会被 指令重排序优化，保证 代码的执行顺序 和 程序的顺序 相同）</li></ul></li></ul><blockquote><p>理解为就好像是一个要 read-load-use 努力刷新；一个assign-store-write 努力更新一样</p></blockquote><h5 id="对于-long-和-double-型变量的特殊规则"><a href="#对于-long-和-double-型变量的特殊规则" class="headerlink" title="对于 long 和 double 型变量的特殊规则"></a>对于 long 和 double 型变量的特殊规则</h5><p>java内存模型 要求 lock、unlock、read、load、use、assign、store、write 这个 8个操作 都具有 原子性，<br>但是对于 64位的数据类型（ long 和 double ），在模型中特别定义了一条相对宽松的规定：允许 虚拟机 将 没有被 volatile 修饰的 64位数据的 读写操作 划分为 两次32位的操作 来进行，即允许 虚拟机 实现选择 可以 不保证64位数据类型的 load、store、read和write这个4个操作的原子性，<br>这点就是所谓的 long和double 的非原子性协定（Nonatomic Treatment of double and long Variables）。</p><p>如果有 多个线程 共享一个 并未声明为 volatile的 long 或 double 类型的变量，并且同时对它们进行 读取和修改 操作，<br>那么 某些线程 可能会 读取到一个 既非原值，也不是其他线程修改值的 代表了 “半个变量”的数值。</p><p>不过这种读取到 “半个变量”的情况 非常罕见（在目前 商用java虚拟机 中不会出现），<br>因为 java内存模型 虽然允许虚拟机不把 long和double 变量的 读写 实现成原子操作，<br>但允许 虚拟机 选择把这些操作实现为 具有原子性的操作，而且还 “强烈建议” 虚拟机 这样实现。</p><p>在实际开发中，目前各种平台下的 商用虚拟机 几乎都选择把 64位数据的读写操作 作为 原子操作 来对待，<br>因此我们在编写代码时 一般不需要把用到的 long和double 变量专门声明为 volatile。</p><h5 id="原子性、可见性和有序性"><a href="#原子性、可见性和有序性" class="headerlink" title="原子性、可见性和有序性"></a>原子性、可见性和有序性</h5><p>介绍完 Java内存模型 的 相关操作和规则，<br>我们再整体回顾一下 这个模型的特征。</p><p>Java内存模型 是围绕着在 并发过程中 如何处理原子性、可见性和有序性 这3个特征来建立的，<br>我们逐个来看一下哪些操作实现了这3个特性。</p><p><strong>原子性（Atomicity）</strong>：由 Java内存模型 来直接保证的 原子性变量操作 包括 read、load、assign、use、store和write</p><p>我们大致可以认为 基本数据类型的访问读写 是具备原子性的（例外就是 long和double 的非原子性协定，读者只要知道这件事情就可以了，无需太过在意这些几乎不会发生的例外情况）</p><p>如果 应用场景 需要一个 更大范围的 原子性保证（经常会遇到），Java内存模型还提供了了 lock和unlock 操作来满足这种需求， </p><p>尽管 虚拟机 未把 lock和unlock 操作直接开放给用户使用，但是却提供了 更高层次的字节码指令 monitorenter和monitorexit 来 隐式地 使用这两个操作，这两个字节码指令反映到Java代码中 就是 同步块—–synchronized关键字，因此 synchronized 块之间的操作也具备原子性。</p><p><strong>可见性（Visibility）</strong>：可见性 是指当 一个线程 修改了 共享变量的值，其他线程 能够 立即得知 这个修改。</p><p>上文在讲解 volatile变量 的时候我们已详细讨论过这一点。</p><p>Java内存模型 是通过在 变量修改后 将 新值 同步回 主内存，在变量读取前 从 主内存 刷新变量值 这种依赖主内存作为 传递媒介 的方式来实现可见性的，无论是 普通变量 还是 volatile变量 都是如此</p><p>普通变量与volatile变量 的区别是：volatile 的 特殊规则 保证了 新值 能立即 同步到 主内存，以及每次 使用前 立即从 主内存刷新。</p><p>因此，可以说 volatile 保证了 多线程操作时 变量的可见性，而 普通变量 则不能保证这一点。</p><p>除了 volatile 之外，Java还有两个关键字 能实现可见性，即 synchronized 和 final。</p><p>同步块 的 可见性 是由 “对一个 变量 执行 unlock 操作之前， 必须先把 此变量 同步回 主内存中（执行store、write操作）”这条规则获得的，</p><p>而 final 关键字 的可见性是指：被 final 修饰的字段 在构造器中 一旦初始化完成， 并且构造器 没有把“this”的引用 传递出去（this引用逃逸 是一件很危险的事情，其他线程 有可能 通过这个引用 访问到 “初始化了一半” 的对象），那在 其他线程 中就能看见 final字段的值。</p><p>如代码清单12-7所示，变量i和j都具备可见性，它们无需同步 就能被 其他线程正确访问。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 12-7 final 与可见性</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">public static final int i;</span><br><span class="line"></span><br><span class="line">public final int j;</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line"><span class="code">  i = 0;</span></span><br><span class="line"><span class="code">  // do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="code">  // 也可以选择在 构造函数中 初始化</span></span><br><span class="line"><span class="code">  j = 0;</span></span><br><span class="line"><span class="code">  // do something</span></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><strong>有序性（Ordering）</strong>：Java内存模型 的 有序性 在前面讲解 volatile 时也详细地讨论过了，<br>Java程序 中  天然的有序性 可以总结为一句话：</p><p>如果在 本线程 内观察，所有的操作 都是 有序的；<br>如果在 一个线程中 观察 另一个线程，所有的操作都是 无序的。</p><p>前半句是指 “线程内 表现为 串行的语义”（Within-Thread As-If-Serial Semantics），<br>后半句是指 “指令重排序”现象和 “工作内存与主内存同步延迟”现象。</p><p>Java语言 提供了 volatile和synchronized 两个关键字 来 保证 线程之间 操作的 有序性，<br>volatile关键字 本身就包含了 禁止指令重排序 的语义，<br>而 synchronized 则是由 “一个变量在同一时刻只允许一条线程 对其进行 lock 操作”这条规则获得的，这条规则 决定了 持有同一个锁的两个同步块 只能 串行地进入；</p><p>介绍完 并发 中 3种 重要的特性后，读者有没有发现 synchronized关键字 在需要这3种特性的时候 都可以作为其中一种的 解决方案？<br>看起来很“万能”吧。<br>的确，大部分的 并发控制 操作都能使用 synchronized 来完成。<br>synchronized 的“万能” 也间接造就了 它被程序员滥用的 局面，越“万能”的 并发控制，通常会伴随着越大的 性能影响，<br>这点我们将在第13章讲解 虚拟机锁优化时在介绍。  </p><h5 id="先行发生原则"><a href="#先行发生原则" class="headerlink" title="先行发生原则"></a>先行发生原则</h5><p>如果 Java内存模型 中所有的 有序性 都仅仅依靠 volatile 和 synchronized 来完成，那么有一些操作将会变得很 烦琐，<br>但是我们在编写Java并发代码的时候并没有感觉到这一点，<br>这是因为Java语言中有一个 “先行发生”（happens-before） 的 原则。<br>这个原则非常重要，它是 判断 数据是否竞争、线程是否安全 的 主要依据，依靠这个原则，我们可以通过几条规则一揽子地解决 并发环境下 两个操作之间是否可能存在冲突的所有问题。</p><p>现在就来看看 “先行发生”原则 指的是什么。<br>先行发生 是 Java内存模型 中定义的 两项操作 之间的 偏序关系，<br>如果说 操作A 先行发生于 操作B，其实就是说 发生在操作B 之前，操作A 产生的影响 能被 操作B 观察到，“影响” 包括 修改了内存中共享变量的值、发送了消息、调用了方法等。<br>这句话不难理解，但它 意味着什么呢？<br>我们可以举个例子来说明一下，如代码清单12-8中所示的这3句伪代码。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 12-8 先行发生原则示例1</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 以下操作在 线程A 中执行</span></span><br><span class="line">i = 1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下操作在 线程B 中执行</span></span><br><span class="line">j = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下操作在 线程C 中执行</span></span><br><span class="line">i = 2;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>假设 线程A 中的操作 “i=1;” 先行发生于 线程B 的操作“j=i“ ，<br>那么可以确定在 线程B 的操作执行后，变量j的值一定等于1，<br>得出这个结论的依据有两个：<br>一是根据 先行发生原则， “i=1”的结果可以被观察到；<br>二是 线程C 还没“登场”， 线程A 操作结束之后没有其他线程 会修改变量i的值。</p><p>现在再来考虑 线程C，我们依然保持 线程A 和 线程B 之间的 先行发生关系，<br>而 线程C 出现在 线程A 和 线程B 的操作之间，<br>但是 线程C 与 线程B 没有 先行发生关系，<br>那 j 的值会是多少呢?</p><p>答案是不确定！<br>1和2都有可能，因为 线程C 对 变量i 的影响 可能会被 线程B 观察到，<br>也可能不会， 这时候 线程B 就存在 读取到 过期数据的风险，不具备 线程安全性。</p><p>下面是 Java内存模型 下一些“天然的”先行发生关系，<br>这些 先行发生关系 无需任何 同步器 协助，可以在编码中直接使用。</p><p>如果 两个操作 之间的关系不在此列，并且无法从下列规则推导出来的话，它们就 没有顺序性保障，虚拟机 可以对它们 随意地 进行 重排序。</p><p><strong>程序次序规则（Program Order Rule）</strong>：<br>在 一个线程 内，按照 程序代码 顺序，书写在前面的操作 先行发生于 书写在后面的操作。<br>准确地说，应该是 控制流顺序 而不是 程序代码顺序， 应为要考虑 分支、循环 等结构。</p><p><strong>*管程锁定规则（Monitor Lock Rule）</strong>：<br>一个 unlock操作 先行发生于 后面对 同一个锁 的 lock操作。<br>这里必须强调的是 同一个锁，而 “后面” 是指 时间上的先后顺序。</p><p><strong>volatile 变量规则（Volatile Variable Rule）</strong>：<br>对 一个 volatile变量 的 写操作 先行发生于 后面对这个变量的 读操作，<br>这里的 “后面”同样是指 时间上的先后顺序。</p><p><strong>线程启动规则（Thread Start Rule）</strong>：<br>Thread 对象的 start() 方法 先行发生于 此线程的每一个动作。</p><p><strong>线程终止规则（Thread Termination Rule）</strong>：<br>线程 中的 所有操作 都 先行发生于 对此线程的 终止检测，<br>我们可以通过 Thread.join()方法结束、Thread.isAlive()的返回值 等手段 检测到 线程已经终止执行。</p><p><strong>线程中断规则（Thread Interruption Rule）</strong>：<br>对 线程 interrupt() 方法的调用 先行发生于 被 中断线程的代码 检测到 中断事件 的发生，可以通过 Thread.interrupted()方法 检测到 是否有中断发生。</p><p><strong>对象终结规则（Finalizer Rule）</strong>:<br>一个对象的 初始化 完成（构造函数执行结束） 先行发生于 它的 finalize() 方法的开始。</p><p><strong>传递性（Transitivity）</strong>:<br>如果 操作A 先行发生于 操作B，操作B 先行发生于 操作C，那就可以得出 操作A 先行发生于 操作C 的结论。</p><p>Java语言 无须 任何同步手段保障 就能成立的 先行发生规则 就只有上面这些了，<br>笔者演示一下 如何使用这些规则去判定 操作间是否具备顺序性，<br>对于 读写共享变量 的操作来说，就是 线程是否安全，<br>读者还可以从下面这个例子中感受一下 “时间上的先后顺序” 与 “先行发生” 之间有什么不同。<br>演示例子如代码清单12-9所示。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 12-9 先行发生原则示例2</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">private int  value = 0;</span><br><span class="line"></span><br><span class="line">public void setValue(int value)&#123;</span><br><span class="line"><span class="code">  this.value=value;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getValue()&#123;</span><br><span class="line"><span class="code">  return value;</span></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>代码清单12-9中显示的是一组再普通不过的 getter/setter 方法，<br>假设存在 线程A和B， 线程A先（时间上的先后）调用了 “setValue”，<br>然后 线程B 调用了 同一个对象 的“getValue()”，那么 线程B 收到的返回值 是什么？</p><p>我们依次分析一下 先行发生原则 中的各项规则，<br>由于 两个方法 分别由 线程A和线程B 调用，不在一个线程中，所以 程序次序规则 在这里不适用；</p><p>由于 没有同步块，自然就不会发生 lock和unlock 操作，所以 管程锁定规则 不适用；</p><p>由于 value变量 没有被 volatile关键字 修饰，所以 volatile变量规则 不适用；</p><p>后面的 线程启动、终止、中断规则和对象终结规则 也和这里完全没有关系。</p><p>因为 没有一个适用的 先行发生原则，所以最后一条 传递性 也无从谈起，</p><p>因此我们可以判定尽管 线程A 在操作时间上 先于 线程B，但是无法确定 线程B 中“getValue()”方法返回的结果，<br>换句话说，这里面的操作不是 线程安全的。</p><p>那怎么修复这个问题呢？</p><p>我们至少有两种比较简单的方案可以选择：<br>要么把 getter/setter 方法都定义为 synchronized 方法，这样就可以田勇 管程锁定规则；</p><p>要么把 value 定义为 volatile变量，由于 setter方法 对 value的修改 不依赖 value的原值，满足 volatile关键字使用场景，<br>这样就可以 套用volatile变量规则 来实现 先行发生关系。</p><p>通过上面的例子，我们可以得出结论：<br>一个操作 “时间上的先发生” 不代表这个操作 会是 “先行发生”，<br>那如果 一个操作 “先行发生” 是否就能推导 这个操作 必定是 “时间上的先发生” 呢？</p><p>很遗憾，这个推论也是不成立的，一个典型的例子就是多次提到的 “指令重排序”，<br>演示例子如代码清单12-10所示。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">                                代码清单 12-10 先行发生原则示例3</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 以下操作在同一个线程中执行</span></span><br><span class="line">int i = 1;</span><br><span class="line">int j = 2;</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>代码清单12-10的 两条赋值语句 在 同一个线程 之中，<br>根据 程序次序规则， “int i=1” 的操作 先行发生于 “int j=2”，<br>但是 “int j=2”的代码完全可能先被 处理器 执行，这并不影响 先行发生原则的正确性，因为我们在 这条线程 之中没有办法感知到这点。</p><p>上面两个例子综合起来证明了一个结论：时间先后顺序 与 先行发生原则 之间基本没有太大的关系，所以我们衡量 并发安全问题 的时候不要受到 时间顺序的干扰，一切必须以 先行发生原则 为准。</p><h4 id="Java与线程"><a href="#Java与线程" class="headerlink" title="Java与线程"></a>Java与线程</h4><p>并发 不一定要 依赖 多线程（如PHP中很常见的 多进程并发），<br>但是在Java里面谈论 并发，大多数都与 线程 脱不开关系。</p><p>既然我们这本书探讨的话题是 Java虚拟机的特性，那讲到 Java线程，我们就从 Java线程 在 虚拟机中的实现 开始讲起。</p><h5 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h5><p>我们知道，线程 是比 进程 更轻量级 的 调度执行单位，<br>线程的引入 ，可以把 一个进程的 资源分配 和 执行调度 分开，各个线程 既可以 共享进程资源（内存地址、文件I/O等），又可以独立调度（线程 是 CPU 调度 的 基本单位）。</p><p>主流的 操作系统 都提供了 线程实现，Java语言则提供了 在不同硬件和操作系统平台下 对线程操作的统一处理，<br>每个已经执行 start()且还未结束的 java.lang.Thread类的实例，就代表了 一个线程。</p><p>我们注意到 Thread类与大部分的 Java API 有显著的区别，<br>他的所有关键方法都是 声明为Native的。</p><p>在 Java API中，一个 Native 方法 往往意味着 这个方法没有使用 或 无法使用 平台无关的手段来实现（当然也可能是为了 执行效率 而使用 Native 方法， 不过，通常 最高效率的手段 也就是 平台相关的手段）。</p><p>正因为如此，作者把本节的标题定为 “线程的实现” 而不是 “Java线程的实现”。</p><p>实现线程 主要有3中方式：<br>使用 内核线程 实现、<br>使用 用户线程 实现<br>和使用 用户线程 加 轻量级进程 混合实现。</p><h6 id="1-使用内核线程实现"><a href="#1-使用内核线程实现" class="headerlink" title="1.使用内核线程实现"></a>1.使用内核线程实现</h6><p>内核线程 （Kernel-Level Thread，KLT） 就是直接由 操作系统内核（Kernel，下称内核）支持的线程，<br>这种线程 由 内核 来完成 线程切换，<br>内核 通过操纵 调度器（Scheduler）对 线程 进行 调度 ，<br>并负责将 线程的任务 映射到各个 处理器 上。</p><p>每个 内核线程 可以视为 内核 的一个分身，<br>这样 操作系统 就有能力 同时处理多件事情，支持多线程 的 内核 就叫做 多线程内核（Multi-Threads Kernel）。</p><p>程序 一般不会直接去使用 内核线程，而是去使用 内核线程 的一种高级接口—-轻量级进程（Light Weight Process，LWP），<br>轻量级进程 就是我们通常意义上所讲的 线程，<br>由于 每个轻量级进程 都有一个 内核线程 支持，因此只有先支持 内核线程，才能有 轻量级进程。</p><p>这种 轻量级进程 与 内核线程 之间 1:1的关系 称为 一对一的线程模型，如图12-3所示。</p><p>（实活实说，这个图太难了🙃🙃🙃我画不出🙃🙃🙃）</p><p>由于 内核线程 的支持，每个 轻量级进程 都成为一个 独立的 调度单元，<br>即使有一个 轻量级进程 在系统调用中 阻塞了，也不会影响 整个进程继续工作，<br>但是 轻量级进程 具有它的局限性：<br>首先，由于是基于 内核线程 实现的，所以各种线程操作，如 创建、析构及同步，都需要进行 系统调用。<br>而系统调用的代价相对较高，需要在 用户态（User Mode）和内核态（Kernel Mode） 中 来回切换。<br>其次，每个轻量级进程 都需要有一个 内核线程 的支持，因此 轻量级进程 要消耗一定的 内核资源（如 内核线程 的 栈空间），<br>因此 一个系统 支持轻量级进程 的 数量 是有限的。</p><h6 id="2-使用用户线程实现"><a href="#2-使用用户线程实现" class="headerlink" title="2.使用用户线程实现"></a>2.使用用户线程实现</h6><p>从 广义 上来讲，一个线程 只要不是 内核线程，就可以认为是 用户线程（User Thread，UT），<br>因此，从这个定义上来讲，轻量级进程 也属于 用户线程，但 轻量级进程 的实现 始终是建立在 内核之上的，许多操作都要进行 系统调用，效率会受到限制。</p><p>而 狭义的 用户线程 指的是 完全建立在 用户空间的 线程库 上，系统内核 不能感知 线程存在的实现。</p><p>用户线程 的 建立、同步、销毁和调度 完全在 用户态 中完成，不需要 内核的帮助。</p><p>如果程序 实现得当，这种线程 不需要切换到 内核态，因此操作 可以使 非常快速且低消耗的，<br>也可以支持规模更大的线程数量，部分高性能 数据库中的多线程 就是由 用户线程 实现的。<br>这种 进程 与 用户线程 之间 1:N 的关系 称为 一对多的线程模型，如图12-4所示。</p><p>（不画图了自己去买书看看🙃🙃🙃）</p><p>使用 用户线程 的 优势 在于 不需要系统内核支援，劣势 也在于 没有系统内核的支援，所有的 线程操作 都需要 用户程序 自己处理。</p><p>线程的 创建、切换和调度 都是需要考虑的问题，而且由于 操作系统 只把 处理器资源 分配到 进程，<br>那诸如 “阻塞如何处理”、‘多处理器系统中如何将线程映射到其他处理器上“这类问题解决起来将会 异常困难，甚至不可能完成。</p><p>言而使用 用户线程实现的程序 一般都比较复杂，除了以前在不支持多线程的操作系统中（如DOS）的多线程程序 与 少数有特殊需求的程序外，<br>现在使用用户线程的程序越来越少了，Java、Ruby等语言都曾经使用过用户线程，最终又都放弃使用它。</p><blockquote><p>此处讲的“复杂”与“程序自己完成线程操作”，并不限制 程序中 必须编写了复杂的实现用户线程的代码，<br>使用用户线程的程序，很多都依赖特定的线程库来完成基本的线程操作，这些复杂性 都 封装在 线程库 之中。</p></blockquote><p>（🙃🙃🙃表示像我这种俗人估计一辈子都用不到用户线程以及内核线程，而且估计我用到了我也不知道）</p><h6 id="3-使用用户线程加轻量级进程混合实现"><a href="#3-使用用户线程加轻量级进程混合实现" class="headerlink" title="3.使用用户线程加轻量级进程混合实现"></a>3.使用用户线程加轻量级进程混合实现</h6><p>线程 除了 依赖 内核线程 实现 和 完全由 用户程序 自己实现 之外，还有一种将 内核线程与用户线程 一起使用的实现方式。</p><p>在这种混合实现下，既存在 用户线程，也存在 轻量级进程。</p><p>用户线程 还是完全建立在 用户空间 中，因此 用户线程 的 创建、切换、析构等操作依然廉价，并且可以支持 大规模的用户线程并发。</p><p>而操作系统提供支持的 轻量级进程 则作为用户线程和内核线程之间的 桥梁，这样可以使用 内核提供的线程调度功能及处理器映射，<br>并且 用户线程的系统调用 要通过 轻量级线程 来完成，大大降低了 整个线程 被完全阻塞 的风险。</p><p>在这种 混合模式中，用户线程和轻量级进程 的数量 是 不定的，即为 N:M 的关系，如图12-5所示，这种就是 多对多的线程模型。</p><p>许多 UNIX系列 的 操作系统， 如 Solaris、HP-UX 等都提供了 N:M 的线程模型 实现。</p><h6 id="4-Java线程的实现"><a href="#4-Java线程的实现" class="headerlink" title="4.Java线程的实现"></a>4.Java线程的实现</h6><p>Java线程 在 JDK1.2 之前，是基于称为 “绿色线程”（Green Threads）的 用户线程 实现的，<br>而在 JDK1.2 中，线程模型 替换为 基于操作系统 原生线程模型 来实现。</p><p>因此，在目前的JDK版本中，操作系统 支持怎样的 线程模型，很大程度上 决定了 Java虚拟机的线程 是怎样 映射的，<br>这点在 不同的平台商 没有办法 达成一致，虚拟机规范 中也并未限定 Java线程 需要使用哪种 线程模型 来实现。</p><p>线程模型 只对 线程的 并发规模和操作成本 产生影响，对Java程序的 编码和运行过程 来说，这些差异都是透明的。</p><p>对于 Sun JDK来说，它的 Windows版本和Linux版都是使用 一对一的线程模型 实现的，<br>一条Java线程 就 映射到 一条轻量级进程之中，因为 Windows和Linux 系统提供的线程模型就是 一对一的。</p><blockquote><p>Windows下由 纤程包（Fiber Package），Linux下也有 NGPT（在2.4内核的年代）来实现 N:M 模型，但是他们都没有成为主流。</p></blockquote><p>而在 Solaris平台 中，<br>由于 操作系统 的 线程特性 可以同时 支持  一对一（通过Bound Threads或Alternate Libthread 实现）及 多对多（通过 LWP/Thread Based Synchronization 实现） 的线程模型，<br>因此在 Solaris 版的JDK中 也对应提供了 两个平台专有的 虚拟机参数： -XX:+UseLWPSynchronization(默认值) 和 -XX:+UseBoundThreads 来明确指定虚拟机使用哪种 线程模型。</p><h5 id="Java线程调度"><a href="#Java线程调度" class="headerlink" title="Java线程调度"></a>Java线程调度</h5><p>线程调度 是指 系统 为 线程 分配 处理器使用权 的过程，<br>主要调度方式有两种，分别是 协同式线程调度（Cooperative Threads-Scheduling） 和 抢占式线程调度（Preemptive Threads-Scheduling）。</p><p>如果使用 协同式调度的多线程系统，线程的执行时间 由 线程本身 来控制，线程 把 自己的工作执行完了之后，要主动通知 系统 切换到 另外一个线程上。</p><p>协同式多线程 的 最大好处 是 实现简单，而且由于 线程要把自己的事情干完后才会进行 线程切换，切换操作 对 线程自己是可知的，所以没有什么 线程同步 的问题。</p><p>Lua语言中的 “协同例程” 就是这类实现。</p><p>它的 坏处 也很明显：线程执行时间 不可控制，甚至如果一个线程编写 有问题， 一直不告知系统进性 线程切换，那么程序就会 一直阻塞 在那里。</p><p>很久以前的 Windows3.x系统 就是使用 协同式 来实现 多进程多任务 的，相当不稳定，一个进程 坚持不让出 CPU 执行时间 就可能导致整个系统 崩溃。</p><p>如果使用 抢占式调度的多线程系统，那么 每个线程 将由 系统 来分配 执行时间，线程的切换不由 线程本身 来决定（在Java中，Thread.yield()可以让出执行时间，但是要获取执行时间的话，线程本身是没有什么办法的）。</p><p>在这种实现 线程调度 的方式下，线程的执行时间 是 系统 可控的，也不会有 一个线程 导致 整个进程阻塞 的问题，<br>Java使用的 线程调度方式 就是 抢占式调度。</p><blockquote><p>在JDK后续版本中 有可能会提供 协程（Coroutines）方式 来进行 多任务处理，相关资料可参见：<a href="http://wikis.sum.com/display/mlvm/Coroutines。" target="_blank" rel="noopener">http://wikis.sum.com/display/mlvm/Coroutines。</a></p></blockquote><p>与前面所说的 Windows3.x 的例子相对，在 Windows9x/NT 内核中就是使用 抢占式 来实现 多线程的，当一个进程出了问题，我们还可以使用 任务管理器 把这个 进程 “杀掉”，而不至于导致 系统崩溃。</p><p>虽然 Java线程调度 是系统自动完成的，<br>但是我们还是可以 “建议” 系统给某些 线程 多分配一点 执行时间，另外的一些线程则可以少分配一点——这一项操作可以通过设置 线程优先级 来完成。</p><p>Java语言 一共设置了 10个级别 的 线程优先级（ Thread.MIN_PRIORITY 至 Thread.MAX_PRIORITY ），在两个线程同时处于 Ready 状态时，优先级越高的 线程 越容易被 系统 选择执行。</p><p>不过，线程优先级 并不是 太靠谱，原因是 Java的线程 是通过 映射到 系统的 原生线程 上来实现的，<br>所以 线程调度 最终还是取决于 操作系统，虽然现在很多操作系统都提供 线程优先级 的概念，<br>但是并不见得能与 Java线程的优先级 一一对应，<br>如Solaris中 有 2147483648（2^32）中优先级，但Windows中就只有7中，比Java线程优先级多的系统还好说，中间留下一点空位就可以了，<br>但比Java线程优先级少的系统，就不得不出现几个 优先级相同的情况了。</p><p>表12-1 显示了 Java线程优先级 与 Windows线程优先级 之间的对应关系，<br>Windows平台的JDK中 使用了除 THREAD_PRIORITY_IDLE 之外的其余6种线程优先级。</p><table>  <thead>    <tr>      <th colspan="2">表 12-1 Java线程优先级与Windows线程优先级之间的对应关系</th>    </tr>  </thead>  <tr>    <th>Java线程优先级</th>    <th>Windows线程优先级</th>  </tr>  <tr>    <td>1（Thread.MIN_PRIORITY）</td>    <td>THREAD_PRIORITY_LOWEST</td>  </tr>    <tr>    <td>2</td>    <td>THREAD_PRIORITY_LOWEST</td>  </tr>    <tr>    <td>3</td>    <td>THREAD_PRIORITY_BELOW_NORMAL</td>  </tr>   <tr>    <td>4</td>    <td>THREAD_PRIORITY_BELOW_NORMAL</td>  </tr>   <tr>    <td>5</td>    <td>THREAD_PRIORITY_NORMAL</td>  </tr>   <tr>    <td>6</td>    <td>THREAD_PRIORITY_ABOVE_NORMAL</td>  </tr>    <tr>    <td>7</td>    <td>THREAD_PRIORITY_ABOVE_NORMAL</td>  </tr>    <tr>    <td>8</td>    <td>THREAD_PRIORITY_HIGHEST</td>  </tr>   <tr>    <td>9</td>    <td>THREAD_PRIORITY_HIGHEST</td>  </tr>   <tr>    <td>10（Thread.MAX_PRIORITY）</td>    <td>THREAD_PRIORITY_CRITICAL</td>  </tr></table><p>上文说到 “线程优先级并不是太靠谱”，不仅仅是说 在一些平台上 不同的优先级 实际会变得相同 这一点，还有其他情况 让我们不能太依赖 优先级：<br>优先级可能会被 系统 自行改变。<br>例如，在Windows系统中 存在一个称为 “优先级推进器”(Priority Boosting，当然它可以被关闭掉)的功能，<br>它的大致作用就是 当系统 发现 一个线程 执行得 特别“勤奋努力”的话，可能会越过 线程优先级 去为它 分配执行时间。<br>因此，我们不能在程序中 通过 优先级 来完全准确地 判断一组状态都为 Ready的线程 将会先执行哪一个。</p><h5 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h5><p>Java语言 定义了 5中线程状态，在 任意一个时间点， 一个线程只能 有且只有 其中的一种状态，这5种状态分别如下。</p><p>新建（New）：创建后 尚未启动 的线程 处于这种 状态。</p><p>运行（Runnable）：Runnable包括了 操作系统 线程状态中的 Running和Ready，也就是处于此状态的 线程 有可能正在执行，也有可能正在等待着 CPU 为它分配执行时间。</p><p>无限期等待（Waiting）：处于这种状态的 线程 不会被 分配CPU执行时间，它们要等待被 其他线程 显式地 唤醒。<br>以下方法会让线程陷入无限期的等待状态：</p><ul><li>没有设置 Timeout 参数的 Object.wait() 方法</li><li>没有设置 Timeout 参数的 Thread.join() 方法</li><li>LockSupport.park() 方法</li></ul><p>限期等待（Timed Waiting）：处于这种状态的 线程 也不会被分配 CPU执行时间，不过 无需等待被其他线程 显式地 唤醒，在一定时间之后 它们会由系统 自动唤醒。<br>以下方法会让线程 进入 限期等待 状态：</p><ul><li>Thread.sleep()方法</li><li>设置了 Timeout 参数的 Object.wait() 方法</li><li>设置了 Timeout 参数的 Thread.join() 方法</li><li>LockSupport.parkNanos()方法</li><li>LockSupport.parkUtil()方法</li></ul><p>阻塞（Blocked）：线程被 阻塞 了，<br>“阻塞状态”与“等待状态” 的区别是：<br>“阻塞状态”在等待着获取到一个 排他锁，这个事件 将在 另外一个线程 放弃这个锁的时候 发生；<br>而 “等待状态” 则是在 等待一段时间，或者唤醒动作的发生。<br>在程序等待进入 同步区域 的时候，线程将进入这种状态。</p><p>结束（Terminated）：已终止 线程 的 线程状态，线程已经 结束执行。</p><p>上述5种状态 在遇到 特定事件 发生的时候 将会 互相转换，它们的 转换关系 如图12-6 所示。</p><h5 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h5><p>本章中，我们首先了解了 虚拟机Java内存模型 的结构及操作，<br>然后讲解了 原子性、可见性、有序性 在 Java内存模型 中的体现，<br>最后介绍了 先行发生原则 的规则及使用。</p><p>另外，我们还了解了 线程 在 Java语言之中 是如何实现的。</p><p>关于 “高效并发” 这个话题，在本章中 主要介绍了 虚拟机如何实现“并发”，在第13章中，我们的主要关注点将是 虚拟机如何实现“高效”，<br>及 虚拟机对我们编写的并发代码 提供了什么样的 优化手段。</p>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试热点问题，synchronized原理剖析与优化</title>
      <link href="/2020/05/22/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%91/%E3%80%90%E9%94%81%E3%80%91Java%E9%9D%A2%E8%AF%95%E7%83%AD%E7%82%B9%E9%97%AE%E9%A2%98%EF%BC%8Csynchronized%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
      <url>/2020/05/22/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%91/%E3%80%90%E9%94%81%E3%80%91Java%E9%9D%A2%E8%AF%95%E7%83%AD%E7%82%B9%E9%97%AE%E9%A2%98%EF%BC%8Csynchronized%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E4%B8%8E%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1aJ411V763?from=search&amp;seid=6293835933701781647" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1aJ411V763?from=search&amp;seid=6293835933701781647</a>  </p><p>观看了这个视频之后，我建议啊😉，可以去看下那个《<strong>深入java虚拟机</strong>》这本书，因为这个课讲的内容跟这本书当中的<strong>第13章 线程安全与锁优化</strong>，内容十分相似；所以我认为可以当做是课后复习书的那种；<br>我也是经过了对比两者的内容才这么觉得；因为真的很相似；包括后面举的string的那个例子；<br>为了我更深刻的记忆；我决定我还是仔细看一遍这一部分内容；<br>（现在看来其实就是<strong>第五部分 高效并发</strong> 跟该课程视频讲的 非常非常相同了；）</p><h2 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typora-root-ur<span class="variable">l:</span> img</span><br><span class="line">typora-<span class="keyword">copy</span>-images-<span class="keyword">to</span>: img</span><br></pre></td></tr></table></figure><h3 id="深入学习并发编程中的synchronized"><a href="#深入学习并发编程中的synchronized" class="headerlink" title="深入学习并发编程中的synchronized"></a>深入学习并发编程中的synchronized</h3><blockquote><p>课程背景  </p></blockquote><p><strong>第一</strong>： 并发编程是java知识体系当中比较重要而且比较是比较难的一块内容。  </p><p>因为并发编程涉及的知识面比较广，然后比较抽象不好理解，因此如果我们想很好的掌握并发编程这块内容，其实是有一定难度的。<br>synchronized的原理以及其优化了解少。  </p><p><strong>第二</strong>： 并发编程在实际企业开发当中也是会遇到的，一个比较重要的比较棘手的问题。  </p><p>举个例子，铁道售票的12306网站，在一个时间段内，可能有大量的用户过来进行买票，那么此时就需要进行保证卖出去的票的数量是正确的的，既不能超卖也不能少卖。<br>另外还要保证整个执行过程的卖票的执行效率是比较高的。  </p><p>那么可以通过synchronized来进行保证卖票的数量是正确的，既不会超卖也不会少卖。  </p><p>但是又要去考虑这个性能问题，那么就可以看到synchronized在实际的企业开发当中也是一个棘手的问题。  </p><p><strong>第三</strong>： 并发编程现在是一个热点面试题。<br>synchronized当中出现了异常，会不会释放锁？<br>synchronized和Lock有什么区别？<br>synchronized和volatile有什么区别？<br>etc…</p><p>面试官通过并发面试题来考查面试者的并发编程掌握情况，来判断面试者是否能够满足企业需要，另外也能够判断面试者的技术水平。  </p><blockquote><p>课程介绍</p></blockquote><p>深入学习并发编程中的synchronized</p><ul><li>第一章：并发编程中的三个问题<ul><li>可见性<ul><li>（案例：共享变量，一个线程A不断地来读这个共享变量的值，再用另一个线程B对该共享变量的取值进行修改，可以观测到另一个线程B对该共享变量的修改，A线程并不能够感知得到，这就出现了可见性问题）</li><li>目标<ul><li>学习什么是可见性问题</li></ul></li><li>可见性概念<ul><li><strong>可见性（VIsibility）：是指当一个线程对共享变量进行了修改，那么另外的线程可以立即看到修改后的最新值。</strong></li></ul></li><li>可见性演示<ul><li>案例演示：一个线程根据boolean类型的标记flag，while循环，另一个线程改变这个flag变量的值，而第一个while循环的线程并不会停止循环。</li></ul></li><li>小结<ul><li>什么是可见性?<br><strong>可见性（Visibility）：是指当一个线程对共享变量进行了修改，那么另外的线程可以理解看到修改后的最新值</strong>。</li></ul></li></ul></li><li>原子性<ul><li>（案例：使用i++，通过5个线程分别来进行执行1000次i++，最终可以发现加出来的效果并非是5000，可能会少于5000，那么这个问题的原因就在于i++并不是一个原子操作，到时会通过java反汇编的方式来进行演示分析这个i++其实有4条指令）</li><li>目标<ul><li>学习什么是原子性问题</li></ul></li><li>原子性概念<ul><li><strong>原子性（Atomicity）：指在一次操作或多次操作中，呀么所有的操作全部得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行。</strong></li></ul></li><li>原子性演示<ul><li>案例演示：5个线程各执行1000次i++</li></ul></li></ul></li><li>有序性（一般来想的是程序会按照编写的代码的顺序来进行执行，那么实际上程序会去做一些优化措施，为了让代码的执行效率更高一点，会做编译器和运行期的优化操作，这其中也是用到了一个案例，有序性问题有可能会被重排序，那么导致在多线程的情况下，数据会出现错乱。）<ul><li>目标<ul><li>学习什么是有序性问题</li></ul></li><li>有序性概念<ul><li><strong>有序性（Ordering）: 是指程序代码在执行过程中的先后顺序，由于java在编译器以及运行期的优化，导致了代码的执行顺序未必就是开发者编写代码时的顺序。</strong></li></ul></li><li>有序性演示<ul><li>jcstress是java并发压测工具….</li></ul></li></ul></li></ul></li><li>第二章：java内存模型（JMM）（开始解决问题）<ul><li>计算机结构（CPU、内存、缓存由此来引出java内存模型，主内存、工作内存如何操作变量）</li><li>java内存模型<ul><li>主内存与工作内存之间的交互</li></ul></li></ul></li><li>第三章：synchronized保证三大特性<ul><li>synchronized与原子性<ul><li>目标</li><li>使用synchronized保证原子性</li><li>synchronized保证原子性的原理</li><li>小结</li></ul></li><li>synchronized与可见性</li><li>synchronized与有序性</li></ul></li><li>第四章：synchronized的特性（同步锁机制，synchronized作为锁的特性）<ul><li>可重入特性（指的是当一个线程进入到一个同步代码块当中时，获取了某一个锁之后，还能够再次进入同步代码块获取同一把锁。即可以重新再进入。）</li><li>不可中断特性</li></ul></li><li>第五章：synchronized的原理<ul><li>javap 反汇编</li><li>深入JVM源码<ul><li>目标</li><li>monitor监视器锁</li><li>monitor竞争</li><li>monitor等待</li><li>monitor释放</li><li>monitor是重量级锁</li></ul></li></ul></li><li>第六章：JDK6 synchronized优化<ul><li>CAS</li><li>java对象的布局<ul><li>锁升级过程</li></ul></li><li>偏向锁</li><li>轻量级锁</li><li>重量级锁</li><li>锁消除</li><li>锁粗化</li><li>平时写代码如何对synchronized优化<ul><li>减少synchronized的范围</li><li>降低synchronized锁的粒度</li><li>读写分离</li></ul></li></ul></li></ul><h2 id="可见性问题"><a href="#可见性问题" class="headerlink" title="可见性问题"></a>可见性问题</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>学习什么是可见性问题</p><h3 id="可见性概念"><a href="#可见性概念" class="headerlink" title="可见性概念"></a>可见性概念</h3><p>可见性（Visibility）：是指当一个线程对共享变量进行了修改，那么另外的线程可以立即看到修改后的最新值。</p><h3 id="可见性演示"><a href="#可见性演示" class="headerlink" title="可见性演示"></a>可见性演示</h3><p>案例演示：一个线程A根据boolean类型的标记flag，while循环，另一个线程B改变这个flag变量的值，那么线程A并不会停止循环。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.xxx.concurrent_problem;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  案例演示：</span></span><br><span class="line"><span class="comment">          一个线程对共享变量的修改，另一个线程不能立即得到最新值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01Visibility</span>&#123;</span></span><br><span class="line">    <span class="comment">//多个线程都会访问的数据，我们成为线程的共享数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="built_in">run</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws InterruptedException</span>&#123;</span><br><span class="line">      <span class="comment">//t1线程不断的来读取run共享变量的取值</span></span><br><span class="line">      Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">run</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      t1.start();</span><br><span class="line"></span><br><span class="line">      Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//t2线程对该共享变量的取值进行修改</span></span><br><span class="line">      Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="built_in">run</span> =  <span class="literal">false</span>;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"时间到，线层2设置为false"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      t2.start();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//可以观测得到t2线程对run共享变量的修改，t1线程并不能够读取到更改了之后的值；这就出现了可见性问题</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>什么是可见性？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 原子性问题</span><br></pre></td></tr></table></figure><p>package com.xxx.demo01_concurrent_problem;</p><p>import java.util.ArrayList;</p><p>/**<br>    案例演示：5个线程各执行1000次 i++;<br>*/<br>public class Test02Atomicity{<br>  private static int number = 0;<br>  public static void main(String[] args) throws InterruptedException{</p><pre><code>//5个线程都执行1000次i++Runnable increment = () -&gt; {  for( int i = 0 ; i &lt; 1000; i++){    number++;  }};//5个线程ArrayList&lt;Thread&gt; ts = new ArrayList&lt;&gt;();for(int i = 0; i &lt; 5 ; i++){  Thread t = new Thread(increment);  t.start();  ts.add(t);}for(Thread t : ts){  t.join();}//最终的效果即，加出来的效果不是5000，可能会少于5000//那么原因就在于i++并不是一个原子操作//到时候会通过java反汇编的方式来进行演示和分析，这个i++其实有4条指令System.out.println(&quot;number = &quot;+ number);</code></pre><p>  }<br>}</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">使用javap 反汇编<span class="class"><span class="keyword">class</span>文件，得到下面的 字节码指令：</span></span><br></pre></td></tr></table></figure><p>private static void lambda$main();<br>  Code:<br>     0: iconst_0<br>     1: istore_0<br>     2: iload_0<br>     3: sipush        1000<br>     6: if_           23<br>     9: getstatic     #12               // Field number:I<br>    12: iconst_1<br>    13: iadd<br>    14: putstatic     #12               // Field number:I<br>    17: linc          0, 1<br>    20: goto<br>    23: return</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">其中，对于 <span class="built_in">number</span>++ 而言（<span class="built_in">number</span>为静态变量 ），实际会产生如下的JVM字节码指令：</span><br></pre></td></tr></table></figure><p> 9: getstatic   #12      // Field number : I<br>12: iconst_1<br>13: iadd<br>14: putstatic   #12      // Field number : I</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">由此可见 number++ 是由多条语句组成，以上多条指令 在一个线程的情况下 是不会出问题的，但是在多线程情况下就可能会出现问题。</span><br><span class="line">比如一个线程在执行 <span class="number">13</span>: iadd 时，另一个线程又执行 <span class="number">9</span>: getstatic，会导致两次 number++，实际上只加了<span class="number">1</span>。</span><br><span class="line"></span><br><span class="line">### 小结</span><br><span class="line"></span><br><span class="line">什么是原子性</span><br><span class="line"></span><br><span class="line">```原子性（Atomicity）: 在一次的操作或多次操作中，要么所有的操作全部都得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行。</span><br></pre></td></tr></table></figure><h2 id="有序性问题"><a href="#有序性问题" class="headerlink" title="有序性问题"></a>有序性问题</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><p>学习什么是有序性问题</p><h3 id="有序性概念"><a href="#有序性概念" class="headerlink" title="有序性概念"></a>有序性概念</h3><p>有序性（Ordering）：是指程序代码在执行过程中的先后顺序，由于java在编译器以及运行期的优化，导致了代码的执行顺序未必就是开发者编写代码的顺序。</p><h3 id="有序性演示"><a href="#有序性演示" class="headerlink" title="有序性演示"></a>有序性演示</h3><p>jcstress 是java并发压测工具： <a href="https://wiki.openjdk.java.net/display/CodeTools/jcstress" target="_blank" rel="noopener">https://wiki.openjdk.java.net/display/CodeTools/jcstress</a></p><p>修改pom文件，添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jcstress<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcstress-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jcstress.version<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码<br>Test03Orderliness.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.concurrent_problem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openjdk.jcstress.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jcstress.infra.results.I_Result;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JCStressTest</span></span><br><span class="line"><span class="meta">@OutCome</span>(id = &#123;<span class="string">"1"</span> , <span class="string">"4"</span>&#125;, expect =  Expect.ACCEPTABLE, desc = <span class="string">"ok"</span>)</span><br><span class="line"><span class="meta">@OutCome</span>(id = <span class="number">0</span>, expect = EXPECT.ACCEPTABLE_INTERESTING, desc = <span class="string">"danger"</span>)</span><br><span class="line"><span class="meta">@State</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03Orderliness</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> ready = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程一 执行的代码</span></span><br><span class="line">    <span class="meta">@Actor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor1</span><span class="params">(I_Result r)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(ready)&#123;</span><br><span class="line">        r.r1 = num + num;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        r.r1 = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程二 执行的代码</span></span><br><span class="line">    <span class="meta">@Actor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor2</span><span class="params">(I_Result r)</span></span>&#123;</span><br><span class="line">      num = <span class="number">2</span>;</span><br><span class="line">      ready = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（有序性问题，有可能重排序从而导致在多线程的情况下，数据出现错乱问题。）</p><p>I_Result 是一个对象，有一个属性r1 用来保存结果，在多线程情况下可能出现几种结果？</p><p>情况1：线程1先执行actor1，这时 ready=false，所以进入else分支结果为1。</p><h2 id="计算机结构"><a href="#计算机结构" class="headerlink" title="计算机结构"></a>计算机结构</h2><p>第二章：Java内存模型（JMM）</p><p>在介绍 Java内存模型之前，先来看一下到底什么是计算机内存模型。</p><h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><p>学习计算机的主要组成<br>学习缓存的作用</p><h3 id="计算机结构简介"><a href="#计算机结构简介" class="headerlink" title="计算机结构简介"></a>计算机结构简介</h3><p>1945年6月，美籍 匈牙利 科学家 冯 诺依曼 最先提出把 计算机分作 五部分：计算器、控制器、存储器、输入和输出设备。<br>由于他对 现代计算机技术的特殊贡献，因此 冯 诺依曼 又被称为 “现代计算机之父”。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">--------------     -----------------        -------------</span><br><span class="line">|<span class="string"> 输入设备</span>|<span class="string"> ------→ </span>|<span class="string">    存储器    </span>|<span class="string"> -------→ </span>|<span class="string"> 输出设备 </span>|</span><br><span class="line">------------       -----------------         ------------</span><br><span class="line">     ↑                |<span class="string">  ↑    </span>|<span class="string">  ↑                 ↑</span></span><br><span class="line"><span class="string">     </span>|<span class="string">                </span>|<span class="string">  </span>|<span class="string">    </span>|<span class="string">  </span>|<span class="string">                 </span>|</span><br><span class="line">     |<span class="string">       ---------</span>|<span class="string">--</span>|<span class="string">----</span>|<span class="string">--</span>|<span class="string">----------       </span>|</span><br><span class="line">     |<span class="string">       </span>|<span class="string">        </span>|<span class="string">  </span>|<span class="string">    </span>|<span class="string">  </span>|<span class="string">         </span>|<span class="string">       </span>|</span><br><span class="line">     |<span class="string">       </span>|<span class="string">        ↓  </span>|<span class="string">    ↓  </span>|<span class="string">         </span>|<span class="string">       </span>|</span><br><span class="line">     |<span class="string">       </span>|<span class="string">   ----------  -----------   </span>|<span class="string">       </span>|</span><br><span class="line">     |<span class="string">       </span>|<span class="string">   </span>|<span class="string"> 运算器 </span>|<span class="string">   </span>|<span class="string"> 控制器 </span>|<span class="string">----</span>|<span class="string">-------</span>|</span><br><span class="line">     |<span class="string">       </span>|<span class="string">   ----------  -----------   </span>|</span><br><span class="line">     |<span class="string">       </span>|<span class="string">                    </span>|<span class="string">        </span>|</span><br><span class="line">     --------|<span class="string">---------------------        </span>|</span><br><span class="line">             |<span class="string">                        CPU  </span>|</span><br><span class="line">             -------------------------------</span><br></pre></td></tr></table></figure><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>中央处理器（CPU，central processing unit）是计算机系统的运算和控制核心。<br>计算机在执行程序的时候，每条指令都是在CPU中执行的，而执行的时候，又免不了要和数据打交道。</p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>计算机中所有程序的运行 都是在 内存中 进行的， 内存的作用是 用于暂时存放 CPU的运算数据，以及与 硬盘等 外部存储器 交换的数据。</p><p>CPU自产生以来，在逻辑结构、运行效率以及功能外延上取得了巨大发展。<br>但受制于 制造工艺以及成本等的限制，计算机的内存反倒在访问速度上并没有多大的突破，<br>因此CPU的处理速度和内存的访问速度之间的差距越拉越大，通常这种差距可以达到上千倍，极端情况下甚至会在上万倍以上。<br>这就导致CPU每次操作内存都要耗费很多等待时间。<br>内存的读写速度成为了计算机运行的瓶颈。</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>由于CPU和内存两边速度 严重的不对等，会导致CPU资源受到大量的限制，降低CPU整体的吞吐量，于是就有了在CPU与主内存之间增加缓存的设计，现在缓存的数量都可以增加到3级了，最靠近CPU的缓存称为L1，然后依次是L2，L3和主内存，CPU缓存模型如图 下图所示。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">                    单CPU双核的缓存结构</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">|<span class="string">--------------------------------------------</span>|</span><br><span class="line">|<span class="string">      -----------          -------------    </span>|</span><br><span class="line">|<span class="string">      </span>|<span class="string">  Core1  </span>|<span class="string">           </span>|<span class="string">  Core 2  </span>|<span class="string">    </span>|</span><br><span class="line">|<span class="string">      -----------          -------------    </span>|</span><br><span class="line">|<span class="string">           ↓                     ↓          </span>|</span><br><span class="line">|<span class="string">      -------------         -------------   </span>|</span><br><span class="line">|<span class="string">      </span>|<span class="string">  L1 Cache </span>|<span class="string">         </span>|<span class="string"> L1 Cache </span>|<span class="string">    </span>|</span><br><span class="line">|<span class="string">      -------------         -------------   </span>|</span><br><span class="line">|<span class="string">           ↓                    ↓           </span>|</span><br><span class="line">|<span class="string">      -------------         -------------   </span>|</span><br><span class="line">|<span class="string">      </span>|<span class="string">  L2 Cache </span>|<span class="string">         </span>|<span class="string"> L2 Cache </span>|<span class="string">    </span>|</span><br><span class="line">|<span class="string">      -------------         -------------   </span>|</span><br><span class="line">|<span class="string">           ↓                    ↓           </span>|</span><br><span class="line">|<span class="string">     ------------------------------------   </span>|</span><br><span class="line">|<span class="string">      </span>|<span class="string">          L3   Cache             </span>|<span class="string">   </span>|</span><br><span class="line">|<span class="string">     ------------------------------------   </span>|</span><br><span class="line">|<span class="string">                       </span>|<span class="string">                    </span>|</span><br><span class="line">|<span class="string">-----------------------</span>|<span class="string">---------------------</span></span><br><span class="line"><span class="string">                        ↓</span></span><br><span class="line"><span class="string">     ------------------------------------</span></span><br><span class="line"><span class="string">     </span>|<span class="string">              Memory              </span>|</span><br><span class="line">     ------------------------------------</span><br></pre></td></tr></table></figure><p>CPU Cache 分成了三个级别：L1、L2、L3。<br>级别越小越接近CPU，速度也更快，同时也代表着容量越小。</p><ol><li>L1是最接近CPU的，它容量最小，例如32k，速度最快，每个核上都有一个L1 Cache。</li><li>L2 Cache更大一些，例如256k，速度要慢一些，一般情况下每个核上都有一个独立的L2 Cache。</li><li>L3 Cache是三级缓存中最大的一级，例如12MB，同时也是缓存中最慢的一级，在同一个CPU插槽之间的核共享一个L3 Cache。</li></ol><p>Cache的出现是为了解决 CPU直接访问内存效率低下问题的，<br>程序在运行的过程中，CPU接收到指令后，它会最先向CPU中的一级缓存（L1 Cache）去寻找相关的数据，<br>如果命中缓存，CPU进行计算时就可以直接对CPU Cache中的数据进行读取和写入，<br>当运算结束之后，再将CPU Cache中的最新数据刷新到主内存当中，<br>CPU 通过直接访问Cache的方式 代替直接访问主内存的方式 极大地提高了 CPU的吞吐能力。  </p><p>但是由于 一级缓存（L1 Cache）容量较小，所以不可能每次都命中，这时 CPU 会继续向下一级的二级缓存（L2 Cache）寻找，<br>同样的道理，当所需要的数据在二级缓存中也没有的话，会继续转向L3 Cache、内存（主存）和硬盘。  </p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ol><li>说出计算机的主要组成</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CPU</span><br><span class="line">内存</span><br><span class="line">缓存</span><br></pre></td></tr></table></figure><ol start="2"><li>为什么会出现缓存？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## java内存模型</span><br><span class="line"></span><br><span class="line">### 目标</span><br><span class="line"></span><br><span class="line">学习java内存模型的概念和作用</span><br><span class="line"></span><br><span class="line">java内存模型（即 java Memory Model，简称JMM）。</span><br><span class="line"></span><br><span class="line">（java内存模型 和 以前学习的栈、堆、方法区、原空间这样的java内存结构是不一样的）</span><br><span class="line"></span><br><span class="line">很多小伙伴 将 “java内存结构” 与 “java内存模型”混淆。</span><br><span class="line"></span><br><span class="line">关于 “java内存模型”的权威解释，请参考 https:&#x2F;&#x2F;download.oracle.com&#x2F;otn-pub&#x2F;jcp&#x2F;memory_model-1.0-pfd-spec-oth-JSpec&#x2F;memory_model-1_0-pfd-spec.pdf</span><br><span class="line"></span><br><span class="line">Java 内存模型，是 Java虚拟机规范 中 所定义的一种内存模型，Java内存模型是标准化的，屏蔽掉了底层不同计算机的区别。</span><br><span class="line"></span><br><span class="line">JMM是一套规范， 描述了 Java程序中 各种变量（线程共享变量）的访问规则，以及在 JVM中 将变量 存储到 内存和从内存中读取变量 这样的底层细节，具体如下。</span><br><span class="line"></span><br><span class="line">* 主内存</span><br><span class="line">  * 主内存是 所有线程都共享的，都能访问的。所有的共享变量都存储于主内存。</span><br><span class="line">* 工作内存</span><br><span class="line">  * 每一个线程有自己的工作内存，工作内存只存储 该线程 对共享变量的副本。 线程对变量的所有的操作（读、取）都必须在工作内存中完成，而不能直接读写主内存中的变量，不同线程之间也不能直接访问对方 工作内存中的 变量。</span><br></pre></td></tr></table></figure><pre><code>Java Memory Model(Java 内存模型)</code></pre><hr><pre><code>--------------------------          ----------------------------|        线程1           |           |          线程2           ||                        |           |                          ||  -------------------   |           |  --------------------    ||  |  线程1工作内存    |  |           |  |  线程2工作内存    |    ||  |                  |  |           |  |                   |   ||  | ---------------- |  |           |  | ----------------  |   ||  | | 共享变量x副本 | |  |           |  | | 共享变量x副本 |  |   ||  | ---------------- |  |           |  | ----------------- |   ||  |                  |  |           |  |                   |   ||  --------------------  |           |  ---------------------   |            ↑                                      ↑            |                                      |            |←---------------JMM控制--------------→|            |                                      |            ↓                                      ↓</code></pre><hr><table><thead><tr><th>主内存</th></tr></thead><tbody><tr><td></td></tr><tr><td>——————      ——————-    —————</td></tr><tr><td></td></tr><tr><td>——————————————————————–</td></tr><tr><td><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### Java内存模型的作用</span><br><span class="line"></span><br><span class="line">## 主内存与工作内存之间的数据交互过程</span><br><span class="line"></span><br><span class="line">## synchronized保证原子性</span><br><span class="line"></span><br><span class="line">第三章：synchronized保证三大特性</span><br><span class="line"></span><br><span class="line">synchronized 能够保证在 同一时刻 最多只有一个线程执行该段代码，已达到保证并发安全的效果。</span><br></pre></td></tr></table></figure></td></tr><tr><td>synchronized( 锁对象 ){</td></tr><tr><td>// 受保护资源 / 临界区资源</td></tr><tr><td>}</td></tr><tr><td><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">synchronized 与 原子性</span><br><span class="line"></span><br><span class="line">### 目标</span><br><span class="line"></span><br><span class="line">学习使用 synchronized 保证原子性的原理</span><br><span class="line"></span><br><span class="line">### 使用 synchronized 保证原子性</span><br><span class="line"></span><br><span class="line">案例演示：<span class="number">5</span>个线程各执行<span class="number">1000</span>次 i++；</span><br></pre></td></tr></table></figure></td></tr><tr><td>package com.xxx.demo02_concurrent_problem;</td></tr></tbody></table><p>import java.util.ArrayList;</p><p>/**<br>  案例演示：5个线程各执行1000次 i++;<br>  */<br>  public class Test01Atomicity{<br>    private static int number = 0;</p><pre><code>public static void main(String[] args) throws InterruptedException{  Runnable increment = new Runnable(){    @Override    public void run(){      for(int i = 0; i &lt; 1000; i++){        synchronized(Test01Atomicity.class){          number++;        }      }    }  };  ArrayList&lt;Thread&gt; ts = new ArrayList();  for( int i = 0;  i &lt; 50 ; i++){    Thread t = new Thread(increment);    t.start();    ts.add(t);  }  for(Thread t : ts){    t.join();  }  System.out.println(&quot;number = &quot; + number);}</code></pre><p>  }</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>for ( int i = 0; i &lt; 1000; i++){<br>    synchronized( Test01Atomicity.class ){<br>      number++;<br>    }<br>}</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### synchronized 保证原子性的原理</span></span><br><span class="line"></span><br><span class="line">对 <span class="built_in">number</span>++ ，增加同步代码块后，保证同一时间 只有 一个线程操作 <span class="built_in">number</span>++; 就不会出现安全问题。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 小结</span></span><br><span class="line"></span><br><span class="line">synchronized 保证原子性的原理</span><br><span class="line"></span><br><span class="line">```对 <span class="built_in">number</span>++; 增加同步代码块后，保证同一时间只有一个线程操作 <span class="built_in">number</span>++;</span><br></pre></td></tr></table></figure><h2 id="synchronized保证可见性"><a href="#synchronized保证可见性" class="headerlink" title="synchronized保证可见性"></a>synchronized保证可见性</h2><h3 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h3><p>学习使用 synchronized 保证可见性的原理</p><h3 id="使用synchronized保证可见性"><a href="#使用synchronized保证可见性" class="headerlink" title="使用synchronized保证可见性"></a>使用synchronized保证可见性</h3><p>案例演示： 一个线程根据 boolean类型的标记flag，while循环，另一个线程改变这个flag变量的值，根据boolean 类型的标记flag进行while循环的那个线程 并不会停止循环。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.xxx.demo02_concurrent_problem;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    案例演示：</span></span><br><span class="line"><span class="comment">      一个线程根据 boolean 类型的标记flag，while循环，另一个线程改变这个flag变量的值，</span></span><br><span class="line"><span class="comment">      根据boolean 类型的标记flag进行while循环的那个线程 并不会停止循环。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01Visibility</span> &#123;</span></span><br><span class="line">    <span class="comment">// 多个线程都会访问的数据，我们称为 线程的共享变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="built_in">run</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws InterruptedException</span>&#123;</span><br><span class="line">      Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">run</span>)&#123;</span><br><span class="line">          <span class="comment">//增加对象共享数据的打印，println是同步方法</span></span><br><span class="line">          System.out.<span class="built_in">println</span>(<span class="string">"run = "</span> + <span class="built_in">run</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      t1.start();</span><br><span class="line"></span><br><span class="line">      Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">      Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="built_in">run</span> = <span class="literal">false</span>;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"时间到，线程2设置为 false"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="synchronized-保证可见性的原理"><a href="#synchronized-保证可见性的原理" class="headerlink" title="synchronized 保证可见性的原理"></a>synchronized 保证可见性的原理</h3><h2 id="synchronized保证有序性"><a href="#synchronized保证有序性" class="headerlink" title="synchronized保证有序性"></a>synchronized保证有序性</h2><p>synchronized 与 有序性</p><h3 id="目标-4"><a href="#目标-4" class="headerlink" title="目标"></a>目标</h3><p>学习使用 synchronized 保证有序性的原理</p><h3 id="为什么要重排序"><a href="#为什么要重排序" class="headerlink" title="为什么要重排序"></a>为什么要重排序</h3><p>重排序 是指 编译器 和 处理器 为了优化程序性能 而对 指令序列 进行 重新排序 的一种手段。  </p><h3 id="as-if-serial语义"><a href="#as-if-serial语义" class="headerlink" title="as-if-serial语义"></a>as-if-serial语义</h3><p>as-if-serial 语义的意思是：</p><p>不管怎么 重排序（编译器和处理器 为了提高 并行度），单线程程序的执行结果不能被改变。<br>编译器、runtime和处理器 都必须遵守 as-if-serial 语义。</p><p>以下数据有依赖关系，不能 重排序。</p><p>写后读：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">int a</span> = 1;</span><br><span class="line"><span class="attribute">int b</span> = a;</span><br></pre></td></tr></table></figure><p>写后写：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>读后写：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">int a</span> = 1;</span><br><span class="line"><span class="attribute">int b</span> = a;</span><br><span class="line"><span class="attribute">int a</span> = 2;</span><br></pre></td></tr></table></figure><p>编译器 和 处理器不会对 存在数据依赖关系的 操作 做重排序，<br>因为这种 重排序 会改变执行结果。</p><p>但是，如果操作之间 不存在数据依赖关系，这些操作就可能被 编译器和处理器 重排序。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="synchronized的可重入特性"><a href="#synchronized的可重入特性" class="headerlink" title="synchronized的可重入特性"></a>synchronized的可重入特性</h2><p>第四章：synchronized的特性</p><p>可重入特性</p><h3 id="目标-5"><a href="#目标-5" class="headerlink" title="目标"></a>目标</h3><p>了解什么是可重入<br>了解可重入的原理</p><h3 id="什么是可重入"><a href="#什么是可重入" class="headerlink" title="什么是可重入"></a>什么是可重入</h3><p>指的是 同一个线程的 可以多次获得 同一把锁。</p><p>(当一个线程执行到同步代码块获取到某一个锁之后，还能再次进入同步代码块，获取同样的一把锁，这是可以的，可以重新再进入)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.demo03_synchronized_nature;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  可重入特性</span></span><br><span class="line"><span class="comment">    指的是 同一个线程获得锁之后，可以直接再次获取该锁。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Runnable sellTicket =  <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">synchronized</span>(Demo01<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"我是run"</span>);</span><br><span class="line">            test01();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">synchronized</span>(Demo01<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"我是test01"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> Thread(sellTicket).start();</span><br><span class="line">      <span class="keyword">new</span> Thread(sellTicket).start();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="可重入原理"><a href="#可重入原理" class="headerlink" title="可重入原理"></a>可重入原理</h3><p>加锁次数 计数器（recursions 变量）</p><h3 id="可重入的好处"><a href="#可重入的好处" class="headerlink" title="可重入的好处"></a>可重入的好处</h3><ol><li>避免死锁</li><li>更好的封装代码</li></ol><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>什么是可重入</p><figure class="highlight plain"><figcaption><span>同一个线程的 可以 多次 获得 同一把锁```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">可重入的原理</span><br><span class="line">&#96;&#96;&#96;加锁次数计数器。（recursions变量）</span><br></pre></td></tr></table></figure><h2 id="synchronized的不可中断性"><a href="#synchronized的不可中断性" class="headerlink" title="synchronized的不可中断性"></a>synchronized的不可中断性</h2><h3 id="目标-6"><a href="#目标-6" class="headerlink" title="目标"></a>目标</h3><p>了解什么是不可中断</p><h3 id="什么时候不可中断"><a href="#什么时候不可中断" class="headerlink" title="什么时候不可中断"></a>什么时候不可中断</h3><p>一旦这个锁 被别人 获得了，如果里另一个锁想获得锁，只能等待或者阻塞，直到别的线程释放这个锁，如果别人永远不释放锁，这个线程只能永远等下去，很执着！</p><h3 id="synchronized-不可中断演示"><a href="#synchronized-不可中断演示" class="headerlink" title="synchronized 不可中断演示"></a>synchronized 不可中断演示</h3><p>synchronized 是不可中断，处于阻塞状态的线程会一直等待锁。</p><p>(当一个线程进入一个同步代码块，那么另外一个线程只能在外面等待，这个处于等待的线程将会一直等待，不会中断，所以就叫做不可中断)</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class Demo02_Uninterruptible&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Object</span> o1 = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">    Runnable runnable =  () - &#123;</span><br><span class="line">      <span class="keyword">synchronized</span>( <span class="number">01</span> )&#123;</span><br><span class="line">        <span class="keyword">String</span> name = Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(name + <span class="string">"start"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(name + <span class="string">"interrupted"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReentrantLock可中断演示"><a href="#ReentrantLock可中断演示" class="headerlink" title="ReentrantLock可中断演示"></a>ReentrantLock可中断演示</h3><p>ReentrantLock可中断</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.xxx.demo03_synchronized_nature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.<span class="keyword">Lock</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Demo03_INterruptible&#123;</span><br><span class="line">    private static final <span class="keyword">Lock</span> o1 = <span class="built_in">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) throws InterruptedException&#123;</span><br><span class="line">      Runnable runnable = () -&gt; &#123;</span><br><span class="line">        String <span class="type">name</span> =  Thread.currentThread().getName();</span><br><span class="line">        <span class="type">boolean</span> isLock = <span class="keyword">false</span>;</span><br><span class="line">        try&#123;</span><br><span class="line">            isLock = o1.tryLock( <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">if</span>(isLock)&#123;</span><br><span class="line">              <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">name</span> + "lock");</span><br><span class="line">              Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch(InterruptedException e)&#123;</span><br><span class="line">          <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">name</span> + "interrupted");</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            <span class="keyword">if</span>(isLock)&#123;</span><br><span class="line">              o1.unlock();</span><br><span class="line">              <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">name</span> + "unlock");</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">name</span> + "指定时间内没有得到锁，中断，不等了，可以接着做其他事情。");</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="javap反汇编学习synchronized的原理"><a href="#javap反汇编学习synchronized的原理" class="headerlink" title="javap反汇编学习synchronized的原理"></a>javap反汇编学习synchronized的原理</h2><p>第五章：synchronized原理</p><p>javap 反汇编</p><h3 id="目标-7"><a href="#目标-7" class="headerlink" title="目标"></a>目标</h3><p>通过 javap 反汇编学习 synchronized的原理</p><p>编写一个简单的synchronized代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.demo04_synchronized_monitor;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Increment</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">synchronized</span>( obj )&#123;</span><br><span class="line">        number ++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"a"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">      Runnable increment = <span class="keyword">new</span> Increment();</span><br><span class="line">      Thread t = <span class="keyword">new</span> Thread(increment);</span><br><span class="line">      t.start();</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"number = "</span> + Increment.number);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要看 synchronized的原理，但是 synchronized是一个关键字，看不到源码。</p><p>可以将class文件进行反汇编。  </p><p>JDK自带的一个工具: javap，对字节码进行反汇编，查看字节码指令。</p><p>在DOS命令行输入：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javap -p -v -c</span><br><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\1</span>3666<span class="symbol">\I</span>deaProjects<span class="symbol">\X</span>xx<span class="symbol">\S</span>ynchronized<span class="symbol">\t</span>arget<span class="symbol">\c</span>lasses<span class="symbol">\c</span>om<span class="symbol">\x</span>xx<span class="symbol">\d</span>emo04_synchronized_monitor<span class="symbol">\I</span>ncrement.class</span><br></pre></td></tr></table></figure><p>反汇编后的效果如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">class</span> <span class="string">com.xxx.demo04_synchronized_monitor.Increment</span> <span class="string">implements</span> <span class="string">java.lang.Runnable&#123;</span></span><br><span class="line">  <span class="string">public</span> <span class="string">static</span> <span class="string">int</span> <span class="string">number;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">private</span> <span class="string">static</span> <span class="string">java.lang.Object</span> <span class="string">obj;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">com.xxx.demo04_synchronized_monitor.Increment();</span></span><br><span class="line">    <span class="attr">Code:</span></span><br><span class="line">      <span class="attr">0 :</span> <span class="string">aload_0</span></span><br><span class="line">      <span class="attr">1 :</span> <span class="string">invokespecial</span>   <span class="comment">#1       // Method java/lang/Object."&lt;init&gt;":()v</span></span><br><span class="line">      <span class="attr">4 :</span> <span class="string">return</span></span><br><span class="line"></span><br><span class="line">  <span class="string">public</span> <span class="string">void</span> <span class="string">run();</span></span><br><span class="line">    <span class="attr">Code:</span></span><br><span class="line">      <span class="attr">0 :</span> <span class="string">iconst_0</span></span><br><span class="line">      <span class="attr">1 :</span> <span class="string">istore_1</span></span><br><span class="line">      <span class="attr">2 :</span> <span class="string">iload_1</span></span><br><span class="line">      <span class="attr">3 :</span> <span class="string">sipush</span>    <span class="number">1000</span></span><br><span class="line">      <span class="attr">6 :</span> <span class="string">if_icmpge</span> <span class="number">39</span></span><br><span class="line">      <span class="attr">9 :</span> <span class="string">getstatic</span> <span class="comment">#2           // Field obj:Ljava/lang/Object</span></span><br><span class="line">      <span class="attr">12:</span> <span class="string">dup</span></span><br><span class="line">      <span class="attr">13:</span> <span class="string">astore_2</span></span><br><span class="line">      <span class="attr">14:</span> <span class="string">monitorenter</span></span><br><span class="line">      <span class="attr">15:</span> <span class="string">getstatic</span> <span class="comment">#3           // Field number:I</span></span><br><span class="line">      <span class="attr">18:</span> <span class="string">iconst_1</span></span><br><span class="line">      <span class="attr">19:</span> <span class="string">iadd</span></span><br><span class="line">      <span class="attr">20:</span> <span class="string">putstatic</span> <span class="comment">#3           // Field number:I</span></span><br><span class="line">      <span class="attr">23:</span> <span class="string">aload_2</span></span><br><span class="line">      <span class="attr">24:</span> <span class="string">monitorexit</span></span><br><span class="line">      <span class="attr">25:</span> <span class="string">goto</span>      <span class="number">33</span></span><br><span class="line">      <span class="attr">28:</span> <span class="string">astore_3</span></span><br><span class="line">      <span class="attr">29:</span> <span class="string">aload_2</span></span><br><span class="line">      <span class="attr">30:</span> <span class="string">monitorexit</span></span><br><span class="line">      <span class="attr">31:</span> <span class="string">aload_3</span></span><br><span class="line">      <span class="attr">32:</span> <span class="string">athrow</span></span><br><span class="line">      <span class="attr">33:</span> <span class="string">iinc</span>      <span class="number">1</span><span class="string">,</span>  <span class="number">1</span></span><br><span class="line">      <span class="attr">36:</span> <span class="string">goto</span>      <span class="number">2</span></span><br><span class="line">      <span class="attr">39:</span> <span class="string">return</span></span><br><span class="line">   <span class="attr">Exception table:</span></span><br><span class="line">        <span class="string">from</span>   <span class="string">to</span>  <span class="string">target</span> <span class="string">type</span></span><br><span class="line">          <span class="number">15</span>   <span class="number">25</span>    <span class="number">29</span>    <span class="string">any</span></span><br><span class="line">          <span class="number">28</span>   <span class="number">31</span>    <span class="number">28</span>    <span class="string">any</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="string">public</span> <span class="string">synchronized</span> <span class="string">void</span> <span class="string">test();</span></span><br><span class="line">    <span class="attr">descriptor:</span> <span class="string">()V</span></span><br><span class="line">    <span class="attr">flags:</span> <span class="string">ACC_PUBLIC,</span> <span class="string">ACC_SYNCHRONIZED</span></span><br><span class="line">    <span class="attr">Code:</span></span><br><span class="line">        <span class="string">stack=2,</span>  <span class="string">locals=1,</span>  <span class="string">args_size=1</span></span><br><span class="line">            <span class="attr">0:</span> <span class="string">getstatic</span>     <span class="comment">#4              // Field</span></span><br><span class="line"><span class="attr">java/lang/System.out:Ljava/io/PrintStream:</span></span><br><span class="line">            <span class="attr">3:</span> <span class="string">ldc</span>           <span class="comment">#5              // String a</span></span><br><span class="line">            <span class="attr">5:</span> <span class="string">invokevirtual</span> <span class="comment">#6              // Method java/io/PrintStream.println:(Ljava/lang.String;)V</span></span><br><span class="line">            <span class="attr">8:</span> <span class="string">return</span></span><br><span class="line">        <span class="attr">LineNumberTable:</span></span><br><span class="line">          <span class="attr">line 16:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">line 17:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">LocalVariableTable:</span></span><br><span class="line">          <span class="string">Start</span>     <span class="string">Length</span>    <span class="string">Slot</span>  <span class="string">Name</span>  <span class="string">Signature</span></span><br><span class="line">            <span class="number">0</span>          <span class="number">9</span>       <span class="number">0</span>     <span class="string">this</span>   <span class="string">Lcom/xxx/demo04_synchronized_monitor/Increment;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">static</span> <span class="string">&#123;&#125;;</span></span><br><span class="line">    <span class="attr">Code:</span></span><br><span class="line">       <span class="attr">0:</span> <span class="string">iconst_0</span></span><br><span class="line">       <span class="attr">1:</span> <span class="string">putstatic</span>       <span class="comment">#3       // Field number:I</span></span><br><span class="line">       <span class="attr">4:</span> <span class="string">new</span>             <span class="comment">#4       // class java/lang/Object</span></span><br><span class="line">       <span class="attr">7:</span> <span class="string">dup</span></span><br><span class="line">       <span class="attr">8:</span> <span class="string">invokespecial</span>   <span class="comment">#1       // Method java/lang/Object."&lt;init&gt;":()V</span></span><br><span class="line">      <span class="attr">11:</span> <span class="string">putstatic</span>       <span class="comment">#2       // Field obj:Ljava/lang/Object</span></span><br><span class="line">      <span class="attr">14:</span> <span class="string">return</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="monitorenter"><a href="#monitorenter" class="headerlink" title="monitorenter"></a>monitorenter</h3><p>首先来看一下JVM规范中对于 monitorenter 和 monitorexit 的描述：</p><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.monitorenter" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.monitorenter</a></p><p>(<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jvms/se8/html/index.html</a>)</p><blockquote><p>Each object is associlated with a monitor.<br>A monitor is locked if and only if it has an owner.<br>The thread that executes monitorenter attempts to gain ownership of the monitor associated with objectref, as follows:</p></blockquote><ul><li>If the entry count of the monitor associated with objectref is zero,<br>the thread enters the monitor and sets its entry count to one.<br>The thread is then the owner of the monitor.</li><li>If the thread already owns the monitor associated with objectref,<br>it reenters the monitor, incrementing its entry count.</li><li>If another thread already owns the monitor associated with objectref,<br>the thread blocks until the monitor’s entry count is zero,<br>then tries again to gain ownership.</li></ul><p>翻译过来：<br>  每一个对象 都会和 一个监视器monitor关联。<br>  监视器被占用时会被锁住，其他线程无法来获取该monitor。<br>  当JVM执行某个线程的某个方法内部的monitorenter时，它会尝试去获取当前对象对应的monitor的所有权。<br>  其过程如下：</p><ol><li>若monitor的进入数为0，线程可以进入 monitor，并将 monitor的进入数 置为1。 当前线程成为 monitor的 owner（所有者）。</li><li>若线程已拥有 monitor的所有权，允许它 重入 monitor，则进入monitor的进入数加1。</li><li>若其他线程已经占有monitor的所有权，那么当前尝试获取monitor的所有权的线程会被阻塞，直到monitor的进入数变为0，才能重新尝试获取monitor的所有权。</li></ol><p>monitorenter线程获取锁，宁进入同步代码块。<br>同时只能有一个线程获取锁。</p><p>monitorenter 插入在同步代码块的开始位置，当底代码执行到该指令时，将会尝试获取该对象monitor的所有权，即尝试获得该对象的锁。</p><h3 id="monitorexit"><a href="#monitorexit" class="headerlink" title="monitorexit"></a>monitorexit</h3><p>首先来看一下 JVM规范 中对于 monitorenter和monitorexit的描述：</p><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.monitorexit" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.monitorexit</a></p><blockquote><p>The thread that executes monitorexit must be the owner of the monitor associated with the instance referenced ny objectref.<br>  The thread decrements the entry count of the monitor associated with objectref.<br>  iIf as a result the value of the entry count is zero , the thread exits the monitor and is no longer its owner.<br>  Other threads that are blocking to enter the monitor are allowed to attempt to do so.</p></blockquote><p>翻译过来：</p><ol><li>能执行 monitorexit 指令的线程 一定是 拥有当前对象的 monitor的所有权的线程。</li><li>执行 monitorexit时 会将 monitor的进入数减1。 当monitor的进入数减为0时，当前线程退出monitor，不再拥有monitor的所有权，此时其他被这个monitor阻塞的线程可以尝试去获取这个monitor的所有权。</li></ol><h2 id="面试题：synchronized与Lock的区别"><a href="#面试题：synchronized与Lock的区别" class="headerlink" title="面试题：synchronized与Lock的区别"></a>面试题：synchronized与Lock的区别</h2><h2 id="深入JVM源码-monitor监视器锁"><a href="#深入JVM源码-monitor监视器锁" class="headerlink" title="深入JVM源码-monitor监视器锁"></a>深入JVM源码-monitor监视器锁</h2><p>深入JVM源码</p><h3 id="目标-8"><a href="#目标-8" class="headerlink" title="目标"></a>目标</h3><p>通过JVM源码 分析 synchronized的原理</p><h3 id="monitor监视器锁"><a href="#monitor监视器锁" class="headerlink" title="monitor监视器锁"></a>monitor监视器锁</h3><p>(JVM底层由C++实现)</p><p>可以看出 无论是 synchronized代码块 还是 synchronized方法，<br>其线程安全的语义实现 最终依赖一个叫 monitor的东西，那么这个神秘的东西是什么呢？<br>下面来详细介绍一下。</p><p>在HotSpot虚拟机中，monitor是由ObjectMonitor实现的。<br>其源码是用c++来实现的，位于HotSpot虚拟机源码 ObjectMonitor.hpp文件中（src/share/vm/runtime/objectMonitor.hpp）。<br>ObjectMonitor主要数据结构如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ObjectMonitor()</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">_header</span>              <span class="string">=</span> <span class="literal">NULL</span><span class="string">;</span></span><br><span class="line">  <span class="string">_count</span>               <span class="string">=</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">  <span class="string">_waiters</span>             <span class="string">=</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">  <span class="string">_recursions</span>          <span class="string">=</span> <span class="number">0</span><span class="string">;</span> <span class="string">//</span> <span class="string">线程的重入次数</span></span><br><span class="line">  <span class="string">_object</span>              <span class="string">=</span> <span class="literal">NULL</span><span class="string">;</span> <span class="string">//存储该monitor的对象</span></span><br><span class="line">  <span class="string">_owner</span>               <span class="string">=</span> <span class="literal">NULL</span><span class="string">;</span> <span class="string">//标识拥有该monitor的线程</span></span><br><span class="line">  <span class="string">_WaitSet</span>             <span class="string">=</span> <span class="literal">NULL</span><span class="string">;</span> <span class="string">//处于wait状态的线程，会被加入到_WaitSet</span></span><br><span class="line">  <span class="string">_WaitSetLock</span>         <span class="string">=</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">  <span class="string">_Responsible</span>         <span class="string">=</span> <span class="literal">NULL</span><span class="string">;</span></span><br><span class="line">  <span class="string">_succ</span>                <span class="string">=</span> <span class="literal">NULL</span><span class="string">;</span></span><br><span class="line">  <span class="string">_cxq</span>                 <span class="string">=</span> <span class="literal">NULL</span><span class="string">;</span> <span class="string">//</span> <span class="string">多线程竞争锁时的单项列表</span></span><br><span class="line">  <span class="string">FreeNext</span>             <span class="string">=</span> <span class="literal">NULL</span><span class="string">;</span></span><br><span class="line">  <span class="string">_EntryList</span>           <span class="string">=</span> <span class="literal">NUll</span><span class="string">;</span> <span class="string">//处于等待锁block状态的线程，会被加入到该列表</span></span><br><span class="line">  <span class="string">_SpinFreq</span>            <span class="string">=</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">  <span class="string">_SpinClock</span>           <span class="string">=</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">  <span class="string">OwnerIsThread</span>        <span class="string">=</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ol><li>_owner: 初始化为NUll，当有线程占有该monitor时，owner标记为该线程的唯一表示。当线程释放monitor时，owner又恢复到NULL。owner是一个临界资源，JVM是通过CAS操作来保证其线程安全的。</li><li>_cxq: 竞争队列，所有请求锁的线程首先会被放在这个队列中（单向链接）。_cxq是一个临界资源，JVM通过CAS原子指令来修改_cxq队列。 修改前 _cxq的旧值 填入了 node的next字段， _cxq指向新值（新线程）。因此 _cxq是一个后进先出的stack(栈)。</li><li>_EntryList: _cxq队列中 有资格成为 候选资源的 线程 会被移动到该队列中。</li><li>_WaitSet: 因为调用wait方法而被阻塞的 线程会被放在该队列中。</li></ol><p>每一个java对象都可以与一个监视器 monitor关联，<br>可以把它理解成为一把锁，<br>当一个线程想要执行一段被synchronized圈起来的同步方法或者代码块时，<br>该线程得 先获取到 synchronized修饰的对象 对应的monitor。</p><p>java代码里不会 显式地去创造这么一个 monitor对象，<br>也无需创建，<br>事实上可以这么理解：<br>monitor并不是随着对象创建而创建的。<br>是通过 synchronized 修饰符 告诉 JVM 需要为 某个对象创建关联的 monitor对象。<br>每个线程都存在两个ObjectMonitor对象列表，分别为 free和 used列表。<br>同时JVM中也维护着 global locklist。<br>当线程需要 ObjectMonitor对象时，首先从线程自身的free表中申请，若存在则使用，若不存在则从 globallist 中申请。</p><p>ObjectMonitor 的数据结构包含三种队列： _cxq、_WaitSet和 _EntryList，他们之间的关系转换可以用下图表示：</p><h2 id="深入JVM源码-monitor竞争"><a href="#深入JVM源码-monitor竞争" class="headerlink" title="深入JVM源码-monitor竞争"></a>深入JVM源码-monitor竞争</h2><p>monitor竞争</p><ol><li>执行 monitorenter时，会调用 InterpreterRuntime.cpp</li></ol><p>（位于：src/share/vm/interpreterRuntime.cpp）的InterpreterRuntime::monitorenter 函数。</p><p>具体代码可参见 HotSpot源码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">IRT_ENTRY_NO_ASYNC</span>(<span class="selector-tag">void</span>, <span class="selector-tag">InterpreterRuntime</span><span class="selector-pseudo">:monitorenter(JavaThread</span>*  <span class="selector-tag">thread</span>, <span class="selector-tag">BasicObjectLock</span>* <span class="selector-tag">elem</span>))</span><br><span class="line"><span class="selector-id">#ifdef</span> <span class="selector-tag">ASSERT</span></span><br><span class="line">  <span class="selector-tag">thread-</span>&gt;<span class="selector-tag">last_frame</span>()<span class="selector-class">.interpreter_frame_verify_monitor</span>(<span class="selector-tag">elem</span>);</span><br><span class="line"><span class="selector-id">#endif</span></span><br><span class="line">  <span class="selector-tag">if</span>(<span class="selector-tag">PrintBiasedLockingStatistics</span>)&#123;</span><br><span class="line">    <span class="attribute">Atomic</span>::<span class="built_in">inc</span>(BiasedLocking::slow_path_entry_count_addr());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">Handle</span></span><br></pre></td></tr></table></figure><h2 id="深入JVM源码-monitor等待"><a href="#深入JVM源码-monitor等待" class="headerlink" title="深入JVM源码-monitor等待"></a>深入JVM源码-monitor等待</h2><h2 id="深入JVM源码-monitor释放"><a href="#深入JVM源码-monitor释放" class="headerlink" title="深入JVM源码-monitor释放"></a>深入JVM源码-monitor释放</h2><h2 id="深入JVM源码-monitor是重量级锁"><a href="#深入JVM源码-monitor是重量级锁" class="headerlink" title="深入JVM源码-monitor是重量级锁"></a>深入JVM源码-monitor是重量级锁</h2><h2 id="synchronized优化-CAS-AtomicInteger使用"><a href="#synchronized优化-CAS-AtomicInteger使用" class="headerlink" title="synchronized优化_CAS_AtomicInteger使用"></a>synchronized优化_CAS_AtomicInteger使用</h2><h2 id="synchronized优化-CAS原理"><a href="#synchronized优化-CAS原理" class="headerlink" title="synchronized优化_CAS原理"></a>synchronized优化_CAS原理</h2><h2 id="synchronized优化锁升级过程"><a href="#synchronized优化锁升级过程" class="headerlink" title="synchronized优化锁升级过程"></a>synchronized优化锁升级过程</h2><h2 id="synchronized优化-对象的布局"><a href="#synchronized优化-对象的布局" class="headerlink" title="synchronized优化-对象的布局"></a>synchronized优化-对象的布局</h2><h2 id="synchronized优化-偏向锁"><a href="#synchronized优化-偏向锁" class="headerlink" title="synchronized优化-偏向锁"></a>synchronized优化-偏向锁</h2><h2 id="synchronized优化-轻量级锁"><a href="#synchronized优化-轻量级锁" class="headerlink" title="synchronized优化-轻量级锁"></a>synchronized优化-轻量级锁</h2><h2 id="synchronized优化-自旋锁"><a href="#synchronized优化-自旋锁" class="headerlink" title="synchronized优化-自旋锁"></a>synchronized优化-自旋锁</h2><h2 id="synchronized优化-锁消除"><a href="#synchronized优化-锁消除" class="headerlink" title="synchronized优化-锁消除"></a>synchronized优化-锁消除</h2><h2 id="synchronized优化-锁粗化"><a href="#synchronized优化-锁粗化" class="headerlink" title="synchronized优化-锁粗化"></a>synchronized优化-锁粗化</h2><h2 id="平时写代码如何对synchronized优化"><a href="#平时写代码如何对synchronized优化" class="headerlink" title="平时写代码如何对synchronized优化"></a>平时写代码如何对synchronized优化</h2>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 锁 </tag>
            
            <tag> synchronized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流程图-markdown美人鱼🧜‍♀️图表</title>
      <link href="/2020/05/21/%E3%80%90%E7%90%90%E7%A2%8E%E9%9A%8F%E7%AC%94%E3%80%91/%E3%80%90%E6%B5%81%E7%A8%8B%E5%9B%BE%E3%80%91%E7%BE%8E%E4%BA%BA%E9%B1%BC/"/>
      <url>/2020/05/21/%E3%80%90%E7%90%90%E7%A2%8E%E9%9A%8F%E7%AC%94%E3%80%91/%E3%80%90%E6%B5%81%E7%A8%8B%E5%9B%BE%E3%80%91%E7%BE%8E%E4%BA%BA%E9%B1%BC/</url>
      
        <content type="html"><![CDATA[<p>🌟🌟🌟<br>😄刚刚找到两个找表情包Emoji的地方，嘿嘿😉，终于可以不用是颜文字了😉；（刚刚试了有些反应不出来…🙃,但是可以进行copy，paste啊哈哈哈🧙‍♀️ 🧙‍♀️ 🧙‍♀️ ）<br>参考blog: <a href="https://segmentfault.com/q/1010000021180710/" target="_blank" rel="noopener">https://segmentfault.com/q/1010000021180710/</a></p><ul><li>💫 <a href="https://unicode.org/emoji/charts/full-emoji-list.html" target="_blank" rel="noopener">https://unicode.org/emoji/charts/full-emoji-list.html</a></li><li>💫 <a href="https://emoji.muan.co/" target="_blank" rel="noopener">https://emoji.muan.co/</a></li><li>💫 <a href="https://www.webfx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">https://www.webfx.com/tools/emoji-cheat-sheet/</a></li></ul><hr><p>参考blog: <a href="http://kkpattern.github.io/2015/05/15/Embed-Chart-in-Jekyll.html" target="_blank" rel="noopener">http://kkpattern.github.io/2015/05/15/Embed-Chart-in-Jekyll.html</a></p><p>mermaid.full.min.js:  </p><ul><li><p>使用的是：<a href="https://www.bootcdn.cn/mermaid/0.2.4/" target="_blank" rel="noopener">https://www.bootcdn.cn/mermaid/0.2.4/</a> </p></li><li><p><a href="https://cdn.bootcdn.net/ajax/libs/mermaid/0.2.4/mermaid.full.min.js" target="_blank" rel="noopener">https://cdn.bootcdn.net/ajax/libs/mermaid/0.2.4/mermaid.full.min.js</a></p></li><li><p>我是采用的hexo的next主题所以找到自己的 theme/next/layout/layout.swig 当中进行编辑</p>  <figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> html_class = 'theme-next ' + theme.scheme %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> theme.motion.enable %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> html_class = html_class + ' use-motion' %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; html_class | lower &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">lang</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; config.language &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">include</span></span> '_partials/head.swig' %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> title %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">include</span></span> '_third-party/analytics/index.swig' %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery_lazyload/1.9.7/jquery.lazyload.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/minigrid@3.1.1/dist/minigrid.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/photos/photos.css"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/photos/photo.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--把script粘到这里就差不多了--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/mermaid/0.2.4/mermaid.full.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">........</span></span><br></pre></td></tr></table></figure></li></ul><p>然后就可以愉快的使用了流程图了；终于不用傻逼式截图或者自己画了；害；  </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"mermaid"</span>&gt;</span><br><span class="line">graph TD;</span><br><span class="line">    A<span class="comment">--&gt;B;</span></span><br><span class="line">    A<span class="comment">--&gt;C;</span></span><br><span class="line">    B<span class="comment">--&gt;D;</span></span><br><span class="line">    C<span class="comment">--&gt;D;</span></span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>上述代码放在了代码块<code>内容</code>当中显示；<br>下面就是上述代码直接粘在了markdown文件当中然后显示出来的内容；</p><div class="mermaid">graph TD;    A-->B;    A-->C;    B-->D;    C-->D;</div><p>现在得好好学学怎么画流程图了；哈哈哈哈<del>~</del></p><p>插入一下<strong>流程图mermaid语法</strong>，<br>参考blog 👇</p><ul><li><a href="https://www.jianshu.com/p/9810ba886955" target="_blank" rel="noopener">https://www.jianshu.com/p/9810ba886955</a></li><li><a href="https://blog.csdn.net/wangyaninglm/article/details/52887045" target="_blank" rel="noopener">https://blog.csdn.net/wangyaninglm/article/details/52887045</a></li></ul><p><strong>方向控制</strong></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">流程图分为竖向和横向两大类，竖向包括自上而下和自下而上两种顺序，横向包括从右到左和从左到右两种顺序。</span><br><span class="line">其对应语法分别为：graph TB/graph BT/graph RL/graph LR。</span><br><span class="line"></span><br><span class="line">TB - <span class="built_in">top</span> <span class="built_in">bottom</span>（自上而下）</span><br><span class="line">BT - <span class="built_in">bottom</span> <span class="built_in">top</span>（自下而上）</span><br><span class="line">RL - <span class="built_in">right</span> <span class="built_in">left</span>（从右到左）</span><br><span class="line">LR - <span class="built_in">left</span> <span class="built_in">right</span>（从左到右）</span><br><span class="line">TD: 默认方向，从上到下</span><br></pre></td></tr></table></figure><p>测试下；</p><div class="mermaid">graph LR;    subgraph      A[h_user user:id:3506728370       :name ]-->B[春晚];    C[h_user user:id:3506728370       :fans ]-->D[12210862];    E[h_user user:id:3506728370       :blogs ]-->F[83];    end</div>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流程图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这世间，唯有青春与梦想不可辜负</title>
      <link href="/2020/05/16/%E3%80%90%E5%BF%83%E6%83%85%E3%80%91/%E8%BF%99%E4%B8%96%E9%97%B4%EF%BC%8C%E5%94%AF%E6%9C%89%E9%9D%92%E6%98%A5%E4%B8%8E%E6%A2%A6%E6%83%B3%E4%B8%8D%E5%8F%AF%E8%BE%9C%E8%B4%9F/"/>
      <url>/2020/05/16/%E3%80%90%E5%BF%83%E6%83%85%E3%80%91/%E8%BF%99%E4%B8%96%E9%97%B4%EF%BC%8C%E5%94%AF%E6%9C%89%E9%9D%92%E6%98%A5%E4%B8%8E%E6%A2%A6%E6%83%B3%E4%B8%8D%E5%8F%AF%E8%BE%9C%E8%B4%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1j4411j79x/?spm_id_from=trigger_reload" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1j4411j79x/?spm_id_from=trigger_reload</a>  </p><blockquote><p>衡水中学“学霸”励志演讲：这世间，唯有青春与梦想不可辜负</p></blockquote><p>这个是他的标题挺好的；<br>这个是我妹妹介绍我去看的，她们班上成人礼看了这个当时没看完，然后后面发烧回家把它又完整的看了一遍；我看了，然后本来是昨天看的，准备写些什么的；因为昨天一天面试了两轮，有点累；然后睡了昨天睡的很好；  </p><p>妹妹： 张锡锋<br>妹妹：原来我常常想，别人尊重我，是因为我很优秀；可是到了衡中才发现，别人尊重我，是因为别人很优秀，这是衡中学子独有的青春魅力。  </p><p>我跟我妹的关系，是一种十分平等的关系，就比如说推荐我或者说安利我看某个觉得意义非常大的一个视频什么的；或者是….总之我认为我现在和家人之间的一个相处的一个模式就是与家人都是一个平等的一个状态；我可以告诉你我现在的一个状态；你也向我倾诉你的心声；我觉得这种状态非常的好；好了不扯了；  </p><p>这个视频昨天看到后面其实我泪目了。<br>打动人心的地方可能在于的确有些话戳中心坎了。也有可能是我的心底还不够坚强坚硬吧。然后容易感动的缘故。  </p><p>总的来说我希望我，我认识我爱的人爱我的人不管年龄多少岁余生都能够朝着自己的一个目标而努力奋斗追逐着。  </p><p>下面是看视频的他的一个演讲的内容；我也是一边听一边写；对了其实我发现，就是在b站上面其实每天有50上下左右的人在看这个视频；其实他的这场演讲带来的力量也是很大的，能够做到一种就是正面积极向上在自己处于低糜或者是迷茫的这样一种状态下，然后给人一种就是正确的这样一个方向指引的作用是非常值得学习的；  </p><p>我也是其中的受益者即使我当前已经离开学校的生活步入社会了。  </p><p>好了不多说了，我这人就是容易比较话多有个时候自己跟自己说话都能说得睡不着觉。害，愁人。(｡•ˇ‸ˇ•｡)  </p><p>对了，建议请使用原速度进行播放，不要快进。（更有感觉）  </p><h2 id="演讲稿"><a href="#演讲稿" class="headerlink" title="演讲稿"></a>演讲稿</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">尊敬的老师，亲爱的同学们，大家好！（此时他鞠躬<span class="number">90</span>度，不错小伙子，哈哈哈哈哈~~~）</span><br><span class="line"></span><br><span class="line">我是<span class="number">838</span>班的张锡锋。</span><br><span class="line"></span><br><span class="line">相信很多同学应该认识我，在大家眼里，我扮演更多的通常是个谐星的角色。  </span><br><span class="line"></span><br><span class="line">可是大家似乎忘记了，在我这看似狂野，实则狂野的外表下（不哦老阿姨觉得你长的挺清秀的哦哈哈哈哈），也隐藏着一颗憧憬阳光的心。（很好）</span><br><span class="line"></span><br><span class="line">所以，我站在这里，与大家分享关于学习，（此处应该加个逗号，不然就变成了“学习我的看法” emm）我的看法。</span><br><span class="line"></span><br><span class="line">我演讲的主题是：青春与梦想。  </span><br><span class="line"></span><br><span class="line">话说这世间，唯有青春与梦想不可辜负。  </span><br><span class="line"></span><br><span class="line">花开正好，微风不燥，（我那句阳光正好微风不燥也是取自这里哈哈哈哈）我们扬帆，起航。  </span><br><span class="line"></span><br><span class="line">首先，青春，青春是什么颜色的？  </span><br><span class="line"></span><br><span class="line">是五月的花海，灿烂无比；是海边的浪花，永不停息；是仲夏的骄阳，激情四射。  </span><br><span class="line"></span><br><span class="line">青春在衡中，是绚丽多彩的；  </span><br><span class="line"></span><br><span class="line">原来啊，我常常想，别人尊重我，是因为，我很优秀。  </span><br><span class="line"></span><br><span class="line">可是，到了衡中才发现，别人尊重我，是因为，别人很优秀。  </span><br><span class="line"></span><br><span class="line">这，是衡中学子，独有的，青春魅力！  </span><br><span class="line"></span><br><span class="line">同样，正值青春，我们有犯错的权利。  </span><br><span class="line"></span><br><span class="line">记得第一次交改错本，我问老师要改多少？（好了，他在讲述他的二货经历了，跟我有的一比）</span><br><span class="line"></span><br><span class="line">老师说，根据个人情况，在精不在多。  </span><br><span class="line"></span><br><span class="line">哦呜？  </span><br><span class="line"></span><br><span class="line">是吗？</span><br><span class="line"></span><br><span class="line">这可是您说的。</span><br><span class="line"></span><br><span class="line">说时迟那时快，我顿时绽放了一个耀眼的笑容。（这个笑容可以想象）</span><br><span class="line"></span><br><span class="line">我心不在焉，草草了事。</span><br><span class="line"></span><br><span class="line">可是，改错发下来时却是，一片万紫千红的样子。  </span><br><span class="line"></span><br><span class="line">上面，有详细的批注，评语是这样的：这个改错改的不错，有些题改着改着就错了。（唉哟这个老师很皮哦）</span><br><span class="line"></span><br><span class="line">我们老师青春活泼的力量，就这样让学习生活妙趣横生。  </span><br><span class="line"></span><br><span class="line">其次，是这里青春的学习氛围（其实他这里停顿了一定时间，就是等着下面的同学渐渐静下来然后再说话，嗯，挺好的），当你满眼，都是追求卓越的字样时，便也，没理由落后了。  </span><br><span class="line"></span><br><span class="line">（好了，二货的自黑开始了）连我这个，被同学们誉为：古娜拉黑暗之神的人，也，早已经，在前往卓越的路上。</span><br><span class="line"></span><br><span class="line">我喜欢，在某个课间琢磨那些，优雅的，美丽的数学题。（的确，如果真的觉得诶这个的确十分有趣，其实是会慢慢的沉下去真正喜欢上这些以前觉得枯燥乏味的东西。比如说数据结构）</span><br><span class="line"></span><br><span class="line">（好了，二货长吸一口气，哈哈）小东西，真别致。（他这里又在等下面的声音静下来一点然后才开始说话，不错）</span><br><span class="line"></span><br><span class="line">我喜欢，在某天清晨头昏脑胀时，回想刚刚学过的，系统命名法。  </span><br><span class="line"></span><br><span class="line">哇，这一瞬间有一百万个可能。  </span><br><span class="line"></span><br><span class="line">我喜欢，某天晚上躺在床上，回想曾经背过的老子，“知人者智，自知者明。圣人者有力，自胜者强。” 我好困啊……</span><br><span class="line"></span><br><span class="line">第二，梦想。</span><br><span class="line"></span><br><span class="line">有一条路，人烟稀少寸步难行，但是，却不得不坚持前进，因为它的尽头，种着梦想。（这个时候我想到了一首纯音乐可以停下就是叫啥来着 the right path；然后通过这首纯音乐，我也发现了一首意义非常对于我而言非常好的一首小诗；黄色的树林里分出两条路 我选择了人迹更少的一条 从此决定了我一生的道路；同样也送给你们；有个时候听纯音乐，其实也是在听自己内心的声音。）</span><br><span class="line"></span><br><span class="line">同学们，你的梦想是什么？（我以前可能不知道，但是我现在知道了，也知道我前进的方向是什么了。）</span><br><span class="line"></span><br><span class="line">相信，很多人的回答都会是清北这样的顶尖名校。</span><br><span class="line"></span><br><span class="line">我们选择它们不仅仅因为它们是名校，还因为它们坐落的城市，它们美丽的传说。  </span><br><span class="line"></span><br><span class="line">对于痴迷于地理学科的我来说，外面的世界，外面的城市就是我的梦想。  </span><br><span class="line"></span><br><span class="line">这里，广东，对外开放的前沿，我把它做成卡贴随身携带；</span><br><span class="line"></span><br><span class="line">这里，上海，全中国最大的城市，我把它拍成照片贴在课桌上；  </span><br><span class="line"></span><br><span class="line">这里，西安，大唐不夜城，我做梦都会想起它。</span><br><span class="line"></span><br><span class="line">看完这些，不知道同学们心里有什么感触；（感触嘛，也有的，我也想去外面的世界多看看多走走多经历）</span><br><span class="line"></span><br><span class="line">此刻，你的心里是否充满了对未来的渴望？</span><br><span class="line"></span><br><span class="line">我问同学们一个问题，请大家伸出右手。</span><br><span class="line"></span><br><span class="line">看，它像什么？（他举起了右手，说实话吗？像手）</span><br><span class="line"></span><br><span class="line">像右手？</span><br><span class="line"></span><br><span class="line">这都被你发现了吗？（不错啊，都很皮，哈哈哈哈）</span><br><span class="line"></span><br><span class="line">同学们，果然见多识广啊！（那是那是，谦虚一点，自己人知道就行）</span><br><span class="line"></span><br><span class="line">请大家，五指并拢，放于腰间，慢慢高举，举过头顶，张开。</span><br><span class="line"></span><br><span class="line">成功了吗？那恭喜你！你给自己，放了个烟花。（不错的小伙子，哈哈哈哈）</span><br><span class="line"></span><br><span class="line">可是，烟花虽美，转瞬即逝。（我这个烟花不太美，五指太短了看不出来烟花的样子）</span><br><span class="line"></span><br><span class="line">现在，请同学们伸出你的烟花，把它攥成拳。</span><br><span class="line"></span><br><span class="line">大家看，它又像什么？（像石头）</span><br><span class="line"></span><br><span class="line">好，我们不要再来了。。</span><br><span class="line"></span><br><span class="line">请大家把你的右拳置于你的耳边，如果你能清楚地听到脉搏的律动，那么我告诉你：这，是生命。  </span><br><span class="line"></span><br><span class="line">我们梦想很美，很远大；</span><br><span class="line"></span><br><span class="line">但是只有把掌握成拳，用尽全力，挥向生活，这样，才是青春路上，该有的姿态。（不错，好样的，我怎么感觉我在，，创建我自己的弹幕。。。。）</span><br><span class="line"></span><br><span class="line">同学们，你，有没有感到一种震撼？</span><br><span class="line"></span><br><span class="line">相信，很多人都会跟我一样，因为这是一种念想。</span><br><span class="line"></span><br><span class="line">一种发自内心，由内而外的，对城市，对未来的渴望。</span><br><span class="line"></span><br><span class="line">少年们早已不想拘泥于这里，只能在所谓，抖音、电影里，去观望别人的生活。（是的，所以，我们要做的是过好自己的生活，而不是去羡慕别人，其实自己也可以）</span><br><span class="line"></span><br><span class="line">可是，为什么我们就只能做那个躲在阴暗的角落里，新鲜的舞台之上，光鲜亮丽的别人的那个，卑微的人。</span><br><span class="line"></span><br><span class="line">这样不行。</span><br><span class="line"></span><br><span class="line">一点儿都不好玩。（我也觉得，因为你不觉得干巴巴的看着别人的生活，只会让自己emm觉得自己的生活并没有，怎么说呢如果自己的三观并不是摆的很正的话，就会产生一种攀比的这样一种心理情绪，这样是非常不好的。）</span><br><span class="line"></span><br><span class="line">我们，会走出去，顺境也好逆境也好，人生，本就是一场与种种困难无休无尽的斗争，一场，敌众我寡的斗争。（卧槽，他这里好像念错了，念成了敌寡敌众的斗争，但是当前他并没有就是因为这个点的失误而后面演讲的不好，这一点很好其实，面对失误并不慌张而是顺利的接入下一句话这样子，不错小伙子）</span><br><span class="line"></span><br><span class="line">我曾把自己向往的大学热爱的城市，拍成照片贴在课桌上，每当我精疲力竭时，都要看一下它（方便找回自己当初的信念不会感到迷茫的这样一种方式，其实也是引导自己走出低落的这样一种情绪或者说避免低落；其实我也有，就是写一些话然后经常去看，鼓励自己的这样一种方式），然后质问自己，就这样啦，你就这点东西？（是的，我也这样傻逼式自嘲）你真的真的到了最后歇斯底里不能坚持的地步了吗？</span><br><span class="line"></span><br><span class="line">你的理想是诗，理想是梦，理想是远方的田野，是穿越世界的旅行！</span><br><span class="line"></span><br><span class="line">但现在你能做的所有，只是，把手握紧！（嗯）</span><br><span class="line"></span><br><span class="line">厚积薄发！（嗯）</span><br><span class="line"></span><br><span class="line">你，只有付出！（嗯）</span><br><span class="line"></span><br><span class="line">付出你的时间，赌上你的尊严，拿出你的全部！你的everything!（嗯，是的，努力了才有收获，不努力什么也没有）</span><br><span class="line"></span><br><span class="line">当别人打游戏时你在学习，当别人睡懒觉时你在学习，你含着泪在深夜里舞蹈，在回忆里奔跑！（其实这句话好像才是打动我的点，就是听了这些话很容易就联想到以前自己努力坚持的一些画面这样子）</span><br><span class="line"></span><br><span class="line">没有人，在年少时想成为一个普通人。</span><br><span class="line"></span><br><span class="line">尽管生活，它会剥夺你的所爱践踏你的尊严，把你踩在脚下遍体鳞伤。</span><br><span class="line"></span><br><span class="line">但你，怎能，倒下！（但我，怎能，倒下！）</span><br><span class="line"></span><br><span class="line">你的身后，是挚爱的人；</span><br><span class="line"></span><br><span class="line">那些受过的伤都将成为你的勋章，都是你，送给未来的自己最好的礼物！（是的，就像是我之前说，emm，希望自己能够成为未来的自己的一块垫脚石/踏脚石）</span><br><span class="line"></span><br><span class="line">我，也有梦想啊！（我的梦想是，在java开发这一行当中慢慢的沉淀自己，遇见更多更好的人）</span><br><span class="line"></span><br><span class="line">我告诉自己，总有一天，我会站在金色的舞台上，聚光灯打向我，摄像机对准我，所有人的目光注视着我，我能站在台上侃侃而谈。此刻，世界只有我一人！（emm不错）</span><br><span class="line"></span><br><span class="line">我要让平日里轻蔑我的对手知道，我要让他们亲口说出那三个字：（我爱你？对不起？我恨你？我可能平时emm肥皂去看多了？）</span><br><span class="line"></span><br><span class="line">你，赢了！（厉害）</span><br><span class="line"></span><br><span class="line">如果说，青春，是足迹，那梦想，一定，叫做远方。</span><br><span class="line"></span><br><span class="line">请同学们相信，生活明朗，万物可爱；（是的，我确实相信着这句话）</span><br><span class="line"></span><br><span class="line">人间值得，未来可期。（是的，人间值得，未来可期！）</span><br><span class="line"></span><br><span class="line">（加油，诶我刚把网页给叉掉了，他结尾其实好像也同样是鞠躬了<span class="number">90</span>度，不错。小伙子。）</span><br></pre></td></tr></table></figure><h2 id="未选择的路"><a href="#未选择的路" class="headerlink" title="未选择的路"></a>未选择的路</h2><p>从前可能觉得名人名言只会发生在名人身上，其实名人也只是将自己的所感表达了出来；来纾解自己的某一种情绪而已；其实很多的时候去读某一首小诗某一句经典名句再联想一下自己的生活，很多的时候是的确有很大的一个共同之处的。<br>这就是共鸣吧。<br>将自己的表达通过文字的形式温柔的表达了出来。  </p><p>好了不说了，今天面试问了微服务，我直接说我不会。现在挨打的时候到了。去看书去了。  </p><p>对了，读这首小诗的时候，bgm切换成 <strong>the right path</strong>跟配哦~（the right path其实有段时间，在去年吧，我循环了很久，因为本身去年是一个害怕成长但又渴望成长，迷茫的一个状态，挺丧的，所以说，这个时候要么找朋友倾诉要么，听纯音乐静下心来听听自己心底的声音。建议一定要将这种情绪排解出来，不要压抑自己，不好，因为经历过，所以知道，去学会坦诚学会怎么样去接受容纳自己。希望看文的道友们也能像演讲人一样，或许是此刻或许是未来的某一个时间点能够慢慢绽放属于自己的那一星光亮。）  </p><p>诶诶诶我突然发现，我拍的这个照片跟我这个选择的路，有点睛的这样一个作用，哈哈哈哈哈，你看，这时候我今天拍的云，很漂亮，不像一条道路吗？哈哈哈可能是我想多了哈哈哈哈。  </p><p>好了话不多说我撤了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">《未选择的路》</span><br><span class="line"></span><br><span class="line">罗伯特 弗罗斯特</span><br><span class="line"></span><br><span class="line">黄色的树林里分出两条路，</span><br><span class="line"></span><br><span class="line">可惜我不能同时去涉足，</span><br><span class="line"></span><br><span class="line">我在那路口久久伫立，</span><br><span class="line"></span><br><span class="line">我向着一条路极目望去，</span><br><span class="line"></span><br><span class="line">直到它消失在丛林深处。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">但我却选择了另外一条路，</span><br><span class="line"></span><br><span class="line">它荒草凄凄，十分幽寂，</span><br><span class="line"></span><br><span class="line">显得更诱人，更美丽；</span><br><span class="line"></span><br><span class="line">虽然在这两条小路上，</span><br><span class="line"></span><br><span class="line">都很少留下旅人的足迹；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">虽然那天清晨落叶满地，</span><br><span class="line"></span><br><span class="line">两条路都未经脚印污染。</span><br><span class="line"></span><br><span class="line">啊，留下一条路等改日再见！</span><br><span class="line"></span><br><span class="line">但我知道路径延绵无尽头，</span><br><span class="line"></span><br><span class="line">恐怕我难以再返回。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">也许多少年后在某个地方，</span><br><span class="line"></span><br><span class="line">我将轻声叹息把往事回顾：</span><br><span class="line"></span><br><span class="line">一片树林里分出两条路，</span><br><span class="line"></span><br><span class="line">而我选择了人迹更少的一条，</span><br><span class="line"></span><br><span class="line">从此决定了我一生的道路。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 心情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>112节Redis入门到精通【黑马程序员】</title>
      <link href="/2020/05/13/%E3%80%90REDIS%E3%80%91/%E3%80%90REDIS%E3%80%91112%E8%8A%82Redis%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E3%80%90%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98%E3%80%91/"/>
      <url>/2020/05/13/%E3%80%90REDIS%E3%80%91/%E3%80%90REDIS%E3%80%91112%E8%8A%82Redis%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E3%80%90%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看视频: <a href="https://www.bilibili.com/video/BV1CJ411m7Gc?from=search&amp;seid=17203994801277039493" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1CJ411m7Gc?from=search&amp;seid=17203994801277039493</a></p><h2 id="112节Redis入门到精通【黑马程序员】"><a href="#112节Redis入门到精通【黑马程序员】" class="headerlink" title="112节Redis入门到精通【黑马程序员】"></a>112节Redis入门到精通【黑马程序员】</h2><h3 id="课程安排"><a href="#课程安排" class="headerlink" title="课程安排"></a>课程安排</h3><h4 id="Windows环境进行讲解"><a href="#Windows环境进行讲解" class="headerlink" title="Windows环境进行讲解"></a>Windows环境进行讲解</h4><ol><li>Redis基础</li></ol><ul><li>Redis入门</li><li>数据类型（数据的存储格式）</li><li>通用命令</li><li>Jedis（Java如何连接redis以及操作redis）</li></ul><h4 id="Linux环境实操（实操性实用性强）"><a href="#Linux环境实操（实操性实用性强）" class="headerlink" title="Linux环境实操（实操性实用性强）"></a>Linux环境实操（实操性实用性强）</h4><ol start="2"><li>Redis高级</li></ol><ul><li>持久化</li><li>redis.conf</li><li>事务</li><li>集群</li></ul><ol start="3"><li>Redis应用</li></ol><ul><li>企业级解决方案</li></ul><h3 id="redis入门-NoSQL介绍"><a href="#redis入门-NoSQL介绍" class="headerlink" title="redis入门-NoSQL介绍"></a>redis入门-NoSQL介绍</h3><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li>Redis简介</li><li>Redis的下载与安装</li><li>Redis的基本操作</li></ul><h4 id="中国被世界黑的最惨的一天"><a href="#中国被世界黑的最惨的一天" class="headerlink" title="中国被世界黑的最惨的一天"></a>中国被世界黑的最惨的一天</h4><p>2007年10月30日，北京奥运会门票面向境内公众第二阶段预售正式启动。<br>上午一开始，公众提交申请空前踊跃。<br>上午9时至10时，官方票务网站的<font style="color:red">浏览量</font>达到了<font style="color:red">800万次</font>，票务呼叫中心热线从9时至10时的<font style="color:red">呼入量</font>超过了<font style="color:red">380万人次</font>。<br>由于瞬间访问数量过大，技术系统应对不畅，造成很多申购者无法及时提交申请，为此背景奥组委票务中心对广大公众未能及时、便捷地实现奥运门票预定表示歉意。  </p><p>人太多（全世界的冲击）  </p><h4 id="不可回避的问题"><a href="#不可回避的问题" class="headerlink" title="不可回避的问题"></a>不可回避的问题</h4><p>奥运会门票预售系统开放第一天，上午9点正式开始售票到中午12点，3个小时内，票务网站被浏览次数达到<font style="color:red">2000万次</font>。  </p><h4 id="一个神奇的网站"><a href="#一个神奇的网站" class="headerlink" title="一个神奇的网站"></a>一个神奇的网站</h4><p>春运，切肤之痛（一般两种状态：正在走向崩溃的路上or崩溃）： <strong>盘点12306： 一个总在“崩溃中”的神奇网站</strong><br><strong>淘宝崩完12306崩 连着4天，每天都有平台崩溃…..</strong>  </p><p>对应的问题点都是访问量比较大；  </p><h4 id="大型翻车现场"><a href="#大型翻车现场" class="headerlink" title="大型翻车现场"></a>大型翻车现场</h4><p><strong>京东促销爆服务器 刘强东：再搞一次</strong></p><ul><li>人员过多</li><li>访问量比较大</li><li>流量过大</li></ul><h4 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h4><p><strong>表层现象</strong></p><ul><li><strong>海量用户</strong></li><li><strong>高并发</strong>（所有人一块进来访问网站，网站扛不住）</li></ul><p><strong>核心问题</strong></p><h4 id="罪魁祸首—–关系型数据库"><a href="#罪魁祸首—–关系型数据库" class="headerlink" title="罪魁祸首—–关系型数据库"></a>罪魁祸首—–关系型数据库</h4><p>数据访问中影响因素：  </p><ul><li><strong>性能瓶颈：磁盘IO性能低下</strong><ul><li>数据库是保存在磁盘上的，而磁盘的IO性能也就是读写性能相对来说比较低下；</li><li>CPU的数据交换是和高速缓存Cache来做；</li><li>Cache的数据交换和内存做；</li><li>内存的数据交换和硬盘做；</li><li>提供基础数据的这些信息在硬盘上存储；而且是一层一层的往上进行传递；导致性能低下；</li></ul></li><li><strong>扩展瓶颈：数据关系复杂，扩展性差，不便于大规模集群</strong><ul><li>数据库中数据的存储格式；</li><li>数据库不仅仅存储数据；更多的还需要进行描述数据关系（表与表之间的多关联）；（呈现网状关联，前后交叉，错综复杂，扩展性差，牵一发而动全身）</li></ul></li></ul><h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><h5 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h5><ul><li>降低磁盘IO次数，越低越好（针对IO性能差） ——- 内存存储</li><li>去除数据间关系，越简单越好 ——– 不存储关系，仅存储数据</li></ul><p>NoSQL: 即 <strong>Not-Only SQL</strong> （<strong>泛指</strong>非关系型的数据库），（<strong>定位</strong>）作为关系型数据库的<strong>补充</strong>；<br>（<br>数据还是得存在硬盘上，<br>不能将全部的数据移到内存当中去；<br>内存当中的数据还是从硬盘当中来；<br>所以NoSQL的定位是补充；<br>）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Not</span> <span class="string">不；  </span></span><br><span class="line"><span class="attr">Only</span> <span class="string">仅仅；只是；  </span></span><br><span class="line"><span class="attr">Not</span> <span class="string">Only 不仅仅，不只是；</span></span><br></pre></td></tr></table></figure><p>最终指向的即为做事情不能够仅仅只用SQL；与数据存储访问的类似的<strong>泛指</strong>称作是NoSQL；  </p><p>作用： 应对基于<strong>海量用户</strong>和海量数据前提下的数据处理问题（<strong>高并发</strong>）；</p><p>针对的是大量用户对大量数据访问出现的一个集中的大量访问从而出现的问题；<br>少量数据少量用户依旧可以使用但是未免有点杀鸡焉用牛刀的意思；  </p><p>所以一定得定义好NoSQL是用来干嘛的；它是对于关系型数据库的补充起到该做用；  </p><p><strong>NoSQL特征</strong>：<br>（特征都是相对的；没有绝对的特征；兴许再过几年就是普遍性的一个特点了）</p><ul><li><strong>可扩容，可伸缩</strong>；</li><li><strong>大数据</strong>量下<strong>高性能</strong></li><li><strong>灵活</strong>的<strong>数据类型</strong>（能兼容数据库中的数据）</li><li><strong>高可用</strong>（与<strong>集群</strong>相关进行了解）</li></ul><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>常见的<strong>NoSQL数据库</strong>解决方案：  </p><ul><li><font style="color:red;font-weight:bolder;">Redis</font></li><li>memcache</li><li>HBase</li><li>MongoDB</li></ul><p>已经在市场上存留了一定时间了；并不是新出来的这样一种技术；<br>针对的不同场景；所体现的价值不一样；  </p><h5 id="解决方案（电商场景为例）"><a href="#解决方案（电商场景为例）" class="headerlink" title="解决方案（电商场景为例）"></a>解决方案（电商场景为例）</h5><p><strong>MySQL</strong>  </p><ol><li>商品基本信息</li></ol><ul><li>名称</li><li>价格</li><li>厂商</li></ul><p><strong>MongoDB</strong>  </p><p>高速处理，专用作文档处理的地方；  </p><ol start="2"><li>商品附加信息</li></ol><ul><li>描述</li><li>详情</li><li>评论</li></ul><p><strong>分布式文件系统</strong></p><ol start="3"><li>图片信息</li></ol><p><strong>ES、Lucene、solr</strong></p><ol start="4"><li>搜索关键字</li></ol><p><strong>Redis、memcache、tair</strong>  </p><ol start="5"><li><strong>热点</strong>信息(<strong>访问性较高</strong>)</li></ol><ul><li><strong>高频</strong></li><li><strong>波段性</strong></li></ul><p>Redis所处位置：  </p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">（商品评价信息）|<span class="string">  </span>|<span class="string">        （热点信息存储）</span>|<span class="string">  </span>|<span class="string">              </span>|<span class="string">    （搜索关键字及全文检索）</span>|<span class="string">  </span>|<span class="string">                         </span>|<span class="string"> </span>|<span class="string">（商品图片）</span></span><br><span class="line"><span class="string">-----------------------    ----------------------           </span>|<span class="string">                -----------------------          ----------------------</span></span><br><span class="line">|<span class="string"> MongoDB集群（文档） </span>|<span class="string">     </span>|<span class="string"> Redis集群（缓存） </span>|<span class="string">            </span>|<span class="string">                </span>|<span class="string"> Solr集群（全文检索）</span>|<span class="string">           </span>|<span class="string"> FastDFS集群（图片）</span>|</span><br><span class="line">-----------------------    ----------------------           |<span class="string">                -----------------------          ----------------------</span></span><br><span class="line"><span class="string">-------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">-------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">    </span>|<span class="string">              </span>|<span class="string">              </span>|<span class="string">              </span>|<span class="string">              </span>|<span class="string">              </span>|</span><br><span class="line">---------      ---------      ---------      ---------      ---------      ---------</span><br><span class="line">|<span class="string"> MySQL </span>|<span class="string">      </span>|<span class="string"> MySQL </span>|<span class="string">      </span>|<span class="string"> MySQL </span>|<span class="string">      </span>|<span class="string"> MySQL </span>|<span class="string">      </span>|<span class="string"> MySQL </span>|<span class="string">      </span>|<span class="string"> MySQL </span>|</span><br><span class="line">---------      ---------      ---------      ---------      ---------      ---------</span><br><span class="line">                                      基本信息存储</span><br></pre></td></tr></table></figure><h3 id="redis入门-redis简介"><a href="#redis入门-redis简介" class="headerlink" title="redis入门-redis简介"></a>redis入门-redis简介</h3><p>概念：<font style="color:red;font-weight:bolder;">Redis（Remote Dictionary Server）</font>是用<strong>C语言</strong>开发的一个开源的高性能<font style="color:red;font-weight:bolder;">键值对（key-value）</font>数据库。  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Remote 远程；  </span><br><span class="line">Dictionary 字典；（提供功能）  </span><br><span class="line">Server 服务；</span><br></pre></td></tr></table></figure><p>类似于Java当中的一种结构、存储模型Map；<br>比如说名字对应人；<br>（但是好像不太适合，身份证号对应人可能还好一点）<br>这就属于一个键值对；<br>Redis就是这样的一个数据库；<br>Redis当中存放的数据就是一个键对应一个值这样子；<br>不像接触的MySQL数据库；（数据库、数据表、记录行、值）；<br>而Redis是一个键则对应一个取值；这也是其性能高的一个原因；（一个名称对应一个值）  </p><p>了解了Redis是什么之后下面就来说说Redis的特征了；  </p><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ol><li>数据间<strong>没有必然的关联关系</strong>（也算是关系型数据库的弱势）</li><li>内部采用<strong>单线程</strong>机制进行工作（不会手脑并用，操作原子性强就能保证很多安全性的东西）</li><li><strong>高性能</strong>。官方提供测试数据，50个并发执行 100 000 个请求，读的速度是110000 次/s ， 写的速度是 81000 次/s。</li><li><strong>多数据类型</strong>支持</li></ol><ul><li><strong>字符串</strong>类型 <strong>string</strong></li><li><strong>列表</strong>类型 <strong>list</strong></li><li><strong>散列</strong>类型 <strong>hash</strong></li><li><strong>集合</strong>类型 <strong>set</strong></li><li><strong>有序集合</strong>类型 <strong>sorted_set</strong></li></ul><ol start="5"><li><strong>持久化</strong>支持。可以进行<strong>数据灾难恢复</strong>（数据在内存当中进行存储，必定会有短电的情况，万一在内存中存储的某些重要数据一旦没了可咋办；这就很尴尬了；所以做了个数据灾难恢复处理）  </li></ol><h4 id="Redis的应用"><a href="#Redis的应用" class="headerlink" title="Redis的应用"></a>Redis的应用</h4><ul><li>为<strong>热点数据加速查询</strong>（主要场景），如热点商品、热点新闻、热点资讯、推广等高访问量信息等；（这个数据必然成为热点）  </li><li><strong>任务队列</strong>，如秒杀、抢购、购票排队等（消息队列）</li><li><strong>即时信息查询</strong>，如个位排行榜、各类网站访问统计、公交到站信息、在线人数信息（聊天室、网站）、设备信号等；（刷新速度快，包括缓存等技术，保证其实时性；）</li><li><strong>时效性信息控制</strong>，如验证码控制（5分钟、30分钟有效等）、投票控制等；（时效性可以使用redis做控制）</li><li><strong>分布式数据共享</strong>，如分布式集群架构中的session分离</li><li><strong>消息队列</strong></li><li><strong>分布式锁</strong></li></ul><h3 id="redis入门-redis下载安装与服务启动"><a href="#redis入门-redis下载安装与服务启动" class="headerlink" title="redis入门-redis下载安装与服务启动"></a>redis入门-redis下载安装与服务启动</h3><p>目录：  </p><ul><li>Redis简介</li><li><font style="color:red;">Redis的下载与安装</font></li><li>Redis的基本操作</li></ul><h4 id="Redis-的下载"><a href="#Redis-的下载" class="headerlink" title="Redis 的下载"></a>Redis 的下载</h4><ul><li>Linux（适用于企业及开发）<ul><li>Redis高级开始使用</li><li>以4.0版本作为主版本</li></ul></li><li>Windows版本（适合零基础学习）<ul><li>Redis入门使用</li><li>以3.2版本为主版本</li><li>下载地址：<a href="https://github.com/MSOpenTech/redis/tags" target="_blank" rel="noopener">https://github.com/MSOpenTech/redis/tags</a></li><li>选择此版本下载：<a href="https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100</a></li><li>下载类型：<a href="https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100</a></li></ul></li></ul><p>Redis安装特别特别特别简单；绿色版软件；解压缩下即可；  </p><ul><li>配置相关<ul><li>redis.windows.conf</li><li>redis.windows-service.conf</li></ul></li><li>文档(说明性内容)<ul><li>Redis on Windows RElease Note.docx</li><li>Redis on Windows.docx</li><li>Windows Service Documentation.docx</li></ul></li><li>主要看的文件（exe文件）<ul><li>redis-benchmark.exe<ul><li>redis-benchmark.exe用于来做性能测试使用</li></ul></li><li>redis-check-aof.exe<ul><li>作用：redis-check-aof.exe用于做持久化使用</li></ul></li><li>redis-cli.exe<ul><li>全称redis-client；</li></ul></li><li>redis-server.exe<ul><li>启动redis的一个可执行文件；</li><li>启动完了之后就相当于mysql启了一个服务器类似；</li><li>但是如果是需要去操作这个redis数据库就需要使用另外一个客户端，也就是另外一个exe可执行文件redis-cli.exe</li></ul></li></ul></li><li>目前使用得到的即redis-server.exe以及redis-cli.exe</li></ul><p>使用即：<strong>双击运行redis-server.exe</strong> 文件即可；  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 进程号以及当前启动的时间；</span><br><span class="line">[<span class="number">2460</span>] <span class="number">24</span> Sep <span class="number">13</span>:<span class="number">11</span>:<span class="number">03.987</span></span><br><span class="line"></span><br><span class="line"># 警告没有指定配置文件；当前使用的是默认的配置文件</span><br><span class="line"># Warning: no config file specified, using the <span class="keyword">default</span> config.</span><br><span class="line"></span><br><span class="line"># 为了指定配置文件所使用的的配置文件位置</span><br><span class="line"># In order to specify a config file use F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>\redis-server.exe /path/to/redis.conf</span><br><span class="line"></span><br><span class="line"># redis版本 以及emm 多少位的是</span><br><span class="line">Redis <span class="number">3.2</span><span class="number">.100</span> (<span class="number">00000000</span>/<span class="number">0</span>) <span class="number">64</span> bit</span><br><span class="line"></span><br><span class="line"># redis当前的端口号（redis对外提供服务，所使用的的端口号是<span class="number">6379</span>；ip地址即本机<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="keyword">or</span> localhost）</span><br><span class="line">Port: <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"># redis当前所启动时的进程 process id号</span><br><span class="line"># 每启动一个redis服务就相当于是 Redis redis=new Redis(); new了一个Redis对象一样</span><br><span class="line"># 那么一个对象就是一个实例；那么这个PID可以说是这个实例的ID</span><br><span class="line"># 测试：将当前的这个双击出来的redis-server.exe进行关闭，重新双击redis-server.exe时会发现 PID会发生改变为<span class="number">13028</span>或者是其他的数值</span><br><span class="line"># 如果想要有两个redis-server的服务如何处理；双击一次redis-server再双击一次是没有用的；这样的做法导致的结果是第二次双击的时候会出现闪退现象原因就是端口<span class="number">6379</span>被占；即因为已经存在了一个redis服务了，而存在的该redis服务的端口号是<span class="number">6379</span></span><br><span class="line"># 这个时候就要去另外生成一个redis.conf 配置文件；修改其端口为其他的值；与本机上端口号数值不冲突的一个值</span><br><span class="line"></span><br><span class="line">PID: <span class="number">2460</span></span><br><span class="line"></span><br><span class="line">      http:<span class="comment">//redis.io</span></span><br><span class="line"></span><br><span class="line"># 以下为redis服务端的执行日志</span><br><span class="line"># 回头去操作了redis-cli.exe；那么就将会在redis-server.exe该cmd打服务端日志；哎呀；就是一个服务端后台；redis-cli.exe就是一个客户端别纠结了；</span><br><span class="line">[<span class="number">13028</span>] <span class="number">24</span> Sep <span class="number">13</span>:<span class="number">11</span>:<span class="number">59</span>:<span class="number">345</span> # Server started. Redis version <span class="number">3.2</span><span class="number">.100</span></span><br><span class="line">[<span class="number">13028</span>] <span class="number">24</span> Sep <span class="number">13</span>:<span class="number">11</span>:<span class="number">59.345</span> * The server <span class="keyword">is</span> now ready to accept connections on port <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>redis的客户端，<strong>双击运行redis-cli.exe</strong> 文件即可；（在此处就能够去操作连接服务端，操作的方式是命令行式的）  </p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h4><p>核心文件：  </p><ul><li>redis-server.exe 服务器启动命令</li><li>redis-cli.exe 命令行客户端</li><li>redis.windows.conf redis核心配置文件</li><li>redis-benchmark.exe 性能测试工具</li><li>redis-check-aof.exe AOF文件修复工具</li><li>redis-check-dump.exe RDB文件检查工具（快照持久化文件）</li></ul><h4 id="启动Redis"><a href="#启动Redis" class="headerlink" title="启动Redis"></a>启动Redis</h4><p>服务器启动使用redis-server.exe<br>客户端连接使用redis-cli.exe  </p><p>或者通过CMD 命令提示符来进行启动也是一样的；<br>windows+r调起CMD；</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ASUS&gt;f:</span><br><span class="line"></span><br><span class="line">F:\&gt;cd Redis</span><br><span class="line"></span><br><span class="line">F:\Redis&gt;cd Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span></span><br><span class="line"></span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;</span><br><span class="line"></span><br><span class="line">#查看该目录下的子目录</span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;dir</span><br><span class="line"></span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;redis-server</span><br><span class="line"></span><br><span class="line">--------------------------------------------</span><br><span class="line"></span><br><span class="line"># 再调起一个CMD命令提示符 shell端</span><br><span class="line">C:\Users\ASUS&gt;f:</span><br><span class="line"></span><br><span class="line">F:\&gt;cd Redis</span><br><span class="line"></span><br><span class="line">F:\Redis&gt;cd Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span></span><br><span class="line"></span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;</span><br><span class="line"></span><br><span class="line">#查看该目录下的子目录</span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;dir</span><br><span class="line"></span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;redis-cli</span><br></pre></td></tr></table></figure><h3 id="redis入门-redis基础操作"><a href="#redis入门-redis基础操作" class="headerlink" title="redis入门-redis基础操作"></a>redis入门-redis基础操作</h3><p>目录Contents:  </p><ul><li>Redis简介</li><li>Redis的下载与安装</li><li>Redis的基本操作</li></ul><h4 id="命令行模式工具使用思考"><a href="#命令行模式工具使用思考" class="headerlink" title="命令行模式工具使用思考"></a>命令行模式工具使用思考</h4><ul><li>功能性命令</li><li>清除屏幕信息</li><li>帮助信息查阅</li><li>退出指令</li></ul><p>redis-存放数据(用于客户端操作指令)  </p><h5 id="信息添加-往里放"><a href="#信息添加-往里放" class="headerlink" title="信息添加(往里放)"></a>信息添加(往里放)</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key <span class="built_in">value</span> [EX <span class="built_in">seconds</span>] [PX <span class="built_in">milliseconds</span>] [NX|XX]</span><br></pre></td></tr></table></figure><ul><li>功能<blockquote><p>设置 key，value 数据</p></blockquote></li><li>命令<blockquote><p><strong>set</strong> key value</p></blockquote></li><li>范例<blockquote><p>set name laowang</p></blockquote></li></ul><h5 id="信息查询-往外取"><a href="#信息查询-往外取" class="headerlink" title="信息查询(往外取)"></a>信息查询(往外取)</h5><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get</span> <span class="built_in">key</span></span><br></pre></td></tr></table></figure><p>注意；如果 key 不存在，将返回 nil(空)  </p><ul><li>功能<blockquote><p>根据 key 查询对应的 value，如果不存在，返回空（nil）</p></blockquote></li><li>命令<blockquote><p><strong>get</strong> key</p></blockquote></li><li>范例<blockquote><p>get name</p></blockquote></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">F:\&gt;cd Redis</span><br><span class="line"></span><br><span class="line">F:\Redis&gt;cd Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span></span><br><span class="line"></span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">set</span> name laowang</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> name</span><br><span class="line"><span class="string">"laowang"</span></span><br><span class="line"></span><br><span class="line"># 取一个不存在的key</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> names</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line"># 在redis当中进行清除屏幕指令</span><br><span class="line">clear</span><br><span class="line"># 在windows，即cmd下使用 cls 进行清屏</span><br></pre></td></tr></table></figure><h5 id="清除屏幕信息"><a href="#清除屏幕信息" class="headerlink" title="清除屏幕信息"></a>清除屏幕信息</h5><ul><li>功能<blockquote><p>清除屏幕中的信息</p></blockquote></li><li>命令<blockquote><p>clear</p></blockquote></li></ul><h5 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h5><ul><li>功能<blockquote><p>获取命令帮助文档，获取组中所有命令信息名称</p></blockquote></li><li>命令<blockquote><p>help 命令名<br>  help @组名</p></blockquote></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"># 如果想要看 <span class="keyword">set</span> 指令如何使用则输入以下命令行</span><br><span class="line"></span><br><span class="line">F:\&gt;cd Redis</span><br><span class="line"></span><br><span class="line">F:\Redis&gt;cd Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span></span><br><span class="line"></span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help <span class="keyword">get</span></span><br><span class="line"></span><br><span class="line">  GET key # 命令格式；即指令</span><br><span class="line">  summary: Get the value of a key # 功能描述；总结描述，获取一个key所对应的取值</span><br><span class="line">  since: <span class="number">1.0</span><span class="number">.0</span> # 出现版本；最早的在<span class="number">1.0</span><span class="number">.0</span>版本就有此命令；当前版本为<span class="number">3.2</span><span class="number">.100</span> 该版本</span><br><span class="line">  group: <span class="built_in">string</span> # 所属群组；这个命令属于一个群组；该群组名称叫做<span class="built_in">string</span>；</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help</span><br><span class="line">redis-cli <span class="number">3.2</span><span class="number">.100</span></span><br><span class="line">To <span class="keyword">get</span> help about Redis commands type:</span><br><span class="line">      # 可以去获取一个列表命令</span><br><span class="line">      # 可以获取得到&lt;group&gt;在这个群组当中的所有命令</span><br><span class="line">      # 即比如说 help @<span class="built_in">string</span> 可以获取得到在<span class="built_in">string</span>该群组当中的所有命令</span><br><span class="line">      <span class="string">"help @&lt;group&gt;"</span> to <span class="keyword">get</span> a list of commands <span class="keyword">in</span> &lt;group&gt;</span><br><span class="line"></span><br><span class="line">      # help 命令名称即可以获取得到的是有关于该命令的所有帮助信息</span><br><span class="line">      <span class="string">"help &lt;command&gt;"</span> <span class="keyword">for</span> help on &lt;command&gt;</span><br><span class="line"></span><br><span class="line">      #可以获取一个列表可能帮助的提示</span><br><span class="line">      <span class="string">"help &lt;tab&gt;"</span> to <span class="keyword">get</span> a list of possible help topics</span><br><span class="line"></span><br><span class="line">      # quit即用于退出</span><br><span class="line">      <span class="string">"quit"</span> to exit</span><br><span class="line"></span><br><span class="line">To <span class="keyword">set</span> redis-cli perferences:</span><br><span class="line">      <span class="string">":set hints"</span> enable online hints</span><br><span class="line">      <span class="string">":set nohints"</span> disable online hints</span><br><span class="line">Set your preferences <span class="keyword">in</span> ~/.redisclirc</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line">  SET key value [EX seconds] [PX milliseconds] [NX|XX]</span><br><span class="line">  summary: Set the <span class="built_in">string</span> value of a key</span><br><span class="line">  since: <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">  group: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"># tab x <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @generic</span><br><span class="line"># tab x <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @<span class="built_in">string</span></span><br><span class="line"># tab x <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @list</span><br><span class="line"># tab x <span class="number">4</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @<span class="keyword">set</span></span><br><span class="line"># tab x <span class="number">5</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @sorted_set</span><br><span class="line"># tab x <span class="number">6</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @hash</span><br><span class="line"># tab x <span class="number">7</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @pubsub</span><br><span class="line"># tab x <span class="number">8</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @transactions</span><br><span class="line"># tab x <span class="number">9</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @connection</span><br><span class="line"># tab x <span class="number">10</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @server</span><br><span class="line"># tab x <span class="number">11</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @scripting</span><br><span class="line"># tab x <span class="number">12</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @hyperloglog</span><br><span class="line"># tab x <span class="number">13</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @cluster</span><br><span class="line"># tab x <span class="number">14</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @geo</span><br><span class="line"># tab x <span class="number">15</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @APPEND</span><br><span class="line"># tab x <span class="number">16</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @AUTH</span><br><span class="line"># tab x <span class="number">17</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BGREWRITEAOF</span><br><span class="line"># tab x <span class="number">18</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BGSAVE</span><br><span class="line"># tab x <span class="number">19</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BITCOUNT</span><br><span class="line"># tab x <span class="number">20</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BITFIELD</span><br><span class="line"># tab x <span class="number">21</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BITOP</span><br><span class="line"># tab x <span class="number">22</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BITPOS</span><br><span class="line"># tab x <span class="number">23</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BLPOP</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BRPOP</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @BRPOPLPUSH</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @CLIENT GETNAME</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @CLIENT KILL</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @CLIENT LIST</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @CLIENT REPLY</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @CLIENT SETNAME</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help @CLIENT ADDSLOTS</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"># (我在干什么傻逼事，我以为有尽头，在这里一直tab * n)</span><br></pre></td></tr></table></figure><h5 id="退出客户端命令行模式"><a href="#退出客户端命令行模式" class="headerlink" title="退出客户端命令行模式"></a>退出客户端命令行模式</h5><ul><li>功能<blockquote><p>退出客户端</p></blockquote></li><li>命令<blockquote><p>quit<br>  exit<br>  &lt;ESC &gt;</p></blockquote></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在cmd当中进行打卡redis-cli；然后按键esc；退出到dos窗口下</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br><span class="line"></span><br><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h5><ol><li>Redis简介（NoSQL数据库；通过以key-value的形式进行存储）</li><li>Redis的下载与安装（绿色版本；容易安装；当前是windows环境3.2.100版本；后期基于linux环境4.0版本来进行实操）</li><li>Redis的基本操作<blockquote><ul><li>set/get(设置键值与取值)</li><li>clear（清屏）</li><li>help（获取帮助信息）</li></ul></blockquote></li></ol><h3 id="数据类型-数据类型简介"><a href="#数据类型-数据类型简介" class="headerlink" title="数据类型-数据类型简介"></a>数据类型-数据类型简介</h3><h4 id="课程安排-1"><a href="#课程安排-1" class="headerlink" title="课程安排"></a>课程安排</h4><h5 id="课程计划"><a href="#课程计划" class="headerlink" title="课程计划"></a>课程计划</h5><h6 id="Windows环境"><a href="#Windows环境" class="headerlink" title="Windows环境"></a>Windows环境</h6><ol><li>redis基础<ul><li>Redis入门</li><li>数据类型</li><li>通用命令</li><li>Jedis</li></ul></li></ol><h6 id="linux环境"><a href="#linux环境" class="headerlink" title="linux环境"></a>linux环境</h6><ol start="2"><li><p>Redis高级</p><ul><li>持久化</li><li>redis.conf</li><li>事务</li><li>集群</li></ul></li><li><p>Redis应用</p><ul><li>企业级解决方案</li></ul></li></ol><h4 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h4><h5 id="目录Contents"><a href="#目录Contents" class="headerlink" title="目录Contents"></a>目录Contents</h5><ul><li><font style="color:red;">数据存储类型介绍</font></li><li>string</li><li>hash</li><li>list</li><li>set</li><li>sorted_set</li><li>数据类型实践案例</li></ul><h4 id="业务数据的特殊性"><a href="#业务数据的特殊性" class="headerlink" title="业务数据的特殊性"></a>业务数据的特殊性</h4><p>为什么设计了五种数据类型（string，list，hash，set，sorted_set），即这五种数据类型的前世今生；  </p><p>一定是发现某一种数据它需要存入到redis当中了；再将这种数据的特征抽出来；然后做成一种数据类型；也就是说用到哪一种就做哪一种；<br>然后总之到现在总结出来了5种足够使用了即足够日常开发了；<br>如果有新需求来了又需要新的数据类型；即后面再去加新的数据类型设计新的数据类型即可；<br>且redis的数据类型并不只有这五种数据类型（string，list，hash，set，sorted_set），后面还会继续介绍其他的一些数据类型；  </p><p>总之还是要回来分析业务情况；通过具体的业务情况找到合适的数据类型进行存储数据；<br>redis最初定位的是作为缓存使用的；那么缓存当中放什么，这个就很关键；</p><h5 id="作为缓存使用"><a href="#作为缓存使用" class="headerlink" title="作为缓存使用"></a>作为缓存使用</h5><ol><li>原始业务功能设计（应用场景：秒杀）<ul><li>秒杀</li><li>京东618</li><li>天猫双十一互动</li><li>12306排队购票</li></ul></li><li>运营平台监控到的突发高频访问数据<ul><li>突发时政要闻，被强势关注围观(娱乐八卦阵-不明真相的吃瓜群众，不能预期预计其成为热点消息热点新闻，但是可以进行平台对其监控处理，平台监控到其（未被预期成为热点的信息）被高频次访问)</li></ul></li><li>高频、复杂的统计数据（应用场景：直播在线人数）<ul><li>在线人数</li><li>投票排行榜（女团男团给人投票实时刷新）</li></ul></li></ol><h5 id="附加功能"><a href="#附加功能" class="headerlink" title="附加功能"></a>附加功能</h5><p>比如说客户量突然变多从200个的访问量客户到以万为单位的客户；（高并发，机器支撑不住）  </p><p>系统功能优化或升级</p><ul><li>单服务器升级集群</li><li>Session管理</li><li>Token管理</li></ul><h5 id="Redis数据类型（5种常用的数据类型）"><a href="#Redis数据类型（5种常用的数据类型）" class="headerlink" title="Redis数据类型（5种常用的数据类型）"></a>Redis数据类型（5种常用的数据类型）</h5><p>可以与java当中的数据类型进行一下类比记忆；它们有很多的相似之处；  </p><ul><li>string        String</li><li>hash          HashMap</li><li>list          LinkedList</li><li>set           HashSet</li><li>sorted_set    TreeSet</li></ul><h3 id="数据类型-string基本操作"><a href="#数据类型-string基本操作" class="headerlink" title="数据类型-string基本操作"></a>数据类型-string基本操作</h3><h4 id="目录Contents-1"><a href="#目录Contents-1" class="headerlink" title="目录Contents"></a>目录Contents</h4><ul><li>数据存储类型介绍</li><li>string</li><li>hash</li><li>list</li><li>set</li><li>sorted_set</li><li>数据类型实践案例</li></ul><h4 id="redis-数据存储格式"><a href="#redis-数据存储格式" class="headerlink" title="redis 数据存储格式"></a>redis 数据存储格式</h4><p>对于redis来说，里面存储数据是一个映射关系；</p><ul><li>redis 自身是一个 Map，其中所有的数据都是采用 <font style="color:red;font-weight:bolder;">key: value</font> 的形式进行存储</li><li><font style="color:red;font-weight:bolder;">数据类型</font> 指的是 存储的数据 的类型，也就是 value 部分的类型，key 部分永远都是字符串</li><li></li></ul><p>这个key，名称是用来访问这个数据使用的；</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Redis 存储空间</span><br><span class="line"></span><br><span class="line">左边为key(永远都是字符串)    右边为value</span><br><span class="line">---------------------------------------------</span><br><span class="line">|  name |                   |    laowang   |</span><br><span class="line">---------------------------------------------</span><br><span class="line"></span><br><span class="line">---------------------------------------------</span><br><span class="line">|  age  |                   |    101       |</span><br><span class="line">---------------------------------------------</span><br><span class="line"></span><br><span class="line">---------------------------------------------</span><br><span class="line">|  名称  |                  |    数据     |</span><br><span class="line">---------------------------------------------</span><br><span class="line"></span><br><span class="line">---------------------------------------------</span><br><span class="line">|  key  |                   |    value     |</span><br><span class="line">---------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="string-类型"><a href="#string-类型" class="headerlink" title="string 类型"></a>string 类型</h4><ul><li>存储的数据：单个数据，最简单（最常用）的数据存储类型，也是最常用的数据存储类型</li><li>存储数据的格式：一个存储空间保存一个数据</li><li>存储内容：通常使用字符串，如果字符串以整数的形式展示，可以作为数字操作使用（但是仍然是一个字符串）<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Redis 存储空间</span><br><span class="line"></span><br><span class="line">---------------------------------------------</span><br><span class="line">|  key1  |------------------&gt;|    laowang   |</span><br><span class="line">---------------------------------------------</span><br><span class="line">|  key1  |------------------&gt;|   4006184000 |</span><br><span class="line">---------------------------------------------</span><br></pre></td></tr></table></figure></li></ul><h4 id="string-类型数据的基本操作"><a href="#string-类型数据的基本操作" class="headerlink" title="string 类型数据的基本操作"></a>string 类型数据的基本操作</h4><ul><li>添加/修改数据<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">key</span> <span class="built_in">value</span></span><br></pre></td></tr></table></figure></li><li>获取数据<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="keyword">value</span></span><br></pre></td></tr></table></figure></li><li>删除数据<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">del</span> <span class="built_in">key</span></span><br></pre></td></tr></table></figure></li></ul><p>练习：  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">F:\Redis\Redis-x64<span class="number">-3.2</span><span class="number">.100</span><span class="number">-6379</span>&gt;redis-cli</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">set</span> name laowang</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> name</span><br><span class="line"><span class="string">"laowang"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">set</span> age <span class="number">11111</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> age</span><br><span class="line"><span class="string">"11111"</span></span><br><span class="line"></span><br><span class="line"># 删除该数据则该数据从redis当中不再有了；</span><br><span class="line"># 删除完成之后返回 (<span class="built_in">int</span>eger) <span class="number">1</span> 代表删除成功；</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; del age</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"></span><br><span class="line"># 这个时候redis的内存当中就不存在该key: age；value: <span class="number">11111</span> 该数据了；</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> age</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line"># 当再去进行删除一个redis内存当中不存在的数据</span><br><span class="line"># 这个时候就返回 (<span class="built_in">int</span>eger)<span class="number">0</span> ；表示删除失败；</span><br><span class="line"># 在redis当中，操作如果是以成功失败为标识的话；都是使用的(<span class="built_in">int</span>eger) <span class="number">1</span> / (<span class="built_in">int</span>eger) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; del age</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>添加/修改多个数据<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span> m 是 单词 Multiple[英 /ˈmʌltɪpl/] 的简写</span><br><span class="line"># <span class="number">2.</span> adj. 多重的；多样的；许多的；n. 倍数；[电]并联；复数 multiples</span><br><span class="line"># <span class="number">3.</span> 就是多个的意思，mset一次性设置多个键值；mget一次性取多个值出来；</span><br><span class="line"># <span class="number">4.</span> 以及原来如果存在该key以及该key所对应的取值；则如果再次设置mset；就将发生覆盖原来key的取值</span><br><span class="line"># <span class="number">5.</span> 通过mget进行取出一个不存在的key时同样返回nil；</span><br><span class="line"># <span class="number">6.</span> 格式: mset key1 value1 key2 value2 ...</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mset a <span class="number">1</span> b <span class="number">2</span> c <span class="number">3</span> d <span class="number">4</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> a</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> b</span><br><span class="line"><span class="string">"2"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> c</span><br><span class="line"><span class="string">"3"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> d</span><br><span class="line"><span class="string">"4"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mget a b c d</span><br><span class="line"><span class="number">1</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"3"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"4"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mset a <span class="number">111</span> b <span class="number">222</span> c <span class="number">333</span> d <span class="number">444</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mget a b c d</span><br><span class="line"><span class="number">1</span>) <span class="string">"111"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"222"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"333"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"444"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mget a e c d</span><br><span class="line"><span class="number">1</span>) <span class="string">"111"</span></span><br><span class="line"><span class="number">2</span>) (nil)</span><br><span class="line"><span class="number">3</span>) <span class="string">"333"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"444"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mget z i p</span><br><span class="line"><span class="number">1</span>) (nil)</span><br><span class="line"><span class="number">2</span>) (nil)</span><br><span class="line"><span class="number">3</span>) (nil)</span><br></pre></td></tr></table></figure></li><li>获取多个数据<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 格式：mget key1 key2 ...</span><br><span class="line"></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; set a <span class="number">11111</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure></li><li>获取数据字符个数（字符串长度）<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 格式：strlen key</span><br><span class="line"></span><br><span class="line"># a 该key的value有<span class="number">5</span>个字符（长度）</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; strlen a</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; strlen name</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">7</span></span><br></pre></td></tr></table></figure></li><li>追加信息到原始信息后部（如果原始信息存在就追加，否则新建）<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 格式：append key value</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> a</span><br><span class="line"><span class="string">"11111"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; append a <span class="number">22222</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> a</span><br><span class="line"><span class="string">"1111122222"</span></span><br><span class="line"></span><br><span class="line"># append一个在redis内存当中并不存在的key也会成功；即不存在则新建；</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; append laowang <span class="number">999999</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">6</span></span><br><span class="line"></span><br><span class="line"># 当这个变量对应的存储值如果存在则追加；不存在则新建</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> laowang</span><br><span class="line"><span class="string">"999999"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数据类型-单指令操作与多指令操作的选择之惑"><a href="#数据类型-单指令操作与多指令操作的选择之惑" class="headerlink" title="数据类型-单指令操作与多指令操作的选择之惑"></a>数据类型-单指令操作与多指令操作的选择之惑</h3><h4 id="string-类型数据的基本操作-1"><a href="#string-类型数据的基本操作-1" class="headerlink" title="string 类型数据的基本操作"></a>string 类型数据的基本操作</h4><p>单数据操作与多数据操作如何选择<br>（什么时候用set更好；什么时候用mset更好）</p><h4 id="单数据操作与多数据操作的选择之惑"><a href="#单数据操作与多数据操作的选择之惑" class="headerlink" title="单数据操作与多数据操作的选择之惑"></a>单数据操作与多数据操作的选择之惑</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">key</span> <span class="built_in">value</span></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="built_in">vs</span></span><br></pre></td></tr></table></figure><p>mset key1 value1 key2 value2 …</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">区别：  </span><br><span class="line"></span><br><span class="line">* <span class="built_in">set</span>一次性只能设置一个<span class="built_in">key</span>的取值<span class="built_in">value</span></span><br><span class="line">* mset一次性只能设置多个<span class="built_in">key</span>的取值<span class="built_in">value</span></span><br><span class="line">* <span class="built_in">get</span>与mget同理</span><br><span class="line"></span><br><span class="line">一条指令的执行过程</span><br></pre></td></tr></table></figure><hr><p>|           |——–set—-》|          |<br>| 应用服务器 |                | Redis服务|<br>|           |《——result—|          |</p><hr><p>一条指令执行的整个过程<br>首先指令到达以后发送给redis;<br>redis拿到指令以后；结束完把结果返回给服务器；<br>那么在这个过程当中；<br>有这么几个地方是需要耗费时间的；</p><ol><li>set指令从应用服务器发送到redis服务这个过程是需要耗费时间的</li><li>到达redis服务，执行指令同样是需要耗费时间的</li><li>那么redis返回查询到的数据回去到应用服务器也是需要耗费时间的；</li></ol><p>那么如果是三个指令的话；那么上述过程将会是一个O(n)的过程即上述过程执行3遍；</p><ol><li>发送指令 x 3</li><li>执行指令 x 3</li><li>返回结果 x 3<br>那么其总执行时间为多少？<br>假定指令发送与指令返回的时间一样那么总执行时间为：</li></ol><p>单指令（set）3条指令的执行过程时间为<br>发送返回时间 x 6 + 执行时间 x 3</p><p>如果是多指令（mset）3条指令的执行过程为<br>发送返回时间 x 2 + 执行时间 x 3</p><p>均衡一下发送时长和执行时长之间的关系；<br>假如说当前需要操作50（大数据量）个数据；set与mset的效率差距；<br>没有明确的结论说什么时候用set什么时候用mset；<br>都是结合具体的业务情况才能作出选择出更适合某个业务场景下的指令；</p><p>如果一次发送完所消耗的时长执行完的时长非常的大的话，那么对于单线程的环境来说并不适用；所以说面对这种情况一定需要及时切割；</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 数据类型-数值增减操作</span><br><span class="line"></span><br><span class="line">#### string 类型数据的扩展操作</span><br><span class="line"></span><br><span class="line">##### 业务场景</span><br><span class="line"></span><br><span class="line">在开发当中，随着业务进行数据量也会越来越大；一张表能够存储的数据量不能够让其无限极的进行扩张；否则会非常影响查询效率；那么这个时候采取的方式就是将一张数据量大的表切割分割成几张小表；甚至将一个库当中的表分散到几个库这样的处理操作；那么这对应的操作即分库分表；</span><br><span class="line">在这里不考虑分库问题仅仅考虑分表问题；</span><br><span class="line">那么表有了而表中的id是一个一个连续自增的；</span><br><span class="line">那么如果将这些数据分到别的表当中；</span><br><span class="line">就将会出现一个问题；每一个表控制自己的主键自增；会出现问题；即主键重复；</span><br><span class="line">于是就需要去解决主键重复的问题；</span><br><span class="line"></span><br><span class="line">大型企业及应用中，分表操作是基本操作，使用多张表存储同类型数据；</span><br><span class="line">但是对应的主键 id 必须保证统一性，不能重复。</span><br><span class="line">Oracle数据库具有 sequence 设定（有序列的概念所以可以解决分表时主键重复问题），可以解决该问题。</span><br><span class="line">但是 MySQL 数据库并不具有类似的机制，那么该如何解决？</span><br><span class="line"></span><br><span class="line">把原来的表分成若干张表之后；只要保证一点；所有的主键id不重复即可；  </span><br><span class="line">这个主键id原本由数据库控制现在由其他服务进行控制；</span><br><span class="line"></span><br><span class="line">##### 解决方案</span><br><span class="line"></span><br><span class="line">* 设置数值数据增加指定范围的值</span><br></pre></td></tr></table></figure><p>  incr key<br>  incrby key increment<br>  incrbyfloat key increment<br>  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>设置数值数据减少指定范围的值</span><br></pre></td></tr></table></figure><br>  decr key<br>  decrby key decrement<br>  <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">对一个字符串进行操作；如果该字符串的取值是一个纯数字；</span><br><span class="line">那么对其进行+<span class="number">1</span>（increment）/<span class="number">-1</span>（decrement）操作</span><br></pre></td></tr></table></figure><br>127.0.0.1:6379&gt; set num 1<br>OK</p><p>127.0.0.1:6379&gt; incr num<br>(integer) 2</p><p>127.0.0.1:6379&gt; get num<br>“2”</p><p>127.0.0.1:6379&gt; incr num<br>(integer) 3</p><p>127.0.0.1:6379&gt; incr num<br>(integer) 4</p><p>127.0.0.1:6379&gt; get num<br>“4”</p><p>127.0.0.1:6379&gt; decr num<br>(integer) 3</p><p>127.0.0.1:6379&gt; get num<br>“3”</p><h1 id="查看-incrby-命令详细"><a href="#查看-incrby-命令详细" class="headerlink" title="查看 incrby 命令详细"></a>查看 incrby 命令详细</h1><p>127.0.0.1:6379&gt; help incrby</p><p>  INCRBY key increment</p><h1 id="为一个key增加一个整数值；by-the-given-amount-用给定的值进行增加；"><a href="#为一个key增加一个整数值；by-the-given-amount-用给定的值进行增加；" class="headerlink" title="为一个key增加一个整数值；by the given amount 用给定的值进行增加；"></a>为一个key增加一个整数值；by the given amount 用给定的值进行增加；</h1><h1 id="即默认incr-是-1；decr-是-1"><a href="#即默认incr-是-1；decr-是-1" class="headerlink" title="即默认incr 是+1；decr 是 -1"></a>即默认incr 是+1；decr 是 -1</h1><h1 id="而incrby-与-decrby-则是让它-n；或者是让它-n；"><a href="#而incrby-与-decrby-则是让它-n；或者是让它-n；" class="headerlink" title="而incrby 与 decrby 则是让它 +n；或者是让它 -n；"></a>而incrby 与 decrby 则是让它 +n；或者是让它 -n；</h1><p>  summary: Increment the integer value of a key by the given amount<br>  since: 1.0.0<br>  group: string</p><p>127.0.0.1:6379&gt; incrby num 10<br>(integer) 13</p><p>127.0.0.1:6379&gt; get num<br>“13”</p><p>127.0.0.1:6379&gt; decrby num 2<br>(integer) 11</p><p>127.0.0.1:6379&gt; get num<br>“11”</p><h1 id="incrbyfloat-float则与小数有关；"><a href="#incrbyfloat-float则与小数有关；" class="headerlink" title="incrbyfloat float则与小数有关；"></a>incrbyfloat float则与小数有关；</h1><p>127.0.0.1:6379&gt; incrbyfloat num 0.5<br>“11.5”</p><p>127.0.0.1:6379&gt; get num<br>“11.5”</p><p>127.0.0.1:6379&gt; incrbyfloat num 0.00000000009<br>“11.500000000089999”</p><p>127.0.0.1:6379&gt; get num<br>“11.500000000089999”</p><h1 id="尝试-incrby-添加的increment为float类型取值"><a href="#尝试-incrby-添加的increment为float类型取值" class="headerlink" title="尝试 incrby 添加的increment为float类型取值"></a>尝试 incrby 添加的increment为float类型取值</h1><p>127.0.0.1:6379&gt; incrby num 0.9</p><h1 id="报错；错误值不是一个integer类型取值或者超出其范围取值"><a href="#报错；错误值不是一个integer类型取值或者超出其范围取值" class="headerlink" title="报错；错误值不是一个integer类型取值或者超出其范围取值"></a>报错；错误值不是一个integer类型取值或者超出其范围取值</h1><p>(error) ERR value is not an integer or out of range</p><h1 id="即-incr、incrby、decr、decrby专用于操作整数；incrbyfloat用于操作小数"><a href="#即-incr、incrby、decr、decrby专用于操作整数；incrbyfloat用于操作小数" class="headerlink" title="即 incr、incrby、decr、decrby专用于操作整数；incrbyfloat用于操作小数"></a>即 incr、incrby、decr、decrby专用于操作整数；incrbyfloat用于操作小数</h1><h1 id="需要注意的一点是：incrby-与-decrby-后面的取值-increment与-decrement可以是正数也可以是负数；"><a href="#需要注意的一点是：incrby-与-decrby-后面的取值-increment与-decrement可以是正数也可以是负数；" class="headerlink" title="需要注意的一点是：incrby 与 decrby 后面的取值 increment与 decrement可以是正数也可以是负数；"></a>需要注意的一点是：incrby 与 decrby 后面的取值 increment与 decrement可以是正数也可以是负数；</h1><p>127.0.0.1:6379&gt; set num1 1<br>OK</p><h1 id="num1-1-1-1-0"><a href="#num1-1-1-1-0" class="headerlink" title="( + num1 ) + ( - 1 ) = 1 - 1 = 0"></a>( + num1 ) + ( - 1 ) = 1 - 1 = 0</h1><p>127.0.0.1:6379&gt; incrby num1 -1<br>(integer) 0</p><p>127.0.0.1:6379&gt; get num1<br>“0”</p><h1 id="num1-1-0-1-1"><a href="#num1-1-0-1-1" class="headerlink" title="( + num1 ) + ( 1 ) = 0 + 1 = 1"></a>( + num1 ) + ( 1 ) = 0 + 1 = 1</h1><p>127.0.0.1:6379&gt; incrby num1 1<br>(integer) 1</p><p>127.0.0.1:6379&gt; get num1<br>“1”</p><h1 id="num1-2-1-2-1"><a href="#num1-2-1-2-1" class="headerlink" title="( + num1 ) + ( - 2 ) = 1 - 2 = -1"></a>( + num1 ) + ( - 2 ) = 1 - 2 = -1</h1><p>127.0.0.1:6379&gt; incrby num1 -2<br>(integer) -1</p><h1 id="num1-2-1-2-3"><a href="#num1-2-1-2-3" class="headerlink" title="( + num1 ) + ( - 2 ) = -1 - 2 = -3"></a>( + num1 ) + ( - 2 ) = -1 - 2 = -3</h1><p>127.0.0.1:6379&gt; decrby num1 2<br>(integer) -3</p><p>127.0.0.1:6379&gt; get num1<br>“-3”</p><h1 id="num1-1-3-3-3-3-0"><a href="#num1-1-3-3-3-3-0" class="headerlink" title="( + num1 ) + ( - 1 ) = -3 - ( -3 ) = -3 + 3 = 0"></a>( + num1 ) + ( - 1 ) = -3 - ( -3 ) = -3 + 3 = 0</h1><p>127.0.0.1:6379&gt; decrby num1 -3<br>(integer) 0</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### <span class="type">string</span>作为数值操作</span><br><span class="line"></span><br><span class="line">* <span class="type">string</span>在redis内部存储默认就是一个字符串，当遇到增减类型操作incr、decr时就会转变成数值型进行计算；(归根结底其还是一个字符串)</span><br><span class="line">* redis所有的操作都是原子性的，采用单线程处理所有业务，命令是一个一个执行的；因此无需考虑并发带来的数据；</span><br><span class="line">* 注意：&lt;font style=<span class="string">"color:red;"</span>&gt;按数值进行操作的数据，如果原始数据不能转成数值，或则超越了redis数值上限范围，将报错&lt;/font&gt;。</span><br><span class="line"><span class="number">9</span> <span class="number">22</span> <span class="number">33</span>  <span class="number">7203</span> <span class="number">6854</span> <span class="number">77</span> <span class="number">5807</span> （java中long型数据最大取值，Long.MAX_VALUE）</span><br></pre></td></tr></table></figure><h1 id="1-第一种情况：原始数据不能转成数值"><a href="#1-第一种情况：原始数据不能转成数值" class="headerlink" title="1. 第一种情况：原始数据不能转成数值"></a>1. 第一种情况：原始数据不能转成数值</h1><p>  127.0.0.1:6379&gt; set num2 abc<br>  OK<br>  127.0.0.1:6379&gt; incr num2<br>  (error) ERR value is not an integer or out of range</p><h1 id="2-第二种情况，超越redis数值上限范围"><a href="#2-第二种情况，超越redis数值上限范围" class="headerlink" title="2. 第二种情况，超越redis数值上限范围"></a>2. 第二种情况，超越redis数值上限范围</h1><p>  127.0.0.1:6379&gt; incrby num2 11111111111111111111111111111111111111111111111111111111111111<br>  (error) ERR value is not an integer or out of range<br>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; **Tips <span class="number">1</span>:**</span><br><span class="line">  * redis用于控制数据库表主键id，为数据库表主键提供生成策略，保障数据库表的主键唯一性</span><br><span class="line">  * 此方案适用于所有数据库，且支持数据库集群</span><br><span class="line"></span><br><span class="line">### 数据类型-数据时效性设置</span><br><span class="line"></span><br><span class="line">#### string 类型数据的扩展操作</span><br><span class="line"></span><br><span class="line">##### 业务场景</span><br><span class="line"></span><br><span class="line">* “最强女生” 启动海选投票，只能通过微信投票，每个微信号每<span class="number">4</span>个小时只能投<span class="number">1</span>票；</span><br><span class="line">* 电商商家开启热门商品推荐，热门商品不能一直处于热门期，每种商品热门期维持<span class="number">3</span>天，<span class="number">3</span>天后自动取消热门；</span><br><span class="line">* 新闻网站会出现热点新闻，热点新闻最大的特征是时效性，如何自动控制热点新闻的时效性</span><br></pre></td></tr></table></figure><br>news_id: HB314790725 3分钟时效性：03:00（进行倒数计时）<br>                                 ↓ ↓ ↓<br>news_id: HB314790725 3分钟时效性：00:00</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 解决方案</span><br><span class="line"></span><br><span class="line">* 设置数据具有指定的生命周期(数据能活多久，比如三分钟、五分钟之类的验证码时效性)</span><br></pre></td></tr></table></figure><h1 id="1-这两个命令的差别在于生命周期的单位不同"><a href="#1-这两个命令的差别在于生命周期的单位不同" class="headerlink" title="1. 这两个命令的差别在于生命周期的单位不同"></a>1. 这两个命令的差别在于生命周期的单位不同</h1><h1 id="2-setex命令的时间单位为-秒seconds"><a href="#2-setex命令的时间单位为-秒seconds" class="headerlink" title="2. setex命令的时间单位为 秒seconds"></a>2. setex命令的时间单位为 秒seconds</h1><h1 id="3-psetex命令的时间单位为-毫秒milliseconds"><a href="#3-psetex命令的时间单位为-毫秒milliseconds" class="headerlink" title="3. psetex命令的时间单位为 毫秒milliseconds"></a>3. psetex命令的时间单位为 毫秒milliseconds</h1><h1 id="格式：setex-key-seconds-value"><a href="#格式：setex-key-seconds-value" class="headerlink" title="格式：setex key seconds value"></a>格式：setex key seconds value</h1><h1 id="格式：psetex-key-milliseconds-value"><a href="#格式：psetex-key-milliseconds-value" class="headerlink" title="格式：psetex key milliseconds value"></a>格式：psetex key milliseconds value</h1><p>  #示例(10秒后过期)：<br>  127.0.0.1:6379&gt; setex tel 10 1<br>  OK<br>  127.0.0.1:6379&gt; get tel<br>  “1”<br>  127.0.0.1:6379&gt; get tel<br>  “1”<br>  127.0.0.1:6379&gt; get tel<br>  (nil)<br>  127.0.0.1:6379&gt;</p><h1 id="如果在-setex-之后重新对同一个键进行-set-key-value；则setex命令所指定的生命周期将不再起作用"><a href="#如果在-setex-之后重新对同一个键进行-set-key-value；则setex命令所指定的生命周期将不再起作用" class="headerlink" title="如果在 setex 之后重新对同一个键进行 set key value；则setex命令所指定的生命周期将不再起作用"></a>如果在 setex 之后重新对同一个键进行 set key value；则setex命令所指定的生命周期将不再起作用</h1><p>  127.0.0.1:6379&gt; setex tel 10 1<br>  OK<br>  127.0.0.1:6379&gt; set tel 2<br>  OK<br>  127.0.0.1:6379&gt; get tel<br>  “2”<br>  127.0.0.1:6379&gt;<br>  <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; **Tips <span class="number">2</span>:**</span><br><span class="line"></span><br><span class="line">* redis 控制数据的生命周期，通过数据是否失效控制业务行为，适用于所有具有时效性限定控制的操作</span><br><span class="line"></span><br><span class="line">### key的命名规范</span><br><span class="line"></span><br><span class="line">#### <span class="built_in">string</span> 类型数据操作的注意事项</span><br><span class="line"></span><br><span class="line">* 数据操作不成功的反馈与数据正常操作之间的差异</span><br><span class="line">  ① 表示运行结构是否成功</span><br><span class="line">    * （<span class="built_in">int</span>eger）<span class="number">0</span> ---&gt; <span class="literal">false</span> 失败</span><br><span class="line">    * （<span class="built_in">int</span>eger）<span class="number">1</span> ---&gt; <span class="literal">true</span>  成功</span><br><span class="line">  </span><br><span class="line">  ② 表示运行结果值</span><br><span class="line">    * （<span class="built_in">int</span>eger）<span class="number">3</span> ---&gt; <span class="number">3</span>个</span><br><span class="line">    * （<span class="built_in">int</span>eger）<span class="number">1</span> ---&gt; <span class="number">1</span>个</span><br><span class="line">* 数据未获取到</span><br><span class="line">  ①（nil）等同于<span class="literal">null</span>，不存在</span><br><span class="line">* 数据最大存储量</span><br><span class="line">  ① <span class="number">512</span>MB（上限）</span><br><span class="line">* 数据计算最大范围（java中的long的最大值）</span><br><span class="line">  ① <span class="number">9</span> <span class="number">22</span> <span class="number">33</span> <span class="number">7203</span> <span class="number">6854</span> <span class="number">7758</span> <span class="number">07</span></span><br><span class="line">  ① <span class="number">-9</span> <span class="number">22</span> <span class="number">33</span> <span class="number">7203</span> <span class="number">6854</span> <span class="number">7758</span> <span class="number">07</span></span><br><span class="line">  ③ 比 <span class="number">9</span> <span class="number">22</span> <span class="number">33</span> <span class="number">7203</span> <span class="number">6854</span> <span class="number">7758</span> <span class="number">07</span>还要大；比<span class="number">-9</span> <span class="number">22</span> <span class="number">33</span> <span class="number">7203</span> <span class="number">6854</span> <span class="number">7758</span> <span class="number">07</span>还要小；则抛出异常Error；</span><br><span class="line"></span><br><span class="line">#### <span class="built_in">string</span> 类型应用场景</span><br><span class="line"></span><br><span class="line">##### 业务场景</span><br><span class="line"></span><br><span class="line">主页高频访问信息显示控制，例如新浪微博大V主页显示粉丝数与微博数量；  </span><br><span class="line"></span><br><span class="line">这种数据如何放入到redis当中怎样进行存储？</span><br><span class="line"></span><br><span class="line">##### 解决方案</span><br><span class="line"></span><br><span class="line">* 在redis中为大V用户设定用户信息，以用户主键和属性值作为key，后台设定定时刷新策略即可</span><br></pre></td></tr></table></figure></p><h1 id="表名：主键名：主键值：属性名"><a href="#表名：主键名：主键值：属性名" class="headerlink" title="表名：主键名：主键值：属性名"></a>表名：主键名：主键值：属性名</h1><p>  eg:  user:id:3506728370:fans         —&gt;     12210947<br>  eg:  user:id:3506728370:blogs        —&gt;     6164<br>  eg:  user:id:3506728370:focuss       —&gt;     83</p><p>  127.0.0.1:6379&gt; set user:id:00789:fans 123456789<br>  OK</p><p>  127.0.0.1:6379&gt; set user:id:00789:blogs 789<br>  OK</p><p>  127.0.0.1:6379&gt; set user:id:00789 {id:00789,blogs:789,,fans:123456789}<br>  OK</p><p>  127.0.0.1:6379&gt; incr user:id:00789:fans<br>  (integer) 123456790</p><h1 id="是直接存储属性取值还是通过json方式哪一种比较好；"><a href="#是直接存储属性取值还是通过json方式哪一种比较好；" class="headerlink" title="是直接存储属性取值还是通过json方式哪一种比较好；"></a>是直接存储属性取值还是通过json方式哪一种比较好；</h1><h1 id="第一种可以取第二种也可以取出；"><a href="#第一种可以取第二种也可以取出；" class="headerlink" title="第一种可以取第二种也可以取出；"></a>第一种可以取第二种也可以取出；</h1><h1 id="第一种改变数据会要方便一些；"><a href="#第一种改变数据会要方便一些；" class="headerlink" title="第一种改变数据会要方便一些；"></a>第一种改变数据会要方便一些；</h1><h1 id="第二种一改全改；两者没有说好坏需要看具体的业务逻辑情况、业务场景而定、选择；"><a href="#第二种一改全改；两者没有说好坏需要看具体的业务逻辑情况、业务场景而定、选择；" class="headerlink" title="第二种一改全改；两者没有说好坏需要看具体的业务逻辑情况、业务场景而定、选择；"></a>第二种一改全改；两者没有说好坏需要看具体的业务逻辑情况、业务场景而定、选择；</h1><p>  127.0.0.1:6379&gt;</p>  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>在redis中以json格式存储大V用户信息，定时刷新（也可以）</span><br></pre></td></tr></table></figure><p>  eg:  user:id:3506728370         —&gt;     {id:3506728370,name:春晚,fans:123456789,blogs:6164,focus:83}<br>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; **Tips3:**</span><br><span class="line"></span><br><span class="line">* redis应用于各种结构型和非结构型高热读数据访问加速</span><br><span class="line"></span><br><span class="line">#### key的设置约定</span><br><span class="line"></span><br><span class="line">* 数据库中的热点数据key命令惯例</span><br></pre></td></tr></table></figure></p><hr><pre><code>表名 ：主键名 ：主键值   ：字段名</code></pre><hr><pre><code>eq1 : order :   id  : 29437595 : name</code></pre><hr><pre><code>eq2 : equip :   id  : 390472345: type</code></pre><hr><pre><code>eq3 : news  :   id  : 202004150: title</code></pre><hr>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">redis当中的大数据还是来自于数据库（mysql）；也有小部分不是来自于数据库；  </span><br><span class="line"></span><br><span class="line">### 数据类型-hash类型介绍与基本操作</span><br><span class="line"></span><br><span class="line">#### 目录Contents</span><br><span class="line"></span><br><span class="line">* 数据存储类型介绍</span><br><span class="line">* string</span><br><span class="line">* hash</span><br><span class="line">* list</span><br><span class="line">* set</span><br><span class="line">* sorted_set</span><br><span class="line"></span><br><span class="line">#### hash类型</span><br><span class="line"></span><br><span class="line">##### 存储的疑惑</span><br><span class="line"></span><br><span class="line">* string当中以json方式存储数据的格式；</span><br></pre></td></tr></table></figure><hr><p>| h_user user:id:3506728370 |——–&gt;| {name:春晚, fans:12210862, blogs:6164, focus:83}|</p><hr><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(取出数据还行，但是对于修改数据就显得笨拙)  </span><br><span class="line"></span><br><span class="line">对于上述操作；对象类型数据的存储如果具有比较**频繁的更新需求操作**会显得笨重  </span><br><span class="line">那么此时针对这种比较频繁的更新需求操作转换成<span class="built_in">string</span>以属性单个进行存储取值方式则他们这几个数据是分散分离的：</span><br></pre></td></tr></table></figure><hr><p>|—————————————–         ———–         |<br>|| h_user user:id:3506728370       :name |——–&gt;|  春晚  |          |<br>|—————————————–         ———–         |<br>|                                                                      |<br>|—————————————–         ————        |<br>|| h_user user:id:3506728370       :fans |——–&gt;| 12210862 |        |<br>|—————————————–         ————        |<br>|                                                                      |<br>|——————————————         ———–        |<br>|| h_user user:id:3506728370       :blogs |——–&gt;|  83     |        |<br>|——————————————         ———–        |</p><hr><pre><code>|       |       ||       |       ||       |       |↓       ↓       ↓</code></pre><hr><p>|                              ————————————–  |<br>|                              |                                    |  |<br>|——————————|———–         ———       |  |<br>|| h_user user:id:3506728370   |   :name |——–&gt;|  春晚  |       |  |<br>|——————————|———-         ———-       |  |<br>|                              |                                    |  |<br>|——————————|———-         ————     |  |<br>|| h_user user:id:3506728370   |   :fans |——–&gt;| 12210862 |     |  |<br>|——————————|———-         ————     |  |<br>|                              |                                    |  |<br>|——————————|———–         ——–        |  |<br>|| h_user user:id:3506728370   |   :blogs |——–&gt;|  83 |         |  |<br>|——————————|———–         ——–        |  |<br>|                              |                                    |  |<br>|                              ————————————–  |<br>|————————————————————————<br>                   |       |       |<br>                   |       |       |<br>                   |       |       |<br>                   ↓       ↓       ↓<br>#换结构；左边主键合一；右边将属性对上其值放一块；redis为键值对数据库；类似于redis里面放redis的意思；😂；对应的数据还是value</p><hr><p>|                                               ————————————–  |<br>|                                               | 存储空间                           |  |<br>|                                               |   ——–         ———-      |  |<br>|                                               |   | name |         |  春晚  |      |  |<br>|                                               |   ——–         ———-      |  |<br>|—————————–                  |                                    |  |<br>|| h_user user:id:3506728370 |—————–&gt;|   ——–         ————    |  |<br>|—————————–                  |   | fans |         | 12210862 |    |  |<br>|                                               |   ——–         ————    |  |<br>|                                               |                                    |  |<br>|                                               |   ———         ——–       |  |<br>|                                               |   | blogs |         |  83  |       |  |<br>|                                               |   ———         ——–       |  |<br>|                                               |                                    |  |<br>|                                               ————————————–  |</p><hr><pre><code>|       |       ||       |       ||       |       |↓       ↓       ↓</code></pre><hr><p>|                                               ———————————————————– - |<br>|                                               | 存储空间（右边的该结构即hash）                             |  |<br>|                                               |   ——————–         ——————–      |  |<br>|                                               |   |  field  |  name |         |  value  |  春晚  |        |  |<br>|                                               |   ——————–         ——————–      |  |<br>|—————————————-       |                                                          |  |<br>||   key    | h_user user:id:3506728370 |——&gt;|   ——————–         ———————-    |  |<br>|—————————————-       |   |  field  |  fans |         |  value  |  12210862 |    |  |<br>|                                               |   ——————–         ———————-    |  |<br>|                                               |                                                          |  |<br>|                                               |   ——————–         ——————–      |  |<br>|                                               |   |  field  |  blogs |         |  value  |  83  |        |  |<br>|                                               |   ——————–         ——————–      |  |<br>|                                               |                                                          |  |<br>|                                               ————————————————————  |</p><hr><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">或者说key对应的不再是一个单独的数据了；而是一堆数据；</span><br><span class="line">而这一对数据它的整体结构和前面所看的那个结构是一模一样的；这就是所谓的hash类型；</span><br><span class="line"></span><br><span class="line">#### hash类型</span><br><span class="line"></span><br><span class="line">* 新的存储需求：对一系列存储的数据进行编组，方便管理，典型应用存储对象信息；（可以理解为是redis当中的小型redis）</span><br><span class="line">* 需要的存储结构：一个存储空间保存多个键值对数据；</span><br></pre></td></tr></table></figure><hr><p>|                                               ———————————————————– - |<br>|                                               | hash存储空间                                              |  |<br>|                                               |   ——————–         ——————-       |  |<br>|                                               |   |      field1     |          |      value1     |       |  |<br>|                                               |   ——————–         ——————-       |  |<br>|—————————————-       |                                                          |  |<br>||                key                   |——&gt;|   ——————–        ———————-     |  |<br>|—————————————-       |   |      field2     |          |      value2     |       |  |<br>|                                               |   ——————–        ———————-     |  |<br>|                                               |                                                          |  |<br>|                                               |   ——————–         ——————–      |  |<br>|                                               |   |      field3      |         |      value3     |       |  |<br>|                                               |   ——————–         ——————–      |  |<br>|                                               |                                                          |  |<br>|                                               ————————————————————  |</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">hash</span>底层其实为一个<span class="built_in">hash</span>表的存储结构；  </span><br><span class="line"><span class="built_in">hash</span>存储结构优化：  </span><br><span class="line"></span><br><span class="line">* 如果field数量较少，存储结构优化为类数组（还不是真数组）结构</span><br><span class="line">* 如果field数量较多，存储结构使用HashMap结构</span><br><span class="line"></span><br><span class="line"><span class="comment">#### hash 类型数据的基本操作</span></span><br><span class="line"></span><br><span class="line">* 添加/修改数据(属性存在则进行修改；属性不存在则进行新增)</span><br></pre></td></tr></table></figure><p>  hset key field value<br>  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>获取数据</span><br></pre></td></tr></table></figure><br>  hget key field<br>  hgetall key<br>  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>删除数据</span><br></pre></td></tr></table></figure><br>  hdel key field1 [field2 …]<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure></p><h1 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h1><p>127.0.0.1:6379&gt; hset user name laowang<br>(integer) 1<br>127.0.0.1:6379&gt; hset user age 100<br>(integer) 1<br>127.0.0.1:6379&gt; hset user gender girl<br>(integer) 1</p><h1 id="将值全部取出"><a href="#将值全部取出" class="headerlink" title="将值全部取出"></a>将值全部取出</h1><p>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laowang”<br>3) “age”<br>4) “100”<br>5) “gender”<br>6) “girl”</p><h1 id="进行单个取值"><a href="#进行单个取值" class="headerlink" title="进行单个取值"></a>进行单个取值</h1><p>127.0.0.1:6379&gt; hget user name<br>“laowang”<br>127.0.0.1:6379&gt; hget user gender<br>“girl”<br>127.0.0.1:6379&gt; hget user age<br>“100”</p><h1 id="进行删除属性"><a href="#进行删除属性" class="headerlink" title="进行删除属性"></a>进行删除属性</h1><p>127.0.0.1:6379&gt; hdel user gender<br>(integer) 1<br>127.0.0.1:6379&gt; hdel user age name<br>(integer) 2<br>127.0.0.1:6379&gt; hdel user age<br>(integer) 0<br>127.0.0.1:6379&gt; hgetall user<br>(empty list or set)</p><h1 id="设置值；重新赋值则覆盖原来存在的值"><a href="#设置值；重新赋值则覆盖原来存在的值" class="headerlink" title="设置值；重新赋值则覆盖原来存在的值"></a>设置值；重新赋值则覆盖原来存在的值</h1><p>127.0.0.1:6379&gt; hset user name laowang<br>(integer) 1<br>127.0.0.1:6379&gt; hset user name laoli<br>(integer) 0<br>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laoli”<br>127.0.0.1:6379&gt; hset user name laowang<br>(integer) 0<br>127.0.0.1:6379&gt; hget user name<br>“laowang”</p><h1 id="查看长度；检查的是field的数量；"><a href="#查看长度；检查的是field的数量；" class="headerlink" title="查看长度；检查的是field的数量；"></a>查看长度；检查的是field的数量；</h1><p>127.0.0.1:6379&gt; hlen user<br>(integer) 1</p><h1 id="检查field是否存在；0不存在；1存在"><a href="#检查field是否存在；0不存在；1存在" class="headerlink" title="检查field是否存在；0不存在；1存在"></a>检查field是否存在；0不存在；1存在</h1><p>127.0.0.1:6379&gt; hexists user gender<br>(integer) 0<br>127.0.0.1:6379&gt; hexists user name<br>(integer) 1</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 数据类型-hash扩展操作与使用注意事项</span><br><span class="line"></span><br><span class="line">#### hash 类型数据扩展操作</span><br><span class="line"></span><br><span class="line">(key当中的field不会进行重复，就如果重复设置相同的field将会发生覆盖；而不同的field所对应的是允许相同值存在的)</span><br></pre></td></tr></table></figure><p>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laowang”<br>3) “gender”<br>4) “101.09”<br>5) “age”<br>6) “101.09”<br>127.0.0.1:6379&gt; hset user name laoli<br>(integer) 0<br>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laoli”<br>3) “gender”<br>4) “101.09”<br>5) “age”<br>6) “101.09”</p><p>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laowang”<br>3) “gender”<br>4) “girl”<br>5) “age”<br>6) “101.09”<br>127.0.0.1:6379&gt; hset user gender 101.09<br>(integer) 0<br>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laowang”<br>3) “gender”<br>4) “101.09”<br>5) “age”<br>6) “101.09”</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">* </span>获取哈希表中所有的字段名或字段值</span><br></pre></td></tr></table></figure><p>  hkeys key<br>  hvals key<br>  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>设置指定字段的数值数据增加指定范围的值</span><br></pre></td></tr></table></figure><br>  hincrby key field increment<br>  hincrbyfloat key field increment<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><br>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laowang”<br>3) “gender”<br>4) “girl”<br>5) “age”<br>6) “100”<br>127.0.0.1:6379&gt; hkeys user</p><p>1) “name”<br>2) “gender”<br>3) “age”<br>127.0.0.1:6379&gt; hvals user</p><p>1) “laowang”<br>2) “girl”<br>3) “100”<br>127.0.0.1:6379&gt; hincrby user age 1<br>(integer) 101<br>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laowang”<br>3) “gender”<br>4) “girl”<br>5) “age”<br>6) “101”<br>127.0.0.1:6379&gt; hincrbyfloat user age 0.09<br>“101.09”<br>127.0.0.1:6379&gt; hgetall user</p><p>1) “name”<br>2) “laowang”<br>3) “gender”<br>4) “girl”<br>5) “age”<br>6) “101.09”</p><p>127.0.0.1:6379&gt; hset user2 name laowang<br>(integer) 1</p><h1 id="返回形式都是通过列表的形式进行返回"><a href="#返回形式都是通过列表的形式进行返回" class="headerlink" title="返回形式都是通过列表的形式进行返回"></a>返回形式都是通过列表的形式进行返回</h1><p>127.0.0.1:6379&gt; hkeys user2</p><p>1) “name”</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">#### hash类型数据操作的注意事项</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>hash类型下的value只能存储字符串，不允许存储其他数据类型，不允许嵌套现象。如果数据未获取到，对应的值为（nil）</span><br><span class="line"><span class="bullet">* </span>每个hash 可以存储2^32 - 1 个键值对；（上限）</span><br><span class="line"><span class="bullet">* </span>hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性。但是hash设计初衷<span class="strong">**不是为了存储大量对象而设计**</span>的，<span class="strong">**切记不可滥用**</span>，<span class="strong">**更不可以将hash作为对象列表使用**</span>(随着存储大量对象，那么效率将会降低)；</span><br><span class="line"><span class="bullet">* </span>hgetall 操作可以获取全部属性，如果内部field过多，遍历整体数据效率就会低，有可能成为数据访问瓶颈。（每次查询的时候最好是要哪个查询那个即使用hget key field这种方式；因为有些时候拿出一些不需要的数据有个时候会很影响效率）</span><br><span class="line"></span><br><span class="line"><span class="section">### 数据类型-hash实现购物车</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### hash 类型应用场景</span></span><br><span class="line"></span><br><span class="line"><span class="section">##### 业务场景</span></span><br><span class="line"></span><br><span class="line">电商网站购物车设计与实现  </span><br><span class="line"></span><br><span class="line">（京东电商网站购物车）  </span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>不同用户的购物车是共用还是各用个的（每个用户的id可以进行区分）；</span><br><span class="line"><span class="bullet">2. </span>一个购物车中是一样商品还是多样商品?</span><br><span class="line"><span class="bullet">3. </span>一个商品存在有对应购买的数量；</span><br><span class="line"></span><br><span class="line">此时:  </span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>可以使用  用户id:key  ，即用户id作为key；</span><br><span class="line"><span class="bullet">2. </span>用用户所买的商品编号作为field，即 商品id:field；</span><br><span class="line"><span class="bullet">3. </span>那么对应的value即该商品所购买的数量，即 数量:value；</span><br><span class="line"><span class="bullet">4. </span>那么此时结构完成。</span><br><span class="line"></span><br><span class="line">问题： 购物车所对应的操作，redis当中的hash是否支持？  </span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>商品数量的读取：取值：hget</span><br><span class="line"><span class="bullet">2. </span>商品数量的增加、设置：增加:hincrby；设置:hset</span><br><span class="line"><span class="bullet">3. </span>删除购物车中某一商品: 删除:hdel</span><br><span class="line"><span class="bullet">4. </span>全选获取得到全部的商品：全选:hgetall</span><br><span class="line"><span class="bullet">5. </span>获取商品总数量: 总量:hlen</span><br><span class="line"></span><br><span class="line"><span class="section">##### 业务分析</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>仅分析购物车的redis存储模型</span><br><span class="line"><span class="bullet">  * </span>添加、浏览、更改数量、删除、清空</span><br><span class="line"><span class="bullet">* </span>购物车与数据库间持久化同步（不讨论）</span><br><span class="line"><span class="bullet">* </span>购物车与订单间关系（不讨论）</span><br><span class="line"><span class="bullet">  * </span>提交购物车：读取数据生成订单</span><br><span class="line"><span class="bullet">  * </span>商家临时价格调整：隶属于订单级别</span><br><span class="line"><span class="bullet">* </span>未登录用户购物车信息存储（不讨论）</span><br><span class="line"><span class="bullet">  * </span>cookie存储</span><br><span class="line"></span><br><span class="line"><span class="section">##### 解决方案</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>以客户id作为key，每位客户创建一个hash存储结构存储对应的购物车信息</span><br><span class="line"><span class="bullet">* </span>将商品编号作为field，购买数量作为value进行存储</span><br><span class="line"><span class="bullet">* </span>添加商品，追加全新的field与value</span><br><span class="line"><span class="bullet">* </span>浏览：遍历hash</span><br><span class="line"><span class="bullet">* </span>更改数量：自增/自减，设置value值</span><br><span class="line"><span class="bullet">* </span>删除商品：删除field</span><br><span class="line"><span class="bullet">* </span>清空：删除field</span><br><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><p>127.0.0.1:6379&gt; hmset 001 g01 100 g02 200<br>OK<br>127.0.0.1:6379&gt; hmset 002 g02 1 g04 7 g06 100<br>OK<br>127.0.0.1:6379&gt; hset 001 g03 9<br>(integer) 1<br>127.0.0.1:6379&gt; hgetall 001</p><p>1) “g01”<br>2) “100”<br>3) “g02”<br>4) “200”<br>5) “g03”<br>6) “9”<br>127.0.0.1:6379&gt; hdel 001 g01<br>(integer) 1<br>127.0.0.1:6379&gt; hgetall 001</p><p>1) “g02”<br>2) “200”<br>3) “g03”<br>4) “9”<br>127.0.0.1:6379&gt; hincrby 001 g03 1<br>(integer) 10<br>127.0.0.1:6379&gt; hgetall 001</p><p>1) “g02”<br>2) “200”<br>3) “g03”<br>4) “10”</p><pre><code>##### 当前设计是否加速了购物车的呈现当前仅仅是将数据存储到了redis中，并没有起到加速的作用，商品信息还需要二次查询数据库购物车到底看到的是什么，第一个商品id是什么?  商品信息还必须二次去数据库进行查询；当前的这种方案查看购物车只是存购物车，并没有提高效率；##### 分析要解决的问题* 每条购物车中的商品记录保存成两条field### hash实现抢购### 数据类型-list类型介绍与基本操作### 数据类型-list阻塞数据获取### 数据类型-list扩展操作删除数据### 数据类型-list实现日志消息队列### 数据类型-set类型介绍与基本操作### 数据类型-set操作随机数据### 数据类型-set数据交并差操作### 数据类型-set实现权限校验### 数据类型-set实现网站访问量统计### 数据类型-set实现黑白名单### set类型介绍与基本操作### 数据类型-sorted_set基本操作（2）### 数据类型-sorted_set实现排行榜### set实现时效性任务管理### set带有权重的任务管理### 数据类型-案例-按次结算的服务控制### 数据类型-案例-微信接收消息顺序控制### 通用指令-key基本操作### 通用指令-key时效性控制操作### 通用指令-key查询操作### 通用指令-key其他操作### 通用指令-db基本操作### 通用指令-db其他操作### jedis-jedis简介### jedis-helloworld（jedis版）### jedis-jedis常规操作演示### jedis-业务请求次数控制案例需求分析### jedis-程序结构搭建### jedis-程序代码实现### jedis-工具类制作### jedis-可视化客户端介绍### linux环境安装redis-基于Linux安装redis### linux环境安装redis-指定端口启动服务### linux环境安装redis-指定配置文件启动服务### linux环境安装redis-配置文件启动目录管理### 持久化-持久化简介#### 课程安排##### 课程计划&gt; Windows环境1. Redis基础  * Redis入门  * 数据类型  * 通用命令  * Jedis&gt; Linux 环境2. Redis高级  * Redis安装  * 持久化  * 事务  * 删除策略  * redis.conf  * 高级数据类型3. Redis集群4. 企业级解决方案#### 目录Contents* 持久化简介* RDB* AOF* RDB与AOF区别* 持久化应用场景首先什么是持久化？针对redis当中的持久化方案进行逐一讲解，并对方案之间进行一个比对；#### 意外的断电写论文的时候断电了。#### “自动备份”其实是将内存当中的数据与在硬盘当中的数据做了一个关联。### 持久化-save指令### 持久化-RDB相关配置### 持久化-数据恢复过程演示### 持久化-save指令工作原理### 持久化-bgsave指令与工作原理### 持久化-save配置与工作原理### 持久化-RDB三种启动方式对比与优缺点分析### 持久化-AOF简介### 持久化-AOF持久化策略基本操作### 持久化-AOF重写概念与命令执行### 持久化-AOF自动重写配置### 持久化-AOF重写工作原理### 持久化-RDB与AOF方案对比### 持久化-持久化应用场景分析### 事务-redis事务简介### 事务-事务的基本操作（定义，取消，执行）### 事务-事务的工作流程### 事务-事务操作的注意事项### 事务-锁### 事务-死锁解决方案### 删除策略-过期数据的概念### 删除策略-过期数据的底层存储结构### 删除策略-定时删除与惰性删除### 删除策略-定期删除### 删除策略-逐出策略### 服务器配置-redis.conf配置### 高级数据类型-bitmaps介绍与基本操作### 高级数据类型-bitmaps扩展操作### 高级数据类型-HyperLogLog### 高级数据类型-CEO### 主从复制-主从复制简介### 主从复制-主从复制的作用### 主从复制-主从复制的三个阶段### 主从复制-工作流程（1）建立连接阶段### 主从复制-搭建主从结构### 主从复制-工作流程（2）数据同步阶段（简）### 主从复制-数据同步阶段注意事项### 主从复制-运行id(runid)### 主从复制-复制缓冲区与偏移量### 主从复制-工作流程（2）数据同步与命令传播阶段（全）### 主从复制-心跳机制与命令传播阶段工作流程### 主从复制-常见问题（1）### 主从复制-常见问题（2）### 主从复制-常见问题（3）### 哨兵-哨兵简介### 哨兵-哨兵结构搭建### 哨兵-工作原理（1）### 哨兵-工作原理（2）### 哨兵-工作原理（3）### 集群-集群简介### 集群-集群存储结构设计### 集群-cluster集群搭建### 集群-设置与获取数据### 集群-主从下线与主从切换### 企业级解决方案-缓存预热### 企业级解决方案-缓存雪崩### 企业级解决方案-缓存击穿### 企业级解决方案-缓存穿透### 企业级解决方案-性能指标监控### 企业级解决方案-性能指标监控命令</code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存四大问题</title>
      <link href="/2020/05/12/%E3%80%90REDIS%E3%80%91/%E3%80%90REDIS%E3%80%91redis%E7%BC%93%E5%AD%984%E5%A4%A7%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/12/%E3%80%90REDIS%E3%80%91/%E3%80%90REDIS%E3%80%91redis%E7%BC%93%E5%AD%984%E5%A4%A7%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1gZ4y1s7Aw" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1gZ4y1s7Aw</a></p><p>之前这个的视频下架了，我就没办法再回过头去再看一遍；现在知道了，一边看一定得一定得做笔记。不然下次悄悄地没有了。想哭都没地方。  </p><h2 id="缓存穿透详解及实战"><a href="#缓存穿透详解及实战" class="headerlink" title="缓存穿透详解及实战"></a>缓存穿透详解及实战</h2><ol><li><strong>如何使用缓存？</strong></li></ol><p>（思路十分简单）</p><p>controller层(对于数据的访问)：  </p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">OrderService orderService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function">Integer <span class="title">insertOrder</span><span class="params">(Order order)</span></span>&#123; <span class="function"><span class="keyword">return</span> orderService.<span class="title">insertOrder</span><span class="params">(order)</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/updateOrder"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function">Integer <span class="title">updateOrder</span><span class="params">(Order order)</span></span>&#123; <span class="function"><span class="keyword">return</span> orderService.<span class="title">updateOrder</span><span class="params">(order)</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于一条数据的访问；通过id进行查询数据；</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/selectid"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function">R <span class="title">selectOrderById</span><span class="params">(Integer id)</span></span>&#123; <span class="function"><span class="keyword">return</span> orderService.<span class="title">selectOrderById</span><span class="params">(id)</span></span>;&#125;</span><br></pre></td></tr></table></figure><p>service层：  </p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.xxx.testcache.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="params">...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> interface OrderService&#123;</span><br><span class="line">  <span class="built_in">Integer</span> insertOrder(<span class="keyword">Order</span> <span class="keyword">order</span>);</span><br><span class="line"></span><br><span class="line">  R selectOrderById(<span class="built_in">Integer</span> id);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="keyword">Order</span>&gt; selectOrderAll();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Integer</span> updateOrder(<span class="keyword">Order</span> <span class="keyword">order</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service impl（实现）层：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//查询缓存；</span></span><br><span class="line">  <span class="comment">//第一次查询缓存，即查询redis；</span></span><br><span class="line">  <span class="comment">//valueOperations这个对象专门针对于redis当中String类型的一个操作；</span></span><br><span class="line">  <span class="comment">//valueOperations是与SpringBoot整合之后的一个对象；valueOperations的上级即为redis；</span></span><br><span class="line">  <span class="comment">//valueOperations专用于操作字符串String类型；</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="comment">//如果缓存当中存在该对象则直接返回；</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//否则如果缓存当中不存在该对象则查询数据库；</span></span><br><span class="line">  <span class="comment">//查询数据库之后，再将该数据加入到缓存当中；</span></span><br><span class="line">  <span class="comment">//方便下一次查询的时候更够查询得到该记录，该对象；</span></span><br><span class="line">  <span class="comment">//然后返回给前端</span></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;finally&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果数据库也查询不到；则返回前端：无此数据</span></span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//思路简单：缓存当中有则返回该记录给前端；缓存当中没有则再查询数据库；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper层：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.xxx.testcache.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="params">...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> interface OrderMapper&#123;</span><br><span class="line">  </span><br><span class="line">    @<span class="keyword">Select</span>(<span class="string">"insert into t_order (id,name) values (#&#123;id&#125;, #&#123;name&#125;)"</span>)</span><br><span class="line">    <span class="built_in">Integer</span> insertOrder(<span class="keyword">Order</span> <span class="keyword">order</span>);</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Select</span>(<span class="string">"select * from t_order where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="keyword">Order</span> selectOrderById(<span class="built_in">Integer</span> id);</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Select</span>(<span class="string">"select * from t_order"</span>)</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="keyword">Order</span>&gt; selectOrderAll();</span><br><span class="line"></span><br><span class="line">    @Update(<span class="string">"update t_order set  `name`=#&#123;name&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="built_in">Integer</span> updateOrder(<span class="keyword">Order</span> <span class="keyword">order</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>为什么要使用缓存？</strong></li></ol><p>（1）<strong>提高性能</strong>；  </p><p><strong>查询redis比查询数据库快</strong>；<br>现在的nosql数据库一般多用为redis；<br>那么关系型数据库一般多用为mysql；<br>所以当前举例关系型数据库以mysql为主；<br>非关系型数据库以redis为主进行讲解；  </p><p>（2）<strong>保护数据库</strong>；  </p><p>如果没有缓存redis，则每一次请求都将要去访问数据库；<br>那么由此也就造成了<strong>数据库的访问压力</strong>；<br>特别是在一些大公司当中，其访问量特别特别多的；<br>那么如果此时所有的查询请求都去往数据库的话，那么服务器数据库的压力也是非常大的；<br>所以当使用缓存之后；可以看到使用了缓存则，大部分请求都将会在[ <strong>命中缓存</strong> ]该步骤时进行返回给前端（就不再去访问数据库了）；<br>第一次查询将查询数据库；第二次查询就不再会去查询数据库了而是会去查询缓存；  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="comment">//查询缓存</span></span><br><span class="line">Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//命中缓存</span></span><br><span class="line"><span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">  <span class="comment">//正常返回数据</span></span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">···</span><br></pre></td></tr></table></figure><p>一般对于加入到缓存当中的数据，会加一个过期时间；<br>比如当前有一个促销活动，需要卖出商品；<br>且该商品的促销时间只做三天；<br>那么就可以给该商品数据的缓存数据设置一个三天的过期时间；<br><strong>一般会给缓存当中的数据设置一个过期时间</strong>；  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br></pre></td></tr></table></figure><p>此段代码即普通程序员所写代码；<br>如果该段代码在中小型公司存在问题不大；<br>但是如果该段代码放在大公司当中，该段代码就不能够这样写了；  </p><p>因为大公司当中要求特别高（╮(╯▽╰)╭）；  </p><p>且该段代码当中存在缓存三大问题中的两大问题没有解决：第一个问题是<strong>缓存穿透</strong>；第二个问题就是<strong>缓存击穿</strong>；</p><ol start="3"><li><strong>缓存有三个问题？</strong>  </li></ol><p>（1） <strong>缓存穿透</strong></p><p>指的是 <strong>查询数据库和缓存当中都没有的数据</strong>（<strong>查询的为空数据</strong>）</p><p>（当前测试库当中的数据仅仅只有8条数据；但是现在查询数据id为2000的数据记录）</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//id</span>为2000的该数据在测试库当中并不存在</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:500</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"查询无果"</span>&#125;</span><br><span class="line"><span class="string">//</span>尽管查询无果；但是该操作，即查询id为2000的该操作依然查询了数据库；</span><br><span class="line"><span class="string">//</span>前面说查询缓存，是为了保护数据库；</span><br><span class="line"><span class="string">//</span>但是现在一个不存在的数据，进行查询的时候每一次都进行查询了数据库；</span><br><span class="line"><span class="string">//</span>由于数据库当中不存在该数据记录行，那么缓存当中也肯定不会存在有该数据记录行</span><br><span class="line"></span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1001</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1001</span>, <span class="string">"name"</span>:<span class="string">"王昭君"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br></pre></td></tr></table></figure><p>问题代码分析：<br>1、第一次查询缓存，查询无果之后，查询数据库；<br>2、数据库也查询不到则查询无果；<br>3、在数据记录行在数据库当中记录为空该情况下，该段代码每一次都将会去查询数据库；  </p><p>当前市面上有<strong>两种解决缓存穿透问题的方案</strong>：</p><p>（1）<strong>缓存空对象</strong>：代码简单，效果不好<br>（2）<strong>布隆过滤器</strong>：代码复杂，效果很好（一般用<strong>布隆过滤器</strong>）</p><p><strong>缓存空对象</strong>的实现思路：</p><p>当去查询一条在数据库当中不存在的数据记录行的时候；<br>不管该数据记录行在数据库当中查询得到或者查询不到，都将该信息交给缓存；  </p><p>service impl（实现）层：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//查询缓存；</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="comment">//查询出来的对象进行判断是否其实例属于空对象</span></span><br><span class="line">    <span class="keyword">if</span>( redisObj instanceOf NullValueResultDO)&#123;</span><br><span class="line">      <span class="comment">//如果属于空对象则直接返回查询无果该响应结果</span></span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//此处添加else判断，当该数据记录行在数据库当中查询不到的时候的处理操作</span></span><br><span class="line">        <span class="comment">//如果数据库当中查询不到，那么此时使用一个空对象加入到缓存当中去；</span></span><br><span class="line">        <span class="comment">//当加入的内容为空对象的时候，那么每次查询开头的时候也就同样需要判断；是否为空对象，如果为空对象则直接返回前端查询无果；就将不再去进行查询数据库这一操作了；</span></span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, <span class="keyword">new</span> <span class="constructor">NullValueResultDO()</span>, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">//加入缓存</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;finally&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>空对象</strong> NullValueResultDO(无属性):</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.testcache.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NullValueResultDO</span>&#123;</span></span><br><span class="line">  <span class="comment">//private String name;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询数据记录行在数据库当中为空的情况分析：<br><strong>1、</strong> 第一次查询缓存，缓存当中没有命中，即缓存当中不存在该数据记录；</p><p><strong>2、</strong> 此时查询数据库，查询数据库中发现该数据行为空；则将该一个空对象加入到缓存当中，其id为查询的内容，其值为空对象；则此时进行返回</p><p><strong>3、</strong> 第二次进行查询缓存，同样查询的数据在数据库当中数据记录行为空；<br>则此时先进行查询缓存，缓存当中存在该数据记录行，也就是存在id为查询id的记录值；<br>则此时当缓存命中之后进行判断缓存的该实例是否为空对象;<br>如果为空对象则直接返回查询无果否则返回查询数据；</p><p><strong>缓存穿透</strong>该第一种解决方案（<strong>缓存空对象</strong>）的<strong>效果为什么不好</strong>？<br>原因：</p><ul><li>每一次换<strong>不同的查询</strong>，且每一次不同的查询（即id不同）明知该数据在数据库当中查询不到；但是<strong>都还是会去查询一次</strong>；</li><li>缓存空对象解决的问题是<strong>一个key</strong>（即一个id）<strong>对其进行多次访问</strong>的这样一个问题（当过期时间失效则又将会去查询一遍数据库）；</li><li>如果存在查询数据为大量空数据则将会导致redis当中<strong>存在有大量的空对象</strong>（空数据）（恶意大规模查询明知道数据库当中为记录行为空的数据（空数据）；）弊端就在于<strong>占用redis的内存</strong>；</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//id</span>为2000的该数据在测试库当中并不存在</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:500</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"查询无果"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>此时响应的内容是查询的缓存当中的数据；</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>此时响应的内容是查询的缓存当中的数据；</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>此时响应的内容是查询的缓存当中的数据；</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>此时响应的内容是查询的缓存当中的数据；</span><br><span class="line"></span><br><span class="line"><span class="params">---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2002</span><br><span class="line"><span class="string">//</span>第一次查询缓存当中不存在的内容就将会去查询一遍数据库；</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:500</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"查询无果"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2003</span><br><span class="line"><span class="string">//</span>第一次查询缓存当中不存在的内容就将会去查询一遍数据库；</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:500</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"查询无果"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2004</span><br><span class="line"><span class="string">//</span>第一次查询缓存当中不存在的内容就将会去查询一遍数据库；</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:500</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"查询无果"</span>&#125;</span><br></pre></td></tr></table></figure><p>谷歌有一个框架叫做 <strong>Guava</strong>；在这个 <strong>Guava</strong> 框架当中已经写好了<strong>布隆过滤器</strong>；即已经提供了<strong>布隆过滤器</strong>；缺陷在于 <strong>Guava</strong> 框架当中的该<strong>布隆过滤器</strong>不支持分布式；</p><p><strong>布隆过滤器应用</strong></p><p>maven安装依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>27.0.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>安装依赖之后就可以直接使用；<br>调用其静态方法就可以直接创建出一个布隆过滤器；<br>如果对布隆过滤器没有认识的道友，可以将布隆过滤器理解为一个ArrayList集合，就理解为java当中的一个集合即可；  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBloomFilter</span>&#123;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="built_in">size</span> = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//size         预计要插入多少条数据</span></span><br><span class="line"><span class="comment">//fpp          容错率--&gt;出现误判的概率是多少</span></span><br><span class="line"><span class="comment">//bloomFilter  位数组</span></span><br><span class="line"><span class="comment">//list         创建的是object数组</span></span><br><span class="line"><span class="comment">//bit          数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//位数组  21亿  JVM内存     数据不会进行持久化  256M</span></span><br><span class="line"><span class="comment">//redis   42亿  redis内存   redis的持久化数据   512M==42亿位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//bit[]</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), <span class="built_in">size</span>, <span class="number">0.001</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//List list = new ArrayList();</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Integer[] integers = new Integer[Integer.MAX_VALUE];</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//当前该循环会生成1~100,0000 当中所有的数值；</span></span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; = <span class="built_in">size</span> ; i++ )&#123;</span><br><span class="line">    <span class="comment">//将这些1~100,0000的数值全部添加到布隆过滤器bloomFilter(集合)当中</span></span><br><span class="line">    bloomFilter.<span class="built_in">put</span>(i);</span><br><span class="line">    <span class="comment">//bloomFilter.put("老王");</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  List&lt;Integer&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10000</span>);</span><br><span class="line">  <span class="comment">//故意取10000个不在过滤器里的值，看看有多少个会被认为在过滤器里</span></span><br><span class="line">  <span class="comment">//size + 10000 = 100,0000+1000;</span></span><br><span class="line">  <span class="comment">//size + 20000 = 100,0000+2000;</span></span><br><span class="line">  <span class="comment">//该数值肯定大于100,0000；肯定与第一次循环当中的数值相同；</span></span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="built_in">size</span> + <span class="number">10000</span> ; i &lt; <span class="built_in">size</span> + <span class="number">20000</span> ; i++ )&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用该数值i在布隆过滤器当中是否存在的方法；如果存在则加入布隆过滤器；否则不加入布隆过滤器；</span></span><br><span class="line">    <span class="comment">//之前将布隆过滤器比喻为java当中的ArrayList集合；</span></span><br><span class="line">    <span class="comment">//则当前期望的是：此时当前该循环当中是不会任何一个数值加入到该布隆过滤器bloomFilter当中去的，也就是该ArrayList集合当中去；</span></span><br><span class="line">    <span class="keyword">if</span>(bloomFiilter.mightContain(i))&#123;<span class="comment">//误判</span></span><br><span class="line">      <span class="built_in">list</span>.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  System.out.<span class="built_in">println</span>(<span class="string">"误判的数量："</span>+<span class="built_in">list</span>.<span class="built_in">size</span>);</span><br><span class="line">  <span class="comment">//响应为：10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>布隆过滤器确确实实是一个集合对象</li><li>布隆过滤器当中仅存在两个方法，<ul><li>第一个方法是put(Object obj);（将数据取值加入到布隆过滤器当中）；</li><li>第二个方法是mightContain(Object obj);（判断数据取值是否在布隆过滤器当中存在）</li></ul></li><li>加入到布隆过滤器当中的数据无法被修改(update)被删除(delete)被取出来(get)；只能够进行添加(put)以及判断是否存在(mightContain);</li><li>mightContain 该方法有可能判断失误；</li><li>此时理解布隆过滤器可以理解为一个特殊的集合对象；</li></ul><p>定义布隆过滤器仅需要做（定义）：<br>(1) size 预计要插入多少数据（预计插入量）<br>(2) fpp  容错率（<strong>False positive probability</strong>）—&gt;出现误判的概率是多少（即上述当中误判的次数是可以由自己定义的；容错率是百分之百会有的；不能定义为0；如果定义为0就将会抱错）</p><p>误判：传一个key到该布隆过滤器（“ArrayList”）当中进行判断；该数据是否存在（mightContain）在该布隆过滤器当中；而该方法mightContain有可能会判断失误；而导致不存在在布隆过滤器当中的key也被判断出存在在该布隆过滤器当中了；（明明不存在，有可能会被判断为存在）  </p><p>判断的该<strong>容错率</strong>取值<strong>越低</strong>；其底层的<strong>内存消耗</strong>则将<strong>越大</strong>；<br>而<strong>容错率</strong>取值<strong>越高</strong>；则<strong>内存开销</strong>则<strong>小</strong>；</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> static <span class="built_in">int</span> size = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> static BloomFilter&lt;Integer&gt; bloomFilter=<span class="module-access"><span class="module"><span class="identifier">BloomFilter</span>.</span></span>create(<span class="module-access"><span class="module"><span class="identifier">Funnels</span>.</span></span>integer<span class="constructor">Funnel()</span>,size, <span class="number">0.001</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//此时第一次打印出现的误判次数为10次；</span></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">  <span class="keyword">private</span> static <span class="built_in">int</span> size = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> static BloomFilter&lt;Integer&gt; bloomFilter=<span class="module-access"><span class="module"><span class="identifier">BloomFilter</span>.</span></span>create(<span class="module-access"><span class="module"><span class="identifier">Funnels</span>.</span></span>integer<span class="constructor">Funnel()</span>,size, <span class="number">0.1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//此时第二次打印出现的误判次数为1033次；</span></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">  <span class="keyword">private</span> static <span class="built_in">int</span> size = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> static BloomFilter&lt;Integer&gt; bloomFilter=<span class="module-access"><span class="module"><span class="identifier">BloomFilter</span>.</span></span>create(<span class="module-access"><span class="module"><span class="identifier">Funnels</span>.</span></span>integer<span class="constructor">Funnel()</span>,size, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//此时第二次打印出现的抛出异常，报错；</span></span><br><span class="line">  <span class="comment">//即布隆过滤器的容错率不能为0</span></span><br><span class="line">  <span class="comment">//java.lang.ExceptionInInitializerError</span></span><br><span class="line">  <span class="comment">//Caused by: java.lang.IllegalArgumentException:False positive probability(0.0) must be &gt; 0.0</span></span><br></pre></td></tr></table></figure><p><strong>布隆过滤器原理</strong><br>布隆过滤器的底层实现依赖于bit数组；<br>1个字节byte为8位；<br>1024个字节为1M；<br>所以其单位是很小；<br>512M=524288byte</p><p>由于位数组，即byte只有一位；所以其取值就只能够是0和1；<br>默认该数组当中的白色格子取值value全部为0；而蓝色格子取值value为1；</p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXy93sfkaGWRUBapr9y3pHbtQ6yRyawhbsd7*AS4G1K*c*Gb56IM9A4pA41f7IAo4fIom1PvvFF11WuEdaLRX51c!/r" alt="布隆过滤器"></p><p>左边即为往布隆过滤器当中进行put方法操作的结果（把数据加入到布隆过滤器）；</p><p>那么其位数组就会发生变化；<br>变化的表现有：</p><ul><li>该布隆过滤器其数组当中所有的key取值value默认都为0</li><li>当添加完一条数据（“老王”）之后，就会出现三个格子，变成黄色；也就代表着，该三个格子所处index位置（可以不为3个，只是说该图经过计算得为3个（举个例子不要当真）；<ul><li>为什么被计算出来为3个index位置的格子被改成了1；</li><li>其实也可以改下，将其改成10个index位置被改颜色为黄色，即将默认取值0改成1），其value值被改变称为1了；默认为0；</li></ul></li><li>如何修改的呢？<ul><li>上述为3个index位置被改变颜色为黄色，即将默认取值改变为1；</li><li>那么此时可以认为是3个hash函数对该加入到布隆过滤器当中的该取值“老王”进行了hash；</li><li>那么3个hash函数对“老王”该取值进行了hash之后，就会得到有一个数字；</li><li>打个比方：hash(“老王”)=1212121；hash某一字符串都将得到一个数值；</li><li>通过hash获取的到一个数值之后，在对该布隆过滤器该数组的长度进行<strong>取余</strong>；</li><li>比如说该布隆过滤器该数组的长度是40；</li><li>那么就会将对“老王”进行hash得到的数值 对 该布隆过滤器数组的长度进行 取余；即1212121%40=3；（该3是随意捏造的；不要当真；只是一个例子）</li><li>那么此时布隆过滤器就将会将index取值为3的该位置的默认取值0改为1；</li><li>步骤：首先对加入到布隆过滤器的数值进行hash，经过hash之后就会得到一个数值；将该数值进行取余该布隆过滤器数组的长度得到的数值就是在该布隆过滤器数组当中的一个下标；则将该下标的默认取值0进行修改为1；</li><li>当前为什么会有3个不同的位置被改变颜色为黄色呢（即改变默认取值为1）?原因就在于有3个不同的hash函数，存在有不同的hash函数则将有3个不同位置的数组index被改变默认取值0为1；（通过hash函数对加入到布隆过滤器当中的取值进行hash得到下标位置再进行取余数组长度得到在该数组当中的下标index位置）</li><li>使用了3个不同的hash函数对该put(Object obj) obj对象进行了hash</li><li>hash算法存在有多个，比如说hash32，hash16…(都是进行hash，只是hash的函数不一样；为什么是三个不同的hash呢？可以是10个100个n个不同的hash；自己设定；自己喜欢就好；喜欢多少个就多少个)</li><li>hash函数多并不一定导致容错率低，只能说是一种因素；</li></ul></li></ul><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX1IOvYMzL*IGr4hMfNmq0SLpSUjWiYQqv*cQR*MK3kZarTxU*24HFj0FaxTXP9dLIO.fiVY2eH4cPYFmojOxc8M!/r" alt="布隆过滤器mightContain判断是否存在"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX1nwjJZCSD2X9riQotNbwt9nUD*060h1sSAaCk5hI9WOQJEcFG3tGpPrepg4ztfFPKkDeVMefdqHGj9ns7B99jw!/r" alt="布隆过滤器put方法"></p><p>位数组（布隆过滤器）当中默认全部为0，当时当插入的数据量过大，即位数组当中将有大部分原本默认取值为0的index将被改变取值为1；</p><p>当前插入到布隆过滤器当中的数据有21条数据记录行：<br>1、2、3、4、5、6、7、8、9、10、11、12、13、14、15、16、17、18、19、20、老王</p><p><strong>可能存在（误判的原因）</strong><br>（1）当进行查找“老王”时，是可以查找得到的；<br>（2）当进行查找 1 时，是可以查找得到的；  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXw6xgVJROJh3BJY6xFr9VJp6l4Zz7Pw*B3XR97Ym8Flrt07pQJDvc4W*10SFkqDBy5AkMwUaqHzOjviy6g9514Q!/r" alt="bloomFilter插入数据量大进行数据判断时"></p><p>（3）当进行查找 111 时，也是可以查找得到的；此时就出现了<strong>误判</strong>；<br>该取值111并不是加入到布隆过滤器当中的数值；<br>而是21条数据添加通过3个不同的hash取余数组长度得到各个不同的在数组当中的下标位置index；<br>恰巧就将 111 该取值进行3个不同的hash函数得出的3个不同的数值取余数组长度得到的3个不同位置下标index的默认取值0进行了改值为1；<br>而111该数值的三个在布隆过滤器数组当中index下标位置取值默认为0被修改为1；<br>并非是111进行mightContain时进行修改的；<br>而是当添加21条数据记录时进行修改的；<br>也就是当[<strong>因素1</strong>]添加到布隆过滤器当中的数据量过大时，如果[<strong>因素2</strong>]有多个hash函数（<strong>hash冲突</strong>），那么布隆过滤器当中就可能存在多个下标位置index的取值由0改变为1的这种情况；  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX6G6Nkh9oP4j1AI.xWFqKAqs9pJ6hpqT9bcebJgsD1MnDW3AU*HyNTcnfjGcwoSGm1Y5nNUuczxo97CBCFXTZsA!/r" alt="bloomFilter插入数据量大误判情况的产生"></p><p>1、为什么布隆过滤器没有取出的方法即get方法；—&gt;因为其布隆过滤器底层没有进行保存其加入到布隆顾虑器当中真实的取值；只有位数组；<br>2、布隆过滤器也没有delete方法；—&gt;由于在布隆过滤器当中该位数组当中其下标位置index要删除的位置其位置，同一个位置也有可能是其他数值所占的下标位；（<strong>hash冲突</strong>）；如果将该下标位置index的取值改为0；那么也将会影响其他的数值的下标取值；也就是说；当其他的数据进行判断是否存在时，原本其他数据的下标位置index取值为1；当前因为有需要要进行删除的数据所以对该布隆过滤器的下标位置index取值进行更改为从1变为0；其他数据的下标位置与当前要删除的数据的下标位置相撞相同了（<strong>hash冲突</strong>）；如果当前要删除的数据将该布隆过滤器数组当中下标位置的取值改为了0；则其他数据下次进行mightContain判断的时候将会被判断为不存在；所以布隆过滤器没有删除delete该方法；<br>3、布隆过滤器为什么会出现误判？—&gt;<strong>误判</strong>的缘故就在于存在<strong>hash冲突</strong>  </p><p><strong>出现误判的概率，即容错率与什么因素有关？</strong>  </p><ul><li><strong>数组长度</strong></li><li><strong>hash算法的个数</strong></li></ul><p><strong>（1）</strong>首先，数组的长度是肯定会影响容错率的；如果数组的长度是100,0000；同样是添加21条数据；那么误判的概率就不会又这么高了（即111不存在的数据也能够判断mightContain为存在）；所以数组的长度是一个影响误判的因素；<br><strong>（2）</strong>第二，hash算法的个数；如果数组的长度是100,0000；且该布隆过滤器当中存在有10个hash算法<br>(不同hash函数越多，则误判的概率越小，即不同hash函数个数越多，即算的在布隆过滤器当中的下标位置越多，而只有当满足算出来的所有的下标位置的取自为1，才将返回可能存在；否则只要满足有一个算出来的index其下标取值不为1，即为0的这种情况则返回绝对不存在；)，</p><p>（不同hash个数函数取余数组长度所得出的位置必须是全部为1才能够判断其值<br>[即判断值是否存在在布隆过滤当中]存在于布隆过滤器当中；<br>即存在有3个不同的hash函数，查询数值117；<br>布隆过滤器数组当中仅只有2个位置可证明该117存在于布隆过滤器当中，即这两个下标位置取值value为1，还有一个index value为0；<br>而hash个数有3个，此时能够证明的只有2个，所以判断为绝对不存在；<br>即只有当查询的数值通过n个不同的hash算法在布隆过滤器数组当中需要有n个不同下标地址的index其取值value必须全部为1；<br>才能够判断为可能存在在该布隆过滤器数组当中；否则判断为绝对不存在；）</p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX1loeM8HGC*c1AuLK0zUPiHTgZ1ljiSnfjWcgvZCtpiFflSI8eyoV.J9xxKSa2wiJDTtvnfmwuqphXXn4wPQ7B4!/r" alt="bloomFilter数据量判断mightContain绝对不存在的情况"></p><p>即如果数组长度越小；而不同的hash函数个数越多；<br>则容错率就将会增大<br>（即误判的几率增大，也就是说在数组长度小的情况下，而hash函数多，即算出来的在布隆过滤器数组当中的下标位置越多，即这些算出来的下标位置的取值就都将会被改为1，到时候布隆过滤器数组当中的下标位置index就将会有大量取值变动由0变为1；这样就会增大误判的几率，也就是说容错率也就增大了；）</p><p>所以说；跟数组的长度以及hash函数的个数必须要配合使用才能够达到布隆过滤器最好的效果；（hash函数的个数必须要与数组长度相匹配；）</p><p>numBits 即Google Guava框架中创建出来的位数组的长度；<br>size：100,0000（预计插入数值记录行），fpp：0.001（容错率）===(创建出来)===&gt;numBits：14377587（位数组长度），numHashFunction：10（hash函数的个数）</p><p>size：100,0000（预计插入数值记录行），fpp：0.1（容错率）===(创建出来)===&gt;numBits：4792539（位数组长度），numHashFunction：3（hash函数的个数）</p><ul><li>hash个数越多（容错率越高），运算开销越大；（性能和容错率之间取一个）；  </li><li>要性能高则hash个数少点；要准确率越高则hash个数越多则容错率越高；<br>容错率低好还是高好?看具体业务需求；</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Preconditions</span>.</span></span>check<span class="constructor">NotNull(<span class="params">strategy</span>)</span>;</span><br><span class="line"><span class="keyword">if</span>(expectedInsertions<span class="operator"> == </span><span class="number">0L</span>)&#123;</span><br><span class="line">  expectedInsertions = <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//numBits 位数组长度</span></span><br><span class="line"><span class="comment">//expectInsertions 预计插入布隆过滤器数组的数据量</span></span><br><span class="line"><span class="comment">//fpp 容错率（判断出错的概率）</span></span><br><span class="line">long numBits = optimal<span class="constructor">NumOfBits(<span class="params">expectedInsertions</span>, <span class="params">fpp</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hash函数个数</span></span><br><span class="line"><span class="built_in">int</span> numHashFunctions = optimal<span class="constructor">NumOfHashFunctions(<span class="params">expectedInsertions</span>, <span class="params">numBits</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//numBits与numHashFunctions 需要进行配合使用，一起使用更佳哦~</span></span><br><span class="line"><span class="comment">//只需要关注预计插入布隆过滤器数据记录行与容错率即可；位数组长度与hash函数个数不需要进行关心；因为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">BloomFilter(<span class="params">new</span> LockFreeBitArray(<span class="params">numBits</span>)</span>, numHashFunctions, funnel, strategy);</span><br><span class="line">&#125;catch(IllegalArgumentException var10)&#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * long n   预计插入数据量</span></span><br><span class="line"><span class="comment">  * double m 容错率</span></span><br><span class="line"><span class="comment">  * description 算出hash函数个数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">@VisibleForTesting</span><br><span class="line">static <span class="built_in">int</span> optimal<span class="constructor">NumOfHashFunctions(<span class="params">long</span> <span class="params">n</span>,<span class="params">double</span> <span class="params">m</span>)</span>&#123;</span><br><span class="line">  return <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(<span class="number">1</span>, (<span class="built_in">int</span>)<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>round( double(m)<span class="operator"> / </span>(double)n<span class="operator"> * </span><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>log(<span class="number">2.0</span>D) ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * long n   预计插入数据量</span></span><br><span class="line"><span class="comment">  * double p 容错率</span></span><br><span class="line"><span class="comment">  * description 算出位数组长度</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">@VisibleForTesting</span><br><span class="line">static long optimal<span class="constructor">NumOfBits(<span class="params">long</span> <span class="params">n</span>,<span class="params">double</span> <span class="params">p</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p<span class="operator"> == </span><span class="number">0.0</span>D)&#123;</span><br><span class="line">    p = <span class="number">4.9E-324</span>D;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (long)((double)(-n)<span class="operator"> * </span><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>log(p)<span class="operator"> / </span>(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>log(<span class="number">2.0</span>D)<span class="operator"> * </span><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>log(<span class="number">2.0</span>D) ) );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己手写<strong>分布式的布隆过滤器</strong></p><p>手写布隆过滤器之前；怎么来实现；</p><ul><li>需要有一个位数组<ul><li>该位数组如何来的呢?</li><li>其实redis当中也存在有布隆过滤器；redis当中的位数组；redis当中的位数组哪里来；即首先redis当中需要存在这样一个数据结构；</li></ul></li></ul><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FLUSHALL</span><br><span class="line"></span><br><span class="line"><span class="built_in">keys</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> laowang abc #<span class="built_in">key</span>:laowang；<span class="built_in">value</span>:abc</span><br><span class="line"></span><br><span class="line"># <span class="built_in">set</span> api底层如何如何存储<span class="built_in">value</span>的取值（redis底层如何来存储该<span class="built_in">key</span>：laowang的取值<span class="built_in">value</span> abc的？）</span><br><span class="line"># redis底层进行存储<span class="built_in">key</span>的取值<span class="built_in">value</span>是通过位数组来进行存储的；</span><br></pre></td></tr></table></figure><p>首先将 abc 该字符串转换为二进制取值；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/**</span></span><br><span class="line">  <span class="string">*</span>  <span class="string">a</span> <span class="string">~</span> <span class="string">z</span> <span class="number">97</span> <span class="string">~</span> <span class="number">122</span></span><br><span class="line">  <span class="string">*</span>  <span class="string">第</span> <span class="number">33</span> <span class="string">~</span> <span class="number">126</span> <span class="string">号（共</span> <span class="number">94</span> <span class="string">个）是字符，其中第</span> <span class="number">48</span> <span class="string">~</span> <span class="number">57</span> <span class="string">号为</span> <span class="number">0</span> <span class="string">~</span> <span class="number">9</span> <span class="string">这十个阿拉伯数字</span></span><br><span class="line">  <span class="string">*/</span></span><br><span class="line"><span class="string">public</span> <span class="string">static</span> <span class="string">void</span> <span class="string">main(String[]</span> <span class="string">args)&#123;</span></span><br><span class="line">  <span class="string">toBinary("abc");//</span> <span class="number">24</span><span class="string">---999</span>   <span class="number">0</span>   <span class="number">1000</span>  <span class="number">1</span></span><br><span class="line">  <span class="string">//打印结果为</span> <span class="number">1100001</span> <span class="number">1100010</span> <span class="number">1100011</span></span><br><span class="line">  <span class="string">//1100001和1100010类似，其实在二进制当中a和b只需要将第六位和第七位调换一下顺序即可；</span></span><br><span class="line">  <span class="string">//redis用位数组，二进制的方式来进行保存set</span> <span class="string">key所对应的value取值</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>验证redis使用位数组（二进制）进行保存key的取值value;</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setbit laowang <span class="number">6</span> <span class="number">1</span> # 设置key为laowang其value值的二进制位；设置其value值的二进制位的第<span class="number">6</span>位取值为<span class="number">1</span>；</span><br><span class="line"></span><br><span class="line">setbit laowang <span class="number">7</span> <span class="number">0</span> # 设置key为laowang其value值的二进制位；设置其value值的二进制位的第<span class="number">7</span>位取值为<span class="number">0</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> laowang # 获取redis当中key为laowang的取值value</span><br><span class="line">#当前响应为 “bbc”</span><br><span class="line"></span><br><span class="line"># 原本key:laowang存储的value取值为：abc</span><br><span class="line"># abc 在redis底层存储结构为位数组，即二进制数值；即为<span class="number">1100001</span> <span class="number">1100010</span> <span class="number">1100011</span></span><br><span class="line"># 当前setbit这两个操作即将 <span class="number">1100001</span> <span class="number">1100010</span> 这两个进行了修改为 <span class="number">11000011</span> <span class="number">1100011</span></span><br><span class="line"># 所以redis再次查询的时候其取值变为了 “bbc”</span><br></pre></td></tr></table></figure><p>在redis当中，String类型的value值其在redis底层，就是通过位数组来进行保存存储的；<br>在底层当中，当前“abc” or “bbc” 其在redis底层当中位数长度为 3 * 8 = 24 位；<br>底层的位数组的长度只有这么长；</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setbit laowang <span class="number">1000</span> <span class="number">0</span> # 设置进行修改key为laowang 其value值在redis底层的位数组（二进制）的第<span class="number">1000</span>个位置，即下标为<span class="number">999</span>的这个位置index修改取值为<span class="number">0</span>；</span><br><span class="line"># 当时当前 key:laowang 该value值在redis底层的其位数组长度是没有<span class="number">1000</span>的；</span><br><span class="line"># 在java当中，执行setbit laowang <span class="number">1000</span> <span class="number">0</span> 就将会造成数组越界</span><br><span class="line"># 那么在redis当中，当进行设置第<span class="number">1000</span>个位置上取值为<span class="number">0</span>时，abc 该value字符串在redis底层的位数组（二进制）是如何保存的就依然是如何保存，即依然保存为<span class="number">1100001</span> <span class="number">1100010</span> <span class="number">1100011</span>；</span><br><span class="line"># redis底层会自动进行扩容的操作；即abc的位数组长度为<span class="number">24</span>；所占据的index为<span class="number">0</span> ~ <span class="number">23</span>，即前面index为 <span class="number">0</span> ~ <span class="number">23</span>时，存储二进制值依然为 <span class="number">1100001</span> <span class="number">1100010</span> <span class="number">1100011</span> ； 那么即从index为<span class="number">24</span>开始到<span class="number">999</span>，这之间则全部用<span class="number">0</span>进行代替；（index为<span class="number">999</span>即为第<span class="number">1000</span>个位置的index）</span><br><span class="line">#setbit laowang <span class="number">1000</span> <span class="number">1</span> #即index为<span class="number">24</span>到<span class="number">998</span>全部为<span class="number">0</span>，而下标为<span class="number">999</span>（即第<span class="number">1000</span>个位置）的取值为<span class="number">1</span>；</span><br><span class="line"># 中间扩容的取值全部使用 <span class="number">0</span> 这一默认取值来进行代替；</span><br><span class="line"></span><br><span class="line">get laowang<span class="comment">;</span></span><br><span class="line"><span class="comment">#此时响应为“bbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\\x00\x00\x00\x00\x00\x00\x00\x00\x00....”</span></span><br><span class="line"><span class="comment">#redis底层进行扩容，扩容其默认取值为0；即扩容时是扩容的位数组，因为其二进制全部是0；而转化出来之后就是该结果</span></span><br></pre></td></tr></table></figure><p>现在位数组已经找到了，且还能够进行自动扩容；也就是redis底层对String类型操作set key value这一api，底层所使用的的数据结构（位数组）；</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setbit laowang666 <span class="number">10000</span> <span class="number">0</span></span><br><span class="line"><span class="meta"># key:laowang666 ; value: 相当于创建了一个length为 10000 的位数组；并且其底层的value值为 0(二进制取自)；即到第10000位置之前二进制数值全部是0；</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 在redis当中称之为 位图；本质还是属于String类型；</span></span><br><span class="line"><span class="meta"># redis版本5.0.5</span></span><br><span class="line">keys *</span><br><span class="line"><span class="meta"># laowang666</span></span><br><span class="line"><span class="meta"># laowang</span></span><br></pre></td></tr></table></figure><p>实现</p><p>application.yml  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line"><span class="attr">bloom:</span></span><br><span class="line">  <span class="attr">filter:</span></span><br><span class="line">    <span class="attr">expectedInsertions:</span> <span class="number">1000</span></span><br><span class="line">    <span class="attr">fpp:</span> <span class="number">0.</span><span class="string">001F</span></span><br></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.testcache.<span class="built_in">filter</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line">#ConfigurationProperties 自动装配属性</span><br><span class="line">@ConfigurationProperties(<span class="string">"bloom.filter"</span>)</span><br><span class="line">@Component</span><br><span class="line"><span class="keyword">public</span> class RedisBloomFilter&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//预计插入量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> expectedInsertions;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//误判率</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> fpp;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//bit数组长度</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> numBits;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//hash函数数量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">int</span> numHashFunctions;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">long</span> getExpectedInsertions()&#123;<span class="keyword">return</span> expectedInsertions;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> setExpectedInsertions(<span class="keyword">long</span> expectedInsertions)&#123;<span class="keyword">this</span>.expectedInsertions = expectedInsertions;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">double</span> getFpp()&#123;<span class="keyword">return</span> fpp;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> setFpp(<span class="keyword">double</span> fpp)&#123;<span class="keyword">this</span>.fpp = fpp;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//@PostConstruct</span></span><br><span class="line">  <span class="comment">//即Spring容器初始化的时候</span></span><br><span class="line">  <span class="comment">//在该类进行初始化的时候，就将会回调该方法init；对numBits以及numHashFunctions进行初始化值</span></span><br><span class="line">  @PostConstruct</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> init()&#123;</span><br><span class="line">    <span class="keyword">this</span>.numBits = optimalNumOfBits(expectedInsertions, fpp);</span><br><span class="line">    <span class="keyword">this</span>.numHashFunctions = optimalNumOfHashFunctions(expectedInsertions, fpp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算hash函数个数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * long n   预计插入数据量</span></span><br><span class="line"><span class="comment">  * double m 容错率</span></span><br><span class="line"><span class="comment">  * description 算出hash函数个数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">//@VisibleForTesting</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">int</span> optimalNumOfHashFunctions(<span class="keyword">long</span> n,<span class="keyword">double</span> m)&#123;</span><br><span class="line">  <span class="keyword">return</span> Math.<span class="built_in">max</span>(<span class="number">1</span>, (<span class="built_in">int</span>)Math.<span class="built_in">round</span>( <span class="keyword">double</span>(m) / (<span class="keyword">double</span>)n * Math.<span class="built_in">log</span>(<span class="number">2.0</span>D) ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算bit数组长度</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * long n   预计插入数据量</span></span><br><span class="line"><span class="comment">  * double p 容错率</span></span><br><span class="line"><span class="comment">  * description 算出位数组长度</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">//@VisibleForTesting</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">long</span> optimalNumOfBits(<span class="keyword">long</span> n,<span class="keyword">double</span> p)&#123;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="number">0.0</span>D)&#123;</span><br><span class="line">    p = <span class="number">4.9E-324</span>D;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">long</span>)((<span class="keyword">double</span>)(-n) * Math.<span class="built_in">log</span>(p) / (Math.<span class="built_in">log</span>(<span class="number">2.0</span>D) * Math.<span class="built_in">log</span>(<span class="number">2.0</span>D) ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 判断 keys 是否存在于集合，</span></span><br><span class="line"><span class="comment">  * 是 则返回 true</span></span><br><span class="line"><span class="comment">  * 否 则返回 false</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">boolean</span> isExists(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">    <span class="keyword">long</span>[] indexs = getIndexs(<span class="built_in">key</span>);</span><br><span class="line">    List list = redisTemplate.executePipelined(<span class="keyword">new</span> RedisCallback&lt;<span class="keyword">Object</span>&gt;()&#123;</span><br><span class="line"></span><br><span class="line">      @Nullable</span><br><span class="line">      @Override</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">Object</span> doInRedis(RedisConnection redisConnection) <span class="keyword">throws</span> DataAccessException&#123;</span><br><span class="line">        redisConnection.openPipeline();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> index : indexs)&#123;</span><br><span class="line">          redisConnection.getBit(<span class="string">"bf:laowang"</span>.getBytes(),index);</span><br><span class="line">        &#125;</span><br><span class="line">        redisConnection.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> !list.contains(<span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 将 key 存入 redis bitmap 位图</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> put(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;<span class="comment">// 老王laowang</span></span><br><span class="line">  <span class="keyword">long</span>[] indexs = getIndexs(<span class="built_in">key</span>);</span><br><span class="line">  redisTemplate.executePipeline(<span class="keyword">new</span> RedisCallback&lt;<span class="keyword">Object</span>&gt;()&#123;</span><br><span class="line"></span><br><span class="line">    @Nullable</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> doInRedis(RedisConnection redisConnection) <span class="keyword">throws</span> DataAccessException&#123;</span><br><span class="line">      redisConnection.openPipeline();<span class="comment">//打开管道，提高效率</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">long</span> index:indexs)&#123;</span><br><span class="line">        redisConnection.setBit(<span class="string">"bf:laowang"</span>.getBytes(), index, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//setbit laowang 7262 1</span></span><br><span class="line">        <span class="comment">//此时key写死；</span></span><br><span class="line">        <span class="comment">//index将修改的动态的index下标位置；</span></span><br><span class="line">        <span class="comment">//0代表false；1代表true；即与扩容默认为0修改取值为1做法一致；在redis当中0是位数组进行扩容时的默认值；1则为put进来的数据其位置下标index就需要改变该index上的取值0变成1；在java当中true即代表1；false即代表0</span></span><br><span class="line">      &#125;</span><br><span class="line">      redisConnection.close();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据 key 获取 bitmap 下标； 一个hash函数对 20+1  20+2 3个不同的hash函数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span>[] getIndexs(<span class="keyword">String</span> <span class="built_in">key</span>)&#123; <span class="comment">//laowang 老王</span></span><br><span class="line">    <span class="keyword">long</span> hash1 = hash(<span class="built_in">key</span>);</span><br><span class="line">    <span class="keyword">long</span> hash2 = hash1 &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">long</span>[] result = <span class="keyword">new</span> <span class="keyword">long</span>[numHashFunctions]; <span class="comment">// 10</span></span><br><span class="line">    <span class="keyword">for</span>( <span class="built_in">int</span> i = <span class="number">0</span> ; i &lt; numHashFunctions ; i++ )&#123; <span class="comment">//numHashFunctions hash函数的数量</span></span><br><span class="line">    <span class="keyword">long</span> combinedHash = hash1 + i * hash2;</span><br><span class="line">    <span class="comment">//i 动态值，所以2个不同的hash再加上该一个带有动态值i则将会有三个不同的取值</span></span><br><span class="line">    <span class="comment">//引用三个不同的hash算法对同一个字符串key进行运算也可以的；</span></span><br><span class="line">    <span class="keyword">if</span>(combinedHash &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        combinedHash = ^combinedHash;</span><br><span class="line">    &#125;</span><br><span class="line">    result[i] = combinedHash % numBits;<span class="comment">//对数组的长度numBits进行取余</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">expectedInsertions</span> = <span class="number">1000</span></span><br><span class="line"><span class="attr">fpp</span> = <span class="number">0.001</span></span><br><span class="line"><span class="attr">numBits</span> = <span class="number">14377</span></span><br><span class="line"><span class="attr">numHashFunctions</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">key</span> = <span class="string">"1001"</span></span><br><span class="line"><span class="attr">indexs</span> = &#123;long[<span class="number">10</span>]@<span class="number">7667</span>&#125;</span><br><span class="line"><span class="attr">0</span> = <span class="number">7262</span></span><br><span class="line"><span class="attr">1</span> = <span class="number">6438</span></span><br><span class="line"><span class="attr">2</span> = <span class="number">5614</span></span><br><span class="line"><span class="attr">3</span> = <span class="number">4790</span></span><br><span class="line"><span class="attr">4</span> = <span class="number">3966</span></span><br><span class="line"><span class="attr">5</span> = <span class="number">3142</span></span><br><span class="line"><span class="attr">6</span> = <span class="number">2318</span></span><br><span class="line"><span class="attr">7</span> = <span class="number">1494</span></span><br><span class="line"><span class="attr">8</span> = <span class="number">670</span></span><br><span class="line"><span class="attr">9</span> = <span class="number">14223</span></span><br><span class="line"><span class="comment"># 0 ~ 9 ：10个下标</span></span><br></pre></td></tr></table></figure><p>RedisDataInit</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.testcache.datainit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisDataInit</span>&#123;</span></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  OrderService orderService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  RedisBloomFilter redisBloomFilter;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostConstruct</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> init()&#123;</span><br><span class="line">    List&lt;Order&gt; orders = orderService.selectOrderAll();</span><br><span class="line">    <span class="keyword">for</span>(Order <span class="string">order:</span>orders)&#123;</span><br><span class="line">      redisBloomFilter.put(String.valueOf(order.getId));<span class="comment">//订单表的id</span></span><br><span class="line">      <span class="comment">//将订单表中的id添加到布隆过滤器当中在容器启动的时候</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行查询</p><p>service impl（实现）层：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//解决缓存穿透</span></span><br><span class="line">  <span class="comment">//如果布隆过滤器当中存在id则说明数据库当中存在该条记录；则可以继续往下走</span></span><br><span class="line">  <span class="comment">//返回false说明布隆过滤器当中并不存在该id也就说明数据库以及缓存当中都不会有该条数据id</span></span><br><span class="line">  <span class="comment">//此处布隆过滤器由于存在误判的情况也就是容错率；但是现在应用的场景是缓存穿透也就是避免去进行查询数据库；而布隆过滤器误判的结果也就是仅仅让数据库多查一次而已；所以设想下如果有100000个恶意查询空对象请求；那么相比于100000个恶意查询空对象请求而言，布隆过滤器则要显得十分优越了；即便是存在有误判也比100000好；也需要看容错率的概率是多少；</span></span><br><span class="line">  <span class="keyword">if</span> (!bloomFilter.is<span class="constructor">Exist(String.<span class="params">valueOf</span>(<span class="params">id</span>)</span>))&#123;</span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"非法访问"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//查询缓存；</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;finally&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">localhost<span class="function">:8080</span>/selectid?id=2002</span><br><span class="line"><span class="string">//</span>由于有布隆过滤器的存在将不会去进行查询redis缓存也不会去查询数据库</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:600</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"非法访问"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2003</span><br><span class="line"><span class="string">//</span>由于有布隆过滤器的存在将不会去进行查询redis缓存也不会去查询数据库</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:600</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"非法访问"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2004</span><br><span class="line"><span class="string">//</span>由于有布隆过滤器的存在将不会去进行查询redis缓存也不会去查询数据库</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:600</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"非法访问"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="params">------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1001</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1001</span>, <span class="string">"name"</span>:<span class="string">"老王1"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1002</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1002</span>, <span class="string">"name"</span>:<span class="string">"老王2"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1003</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1003</span>, <span class="string">"name"</span>:<span class="string">"老王3"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1004</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1004</span>, <span class="string">"name"</span>:<span class="string">"老王4"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1005</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1005</span>, <span class="string">"name"</span>:<span class="string">"老王5"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br></pre></td></tr></table></figure><p>复杂：</p><ul><li>维护麻烦</li><li>往数据库当中进行添加数据时，同时也需要往布隆过滤器当中进行添加put；不然的就就会被布隆过滤器当做是非法请求被拦截下来；</li><li>如果订单表当中存在10万的数据；删除了8万的数据量；现在仅剩下2万的数据量；但是布隆过滤器没有办法进行删除；这个时候就需要进行考虑重建布隆过滤器即重新初始化该布隆过滤器；即从头到尾的再去跑一边put方法，即又重新将订单表当中的记录进行查询出来将其order id重新put入布隆过滤器当中</li><li>这个重建布隆过滤器得使用定时任务来进行；定时任务多少合适需要看删除的数据量大小多不多；</li></ul><h2 id="缓存击穿详解及实战"><a href="#缓存击穿详解及实战" class="headerlink" title="缓存击穿详解及实战"></a>缓存击穿详解及实战</h2><p>上述代码存在两大问题，一是缓存穿透；二是缓存击穿；<br>缓存击穿问题也就是对于热点数据访问的问题；</p><p><strong>缓存击穿</strong>：在查询时，数据库有数据，缓存当中没有（数据刚好失效）；</p><p>情况分析：</p><p>（1）这条数据没有人访问过；说明该数据并非为热点数据；<br>（2）一般为数据刚好失效（由于将数据加入到缓存当中时，会加入一个过期时间；比如该数据当好面临过期时间失效，即理解为redis自动将该数据进行删除了[“自动删除”需要加双引号；涉及到redis当中的一个删除特点；可以先这么认为redis现在自动将该数据进行了删除]，但是来了<strong>并发访问</strong>，由于该数据又是一个热点数据）；</p><p>缓存击穿和缓存穿透是两个不同的问题；</p><p>模拟热点数据失效访问情形：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">keys *</span><br><span class="line"><span class="meta">#laowang666</span></span><br><span class="line"><span class="meta">#laowang</span></span><br><span class="line"><span class="meta">#bf:laowang</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.testcache.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@org</span>.junit.Test</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">    TicketsRunBle ticketsRunBle = <span class="keyword">new</span> TicketsRunBle();</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">99</span> ; i++)&#123;</span><br><span class="line">      Thread thread = <span class="keyword">new</span> Thread(ticketsRunBle, <span class="string">"窗口"</span>);</span><br><span class="line">      thread.start();</span><br><span class="line">      countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">    Thread.currentThread.join();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketsRunBle</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      countDownLatch.await();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    try&#123;</span></span><br><span class="line"><span class="comment">//        Socket socket = new Socket("127.0.0.1", 1333);</span></span><br><span class="line"><span class="comment">//    &#125;catch(IOException e)&#123;</span></span><br><span class="line"><span class="comment">//      e.printStackTrace();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    List&lt;HttpMessageConverter&lt;?&gt;&gt; fastJsonHttpMessageConverters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    fastJsonHttpMessageConverters.add(<span class="keyword">new</span> FastJsonHttpMessageConverters);</span><br><span class="line">    restTemplate.setMessageConverters(fastJsonHttpMessageConverters);</span><br><span class="line">    R forObject = restTemplate.getForObject(<span class="string">"http://localhost:8080/selectid?id=1001"</span>,R<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(forObject);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即可以认为该段代码被99个人（线程）同时执行；</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//99个线程同时进行布隆过滤器的判断</span></span><br><span class="line"><span class="keyword">if</span> (!bloomFilter.is<span class="constructor">Exist(String.<span class="params">valueOf</span>(<span class="params">id</span>)</span>))&#123;</span><br><span class="line">     return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"非法访问"</span>)</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//99个线程同时查询缓存；</span></span><br><span class="line"> Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//当热点数据失效时，则此时redisObj则为空</span></span><br><span class="line"> <span class="comment">//命中缓存</span></span><br><span class="line"> <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">   <span class="comment">//正常返回数据</span></span><br><span class="line">   return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//所以此时就会有99个线程同时去查询数据库；</span></span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line">     Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">     <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">       valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;finally&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br></pre></td></tr></table></figure><p>即上述代码将会有99次进行查询数据库的记录；</p><p>解决方案<br>使用分布式锁，即查询数据库之前进行加锁；<br>OrderServiceImpl</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">valueOperations valueOperations;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">CacheTemplate cacheTemplate;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">RedisBloomFilter RedisBloomFilter;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line"><span class="keyword">private</span> RedisLock redisLock;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">SendMessageUtil sendMessageUtil;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Integer insert<span class="constructor">Order(Order <span class="params">order</span>)</span>&#123;</span><br><span class="line">  Integer integer = orderMapper.insert<span class="constructor">Order(<span class="params">order</span>)</span>;</span><br><span class="line">  return integer;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//解决缓存穿透</span></span><br><span class="line">  <span class="keyword">if</span> (!bloomFilter.is<span class="constructor">Exist(String.<span class="params">valueOf</span>(<span class="params">id</span>)</span>))&#123;</span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"非法访问"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//查询缓存；</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="keyword">if</span>( redisObj instanceOf NullValueResultDO)&#123;</span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//在查询数据库之前进行加锁</span></span><br><span class="line">  redisLock.lock(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询缓存；</span></span><br><span class="line">    redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line">    <span class="comment">//命中缓存</span></span><br><span class="line">    <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">      <span class="keyword">if</span>( redisObj instanceOf NullValueResultDO)&#123;</span><br><span class="line">        return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//正常返回数据</span></span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//查询数据库</span></span><br><span class="line">      Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;finally&#123;</span><br><span class="line">        <span class="comment">//解锁</span></span><br><span class="line">        redisLock.unlock(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大并发访问数据库最容易导致数据库崩掉；</p><p>测试并模拟；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">keys</span> <span class="string">*</span></span><br><span class="line"><span class="attr">del</span> <span class="string">1001</span></span><br></pre></td></tr></table></figure><p>上述代码仅会有1次访问数据库的机会；<br>分析：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//99个线程同时访问布隆过滤器判断该id是否非法访问</span></span><br><span class="line">  <span class="keyword">if</span> (!bloomFilter.is<span class="constructor">Exist(String.<span class="params">valueOf</span>(<span class="params">id</span>)</span>))&#123;</span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"非法访问"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//99个线程同时查询缓存；</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//由于热点数据的失效；所以导致99个线程同时都没有命中缓存</span></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="keyword">if</span>( redisObj instanceOf NullValueResultDO)&#123;</span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//由于在查询数据库之前进行加锁，所以此时99个线程将会依次进行查询数据库操作；（并发）</span></span><br><span class="line">  <span class="comment">//即此时有一个线程拿着锁进入了代码块；还有98个线程在外面等着；</span></span><br><span class="line">  redisLock.lock(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//相当于99个线程中第一个进入代码块的那一个线程会查询两次redis缓存；查询一次数据库；查询完成之后将数据加入到缓存当中去；finally最后进行解锁；紧接着98个线程第二个线程又会拿着锁进来；.....</span></span><br><span class="line">      <span class="comment">//转折点就在这里；当第一个进来的线程将数据查询完成并加入到缓存之后；后面的98个线程再次到redis缓存当中进行取值的时候那么这个时候就能够有值获取出来了；由于第一个线程已经查询过数据库并将取值加入到了缓存当中去了；</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//虽然有锁阻塞，但是却只有一次操作数据库此处；98个线程都去进行操作缓存；所以说这个效率是十分明显的；非常快；</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询缓存；</span></span><br><span class="line">    redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line">    <span class="comment">//命中缓存</span></span><br><span class="line">    <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">      <span class="keyword">if</span>( redisObj instanceOf NullValueResultDO)&#123;</span><br><span class="line">        return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//正常返回数据</span></span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//查询数据库</span></span><br><span class="line">      Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;finally&#123;</span><br><span class="line">        <span class="comment">//解锁</span></span><br><span class="line">        redisLock.unlock(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果此处没有使用分布式锁而是使用的synchronized则；selectOrderById查询数据为1001、1002、1003、1004、1005查询id不同，查询数据并不相同，但是却还是会被阻塞；这个效率就很低了；<br>而刚刚那种处理方式是：redisLock.lock(String.valueOf(id));是对查询id相同；即该这一类都是查询相同同一个id的并发请求的锁；<br>针对的是对于同一个查询内容的多个线程进行阻塞；<br>而对于不同查询内容的多个线程是进行分别阻塞的；<br>也就是说假设有99*2个线程，该99个线程都是进行查询id为1001的查询请求；则redisLock则对该98个线程进行阻塞，其中一个线程拿着id为1001的锁先进入代码块进行查询；（此时id为1001的数据过期失效）<br>而另外99个线程都是进行查询id为1002的查询请求所以此时这另外的这99个线程（查询id为1002的这99个线程），也会存在有一个线程拿着id为1002的锁先进入代码块，而其余的98个线程在外等候，阻塞；（此时id为1001的数据过期失效）</p><p>synchronized与redisLock这两者锁的粒度不一样；  </p><p>RedisLock</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ThreadLock用于保存某个线程共享变量</span></span><br><span class="line"><span class="comment">//对于同一个static ThreadLocl，不同线程只能从中get，set，remove自己的变量，而不会影响其他的线程</span></span><br><span class="line"><span class="keyword">private</span> ThreadLocal&lt;<span class="keyword">String</span>&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> lock(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">  <span class="built_in">boolean</span> b = tryLock(<span class="built_in">key</span>);</span><br><span class="line">  <span class="keyword">if</span>(b)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      Thread.sleep(<span class="number">50</span>);</span><br><span class="line">  &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  lock(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> tryLock(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">  <span class="keyword">String</span> uuid = UUID.randomUUID().toString();</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码封装<br>OrderServiceImpl</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> R selectOrderById(<span class="built_in">Integer</span> id)&#123;</span><br><span class="line">  <span class="keyword">return</span> cacheTemplate.redisFindCache(<span class="built_in">String</span>.valueOf(id), <span class="number">10</span>, TimeUnit.MINUTES, <span class="literal">new</span> CacheLoadble&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Order</span> load()&#123;</span><br><span class="line">      <span class="keyword">return</span> orderMapper.selectOrderById(id);<span class="comment">//此处仅需要写自己的业务逻辑即可</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="params">...</span></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="keyword">Order</span>&gt; selectOrderAll()&#123; <span class="keyword">return</span> orderMapper.selectOrderAll();&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">Integer</span> updateOrder(<span class="keyword">Order</span> <span class="keyword">order</span>)&#123;</span><br><span class="line">  redisTemplate.delete(<span class="built_in">String</span>.value(<span class="keyword">order</span>.getId()));</span><br><span class="line">  <span class="built_in">Integer</span> <span class="built_in">integer</span> = orderMapper.updateOrder(<span class="keyword">order</span>);</span><br><span class="line">  <span class="keyword">order</span>.setName(<span class="string">"0"</span>);</span><br><span class="line">  sendMessageUtil.placeOrderMessage(<span class="keyword">order</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">integer</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CacheTemplate</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">package com.xxx.testcache.template;</span><br><span class="line"></span><br><span class="line">import ...</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public <span class="keyword">class</span> CacheTemplate&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line"><span class="keyword">private</span> ValueOperations valueOperations;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">RedisBloomFilter redisBloomFilter;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line"><span class="keyword">private</span> Redisson redisson;</span><br><span class="line"></span><br><span class="line"><span class="comment">//private Lock lock = new ReentrantLock();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询缓存  有     直接返回前端</span></span><br><span class="line"><span class="comment">//          没有   查询数据库，加入缓存放回</span></span><br><span class="line"><span class="comment">//为什么要使用缓存：保护数据库；提高性能</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * key 键</span></span><br><span class="line"><span class="comment">  * expire 过期时间</span></span><br><span class="line"><span class="comment">  * unit 过期时间单位</span></span><br><span class="line"><span class="comment">  * cacheLoadble 回调接口方法</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">public R redis<span class="constructor">FindCache(String <span class="params">key</span>, <span class="params">long</span> <span class="params">expire</span>, TimeUnit <span class="params">unit</span>, CacheLoadble&lt;T&gt; <span class="params">cacheLoadble</span>, <span class="params">boolean</span> <span class="params">b</span>)</span>&#123;</span><br><span class="line"> <span class="comment">//--------------------- 缓存穿透-------------------------------------</span></span><br><span class="line">  <span class="comment">//解决缓存穿透</span></span><br><span class="line">  <span class="keyword">if</span>(!bloomFilter.is<span class="constructor">Exist(<span class="params">key</span>)</span>)&#123;</span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(600)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"非法访问"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//查询缓存</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------缓存击穿--------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  redisLock.lock(key);</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//查询缓存；</span></span><br><span class="line">      redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//命中缓存</span></span><br><span class="line">      <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">          <span class="comment">//正常返回数据</span></span><br><span class="line">          return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">     T load = cacheLoadble.load<span class="literal">()</span>;<span class="comment">//查询数据库</span></span><br><span class="line">    <span class="keyword">if</span>(load != null)&#123;</span><br><span class="line">      valueOperations.set(key, load, expire, <span class="built_in">unit</span>);<span class="comment">//加入缓存</span></span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;finally&#123;</span><br><span class="line">      <span class="comment">//解锁</span></span><br><span class="line">      redisLock.unlock(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">key</span>)</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存雪崩及解决方案"><a href="#缓存雪崩及解决方案" class="headerlink" title="缓存雪崩及解决方案"></a>缓存雪崩及解决方案</h2><p>缓存雪崩问题：</p><ol><li>redis服务器挂了</li><li>大部分数据失效</li></ol><p>比如有100W的商品数据，设置的过期时间统一是10天；则10天后大部分数据统一失效；而查询请求不断；这个时候也就容易导致数据库崩掉；即引发雪崩问题；</p><p>(redis缓存击穿指的是热点数据失效解决的是并发请求)</p><p>针对这种情况的处理方式：</p><p>[<strong>规避</strong>]<br>（1）redis搭建高可用集群（cluster）<br>（2）错开数据过期时间</p><p>如果已经出现了缓存雪崩问题；则处理方式为降级 熔断；</p><h2 id="数据一致性及解决方案"><a href="#数据一致性及解决方案" class="headerlink" title="数据一致性及解决方案"></a>数据一致性及解决方案</h2><p><strong>什么时候出现数据不一致的情况</strong></p><ul><li>更新数据的时候；<ul><li>先更新数据库，再更新缓存<ul><li>（步骤1）先更新数据库（步骤2）再更新缓存；<ul><li>如果此时更新缓存失败；则会导致数据库中是新数据，缓存中是旧数据，数据就出现了不一致</li></ul></li><li>1.线程A更新数据库；2.线程B更新数据库；4.线程A更新缓存；3.线程B更新缓存；<ul><li>更新数据库如果因为网络等原因，B却比A更早更新了缓存，这就导致了脏数据（不一致）</li><li>解决方案：先删除缓存；再修改数据库。如果数据库修改失败了，那么数据库中是旧数据，缓存中是空的，那么数据不会不一致；因为读的时候缓存没有，则读数据库中旧数据，然后更新到缓存中。</li></ul></li><li>解决方案一[<strong>延时双删</strong>]：1.线程A删除缓存 2.线程B查询缓存，发现为空 3.线程B查询数据库并加入缓存 4.线程A更新数据库 5.线程A删除缓存（第五步一定要执行成功）</li><li>解决方案二[<strong>串行化</strong>]</li></ul></li></ul></li></ul><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX4pgLmAu8VahKl7KcdIHB0TUz5G4e7vKThDgFA4qONmduoQbaGmQQkOcSL4ZRToJCp.Uf19bAH3AwkYd90x7O1U!/r" alt="数据一致性问题1"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX.XryE.7uV.ikOi43KtZHMMeFc5xE9CdpCZxb813hOndwi1w1ZBWEexHrxFZIBZfelNT79b7aY12qTQp7NauUZ8!/r" alt="数据一致性问题2"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX3mOzKCW7tUhJUWL8ztU7xPj*Pe*Joo30G7me5QGmt7Sxi5j5klGAArIsMW*y8bO.byfXwfDCTDh.6x5I.sLatg!/r" alt="数据一致性问题3"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX*S1qKXmK2eYWqUYxPcUsgsF6L*V72VsmLXrkJ.UnQ7ePKGiWhTZhWMp1b6T2ekmO6bUvjPP2Xe6sCMSxuyCrPc!/r" alt="数据一致性解决方案一"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX*S1qKXmK2eYWqUYxPcUsgsF6L*V72VsmLXrkJ.UnQ7ePKGiWhTZhWMp1b6T2ekmO6bUvjPP2Xe6sCMSxuyCrPc!/r" alt="数据一致性解决方案一"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXzQqwZMYfv*FkdsRt6pLKtRDNNQ8Pv2ce3feyq1.6u.ytk1wClBaFMU15A2dvCGK8aMDt0c6XmLkiGohBxyNLTo!/r" alt="数据一致性方案二串行化1"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX2CGSzajo.b8bZBcqLFBQeGmscwTpI*sRf3EyyWT3nGZ8bOZlQ82XlsrsHCkd*Z7RoJHLOsDtirE785Nk*g.jaA!/r" alt="数据一致性方案二串行化2"></p><p>第五步一定要执行成功，实现：<br>StockListener采用了延时队列；</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">SendMessageUtil sendMessageUtil;</span><br><span class="line"></span><br><span class="line">@<span class="constructor">RabbitListener(<span class="params">queue</span> = <span class="string">"stock_queue"</span>, <span class="params">containerFactory</span>=<span class="string">"simpleRabbitListenerContainerFactory"</span>)</span></span><br><span class="line">public void get<span class="constructor">StockMessage(Message <span class="params">message</span>, Channel <span class="params">channel</span>)</span> throws Exception&#123;</span><br><span class="line">  <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"接收到了消息"</span>+<span class="keyword">new</span> <span class="constructor">String(<span class="params">message</span>.<span class="params">getBody</span>()</span>,<span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">  Order order = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse<span class="constructor">Object(<span class="params">new</span> String(<span class="params">message</span>.<span class="params">getBody</span>()</span>,<span class="string">"UTF-8"</span>), <span class="module-access"><span class="module"><span class="identifier">Order</span>.</span></span><span class="keyword">class</span>);</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">      redisTemplate.delete(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(Order.<span class="params">getId</span>()</span>));</span><br><span class="line">      channel.basic<span class="constructor">Ack(<span class="params">message</span>.<span class="params">getMessageProperties</span>()</span>.getDeliveryTag,<span class="literal">false</span>);</span><br><span class="line">  &#125;catch(Exception e)&#123;</span><br><span class="line">      <span class="built_in">int</span> count = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">order</span>.<span class="params">getName</span>()</span>);</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(order.get<span class="constructor">Name()</span>);</span><br><span class="line">      channel.basic<span class="constructor">Ack(<span class="params">message</span>.<span class="params">getMessageProperties</span>()</span>.get<span class="constructor">DeliveryTag()</span>, <span class="literal">false</span>);</span><br><span class="line">      <span class="comment">//重试5次；如果5次仍然不成功则记录到日志；到时候人为进行处理（人为干预）；</span></span><br><span class="line">      <span class="keyword">if</span>(count!=<span class="number">5</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        order.set<span class="constructor">Name(String.<span class="params">valueOf</span>(<span class="params">count</span>)</span>);</span><br><span class="line">        sendMessageUtil.place<span class="constructor">OrderMessage(<span class="params">order</span>)</span>;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      loggerFactory.error(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">order</span>.<span class="params">getId</span>)</span>);</span><br><span class="line">      e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redis 版本6.0之后即为多线程；</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ实战指南</title>
      <link href="/2020/05/12/%E3%80%90RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%E3%80%91/RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%9704/"/>
      <url>/2020/05/12/%E3%80%90RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%E3%80%91/RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%9704/</url>
      
        <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>《RabbitMQ实战指南》 - 朱忠华  </p><h2 id="第4章-RabbitMQ进阶"><a href="#第4章-RabbitMQ进阶" class="headerlink" title="第4章 RabbitMQ进阶"></a>第4章 RabbitMQ进阶</h2><p>前一章所讲述的是一些基础的概念及使用方法，比如 <font style="color:red;font-weight:bolder">创建交换器</font>、<font style="color:red;font-weight:bolder">队列</font>和<font style="color:red;font-weight:bolder">绑定关系</font> 等。  </p><p>但是其中有许多细节并未陈述，对使用过程中的一些“坑”也并未提及，一些高级用法也并未展现，所以本章的内容就是要弥补这些缺憾。  </p><p>本章以 <font style="color:red;font-weight:bolder">RabbitMQ</font> 基础使用知识为前提，阐述一些根据特色的细节及功能，为读者更进一步地掌握 <font style="color:red;font-weight:bolder">RabbitMQ</font> 提供基准。</p><h2 id="消息何去何从"><a href="#消息何去何从" class="headerlink" title="消息何去何从"></a>消息何去何从</h2><p>mandatory 和immediate 是channel.basicPublish 方法中的两个参数，他们都有 当消息传递过程中不可达目的地时将消息返回给生产者的功能。  </p><p>RabbitMQ 提供的 备份交换器（Alternate Exchange） 可以 将未能被交换器路由的消息（没有绑定队列或者没有匹配的绑定）存储起来， 而不用返回给客户端。  </p><p>对于初学者来说，特别容易将 mandatory 和immediate 这两个参数混淆，而对于备份交换器更是一筹莫展，本章对此一一展开探讨。  </p><blockquote><p>mandatory</p></blockquote><p>[<br>  adj. 强制的；托管的；命令的<br>  n. 受托者（等于 mandatary）<br>  复数 mandatories<br>  网络释义 强制的；强制性；命令的；义务的；<br>  mandatory 强制的；强制性；命令的；义务的；<br>  mandatory plan 指令性计划；强制性计划；指令性打算；指令性规划；<br>  mandatory offer 强制要约；强制性要约；强制性收购建议；强制性收购；<br>]</p><blockquote><p>immediate</p></blockquote><p>[<br>  adj. 立即的；直接的；最接近的；<br>  网络释义 立刻；立即的；即时；直接的<br>  immediate 立刻；立即的；即时；直接的<br>  immediate employer 直接雇主<br>  immediate mode 直接模式；立即模式；即时模式<br>]</p><h3 id="mandatory-参数"><a href="#mandatory-参数" class="headerlink" title="mandatory 参数"></a>mandatory 参数</h3><p>当 mandatory 参数 设为 true 时，交换器无法根据自身的类型和路由键找到一个符合条件的队列，那么 RabbitMQ 会调用 Basic.Return 命令将消息返回给生产者。  </p><p>当 mandatory 参数 设置为 false 时，出现上述情形（交换器无法根据自身的类型和路由键找到一个符合条件的队列），则消息直接被丢弃。  </p><p>那么生产者如何获取到 没有被正确路由到合适队列的消息 呢？<br>这时候可以通过调用 channel.addReturnListener 来添加 ReturnListener 监听器实现。  </p><p>使用 mandatory 参数的关键代码清单如下所示：  </p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">channel.basicPublish(</span><br><span class="line">  EXCHANGE_NAME,</span><br><span class="line">  <span class="string">""</span>,</span><br><span class="line">  <span class="keyword">true</span>,</span><br><span class="line">  MessageProperties.PERSISTENT_TEXT_PLAIN,</span><br><span class="line">  <span class="string">"mandatory test"</span>.getBytes()</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  channel.addReturnListener(</span><br><span class="line">    <span class="keyword">new</span> ReturnListener()&#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> handleReturn(</span><br><span class="line">        <span class="built_in">int</span> replyCode,</span><br><span class="line">        <span class="keyword">String</span> replyText,</span><br><span class="line">        <span class="keyword">String</span> exchange,</span><br><span class="line">        <span class="keyword">String</span> routingKey,</span><br><span class="line">        AMQP.BasicProperties basicProperties,</span><br><span class="line">        <span class="built_in">byte</span>[] body</span><br><span class="line">      ) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="keyword">String</span> message = <span class="keyword">new</span> <span class="keyword">String</span>(body);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Basic.Return 返回的结果是："</span>+message);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>上面代码中 生产者 没有成功地将消息路由到队列，此时 RabbitMQ 会通过 Basic.Return 返回 “mandatory test” 这条消息，之后生产者客户端通过 ReturnListener 监听到了这个时间，上面代码的最后输出应该是 “Basic.Return 返回的结果是：mandatory test”。  </p><p>从 AMQP 协议层面来说，其对应的流转过程如图：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">----------</span>|<span class="string">                              </span>|<span class="string">----------</span>|</span><br><span class="line">|<span class="string"> Producer </span>|<span class="string">                              </span>|<span class="string">  Broker  </span>|</span><br><span class="line">|<span class="string">----------</span>|<span class="string">                              </span>|<span class="string">----------</span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">     |<span class="string">  此处省略 Connection 和 Channel的开启     </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">     |<span class="string">  Basic.Publish--------------------------&gt;</span>|</span><br><span class="line">     |<span class="string">                                          </span>|<span class="string">&lt;-----没有路由到队列</span></span><br><span class="line"><span class="string">     </span>|<span class="string">&lt;-----------------------------Basic.Return</span>|</span><br><span class="line">     |<span class="string">                  (Basic.Return会携带消息) </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">     |<span class="string">    此处省略Connection和Channel的关闭      </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br></pre></td></tr></table></figure><h3 id="immediate-参数"><a href="#immediate-参数" class="headerlink" title="immediate 参数"></a>immediate 参数</h3><p>当 immediate 参数设为 true时，如果交换器在消息</p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> RabbitMQ实战指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis设计与实现</title>
      <link href="/2020/05/11/%E3%80%90Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%91/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B001/"/>
      <url>/2020/05/11/%E3%80%90Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%91/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B001/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>查阅了很多的如何学习Redis；发现很多人推荐了这本书《Redis设计与实现》（黄健宏著）  </p><p>于是，我想看了；<br>一口气吃不成一个胖子；我觉得多看书还挺好的；<br>对技术充满敬畏。突然有一种肃然起敬的感觉。不知道为什么。<br>我不想再这么浅显的过着，平庸乏味，单薄，好像仔细一想就能看透我这一生的轨迹。<br>我不想这么活着。我得有自己的信念，得有自己所坚持所热爱所为之奋斗一生的东西。<br>我不想，到一定年龄结婚生子，到一定年龄，成为了自己不想成为的人；  </p><p>redis github: <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">https://github.com/antirez/redis</a>  </p><h2 id="The-Design-and-Implementation-of-Redis（Redis设计与实现）"><a href="#The-Design-and-Implementation-of-Redis（Redis设计与实现）" class="headerlink" title="The Design and Implementation of Redis（Redis设计与实现）"></a>The Design and Implementation of Redis（Redis设计与实现）</h2><p><strong>Redis设计与实现</strong><br>黄健宏 著  </p><p>The Design and Implementation of Redis.  </p><ul><li>由资深 Redis 技术专家撰写，深入了解 Redis 技术聂牧的必读之作。</li><li>从源码角度解析 Redis 的架构设计、实现原理和工作机制，为高效使用 Redis 提供原理性指导。  </li></ul><blockquote><p>design</p></blockquote><p>[<br>  n. 设计；构思；设计图样；装饰图案；打算<br>  v. 设计；构思；计划；制造；意欲<br>  n.(Design) (巴、印、俄)迪赛（人名）<br>  复数 designs；<br>  过去式 designed；<br>  过去分词 designed；<br>  现在分词 designing；<br>  第三人称单数 designs；<br>  网络释义 设计、外观设计、图案、工艺特色<br>  design 设计；外观设计；图案；工艺特色<br>  Fashion Design 时装设计；时尚设计；服装设计；服装设计专业<br>  urban design 城市设计；城区设计；都市设计；城市化规划<br>]</p><blockquote><p>implementation</p></blockquote><p>[<br>  n.[ 计] 实现；履行；安装启用<br>  网络释义 实现；实施；实现；执行<br>  implementation 实现；实施；实现；执行<br>  base implementation 基实现<br>  policy implementation 政策实施；政策执行；政策的实施；政策执行<br>]</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本书全面而完整的讲解了 Redis 的 内部机制 与 实现方式。  </p><p>对 Redis 的大多数单机功能以及所有多机功能的实现原理进行了介绍。  </p><p>展示了这些功能的 核心数据结构 以及 关键的算法思想 ， 图示丰富，描述清晰，并给出大量参考信息。  </p><p>通过阅读本书，读者可以快速、有效地了解 Redis 的 内部构造 以及 运作机制，更好、更高效地使用 Redis。  </p><p>本书主要分为四大部分。  </p><ol><li><strong>第一部分</strong>：“数据结构与对象”</li></ol><p>介绍了 Redis 中的各种 对象及其数据结构，并说明这些 数据结构 如何影响 对象的功能和性能。</p><ol start="2"><li><strong>第二部分</strong>：“单机数据库的实现”</li></ol><p>对 Redis 实现单机数据库的方法 进行了介绍，包括 数据库、RDB持久化、AOF持久化、事件等；</p><ol start="3"><li><strong>第三部分</strong>：”多机数据库的实现“</li></ol><p>对 Redis 的 Sentinel、复制、集群 三个多机功能进行了介绍。</p><ol start="4"><li><strong>第四部分</strong>：”独立功能的实现“</li></ol><p>对 Redis 中各个相对独立的功能模块进行了介绍，涉及 发布与订阅、事务、Lua脚本、排序、二进制位数组、慢查询日志、监视器等。  </p><p>本书作者专门维护了 <a href="http://www.redisbook.com" target="_blank" rel="noopener">www.redisbook.com</a> 网站，提供带有详细注释的 Redis源码，以及本书相关的更新内容。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Redis设计与实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔试面试-Spring核心</title>
      <link href="/2020/05/11/%E3%80%90Spring%E3%80%91/Java%E7%AC%94%E8%AF%95%E9%9D%A2%E8%AF%95-Spring%E6%A0%B8%E5%BF%83/"/>
      <url>/2020/05/11/%E3%80%90Spring%E3%80%91/Java%E7%AC%94%E8%AF%95%E9%9D%A2%E8%AF%95-Spring%E6%A0%B8%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<p>笔记：<a href="https://blog.csdn.net/huanglei305/article/details/101195116?utm_source=app" target="_blank" rel="noopener">https://blog.csdn.net/huanglei305/article/details/101195116?utm_source=app</a></p><p><font style="color:red;font-weight:bolder;">Spring framework</font> 简称 <font style="color:red;font-weight:bolder;">Spring</font> , 是Java开发中最常用的框架，地位仅次于<font style="color:red;font-weight:bolder;">Java API</font> ;  </p><p>就连近几年比较流行的微服务框架 <font style="color:red;font-weight:bolder;">SpringBoot</font> ， 也是基于  <font style="color:red;font-weight:bolder;">Spring</font> 实现的， <font style="color:red;font-weight:bolder;">SpringBoot</font> 的诞生是为了让开发者更方便的使用 <font style="color:red;font-weight:bolder;">Spring</font> ， 因此 <font style="color:red;font-weight:bolder;">Spring</font> 在java体系中的地位可谓首屈一指。</p><h2 id="Spring-介绍"><a href="#Spring-介绍" class="headerlink" title="Spring 介绍"></a>Spring 介绍</h2><p><font style="color:red;font-weight:bolder;">Spring</font> 是一个 <font style="color:red;font-weight:bolder;">开源框架</font> ， 为了  <font style="color:red;font-weight:bolder;">解决企业应用程序开发复杂性</font>  而创建的， <font style="color:red;font-weight:bolder;">Spring</font> 的概念诞生于 2002年，于2003年正式发布第一个版本 Spring Framework 0.9。</p><p><strong>Spring 1.x</strong><br>此版本主要是为了  <font style="color:red;font-weight:bolder;">解决企业应用程序开发复杂性</font>  而创建的，当时 <font style="color:red;font-weight:bolder;">J2EE</font> 应用的经典架构是  <font style="color:red;font-weight:bolder;">分层架构</font>： <font style="color:red;font-weight:bolder;">表现层、业务层、持久层</font>，最流行的组合就是 <font style="color:red;font-weight:bolder;">SSH（Struts、Spring、Hibernate）</font>。</p><p><font style="color:red;font-weight:bolder;">Spring1.x</font> 仅支持 <font style="color:red;font-weight:bolder;">基于XML的配置</font> ， 确保用户 <font style="color:red;font-weight:bolder;">代码不依赖Spring</font>，它主要包含了以下功能模块： <font style="color:red;font-weight:bolder;">aop、 beans、ejb、jdbc、jndi、orm、transation、validation、web</font>等。</p><p><strong>Spring 2.x</strong><br><font style="color:red;font-weight:bolder;">Spring 2.x</font> 的改动并不是很大， 主要是在 <font style="color:red;font-weight:bolder;">Spring 1.x</font>的基础上增加了几个新模块，如 <font style="color:red;font-weight:bolder;">ehcache、jms、jmx、scripting、stereotype</font> 等。</p><p><strong>Spring 3.x</strong><br><font style="color:red;font-weight:bolder;">Spring 3.x</font> 开始不止支持 <font style="color:red;font-weight:bolder;">XML的配置</font> ， 还扩展了 <font style="color:red;font-weight:bolder;">基于Java类的配置</font>， 还增加了 <font style="color:red;font-weight:bolder;">Expression、Instructment、Tomcat、oxm</font>等组件， 同时将原来的 <font style="color:red;font-weight:bolder;">Web</font> 细分为：<font style="color:red;font-weight:bolder;">Portlet、Servlet</font>。</p><p><strong>Spring 4.x</strong><br><font style="color:red;font-weight:bolder;">Spring 4.x</font> 扩充了 <font style="color:red;font-weight:bolder;">Groovy、Messaging、WebMvc、Tiles2、WebSocket</font>等功能组件，同时 <font style="color:red;font-weight:bolder;">Spring</font> 还适配了 <font style="color:red;font-weight:bolder;">Java版本</font>，全面支持 <font style="color:red;font-weight:bolder;">Java 8.0、Lambda表达式</font>等。 随着 <font style="color:red;font-weight:bolder;">RESTful 架构风格</font>被越来越多的用户所采用， <font style="color:red;font-weight:bolder;">Spring 4.x</font> 也提供了<font style="color:red;font-weight:bolder;">ResultController 等注解</font> 新特性。  </p><p><strong>Spring 5.x</strong><br><font style="color:red;font-weight:bolder;">Spring 5.x</font> 紧跟 Java 相关技术的更新迭代，不断适配 <font style="color:red;font-weight:bolder;">Java 的新版本</font>，同时不断重构优化自身核心框架代码，支持 <font style="color:red;font-weight:bolder;">函数式、响应式编程模型</font> 等。  </p><h2 id="Spring-核心"><a href="#Spring-核心" class="headerlink" title="Spring 核心"></a>Spring 核心</h2><p><font style="color:red;font-weight:bolder;">Spring 核心</font>  包括以下三个方面：</p><ul><li><font style="color:red;font-weight:bolder;">控制反转（IOC，Inversion of Control）</font></li><li><font style="color:red;font-weight:bolder;">依赖注入（DI，Dependency Injection）</font></li><li><font style="color:red;font-weight:bolder;">面向切面编程（AOP，Aspect Oriented Programming）</font></li></ul><p><strong>控制反转（IOC）</strong><br><font style="color:red;font-weight:bolder;">控制反转（Inversion of Control, IOC）</font> ,顾名思义所谓的 <font style="color:red;font-weight:bolder;">控制反转</font> 就是 <font style="color:red;font-weight:bolder;">把创建对象的权利交给框架去控制， 而不需要人为的去创建</font>， 这样就实现了 <font style="color:red;font-weight:bolder;">可插拔式的接口编程</font> ， 有效的 <font style="color:red;font-weight:bolder;">降低代码的耦合度，降低了扩展和维护的成本</font>。<br>比如，去某地旅游不再用自己亲自为订购A酒店还是B酒店而发愁了，只需要把住店的这个需求告诉给某个 托管平台， 这个托管平台就会帮您订购一个既便宜又舒适的酒店，而这个帮你订购酒店的行为就可以称之为 <font style="color:red;font-weight:bolder;">控制反转</font>。</p><p><strong>依赖注入（DI）</strong><br><font style="color:red;font-weight:bolder;">依赖注入 （Dependency Injection，DI）</font>，是 <font style="color:red;font-weight:bolder;">组件之间依赖关系</font> 由 <font style="color:red;font-weight:bolder;">容器在运行期</font> 决定，即由 <font style="color:red;font-weight:bolder;">容器动态的将某个依赖关系注入到组件之中</font>。<br><font style="color:red;font-weight:bolder;">依赖注入</font> 的目的 并非为 软件系统带来更多功能，而是为了 <font style="color:red;font-weight:bolder;">提高组件重用的频率，并为系统搭建一个灵活、可扩展的平台</font>。<br>通过 <font style="color:red;font-weight:bolder;">依赖注入机制</font>，只需要通过简单的配置，而无需任何代码就可以指定目标需要的资源， 完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><p><strong>IOC和DI的关系</strong><br><font style="color:red;font-weight:bolder;">IOC</font> 是 <font style="color:red;font-weight:bolder;">Spring</font> 中一个极为重要的<font style="color:red;font-weight:bolder;">概念</font>， 而 <font style="color:red;font-weight:bolder;">DI </font>则是 <font style="color:red;font-weight:bolder;">实现IOC</font> 的 <font style="color:red;font-weight:bolder;">方法和手段</font>。  </p><p><strong>依赖注入的常见实现方式</strong></p><ul><li><font style="color:red;font-weight:bolder;">setter</font> 注入</li><li><font style="color:red;font-weight:bolder;">构造方法</font> 注入</li><li><font style="color:red;font-weight:bolder;">注解</font> 注入</li></ul><ol><li><strong>setter 注入</strong></li></ol><p>Java代码：  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">UserController</span>&#123;</span><br><span class="line">  <span class="comment">//注入 UserService 对象</span></span><br><span class="line">  <span class="keyword">private</span> UserService userService;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">void</span> setUserService(UserService userService)&#123;</span><br><span class="line">    <span class="keyword">this</span>.userService = userService;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XML 配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userController"</span> <span class="attr">class</span>=<span class="string">"com.learning.controller.UserController"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 依赖注入 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.learning.dao.impl.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Bean标签的常用属性说明：</strong></p><ul><li><strong>id</strong>: 为实例化对象 起名称， 根据id值 可以得到配置的实例化对象，id属性的名称原则上可以任意命名，但是不能包含任何特殊符号；</li><li><strong>class</strong>: 创建对象所在类的全路径。</li><li><strong>name</strong>: 功能和id属性一样，但是现在一般不用；与id的区别在于：name属性值里可以包含特殊符号，但是id不可以；</li><li><strong>scope</strong>： 一般最常用的有两个值：<br><font style="color:red;font-weight:bolder;">Singleton（单例模式）</font>，整个应用程序，只创建bean这一个示例；<br><font style="color:red;font-weight:bolder;">Prototype（原型模式）</font>，每次注入都会创建一个新的bean实例，<font style="color:red;font-weight:bolder;">Spring默认的是单例模式</font>。</li></ul><ol start="2"><li><strong>构造方法注入</strong></li></ol><p>Java代码：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">UserController</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> UserService userService;</span><br><span class="line">  <span class="keyword">public</span> UserController(UserService userService)&#123;</span><br><span class="line">    <span class="keyword">this</span>.userService = userService;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XML配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userController"</span> <span class="attr">class</span>=<span class="string">"com.learning.controller.UserController"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 依赖注入 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"userService"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.learning.dao.impl.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>注解注入：</strong></li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Controller</span></span><br><span class="line">public class UserController&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//使用注解自动注入</span></span><br><span class="line">  <span class="variable">@Autowired</span></span><br><span class="line">  private UserService userService;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建依赖对象</span></span><br><span class="line"><span class="variable">@Service</span></span><br><span class="line">public class UserService&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:red;font-weight:bolder;">创建依赖对象</font>的常见注解：<br><font style="color:red;font-weight:bolder;">@Component</font>、<br><font style="color:red;font-weight:bolder;">@Controller</font>、<br><font style="color:red;font-weight:bolder;">@Service</font>、<br><font style="color:red;font-weight:bolder;">@Repository</font></p><p>总结： 可以看出 <font style="color:red;font-weight:bolder;">注解的方式</font> 要比 <font style="color:red;font-weight:bolder;">传统的XML（setter和构造器注入）</font> 是实现注入更为方便，同时注解方式 也是官方力推的依赖注入最佳使用方式。</p><p><strong>面向切面编程（AOP，Aspect Oriented Programming）</strong><br><font style="color:red;font-weight:bolder;">面向切面编程（Aspect Oriented Programming，AOP）</font>；<br>它就好比 将系统按照功能分类，每一个类别就是一个“切面”，再针对不同的切面制定相应的规则，类似开发模式被称为<font style="color:red;font-weight:bolder;">面向切面编程</font>。</p><p><strong>AOP使用场景</strong></p><ul><li><font style="color:red;font-weight:bolder;">日志系统</font></li><li><font style="color:red;font-weight:bolder;">安全统一校验</font></li></ul><p><strong>AOP优点</strong></p><ul><li><font style="color:red;font-weight:bolder;">集中处理某一类问题，方便维护</font></li><li><font style="color:red;font-weight:bolder;">逻辑更加清晰</font></li><li><font style="color:red;font-weight:bolder;">降低模块间的耦合度</font></li></ul><p><strong>AOP相关概念</strong></p><ul><li><strong>Join point</strong>: <font style="color:red;font-weight:bolder;">连接点</font>，程序执行期间的某一个点，例如执行方法或处理异常时候的点，在Spring AOP中，连接点总是表示方法的执行。</li><li><strong>Advice</strong>: <font style="color:red;font-weight:bolder;">通知</font>，通知分为方法执行前通知、方法执行后通知、环绕通知等。许多AOP框架（包括Spring）都将通知建模为拦截器，在连接点周围维护一系列拦截器（形成拦截器链），对连接点的方法进行增强。</li><li><strong>PointCut</strong>：<font style="color:red;font-weight:bolder;">切点</font>，匹配连接点（Join point）的表达式，是AOP的核心，并且Spring默认使用AspectJ作为切入点表达式语言；</li><li><strong>Aspect</strong>：<font style="color:red;font-weight:bolder;">切面</font>，是一个跨越多个类的模块化的关注点，它是通知（Advice）和切点（Pointcut）合起来的抽象，它定义了一个切点（Pointcut）用来匹配连接点（Join point）,也就是需要对需要拦截的那些方法进行定义；</li><li><strong>Target object</strong>：<font style="color:red;font-weight:bolder;">目标对象</font>，对一个或者多个切面（Aspect）通知的对象，也就是需要被AOP进行拦截对方法进行增强（使用通知）的对象，也称为被通知的对象。由于在AOP里面使用运行时代理，因而目标对象一直是被代理的对象。</li><li><strong>AOP Proxy</strong>：<font style="color:red;font-weight:bolder;">AOP代理</font>，为了是实现切面（Aspect）功能使用AOP框架创建一个对象，在Spring框架里面一个AOP代理指的是JDK自身的动态代理或者是CGLIB实现的动态代理；</li><li><strong>Weaving</strong>：<font style="color:red;font-weight:bolder;">把切面加入到对象，并创建出代理对象的过程</font>；</li><li><strong>Advisor</strong>：一个Advisor相当于一个<font style="color:red;font-weight:bolder;">小型的切面</font>，不同的是它只有一个通知（Advice），Advisor在事务管理里面会经常遇到。</li></ul><p><strong>AOP代码实现</strong><br>AOP的示例就以开车为例；<br>开车的完成流程是这样的：<br>巡视车体以及周围情况—》发动—》开车—》熄火—》锁车。<br>当然，主要的目的是“开车”，但是在开车之前和开完车之后，要做一些其他的工作，这些“其他”的工作，可以理解为AOP编程。  </p><p>1）<strong>创建类和方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learning.aop;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">driver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"开车"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）<strong>创建AOP拦截</strong></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.learning.aop;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.<span class="keyword">annotation</span>.<span class="title">After</span>;</span><br><span class="line">import org.aspectj.lang.<span class="keyword">annotation</span>.<span class="title">Aspect</span>;</span><br><span class="line">import org.aspectj.lang.<span class="keyword">annotation</span>.<span class="title">Before</span>;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CarAop</span>&#123;</span></span><br><span class="line">  @Before(<span class="string">"execution(* com.learning.aop.Person.driver())"</span>)</span><br><span class="line">  public void before()&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"巡视车体以及周围情况"</span>);</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"发动"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  @After(<span class="string">"execution(* com.learning.aop.Person.driver())"</span>)</span><br><span class="line">  public void before()&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"熄火"</span>);</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"锁车"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）<strong>XML配置注入扫描包路径</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.learning"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4）<strong>创建测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learning.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    Person landlord=context.getBean(<span class="string">"person"</span>,Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    landlord.driver();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试代码，执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">巡视车体以及周围情况</span><br><span class="line"></span><br><span class="line">发动</span><br><span class="line"></span><br><span class="line">开车</span><br><span class="line"></span><br><span class="line">熄火</span><br><span class="line"></span><br><span class="line">锁车</span><br></pre></td></tr></table></figure><p><strong>AspectJ 注解</strong> 说明：  </p><ul><li><strong>@Before</strong> <font style="color:red;font-weight:bolder;">前置通知</font>，在连接点方法前调用；</li><li><strong>@Around</strong> <font style="color:red;font-weight:bolder;">环绕通知</font>，它将覆盖原有方法，但是允许通过反射调用原有方法</li><li><strong>@After</strong> <font style="color:red;font-weight:bolder;">后置通知</font>，在连接点方法后调用；</li><li><strong>@AfterReturning</strong> <font style="color:red;font-weight:bolder;">返回通知</font>，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生任何异常。</li><li><strong>@AfterThrowing</strong> <font style="color:red;font-weight:bolder;">异常通知</font>，当连接点方法异常时调用；</li></ul><h2 id="笔试面试题"><a href="#笔试面试题" class="headerlink" title="笔试面试题"></a>笔试面试题</h2><ol><li><strong>@Value 注解的作用是什么？</strong></li></ol><p>答： 基于 <font style="color:red;font-weight:bolder;">@Value</font> 的注解可以 <font style="color:red;font-weight:bolder;">读取 properties 配置文件</font>，使用如下：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Value(<span class="string">"<span class="subst">#&#123;configProperties[<span class="string">'jdbc.username'</span>]&#125;</span>"</span>)</span><br><span class="line">private String userName;</span><br></pre></td></tr></table></figure><p>以上为读取configProperties下的jdbc.username 配置</p><ol start="2"><li><strong>Spring通知类型有哪些？</strong></li></ol><p>答：<br><font style="color:red;font-weight:bolder;">Spring 通知类型</font> 总共有5种：<br><font style="color:red;font-weight:bolder;">前置通知</font>、<br><font style="color:red;font-weight:bolder;">环绕通知</font>、<br><font style="color:red;font-weight:bolder;">后置通知</font>、<br><font style="color:red;font-weight:bolder;">异常通知</font>、<br><font style="color:red;font-weight:bolder;">最终通知</font>。</p><ul><li><strong>前置通知（Before Advice）</strong>：在目标方法执行之前执行的通知。在某连接点（join point）之前执行的通知，但这个通知不能阻止连接点前的执行（除非它抛出一个异常）。</li><li><strong>环绕通知（Around Advice）</strong>：在目标方法执行之前和之后都可以执行额外代码的通知，也可以选择是否继续执行连接点或者直接返回他们自己的返回值或抛出异常来结束执行。</li><li><strong>后置通知（After（finally）Advice）</strong>：目标方法执行之后（某连接点退出的时候）执行的通知（不论是正常返回还是异常退出）</li><li><strong>异常后通知（After throwing Advice）</strong>：在方法抛出异常退出时执行通知</li><li><strong>最终通知（After returning Advice）</strong>：在某连接点（join point）正常完成后执行的通知，例如，一个方法没有抛出任何异常，正常返回。</li></ul><ol start="3"><li><strong>怎么理解Spring中的IOC容器？</strong></li></ol><p>答： <font style="color:red;font-weight:bolder;">Spring IOC</font> 就是 <font style="color:red;font-weight:bolder;">把创建对象的权利交给框架去控制，而不需要人为的去创建</font>，这样就实现了 <font style="color:red;font-weight:bolder;">可插拔式的接口编程</font>，<font style="color:red;font-weight:bolder;">有效的降低代码的耦合度，降低了扩展和维护的成本</font>。</p><p>比如，去某地旅游不再用自己亲自为订购A酒店还是B酒店而发愁了，只需要把住店的需求告诉给某个托管平台，这个托管平台就会帮您订购一个既便宜又舒适的酒店，而这个帮你订购酒店的行为就可以称之为 控制反转。</p><ol start="4"><li><strong>怎么理解 Spring 中的依赖注入？</strong></li></ol><p>答：<font style="color:red;font-weight:bolder;">依赖注入</font> 是指 <font style="color:red;font-weight:bolder;">组件之间的依赖关系</font> 由  <font style="color:red;font-weight:bolder;">容器在运行期决定</font>，即由 <font style="color:red;font-weight:bolder;">容器动态的将某个依赖关系注入到组件之中</font>。依赖注入的目的并非为软件系统带来更多功能，而是 <font style="color:red;font-weight:bolder;">为了提升组件重用的频率， 并为系统搭建一个灵活、可扩展的平台</font>。 通过 <font style="color:red;font-weight:bolder;">依赖注入机制</font>，只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。  </p><ol start="5"><li><strong>IOC和DI有什么关系？</strong></li></ol><p>答：<font style="color:red;font-weight:bolder;">IOC(Inversion of Control)</font> 是 <font style="color:red;font-weight:bolder;">Spring</font> 中一个极为重要的 <font style="color:red;font-weight:bolder;">概念</font>，提供了<font style="color:red;font-weight:bolder;">对象管理</font> 的功能，从而省去了人为创建麻烦，而 <font style="color:red;font-weight:bolder;">DI(Dependency Injection)</font> 正是实现 <font style="color:red;font-weight:bolder;">IOC(Inversion of Control)</font> 的 <font style="color:red;font-weight:bolder;">方法和手段</font>。  </p><ol start="6"><li><strong>@Component和@Bean有什么区别？</strong></li></ol><p>答：<font style="color:red;font-weight:bolder;">@Component</font> 和 <font style="color:red;font-weight:bolder;">@Bean</font> 的 <font style="color:red;font-weight:bolder;">作用对象</font> 不同；</p><ul><li><font style="color:red;font-weight:bolder;">@Component</font>作用于<font style="color:red;font-weight:bolder;">类</font></li><li><font style="color:red;font-weight:bolder;">@Bean</font>直接作用于<font style="color:red;font-weight:bolder;">方法</font></li></ul><p><font style="color:red;font-weight:bolder;">@Component</font> 通常是通过 <font style="color:red;font-weight:bolder;">类路径扫描</font> 来自动 侦测和 装配 对象到Spring容器中；<br>比如<font style="color:red;font-weight:bolder;">@ComponentScan</font> 注解就是定义 扫描路径中的类 装配 到Spring的Bean容器中；</p><p><font style="color:red;font-weight:bolder;">@Bean</font> 注解是告诉Spring这是某个类的实例，当调用者需要用它的时候把它给调用者；<br>@Bean 注解比 @Component注解 <font style="color:red;font-weight:bolder;">自定义性</font> 更强，很多地方只能通过@Bean注解来注册Bean，比如当引用第三方库中的类需要 装配 到Spring容器时，则只能通过 @Bean 来实现，比如以下示例，只能通过@Bean注解来实现：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WireThirdLibClass</span></span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ThirdLibClass <span class="title">getThirdLibClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThirdLibClass();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><strong>Spring中Bean的作用域有几种类型？</strong></li></ol><p>答：<font style="color:red;font-weight:bolder;">Spring中bean的作用域有四种类型</font>，如下列表：</p><ul><li><font style="color:red;font-weight:bolder;">单例（Singleton）</font>: 整个应用程序，只创建bean的一个实例；</li><li><font style="color:red;font-weight:bolder;">原型（Prototype）：</font> 每次注入都会创建一个新的bean实例；</li><li><font style="color:red;font-weight:bolder;">会话（Session）：</font> 每个会话创建一个bean实例，只在Web系统中有效；</li><li><font style="color:red;font-weight:bolder;">请求（Request）：</font> 每个请求创建一个bean实例，只在Web系统中有效；</li><li><font style="color:red;font-weight:bolder;">Spring默认的是单例模式。</font></li></ul><ol start="8"><li><strong>什么是Spring的内部Bean？</strong></li></ol><p>答：当一个bean仅被用作另一个bean的属性时，它能被声明为一个内部bean，为了定义innerBean，在Spring的基于XML的配置元数据中，可以在&lt; property/&gt; 或者&lt; constructor-arg/&gt;元素内使用&lt; bean/&gt;元素，内部bean通常是匿名的，它们的Scope一般是prototype。  </p><ol start="9"><li><strong>Spring注入方式有哪些？</strong></li></ol><p>答：<font style="color:red;font-weight:bolder;">Spring的注入方式包含以下五种</font>：  </p><ul><li><font style="color:red;font-weight:bolder;">setter</font> 注入</li><li><font style="color:red;font-weight:bolder;">构造方法</font> 注入</li><li><font style="color:red;font-weight:bolder;">注解</font> 注入</li><li><font style="color:red;font-weight:bolder;">静态工厂</font> 注入</li><li><font style="color:red;font-weight:bolder;">实例工厂</font> 注入</li></ul><p>其中最常用的是前三种，官方推荐使用的是 <font style="color:red;font-weight:bolder;">注解</font> 注入，相对使用更简单，维护成本更低，更直观。  </p><ol start="10"><li><strong>在Spring中如何操作数据库？</strong></li></ol><p>答：在Spring中操作数据库，可以使用Spring提供的JDBC Template对象；<br>JDBC Template类提供了很多便利的方法；<br>比如把数据库数据转变成基本数据类型或对象；<br>执行自定义SQL语句；<br>提供了自定义的数据错误处理等；</p><p>jdbc template 使用示例如下：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增</span></span><br><span class="line">@GetMapping(<span class="string">"save"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> save()&#123;</span><br><span class="line">  <span class="built_in">String</span> sql=<span class="string">"INSERT INTO USER(USER_NAME,PASS_WORD) VALUES ('LAOWANG','ADMIN')"</span>;</span><br><span class="line">  int <span class="keyword">rows</span>=jdbcTemplate.update(sql);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"执行成功，影响"</span>+<span class="keyword">rows</span>+<span class="string">"行"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">@GetMapping(<span class="string">"del"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> del(int id)&#123;</span><br><span class="line">  int <span class="keyword">rows</span>=jdbcTemplate.update(<span class="string">"DELETE FROM USER WHERE ID=?"</span>,id);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"执行成功，影响"</span>+<span class="keyword">rows</span>+<span class="string">"行"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">@GetMapping(<span class="string">"getMapById"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">Map</span> getMapById(<span class="built_in">Integer</span> id)&#123;</span><br><span class="line">  <span class="built_in">String</span> sql=<span class="string">"SELECT * FROM USER WHERE ID=?"</span>;</span><br><span class="line">  <span class="built_in">Map</span> <span class="built_in">map</span>=jdbcTemplate.queryForMap(sql,id);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="11"><li><strong>Spring的 JdbcTemplate 对象和 JDBC 有什么区别？</strong></li></ol><p>答：<font style="color:red;font-weight:bolder;">Spring</font>的 <font style="color:red;font-weight:bolder;">JdbcTemplate</font>是对<font style="color:red;font-weight:bolder;">JDBC API的封装</font>，提供更多的功能和更便利的操作，比如<font style="color:red;font-weight:bolder;">JDBC Template </font>拥有：</p><ul><li><font style="color:red;font-weight:bolder;">JDBC Template</font>是<font style="color:red;font-weight:bolder;">线程安全</font>的；</li><li><font style="color:red;font-weight:bolder;">实例化</font>操作比较<font style="color:red;font-weight:bolder;">简单</font>，仅需要传递<font style="color:red;font-weight:bolder;">DataSource</font></li><li><font style="color:red;font-weight:bolder;">自动完成资源的创建和释放</font>工作；</li><li>创建一次JDBCTemplate，到处可用，<font style="color:red;font-weight:bolder;">避免重复开发</font>。</li></ul><ol start="12"><li><strong>Spring有几种实现事务的方式？</strong></li></ol><p>答：Spring实现事务的方式有两种方式：</p><ul><li><font style="color:red;font-weight:bolder;">编程式</font> 事务；</li><li><font style="color:red;font-weight:bolder;">声明式</font> 事务；</li></ul><p><font style="color:red;font-weight:bolder;">编程式</font> 事务：<br>使用<font style="color:red;font-weight:bolder;">TransactionTemplate</font>或<font style="color:red;font-weight:bolder;">Platform TransactionManager</font>实现，<br>示例代码如下：  </p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TransactionTemplate transactionTemplate;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  <span class="comment">//Spring编程式事务，回调机制</span></span><br><span class="line">  transactionTemplate.execute(<span class="keyword">new</span> TransactionCallback&lt;Object&gt;)&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">doInTransaction</span><span class="params">(TransactionStatus status)</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        <span class="comment">//异常，设置为回滚</span></span><br><span class="line">        status.setRollbackOnly();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有<font style="color:red;font-weight:bolder;">异常</font>，调用<font style="color:red;font-weight:bolder;">status.setRollbackOnly()</font>，<font style="color:red;font-weight:bolder;">回滚事务</font>；<br>否则<font style="color:red;font-weight:bolder;">正常</font>，执行<font style="color:red;font-weight:bolder;">doInTransaction()</font>方法，正常<font style="color:red;font-weight:bolder;">提交事务</font>。  </p><p>如果<font style="color:red;font-weight:bolder;">事务控制的方法不需要返回值</font>：<br>就可以使用<font style="color:red;font-weight:bolder;">TransactionCallbackWithoutResult(TransactionCallback接口的抽象实现类)</font><br>示例代码如下:  </p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  <span class="comment">//Spring编程式事务，回调机制</span></span><br><span class="line">  transactionTemplate.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus status)</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        <span class="comment">//异常，设置为回滚</span></span><br><span class="line">        status.setRollbackOnly();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:red;font-weight:bolder;">声明式</font> 事务：<br>底层是建立在<font style="color:red;font-weight:bolder;">SpringAOP的基础</font>上；<br>在方法执行前后进行拦截；<br>并在目标方法开始执行前创建新事物或加入一个已存在事务；<br>最后在目标方法执行完毕后根据情况进行提交或者回滚事务；  </p><p><font style="color:red;font-weight:bolder;">声明式</font> 事务的优点:<br>不需要编程，<font style="color:red;font-weight:bolder;">减少了代码的耦合</font> ，<br>在配置文件中配置并在目标方法上添加 <font style="color:red;font-weight:bolder;">@Transactional 注解</font>来实现；</p><p>示例代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line">  <span class="keyword">User</span> <span class="keyword">user</span>=<span class="built_in">new</span> <span class="keyword">User</span>("laowang");</span><br><span class="line">  userMapper.insertSelective(<span class="keyword">user</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    throw <span class="built_in">new</span> RuntimeException("异常");</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抛出异常，事务回自动回滚；<br>如果方法正常执行，则会自动提交事务。</p><ol start="13"><li><strong>Spring中的AOP的底层实现原理是什么？</strong></li></ol><p>答：<font style="color:red;font-weight:bolder;">Spring AOP</font>的底层实现原理就是 <font style="color:red;font-weight:bolder;">动态代理</font>。</p><p><font style="color:red;font-weight:bolder;">Spring AOP的动态代理有两种实现方式</font>：<br>对于<font style="color:red;font-weight:bolder;">接口</font>使用的是<font style="color:red;font-weight:bolder;">JDK自带的动态代理</font>来实现的；<br>而对比<font style="color:red;font-weight:bolder;">非接口</font>使用的是<font style="color:red;font-weight:bolder;">CGLIB来实现</font>的；</p><ol start="14"><li><strong>Spring声明式事务无效可能的原因有哪些?</strong></li></ol><p>答：<font style="color:red;font-weight:bolder;">Spring声明式事务无效可能的原因</font>如下：</p><ul><li><font style="color:red;font-weight:bolder;">MySQL使用的是MyISAM存储引擎</font>，而<font style="color:red;font-weight:bolder;">MyISAM是不支持事务</font>的；</li><li><font style="color:red;font-weight:bolder;">@Transactional使用在非public方法上</font>，<font style="color:red;font-weight:bolder;">@Transactional注解只能支持public级别</font>，其他类型声明的事务不会生效；</li><li><font style="color:red;font-weight:bolder;">@Transactional 在同一个类中无事务方法 A() 内部调用 有事务方法B()，那么此时B() 事务不会生效</font>。</li></ul><ol start="15"><li><strong>Spring中的Bean是线程安全的吗？</strong></li></ol><p>答：<font style="color:red;font-weight:bolder;">Spring中的Bean默认是单例模式</font>;<br>Spring框架并没有对单例Bean进行多线程的封装处理;<br>因此<font style="color:red;font-weight:bolder;">默认的情况Bean并非是安全</font>的;<br>最简单保证Bean安全的举措就是<font style="color:red;font-weight:bolder;">设置Bean的作用域为Prototype（原型）模式</font>，这样每次请求都会新建一个Bean。</p><ol start="16"><li><strong>说一下Spring中Bean的生命周期？</strong></li></ol><p>答：<font style="color:red;font-weight:bolder;">Spring中Bean的生命周期</font>如下：</p><p>1）<font style="color:red;font-weight:bolder;">实例化Bean</font>：<br>对于BeanFactory容器，当客户想容器请求一个尚未初始化的Bean时，或初始化Bean的时候需要注入另一个尚未初始化的依赖时，<br>容器就会调用createBean进行实例化。<br>对于ApplicationContext容器，当容器启动结束后，通过获取BeanDefinition对象中的信息，实例化所有的Bean。</p><p>2）<font style="color:red;font-weight:bolder;">设置对象属性（依赖注入）</font>：<br>实例化后的对象被封装在BeanWrapper对象中，紧接着Spring根据BeanDefinition中的信息以及通过BeanWrapper提供的设置属性的接口完成依赖注入；</p><p>3）<font style="color:red;font-weight:bolder;">处理Aware接口</font>：<br>Spring会检测该对象是否实现了  xxxAware 接口，并将相关 xxxAware实例注入给Bean；</p><p>如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName（String BeanId）方法，此处传递的就是Spring配置文件中Bean的id值；</p><p>如果这个Bean已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory（）方法，传递的是Spring工厂自身；</p><p>如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext（ApplicationContext）方法，传入Spring上下文；</p><p>4）<font style="color:red;font-weight:bolder;">BeanPostProcessor</font>：如果想对Bean进行一些自定义的处理，那么可以让Bean实现BeanPostProcessor接口，那将会调用 postProcessBeforeInitialization(Object obj，String s)方法；</p><p>5）<font style="color:red;font-weight:bolder;">InitialiingBean与init-method</font>：如果Bean在Spring配置文件中配置了init-method属性，则会自动调用其配置的初始化方法；</p><p>6）如果这个Bean实现了BeanPostProcessor接口，将会调用 postProcessAfterInitialization（Object obj，String s）方法；由于这个方法是在Bean初始化结束时调用的，因而可以被应用于内存或者缓存技术；</p><p>以上几个步骤完成后，Bean 就已经被正确创建了，之后就可以使用这个Bean了。</p><p>7）<font style="color:red;font-weight:bolder;">DisposableBean</font>：当Bean不再需要时，会经过清理阶段；如果Bean实现了DisposableBean这个接口，会调用其实现的 destroy()方法；</p><p>8）<font style="color:red;font-weight:bolder;">destroy-mothod</font>：最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法。</p><ol start="17"><li><strong>Spring 有哪些优点？</strong></li></ol><p>答：<font style="color:red;font-weight:bolder;">Spring 优点</font>如下：</p><ul><li><font style="color:red;font-weight:bolder;">开源</font>、<font style="color:red;font-weight:bolder;">免费</font>的热门框架，<font style="color:red;font-weight:bolder;">稳定性高</font>、<font style="color:red;font-weight:bolder;">解决问题成本低</font>；</li><li><font style="color:red;font-weight:bolder;">方便集成</font>各种优秀的框架；</li><li><font style="color:red;font-weight:bolder;">降低了代码耦合性</font>：通过Spring提供的<font style="color:red;font-weight:bolder;">IOC(Inversion of Control)</font>容器，可以将对象之间的依赖关系交由Spring进行控制，避免硬编码所造成的过渡程序耦合；</li><li><font style="color:red;font-weight:bolder;">方便程序测试</font>：在Spring里，测试变得非常简单；例如：Spring对Junit的支持，可以通过注解方便的测试Spring程序；</li><li><font style="color:red;font-weight:bolder;">降低Java EE API 的使用难度</font>：Spring对很多难用的Java EE API（如JDBC、JavaMail、远程调用等）提供了一层封装，通过Spring的简易封装，让这些Java EE API的使用难度大为降低；</li></ul><ol start="18"><li><strong>Spring和Struts的区别？</strong></li></ol><p>答： <font style="color:red;font-weight:bolder;">Spring和Struts的区别</font>如下：</p><p><font style="color:red;font-weight:bolder;">Spring 特性</font>如下：</p><ul><li>具备<font style="color:red;font-weight:bolder;">IOC(Inversion of Control)/DI(Dependency Injection)、AOP(Aspect oriented Programming)</font>等通用能力，提高研发效率</li><li>除了支持Web层建设以外，还提供了了J2EE整体服务</li><li>方便与其他不同技术结合使用，如Hibernate、Mybatis等</li><li><font style="color:red;font-weight:bolder;">Spring拦截机制是方法级别</font></li></ul><p><font style="color:red;font-weight:bolder;">Struts特性</font>如下：</p><ul><li>是一个基于MVC模式的一个Web层的处理</li><li><font style="color:red;font-weight:bolder;">Struts拦截机制是类级别</font></li></ul><ol start="19"><li><strong>Spring、SpringBoot、SpringCloud的区别是什么？</strong></li></ol><p>答： <font style="color:red;font-weight:bolder;">Spring、SpringBoot、SpringCloud的区别</font>如下：</p><ul><li><font style="color:red;font-weight:bolder;">Spring Framework</font> 简称 Spring，是整个Spring生态的基础；</li><li><font style="color:red;font-weight:bolder;">Spring Boot</font>是一个快速开发框架；<br>让开发者可以迅速搭建一套基于Spring的应用程序；<br>并且将<font style="color:red;font-weight:bolder;">常用的Spring模块以及第三方模块</font>，如Mybatis、Hibernate等都做了很好的<font style="color:red;font-weight:bolder;">集成</font>，只需要简单的配置即可使用；<br><font style="color:red;font-weight:bolder;">不需要任何的XML配置文件</font>，真正做到了<font style="color:red;font-weight:bolder;">开箱即用</font>；<br>同时<font style="color:red;font-weight:bolder;">默认支持JSON格式的数据</font>；<br>使用Spring Boot进行<font style="color:red;font-weight:bolder;">前后端分离开发</font>也非常<font style="color:red;font-weight:bolder;">便捷</font>。</li><li><font style="color:red;font-weight:bolder;">Spring Cloud</font>是一套整合了<font style="color:red;font-weight:bolder;">分布式应用</font> 常用模块的框架；<br>使得开发者可以快速实现<font style="color:red;font-weight:bolder;">微服务应用</font>。<br>作为目前非常热门的技术，有关微服务的话题总是在各种场景下被大家讨论；<br>企业的招聘信息中也越来越多的出现对于微服务架构能力的要求。</li></ul><ol start="20"><li><strong>Spring中都是用了哪些设计模式？</strong></li></ol><p>答： <font style="color:red;font-weight:bolder;">Spring中使用的设计模式</font>如下：</p><ul><li><strong>工厂模式</strong>： 通过BeanFactory、ApplicationContext 来创建bean 都是属于工厂模式；</li><li><strong>单例、原型模式</strong>： 创建bean对象 设置作用域时，就可以声明Singleton（单例模式）、Prototype（原型模式）；</li><li><strong>观察者模式</strong>：Spring可以定义一下监听，如ApplicationListener 当某个动作触发时就会发出通知；</li><li><strong>责任链模式</strong>：AOP拦截器的执行；</li><li><strong>策略模式</strong>：在创建代理类时，如果代理的接口使用的是JDK自身的动态代理，如果不是，则接口使用的是CGLIB实现动态代理；</li></ul><ol start="22"><li><strong>Spring事务隔离级别有哪些？</strong></li></ol><p>答：<font style="color:red;font-weight:bolder;">Spring的事务隔离级别包含以下五种</font>：</p><ul><li><strong>ISOLATION_DEFAULT（isolation default）</strong>: 用底层数据库的设置隔离级别，数据库设置的是什么就用什么；</li><li><strong>ISOLATION_READ_UNCOMMITTED（isolation read uncommitted）</strong>:<font style="color:red;font-weight:bolder;">未提交读</font>，最低隔离级别、事务未提交前，就可以被其他事务读取（会出现幻读、脏读、不可重复读）；</li><li><strong>ISOLATION_READ_COMMITTED（isolation read committed）</strong>: <font style="color:red;font-weight:bolder;">提交读</font>，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读），SQL Server的默认级别；</li><li><strong>ISOLATION_REPEATABLE_READ( isolation repeatable read)</strong>: <font style="color:red;font-weight:bolder;">可重复度</font>，保证多次读取同一个数据时，其值都和事务开始时候的内容是一样的，禁止读取到别的事务未提交的数据（会造成幻读），MySQL的默认级别；</li><li><strong>ISOLATION_SERIALIZABLE（isolation serializable）</strong>:<font style="color:red;font-weight:bolder;">序列化</font>，代价最高最可靠的隔离级别，该隔离界别能防止脏读、不可重复读、幻读。</li></ul><p>默认值是 <strong>ISOLATION_DEFAULT</strong> 遵循数据库的事务隔离级别设置；</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM虚拟机</title>
      <link href="/2020/05/09/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%91/%E3%80%90JVM%E3%80%91%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2020/05/09/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%91/%E3%80%90JVM%E3%80%91%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>观看笔记</p></blockquote><p><a href="https://www.bilibili.com/video/BV1qE411Y7FQ?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1qE411Y7FQ?p=1</a>  </p><h2 id="学习方法论与高效学习方式演进"><a href="#学习方法论与高效学习方式演进" class="headerlink" title="学习方法论与高效学习方式演进"></a>学习方法论与高效学习方式演进</h2><p>JVM：Java virtual Machine  </p><ul><li>从人去学习</li><li>从事务去学习</li></ul><p>懂得很多道理，却依然过不好这一生。《后会无期》  </p><p>持久化：最终落到一个存储上面。有输入InputStream一定要有输出OutputStream；  </p><p>刻意联系。  </p><h2 id="JVM学习曲线与疑难点剖析"><a href="#JVM学习曲线与疑难点剖析" class="headerlink" title="JVM学习曲线与疑难点剖析"></a>JVM学习曲线与疑难点剖析</h2><p>应用框架：Spring、Spring Boot、Spring Cloud、Dubbo etc.  </p><p>JVM：枯燥，理论。  </p><p>基于java8；讲解；  </p><p>抱有敬畏的心态学习JVM。  </p><p>任重而道远；  </p><h2 id="深入理解JVM课程大纲分析与工具使用"><a href="#深入理解JVM课程大纲分析与工具使用" class="headerlink" title="深入理解JVM课程大纲分析与工具使用"></a>深入理解JVM课程大纲分析与工具使用</h2><h2 id="类加载器深入解析与阶段分析"><a href="#类加载器深入解析与阶段分析" class="headerlink" title="类加载器深入解析与阶段分析"></a>类加载器深入解析与阶段分析</h2><h2 id="类的加载连接与初始化过程详解"><a href="#类的加载连接与初始化过程详解" class="headerlink" title="类的加载连接与初始化过程详解"></a>类的加载连接与初始化过程详解</h2><h2 id="常量的本质含义与反编译及助记符详解"><a href="#常量的本质含义与反编译及助记符详解" class="headerlink" title="常量的本质含义与反编译及助记符详解"></a>常量的本质含义与反编译及助记符详解</h2><h2 id="编译器常量与运行期常量的区别以及数组创建本质分析"><a href="#编译器常量与运行期常量的区别以及数组创建本质分析" class="headerlink" title="编译器常量与运行期常量的区别以及数组创建本质分析"></a>编译器常量与运行期常量的区别以及数组创建本质分析</h2><h2 id="接口初始化规则与类加载器准备节点和初始化阶段的重要意义"><a href="#接口初始化规则与类加载器准备节点和初始化阶段的重要意义" class="headerlink" title="接口初始化规则与类加载器准备节点和初始化阶段的重要意义"></a>接口初始化规则与类加载器准备节点和初始化阶段的重要意义</h2><h2 id="类加载器深入解析以及重要特性剖析"><a href="#类加载器深入解析以及重要特性剖析" class="headerlink" title="类加载器深入解析以及重要特性剖析"></a>类加载器深入解析以及重要特性剖析</h2><h2 id="初始化对于类与接口的异同点深入解析"><a href="#初始化对于类与接口的异同点深入解析" class="headerlink" title="初始化对于类与接口的异同点深入解析"></a>初始化对于类与接口的异同点深入解析</h2>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> JVM虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shopping for a TV</title>
      <link href="/2020/05/09/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91/lesson4/"/>
      <url>/2020/05/09/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91/lesson4/</url>
      
        <content type="html"><![CDATA[<h2 id="Learn-amp-Talk-I"><a href="#Learn-amp-Talk-I" class="headerlink" title="Learn &amp; Talk I"></a>Learn &amp; Talk I</h2><h3 id="Chapter-1-Shopping"><a href="#Chapter-1-Shopping" class="headerlink" title="Chapter 1 Shopping"></a>Chapter 1 Shopping</h3><h4 id="Lesson-4-Shopping-for-a-TV"><a href="#Lesson-4-Shopping-for-a-TV" class="headerlink" title="Lesson 4 Shopping for a TV"></a>Lesson 4 Shopping for a TV</h4><blockquote><p>at the bottom of the following pages:T1=teaching instructions;T=teacher;S=student</p></blockquote><h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul><li><p>part <big>A</big>. Let’s Learn (12 mins)</p></li><li><p>part <big>B</big>. Let’s Talk (12 mins)</p></li><li><p>part <big>C</big>. Review (1 min)</p></li></ul><blockquote><p>Learning Objectives</p></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">学习目标：</span><br><span class="line"><span class="number">4</span> <span class="built_in">words</span> <span class="keyword">about</span> <span class="string">"shopping for a TV"</span> | <span class="number">4</span>个和<span class="string">"买电视"</span>相关的单词</span><br><span class="line">Expressions <span class="keyword">for</span> <span class="string">"shopping for a TV"</span> | <span class="string">"买电视"</span>常用表达</span><br><span class="line">How <span class="keyword">to</span> talk <span class="keyword">about</span> topics related <span class="keyword">to</span> <span class="string">"shopping for a TV"</span> | 谈论和<span class="string">"买电视"</span>相关的话题</span><br></pre></td></tr></table></figure><h2 id="part-A-Let’s-Learn"><a href="#part-A-Let’s-Learn" class="headerlink" title="part A. Let’s Learn"></a>part A. Let’s Learn</h2><h3 id="Vocabulary-4-mins"><a href="#Vocabulary-4-mins" class="headerlink" title="Vocabulary (4 mins)"></a>Vocabulary (4 mins)</h3><table>  <tr>    <td style="font-weight:bolder;color:red;">warranty</td>    <td>a written promise from a company to repair or replace a product that develops a fault within a particular period of time</td>    <td>保修单，保修卡，保修服务</td>    <td>e.g. The TV has a 3-year <span style="font-weight:bolder;color:red;text-decoration:underline;">warranty</span>.</td>    <td></td>  </tr>   <tr>    <td style="font-weight:bolder;color:red;">best-seller</td>    <td>a new bool or other product that has sold a great number of copies.</td>    <td>热卖品，畅销品</td>    <td>e.g. As a writer, he wants to write a <span style="font-weight:bolder;color:red;text-decoration:underline;">best-seller</span>.</td>    <td></td>  </tr>     <tr>    <td style="font-weight:bolder;color:red;">offer</td>    <td>to provide or supply something.</td>    <td>提供</td>    <td>e.g. He <span style="font-weight:bolder;color:red;text-decoration:underline;">offered</span> me a glass of water.</td>    <td></td>  </tr>     <tr>    <td style="font-weight:bolder;color:red;">delivery</td>    <td>the act of taking goods,letters,parcels,etc. to people's houses or places of work</td>    <td>运送，递送</td>    <td>e.g. They offer free <span style="font-weight:bolder;color:red;text-decoration:underline;">delivery,</span> so it's a good deal.</td>    <td>deliver(v.) The letter was delivered yesterday,</td>  </tr></table><h3 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h3><h4 id="Role-play-the-dialog-with-your-teacher-twice-and-learn-the-highlighted-expressions-by-heart-和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达"><a href="#Role-play-the-dialog-with-your-teacher-twice-and-learn-the-highlighted-expressions-by-heart-和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达" class="headerlink" title="Role-play the dialog with your teacher twice,and learn the highlighted expressions by heart.和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达"></a>Role-play the dialog with your teacher twice,and learn the highlighted expressions by heart.和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达</h4><p>（John and Anne are shopping for a TV.）  </p><p><strong><em>Anne:</em></strong> How about this one?<br><strong><em>John:</em></strong> I like this brand ,and the price isn’t too high.<br>（They start to ask the salesperson for information.）<br><strong><em>John:</em></strong> <span style="background-color:yellow;font-weight:bolder;">How long is the warranty for this TV?</span><br><strong><em>Salesperson:</em></strong> It comes with a 2-year parts(零件)<span style="background-color:yellow;font-weight:bolder;">warranty</span>. It’s also the <span style="background-color:yellow;font-weight:bolder;">best-seller</span> now.<br><strong><em>Anne:</em></strong> <span style="background-color:yellow;font-weight:bolder;">Do you offer free delivery?</span><br><strong><em>Anne:</em></strong> Yes, we do.</p><h2 id="part-B-Let’s-Talk"><a href="#part-B-Let’s-Talk" class="headerlink" title="part B. Let’s Talk"></a>part B. Let’s Talk</h2><h3 id="Conversation"><a href="#Conversation" class="headerlink" title="Conversation"></a>Conversation</h3><h4 id="Suppose-you’re-shopping-for-appliances-Use-th-vocabulary-and-expressions-you’ve-learned-in-part-A-to-complete-the-following-conversation-假设你正在选购电器。运用在第一部分学到的词汇和表达将一下情境对话补充完整"><a href="#Suppose-you’re-shopping-for-appliances-Use-th-vocabulary-and-expressions-you’ve-learned-in-part-A-to-complete-the-following-conversation-假设你正在选购电器。运用在第一部分学到的词汇和表达将一下情境对话补充完整" class="headerlink" title="Suppose you’re shopping for appliances. Use th vocabulary and expressions you’ve learned in part A to complete the following conversation. 假设你正在选购电器。运用在第一部分学到的词汇和表达将一下情境对话补充完整"></a>Suppose you’re shopping for appliances. Use th vocabulary and expressions you’ve learned in part A to complete the following conversation. 假设你正在选购电器。运用在第一部分学到的词汇和表达将一下情境对话补充完整</h4><blockquote><p>Hints<br><strong><em>delivery</em></strong><br><strong><em>warranty</em></strong><br><strong><em>How long is the warranty for …?</em></strong><br><strong><em>best-seller</em></strong><br><strong><em>offer</em></strong></p></blockquote><p><strong><em>A:</em></strong> Excuse me. <span style="text-decoration:underline;">How along is warranty for</span> this air conditioner(空调) ?<br><strong><em>B:</em></strong> Three years. It’s the <span style="text-decoration:underline;">best-seller</span> now. We also <span style="text-decoration:underline;">offer</span> free <span style="text-decoration:underline;">delivery</span>.<br><strong><em>A:</em></strong> But there’s an air conditioner of this brand in the living room of my house,and it doesn’t work very well recently.<br><strong><em>B:</em></strong> We’ll <span style="text-decoration:underline;">offer</span> free repair(维修) if it’s still under <span style="text-decoration:underline;">warranty</span>.<br><strong><em>A:</em></strong> Fine.</p><h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><h4 id="Talk-with-your-teacher-about-the-following-question-Refer-to-the-hints-if-necessary-和老师一起讨论一下问题。可以参考方框中的提示"><a href="#Talk-with-your-teacher-about-the-following-question-Refer-to-the-hints-if-necessary-和老师一起讨论一下问题。可以参考方框中的提示" class="headerlink" title="Talk with your teacher about the following question. Refer to the hints if necessary.和老师一起讨论一下问题。可以参考方框中的提示"></a>Talk with your teacher about the following question. Refer to the hints if necessary.和老师一起讨论一下问题。可以参考方框中的提示</h4><ol><li>How often do you watch TV? When do you usually watch TV?</li></ol><blockquote><p>Hints:</p></blockquote><p><strong><em>every day / usually / from time to time(偶尔) / never …</em></strong><br><strong><em>in the evening(morning ,afternoon) / at the noon / on weekends …</em></strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">I often watch TV <span class="keyword">is</span> irregularly scheduled.  </span><br><span class="line">recently, because I watch TV <span class="keyword">with</span> <span class="keyword">my</span> friends when <span class="keyword">my</span> friends <span class="keyword">after</span> their works,we will eat dinner <span class="keyword">and</span> watch TV <span class="keyword">at</span> <span class="keyword">the</span> evening.</span><br><span class="line">I usually watch TV <span class="keyword">at</span> <span class="keyword">the</span> evening <span class="keyword">with</span> <span class="keyword">my</span> friends.</span><br><span class="line">when i am alone,i don't want <span class="keyword">to</span> watch TV.</span><br><span class="line">maybe ,when only myself,i think <span class="keyword">that</span> watching TV don't bring <span class="keyword">me</span> <span class="keyword">some</span> original happy.</span><br><span class="line">i think <span class="keyword">that</span> watching TV <span class="keyword">is</span> seeing <span class="keyword">some</span> famous actors <span class="keyword">and</span> <span class="keyword">some</span> humorous actors acts happy shows.</span><br><span class="line">so i am <span class="keyword">not</span> <span class="keyword">every</span> <span class="built_in">day</span>  <span class="keyword">or</span> usually <span class="keyword">or</span> <span class="keyword">from</span> <span class="built_in">time</span> <span class="keyword">to</span> <span class="built_in">time</span> <span class="keyword">or</span> never ,no ,also ,i am <span class="keyword">not</span> <span class="keyword">in</span> <span class="keyword">the</span> evening ,<span class="keyword">in</span> <span class="keyword">the</span> morning <span class="keyword">or</span> <span class="keyword">in</span> <span class="keyword">the</span> afternoon,<span class="keyword">or</span> <span class="keyword">on</span> weekends, <span class="keyword">and</span> so <span class="keyword">on</span>.</span><br><span class="line">long long ago ,when i was a child,</span><br><span class="line">i like watching TV.</span><br><span class="line">may be ,<span class="keyword">at</span> <span class="keyword">the</span> childhood,<span class="keyword">in</span> <span class="keyword">the</span> tv <span class="keyword">that</span>'s world, have many imagine <span class="keyword">and</span> interesting something <span class="keyword">or</span> someone fascinated <span class="keyword">my</span> eyes.</span><br></pre></td></tr></table></figure><ol start="2"><li>What kind of TV programs(节目) do you like ? Why?</li></ol><blockquote><p>Hints:</p></blockquote><p><strong><em>news -&gt; learn what’s happening around the world …</em></strong><br><strong><em>talk shows(访谈节目) -&gt; know more about the life of famous people …</em></strong><br><strong><em>variety shows (综艺节目) -&gt; funny,interesting ,relaxing(令人放松的)  …</em></strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i like variety shows, <span class="keyword">because </span><span class="keyword">it's </span>funny ,interesting <span class="keyword">and </span>relaxing.</span><br></pre></td></tr></table></figure><ol start="3"><li>What will you consider(考虑) when buying an appliance(电器)？</li></ol><blockquote><p>Hints:</p></blockquote><p><strong><em>brands (what brands?) / prices (how much?) / warranty(how long?) 、 delivery (free or not?) ….</em></strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i have <span class="keyword">not</span> enough money.</span><br><span class="line">due <span class="keyword">to</span> i have <span class="keyword">not</span> work.</span><br><span class="line">recently,i interviews four <span class="keyword">times</span>.</span><br><span class="line">when <span class="keyword">the</span> interviews process ending, i feel <span class="keyword">my</span> heart <span class="keyword">as</span> <span class="keyword">if</span> <span class="keyword">it</span> <span class="keyword">is</span> slowly sinking.</span><br><span class="line">even though,i look like a child, <span class="keyword">but</span> now,i am <span class="number">21</span> years old.</span><br><span class="line">i work <span class="keyword">from</span> programing. <span class="keyword">in</span> short programing <span class="keyword">is</span> <span class="keyword">it</span>.</span><br><span class="line">so ,<span class="keyword">in</span> <span class="keyword">the</span> short term ,i will <span class="keyword">not</span> consider buy <span class="keyword">some</span> expensive appliance.</span><br><span class="line">except <span class="keyword">for</span> example, a small oscillating fan ,because ,<span class="keyword">the</span> season <span class="keyword">is</span> summer,<span class="keyword">the</span> <span class="built_in">day</span> <span class="keyword">and</span> <span class="keyword">the</span> evening <span class="keyword">is</span> hot. when i have a small oscillating,i feel <span class="keyword">my</span> hand ,foot,hair,leg <span class="keyword">and</span> so <span class="keyword">on</span>,<span class="keyword">is</span> ,emm,<span class="keyword">as</span> <span class="keyword">if</span> a fish live <span class="keyword">the</span> water,especially,when <span class="keyword">after</span> bath shower <span class="keyword">and</span> wash <span class="keyword">my</span> clothes <span class="keyword">and</span> open <span class="keyword">my</span> small oscillating fan,<span class="keyword">the</span> oscillating fan bring <span class="keyword">me</span> <span class="keyword">is</span> this feeling.</span><br></pre></td></tr></table></figure><p>In this lesson,you’ve learned</p><ol start="4"><li>words about “buying appliances”</li></ol><blockquote><p>warranty<br>best-seller<br>offer<br>delivery</p></blockquote><ul><li>commonly used expressions for buying appliances</li></ul><blockquote><p>How long is the warranty for this TV?<br>Do you offer free delivery?</p></blockquote><ul><li>how to talk about TV and other appliances</li></ul><h2 id="Further-Study"><a href="#Further-Study" class="headerlink" title="Further Study"></a>Further Study</h2><h3 id="Listen-and-Learn"><a href="#Listen-and-Learn" class="headerlink" title="Listen and Learn"></a>Listen and Learn</h3><blockquote><p>range hood 抽油烟机<br>electric oven 电烤箱<br>dishwasher 洗碗机</p></blockquote><ul><li>The soybean milk machine(豆浆机)/ juicer(果汁机) has excellent features such as low cost, complete function,convenient to use and so on.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Synchronized和ReentrantLock</title>
      <link href="/2020/05/06/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%91/%E3%80%90%E9%94%81%E3%80%91Synchronized%E5%92%8CReentrantLock/"/>
      <url>/2020/05/06/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%91/%E3%80%90%E9%94%81%E3%80%91Synchronized%E5%92%8CReentrantLock/</url>
      
        <content type="html"><![CDATA[<p>观看笔记: <a href="https://www.bilibili.com/video/BV1dE411r7iy?from=search&amp;seid=2860602863323633916" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1dE411r7iy?from=search&amp;seid=2860602863323633916</a>  </p><p>java当中的锁，比如说ReentrantLock，还有Synchronized关键字；  </p><p>重点：sync(synchronized关键字原理)  </p><p>java体系最难的技术点之一：sync；（涉及到JVM，C++源码等）  </p><ul><li>java的对象布局</li><li>sync底层工作的原理</li><li>sync优化原理</li><li>学习方法-学习的深度</li></ul><h2 id="java头的信息分析"><a href="#java头的信息分析" class="headerlink" title="java头的信息分析"></a>java头的信息分析</h2><p><font style="color:orange;font-weight:bold;">首先为什么要去研究java的对象头？</font>  </p><p><font style="color:orange;font-weight:bold;">这里截取一张Hotspot的源码当中的注释</font></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> 64 bits;</span><br><span class="line"><span class="string">//</span> <span class="params">--------</span></span><br><span class="line"><span class="string">//</span> unused: 25 hash<span class="function">:31</span> <span class="params">---</span>&gt;| unused<span class="function">:1</span>   age<span class="function">:4</span>   biased_lock<span class="function">:1</span> lock<span class="function">:2</span> <span class="params">(normal object)</span></span><br><span class="line"><span class="string">//JavaThread</span>*<span class="function">:54</span> epoch<span class="function">:2</span> unused<span class="function">:1</span> age<span class="function">:4</span> biased_lock<span class="function">:1</span> lock<span class="function">:2</span> <span class="params">(biased object)</span></span><br><span class="line"><span class="string">//</span> PromotedObject*<span class="function">:61</span> <span class="params">-----------------</span>&gt;| promo_bits<span class="function">:3</span> <span class="params">-----</span>&gt; <span class="params">(CMS promoted object)</span></span><br><span class="line"><span class="string">.//</span> size<span class="function">:64-------------------------------------------------</span>&gt;| <span class="params">(CMS free block)</span></span><br><span class="line"><span class="string">//</span></span><br></pre></td></tr></table></figure><p>这张图换成人可读的表格如下：  </p><table>    <tr>        <td colspan="3">Object Header(128 bits)</td>    </tr>    <tr>        <td>Mark Word(64 bits)</td>        <td>Klass Word(64 bits)</td>        <td></td>    </tr>        <tr>        <td>unused:25 | identity_hashcode:31 | unused:1 | age:4 | biased_lock:1 | lock:2 </td>        <td>OOP to metadata object</td>        <td style="color:red;font-weight:bolder;">无锁</td>    </tr>    <tr>        <td>thread:54 |       epoch:2        | unused:1 | age:4 | biased_lock:1 | lock:2 </td>        <td>OOP to metadata object</td>        <td style="color:red;font-weight:bolder;">偏向锁</td>    </tr>      <tr>        <td>ptr_to_lock_record:62                                                    | lock:2 </td>        <td>OOP to metadata object</td>        <td style="color:red;font-weight:bolder;">轻量锁</td>    </tr>    <tr>        <td>ptr_to_heavyweight_monitor:62                                                    | lock:2 </td>        <td>OOP to metadata object</td>        <td style="color:red;font-weight:bolder;">重量锁</td>    </tr>    <tr>        <td>                                                    | lock:2 </td>        <td>OOP to metadata object</td>        <td style="color:red;font-weight:bolder;">gc</td>    </tr></table><p>意思是：<font style="color:orange;font-weight:bold;">java的对象头在对象的不同状态下会有不同的表现形式。</font>  </p><p>主要有三种状态：<br><font style="color:orange;font-weight:bold;">无锁状态、加锁状态、gc标记状态。</font>  </p><p>那么可以理解 <font style="color:orange;font-weight:bold;">java当中的取锁</font>  其实可以理解为是：<font style="color:orange;font-weight:bold;">给对象上锁，也就是改变对象头的状态。</font>  </p><p><font style="color:orange;font-weight:bold;">如果上锁成功则进入同步代码块。</font>  </p><p>但是java当中的锁有分为很多种，从上图可以看出大体分为：<font style="color:orange;font-weight:bold;">偏向锁、轻量锁、重量锁</font>三种锁状态。  </p><p><font style="color:orange;font-weight:bold;">这三种锁的效率完全不同。</font>  </p><p>关于效率的分析会在下文分析，只有合理的设计代码，才能合理的利用锁</p><p>那么这三种锁的原理是什么？所以，需要先研究这个 <font style="color:orange;font-weight:bold;">对象头</font>  </p><h2 id="java对象的布局以及对象头的布局"><a href="#java对象的布局以及对象头的布局" class="headerlink" title="java对象的布局以及对象头的布局"></a>java对象的布局以及对象头的布局</h2><ol><li><strong>JOL来分析java的对象布局</strong></li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        lockTest();<span class="comment">//问题：现在当前想要对该lockTest方法做同步处理</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设此时lockTest存在线程安全问题；如何用最简单的方式来进行处理lockTest方法的同步</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lockTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"xxxx"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理方式一：（加synchronized关键字）  </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="title">com.lock;</span></span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line"></span><br><span class="line">    static L l=<span class="keyword">new</span> L();//为lock新建的专门的一个类；由于lockTest方法是静态的；该静态方法当中需要使用到该l 对象，所以将其置为static</span><br><span class="line"></span><br><span class="line">    static ReentrantLock reentrantLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">        lockTest();//问题：现在当前想要对该lockTest方法做同步处理</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //假设此时lockTest存在线程安全同步问题；如何处理</span><br><span class="line">    public static void lockTest()&#123;</span><br><span class="line">        //<span class="keyword">synchronized</span>()当中需要一个对象；可以传很多；</span><br><span class="line">        //比如说在非静态方法当中可以传this；</span><br><span class="line">        //如果是静态方法则可以传Test.class；也可以进行对对象加锁；</span><br><span class="line">        //更多的时候是建一个专门用来的lock类L,传入该类的对象l，给该l上锁；</span><br><span class="line">        //valatile不能实现同步；valatile只能用来保证访问时的可见性以及不乱去执行，与同步没有很大的关系；</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">        java 并发编程入门级别的问题：  </span><br><span class="line">        <span class="number">1</span>. java当中有哪些锁？</span><br><span class="line">        <span class="number">2</span>. <span class="keyword">synchronized</span>(l)&#123;System.<span class="keyword">out</span>.println(<span class="string">"xxxx"</span>);&#125; 当前该代码锁的是什么？锁的是代码块？还是锁l对象？</span><br><span class="line"></span><br><span class="line">        java当中的锁：比如说公平锁、非公平锁、读写锁、共享锁、互斥锁、自旋锁、偏向锁、轻量级锁、重量级锁....</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span>(l)&#123;System.<span class="keyword">out</span>.println(<span class="string">"xxxx"</span>);&#125; 这段代码本质上的语义是什么?<span class="keyword">synchronized</span>关键字锁住的是代码块还是l该对象？<span class="keyword">synchronized</span>此时锁的是该l 对象；</span><br><span class="line">        给该l 对象进行上锁；</span><br><span class="line">        该<span class="keyword">synchronized</span>是如何给该 l 对象进行上锁的？</span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">        reentrantLock与<span class="keyword">synchronized</span>都是锁，但是这两把锁是有区别的；</span><br><span class="line">        <span class="keyword">synchronized</span>是java的内置锁；</span><br><span class="line">        而reentrantLock是JUC并发包下提供的锁；</span><br><span class="line">        这两个锁都能完成同样的功能：让锁之间的代码块进行同步执行，只有一个线程去访问；</span><br><span class="line">        当前问题在于：如果采用ReentrantLock调用lock()方法的时候，很容易理解为：就是给这个<span class="keyword">new</span>出来的reentrantLock对象去上锁；</span><br><span class="line">        那么从代码当中如何来理解呢？</span><br><span class="line">        因为在reentrantLock这个对象当中，有一个变量:</span><br><span class="line">        public void lock()&#123;</span><br><span class="line">            sync.lock();</span><br><span class="line">            /**</span><br><span class="line">            sync.lock();<span class="comment">--&gt;</span></span><br><span class="line">            <span class="keyword">abstract</span> static class Sync extends AbstractQueueSynchronizer&#123;</span><br><span class="line">                <span class="keyword">abstract</span> void lock();</span><br><span class="line">            &#125;<span class="comment">---&gt;</span></span><br><span class="line">            static final class FairSync extends Sync&#123;</span><br><span class="line">                final void lock()&#123;</span><br><span class="line">                    acquire(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">-----&gt;</span></span><br><span class="line">            public final void acquire(int arg)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!tryAcquire(arg)&amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE),arg))</span><br><span class="line">                selfInterrupt();</span><br><span class="line">            &#125;<span class="comment">----&gt;</span></span><br><span class="line">            //<span class="keyword">protected</span> boolean tryAcquire(int arg)&#123;</span><br><span class="line">            //    throw <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">            //&#125;</span><br><span class="line">            <span class="keyword">protected</span> final boolean tryAcquire(int acquires)&#123;</span><br><span class="line">                final Thread current = Thread.currentThread();</span><br><span class="line">                int c = getState();</span><br><span class="line">                <span class="keyword">if</span>(c==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">                        //compareAndSetState CAS操作</span><br><span class="line">                        //即将getState()<span class="comment">---&gt;private volatile int state;当中的state变量，如果取值为0则改为1；</span></span><br><span class="line">                        compareAndSetState(<span class="number">0</span>,acquires))&#123;</span><br><span class="line">                            setExclusiveOwnerThread(current);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(current == getExclusiveOwnerThread())&#123;</span><br><span class="line">                    int nextc = c+ acquires;</span><br><span class="line">                    <span class="keyword">if</span>(nextc &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                        throw <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">                    setState(nextc);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            */</span><br><span class="line">        &#125;</span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        //整个reentrantLock代码reentrantLock.lock()该行代码的本质意义即为去改变reentrantLock对象当中的一个属性叫做state；将其改成<span class="number">1</span>；如果能够修改属性取值为<span class="number">1</span>成功说明上锁成功；如果没有修改属性取值为<span class="number">1</span>成功则上锁失败</span><br><span class="line">        //所以说给该对象reentrantLock加锁，那么该对象reentrantLock当中就需要有一个标识，标识存在的含义即是否加锁成功；</span><br><span class="line">        reentrantLock.lock();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"zzzzzz"</span>);</span><br><span class="line">        reentrantLock.unlock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span>(l)&#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"xxxx"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信支付</title>
      <link href="/2020/04/23/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E3%80%91%E3%80%90%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9%E3%80%91%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/"/>
      <url>/2020/04/23/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E3%80%91%E3%80%90%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9%E3%80%91%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>重点是复习一下微信支付流程。  </p><p>昨天面试官问我，比如说支付验签、在支付过程中前端用户进行输入购买商品的支付金额这个时候被抓包了怎么办、接口加密、在已经是支付跳转这些时候，支付金额通过抓包被篡改怎么办等支付方面的问题。  </p><h2 id="微信特性"><a href="#微信特性" class="headerlink" title="微信特性"></a>微信特性</h2><ul><li>微信授权</li><li>微信支付</li><li>微信退款</li></ul><p>难点：需要吃透微信的官方文档；一定要按照文档的要求去做；而不是自己YY；  </p><h3 id="第一个关键点"><a href="#第一个关键点" class="headerlink" title="第一个关键点"></a>第一个关键点</h3><p><strong>获取OpenId的方式</strong>：  </p><ul><li><strong>手工方式</strong>（使用手工方式的原因目的在于仔细去看微信的官方文档）</li><li>利用<strong>第三方SDK</strong>（相较于手工方式，高级的方式）</li></ul><p>在实际开发当中使用推荐第三方SDK进行开发微信支付模块。  </p><p>第一步是要完成网页授权，只有通过授权才能够获取得到OpenId，而有了OpenId，才能够继续做下一系列的操作；所以获取OpenId是第一个关键点；  </p><p>强调：一定要单独、仔细、完整的看一遍，甚至看几遍都是可以的；</p><h3 id="微信网页授权"><a href="#微信网页授权" class="headerlink" title="微信网页授权"></a>微信网页授权</h3><p>注意一定要以微信官方文档为准，跟其思路进行。  </p><ul><li>官方文档<br>- <a href="http://mp.weixin.qq.com/wiki" target="_blank" rel="noopener">http://mp.weixin.qq.com/wiki</a><br>- <a href="https://pay.weixin.qq.com/wiki/doc/api/index.html" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/index.html</a></li><li>调试<br>- <a href="https://natapp.cn/" target="_blank" rel="noopener">https://natapp.cn/</a></li><li>第三方SDK<br>- <a href="https://github.com/Wechat-Group/weixin-java-tools" target="_blank" rel="noopener">https://github.com/Wechat-Group/weixin-java-tools</a></li></ul><p>微信官方文档当中，分有普通商户以及服务商版本；</p><p>简单介绍普通商户版本以及服务商版本(<a href="https://pay.weixin.qq.com/wiki/doc/api/index.html)：" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/index.html)：</a>  </p><p>普通商户即普通商家；个人身份是不能够申请微信支付的；必须有着企业的资质才能够进行申请；个人开发者如果想要进行开发调试的话可以向朋友借账号等方式；  </p><p>服务商版可以理解为微信的代理商；接入代理商则往往可能是微信方进行提供了技术以及一些更低费率等等；其实普通商户版本以及服务商版本差别并不太大；  </p><p>现在还多了一个银行服务商，我猜大概也就是银行资质的与微信进行合作；  </p><p>要介绍的是普通商户版本当中的公众号开发支付，即也就是选择JSAPI支付方式（用户通过微信扫码、关注公众号等方式进入商家H5页面，并在微信内调用JSSDK完成支付）；跳转至（<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1）；" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1）；</a>  </p><p>再次强调：仔细查阅官方API文档；其实不管任何支付也都是这样；比如说PayPal（想哭）；难点在于需要去完完整整的理清楚；  </p><p>往往很多时候的不成功不是由于自身开发不好，而是由于官方文档上并没有去仔细阅读；  </p><p>场景介绍、开发步骤、案例介绍….等等都需要仔细查阅，而不是只看一个这种；  </p><p>业务流程：<br> 微信客户端发起支付（展示、生成二维码等不太重要）<br> （重要的是）第四步，请求支付订单然后生成商户订单，再调用统一下单API（第五步）；<br>调用之后返回一个预付单信息；<br>注意是预付单信息；预付单信息返回之后；<br>需要去进行生成JSAPI页面；<br>即在另外一个页面上调用预支付的一些参数；并且签名然后发起支付；<br>发起支付之后，就会有一个异步通知商户支付结果（第十步，很重要）；<br>第一步下单返回的是一个预付单信息；并不是直接下单成功；<br>一般来说不仅仅是微信支付；支付宝也好，最终支付成功之后，会有一个异步的通知；支付完成之后，需要将相关的订单修改成已支付状态（成功/失败）；<br>根据异步通知来的；<br>也可以使用订单查询的API；进行查询订单支付结果；<br>如能接收到异步通知其实就可以进行修改支付结果了；</p><ul><li>文档说明<ul><li>阅读对象</li><li>版本说明</li></ul></li><li>术语<ul><li>支付模式</li><li>名词解释</li></ul></li><li>支付账户<ul><li>支付账户</li></ul></li><li>接口规则<ul><li>协议规则</li><li>参数规定</li><li>安全规范</li><li>获取OpenId</li></ul></li><li>JSAP支付<ul><li>场景介绍</li><li>案例介绍</li><li>开发步骤</li><li>业务流程</li><li>获取微信版本号</li><li>微信内H5调起支付</li><li>收货地址共享</li><li>支付常见问题</li></ul></li><li>API列表<ul><li>统一下单</li><li>查询订单</li><li>关闭订单</li><li>申请退款</li><li>查询退款</li><li>下载交易账单</li><li>下载资金账单</li><li>支付结果通知</li><li>退款结果通知</li><li>拉取订单评价数据</li></ul></li><li>最佳实践<ul><li>支付回调和查单实现指引</li><li>支付验收指引</li><li>网络排查指引</li><li>最佳安全实践</li><li>跨域冗灾方案</li><li>回调通知注意事项</li></ul></li><li>运营规范<ul><li>运营规范</li></ul></li><li>SDK与DEMO下载</li><li>联系我们</li></ul><h2 id="文档说明"><a href="#文档说明" class="headerlink" title="文档说明"></a>文档说明</h2><h3 id="阅读对象"><a href="#阅读对象" class="headerlink" title="阅读对象"></a>阅读对象</h3><p>链接：<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=1_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=1_1</a>  </p><p>本文阅读对象：商户系统（在线购物平台、人工收银系统、自动化智能收银系统或者其他）集成微信支付涉及的技术架构师、研发工程师、测试工程师、系统运维工程师等；</p><h3 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h3><p>链接：<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=1_2" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=1_2</a></p><ul><li>2019.05.06<ul><li>企业付款到银行卡接口，北京银行 银行编码从1032修改为4836；</li></ul></li><li>2019.03.12<ul><li>财付通10位海关注册编码变更为：4403169D3W（原编码440316T004不再使用）</li></ul></li><li>2019.03.06<ul><li>支付结果通知回调频率调整为15s / 15s / 30s / 3m / 10m / 20m / 30m / 30m / 30m / 30m / 60m / 3h / 3h / 3h / 6h / 6h / - 总计24h4m</li></ul></li><li>2019.01.10<ul><li>企业付款接口增加接口频率说明</li></ul></li><li>2019.01.03<ul><li>除合单支付外，字段spbill_create_ip（终端IP）支持IPV6和IPV4两种格式</li></ul></li><li>2019.12.24<ul><li>境内申请退款接口，退款原因下发条件更新</li><li>不超过1元的部分退款，将不会下发退款原因</li></ul></li><li>2018.12.12<ul><li>报关接口新增返回参数</li><li>verify_department-验核机构</li><li>verify_department_trade_id-验核机构交易流水号</li></ul></li><li>2018.12.10<ul><li>企业付款接口新增错误码；</li><li>NO_AUTH</li><li>企业付款备注（desc）参数中的敏感词会被转成字符*</li></ul></li><li>2018.12.09<ul><li>新增支付凭证处开放电子发票入口功能</li><li>统一下单、付款码支付、委托代扣接口新增电子发票开票入口开放参数</li></ul></li><li>2018.12.01<ul><li>企业付款接口新增错误码：<ul><li>PAY_CHANNEL_NOT_ALLOWED</li><li>RECV_ACCOUNT_NOT_ALLOWED</li><li>SENDNUM_LIMIT</li></ul></li></ul></li><li>2018.11.30<ul><li>企业付款接口规则变更：<ul><li>付款到零钱-商户号单日出款总额，由100万降低至10万</li><li>付款到零钱-商户号单人单日付款额度，由2万降低至5000</li><li>付款到银行卡-商户号单日出款总额，由100万降低至10万</li><li>付款到银行卡-商户号单人单日付款额度，由5万降低至2万</li><li>付款到零钱-新增两个商户资金安全相关的错误码</li><li>付款到银行卡-新增三个商户资金安全相关的错误码</li></ul></li></ul></li><li>2018.11.27<ul><li>付款码支付规则变更<ul><li>1000元以下免密支付次数从“每日5次”变更为“每日10次”</li></ul></li></ul></li><li>2018.11.12<ul><li>支付产品名字变更<ul><li>公众号支付-变更为-JSAPI支付</li><li>扫码支付-变更为-Native支付</li><li>刷卡支付-变更为-付款码支付</li></ul></li></ul></li><li>2018.07.06<ul><li>SDK&amp;DEMO更新</li></ul></li><li>2018.05.06<ul><li>报关API新增支付人信息校验结果返回</li></ul></li><li>2018.03.07<ul><li>新增H5支付API</li></ul></li><li>2018.02.15<ul><li>新增小程序支付API</li></ul></li><li>2017.10.15<ul><li>新增资金账单下载API</li></ul></li><li>2017.07.15<ul><li>新增退款结果通知API</li></ul></li><li>2017.07.13<ul><li>添加“场景信息 scene_info”字段</li><li>添加状态机图</li></ul></li><li>2017.06.07<ul><li>申请退款与查询退款接口删除参数：op_user_id</li><li>代金券接口删除参数：coupon_type、locked_num、used_num</li></ul></li><li>2017.03.20<ul><li>退款接口参数refund_id字段长度变更—原“28”位变更为“32”位</li><li>退款接口参数out_refund_no字段长度变更—原“28”位变更为“64”位</li></ul></li><li>2017.03.15<ul><li>更新单品优惠功能</li><li>更新银行类型列表</li></ul></li><li>2017.02.21<ul><li>下载对账单接口-新增充值退款对账单下载（bill_type=RECHARGE_REFUND）</li></ul></li><li>2016.10.11<ul><li>查询退款接口-退款状态-删除“NOTSURE”状态</li></ul></li><li>2016.09.09<ul><li>退款接口增加字段（可选）—-支持可用余额退款</li><li>增加退款错误码”余额不足“</li></ul></li><li>2016.08.24<ul><li>文档左侧导航栏增加“错误码”栏</li></ul></li><li>2015.07.29<ul><li>受理机构更名为：服务商</li><li>受理机构子商户更名为：特约商户</li></ul></li><li>2014.12.12<ul><li>更新付款码支付java版本Demo</li><li>企业红包更名为“代金券\立减优惠”</li><li>邮件中不附带证书，按照指引去商户系统下载</li></ul></li><li>2014.12.11<ul><li>发布新建版本，本文档适用于V3版本商户号接入微信支付，旧版本账号没有MCHID，需要登录商户系统升级（详细请参考升级指引）。</li></ul></li></ul><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><h3 id="支付模式"><a href="#支付模式" class="headerlink" title="支付模式"></a>支付模式</h3><blockquote><p>支付产品  </p></blockquote><ol><li>付款码支付<br>付款码支付是用户展示微信钱包内的“刷卡条码/二维码”给商户系统扫描后直接完成支付的模式。主要应用线下面对面收银的场景。</li><li>Native支付<br>Native支付是商户系统按照微信支付协议生成支付二维码，用户再用微信“扫一扫”完成支付的模式。该模式适用于PC网站支付、实体店单品或者订单支付、媒体广告支付等场景。</li><li>JSAP支付<br>JSAP支付是用户在微信中打开商户的H5页面，商户在H5页面通过调用微信支付提供的JSAP接口调起微信支付模块完成支付。<br>应用场景：</li></ol><ul><li>用户在微信公众账号进入商家公众号，打开某个主页面，完成支付</li><li>用户的好友在朋友圈、聊天窗口等分项商家页面链接，用户点击链接打开商家页面，完成支付</li><li>将商户页面转换成二维码，用户扫描二维码后再微信浏览器中打开页面后完成支付</li></ul><ol start="4"><li>APP支付<br>APP支付又称移动端支付，是商户通过在移动端应用APP中集成开放SDK调起微信支付模块完成支付的模式。  </li><li>H5支付<br>H5支付主要是在手机、ipad等移动设备中通过浏览器唤起微信支付的支付产品。</li><li>小程序支付<br>小程序支付是专门被定义使用在小程序中的支付产品。目前在小程序中能且只能使用小程序支付的方式来唤起微信支付。</li></ol><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ol><li>微信公众平台</li></ol>]]></content>
      
      
      <categories>
          
          <category> 支付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 支付 </tag>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>想一想自己为什么要去面试？</title>
      <link href="/2020/04/20/%E3%80%90%E5%BF%83%E6%83%85%E3%80%91/%E4%BB%8A%E5%B9%B4%E8%A6%81%E4%B9%B0%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
      <url>/2020/04/20/%E3%80%90%E5%BF%83%E6%83%85%E3%80%91/%E4%BB%8A%E5%B9%B4%E8%A6%81%E4%B9%B0%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
      
        <content type="html"><![CDATA[<p>想想今年为什么自己想去面试？<br>气死我了；  </p><ol><li>我今年得换个手机了；</li><li>得交房租了；</li><li>日常开销；</li><li>我想买台相机；</li><li>我还想买把吉他；</li><li>我今年还想买台电脑；</li><li>想去一次漫展，等疫情好了的时候，跟朋友一起；</li><li>想去西塘，参加汉服文化节；等疫情好了的时候，跟朋友一起；</li><li>扩充一下自己的兴趣爱好；</li><li>我就不信了，我好歹也被人喊过老师，我还面试不上一份10k的java开发工程师了？</li><li>每次面试就那么几个问题，我花一个星期还搞不定？</li><li>我学东西的能力有这么差？</li><li>好歹自己的脑子里面也不全是水啊？</li><li>自信一点，很难吗？有点底气行吗？别人这么信任你？怎么跟个扶不起的刘阿斗似的？</li><li>再不去认认真真的面试，等会儿你妹都高考完了我跟你讲；</li><li>再不认真面试，我看你怎么交代吧？？？！！！；老是犹犹豫豫有什么好的，都讲了几百回了，要你果决一点，果断一点，你不听；</li><li>好了，不说了，好好面试，好好加油；</li><li>每次不想看视频的时候，就看看这里，自己怎么写的，自己怎么去做；我倒是看你浑浑噩噩要躲到什么时候去；</li></ol>]]></content>
      
      
      <categories>
          
          <category> about </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务架构的分布式事务控制解决方案</title>
      <link href="/2020/04/20/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E3%80%91/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E3%80%91%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2020/04/20/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E3%80%91/%E3%80%90%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E3%80%91%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>希望这句话不只是送给我，也送给那些跟我当时心境一样的人。  </p><p>就像妈妈每次给我打电话的结尾是：要天天开开心心的。保持好心情。  </p><p>一样。  </p><p>观看笔记： <a href="https://www.bilibili.com/video/BV1Q4411y7ip?from=search&amp;seid=11158504841670855744" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Q4411y7ip?from=search&amp;seid=11158504841670855744</a>  </p><p>相关的笔记截图放在QQ号为：198866436的空间相册当中了；  </p><p>视频可以选择2x倍速观看；不知道为什么它的那个原本的速度我感觉好像放慢了一样，放到2x速度的时候感觉才像是刚刚好；  </p><h2 id="技术专题：分布式事务专题"><a href="#技术专题：分布式事务专题" class="headerlink" title="技术专题：分布式事务专题"></a>技术专题：分布式事务专题</h2><ol><li>基础概念</li></ol><ul><li>什么是<strong>事务</strong></li><li><strong>本地事务</strong></li><li><strong>分布式事务</strong></li><li><strong>分布式事务</strong>产生的<strong>场景</strong></li></ul><ol start="2"><li><strong>分布式事务</strong>基础理论</li></ol><ul><li><strong>CAP理论</strong><ul><li>理解<strong>CAP</strong></li><li><strong>CAP</strong>组合方式</li><li>总结</li></ul></li><li><strong>BASE</strong>理论</li></ul><ol start="3"><li><strong>分布式事务</strong> <strong>解决方案</strong> 之 <strong>2PC</strong>（<strong>两阶段提交</strong>）</li></ol><ul><li>什么是<strong>2PC</strong></li><li><strong>解决方案</strong><ul><li><strong>传统2PC</strong></li><li><strong>Seata实现2PC</strong></li></ul></li><li><strong>Seata</strong>实现<strong>2PC事务</strong>（<strong>seata阿里开源框架</strong>）<ul><li>业务说明</li><li>程序组成部分</li><li>创建数据库</li><li><strong>启动TC（事务协调器）</strong></li><li>discover-server</li><li>导入dtx-seata-demo</li><li>dtx-seata-demo-bank1</li><li>dtx-seata-demo-bank2</li><li>测试场景</li><li>原理分析</li></ul></li><li>小结</li></ul><ol start="4"><li><strong>分布式事务</strong> <strong>解决方案</strong> 之 <strong>TCC</strong></li></ol><ul><li>什么是<strong>TCC事务</strong></li><li><strong>解决方案</strong></li><li><strong>Hmily实现TCC事务</strong>（<strong>Hmily轻量级框架</strong>）<ul><li>业务说明</li><li>程序组成部分</li><li>创建数据库</li><li>discover-server</li><li>导入dtx-tcc-demo</li><li>dtx-tcc-demo-bank1</li><li>dtx-tcc-demo-bank2</li><li>测试场景</li></ul></li><li>小结</li></ul><ol start="5"><li><strong>分布式事务 解决方案</strong> 之 <strong>可靠消息最终一致性</strong></li></ol><ul><li>什么是<strong>可靠消息最终一致性事务</strong></li><li>解决方案<ul><li>本地消息表方案</li><li><strong>RocketMQ事务消息方案</strong></li></ul></li><li><strong>RocketMQ</strong>实现<strong>可靠消息最终一致性事务</strong>（<strong>RocketMQ阿里开源的消息队列</strong>）<ul><li>业务说明</li><li>程序组成部分</li><li>创建数据库</li><li>启动RocketMQ</li><li>discover-server</li><li>导入dtx-txmsg-demo</li><li>dtx-txmsg-demo-bank1</li><li>dtx-txmsg-demo-bank2</li><li>测试场景</li></ul></li><li>小结</li></ul><ol start="6"><li><strong>分布式事务 解决方案</strong> 之 <strong>最大努力通知</strong></li></ol><ul><li>什么是<strong>最大努力通知</strong></li><li><strong>解决方案</strong></li><li><strong>RocketMQ</strong>实现<strong>最大努力通知型事务</strong><ul><li>业务说明</li><li>程序组成部分</li><li>创建数据库</li><li>启动RocketMQ</li><li>导入dtx-notifymsg-demo</li><li>dtx-notifydemo-pay</li><li>dtx-notifydemo-bank1</li><li>测试场景</li></ul></li><li>小结</li></ul><ol start="7"><li><strong>分布式事务</strong>综合案例</li></ol><ul><li>系统介绍<ul><li>P2P介绍</li><li>总体业务流程</li><li>业务术语</li><li>模块说明</li></ul></li><li><strong>注册账号</strong>案例分析<ul><li>业务流程</li><li>解决方案分析</li></ul></li><li><strong>存管开户</strong><ul><li>业务流程</li><li>解决方案分析</li></ul></li><li><strong>满标审核</strong><ul><li>业务流程</li><li>解决方案分析</li></ul></li></ul><ol start="8"><li>课程总结</li></ol><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>什么是<strong>事务</strong>？<br>举个生活中的例子：你去小卖铺买东西，“<strong>一手交钱，一手交货</strong>”就是一个事务的例子，<strong>交钱和交货</strong> <strong>必须全部成功</strong>，<strong>事务才算成功</strong>，<strong>任何一个活动失败</strong>，<strong>事务将撤销所有已成功的活动</strong>；  </p><p>明白上述例子，再来看事务的定义：  </p><blockquote><p><strong>事务</strong>可以看做是一次大的<strong>活动</strong>，它由<strong>不同的小活动</strong> <strong>组成</strong>，这些小活动要么<strong>全部成功</strong>，要么<strong>全部失败</strong>；  </p></blockquote><h3 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h3><p>在<strong>计算机系统</strong>中，更多的是通过<strong>关系型数据库</strong>来控制<strong>事务</strong>，这是利用<strong>数据库本身的事务特性</strong>来实现的，因此叫做<strong>数据库事务</strong>；  </p><p>由于应用主要靠<strong>数据库</strong>来控制<strong>事务</strong>，而<strong>数据库</strong>通常和<strong>应用</strong>在同一个服务器，所以<strong>基于关系型数据库的事务</strong>又称为<strong>本地事务</strong>；  </p><p>回顾一下<strong>数据库事务</strong>的<strong>四大特性 ACID</strong>：  </p><ul><li><strong>A（Atomic）</strong>：  <ul><li><strong>原子性</strong>；</li><li>构成事物的所有操作，要么<strong>都执行完成</strong>，要么<strong>全部不执行</strong>；</li><li><strong>不可能出现部分成功部分失败</strong>的情况。  </li></ul></li><li><strong>C（Consistency）</strong>：  <ul><li><strong>一致性</strong>；</li><li>在<strong>事务执行前后</strong>，<strong>数据库</strong>的<strong>一致性约束</strong> <strong>没有被破坏</strong>。</li><li>比如：张三向李四转100元，转账前和转账后的数据是正确的状态这就叫做一致性；如果出现张三转出100元，李四账户没有增加100元这就出现了数据错误，就没有达到一致性。</li></ul></li><li><strong>I（Isolation）</strong>：  <ul><li><strong>隔离性</strong>；</li><li><strong>数据库中的事务</strong>一般都是<strong>并发</strong>的；</li><li><strong>隔离性</strong>是指<strong>并发的两个事务 的执行</strong> <strong>互不干扰</strong>；</li><li><strong>一个事务</strong> <strong>不能看到</strong> <strong>其他事务</strong> <strong>运行过程的中间状态</strong>。  </li><li>通过配置 <strong>事务隔离级别</strong> 可以 <strong>避免脏读、重复读</strong> 等问题。</li></ul></li><li><strong>D（Durability）</strong>：  <ul><li><strong>持久性</strong>；</li><li>事务完成之后，该<strong>事务对数据的更改</strong>会被 <strong>持久化到数据库</strong>，且<strong>不会被回滚</strong>。  </li></ul></li></ul><p>数据库事务在实现时，会将一次事务涉及的所有操作全部纳入到一个<strong>不可分割的执行单元</strong>，该执行单元中的所有操作要么<strong>都成功</strong>，要么<strong>都失败</strong>，只要其中<strong>任一操作执行失败</strong>，都将导致<strong>整个事务的回滚</strong>。  </p><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p>随着互联网的快速发展，软件系统由原来的<strong>单体应用</strong>转变为<strong>分布式应用</strong>。  </p><p>下图描述了<strong>单体应用向微服务的演变</strong>：  </p><p><strong>分布式系统</strong> 会把 <strong>一个应用系统</strong> 拆分为 <strong>可独立部署的 多个服务</strong>。  </p><p>因此需要<strong>服务与服务</strong>之间<strong>远程协作</strong>才能完成事务操作。  </p><p>这种<strong>分布式系统环境</strong>下由<strong>不同的服务</strong>之间通过<strong>网络远程协作完成事务</strong>称之为【<strong>分布式事务</strong>】。  </p><p>例如<strong>用户注册送积分事务</strong>、<strong>创建订单减库存事务</strong>、<strong>银行转账事务</strong>等都是<strong>分布式事务</strong>。  </p><p>用户服务当中要增加用户/积分服务当中要增加积分；<br>我突然想起来了，其实信666这个项目当中增加用户还有一个充值90的一个操作，其实也应该是一个事务；当时增加用户后我是直接发送了一个队列进行充值90元；<br>通过这个mq发送消息队列，这个不也是属于远程协作吗？<br>假如我在进行操作增加增加账户的时候进行发送了队列这个时候如果增加账户出事情了那么势必就需要分布式事务了；<br>倘若我当时好像处理的是当用户账户增加成功了之后然后再去发送的队列呢？<br>这个时候就应该不会出现了吧？<br>哦哦，不对，倘若我消息队列当中的业务逻辑处理增加90元的这个操作失败了呢？<br>那么这个时候增加账户的这个业务操作就应该需要进行回滚？这两个操作构成一个事务（原子性），且需要达到一致性，即账户增加需要成功，充值也需要成功；  </p><p>订单服务中需要加订单/库存服务当中需要减少库存；  </p><p><strong>本地事务</strong>依赖数据库；依赖<strong>数据库本身提供的事务特性</strong>来实现，因此以下逻辑可以控制本地事务：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> <span class="keyword">transaction</span>;</span><br><span class="line">      //1. 本地数据库操作：张三减少金额</span><br><span class="line">      //2. 本地数据库操作：李四增加金额</span><br><span class="line"><span class="keyword">commit</span> <span class="keyword">transaction</span>;</span><br></pre></td></tr></table></figure><p>但是在<strong>分布式环境</strong>下，会变成这样：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> <span class="keyword">transaction</span>;</span><br><span class="line">      //1. 本地数据库操作：张三减少金额</span><br><span class="line">      //2. 远程调用：让李四增加金额</span><br><span class="line"><span class="keyword">commit</span> <span class="keyword">transaction</span>;</span><br></pre></td></tr></table></figure><p>可以设想，当<strong>远程调用</strong>让李四增加金额成功了，由于 <strong>网络问题远程调用</strong> 并 <strong>没有返回</strong>，此时 <strong>本地事务提交事务就回滚</strong> 了张三减少金额的操作，此时张三和李四的数据就<strong>不一致</strong>了。  </p><p>因此在<strong>分布式架构</strong>的基础上，<strong>传统数据库事务</strong>就<strong>无法使用</strong>了。  </p><p>张三和李四的账户不在一个数据库中甚至不在一个应用系统里，实现转账事务需要通过远程调用，由于网络问题就会导致分布式事务问题。  </p><p>三种事务异常情况：<br>（1）本地数据库操作：张三减少金额失败了；那么远程调用：让李四增加金额也需要失败；<br>（2）远程调用：让李四增加金额失败了；那么本地数据库操作：让张三减少金额也需要失败；<br>（3）本地数据库操作以及远程调用都成功了；但是远程调用由于网络问题，没有及时返回相应的结果，事务的时间超时了，那么这个时候会造成异常，也就是本地数据库操作就会发生回滚；而远程调用已经成功了；则事务不一致了此时；  </p><p>所以说分布式事务去使用本地事务的思想解决是行不通的；  </p><h3 id="分布式事务产生的场景"><a href="#分布式事务产生的场景" class="headerlink" title="分布式事务产生的场景"></a>分布式事务产生的场景</h3><ol><li>典型的场景就是微服务架构</li></ol><p>微服务之间通过远程调用完成事务操作。  </p><p>比如：订单微服务和库存微服务，下单的同时订单微服务请求库存微服务减少库存。  </p><p>简言之: 跨JVM进程产生分布式事务。  </p><ol start="2"><li>单体系统访问多个数据库实例</li></ol><p>当单体系统需要访问多个数据库（实例）时就会产生分布式事务；  </p><p>比如：用户信息和订单信息分别在两个MySQL实例存储，用户管理系统删除用户信息，需要分别删除用户信息及用户的订单信息，由于数据分布在不同的数据实例，需要通过不同的数据库链接去操作数据，此时产生分布式事务。  </p><p>简言之：跨数据库实例产生分布式事务。  </p><ol start="3"><li>多服务访问同一个数据库实例</li></ol><p>比如：订单微服务和库存微服务即使访问同一个数据库也会产生分布式事务，原因就是跨JVM进程，两个微服务持有了不同的数据库链接进行数据库操作，此时产生分布式事务。  </p><h2 id="分布式事务基础理论"><a href="#分布式事务基础理论" class="headerlink" title="分布式事务基础理论"></a>分布式事务基础理论</h2><p>通过前面的学习，了解到了分布式事务的基础概念。  </p><p>与本地事务不同的是，分布式系统之所以叫做分布式，是因为提供服务的各个节点分步在不同的机器上，相互之间通过网络交互，不能因为有一点网络问题就导致整个系统无法提供服务，网络因素成为了分布式事务的考量标准之一。  </p><p>因此，分布式事务需要更进一步的理论支持，接下来，学习一下分布式事务的CAP理论。  </p><p>在安静街分布式事务控制解决方案之前需要先学习一些基础理论，通过理论知识指导确定分布式事务控制的目标，从而帮助理解每个解决方案。  </p><h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p>进行分布式事务控制，需要控制到什么程度：  </p><p>（1）出现了网络问题之后，数据不一致；  </p><p>（2）出现了网络问题后，某一个服务不可用；  </p><h4 id="理解CAP"><a href="#理解CAP" class="headerlink" title="理解CAP"></a>理解CAP</h4><p>CAP是Consistency、Availability、Partition tolerance三个词语的缩写，分别表示一致性、可用性、分区容忍性。  </p><p>下边分别来解释：  </p><p>  为了方便对CAP理论的理解，结合电商系统中的一些业务场景来理解CAP。  </p><p>  如下图，是商品信息管理的执行流程：  </p><p>整体执行流程如下：  </p><ol><li>商品服务请求主数据库写入商品信息（添加商品、修改商品、删除商品）</li><li>主数据库向商品服务响应写入成功</li><li>商品服务请求从数据库读取商品信息</li></ol><p>数据库读写分离好处：分担数据库的压力；  </p><p>主数据库只管提供写入操作，从数据库只管提供查询操作；  </p><blockquote><p>C - Consistency</p></blockquote><p>一致性是指写入操作的读操作可以读取到最新的数据状态，当数据分步到多个结点上，从任意节点读取到的数据都是最新的状态。  </p><p>上图中，商品信息的读写要满足一致性就是要实现如下目标：  </p><p>（1）商品服务写入主数据库成功，则向从数据库查询新数据也成功；<br>（2）商品服务写入主数据库失败，则向从数据库查询新数据也失败；  </p><p>如何实现一致性？（此时的一致性则指的是主从数据库的数据一致性）  </p><p>（1）写入主数据库后要将数据同步到从数据库；<br>（2）写入主数据库后，在向从数据库同步期间要将数据库锁定，待同步完成后再释放锁，以免在新数据写入成功后，向从数据库查询到旧的数据。  </p><p>同步的方式：<br>（1）主从复制；  </p><p>分布式系统一致性的特定：  </p><p>（1）由于存在数据同步的过程，写操作的响应会有一定的延迟；<br>（2）为了保证数据一致性会对资源暂时锁定，待数据同步完成释放锁定资源。<br>（3）如果请求数据同步失败的结点则会返回错误信息，一定不会返回旧数据。  </p><blockquote><p>A - Availability</p></blockquote><p>可用性是指任何事物操作都可以得到响应结果，且不会出现响应超时或者响应错误。  </p><p>上图中，商品信息读取满足可用性就要实现如下目标：  </p><p>（1）从数据库接收到数据查询的请求则立即能够响应数据查询结果；<br>（2）从数据库不允许出现响应超时或者响应错误。<br>（3）即使数据还没有同步过来，从数据库也要返回查询的数据，哪怕是旧数据，如果连就数据库也没有则可以按照约定返回一个默认信息，但不能返回错误或者响应超时。  </p><p>分布式可用性的特定：  </p><p>（1）所有请求都有响应，且不会出现响应超时或者响应错误。  </p><blockquote><p>P - Partition tolerance</p></blockquote><p>通常分布式系统的各个结点部署在不同的子网，这就是网络分区。  </p><p>不可避免的会出现由于网络问题而导致结点之间的通信失败，此时仍然可以对外提供服务，这就叫分区容忍性。  </p><p>上图中，商品信息读写满足分区容忍性就是要实现如下目标：  </p><p>（1）主数据库向从数据库同步数据失败不影响读写操作。<br>（2）其中一个结点挂掉不影响另一个节点对外提供服务。  </p><p>如何实现分区容忍性？  </p><p>（1）尽量使用异步取代同步操作，例如使用异步方式将数据从主数据库同步到从数据，这样结点之间才能有效的实现松耦合。<br>（2）添加从数据库结点，其中一个结点挂掉其他从结点提供服务。  </p><p>分布式分区容忍的特点：  </p><p>（1）分区容忍性是分布式系统具备的基本能力。  </p><h4 id="CAP组合方式"><a href="#CAP组合方式" class="headerlink" title="CAP组合方式"></a>CAP组合方式</h4><ol><li>上边商品管理的例子是否同时具备CAP呢？  </li></ol><p><strong>在所有分布式事务场景中不会同时具备CAP三个特性，因为在具备了P的的前提下C和A是不能共存的。</strong>  </p><p>比如：  </p><p>下图满足了P即表示分区容忍：  </p><p>本图分区容忍的含义是：  </p><p>（1）主数据库通过网络向从数据库同步数据，可以认为主从数据库部署在不同的分区，通过网络进行交互;<br>（2）当主数据库和从数据库之间的网络出现问题不影响主数据和从数据库对外提供服务。<br>（3）其中一个结点挂掉不影响另一节点对外提供服务。  </p><p>如果要实现C则必须保证数据一致性，在数据同步的时候为防止向从数据库查询不一致的数据则需要从数据库数据锁定，待同步完成之后解锁，如果同步失败从数据库要返回错误信息或超时信息。  </p><p>如果要实现A则必须保证数据可用性，不管任何时候都可以向从数据库查询数据，则不会响应超时或者返回错误信息。  </p><p>通过分析发现在满足P的前提下C和A存在矛盾性。  </p><ol start="2"><li>CAP有哪些组合方式呢？</li></ol><p>所以在生产中对分布式事务处理时要根据需求来确定满足CAP的哪两个方面。  </p><p>（1）AP：  </p><p>放弃一致性，追求分区容忍性和可用性。<br>这是很多分布式系统设计时的选择。  </p><p>例如：<br>上边的商品管理，完全可以实现AP，前提是只要用户可以接受所查询到的数据在一定时间内不是最新的即可。  </p><p>通常实现AP都会保证最终一致性，后面讲的BASE理论就是根据AP来实现的，一些业务场景，比如：订单退款、今日退款成功，明日账户到账，只要用户可以接受在一定时间内到账即可。  </p><p>我突然想到一个问题；就是现在深圳通或者是乘车码有个时候会出现延迟扣费的一个情况。是不是也是额，放弃数据一致性而追求可用性和分区容忍性？深圳通和乘车码肯定是一个分布式的一个系统架构，我觉得，因为这个使用的这个人群数量很高，且每一个人进行的交易也就是乘车的这个次数的交易量也很大，好了不说这个了。也就是说，它会有一个温馨提示：因扫码设备网络不稳定等原因，该笔乘车扣款有延迟。的这样一个信息。当没有及时进行扣款遵循可用性的原则应该是返回了一个默认或者是双方规定好的一个原则，没有去响应超时或者是这个响应错误信息，而是没有提示什么东西；然后事后去保证最终一致性，也就是进行了延迟扣款。我猜的。  </p><p>（2）CP：  </p><p>放弃可用性，追求一致性和分区容错性，zookeeper其实就是追求的强一致性，又比如说跨行转账，一次转账请求要求等待双方银行都完成整个事务才算完成。  </p><p>对对对，我之前我想的也是这个分区容忍性和容错好像啊。  </p><p>（3）CA：  </p><p>放弃分区容忍性，即不进行分区，不考虑由于网络不同或者结点挂掉的情况，则可以实现一致性和可用性，那么系统将不是一个标准的分布式系统，最常用的关系型数据库就满足了CA。  </p><p>上边的商品管理，如果要实现CA则架构如下：  </p><p>主数据库和从数据库中间不再进行数据同步，数据库可以响应每次的查询请求，通过事务隔离级别实现每个查询请求都可以返回最新的数据。  </p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>通过上面已经学习了CAP理论的相关知识，CAP是一个已经被证实的理论：  </p><p>一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容忍性（Partition tolerance）这三项中的两项。  </p><p>它可以作为进行架构设计、技术选型的考量标准。  </p><p>对于多数大型互联网应用的场景，结点众多、部署分散，而且现在的集群规模越来越大，所以节点故障、网络故障是常态，而且要保证服务可用性达到N个9（99.99…%），并且要达到良好的响应性能来提高用户体验，因此一般都会做出如下选择：保证P和A，舍弃C强一致，保证最终一致性。  </p><h3 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h3><ol><li>理解强一致性（CA、CP）和最终一致性（AP）</li></ol><p>CAP理论告诉我们一个分布式系统做多只能同时满足一致性（Consistency）、可用性（Availability）和分区容忍性（Partition tolerance）这三项中的两项。  </p><p>其中AP在实际应用中较多，AP即舍弃一致性，保证可用性和分区容忍性。  </p><p>但是在实际生产中很多场景都要实现一致性，比如前面举的例子，主数据库向从数据库同步数据，即使不要一致性，但是最终也要将数据库同步成功来保证数据一致，这种一致性和CAP中的一致性不同：<br>（1）CAP中的一致性要求在任何时间查询每个节点数据都必须一致，它强调的是强一致性；<br>（2）但是最终一致性是允许在一段时间内每个结点的数据不一致，但是经过一段时间每个结点的数据必须一致，它强调的是最终数据的一致性。  </p><ol start="2"><li>BASE理论介绍</li></ol><p>BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的缩写。  </p><p>BASE理论是对CAP中AP的一个扩展，通过牺牲强一致性来获得可用性，当出现故障允许部分不可用但要保证核心功能可用，允许数据在一段时间内是不一致的，但最终达到一致状态。  </p><p>满足BASE理论的事务，称之为“<strong>柔性事务</strong>”。  </p><ul><li>基本可用（Basically Available）：分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用。如，电商网站交易付款时出现问题了，商品依然可以正常浏览。  </li><li>软状态（Soft state）：由于不要求强一致性，所以BASE允许系统中存在中间状态（也叫软状态），这个状态不影响系统可用性，如订单的“支付中”、“数据同步中”等状态，待数据最终一致后状态改为“成功”状态。  </li><li>最终一致性（Eventually consistent）：最终一致是指经过一段时间后，所有结点数据都将会达到一致，如订单的“支付中”状态，最终会变为“支付成功”或者“支付失败”，使订单状态与实际交易结果达成一致，但是需要一定时间的延迟、等待。  </li></ul><h2 id="分布式事务解决方案之2PC（两阶段提交）"><a href="#分布式事务解决方案之2PC（两阶段提交）" class="headerlink" title="分布式事务解决方案之2PC（两阶段提交）"></a>分布式事务解决方案之2PC（两阶段提交）</h2><p>前面已经学习了分布式事务的基础理论，以理论为基础，针对不同的分布式场景业界常见的解决方案有2PC、TCC、可靠消息最终一致性、最大努力通知这几种。  </p><h3 id="什么是2PC"><a href="#什么是2PC" class="headerlink" title="什么是2PC"></a>什么是2PC</h3><p>2PC即两阶段提交协议，是将整个事务流程分为两个阶段，准备阶段（Prepare phase）、提交阶段（commit phase），2是指两个阶段，P是指准备阶段，C是指提交阶段。  </p><p>举例： 张三和李四好久不见，老友约起聚餐，饭店老板要求先买单，才能出票。  </p><p>这时张三和李四分别抱怨近况不如意，囊中羞涩，都不愿意请客，这时只能AA。  </p><p>只有张三和李四都付款，老板才能出票安排就餐。  </p><p>但是由于张三和李四都是铁公鸡，形成了尴尬的一幕：  </p><p>准备阶段：老板要求张三付款，张三付款。老板要求李四付款，李四付款。  </p><p>提交阶段：老板出票，两人拿票纷纷落座就餐。  </p><p>例子中形成了一个事务，若张三或者李四其中一个人拒绝付款，或者钱不够，店家老板都不会给出票，并且会把已收款退回。  </p><p>整个失误过程由事务管理器和参与者完成，店家老板就是事务管理器，张三、李四就是事务参与者，事务管理器负责决策整个分布式事务的提交和回滚，事务参与者负责自己本地事务的提交和回滚。  </p><p>在计算机中部分关系数据库如Oracle、MySQL支持两阶段提交协议，如下图：  </p><p>（1）准备阶段（Prepare phase）：事务管理器给每个参与者发送Prepare消息，每个数据库参与者在本地执行事务，并写本地的Undo/Redo日志，此时事务没有提交。  </p><p>（Undo日志是记录修改前的数据，用于数据库回滚；Redo日志是记录修改后的数据，用于提交事务后写入数据库文件）  </p><p>（2）提交阶段（Commit phase）：如果事务管理器受到了参与者的执行失败或者超时消息时，直接给每个参与者发送回滚（Rollback）消息；否则，发送提交（Commit）消息；参与者根据事务管理器的指令执行提交或者回滚操作，并释放事务处理过程中使用的锁资源。注意：必须在最后阶段释放锁资源。  </p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="XA方案"><a href="#XA方案" class="headerlink" title="XA方案"></a>XA方案</h4><p>2PC的传统方案是在数据库层面实现的。  </p><p>如Oracle、MySQL都支持2PC协议，为了统一标准减少行业内不比要的对接成本，需要制定标准化的处理模型以及接口标准，国际开发标准组织Open Group定义了分布式事务处理模型DTP（Distributed Transaction Processing Reference Model）。  </p><p>这套模型就是为了规范数据库支持2PC协议的整个实现的过程。  </p><p>为了更明确XA方案的内容，下面<strong>新用户注册送积分</strong>为例来说明：  </p><p>执行流程如下：  </p><p>（1）应用程序（AP）持有用户库和积分库两个数据源。<br>（2）准备阶段：应用程序（AP）通过TM通知用户库RM（Resource Manager）新增用户，同时通知积分库RM为该用户新增积分，RM此时并未提交事务，此时用户和积分资源锁定。<br>（3）TM（事务管理器Transaction Manager）收到执行回复，只要有一方失败则分别向其他RM发起回滚事务，回滚完毕，资源锁释放。<br>（4）TM收到执行回复，全部成功，此时向所有RM发起提交事务，提交完毕，资源锁释放。  </p><p>DTP模型定义如下角色：  </p><ul><li><strong>AP</strong>（Application Program）：即应用程序，可以理解为使用DTP分布式事务的程序。  </li><li><strong>RM</strong>（Resource Manager）：即资源管理器，可以理解为事务的参与者，一般情况下是指一个数据库实例，通过资源管理器对该数据库进行控制，资源管理器控制着分支事务。  </li><li><strong>TM</strong>（Transaction Manager）：事务管理器，负责协调和管理事务，事务管理器控制着全局事务，管理事务生命周期，并协调各个RM。<strong>全局事务</strong>是指分布式事务处理环境中，需要操作多个数据库共同完成一个工作，这个工作即是一个全局事务。  </li><li>DTP模型定义TM和RM之间通讯的接口规范叫<strong>XA</strong>，简单理解为数据库提供的2PC接口协议，<strong>基于数据库的XA协议来实现2PC又称为XA方案</strong>。</li><li>以上三个角色之间的交互方式如下：<br>（1）TM向AP提供应用程序编程接口，AP通过TM提交以及回滚事务。<br>（2）TM消息中间件通过XA接口来通知RM数据库事务的开始、结束以及提交、回滚等。  </li></ul><p>总结：  </p><p>整个2PC的事务流程涉及到三个流程AP、RM、TM。<br>AP指的是2PC分布式事务的应用程序；<br>RM指的是资源管理器；它控制着分支事务；<br>TM指的是事务管理器，它控制着整个全局事务；  </p><p>（1）在<strong>准备阶段</strong>RM执行实际的业务操作，但是不提交事务，自愿锁定；<br>（2）在<strong>提交阶段</strong>TM会接受RM在准备阶段的执行回复，只要有任意一个RM执行失败，TM会通知所有RM执行回滚操作；否则，TM将会通知所有的RM提交该事务，提交阶段结束资源释放锁；  </p><p>XA方案的问题：<br>（1）需要本地数据库支持XA协议。<br>（2）资源锁需要等到两个阶段结束才释放，性能较差。  </p><h4 id="Seata方案"><a href="#Seata方案" class="headerlink" title="Seata方案"></a>Seata方案</h4><p>Seata是由阿里中间件团队发起的开源项目Fescar，后更名为Seata，它是一个开源的分布式事务框架。  </p><p>传统2PC的问题在Seata中得到了解决，它通过对本地关系数据库的分支事务的协调来驱动完成全局事务，是工作在应用层的中间件。  </p><p>（Seata不要求关系数据库是否遵从2PC协议）  </p><p>主要优点是性能较好，且不长时间占用连接资源，它以高效并且对业务零侵入的方式解决微服务场景下面临的分布式事务问题，他目前提供AT模式（即2PC）以及TCC模式的分布式事务解决方案。  </p><p><strong>Seata的设计思想如下：</strong>  </p><p>Seata的设计目标其一是对业务目标无侵入，因此从业务无侵入的2PC方案着手，在<strong>传统2PC</strong>的基础上演进，并解决2PC方案面临的问题。  </p><p>Seata把一个分布式事务理解成一个包含了若干<strong>分支事务</strong>的<strong>全局事务</strong>。  </p><p>全局事务的职责是协调其下管辖的分支事务达成一致，要么一起成功，要么一起失败回滚。  </p><p>此外，通常分支事务本身就是一个关系数据库的本地事务，下图是全局事务与分支事务的关系图：  </p><p>与传统的2PC的模型类似，Seata定义了3个组件来协议分布式事务的处理过程：  </p><ul><li>Transaction Coordinator（TC）：事务协调器，它是独立的中间件，需要独立部署运行，它维护全局事务的运行状态，接受TM指令发起全局事务的提交与回滚，负责与RM通信协调各个分支事务的提交或者回滚。  </li><li>Transaction Manager（TM）：事务管理器，TM需要嵌入应用程序中工作，它负责开启一个全局事务，并最终向TC发起全局提交护着全局回滚的指令。  </li><li>Resource Manager（RM）：控制分支事务，负责分支注册、状态汇报，并接收事务协调器TC的指令，驱动分支（本地）事务的提交和回滚。  </li></ul><p>还拿<strong>新用户注册送积分</strong>举例Seata的分布式事务过程：  </p><p>具体的执行流程如下：  </p><p>（1）用户服务的TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID；<br>（2）用户服务的RM向TC注册分支事务，该分支事务在用户服务执行新增用户逻辑（该事务提交，即第一个阶段当中就提交了事务），并将其纳入XID对应全局事务的管辖。<br>（3）用户服务执行分支事务，向用户表插入一条记录。<br>（4）逻辑执行到远程调用 积分服务 时（XID在微服务调用链路的上下文中传播）。积分服务的RM向TC注册分支事务，该分支事务执行增加积分的逻辑，并将其纳入到XID对应全局事务的管辖。<br>（5）积分服务执行分支事务，向积分记录表插入一条记录，执行完毕后（完成分支事务，即已经提交分支事务，释放锁），返回用户服务。（如当其他的分支事务后期没有成功，导致需要回滚，即将向积分记录表当中插入的该条记录进行删除即可）<br>（6）用户服务分支事务执行完毕。<br>（7）TM向TC发起针对XID的全局提交或者回滚决议。<br>（8）TC调度XID下管辖的全部分支事务完成提交或者回滚请求。  </p><p><strong>Seata实现2PC与传统2PC的差别：</strong>  </p><p>架构层次方面，<strong>传统2PC</strong> 方案的RM实际上就是在数据库底层，RM本质上就是数据库自身，通过XA协议实现，而Seata的RM是以jar包的形式作为中间件层部署在应用程序这一侧的。  </p><p>两阶段提交方面，<strong>传统2PC</strong> 无论第二阶段的决议是commit还是rollback，事务性资源的锁都要保持到Phase2完成才释放。  </p><p>而Seata的做法是在Phase1就将本地事务提交，这样就可以省去Phase2持锁的时间，整体提高效率。  </p><h3 id="Seata实现2PC事务"><a href="#Seata实现2PC事务" class="headerlink" title="Seata实现2PC事务"></a>Seata实现2PC事务</h3><h4 id="业务说明"><a href="#业务说明" class="headerlink" title="业务说明"></a>业务说明</h4><p>本示例通过Seata中间件实现分布式事务，模拟三个账户的转账交易过程。  </p><p>两个账户在两个个不同的银行（张三在bank1、李四在bank2），bank1和bank2是两个微服务。  </p><p>交易过程是：张三给李四转账指定金额。  </p><p>上述交易步骤，要么一起成功，要么一起失败，必须是一个整体性的事务。  </p><h4 id="本示例程序组成部分如下"><a href="#本示例程序组成部分如下" class="headerlink" title="本示例程序组成部分如下"></a>本示例程序组成部分如下</h4><p>数据库：MySQL-5.7.25（包括bank1和bank2两个数据库）<br>JDK：64位jdk1.8.0_201<br>微服务框架：spring-boot-2.1.3、spring-cloud-Greenwich.RELEASE<br>seata客户端（RM、TM）：spring-cloud-alibaba-seata-2.1.0.RELEASE<br>seata服务端（TC）：seata-server-0.7.1<br>微服务以及数据库的关系：<br>  dtx/dtx-seata-demo/seata-demo-bank1 银行1，操作张三账户，连接数据库1<br>  dtx/dtx-seata-demo/seata-demo-bank2 银行2，操作李四账户，连接数据库2<br>服务注册中心：dtx/discover-server  </p><p>本示例程序技术架构如下：  </p><p>交互流程如下:  </p><ol><li>请求bank1进行转账，传入转账金额。  </li><li>bank1减少转账金额，调用bank2，传入转账金额。  </li></ol><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><h4 id="启动TC事务协调器"><a href="#启动TC事务协调器" class="headerlink" title="启动TC事务协调器"></a>启动TC事务协调器</h4><p>（1）下载Seata服务器<br>（2）解压并启动  </p><p>运行模式（file，nacos，eureka，redis，zk，consul，etcd3，sofa；file模式，因为TC，Seata-server是事务协调器，记录各个分支事务的执行情况，所以数据以文本的方式写到了文件/本地的一个目录当中，还有数据库的方式就将写到数据库当中还支持其他方式）  </p><h4 id="discover-server"><a href="#discover-server" class="headerlink" title="discover-server"></a>discover-server</h4><h4 id="导入案例工程dtx-seata-demo"><a href="#导入案例工程dtx-seata-demo" class="headerlink" title="导入案例工程dtx-seata-demo"></a>导入案例工程dtx-seata-demo</h4><h4 id="启动TC事务协调器-1"><a href="#启动TC事务协调器-1" class="headerlink" title="启动TC事务协调器"></a>启动TC事务协调器</h4><h4 id="Seata执行流程"><a href="#Seata执行流程" class="headerlink" title="Seata执行流程"></a>Seata执行流程</h4><ol><li><p>正常提交流程  </p></li><li><p>回滚流程</p></li></ol><p>要点说明：  </p><ol><li>每个RM使用DataSourceProxy连接数据库，其目的是使用ConnectionProxy，使用数据源和数据连接代理的目的就是在第一阶段将undo_log和业务数据放在一个本地事务提交，这样就保存了只要有业务操作就一定有undo_log。  </li><li>在第一阶段undo_log中存放了数据修改前和修改后的数据，为事务回滚做好准备，所以第一阶段完成就已经将分支事务提交，也就释放了锁资源。  </li><li>TM开启全局事务开始，将XID全局事务id放在事务上下文中，通过feign调用也将XID传入下游分支事务，每个分支事务将自己的Branch ID分支事务与XID关联。</li><li>第二阶段全局事务提交，TC会通知各个分支参与者提交分支事务，在第一阶段就已经提交了分支事务，这里各个参与者只需要删除undo_log即可，并且可以异步执行，第二阶段很快就可以完成。</li><li>第二阶段全局事务回滚，TC会通知各个分之参与者回滚事务，通过XID与Branch ID找到相应的回滚日志，通过回滚日志生成反向的SQL并执行，以完成分支事务回滚到之前的状态，如果回滚失败则会重试回滚操作。</li></ol><h4 id="dtx-seata-demo-bank1"><a href="#dtx-seata-demo-bank1" class="headerlink" title="dtx-seata-demo-bank1"></a>dtx-seata-demo-bank1</h4><p>为什么要有注册中心；因为张三要调用李四的微服务，要进行转账，所以让微服务都注册到注册中心；实现远程的调用；这个注册中心用的是spring-cloud的seata；  </p><h4 id="dtx-seata-demo-bank2"><a href="#dtx-seata-demo-bank2" class="headerlink" title="dtx-seata-demo-bank2"></a>dtx-seata-demo-bank2</h4><h4 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h4><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本节讲解了传统2PC（基于数据库XA协议）和Seata实现2PC的两种2PC方案，由于Seata的零侵入并解决了传统2PC长期锁资源的问题，所以推荐采用Seata实现2PC。  </p><p>Seata实现2PC要点：  </p><ol><li>全局事务开始使用@GolobalTransaction标识；</li><li>每个本地事务方案仍然使用@Transactional标识；</li><li>每个数据都需要创建undo_log表，此表是Seata保证本地事务一致性的关键；  </li></ol><h2 id="分布式事务解决方案之TCC"><a href="#分布式事务解决方案之TCC" class="headerlink" title="分布式事务解决方案之TCC"></a>分布式事务解决方案之TCC</h2><h3 id="什么是TCC事务"><a href="#什么是TCC事务" class="headerlink" title="什么是TCC事务"></a>什么是TCC事务</h3><p>2PC：两阶段提交协议（一个是准备阶段一个是提交阶段）；有两种处理方式（一种是XA方案一种是阿里的Seata方案）；协议本身是一致的也就是都存在两个阶段；  </p><p>2PC和TCC都是用来执行控制分布式事务的；  </p><p>TCC是Try、Confirm、Cancel三个词语的缩写；  </p><p>TCC要求每个分支事务实现三个操作：预处理Try、确认Confirm、撤销Cancel。  </p><p>Try操作做业务检查以及资源预留，Confirm做业务确认操作，Cancel实现一个与Try相反的操作即回滚操作。  </p><p>TM首先发起所有的分支事务的Try操作，任何一个事务的Try操作执行失败，TM将会发起所有分支事务的Cancel操作；若Try操作全部成功，TM将会发起所有分支事务的Confirm操作，其中Confirm/Cancel操作若执行失败，TM会进行重试。  </p><p>TCC分为三个阶段：  </p><ol><li><strong>Try</strong>阶段是做业务检查（一致性）以及资源预留（隔离），此阶段仅是一个初步操作，它和后续的Confirm一起才能真正构成一个完整的业务逻辑。  </li><li><strong>Confirm</strong>阶段是做确认提交，Try阶段所有分支事务执行成功后开始执行Confirm。通常情况下，采用TCC则认为Confirm阶段是不会出错的。即：只要Try成功，Confirm一定成功。若Confirm阶段真的出错了，需要引入重试机制或者人工处理。  </li><li><strong>Cancel</strong>阶段是在业务执行错误需要回滚的状态下执行分支事务的业务徐晓，预留资源释放。通常情况下，采用TCC则认为Cancel阶段也是一定成功的。若Cancel阶段真的出错了，需要引入重试机制或者人工处理。  </li><li>TM事务管理器  </li></ol><p>TM事务管理器可以实现独立的服务，也可以让<strong>全局事务发起方</strong>充当TM的角色，TM独立出来是为了成为公用组件，是为了考虑系统结构和软件复用。  </p><p>TM在发起全局事务时生成全局事务记录，全局事务ID贯穿整个分布式事务调用链条。用来记录事务上下文，追踪和记录状态，由于Confirm和Cancel失败需要进行重试，因此需要实现为幂等，幂等性是指同一个操作无论请求多少次，其结果都相同。  </p><h3 id="TCC解决方案"><a href="#TCC解决方案" class="headerlink" title="TCC解决方案"></a>TCC解决方案</h3><p>转账是一种业务，注册送积分也是一种业务，抛开业务的话，其实TCC本身的技术协议是一致的，所以在市面上存在有很多的框架来处理TCC的事务。  </p><p>目前市面上的TCC框架众多比如下面这几种：  </p><table>  <thead>    <tr>      <th>框架名称</th>      <th>GitHub地址</th>      <th>star数量</th>    </tr>  </thead>  <tbody>    <tr>      <td>tcc-transaction(类似Seata也需要单独进行部署相关的seata server)</td>      <td>https://xxxxx</td>      <td>xxxxx</td>    </tr>    <tr>      <td>Hmily</td>      <td>https://xxxxx</td>      <td>xxxxx</td>    </tr>    <tr>      <td>ByteTCC</td>      <td>https://xxxxx</td>      <td>xxxxx</td>    </tr>    <tr>      <td>EasyTransaction</td>      <td>https://xxxxx</td>      <td>xxxxx</td>    </tr>  </tbody></table><p>上一节所讲的Seata也支持TCC，但是Seata的TCC模式对于Spring Cloud并没有提供支持。<br>目标是理解TCC原理以及事务协调运作的过程，因此更倾向于轻量级易于理解的框架，因此最终确定了Hmily。  </p><p>Hmily是一个功性能分布式事务TCC开源框架。  </p><p>基于Java语言来开发（JDK1.8），支持Dubbo、Spring Cloud等RPC框架进行分布式事务。（且支持版本较新）  </p><p>它目前支持一下特性:  </p><ul><li>支持嵌套事务（Nested transaction support）；</li><li>采用disruptor框架进行事务日志的异步读写，与RPC框架的性能毫无差别；</li><li>支持SpringBoot-starter项目启动，使用简单；  </li><li>RPC框架支持：dubbo、motan、springcloud</li><li>本地事务存储支持：redis、mongodb、zookeeper、file、mysql；</li><li>采用Aspect Aop切面思想与Spring无缝集成，天然支持集群。  </li><li>RPC事务恢复，超时异常恢复等；</li></ul><p>Hmily利用AOP对参与分布式事务的本地方法与远程方法进行拦截处理，通过多方拦截，事务参与者能透明的调用到另一方的Try、Confirm、Cancel方法；传递事务上下文；并记录事务日志；酌情进行补偿，重试等；  </p><p>Hmily不需要事务协调服务，但需要提供一个数据库（mysql/mongodb/zookeeper/redis/file）来进行日志存储。  </p><p>Hmily实现的TCC服务于普通的服务一样，只需要暴露一个接口，也就是它的Try业务。<br>Confirm/Cancel业务逻辑，只是因为全局事务提交/回滚的需要才提供的，因此Confirm/Cancel业务只需要被HmilyTCC事务框架发现即可，不需要被调用它的其他业务服务所感知。  </p><p><strong>TCC需要注意三种异常处理分别是空回滚、幂等、悬挂；</strong>  </p><p><strong>空回滚：</strong>  </p><p>在没有调用TCC资源Try方法的情况下，调用了二阶段的Cancel方法，Cancel方法需要识别出这是一个空回滚，然后直接返回成功；  </p><p>出现原因是：当一个分支事务所在服务宕机或者是网络异常，分支事务调用记录为失败；这个时候其实是没有执行Try阶段，当故障恢复后，分布式事务进行回滚则会调用二阶段的Cancel方法，从而形成空回滚。  </p><p>解决思路是关键就是要识别出这个空回滚。  </p><p>思路很简单就是需要知道一阶段是否执行，如果执行了，那么就是正常回滚；如果没有执行，那么就是空回滚；  </p><p>前面已经说过:TM在发起全局事务时生成全局事务记录，全局事务ID贯穿整个分布式事务调用链条。在额外增加一张分支事务记录表，其中有全局事务ID和分支事务ID，第一阶段Try方法里会插入一条记录，表示一阶段执行了。<br>Cancel接口里读取该记录，如果该记录存在，则正常回滚；如果该记录不存在，则是空回滚。  </p><p><strong>幂等：</strong>  </p><p>通过前面的介绍已经了解到，为了保证TCC二阶段提交重试机制不会引发数据不一致，要求TCC阶段Try、Confirm、Cancel接口保证幂等，这样不会重复使用或者释放资源。  </p><p>如果幂等控制没有做好，很有可能导致数据不一致等严重问题；  </p><p>解决思路在上述“分支事务记录”中增加执行状态，每次执行前都查询该状态。  </p><p><strong>悬挂：</strong>  </p><p>悬挂就是对一个分布式事务，其二阶段Cancel接口比Try接口先执行。  </p><p>出现原因是在RPC调用分支事务Try时，先注册分支事务，再调用RPC调用；  </p><p>如果此时RPC调用的网络发生拥堵，通常RPC调用是有超时时间的，RPC超时以后，TM就会通知RM回滚该分布式事务，可能回滚完成后，RPC请求才到达参与者真正执行，而一个Try方法预留的业务资源，只有该分布式事务才能使用，该分布式事务第一阶段预留的业务资源就再也没有人能够处理了。对于这种情况，称之为悬挂。即业务资源预留后没有办法继续处理。  </p><p>解决思路时候如果二阶段执行完成，那一阶段就不能再继续执行。<br>在执行一阶段事务时判断在全局事务下，“分支事务记录”表中是否已经有二阶段事务记录，如果有则不执行Try；  </p><p><strong>举例，场景为A转账30元给B，A和B账户在不同的服务。</strong><br><strong>方案一：</strong><br>账户A  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    检查余额是否够<span class="number">30</span>元；</span><br><span class="line">    扣减<span class="number">30</span>元；</span><br><span class="line">confirm：</span><br><span class="line">    空；</span><br><span class="line">cancel：</span><br><span class="line">    增加<span class="number">30</span>元；</span><br></pre></td></tr></table></figure><p>账户B  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    增加<span class="number">30</span>元</span><br><span class="line">confirm：</span><br><span class="line">    空</span><br><span class="line">cancel：</span><br><span class="line">    减少<span class="number">30</span>元</span><br></pre></td></tr></table></figure><p><strong>方案1说明：</strong>  </p><p>（1）账户A，这里的余额就是所谓的业务资源，按照前面提到的原则：<br>在第一阶段需要检查并预留业务资源；<br>因此，在扣钱TCC资源的Try接口里先检查A账户余额是否足够，如果足够则扣除30元。<br>Confirm接口表示正式提交，由于业务资源已经在Try接口里扣除掉了，那么在第二阶段的Confirm接口里可以什么都不用做。<br>Cancel接口的执行表示整个事务的回滚，账户A回滚则需要把Try接口里扣除掉的30元还给账户A。<br>（2）账户B，在第一阶段Try接口里实现给账户B加钱；<br>Cancel接口的执行表示整个事务的回滚；<br>账户B回滚则需要把Try接口里加的30元再减去；  </p><p><strong>方案1的问题分析：</strong>  </p><p>（1）如果账户A的try没有执行；在Cancel则就多加了30元（需要空回滚判断）；<br>（2）由于Try、Confirm、Cancel都是由单独的线程去调用，且会出现重复调用，所以都需要实现幂等（幂等）；<br>（3）账户B在try中增加了30元，当Try执行完成后可能会被其他线程给消费了；<br>（4）如果账户B的Try没有执行在Cancel则就多减了30元（需要空回滚判断）；  </p><p><strong>问题解决：</strong>  </p><p>（1）账户A的Cancel方法需要判断Try方法是否执行，正常执行Try后方可执行Cancel；避免空回滚的发生；<br>（2）Try、Cancel、Confirm方法都需要进行实现幂等；<br>（3）账户B在Try中不允许更新账户金额，在Confirm中更新账户金额；以免提前新增的30元被其他的业务逻辑给消费掉；<br>（4）账户B的Cancel方法需要判断Try方法是否执行，正常执行Try后方可执行Cancel；  </p><p><strong>优化方案：</strong>  </p><p>账户A  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">try</span>幂等校验</span><br><span class="line">    <span class="keyword">try</span>悬挂处理（即Confirm/Cancel二阶段当中有一个执行了，那么Try阶段则不进行执行）</span><br><span class="line">    检查余额是否够<span class="number">30</span>元</span><br><span class="line">    扣减<span class="number">30</span>元</span><br><span class="line">confirm:</span><br><span class="line">    空</span><br><span class="line">cancel:</span><br><span class="line">    cancel幂等校验</span><br><span class="line">    cancel空回滚处理（如果Try没有执行，那么Cancel就不进行执行）</span><br><span class="line">    增加可用余额<span class="number">30</span>元</span><br></pre></td></tr></table></figure><p>账户B  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    空</span><br><span class="line"><span class="keyword">confirm</span>:</span><br><span class="line">    <span class="keyword">confirm</span>幂等校验</span><br><span class="line">    正式增加<span class="number">30</span>元</span><br><span class="line">cancel：</span><br><span class="line">    空</span><br></pre></td></tr></table></figure><h3 id="Hmily实现TCC事务"><a href="#Hmily实现TCC事务" class="headerlink" title="Hmily实现TCC事务"></a>Hmily实现TCC事务</h3><h4 id="业务说明-1"><a href="#业务说明-1" class="headerlink" title="业务说明"></a>业务说明</h4><p>本实例通过Hmily实现TCC分布式事务，模拟两个账户的转账交易过程。  </p><p>两个账户分别在不同的银行（张三在bank1、李四在bank2），bank1、bank2是两个微服务。<br>交易过程是：张三给李四转账指定金额；<br>上述交易步骤，要么一起成功，要么一起失败，必须是一个整体性的事务；  </p><h4 id="程序组成部分"><a href="#程序组成部分" class="headerlink" title="程序组成部分"></a>程序组成部分</h4><p>数据库：MySQL-5.7.25（包括bank1和bank2两个数据库）<br>JDK：64位jdk1.8.0_201<br>微服务框架：spring-boot-2.1.3、spring-cloud-Greenwich.RELEASE<br>Hmily：hmily-springcloud.2.0.4-RELEASE<br>seata客户端（RM、TM）：spring-cloud-alibaba-seata-2.1.0.RELEASE<br>seata服务端（TC）：seata-server-0.7.1<br>微服务以及数据库的关系：<br>  dtx/dtx-seata-demo/seata-demo-bank1 银行1，操作张三账户，连接数据库1<br>  dtx/dtx-seata-demo/seata-demo-bank2 银行2，操作李四账户，连接数据库2<br>服务注册中心：dtx/discover-server  </p><h4 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>创建hmily数据库，用于存储hmily框架记录的数据；  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="string">'hmily'</span> <span class="built_in">character</span> <span class="keyword">set</span> <span class="string">'utf8'</span> <span class="keyword">collate</span> <span class="string">'utf8_general_ci'</span>;</span><br></pre></td></tr></table></figure><h4 id="discover-server-1"><a href="#discover-server-1" class="headerlink" title="discover-server"></a>discover-server</h4><h4 id="导入案例工程dtx-tcc-demo"><a href="#导入案例工程dtx-tcc-demo" class="headerlink" title="导入案例工程dtx-tcc-demo"></a>导入案例工程dtx-tcc-demo</h4><h4 id="dtx-tcc-demo-bank1"><a href="#dtx-tcc-demo-bank1" class="headerlink" title="dtx-tcc-demo-bank1"></a>dtx-tcc-demo-bank1</h4><h4 id="dtx-tcc-demo-bank2"><a href="#dtx-tcc-demo-bank2" class="headerlink" title="dtx-tcc-demo-bank2"></a>dtx-tcc-demo-bank2</h4><h4 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h4><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>如果拿TCC事务的处理流程与2PC两阶段提交做比较，2PC通常是在跨库的DB层面，而TCC则在应用层面的处理，需要通过业务逻辑来实现，这种分布式事务的实现的优势在于，可以让<strong>应用自己定义数据操作的粒度，使得降低锁冲突，提高吞吐量称为可能</strong>。  </p><p>而不足之处则在于对应用的侵入性非常强，业务逻辑处理的每个分支都需要实现try、confirm、cancel三个操作。<br>此外，其实实现难度也比较大，需要按照网络状态、系统故障等不同的失败原因实现不同的回滚策略。  </p><h2 id="分布式事务解决方案之可靠消息最终一致性"><a href="#分布式事务解决方案之可靠消息最终一致性" class="headerlink" title="分布式事务解决方案之可靠消息最终一致性"></a>分布式事务解决方案之可靠消息最终一致性</h2><h3 id="什么是可靠消息最终一致性事务"><a href="#什么是可靠消息最终一致性事务" class="headerlink" title="什么是可靠消息最终一致性事务"></a>什么是可靠消息最终一致性事务</h3><p>可靠消息最终一致性方案是指：当事务发起方执行完成本地事务后并发出一条消息，事务参与者（消息消费者）一定能够接收消息并处理事务成功；此方案强调的是只要消息发给事务参与方，最终事务要达到一致。  </p><p>此方案是利用消息中间件来完成。如下图：  </p><p>事务发起方（消息生产方）将消息发给消息中间件，事务参与方从消息中间件当中接收消息，事务发起方和消息中间件之间，事务参与方（消息消费方）和消息中间件之间都是通过网络通讯，由于网络通讯的不确定性会导致分布式事务问题。  </p><p>因此可靠消息最终一致性要解决一下几个问题：  </p><ol><li><strong>本地事务与消息发送的原子性问题</strong>  </li></ol><p>事务的发起方到事务的参与方，这个消息必须可靠；也就是张三必须将消息发送到李四；李四必须能够接受到这个消息；并且这个可靠消息最终一致性最终还要强调一点的是最终一致性；即张三在把这个钱扣掉之后，他会要保证这个消息一定会要发给李四，那么李四接收到这个消息之后就可以进行处理加钱的这个业务逻辑处理；在这过程当中如果李四加钱失败怎么办，张三能够回滚事务吗？不能回滚。所以这个叫做可靠消息最终一致性分成两部分进行解读；一部分是可靠消息；一部分是最终一致性；可靠消息是指消息从张三传给李四，从事务的发起方传给事务的参与方，这个过程需要是可靠的；那么最终一致性是：张三，即事务的发起方，执行完本地事务；并且张三一定保证消息发给李四；那最终李四就需要保证最终一致性即无论如何都要将钱加上；这也就是所说的可靠消息最终一致性；  </p><p>本地事务与消息发送的原子性问题即：事务发起方在本地事务执行成功后消息必须发出去，否则就丢弃消息。<br>即实现本地事务和消息发送的原子性，要么都成功，要么都失败；<br>本地事务与消息发送的原子性问题是实现可靠消息最终一致性方案的关键问题：  </p><p>先来尝试下这种操作，先发送消息，再操作数据库:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> <span class="keyword">transaction</span>:</span><br><span class="line">        //<span class="number">1.</span>发送MQ</span><br><span class="line">        //<span class="number">2.</span>数据库操作</span><br><span class="line"><span class="keyword">commit</span> <span class="keyword">transaction</span>;</span><br></pre></td></tr></table></figure><p>这种情况下无法保证数据库操作与发送消息的一致性，因为可能发送消息成功，数据库操作失败；  </p><p>你立马想到第二种方案，先进行数据库操作，再发送消息：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> <span class="keyword">transaction</span>:</span><br><span class="line">        //<span class="number">1.</span>数据库操作</span><br><span class="line">        //<span class="number">2.</span>发送MQ</span><br><span class="line"><span class="keyword">commit</span> <span class="keyword">transaction</span>;</span><br></pre></td></tr></table></figure><p>这种情况下貌似没有问题，如果发送MQ消息失败，就会抛出异常，导致数据库事务回滚。<br>但如果是超时异常，数据库回滚，但是MQ已经正常发送出去了，同样就会导致不一致。  </p><ol start="2"><li><strong>事务参与方接受消息的可靠性</strong></li></ol><p>事务参与方必须能够从消息队列接收到消息，如果接收消息失败可以重复接收消息。  </p><ol start="3"><li><strong>消息重复消费的问题</strong>  </li></ol><p>由于网络的存在，若某一个消费结点超时但是消费成功，此时消息中间件会重复投递此消息，就导致了消息的重复消费。<br>要解决消息重复消费的问题就要实现事务参与方的方法幂等性。  </p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>上节讨论了可靠消息最终一致性事务方案需要解决的问题，本节讨论具体的解决方案；  </p><h4 id="本地消息表方案"><a href="#本地消息表方案" class="headerlink" title="本地消息表方案"></a>本地消息表方案</h4><p>本地消息表这个方案最初是eBay提出的，此方案的核心是通过本地事务保证数据业务操作和消息的一致性，然后通过定时任务将消息发送至消息中间件，待确认消息发送给消费成功再将消息删除；  </p><p>下面以注册送积分为例来说明：  </p><p>下例共有两个微服务交互，用户服务和积分服务，用户服务负责添加用户，积分服务负责增加积分。  </p><p>交互流程如下:  </p><ol><li><strong>用户注册</strong>  </li></ol><p>用户服务在本地新增用户和增加“积分消息日志”。（用户表和消息表通过本地事务保证一致）  </p><p>下边是伪代码：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> <span class="keyword">transaction</span>;</span><br><span class="line">      //1.新增用户</span><br><span class="line">      //2.存储积分消息日志</span><br><span class="line"><span class="keyword">commit</span> <span class="keyword">transaction</span>;</span><br></pre></td></tr></table></figure><p>这种情况下，本地数据库操作与存储积分消息日志处于同一个事务中，本地数据库操作与记录消息日志操作具备原子性。  </p><ol start="2"><li><strong>定时任务扫描日志</strong>  </li></ol><p>如何保证将消息发送给消息队列？  </p><p>经过第一步消息已经写到消息日志表中，可以启动独立的线程，定时对消息日志表中的消息进行扫描并发送至消息中间件，在消息中间件反馈发送成功后删除该消息日志，否则等待定时任务下一周期重试。  </p><ol start="3"><li><strong>消费消息</strong>  </li></ol><p>如何保证消费者一定能消费到消息？  </p><p>这里可以使用MQ的Ack（即消息确认机制）机制，消费者监听MQ，如果消费者接收到消息并且业务处理完成后向MQ发送Ack（即消息确认），此时说明消费者正常消费消息完成，MQ将不再向消费者推送消息，否则消费者户不断重试向消费者来发送消息。  </p><p>积分服务接收到“增加积分”消息，开始增加积分，积分增加成功后向消息中间件回应Ack，否则消息中间件将重复投递此消息；  </p><p>由于消息会重复投递，积分服务的“增加积分”功能需要实现幂等性；  </p><h4 id="RocketMQ事务消息方案"><a href="#RocketMQ事务消息方案" class="headerlink" title="RocketMQ事务消息方案"></a>RocketMQ事务消息方案</h4><p>RocketMQ是一个来自阿里的分布式消息中间件。  </p><p>于2012年开源，并在2017年正式成为Apache顶级项目。  </p><p>据了解，包括阿里云上的消息产品以及收购的子公司在内，阿里集团的消息产品全线都运行在RocketMQ之上，并且最近几年的双十一大促中，RocketMQ都有抢眼表现。<br>Apache RocketMQ4.3之后的版本正式支持事务消息，为分布式事务实现提供了便利性支持。  </p><p>RocketMQ事务消息设计则主要是为了解决Producer端的消息发送与本地事务执行的原子性问题，RocketMQ的设计中broker与producer端的双向通信能力，使得broker天生可以作为一个事务协调者存在；<br>而RocketMQ本身提供的存储机制为事务消息提供了持久化能力；<br>RocketMQ的高可用机制以及可靠消息设计则为事务消息在系统发生异常时依然能够保证达成事务的最终一致性；<br>在RocketMQ4.3后实现了完整的事务消息，实际上其实是对本地消息表的一个封装，将本地消息表移动到MQ内部，解决Producer端的消息发送与本地事务执行的原子性问题。  </p><p>执行流程如下：  </p><p>为方便理解，还是以注册送积分这个例子来描述整个流程。  </p><p>Producer即MQ发送方，本例中是用户服务，负责新增用户；<br>MQ订阅方即消息消费方，本例中是积分服务，负责新增积分。  </p><ol><li>Producer发送事务消息。</li></ol><p>Producer（MQ发送方）发送事务消息至MQ Server，MQ Server将消息标记为Prepared（预备状态），注意此时这条消息消费者（MQ订阅方）是无法消费得到的。  </p><p>本例中，Producer发送“增加积分消息”到MQ Server。  </p><ol start="2"><li>MQ Server回应消息发送成功</li></ol><p>MQ Server接受到Producer发送的消息则回应发送成功表示MQ已经接收到消息。  </p><ol start="3"><li>Producer执行本地事务</li></ol><p>Producer端执行业务代码逻辑，通过本地数据库事务控制。<br>本例中，Producer执行添加用户操作。  </p><ol start="4"><li>消息投递</li></ol><p>若Producer本地事务执行成功，则自动向MQ Server发送commit消息；<br>MQ Server接收到commit消息后将“增加积分消息”状态标记为可消费，此时MQ订阅方（积分服务）即正常消费消息；<br>若Producer本地事务执行失败则自动向MQ Server发送rollback消息，MQ Server接收到rollback消息后将删除“增加积分消息”；  </p><p>MQ订阅方（积分服务）消费消息，消费成功则向MQ回应Ack；否则将重复接收消息，这里ack默认自动回应，即程序执行正常则自动回应ack。  </p><ol start="5"><li>事务回查</li></ol><p>如果执行Producer端本地事务过程中，执行端挂掉，或者超时，MQ Server将会不停的询问同组的其他Producer来获取事务执行状态，这个过程叫做<strong>事务回查</strong>，MQ Server会根据事务回查结果来决定是否投递消息。  </p><p>以上主干流程已经由RocketMQ实现，对于用户来说，用户需要分别实现本地事务执行以及本地事务回查方法，因此只需要关注本地事务的执行状态即可。  </p><p>RocketMQ提供的RocketMQLocalTransactionListener接口：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RocketMQLocalTransactionListener</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    发送prepare消息成功则此方法被调用，该方法用于执行本地事务</span></span><br><span class="line"><span class="comment">    <span class="doctag">@param</span> msg 回传的消息，利用transactionId即可获取到该消息的唯一id</span></span><br><span class="line"><span class="comment">    <span class="doctag">@param</span> arg 调用send方法时传递的参数，当send时候，若有额外的参数可以传递到send方法中，这里能获取到</span></span><br><span class="line"><span class="comment">    <span class="doctag">@return</span> 返回事务状态，COMMIT：提交  ROLLBACK：回滚 UNKNOW：回调</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    RocketMQLocalTransactionState executeLocalTransaction（Message msg，Object arg）;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    <span class="doctag">@param</span> msg 通过获取transactionId来判断这条消息的本地事务执行状态</span></span><br><span class="line"><span class="comment">    <span class="doctag">@return</span> 返回事务状态  COMMIT：提交  ROLLBACK：回滚 UNKNOW：回调</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  RocketMQLocalTransactionState checkLocalTransaction（Message msg）;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>发送事务消息</li></ul><p>以下是RocketMQ提供用于发送事务消息的API：  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TransactionMQProducer producer=<span class="keyword">new</span> <span class="constructor">TransactionMQProducer(<span class="string">"ProducerGroup"</span>)</span>;</span><br><span class="line">producer.set<span class="constructor">NamesAddr(<span class="string">"127.0.0.1:9876"</span>)</span>;</span><br><span class="line">producer.start<span class="literal">()</span>;</span><br><span class="line"><span class="comment">//设置TransactionListener实现</span></span><br><span class="line">producer.set<span class="constructor">TransactionListener(<span class="params">transactionListener</span>)</span>;</span><br><span class="line"><span class="comment">//发送事务消息</span></span><br><span class="line">SendResult sendResult=producer.send<span class="constructor">MessageTransaction(<span class="params">msg</span>,<span class="params">null</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="RocketMQ实现可靠消息最终一致性事务"><a href="#RocketMQ实现可靠消息最终一致性事务" class="headerlink" title="RocketMQ实现可靠消息最终一致性事务"></a>RocketMQ实现可靠消息最终一致性事务</h3><h4 id="业务说明-2"><a href="#业务说明-2" class="headerlink" title="业务说明"></a>业务说明</h4><p>本示例通过RocketMQ中间件实现可靠消息最终一致性分布式事务，模拟两个账户的转账交易过程。  </p><p>两个账户在分别不同的银行（张三在bank1、李四在bank2），bank1、bank2是两个微服务。<br>交易过程是：张三给李四转账指定金额。  </p><p>上述交易步骤，张三扣减金额与给bank2发转账消息，两个操作必须是一个整体性的事务（原子性）；  </p><h4 id="程序组成部分-1"><a href="#程序组成部分-1" class="headerlink" title="程序组成部分"></a>程序组成部分</h4><p>数据库：MySQL-5.7.25（包括bank1和bank2两个数据库）<br>JDK：64位jdk1.8.0_201<br>rocketmq 服务端: RocketMQ-4.5.0<br>rocketmq 客户端：RocketMQ-Spring-Boot-starter.2.0.2-RELEASE<br>微服务框架：spring-boot-2.1.3、spring-cloud-Greenwich.RELEASE<br>微服务以及数据库的关系：<br>  dtx/dtx-seata-demo/seata-demo-bank1 银行1，操作张三账户，连接数据库1<br>  dtx/dtx-seata-demo/seata-demo-bank2 银行2，操作李四账户，连接数据库2  </p><p>本示例程序技术架构如下：  </p><p>交互流程如下：<br>1、Bank1向MQ Server发送转账消息<br>2、Bank1执行本地事务，扣减金额<br>3、Bank2接受消息，执行本地事务，添加金额  </p><h4 id="创建数据库-2"><a href="#创建数据库-2" class="headerlink" title="创建数据库"></a>创建数据库</h4><h4 id="启动RocketMQ"><a href="#启动RocketMQ" class="headerlink" title="启动RocketMQ"></a>启动RocketMQ</h4><h4 id="导入dtx-txmsg-demo"><a href="#导入dtx-txmsg-demo" class="headerlink" title="导入dtx-txmsg-demo"></a>导入dtx-txmsg-demo</h4><h4 id="dtx-txmsg-demo-bank1"><a href="#dtx-txmsg-demo-bank1" class="headerlink" title="dtx-txmsg-demo-bank1"></a>dtx-txmsg-demo-bank1</h4><h4 id="dtx-txmsg-demo-bank2"><a href="#dtx-txmsg-demo-bank2" class="headerlink" title="dtx-txmsg-demo-bank2"></a>dtx-txmsg-demo-bank2</h4><h4 id="测试场景-1"><a href="#测试场景-1" class="headerlink" title="测试场景"></a>测试场景</h4><ul><li>bank1本地事务失败，则bank1不发送转账消息</li><li>bank2接收转账消息失败，会进行重试发送消息</li><li>bank2多次消费同一个消息，实现幂等</li></ul><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>可靠消息最终一致性就是保证消息从生产方经过消息中间件传递到消息方的一致性，本案例使用了RocketMQ作为消息中间件，RocketMQ主要解决了两个功能：  </p><p>1、本地事务与消息发送的原子性问题；<br>2、事务参与方接收消息的可靠性。  </p><p>可靠消息最终一致性事务适合执行周期长且实时性要求不高的场景。<br>引入消息机制后，同步的事务操作变为基于消息执行的异步操作，避免了分布式事务中的同步阻塞操作的影响，并实现了两个服务的解耦。  </p><h2 id="分布式解决方案之最大努力通知"><a href="#分布式解决方案之最大努力通知" class="headerlink" title="分布式解决方案之最大努力通知"></a>分布式解决方案之最大努力通知</h2><h3 id="什么是最大努力通知"><a href="#什么是最大努力通知" class="headerlink" title="什么是最大努力通知"></a>什么是最大努力通知</h3><p>最大努力通知也是一种解决分布式事务的方案，下边是一个充值的例子。  </p><p>交互流程：<br>1、账户系统调用充值系统接口；<br>2、充值系统完成支付处理向账户系统发起充值结果通知；若通知失败，则充值系统按照策略进行重复通知；<br>3、账户系统接收到充值结果通知修改充值状态；<br>4、账户系统未接收到通知会主动调用充值系统的接口查询充值结果。  </p><p>通过上边的例子，总结最大努力通知方案的目标：  </p><p>目标：发起通知方通过一定的机制最大努力将业务处理结果通知到接收方；  </p><p>具体包括：<br>1、有一定的消息重复通知机制；<br>  因为接受通知方可能没有接收到通知，此时要有一定的机制对消息重复通知；<br>2、消息校对机制<br>  如果是最大努力也没有通知到接收方，或者接收方消费消息后要再次消费，此时可由接收方主动向通知方查询信息来满足需求。  </p><p>这个跟我们信666当中的交易模块很相似，也是进行查询交易结果的时候，如果在一定的查询次数下没有查找得到结果即一分钟查询多少次等，那么就更改成2分钟查询多少次；两分钟查询后仍然没有结果就再次换成3分钟查询多少次；这个一分钟两分钟三分钟，是间隔，间隔时间；因为交易量大的缘故，所以也是为了减轻下服务器压力；是的有些是异步主动去通知下游系统，就是接入第三方支付的时候，上游渠道可能会需要你提供一个异步回调的一个接口，那么这个接口用于交易结果通知或者其他的绑卡结果通知等这种，你可以提供一个接口，当然了也可以提供一个假的接口，就是系统中不存在此接口也行；当然了如果不存在该接口的话，那么就需要去使用系统当中的查询机制，即主动去查询上游渠道系统当中该笔交易的交易结果。在第三方这种支付方面就大概使用了最大努力通知的方式实现分布式事务方案。很多的第三方支付会去提供这个订单/交易结果查询的这样一个接口；而我们自己对接下游就比较缺德了，就每次我们向上游查询完交易结果之后，在处理完业务逻辑后，我们就通过try catch住，http直接发送一次交易结果给上送了回调地址接口的下游；没有上送回调接口就让他们自己来查询，上送了的话我们就回调一次；就这样。  </p><p>最大努力通知与可靠消息一致性有什么不同？  </p><p>1、解决方案思想不同  </p><p>  可靠消息一致性，发起通知方需要保证将消息发送出去，并且将消息发到接收通知方，消息的可靠性关键由发起通知方来保证。  </p><p>  最大努力通知，发起通知方尽最大的努力将业务处理结果通知给接收通知方，但是可能消息接收不到，此时需要接收通知方主动调用发起通知方的接口查询业务处理结果，通知的可靠性在于接收通知方。  </p><p>2、两者的业务应用场景不同  </p><p>  可靠消息一致性关注的是交易过程的事务一致，以异步的方式完成交易。  </p><p>  最大努力通知关注的是交易后的通知事务，即将交易结果可靠的通知出去。  </p><p>3、技术解决方向不同  </p><p>  可靠消息一致性要解决消息从发出到接收的一致性，即消息发出并且被接收到。  </p><p>  最大努力通知无法保证消息从发出到接收的一致性，只提供消息接收的可靠性机制，可靠机制是，最大努力的将消息通知给接收方，当消息无法被接收方接收时，由接收方主动查询消息（业务处理结果）；  </p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><p>通过对最大努力通知的理解，采用MQ的ack机制就可以实现最大努力通知；  </p><p>方案一：  </p><p>本方案是利用MQ的ack机制由MQ向接收通知方发送通知，流程如下：  </p><ol><li>发起通知方将通知发给MQ；  </li></ol><p>使用普通消息机制将通知发给MQ；  </p><p>注意:如果消息没有发出去可由接收通知方主动请求发起通知方查询业务执行结果。  </p><ol start="2"><li><p>接收通知方监听MQ；</p></li><li><p>接收通知方接收消息，业务处理完成回应Ack；  </p></li><li><p>接收通知方若没有会用ack则MQ会重复通知；  </p></li></ol><p>MQ会<strong>按照间隔1min、5min、10min、30min、1h、2h、5h、10h的方式，逐步拉大通知间隔</strong>（如果MQ采用RocketMQ，在broker中可以进行配置），直到达到通知要求的时间窗口上限。  </p><ol start="5"><li>接收通知方可通过消息校对接口来校对消息的一致性。  </li></ol><p>方案二：  </p><p>本方案也是利用MQ的Ack机制，与方案一不同的是应用程序向接收通知方发送通知，如下图：  </p><p>交互流程如下:  </p><ol><li><p>发起通知方将通知发给MQ；</p><p>使用可靠消息一致方案中的事务消息保证本地事务与消息的原子性，最终将通知先发给MQ。  </p></li><li><p>通知程序监听MQ，接收MQ的消息；  </p><p>方案1中接收通知方直接监听MQ，方案2中由通知程序监听MQ；  </p><p>通知程序若没有回应Ack则MQ会重复通知；  </p></li><li><p>通知程序通过互联网接口协议（如http、webservice）调用接受通知方案接口，完成通知。  </p><p>通知程序调用接受通知方案接口成功就表示通知成功，即MQ消费成功，MQ将不再向通知程序投递通知消息。  </p></li><li><p>接受通知方可通过消息校对接口来校对消息的一致性。  </p></li></ol><p>方案1和方案2的不同点：  </p><p>（1）方案1中接收通知方与MQ接口，即接收通知方监听MQ，次方案主要应用与内部应用之间的通知；<br>（2）方案2中由通知程序与MQ接口，通知程序监听MQ，收到MQ的消息后，由通知程序通过互联网接口协议调用接收通知方。此方案主要应用于外部应用之间的通知，例如支付宝、微信的支付结果通知。  </p><p>方案一针对内部系统；方案二针对外部系统；  </p><h3 id="RocketMQ实现最大努力通知型事务"><a href="#RocketMQ实现最大努力通知型事务" class="headerlink" title="RocketMQ实现最大努力通知型事务"></a>RocketMQ实现最大努力通知型事务</h3><h4 id="业务说明-3"><a href="#业务说明-3" class="headerlink" title="业务说明"></a>业务说明</h4><p>本示例通过RocketMQ中间件实现最大努力通知型分布式事务，模拟充值过程。  </p><p>本案例有账户系统和充值系统两个微服务，其中账户系统的数据库是bank1数据库，其中有张三账户。<br>充值系统的数据库使用bank1_pay数据库，记录了账户的充值记录。  </p><p>业务流程如下图：  </p><p>交互流程如下：  </p><ol><li>用户请求充值系统进行充值；  </li><li>充值系统完成充值将充值结果发送给MQ。</li><li>账户系统监听MQ，接收充值结果通知，如果接收不到消息，MQ会重复发送通知。接收到充值结果通知账户系统增加充值金额。  </li><li>账户系统也可以主动查询充值系统的充值查询接口，增加金额。  </li></ol><h4 id="程序组成部分-2"><a href="#程序组成部分-2" class="headerlink" title="程序组成部分"></a>程序组成部分</h4><p>数据库：MySQL-5.7.25（包括bank1和bank1_pay两个数据库）<br>JDK：64位jdk1.8.0_201<br>rocketmq 服务端: RocketMQ-4.5.0<br>rocketmq 客户端：RocketMQ-Spring-Boot-starter.2.0.2-RELEASE<br>微服务框架：spring-boot-2.1.3、spring-cloud-Greenwich.RELEASE<br>微服务以及数据库的关系：<br>  dtx/dtx-notifymsg-demo/dtx-notifymsg-demo-bank1 银行1，操作张三账户，连接数据库bank1<br>  dtx/dtx-notifymsg-demo/dtx-notifymsg-demo-pay 银行2，操作李四账户，连接数据库bank1_pay  </p><p>交互流程如下：  </p><p>1、用户请求充值系统进行充值；<br>2、充值系统完成充值将充值结果发给MQ；<br>3、账户系统监听MQ，接收充值结果通知，如果接收不到消息，MQ会重复发送通知。接收到充值结果通知账户系统增加充值金额。<br>4、账户系统也可以主动查询传给你藕汁系统的充值结果查询接口，增加金额。  </p><h4 id="创建数据库-3"><a href="#创建数据库-3" class="headerlink" title="创建数据库"></a>创建数据库</h4><h4 id="启动RocketMQ-1"><a href="#启动RocketMQ-1" class="headerlink" title="启动RocketMQ"></a>启动RocketMQ</h4><h4 id="导入dtx-notifymsg-demo"><a href="#导入dtx-notifymsg-demo" class="headerlink" title="导入dtx-notifymsg-demo"></a>导入dtx-notifymsg-demo</h4><h4 id="dtx-notifydemo-pay"><a href="#dtx-notifydemo-pay" class="headerlink" title="dtx-notifydemo-pay"></a>dtx-notifydemo-pay</h4><h4 id="dtx-notifydemo-bank1"><a href="#dtx-notifydemo-bank1" class="headerlink" title="dtx-notifydemo-bank1"></a>dtx-notifydemo-bank1</h4><h4 id="测试场景-2"><a href="#测试场景-2" class="headerlink" title="测试场景"></a>测试场景</h4><ul><li>充值系统充值成功，账户系统主动查询充值结果，修改中户金额</li><li>充值系统充值成功，发送消息，账户系统接收消息，修改账户金额。</li><li>账户系统修改账户金额幂等测试。</li></ul><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>最大努力通知方案是分布式中对已执行要求最低的一种，适用于一些最终一致性时间敏感度低的业务；<br>最大努力通知方案需要实现如下功能：  </p><ol><li>消息重复通知机制</li><li>消息校对机制</li></ol><h2 id="分布式事务综合案例"><a href="#分布式事务综合案例" class="headerlink" title="分布式事务综合案例"></a>分布式事务综合案例</h2><p>前边已经学习了四种分布式事务解决方案，2PC，TCC，可靠消息最终一致性，最大努力通知，每种解决方案通过案例开发进行学习，本章节结合互联网金融项目中的业务场景，来进行分布式事务解决方案可行性分析。  </p><h3 id="系统介绍"><a href="#系统介绍" class="headerlink" title="系统介绍"></a>系统介绍</h3><h4 id="P2P介绍"><a href="#P2P介绍" class="headerlink" title="P2P介绍"></a>P2P介绍</h4><p>P2P金融又叫P2P信贷，其中P2P是peer-to-peer或者person-to-person的缩写，意思是：个人对个人。  </p><p>P2P金融指的是个人与个人之间的小额借贷交易，一般需要借助电子商务专业网络平台帮助借贷双方确立借贷关系并完成相关交易手续。  </p><p>借款者可以自行发布借款消息，包括金额、利息、还款方式和时间，实现自助式借款；<br>投资者根据借款人发布的消息，自行决定出借金额，实现自助式借贷。  </p><p>目前，国家对P2P行业的监控与规范性控制越来越严格，出台了很多政策来对其专项整治。<br>并主张采用“银行存管模式”来规避P2P平台挪用借投人资金的风险，通过银行开发的“银行存管系统”管理投资者的资金，<strong>每位P2P平台用户在银行的存管系统内都会有一个独立账号，</strong>平台来管理交易，做到资金和交易分开，让P2P平台不能接触到资金，就可以一定程度上避免资金被挪用的风险。  </p><p>什么是银行存管模式？  </p><p>银行存管模式涉及到2套账户体系，P2P平台和银行各有一套账户体系。<br>投资人在P2P平台注册后，会同时跳转到银行再开一个电子账户，2个账户之间有一一对应的关系。<br>当投资人投资时，资金进入的是平台在银行为投资人开设的二级账户当中，每一笔交易，是银行在投资人与借款人之间的交易划转，P2P平台仅能看到信息的流动。  </p><h4 id="总体业务流程"><a href="#总体业务流程" class="headerlink" title="总体业务流程"></a>总体业务流程</h4><h4 id="业务术语"><a href="#业务术语" class="headerlink" title="业务术语"></a>业务术语</h4><table>  <thead>    <tr>      <th>术语</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>银行存管模式</td>      <td>此种模式下，涉及到2套账户体系，P2P平台和银行各有一套账户体系。投资人在P2P平台注册后会同时跳转到银行再开一个电子账户，2个账户之间有一个一一对应的关系。当投资人投资时，资金进入的是平台在银行为投资人开设的二进账户中，每一笔交易，是由银行在投资人与借款人之间的交易划转，P2P平台仅能看到信息的流动。</td>    </tr>    <tr>      <td>标的</td>      <td>P2P业内，习惯把借款人的投资项目称之为“标的”</td>    </tr>    <tr>      <td>发标</td>      <td>借款人在P2P平台中创建并发布“标的”过程</td>    </tr>    <tr>      <td>投标</td>      <td>投资人在认可相关借款人之后进行的一种借贷行为，对自己中意的借款标的进行投资操作，一个借款标可由单个投资人或多个投资人承接。</td>    </tr>    <tr>      <td>满标</td>      <td>单笔借款标筹集齐所有借款资金即为满标，计息时间是以标满当日开始计息，投资人较多的平台多数会当天满标。</td>    </tr>  </tbody></table><h4 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h4><ul><li><p><strong>统一账号服务</strong>  </p><p>用户的登录账户、密码、角色、权限、资源等系统级信息的管理，不包含用户业务信息。  </p></li><li><p><strong>用户中心</strong>  </p><p>提供用户业务信息的管理，如会员信息、实名认证信息、绑定银行卡信息等，“用户中心”的每个用户与“<strong>统一账号服务</strong>”中的账号关联。  </p></li><li><p><strong>交易中心</strong>  </p><p>提供发标、投标等业务。  </p></li><li><p><strong>还款业务</strong>  </p><p>提供还款计划的生成、执行、记录与归档。  </p></li><li><p><strong>银行存管系统（模拟）</strong>  </p><p>  模拟银行存管系统，进行资金的存管，划转。  </p></li></ul><h3 id="注册账号案例分析"><a href="#注册账号案例分析" class="headerlink" title="注册账号案例分析"></a>注册账号案例分析</h3><h4 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h4><p>  采用用户、账号分离设计（这样设计的好处是：当用户的业务信息发生变化时，不会影响的认证、授权等系统机制），因此需要保证用户信息与账号信息的一致性。  </p><p>  用户向用户中心发起注册请求，用户中心保存用户业务信息，然后通知统一账号服务新建该用户所对应登录账号。  </p><h4 id="解决方案分析"><a href="#解决方案分析" class="headerlink" title="解决方案分析"></a>解决方案分析</h4><p>  针对注册业务，如果用户与账户信息不一致，则会导致严重问题，因此该业务对一致性要求较为严格，即当用户服务和账号服务任意一方出现问题都需要回滚事务。  </p><p>  根据上述需求进行解决方案分析：  </p><ol><li><p>采用可靠消息一致性方案  </p><p> 可靠消息一致性要求只要消息发出，事务参与者接到消息就要将事务执行成功，不存在回滚的要求，所以不适用。  </p></li><li><p>最大努力通知方案</p><p> 最大努力通知表示发起通知方执行完本地事务后将结果通知给事务参与者，即使事务参与者执行业务处理失败发起通知方也不会回滚事务，所以不适用。  </p></li><li><p>采用Seata实现2PC  </p><p> 在用户中心发起去全局事务，统一账户服务为事务参与者，用户中心和统一账户服务只要由一方出现问题则全局事务回滚，符合要求。  </p><p> 实现方法如下：  </p><ol><li>用户中心添加用户信息，开启全局事务；  </li><li>统一账号服务添加账号信息，作为事务参与者；  </li><li>其中一方执行失败Seata对SQL进行逆操作删除用户信息和账号信息，实现回滚。  </li></ol><ol start="4"><li><p>采用Hmily实现TCC</p><p>TCC也可以实现用户中心和统一账户服务只要有一方出现问题则全局事务回滚，符合要求。  </p><p>实现方法如下：  </p><ol><li><p>用户中心  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>：</span><br><span class="line">    添加用户，状态为不可用</span><br><span class="line"><span class="keyword">confirm</span>：</span><br><span class="line">    更新用户状态为可用</span><br><span class="line">cance<span class="variable">l:</span></span><br><span class="line">    删除用户</span><br></pre></td></tr></table></figure></li><li><p>统一账号服务</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">try:</span></span><br><span class="line">    添加账号，状态为不可用</span><br><span class="line"><span class="symbol">confirm:</span></span><br><span class="line">    更新账号状态为可用</span><br><span class="line"><span class="symbol">cancel:</span></span><br><span class="line">    删除账号</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h3 id="存管开户"><a href="#存管开户" class="headerlink" title="存管开户"></a>存管开户</h3><h4 id="业务流程-1"><a href="#业务流程-1" class="headerlink" title="业务流程"></a>业务流程</h4><p>根据政策要求，P2P业务必须让银行存管资金，用户的资金在银行存管系统的账户中，而不在P2P平台中，因此用户要在银行存管系统开户。  </p><p>用户向用户中心提交开户资料，用户中心生成开户请求号并重定向至银行存管系统开户页面。<br>用户设置存管密码并确认开户后，银行存管立即返回“请求已受理”。<br>在某一时刻，银行存管系统处理完该开户请求后，将调用毁掉地址通知处理结果，若通知失败，则按照一定策略重试通知。<br>同时，以你航存管系统应提供<strong>开户结果查询的接口</strong>，以供用户中心校对结果。  </p><h4 id="解决方案分析-1"><a href="#解决方案分析-1" class="headerlink" title="解决方案分析"></a>解决方案分析</h4><p>P2P平台的用户中心与银行存管系统之间属于跨系统交互，银行存管系统属于外部系统；用户中心无法干预银行存管系统；<br>所以用户中心只能在收到银行存管系统的业务处理结果通知后积极处理，开户后的使用情况完全由用户中心来控制。<br>根据上述需求来进行解决方案分析：  </p><ol><li><p>采用Seata实现2PC</p><p>需要侵入银行存管系统的数据库，由于它是外部系统，所以不适用。  </p></li><li><p>采用Hmily实现TCC</p><p>TCC侵入性更强，所以不适用；  </p></li><li><p>基于MQ的可靠消息一致性</p><p>如果让银行存管系统监听MQ则不合适，因为它是外部系统。  </p><p>如果银行存管系统将消息发给MQ用户中心监听MQ是可以的；<br>但是由于相对银行存管系统来说用户中心属于外部系统，银行存管系统是不会让外部系统直接监听自己的MQ的，基于MQ的通信协议也不方便外部系统间的交互，所以本方案不合适。  </p></li><li><p>最大努力通知方案</p><p> 银行存管系统内部使用MQ，银行存管系统处理完业务后将处理结果发给MQ。<br> 由银行存管系统的通知程序专门发送通知方</p></li></ol><h3 id="满标审核"><a href="#满标审核" class="headerlink" title="满标审核"></a>满标审核</h3><h4 id="业务流程-2"><a href="#业务流程-2" class="headerlink" title="业务流程"></a>业务流程</h4><p>在借款人标的募集所有的资金后，P2P运营管理员审批该标的，触发放款，并开启还款流程。<br>管理员对某标的满标审批通过，交易中心修改标的状态为“还款中”，同时还要通知还款服务生成还款计划。  </p><h4 id="解决方案分析-2"><a href="#解决方案分析-2" class="headerlink" title="解决方案分析"></a>解决方案分析</h4><p>生成还款计划是一个执行时长较长的业务，不建议阻塞主业务流程，此业务对一致性要求较低。<br>根据上述需求进行解决方案分析：  </p><ol><li><p>采用Seata实现2PC</p><p>Seata在食物执行过程中或进行数据库资源锁定，由于事务执行时长较长会将资源锁定较长时间，所以不适用。  </p></li><li><p>采用Hmily实现TCC</p><p>本需求对业务一致性要求较低，因为生成还款计划的时长较长，所以不要求交易中心修改标的状态为“还款中”就立即生成还款计划，所以本方案不适用；  </p></li><li><p>基于MQ的可靠消息一致性</p><p>满标审批通过后，由交易中心修改标的状态为“还款中”并且向还款服务发送消息，还款服务接收到消息开始生成还款计划，基本与MQ的可靠消息一致性方案适用此场景。  </p></li><li><p>最大努力通知方案</p><p>满标审批通过后，由交易中心向还款服务发送通知要求生成还款计划，还款服务并且对外提供还款计划生成结果校对接口供其他服务查询，最大努力通知方案也适用本场景。  </p></li></ol><h2 id="课程总结"><a href="#课程总结" class="headerlink" title="课程总结"></a>课程总结</h2><ul><li><strong>重点知识回顾：</strong>  </li></ul><p>事务的基本概念以及本地事务特性。  </p><p>CAP、BASE理论的概念。  </p><p>2PC、TCC、可靠消息最终一致性、最大努力通知各个类型原理以及其特性；  </p><p>不同分布式事务类型的应用场景讨论。  </p><p>RocketMQ事务消息机制；  </p><p>Seata与传统XA原理上的差异。  </p><ul><li><strong>分布式事务对比分析：</strong>  </li></ul><p>在学习各种分布式事务的解决方案后，了解到各种方案的优缺点：  </p><p><strong>2PC</strong>最大的诟病就是一个阻塞协议。RM在执行分支事务后需要等待TM的决定，此服务会阻塞并锁定资源。<br>由于其阻塞机制和最差时间复杂高度。<br>因此，这种实际不能适应着事务涉及的服务数量增加而扩展的需要，很难用于并发较高以及子事务生命周期较长（long-running transactions）的分布式服务中。  </p><p>如果拿<strong>TCC</strong>事务的处理流程与2PC两阶段提交作比较，2PC同行都是在跨库的DB层面，而TCC则是在应用层面的处理，需要通过业务逻辑来实现。<br>这种分布式事务的实现方式的又是在于，可以让<strong>应用自己定义数据操作的粒度，使得降低锁冲突、提高吞吐量称为可能</strong>。<br>而不足之处则在于对应用的侵入性非常强，业务逻辑的每个分支都需要实现try、confirm、cancel三个操作。<br>此外，其实现难度也比较大，需要按照网络状态，系统故障等不同的失败原因实现不同的回滚策略。<br>典型的使用场景：满xx/登录送优惠券等。  </p><p><strong>可靠消息最终一致性事务</strong>适合知性周期长且实时性要求不高的场景。<br>引入消息机制后，同步的事务操作变为基于消息执行的异步操作，避免了分布式事务中的同步阻塞操作的影响，并实现了两个服务的解耦。<br>典型的使用场景：注册送积分、登录送优惠券等。  </p><p><strong>最大努力通知</strong> 是分布式事务中要求最低的一种，适用于一些最终一致性敏感度低的业务；<br>允许发起通知方处理业务失败，在接收通知方收到通知后积极进行失败处理，无论发起通知方如何处理结果都会不影响到接收通知方的后续处理；<br>发起通知方需要提供查询执行情况接口，用于接收通知方校对结果。<br>典型的使用场景：银行通知、支付结果通知等；  </p><table>  <thead>    <tr>      <th></th>      <th>2PC</th>      <th>TCC</th>      <th>可靠消息</th>      <th>最大努力通知</th>    </tr>  </thead>  <tbody>    <tr>      <td>一致性</td>      <td>强一致性</td>      <td>最终一致</td>      <td>最终一致</td>      <td>最终一致</td>    </tr>    <tr>      <td>吞吐量</td>      <td>低</td>      <td>中</td>      <td>高</td>      <td>高</td>    </tr>    <tr>      <td>实现复杂度</td>      <td>易</td>      <td>难</td>      <td>中</td>      <td>易</td>    </tr>  </tbody></table><p><strong>总结：</strong>  </p><p>在条件允许的情况下，尽可能选择本地事务单数据源，因为它减少了网络交互带来的性能消耗，且避免了数据弱一致性带来的种种问题。<br>若某系统频繁且不合理的使用分布式事务，应首先从整体设计角度观察服务的拆分是否合理，是否高内聚低耦合？是否粒度太小？分布式事务一直是业界难题，因为网络的不确定性，而且我们习惯拿分布式事务与单机事务ACID作对比；  </p><p>无论是数据库层的XA、还是应用层的TCC、可靠消息、最大努力通知等方案，都没有完美解决分布式事务问题，他们不过是在各自在性能、一致性、可用性等方面作取舍，寻求某些场景偏好下的权衡。  </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数反转</title>
      <link href="/2020/04/18/%E3%80%90LeetCode%E3%80%91/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
      <url>/2020/04/18/%E3%80%90LeetCode%E3%80%91/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<p>我觉得还是得多看点优秀的代码，我这个太low了；<br>可以看这个的：<a href="https://drawcode.mdnice.com/algorithm/intro/" target="_blank" rel="noopener">https://drawcode.mdnice.com/algorithm/intro/</a><br>体会到差距就是执行用时与内存消耗上面；<br>害；<br>基础不扎实；<br>晚上有时间看下别人优秀的代码解析；<br>害；别说；还是蛮沉浸其中的；  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line">    static Long <span class="keyword">minValue</span>=new Long(<span class="number">-2</span>);</span><br><span class="line">    static Long <span class="keyword">maxValue</span>=new Long(<span class="number">2</span>);</span><br><span class="line">    static&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">minValue</span>=<span class="keyword">minValue</span>*(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">maxValue</span>=<span class="keyword">maxValue</span>*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">maxValue</span>=<span class="keyword">maxValue</span><span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    给出一个32位的有符号整数，</span></span><br><span class="line"><span class="comment">    你需要将这个整数中每位上的数字进行反转；</span></span><br><span class="line"><span class="comment">    int x  32位的有符号整数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">public</span> <span class="type">int</span> reverse(<span class="type">int</span> x) &#123;</span><br><span class="line">        String s=x&lt;<span class="number">0</span>?(x+"").substring(<span class="number">1</span>,(x+"").length()):x+"";</span><br><span class="line">        Long result=<span class="built_in">new</span> Long(<span class="number">0</span>);</span><br><span class="line">        StringBuilder stringBuilder=<span class="built_in">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=s.length();i&gt;<span class="number">0</span>;i<span class="comment">--)&#123;</span></span><br><span class="line">            stringBuilder.append(s.substring(i<span class="number">-1</span>,i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            Long <span class="keyword">value</span>=Long.parseLong("-"+stringBuilder.toString());</span><br><span class="line">            result=<span class="keyword">value</span>&lt;<span class="keyword">minValue</span>?result:value;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            Long value=Long.parseLong(stringBuilder.toString());</span><br><span class="line">            result=value&gt;<span class="keyword">maxValue</span>?result:value;</span><br><span class="line">        &#125;</span><br><span class="line">        return result.intValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="/2020/04/18/%E3%80%90LeetCode%E3%80%91/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2020/04/18/%E3%80%90LeetCode%E3%80%91/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p>写了两种方法；<br>很奇怪执行用时和内存消耗不知道怎么降下去；<br>我开始就搜了下：java 定义变量会消耗内存是吗？<br>我这个傻逼问题；<br>抱歉抱歉，我刚入门，对不住；  </p><p> <img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXyrH0mn2colZek3cguDxrWyGXx4pLFnHCZcZ9eF4N289iZ2JtlaYYYeWf2LHQ5qRWF8Mf0xWoO6sbLjgob1pXQM!/r" alt="两数之和"></p><p>想一想办法应该还可以优化下；<br>一开始使用Map，觉得内存消耗可能会大；不知道莫名就是给我的感觉就是这种结构给我的感觉要大；后来就换成了用数组；<br>刚开始接触，写的不好，还请见谅；  </p><p>诶诶诶，换成js，内存消耗以及运行时间可能会要短一点吗？有时间再去试试js；<br>不知道为什么我感觉js会要短点？<br>好了今天是LeetCode打卡第一天；<br>最近有一首歌挺好听的：(司南-冬眠)</p><blockquote><p>方法一：  </p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     int[] nums 整数数组</span></span><br><span class="line"><span class="comment">     int target 目标值</span></span><br><span class="line"><span class="comment">     int[] 该数组nums中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class="line"><span class="comment">     每中输入只会对应一个答案，但是数组中同一个元素不能使用两遍。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> target)&#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; <span class="built_in">map</span>=<span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] twoNums=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> numA=nums[i];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>.<span class="built_in">size</span>()==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">map</span>.<span class="built_in">put</span>(i,numA);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> numB=target-numA;</span><br><span class="line">                Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; <span class="built_in">set</span>=<span class="built_in">map</span>.entrySet();</span><br><span class="line">                <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry:<span class="built_in">set</span>)&#123;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"entry.getValue():  "</span>+entry.getValue());</span><br><span class="line">                    <span class="keyword">if</span>(numB==entry.getValue())&#123;</span><br><span class="line">                        twoNums[<span class="number">0</span>]=i&gt;entry.<span class="built_in">getKey</span>()?entry.<span class="built_in">getKey</span>():i;</span><br><span class="line">                        twoNums[<span class="number">1</span>]=i&gt;entry.<span class="built_in">getKey</span>()?i:entry.<span class="built_in">getKey</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">map</span>.<span class="built_in">put</span>(i,numA);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> twoNums;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法二：  </p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> static <span class="built_in">int</span>[] twoSum2(<span class="built_in">int</span>[] nums,<span class="built_in">int</span> target)&#123;</span><br><span class="line">        <span class="built_in">int</span>[] twoNums=new <span class="built_in">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">bool</span>ean flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="built_in">int</span> numA=nums[i];</span><br><span class="line">            <span class="built_in">int</span> numB=target-numA;</span><br><span class="line">           <span class="keyword">for</span>(<span class="built_in">int</span> n=i+<span class="number">1</span>;n&lt;nums.length;n++)&#123;</span><br><span class="line">               <span class="built_in">int</span> numV=nums[n];</span><br><span class="line">               <span class="keyword">if</span>(numB==numV)&#123;</span><br><span class="line">                   twoNums[<span class="number">0</span>]=i;</span><br><span class="line">                   twoNums[<span class="number">1</span>]=n;</span><br><span class="line">                   flag=<span class="literal">true</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> twoNums;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC端直播屏幕变红</title>
      <link href="/2020/04/17/%E3%80%90%E7%9B%B4%E6%92%AD%E3%80%91/pc%E7%9B%B4%E6%92%AD%E5%B1%8F%E5%B9%95%E5%8F%98%E7%BA%A2/"/>
      <url>/2020/04/17/%E3%80%90%E7%9B%B4%E6%92%AD%E3%80%91/pc%E7%9B%B4%E6%92%AD%E5%B1%8F%E5%B9%95%E5%8F%98%E7%BA%A2/</url>
      
        <content type="html"><![CDATA[<p>在这当中协助我完成直播功能的博客：<a href="https://me.csdn.net/eguid_1" target="_blank" rel="noopener">https://me.csdn.net/eguid_1</a>  </p><p>前期使用了有Red5、VLC、OBS；后来就直接使用的就是OBS进行拉流获取直播视频；  </p><p>OBS：<a href="https://obsproject.com/" target="_blank" rel="noopener">https://obsproject.com/</a>  </p><p>由于转化器converter会转化的是IplImage从而获取得到Frame；<br>而robot机器从屏幕读取得到的像素图像只能是BufferedImage；所以这两者需要做一个转化；</p><p>参考一些Blog，发现说是BufferedImage与IplImage之间的转化问题；  </p><p>参考了博客：<a href="https://blog.csdn.net/zwl18210851801/article/details/81279725" target="_blank" rel="noopener">https://blog.csdn.net/zwl18210851801/article/details/81279725</a><br>这篇博客是记录Mat与BufferedImage与我要的不一致；</p><p>因为参考的博客比如：<a href="https://blog.csdn.net/qiao_198911/article/details/52135013" target="_blank" rel="noopener">https://blog.csdn.net/qiao_198911/article/details/52135013</a><br>这篇博客是转化IplImage转化为BufferedImage；而我要的是BufferedImage转化为IplImage；</p><p>后来又找到博客发现：<a href="https://stackoverflow.com/questions/8368078/java-bufferedimage-to-iplimage" target="_blank" rel="noopener">https://stackoverflow.com/questions/8368078/java-bufferedimage-to-iplimage</a><br>这篇博客就记录了BufferedImage转化成IplImage；</p><p>PC端视频直播屏幕变红解决：  </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**bufferedImage to IplImage 的转化*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IplImage toIplImage(BufferedImage bufImage) &#123;</span><br><span class="line">    ToIplImage iplConverter = <span class="keyword">new</span> <span class="type">OpenCVFrameConverter</span>.ToIplImage();</span><br><span class="line">    Java2DFrameConverter java2dConverter = <span class="keyword">new</span> <span class="type">Java2DFrameConverter</span>();</span><br><span class="line">    IplImage iplImage = iplConverter.convert(java2dConverter.convert(bufImage));</span><br><span class="line">    <span class="keyword">return</span> iplImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于不是很明白；所以之前的代码都会做一个注释；贴一下之前的代码：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br></pre></td><td class="code"><pre><span class="line">package com.live;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteOrder;</span><br><span class="line"><span class="keyword">import</span> java.nio.ShortBuffer;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.AudioFormat;</span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.AudioSystem;</span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.DataLine;</span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.Line;</span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.LineUnavailableException;</span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.Mixer;</span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.TargetDataLine;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.Loader;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.avcodec;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.opencv_core.IplImage;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.helper.opencv_objdetect;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.CanvasFrame;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FFmpegFrameRecorder;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.Frame;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FrameGrabber;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FrameGrabber.Exception;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FrameRecorder;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.OpenCVFrameConverter;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.OpenCVFrameGrabber;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.AWTException;</span><br><span class="line"><span class="keyword">import</span> java.awt.Dimension;</span><br><span class="line"><span class="keyword">import</span> java.awt.GraphicsDevice;</span><br><span class="line"><span class="keyword">import</span> java.awt.GraphicsEnvironment;</span><br><span class="line"><span class="keyword">import</span> java.awt.Rectangle;</span><br><span class="line"><span class="keyword">import</span> java.awt.Robot;</span><br><span class="line"><span class="keyword">import</span> java.awt.Toolkit;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.DataBufferByte;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.WritableRaster;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.BytePointer;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.Loader;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.avcodec;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.opencv_highgui;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.opencv_core.IplImage;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.CanvasFrame;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.Frame;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FrameGrabber;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FrameGrabber.Exception;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FrameRecorder;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.Java2DFrameConverter;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.OpenCVFrameConverter;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.OpenCVFrameConverter.ToIplImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.service.VideoService;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">JavacvAudioTest</span> &#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**bufferedImage to IplImage 的转化*/</span></span><br><span class="line">public static IplImage toIplImage(BufferedImage bufImage) &#123;</span><br><span class="line">    ToIplImage iplConverter = <span class="keyword">new</span> OpenCVFrameConverter.ToIplImage();</span><br><span class="line">    Java2DFrameConverter java2dConverter = <span class="keyword">new</span> Java2DFrameConverter();</span><br><span class="line">    IplImage iplImage = iplConverter.convert(java2dConverter.convert(bufImage));</span><br><span class="line">    <span class="keyword">return</span> iplImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 推送/录制本机的音/视频(Webcam/Microphone)到流媒体服务器(Stream media server)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param WEBCAM_DEVICE_INDEX</span></span><br><span class="line"><span class="comment"> *            - 视频设备，本机默认是0</span></span><br><span class="line"><span class="comment"> * @param AUDIO_DEVICE_INDEX</span></span><br><span class="line"><span class="comment"> *            - 音频设备，本机默认是4</span></span><br><span class="line"><span class="comment"> * @param outputFile</span></span><br><span class="line"><span class="comment"> *            - 输出文件/地址(可以是本地文件，也可以是流媒体服务器地址)</span></span><br><span class="line"><span class="comment"> * @param captureWidth</span></span><br><span class="line"><span class="comment"> *            - 摄像头宽</span></span><br><span class="line"><span class="comment"> * @param captureHeight</span></span><br><span class="line"><span class="comment"> *            - 摄像头高</span></span><br><span class="line"><span class="comment"> * @param FRAME_RATE</span></span><br><span class="line"><span class="comment"> *            - 视频帧率:最低 25(即每秒25张图片,低于25就会出现闪屏)</span></span><br><span class="line"><span class="comment"> * @throws org.bytedeco.javacv.FrameGrabber.Exception</span></span><br><span class="line"><span class="comment"> * @throws org.bytedeco.javacv.FrameRecorder.Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public static CanvasFrame recordWebcamAndMicrophone(int WEBCAM_DEVICE_INDEX, final int AUDIO_DEVICE_INDEX, String outputFile,</span><br><span class="line">int captureWidth, int captureHeight, final int FRAME_RATE) throws org.bytedeco.javacv.FrameGrabber.Exception, org.bytedeco.javacv.FrameRecorder.Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.录制自己的小窗口进行隐藏，不能有声音</span></span><br><span class="line"><span class="comment"> * 2.将录制屏的不显示出来</span></span><br><span class="line"><span class="comment"> * 4.即通过录制屏将小窗口一起进行录制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//JavacAudioTest.recordWebcamAndMicrophone2(0, 4,"output.mp4", 100, 100,25);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 获取显示器</span><br><span class="line">long startTime = <span class="number">0</span>;</span><br><span class="line">long videoTS = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 获取当前屏幕大小</span></span><br><span class="line"><span class="regexp">Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();</span></span><br><span class="line"><span class="regexp">captureWidth=(int)screenSize.getWidth();</span></span><br><span class="line"><span class="regexp">captureHeight=(int)screenSize.getHeight();</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 指定捕获屏幕区域大小，这里使用全屏捕获</span><br><span class="line">Rectangle rectangle = <span class="keyword">new</span> Rectangle(screenSize);</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 本地环境</span></span><br><span class="line"><span class="regexp">GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 获取本地屏幕设备列表</span><br><span class="line">GraphicsDevice[] gs = ge.getScreenDevices();</span><br><span class="line">System.err.println(<span class="string">"eguid温馨提示，找到"</span> + gs.length + <span class="string">"个屏幕设备"</span>);</span><br><span class="line"><span class="regexp">// 目的：取到本地屏幕设备当中可以进行获取本地屏幕的设备下标</span></span><br><span class="line"><span class="regexp">//</span> 通过robot可以实例化该获取本地屏幕的设备，大概就是这意思，</span><br><span class="line"><span class="regexp">// 先令该robot机器设置为null,也就是类似于foreach当中的一个变量，所以是不能够放在循环里面的</span></span><br><span class="line"><span class="regexp">//</span> 去循环遍历该本地屏幕设备列表当中的所有设备，即数组gs，通过下标取出数组当中的该元素来进行实例化robot对象</span><br><span class="line"><span class="regexp">// 如果存在数组当中有一个下标所对应的元素实例化了robot对象后，</span></span><br><span class="line"><span class="regexp">//</span> 可以让robot对象切实的获取得到本地屏幕的缓冲图片，且该缓冲图片不为空，并且宽大于<span class="number">0</span></span><br><span class="line"><span class="regexp">// 即说明该下标所对应在数组当中的该元素即，就是我们所需要寻找的设备</span></span><br><span class="line"><span class="regexp">Robot robot = null;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> -<span class="number">1</span> 猜测：极有可能说的是没有这种可以获取本地屏幕的设备</span><br><span class="line">int ret = -<span class="number">1</span>;</span><br><span class="line">BufferedImage img=<span class="literal">null</span>;</span><br><span class="line"><span class="regexp">// 进行本地屏幕设备数组列表的循环</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">for (int index = 0; index &lt; 10; index++) &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 从本地屏幕设备列表当中进行一一取出屏幕设备</span><br><span class="line">GraphicsDevice g = gs[index];</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 通过robot来进行生成该种获取本地屏幕的机器设备</span></span><br><span class="line"><span class="regexp">robot = new Robot(g);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 通过该可以获取本地屏幕的机器设备来进行生成本地屏幕，也就是显示器图片</span><br><span class="line"> img = robot.createScreenCapture(rectangle);</span><br><span class="line"></span><br><span class="line"> <span class="regexp">// 判断如果该图片如果不为空的话，并且该图片大于1，也就说明该图片是存在的，有一定宽度，而并不是宽为0，宽为0，即说明该并不是图片了</span></span><br><span class="line"><span class="regexp">if (img != null &amp;&amp; img.getWidth() &gt; 1) &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 获取得到该机器设备的下标，并赋值给ret</span><br><span class="line">ret = index;</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 当下打断循环，跳出，找到该种设备之后立即打断循环，提高效率</span></span><br><span class="line"><span class="regexp">break;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125; catch (AWTException e) &#123;</span></span><br><span class="line"><span class="regexp">System.err.println("打开第" + index + "个屏幕设备失败，尝试打开第" + (index + 1) + "个屏幕设备");</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">//</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span>/</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FrameGrabber 类包含：OpenCVFrameGrabber</span></span><br><span class="line"><span class="comment"> * (opencv_videoio),C1394FrameGrabber, FlyCaptureFrameGrabber,</span></span><br><span class="line"><span class="comment"> * OpenKinectFrameGrabber,PS3EyeFrameGrabber,VideoInputFrameGrabber, 和</span></span><br><span class="line"><span class="comment"> * FFmpegFrameGrabber.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*OpenCVFrameGrabber grabber = new OpenCVFrameGrabber(WEBCAM_DEVICE_INDEX);</span></span><br><span class="line"><span class="comment">grabber.setImageWidth(captureWidth);</span></span><br><span class="line"><span class="comment">grabber.setImageHeight(captureHeight);</span></span><br><span class="line"><span class="comment">System.out.println("开始抓取摄像头...");</span></span><br><span class="line"><span class="comment">int isTrue = 0;// 摄像头开启状态</span></span><br><span class="line"><span class="comment">try &#123;</span></span><br><span class="line"><span class="comment">grabber.start();</span></span><br><span class="line"><span class="comment">isTrue += 1;</span></span><br><span class="line"><span class="comment">&#125; catch (org.bytedeco.javacv.FrameGrabber.Exception e2) &#123;</span></span><br><span class="line"><span class="comment">if (grabber != null) &#123;</span></span><br><span class="line"><span class="comment">try &#123;</span></span><br><span class="line"><span class="comment">grabber.restart();</span></span><br><span class="line"><span class="comment">isTrue += 1;</span></span><br><span class="line"><span class="comment">&#125; catch (org.bytedeco.javacv.FrameGrabber.Exception e) &#123;</span></span><br><span class="line"><span class="comment">isTrue -= 1;</span></span><br><span class="line"><span class="comment">try &#123;</span></span><br><span class="line"><span class="comment">grabber.stop();</span></span><br><span class="line"><span class="comment">&#125; catch (org.bytedeco.javacv.FrameGrabber.Exception e1) &#123;</span></span><br><span class="line"><span class="comment">isTrue -= 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if (isTrue &lt; 0) &#123;</span></span><br><span class="line"><span class="comment">System.err.println("摄像头首次开启失败，尝试重启也失败！");</span></span><br><span class="line"><span class="comment">return;</span></span><br><span class="line"><span class="comment">&#125; else if (isTrue &lt; 1) &#123;</span></span><br><span class="line"><span class="comment">System.err.println("摄像头开启失败！");</span></span><br><span class="line"><span class="comment">return;</span></span><br><span class="line"><span class="comment">&#125; else if (isTrue == 1) &#123;</span></span><br><span class="line"><span class="comment">System.err.println("摄像头开启成功！");</span></span><br><span class="line"><span class="comment">&#125; else if (isTrue == 1) &#123;</span></span><br><span class="line"><span class="comment">System.err.println("摄像头首次开启失败，重新启动成功！");</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">//</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 本机摄像头默认<span class="number">0</span>，这里使用javacv的帧抓取器，至于使用的是ffmpeg还是opencv，请自行查看源码</span><br><span class="line">FrameGrabber grabber = FrameGrabber.createDefault(ret);</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 开启抓取器</span></span><br><span class="line"><span class="regexp">grabber.start();</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 播放窗口的设置</span><br><span class="line">System.err.println(<span class="string">"打开的屏幕序号："</span> + ret);</span><br><span class="line"></span><br><span class="line"><span class="regexp">// javacv提供的图像展现窗口</span></span><br><span class="line"><span class="regexp">//</span> title 颜色的校正值</span><br><span class="line">CanvasFrame frame = <span class="keyword">new</span> CanvasFrame(<span class="string">"camera"</span>, CanvasFrame.getDefaultGamma() / grabber.getGamma());</span><br><span class="line"></span><br><span class="line">int width = <span class="number">800</span>;</span><br><span class="line">int height = <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 窗口居中</span></span><br><span class="line"><span class="regexp">frame.setBounds((int) (screenSize.getWidth() - width) / 2, (int) (screenSize.getHeight() - height) / 2, width, height);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 设置CanvasFrame窗口大小</span><br><span class="line">frame.setCanvasSize(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//frame.setVisible(false);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 转换器的获取以及配置</span><br><span class="line">OpenCVFrameConverter.ToIplImage converter = <span class="keyword">new</span> OpenCVFrameConverter.ToIplImage();</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 转换器通过抓取器grabber获取当前Frame进行来获取得到IplImage</span></span><br><span class="line"><span class="regexp">//</span> 抓取一帧视频并将其转换为图像，至于用这个图像用来做什么？加水印，人脸识别等等自行添加</span><br><span class="line">IplImage grabbedImage = converter.convert(grabber.grab());</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 通过当前视频直播放映内容的存储地址以及当前视频直播放映界面的大小来进行创建视频记录器，也就是界面的记录</span></span><br><span class="line"><span class="regexp">final FrameRecorder recorder = FrameRecorder.createDefault(outputFile, width, height);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 设置该视频记录器的编码，即将视频直播的流进行编码，也就是直播流/推流进行编码</span><br><span class="line"><span class="regexp">// avcodec.AV_CODEC_ID_H264，编码</span></span><br><span class="line"><span class="regexp">recorder.setVideoCodec(avcodec.AV_CODEC_ID_H264);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 设置记录器的记录视频的格式</span><br><span class="line"><span class="regexp">// 封装格式，如果是推送到rtmp就必须是flv封装格式</span></span><br><span class="line"><span class="regexp">recorder.setFormat("flv");</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 设置记录器的记录视频的速率</span><br><span class="line">recorder.setFrameRate(FRAME_RATE);</span><br><span class="line"><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span>/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FFmpegFrameRecorder(String filename, int imageWidth, int imageHeight, int audioChannels) </span></span><br><span class="line"><span class="comment"> * fileName可以是本地文件（会自动创建），也可以是RTMP路径（发布到流媒体服务器）</span></span><br><span class="line"><span class="comment"> * imageWidth = width （为捕获器设置宽） </span></span><br><span class="line"><span class="comment"> * imageHeight = height （为捕获器设置高）</span></span><br><span class="line"><span class="comment"> * audioChannels = 2（立体声）；1（单声道）；0（无音频）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="regexp">//final FFmpegFrameRecorder recorder = new FFmpegFrameRecorder(outputFile, captureWidth, captureHeight, 2);</span></span><br><span class="line"><span class="regexp">recorder.setInterleaved(true);</span></span><br><span class="line"><span class="regexp">recorder.setAudioChannels(2);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/**</span></span><br><span class="line"><span class="regexp"> * 该参数用于降低延迟 参考FFMPEG官方文档：https://</span>trac.ffmpeg.org/wiki/StreamingGuide</span><br><span class="line"> * 官方原文参考：ffmpeg -f dshow -i video=<span class="string">"Virtual-Camera"</span> -vcodec libx264</span><br><span class="line"> * -tune zerolatency -b <span class="number">900k</span> -f mpegts udp:<span class="regexp">//10.1.0.102:1234</span></span><br><span class="line"><span class="regexp"> */</span></span><br><span class="line"><span class="regexp">recorder.setVideoOption("tune", "zerolatency");</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/**</span></span><br><span class="line"><span class="regexp"> * 权衡quality(视频质量)和encode speed(编码速度) values(值)：</span></span><br><span class="line"><span class="regexp"> * ultrafast(终极快),</span></span><br><span class="line"><span class="regexp"> * superfast(超级快),</span></span><br><span class="line"><span class="regexp"> * veryfast(非常快), </span></span><br><span class="line"><span class="regexp"> * faster(很快), </span></span><br><span class="line"><span class="regexp"> * fast(快),</span></span><br><span class="line"><span class="regexp"> * medium(中等), </span></span><br><span class="line"><span class="regexp"> * slow(慢), </span></span><br><span class="line"><span class="regexp"> * slower(很慢), </span></span><br><span class="line"><span class="regexp"> * veryslow(非常慢)</span></span><br><span class="line"><span class="regexp"> * ultrafast(终极快)提供最少的压缩（低编码器CPU）和最大的视频流大小；</span></span><br><span class="line"><span class="regexp"> * 而veryslow(非常慢)提供最佳的压缩（高编码器CPU）的同时降低视频流的大小</span></span><br><span class="line"><span class="regexp"> * 参考：https://</span>trac.ffmpeg.org/wiki/Encode/H.<span class="number">264</span> 官方原文参考：-preset ultrafast</span><br><span class="line"> * as the name implies provides <span class="keyword">for</span> the fastest possible encoding. If</span><br><span class="line"> * some tradeoff between quality <span class="keyword">and</span> encode speed, go <span class="keyword">for</span> the speed.</span><br><span class="line"> * This might be needed <span class="keyword">if</span> you are going <span class="keyword">to</span> be transcoding multiple</span><br><span class="line"> * streams <span class="literal">on</span> one machine.</span><br><span class="line"> */</span><br><span class="line">recorder.setVideoOption(<span class="string">"preset"</span>, <span class="string">"ultrafast"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参考转流命令: ffmpeg</span></span><br><span class="line"><span class="comment"> * -i'udp://localhost:5000?fifo_size=1000000&amp;overrun_nonfatal=1' -crf 30</span></span><br><span class="line"><span class="comment"> * -preset ultrafast -acodec aac -strict experimental -ar 44100 -ac</span></span><br><span class="line"><span class="comment"> * 2-b:a 96k -vcodec libx264 -r 25 -b:v 500k -f flv 'rtmp://&lt;wowza</span></span><br><span class="line"><span class="comment"> * serverIP&gt;/live/cam0' -crf 30</span></span><br><span class="line"><span class="comment"> * -设置内容速率因子,这是一个x264的动态比特率参数，它能够在复杂场景下(使用不同比特率，即可变比特率)保持视频质量；</span></span><br><span class="line"><span class="comment"> * 可以设置更低的质量(quality)和比特率(bit rate),参考Encode/H.264 -preset ultrafast</span></span><br><span class="line"><span class="comment"> * -参考上面preset参数，与视频压缩率(视频大小)和速度有关,需要根据情况平衡两大点：压缩率(视频大小)，编/解码速度 -acodec</span></span><br><span class="line"><span class="comment"> * aac -设置音频编/解码器 (内部AAC编码) -strict experimental</span></span><br><span class="line"><span class="comment"> * -允许使用一些实验的编解码器(比如上面的内部AAC属于实验编解码器) -ar 44100 设置音频采样率(audio sample</span></span><br><span class="line"><span class="comment"> * rate) -ac 2 指定双通道音频(即立体声) -b:a 96k 设置音频比特率(bit rate) -vcodec libx264</span></span><br><span class="line"><span class="comment"> * 设置视频编解码器(codec) -r 25 -设置帧率(frame rate) -b:v 500k -设置视频比特率(bit</span></span><br><span class="line"><span class="comment"> * rate),比特率越高视频越清晰,视频体积也会变大,需要根据实际选择合理范围 -f flv</span></span><br><span class="line"><span class="comment"> * -提供输出流封装格式(rtmp协议只支持flv封装格式) 'rtmp://&lt;FMS server</span></span><br><span class="line"><span class="comment"> * IP&gt;/live/cam0'-流媒体服务器地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">recorder.setVideoOption(<span class="string">"crf"</span>, <span class="string">"25"</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 2000 kb/s, 720P视频的合理比特率范围</span></span><br><span class="line"><span class="regexp">recorder.setVideoBitrate(2000000);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> h264编/解码器</span><br><span class="line"><span class="regexp">//recorder.setVideoCodec(avcodec.AV_CODEC_ID_H264);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 封装格式flv</span><br><span class="line"><span class="regexp">//recorder.setFormat("flv");</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 视频帧率(保证视频质量的情况下最低<span class="number">25</span>，低于<span class="number">25</span>会出现闪屏)</span><br><span class="line"><span class="regexp">//recorder.setFrameRate(FRAME_RATE);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 关键帧间隔，一般与帧率相同或者是视频帧率的两倍</span><br><span class="line">recorder.setGopSize(FRAME_RATE * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 不可变(固定)音频比特率</span></span><br><span class="line"><span class="regexp">recorder.setAudioOption("crf", "0");</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 最高质量</span><br><span class="line">recorder.setAudioQuality(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 音频比特率</span></span><br><span class="line"><span class="regexp">recorder.setAudioBitrate(192000);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 音频采样率</span><br><span class="line">recorder.setSampleRate(<span class="number">44100</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 双通道(立体声)</span></span><br><span class="line"><span class="regexp">recorder.setAudioChannels(2);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 音频编/解码器</span><br><span class="line">recorder.setAudioCodec(avcodec.AV_CODEC_ID_AAC);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"开始录制..."</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">recorder.start();</span><br><span class="line">&#125; <span class="keyword">catch</span> (org.bytedeco.javacv.FrameRecorder.Exception e2) &#123;</span><br><span class="line"><span class="keyword">if</span> (recorder != <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"关闭失败，尝试重启"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">recorder.stop();</span><br><span class="line">recorder.start();</span><br><span class="line">&#125; <span class="keyword">catch</span> (org.bytedeco.javacv.FrameRecorder.Exception e) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"开启失败，关闭录制"</span>);</span><br><span class="line">recorder.stop();</span><br><span class="line"><span class="keyword">return</span> frame;</span><br><span class="line">&#125; <span class="keyword">catch</span> (org.bytedeco.javacv.FrameRecorder.Exception e1) &#123;</span><br><span class="line"><span class="keyword">return</span> frame;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="regexp">// 音频捕获</span></span><br><span class="line"><span class="regexp">new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="regexp">@Override</span></span><br><span class="line"><span class="regexp">public void run() &#123;</span></span><br><span class="line"><span class="regexp">/**</span></span><br><span class="line"><span class="regexp"> * 设置音频编码器 最好是系统支持的格式，否则getLine() 会发生错误</span></span><br><span class="line"><span class="regexp"> * 采样率:44.1k;</span></span><br><span class="line"><span class="regexp"> * 采样率位数:16位;</span></span><br><span class="line"><span class="regexp"> * 立体声(stereo);</span></span><br><span class="line"><span class="regexp"> * 是否签名;true:</span></span><br><span class="line"><span class="regexp"> * big-endian字节顺序,false:little-endian字节顺序(详见:ByteOrder类)</span></span><br><span class="line"><span class="regexp"> */</span></span><br><span class="line"><span class="regexp">AudioFormat audioFormat = new AudioFormat(44100.0F, 16, 2, true, false);</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">//</span> 通过AudioSystem获取本地音频混合器信息</span><br><span class="line">Mixer.Info[] minfoSet = AudioSystem.getMixerInfo();</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 通过AudioSystem获取本地音频混合器</span></span><br><span class="line"><span class="regexp">Mixer mixer = AudioSystem.getMixer(minfoSet[AUDIO_DEVICE_INDEX]);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 通过设置好的音频编解码器获取数据线信息</span><br><span class="line">DataLine.Info dataLineInfo = <span class="keyword">new</span> DataLine.Info(TargetDataLine<span class="class">.<span class="keyword">class</span>, <span class="title">audioFormat</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 打开并开始捕获音频</span></span><br><span class="line"><span class="regexp">//</span> 通过line可以获得更多控制权</span><br><span class="line"><span class="regexp">// 获取设备：TargetDataLine line</span></span><br><span class="line"><span class="regexp">//</span> =(TargetDataLine)mixer.getLine(dataLineInfo);</span><br><span class="line">final TargetDataLine line = (TargetDataLine) AudioSystem.getLine(dataLineInfo);</span><br><span class="line"></span><br><span class="line">line.open(audioFormat);</span><br><span class="line"></span><br><span class="line">line.start();</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 获得当前音频采样率</span></span><br><span class="line"><span class="regexp">final int sampleRate = (int) audioFormat.getSampleRate();</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 获取当前音频通道数量</span><br><span class="line">final int numChannels = audioFormat.getChannels();</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 初始化音频缓冲区(size是音频采样率*通道数)</span></span><br><span class="line"><span class="regexp">int audioBufferSize = sampleRate * numChannels;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">final byte[] audioBytes = new byte[audioBufferSize];</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">ScheduledThreadPoolExecutor exec = new ScheduledThreadPoolExecutor(1);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">exec.scheduleAtFixedRate(new Runnable() &#123;</span></span><br><span class="line"><span class="regexp">@Override</span></span><br><span class="line"><span class="regexp">public void run() &#123;</span></span><br><span class="line"><span class="regexp">try &#123;</span></span><br><span class="line"><span class="regexp">//</span> 非阻塞方式读取</span><br><span class="line">int nBytesRead = line.read(audioBytes, <span class="number">0</span>, line.available());</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 因为我们设置的是16位音频格式,所以需要将byte[]转成short[]</span></span><br><span class="line"><span class="regexp">int nSamplesRead = nBytesRead / 2;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">short[] samples = new short[nSamplesRead];</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/**</span></span><br><span class="line"><span class="regexp"> * ByteBuffer.wrap(audioBytes)-将byte[]数组包装到缓冲区</span></span><br><span class="line"><span class="regexp"> * ByteBuffer.order(ByteOrder)-按little-endian修改字节顺序，解码器定义的</span></span><br><span class="line"><span class="regexp"> * ByteBuffer.asShortBuffer()-创建一个新的short[]缓冲区</span></span><br><span class="line"><span class="regexp"> * ShortBuffer.get(samples)-将缓冲区里short数据传输到short[]</span></span><br><span class="line"><span class="regexp"> */</span></span><br><span class="line"><span class="regexp">ByteBuffer.wrap(audioBytes).order(ByteOrder.LITTLE_ENDIAN).asShortBuffer().get(samples);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 将short[]包装到ShortBuffer</span><br><span class="line">ShortBuffer sBuff = ShortBuffer.wrap(samples, <span class="number">0</span>, nSamplesRead);</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 按通道录制shortBuffer</span></span><br><span class="line"><span class="regexp"> ((FFmpegFrameRecorder) recorder).recordSamples(sampleRate, numChannels, sBuff);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125; catch (org.bytedeco.javacv.FrameRecorder.Exception e) &#123;</span></span><br><span class="line"><span class="regexp">e.printStackTrace();</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;, 0, (long) 1000 / FRAME_RATE, TimeUnit.MILLISECONDS);</span></span><br><span class="line"><span class="regexp">&#125; catch (LineUnavailableException e1) &#123;</span></span><br><span class="line"><span class="regexp">e1.printStackTrace();</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;).start();</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">//</span></span><br><span class="line"><span class="regexp">//</span> 设置界面的默认关闭操作的方式，即界面退出的时候</span><br><span class="line">frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 设置会让录制视频的窗体一直处于屏幕的最前端，即这个窗口永远会挡住别的窗口，所以录制到的内容也就是整个显示器的内容</span></span><br><span class="line"><span class="regexp">frame.setAlwaysOnTop(true);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 转换器通过进行转化 IplImage图片得到Frame,轮流[按顺序循环];</span><br><span class="line"><span class="regexp">//Frame rotatedFrame = converter.convert(grabbedImage);//</span> 不知道为什么这里不做转换就不能推到rtmp</span><br><span class="line">Frame rotatedFrame=converter.convert(toIplImage(robot.createScreenCapture(rectangle)));</span><br><span class="line"></span><br><span class="line"><span class="regexp">// //</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">///</span></span><br><span class="line"><span class="regexp">//</span> <span class="keyword">while</span>判断视频是否还在继续直播，如果继续的话，那么就显示图片</span><br><span class="line"><span class="keyword">while</span> (frame.isShowing() &amp;&amp; frame.isVisible() &amp;&amp; (grabbedImage = converter.convert(grabber.grab())) != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 从当前屏幕中读取的像素图像，该图像不包括鼠标光标</span></span><br><span class="line"><span class="regexp">BufferedImage image = robot.createScreenCapture(rectangle);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 该界面用以来显示图片</span><br><span class="line"><span class="regexp">//frame.showImage(image);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">///</span></span><br><span class="line"><span class="regexp">//</span> 转换器通过进行转化 IplImage图片得到Frame,轮流[按顺序循环];</span><br><span class="line">rotatedFrame = converter.convert(toIplImage(robot.createScreenCapture(rectangle)));</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 设置该Frame界面当中图为动态的图</span></span><br><span class="line"><span class="regexp">//</span> frame.showImage(rotatedFrame);</span><br><span class="line"><span class="regexp">// 如果开始时间为0，即让开始时间变为当前时间，初始化时间戳</span></span><br><span class="line"><span class="regexp">if (startTime == 0) &#123;</span></span><br><span class="line"><span class="regexp">startTime = System.currentTimeMillis();</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> ((当前时间-视频录制开始的时间)*<span class="number">1000</span>)=从开始到现在的时间差值</span><br><span class="line">videoTS = <span class="number">1000</span> * (System.currentTimeMillis() - startTime);</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 设置视频记录器的时间戳</span></span><br><span class="line"><span class="regexp">//</span>recorder.setTimestamp(videoTS);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//检查偏移量</span></span><br><span class="line"><span class="regexp">if (videoTS &gt; recorder.getTimestamp()) &#123;</span></span><br><span class="line"><span class="regexp">//</span>System.out.println(<span class="string">"Lip-flap correction: "</span> + videoTS + <span class="string">" : "</span> + recorder.getTimestamp() + <span class="string">" -&gt; "</span> + (videoTS - recorder.getTimestamp()));</span><br><span class="line"></span><br><span class="line"><span class="regexp">//告诉录制器写入这个timestamp</span></span><br><span class="line"><span class="regexp">recorder.setTimestamp(videoTS);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 设置视频的记录为 转化器通过进行转化IplImage图片得到的Frame，该Frame为轮流的</span><br><span class="line">recorder.record(rotatedFrame);</span><br><span class="line"></span><br><span class="line"><span class="regexp">// //</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span>/</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="regexp">// 线程沉睡时间40</span></span><br><span class="line"><span class="regexp">Thread.sleep(40);</span></span><br><span class="line"><span class="regexp">&#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="regexp">e.printStackTrace();</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/*//</span> javaCV提供了优化非常好的硬件加速组件来帮助显示我们抓取的摄像头视频</span><br><span class="line">CanvasFrame cFrame = <span class="keyword">new</span> CanvasFrame(<span class="string">"Capture Preview"</span>, CanvasFrame.getDefaultGamma() / grabber.getGamma());</span><br><span class="line">Frame capturedFrame = <span class="literal">null</span>;</span><br><span class="line"><span class="regexp">// 执行抓取（capture）过程</span></span><br><span class="line"><span class="regexp">while ((capturedFrame = grabber.grab()) != null) &#123;</span></span><br><span class="line"><span class="regexp">if (cFrame.isVisible()) &#123;</span></span><br><span class="line"><span class="regexp">//</span>本机预览要发送的帧</span><br><span class="line">cFrame.showImage(capturedFrame);</span><br><span class="line">&#125;</span><br><span class="line"><span class="regexp">//定义我们的开始时间，当开始时需要先初始化时间戳</span></span><br><span class="line"><span class="regexp">if (startTime == 0)</span></span><br><span class="line"><span class="regexp">startTime = System.currentTimeMillis();</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">//</span> 创建一个 timestamp用来写入帧中</span><br><span class="line">videoTS = <span class="number">1000</span> * (System.currentTimeMillis() - startTime);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//检查偏移量</span></span><br><span class="line"><span class="regexp">if (videoTS &gt; recorder.getTimestamp()) &#123;</span></span><br><span class="line"><span class="regexp">System.out.println("Lip-flap correction: " + videoTS + " : " + recorder.getTimestamp() + " -&gt; "</span></span><br><span class="line"><span class="regexp">+ (videoTS - recorder.getTimestamp()));</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span>告诉录制器写入这个timestamp</span><br><span class="line">recorder.setTimestamp(videoTS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 发送帧</span></span><br><span class="line"><span class="regexp">try &#123;</span></span><br><span class="line"><span class="regexp">recorder.record(capturedFrame);</span></span><br><span class="line"><span class="regexp">&#125; catch (org.bytedeco.javacv.FrameRecorder.Exception e) &#123;</span></span><br><span class="line"><span class="regexp">System.out.println("录制帧发生异常，什么都不做");</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">cFrame.dispose();*/</span></span><br><span class="line"><span class="regexp">try &#123;</span></span><br><span class="line"><span class="regexp">if (recorder != null) &#123;</span></span><br><span class="line"><span class="regexp">recorder.stop();</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125; catch (org.bytedeco.javacv.FrameRecorder.Exception e) &#123;</span></span><br><span class="line"><span class="regexp">System.out.println("关闭录制器失败");</span></span><br><span class="line"><span class="regexp">try &#123;</span></span><br><span class="line"><span class="regexp">if (recorder != null) &#123;</span></span><br><span class="line"><span class="regexp">grabber.stop();</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125; catch (org.bytedeco.javacv.FrameGrabber.Exception e1) &#123;</span></span><br><span class="line"><span class="regexp">System.out.println("关闭摄像头失败");</span></span><br><span class="line"><span class="regexp">return frame;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">try &#123;</span></span><br><span class="line"><span class="regexp">if (recorder != null) &#123;</span></span><br><span class="line"><span class="regexp">grabber.stop();</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125; catch (org.bytedeco.javacv.FrameGrabber.Exception e) &#123;</span></span><br><span class="line"><span class="regexp">System.out.println("关闭摄像头失败");</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">frame.dispose();</span></span><br><span class="line"><span class="regexp">recorder.stop();</span></span><br><span class="line"><span class="regexp">recorder.release();</span></span><br><span class="line"><span class="regexp">grabber.stop();</span></span><br><span class="line"><span class="regexp">return frame;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">public static void main(String[] args) throws Exception, org.bytedeco.javacv.FrameRecorder.Exception, ParseException &#123;</span></span><br><span class="line"><span class="regexp">VideoService videoService = new VideoService();</span></span><br><span class="line"><span class="regexp">String jsonStr = videoService.getPushAddress("Fsn");</span></span><br><span class="line"><span class="regexp">JSONObject json = JSONObject.parseObject(jsonStr);</span></span><br><span class="line"><span class="regexp">recordWebcamAndMicrophone(0, 4, json.getString("PUSH_URL"), 800, 600, 25);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 直播 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql-存储过程</title>
      <link href="/2020/04/15/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
      <url>/2020/04/15/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>在领赫这个项目当中，方便敏捷式开发的存储过程pojo-model层以及mapper的编写。  </p><h3 id="david指导"><a href="#david指导" class="headerlink" title="david指导"></a>david指导</h3><ul><li>那个存储过程等你有时间你得优化一下，不要名字全是sqlxJava，至少也要说明摸个存储过程是干嘛用的，不然后期很难维护，过几天你自己都忘了哪个 是干嘛用的。</li><li>如果业务不熟很复杂，还是少用存储过程，不利于维护。</li><li>写存储过程也可以，但是不要搞复杂了，你之前获取产品列表那个存储过程，我感觉你搞复杂了。</li><li>我们这业务不存在复杂的计算，基本上关联几张表就能查出数据。如果存在复杂的业务计算的时候存储过程才能发挥他额作用</li><li>存储过程可以用，尽力做好备注</li><li>两种方式都可以。你那个存储过程那个可以优化一下，通过临时表传递两个存储过程之间的数据不是很好的方式。临时表最好在一个存储过程中使用，不要夸多个存储过程。</li></ul><p>其实我能说我不会写复杂的sql所以写了存储过程吗？(<em>/ω＼</em>)<br>害  </p><h3 id="拼接列的名称"><a href="#拼接列的名称" class="headerlink" title="拼接列的名称"></a>拼接列的名称</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER=<span class="string">`admin`</span>@<span class="string">`%`</span> <span class="keyword">PROCEDURE</span> <span class="string">`concatColume`</span>(<span class="keyword">in</span> t_name <span class="built_in">char</span>(<span class="number">30</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">GROUP_CONCAT</span>(</span><br><span class="line">column_name</span><br><span class="line">) <span class="keyword">as</span> <span class="keyword">java</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">information_schema. <span class="keyword">columns</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">table_name = t_name;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">GROUP_CONCAT</span>(</span><br><span class="line"><span class="keyword">CONCAT</span>(<span class="string">'#&#123;'</span>,column_name,<span class="string">'&#125;#'</span>)</span><br><span class="line">) <span class="keyword">as</span> <span class="keyword">java</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">information_schema. <span class="keyword">columns</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">table_name = t_name;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="通过逗号分隔字段取值"><a href="#通过逗号分隔字段取值" class="headerlink" title="通过逗号分隔字段取值"></a>通过逗号分隔字段取值</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `fieldValue_split_by_comma`(<span class="keyword">in</span> splitContent <span class="type">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">BEGIN</span> <span class="comment">-- 原来的procedure - sql9java,现在改名为 field_split_by_comma</span></span><br><span class="line">   <span class="keyword">DECLARE</span> n   <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 特殊字符总个数</span></span><br><span class="line"> <span class="keyword">DECLARE</span> test_n   <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 特殊字符总个数</span></span><br><span class="line"> <span class="keyword">DECLARE</span> i   <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 循环变量</span></span><br><span class="line"> <span class="keyword">DECLARE</span> ind <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 得到特殊字符的下标</span></span><br><span class="line"> <span class="keyword">DECLARE</span> left_str  <span class="type">varchar</span>(<span class="number">30</span>); <span class="comment">-- 左边的字符串</span></span><br><span class="line"> <span class="keyword">DECLARE</span> str_value <span class="type">varchar</span>(<span class="number">30</span>); <span class="comment">-- value变量</span></span><br><span class="line"> <span class="keyword">DECLARE</span> str       <span class="type">varchar</span>(<span class="number">255</span>); <span class="comment">-- 用于拼接的变量</span></span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql5java(num <span class="type">int</span>,s_id <span class="type">varchar</span>(<span class="number">255</span>));</span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql5java;<span class="comment">-- 将拆分出来的那个供应商编号新增入该表</span></span><br><span class="line"> <span class="keyword">SET</span> i = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">SET</span> str = splitContent;</span><br><span class="line"> <span class="keyword">SET</span> n = length(str)-length(REPLACE(str,",",""))+<span class="number">1</span>; <span class="comment">-- 总共有多少次需要进行替换以及大小写变化</span></span><br><span class="line"> <span class="keyword">SET</span> max_sp_recursion_depth = <span class="number">3000</span>;</span><br><span class="line">    <span class="keyword">WHILE</span> i &lt;= n <span class="keyword">DO</span> </span><br><span class="line">    <span class="keyword">SET</span> ind = LENGTH(SUBSTRING_INDEX(str,<span class="string">','</span>,i)); <span class="comment">-- 特殊字符的下标</span></span><br><span class="line">  <span class="keyword">SET</span> left_str = SUBSTRING_INDEX(str,<span class="string">','</span>,i); <span class="comment">-- 特殊字符左边的字符串</span></span><br><span class="line"><span class="keyword">SET</span> test_n =  LENGTH(SUBSTRING_INDEX(left_str,<span class="string">','</span>,i)); <span class="comment">-- 查看截取了的内容是否还有特殊字符</span></span><br><span class="line"><span class="keyword">if</span>(test_n&lt;<span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line"><span class="keyword">SET</span> str_value = left_str;</span><br><span class="line"><span class="keyword">else</span>   </span><br><span class="line"><span class="keyword">SET</span> str_value = SUBSTRING_INDEX(left_str,<span class="string">','</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp_sql5java <span class="keyword">values</span>(i,str_value);</span><br><span class="line"><span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="生成基本的-Mapper-映射"><a href="#生成基本的-Mapper-映射" class="headerlink" title="生成基本的 Mapper 映射"></a>生成基本的 Mapper 映射</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `generate_base_mapper`(<span class="keyword">in</span> t_name <span class="type">char</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">BEGIN</span>  <span class="comment">-- 原来的 procedure - sql6java,现在改名为 generate_base_mapper</span></span><br><span class="line"><span class="comment">-- t_name 即table_name 上送参数为表名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> columnName <span class="type">varchar</span>(<span class="number">5000</span>);         <span class="comment">-- 原型字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> property <span class="type">varchar</span>(<span class="number">255</span>);           <span class="comment">-- 大小写驼峰字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> mapper <span class="type">varchar</span>(<span class="number">255</span>);             <span class="comment">-- 表映射名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">class</span> <span class="type">varchar</span>(<span class="number">255</span>);              <span class="comment">-- 类名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> varClass <span class="type">varchar</span>(<span class="number">255</span>);           <span class="comment">-- 变量类名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> str text(<span class="number">50000</span>);               <span class="comment">-- 字符串变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> columnsStr <span class="type">varchar</span>(<span class="number">5000</span>);                <span class="comment">-- 列字符串变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> insertColumnsStr <span class="type">varchar</span>(<span class="number">5000</span>);                <span class="comment">-- 列字符串变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> propertyStr <span class="type">varchar</span>(<span class="number">5000</span>);               <span class="comment">-- 属性字符串变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> columnPropertyStr <span class="type">varchar</span>(<span class="number">5000</span>); <span class="comment">-- 列属性字符串变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> findByIdStr <span class="type">varchar</span>(<span class="number">5000</span>);       <span class="comment">-- 通过主键查找对象方法</span></span><br><span class="line"><span class="keyword">DECLARE</span> insertRecord <span class="type">varchar</span>(<span class="number">5000</span>);      <span class="comment">-- 新增记录</span></span><br><span class="line"><span class="keyword">DECLARE</span> selectCount <span class="type">varchar</span>(<span class="number">5000</span>);      <span class="comment">-- 新增记录</span></span><br><span class="line"><span class="keyword">DECLARE</span> findAll <span class="type">varchar</span>(<span class="number">5000</span>);      <span class="comment">-- 新增记录</span></span><br><span class="line"><span class="keyword">DECLARE</span> head <span class="type">varchar</span>(<span class="number">5000</span>);              <span class="comment">-- 新增记录</span></span><br><span class="line"><span class="keyword">DECLARE</span> resultMapper text(<span class="number">10000</span>);             <span class="comment">-- 新增记录</span></span><br><span class="line"><span class="keyword">DECLARE</span> n  <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span> ;             <span class="comment">-- 总共的字段数</span></span><br><span class="line"><span class="keyword">DECLARE</span> i  <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>;              <span class="comment">-- 循环时的变量</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql2java(property_name <span class="type">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql2java;</span><br><span class="line"><span class="keyword">SET</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> str = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> columnsStr = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> insertColumnsStr = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> propertyStr = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> columnPropertyStr = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> findByIdStr = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> insertRecord = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> selectCount =<span class="string">''</span>;      <span class="comment">-- 新增记录</span></span><br><span class="line"><span class="keyword">SET</span> findAll =<span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> property = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> mapper = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">class</span> = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> varClass = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> resultMapper = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">CALL</span> generate_class_mapperClass_name(t_name,<span class="string">'Mapper'</span>,@mapperName);       <span class="comment">-- 通过表名称获取得到Mapper类名称</span></span><br><span class="line"><span class="keyword">CALL</span> generate_class_mapperClass_name(t_name,<span class="string">''</span>,@className);  <span class="comment">-- 通过表名称获取得到Model类名称</span></span><br><span class="line"><span class="keyword">SET</span> mapper = @mapperName;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">class</span> = @className;</span><br><span class="line"><span class="keyword">SET</span> head = CONCAT(</span><br><span class="line"><span class="string">'&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n'</span>,</span><br><span class="line"><span class="string">'&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;\n'</span>,</span><br><span class="line"><span class="string">'&lt;mapper namespace="com.yourshares.entity.dao.'</span>,</span><br><span class="line">mapper,</span><br><span class="line"><span class="string">'"&gt;\n'</span>,</span><br><span class="line"><span class="string">'&lt;resultMap id="BaseResultMap" type="com.yourshares.entity.model.'</span>,</span><br><span class="line"><span class="keyword">class</span>,</span><br><span class="line"><span class="string">'"&gt;\n'</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">select</span> COUNT(*) <span class="keyword">into</span> n <span class="keyword">from</span> information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name; <span class="comment">-- 总共的字段</span></span><br><span class="line"><span class="keyword">WHILE</span> i &lt;= n <span class="keyword">DO</span>                           <span class="comment">-- 循环</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">column_name</span> <span class="keyword">into</span> columnName <span class="keyword">from</span> information_schema.`<span class="keyword">columns</span>` <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i;</span><br><span class="line"><span class="keyword">CALL</span> generate_property_name(columnName,@propertyName);    <span class="comment">-- 通过表字段获取得到属性名称</span></span><br><span class="line"><span class="keyword">SET</span>  property = @propertyName;              <span class="comment">-- 赋值</span></span><br><span class="line"><span class="keyword">CALL</span> generate_class_mapperClass_name(columnName,<span class="string">'Mapper'</span>,@varClassName);</span><br><span class="line"><span class="keyword">SET</span>  varClass = @varClassName;</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">CONCAT(</span><br><span class="line">columnPropertyStr,</span><br><span class="line"><span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span> column_key <span class="keyword">in</span> (<span class="string">'PRI'</span>) <span class="keyword">then</span>  <span class="string">'&lt;id column="'</span> </span><br><span class="line"><span class="keyword">when</span> column_key <span class="keyword">not</span> <span class="keyword">in</span>  (<span class="string">'PRI'</span>,<span class="string">'MUL'</span>)   <span class="keyword">then</span>  <span class="string">'&lt;result column="'</span></span><br><span class="line"><span class="keyword">when</span> column_key <span class="keyword">in</span> (<span class="string">'MUL'</span>) <span class="keyword">then</span>  <span class="string">'&lt;association column="'</span></span><br><span class="line"><span class="keyword">end</span>,</span><br><span class="line"><span class="built_in">column_name</span>,</span><br><span class="line">CONCAT(<span class="string">'" property="'</span>, property, <span class="string">'"  '</span>),</span><br><span class="line"><span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span> column_key <span class="keyword">in</span> (<span class="string">'PRI'</span>) <span class="keyword">then</span> </span><br><span class="line">CONCAT(</span><br><span class="line"><span class="string">'jdbcType="'</span> ,</span><br><span class="line"><span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'int'</span>,<span class="string">'smallint'</span>) <span class="keyword">then</span> <span class="string">'INTEGER'</span></span><br><span class="line"><span class="keyword">else</span> UPPER(data_type)</span><br><span class="line"><span class="keyword">end</span>,</span><br><span class="line"><span class="string">'"  /&gt;\n'</span></span><br><span class="line">)</span><br><span class="line">  <span class="keyword">when</span> column_key <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'PRI'</span>,<span class="string">'MUL'</span>) <span class="keyword">then</span> </span><br><span class="line">CONCAT(</span><br><span class="line"><span class="string">'jdbcType="'</span> ,</span><br><span class="line"><span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'int'</span>,<span class="string">'smallint'</span>) <span class="keyword">then</span> <span class="string">'INTEGER'</span></span><br><span class="line"><span class="keyword">else</span> UPPER(data_type)</span><br><span class="line"><span class="keyword">end</span>,</span><br><span class="line"><span class="string">'"  /&gt;\n'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">when</span> column_key <span class="keyword">in</span> (<span class="string">'MUL'</span>) <span class="keyword">then</span> </span><br><span class="line">CONCAT(</span><br><span class="line"><span class="string">'select="com.yourshares.entity.dao.'</span>,</span><br><span class="line">@varClassName,</span><br><span class="line"><span class="string">'.findById"&gt;&lt;/association&gt;\n'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">else</span> <span class="string">''</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">) <span class="keyword">into</span> columnPropertyStr </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">information_schema.<span class="keyword">columns</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line"><span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> str = CONCAT(str,columnPropertyStr); <span class="comment">-- 拼接resultMap节点当中的子节点</span></span><br><span class="line"><span class="keyword">select</span> CONCAT(columnsStr,<span class="string">'a.'</span>,<span class="built_in">column_name</span>,<span class="string">','</span>) <span class="keyword">into</span> columnsStr <span class="keyword">from</span>  information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i; <span class="comment">-- 所有字段列</span></span><br><span class="line"><span class="keyword">select</span> CONCAT(insertColumnsStr,<span class="built_in">column_name</span>,<span class="string">','</span>) <span class="keyword">into</span> insertColumnsStr <span class="keyword">from</span>  information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i; <span class="comment">-- 所有字段列</span></span><br><span class="line"><span class="keyword">select</span> CONCAT(propertyStr,<span class="string">'#&#123;'</span>,property,<span class="string">'&#125;,'</span>) <span class="keyword">into</span> propertyStr <span class="keyword">from</span>  information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i; <span class="comment">-- 所有属性列</span></span><br><span class="line"><span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>; </span><br><span class="line"><span class="keyword">SET</span> columnsStr = SUBSTRING(columnsStr,<span class="number">1</span>,LENGTH(columnsStr)<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">SET</span> propertyStr = SUBSTRING(propertyStr,<span class="number">1</span>,LENGTH(propertyStr)<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">SET</span> findByIdStr = CONCAT(</span><br><span class="line"><span class="string">'&lt;select id="findById" parameterType="java.lang.Integer" resultMap="BaseResultMap"&gt;\n'</span>,</span><br><span class="line"><span class="string">'select '</span>, columnsStr, <span class="string">' from '</span>, t_name, <span class="string">' a where a.id=#&#123;value&#125; \n'</span>,</span><br><span class="line"><span class="string">'&lt;/select&gt;\n'</span></span><br><span class="line">);  <span class="comment">-- 查询语句</span></span><br><span class="line"><span class="keyword">SET</span> insertRecord = CONCAT(</span><br><span class="line"><span class="string">'&lt;insert id="insertRecord" parameterType="com.yourshares.entity.model.'</span>, <span class="keyword">class</span>, <span class="string">'"&gt;\n'</span>,</span><br><span class="line"><span class="string">' insert into '</span>,t_name, <span class="string">'\n'</span>,<span class="string">'('</span>,insertColumnsStr,<span class="string">')\n'</span>, <span class="string">'values\n'</span>, <span class="string">'('</span>,propertyStr,<span class="string">')\n'</span>,</span><br><span class="line"><span class="string">'&lt;/insert&gt;\n'</span></span><br><span class="line">);  <span class="comment">-- 新增语句</span></span><br><span class="line"><span class="keyword">SET</span> selectCount = CONCAT(</span><br><span class="line"><span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">SET</span> selectCount = CONCAT(</span><br><span class="line"><span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">SET</span> resultMapper = CONCAT(</span><br><span class="line">head,</span><br><span class="line">columnPropertyStr,</span><br><span class="line"><span class="string">'&lt;/resultMap&gt;\n'</span>,</span><br><span class="line">findByIdStr,</span><br><span class="line">insertRecord,</span><br><span class="line">    <span class="string">'&lt;/mapper&gt;'</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">select</span> resultMapper;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="生成类的名称，以及映射类的名称"><a href="#生成类的名称，以及映射类的名称" class="headerlink" title="生成类的名称，以及映射类的名称"></a>生成类的名称，以及映射类的名称</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `generate_class_mapperClass_name`(<span class="keyword">in</span> t_name <span class="type">varchar</span>(<span class="number">255</span>),<span class="keyword">in</span> split_joint_str <span class="type">varchar</span>(<span class="number">255</span>), <span class="keyword">out</span> property_name <span class="type">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">BEGIN</span> <span class="comment">-- 原来的 procedure - sql5java,现在改名为  generate_class_mapperClass_name,用于生成类名称或者是映射类的名称</span></span><br><span class="line">   <span class="keyword">DECLARE</span> n   <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 特殊字符总个数</span></span><br><span class="line"> <span class="keyword">DECLARE</span> i   <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 循环变量</span></span><br><span class="line"> <span class="keyword">DECLARE</span> ind <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 得到特殊字符的下标</span></span><br><span class="line"> <span class="keyword">DECLARE</span> left_str  <span class="type">varchar</span>(<span class="number">255</span>); <span class="comment">-- 左边的字符串</span></span><br><span class="line"> <span class="keyword">DECLARE</span> right_str <span class="type">varchar</span>(<span class="number">255</span>); <span class="comment">-- 右边的字符串</span></span><br><span class="line"> <span class="keyword">DECLARE</span> midd_char <span class="type">varchar</span>(<span class="number">255</span>); <span class="comment">-- 中间的那个需要修改的字符</span></span><br><span class="line"> <span class="keyword">DECLARE</span> str       <span class="type">varchar</span>(<span class="number">1024</span>); <span class="comment">-- 用于拼接的变量</span></span><br><span class="line"> <span class="keyword">DECLARE</span> first_str <span class="type">varchar</span>(<span class="number">255</span>); <span class="comment">-- 第一个字符</span></span><br><span class="line"> <span class="keyword">DECLARE</span> join_str  <span class="type">varchar</span>(<span class="number">255</span>); <span class="comment">-- 拼接进来的字符串</span></span><br><span class="line"> <span class="keyword">SET</span> i = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">SET</span> str = t_name;</span><br><span class="line"> <span class="keyword">SET</span> join_str = split_joint_str;</span><br><span class="line"> <span class="keyword">SET</span> n = length(str)-length(REPLACE(str,"_",""))+<span class="number">1</span>; <span class="comment">-- 总共有多少次需要进行替换以及大小写变化</span></span><br><span class="line">    <span class="keyword">WHILE</span> i &lt; n <span class="keyword">DO</span> </span><br><span class="line">    <span class="keyword">SET</span> ind = LENGTH(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i)); <span class="comment">-- 特殊字符的下标</span></span><br><span class="line">  <span class="keyword">SET</span> left_str = CONCAT(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i),<span class="string">'_'</span>); <span class="comment">-- 特殊字符左边的字符串</span></span><br><span class="line"><span class="keyword">SET</span> right_str = </span><br><span class="line">SUBSTRING(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i-(n)),<span class="number">2</span>,LENGTH(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i-(n)))); <span class="comment">-- 特殊字符右边的字符串</span></span><br><span class="line"><span class="keyword">SET</span> midd_char = UPPER(SUBSTRING(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i-(n)),<span class="number">1</span>,<span class="number">1</span>)); <span class="comment">-- 需要变化成大写的字符</span></span><br><span class="line"><span class="keyword">SET</span> str = concat(left_str,midd_char,right_str); <span class="comment">-- 对str字符串变量进行重新赋值</span></span><br><span class="line"><span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">SET</span> first_str = UPPER(SUBSTRING(str,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">SET</span> str = SUBSTRING(REPLACE(str,"_",""),<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SET</span> property_name = CONCAT(first_str,str,join_str);</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="生成模型层model层的属性-区分大小写"><a href="#生成模型层model层的属性-区分大小写" class="headerlink" title="生成模型层model层的属性,区分大小写"></a>生成模型层model层的属性,区分大小写</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `generate_model_case`(<span class="keyword">in</span> t_name <span class="type">char</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">BEGIN</span>  <span class="comment">-- 原来的procedure - sql4java,现在改名为 generate_model_case,生成model层属性，属性名称驼峰处理</span></span><br><span class="line"><span class="keyword">DECLARE</span> columnName <span class="type">varchar</span>(<span class="number">1000</span>); <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> property <span class="type">varchar</span>(<span class="number">5000</span>);   <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> str <span class="type">varchar</span>(<span class="number">5000</span>);       <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> n  <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span> ;     <span class="comment">-- 总共的字段数</span></span><br><span class="line"><span class="keyword">DECLARE</span> i  <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>;      <span class="comment">-- 循环时的变量</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql2java(property_name <span class="type">varchar</span>(<span class="number">5000</span>));</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql2java;</span><br><span class="line"><span class="keyword">SET</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> count(*) <span class="keyword">into</span> n <span class="keyword">from</span> information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name;</span><br><span class="line"><span class="keyword">WHILE</span> i &lt;= n <span class="keyword">DO</span> </span><br><span class="line"><span class="keyword">select</span> <span class="built_in">column_name</span> <span class="keyword">into</span> columnName <span class="keyword">from</span> information_schema.`<span class="keyword">columns</span>` <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i;</span><br><span class="line"><span class="keyword">CALL</span> generate_property_name(columnName,@propertyName);</span><br><span class="line"><span class="keyword">SET</span> property = @propertyName;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    concat(</span><br><span class="line">         <span class="string">'/*'</span>,</span><br><span class="line">         column_comment,</span><br><span class="line">         <span class="string">'*/\n'</span>,</span><br><span class="line">        <span class="string">'private  '</span>,</span><br><span class="line">        <span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'varchar'</span>, <span class="string">'char'</span>, <span class="string">'text'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'String'</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'int'</span>, <span class="string">'tinyint'</span>,<span class="string">'smallint'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'Integer'</span></span><br><span class="line"><span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'float'</span>, <span class="string">'double'</span>,<span class="string">'decimal'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'BigDecimal'</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'bigint'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'Long'</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'datetime'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'Date'</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'bit'</span>, <span class="string">'boolean'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'Boolean'</span></span><br><span class="line"><span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'double'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'BigDecimal'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="string">'类型不确定'</span></span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">    <span class="string">'  '</span>,</span><br><span class="line">    property,</span><br><span class="line">    <span class="string">';'</span></span><br><span class="line">    ) <span class="keyword">as</span> java <span class="keyword">into</span> str </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    information_schema. <span class="keyword">columns</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp_sql2java (property_name) <span class="keyword">values</span>(str); </span><br><span class="line"><span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">select</span> property_name <span class="keyword">from</span> tmp_sql2java;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="生成model层属性，不区分大小写"><a href="#生成model层属性，不区分大小写" class="headerlink" title="生成model层属性，不区分大小写"></a>生成model层属性，不区分大小写</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `generate_model_case`(<span class="keyword">in</span> t_name <span class="type">char</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">BEGIN</span>  <span class="comment">-- 原来的procedure - sql4java,现在改名为 generate_model_case,生成model层属性，属性名称驼峰处理</span></span><br><span class="line"><span class="keyword">DECLARE</span> columnName <span class="type">varchar</span>(<span class="number">1000</span>); <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> property <span class="type">varchar</span>(<span class="number">5000</span>);   <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> str <span class="type">varchar</span>(<span class="number">5000</span>);       <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> n  <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span> ;     <span class="comment">-- 总共的字段数</span></span><br><span class="line"><span class="keyword">DECLARE</span> i  <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>;      <span class="comment">-- 循环时的变量</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql2java(property_name <span class="type">varchar</span>(<span class="number">5000</span>));</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql2java;</span><br><span class="line"><span class="keyword">SET</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> count(*) <span class="keyword">into</span> n <span class="keyword">from</span> information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name;</span><br><span class="line"><span class="keyword">WHILE</span> i &lt;= n <span class="keyword">DO</span> </span><br><span class="line"><span class="keyword">select</span> <span class="built_in">column_name</span> <span class="keyword">into</span> columnName <span class="keyword">from</span> information_schema.`<span class="keyword">columns</span>` <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i;</span><br><span class="line"><span class="keyword">CALL</span> generate_property_name(columnName,@propertyName);</span><br><span class="line"><span class="keyword">SET</span> property = @propertyName;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    concat(</span><br><span class="line">         <span class="string">'/*'</span>,</span><br><span class="line">         column_comment,</span><br><span class="line">         <span class="string">'*/\n'</span>,</span><br><span class="line">        <span class="string">'private  '</span>,</span><br><span class="line">        <span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'varchar'</span>, <span class="string">'char'</span>, <span class="string">'text'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'String'</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'int'</span>, <span class="string">'tinyint'</span>,<span class="string">'smallint'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'Integer'</span></span><br><span class="line"><span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'float'</span>, <span class="string">'double'</span>,<span class="string">'decimal'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'BigDecimal'</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'bigint'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'Long'</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'datetime'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'Date'</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'bit'</span>, <span class="string">'boolean'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'Boolean'</span></span><br><span class="line"><span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'double'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'BigDecimal'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="string">'类型不确定'</span></span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">    <span class="string">'  '</span>,</span><br><span class="line">    property,</span><br><span class="line">    <span class="string">';'</span></span><br><span class="line">    ) <span class="keyword">as</span> java <span class="keyword">into</span> str </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    information_schema. <span class="keyword">columns</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp_sql2java (property_name) <span class="keyword">values</span>(str); </span><br><span class="line"><span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">select</span> property_name <span class="keyword">from</span> tmp_sql2java;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="生成属性名称"><a href="#生成属性名称" class="headerlink" title="生成属性名称"></a>生成属性名称</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `generate_property_name`(<span class="keyword">in</span> <span class="built_in">column_name</span> <span class="type">varchar</span>(<span class="number">1000</span>),<span class="keyword">out</span> property_name <span class="type">varchar</span>(<span class="number">30</span>))</span><br><span class="line"><span class="keyword">BEGIN</span>  <span class="comment">-- 原来的procedure - sql3java,现在改名为 generate_property_name</span></span><br><span class="line">   <span class="keyword">DECLARE</span> n   <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 特殊字符总个数</span></span><br><span class="line"> <span class="keyword">DECLARE</span> i   <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 循环变量</span></span><br><span class="line"> <span class="keyword">DECLARE</span> ind <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 得到特殊字符的下标</span></span><br><span class="line"> <span class="keyword">DECLARE</span> left_str  <span class="type">varchar</span>(<span class="number">30</span>); <span class="comment">-- 左边的字符串</span></span><br><span class="line"> <span class="keyword">DECLARE</span> right_str <span class="type">varchar</span>(<span class="number">30</span>); <span class="comment">-- 右边的字符串</span></span><br><span class="line"> <span class="keyword">DECLARE</span> midd_char <span class="type">varchar</span>(<span class="number">30</span>); <span class="comment">-- 中间的那个需要修改的字符</span></span><br><span class="line"> <span class="keyword">DECLARE</span> str       <span class="type">varchar</span>(<span class="number">5000</span>); <span class="comment">-- 用于拼接的变量</span></span><br><span class="line"> <span class="keyword">SET</span> i = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">SET</span> str = <span class="built_in">column_name</span>;</span><br><span class="line"> <span class="keyword">SET</span> n = length(str)-length(REPLACE(str,"_",""))+<span class="number">1</span>; <span class="comment">-- 总共有多少次需要进行替换以及大小写变化</span></span><br><span class="line">    <span class="keyword">WHILE</span> i &lt; n <span class="keyword">DO</span> </span><br><span class="line">    <span class="keyword">SET</span> ind = LENGTH(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i)); <span class="comment">-- 特殊字符的下标</span></span><br><span class="line">  <span class="keyword">SET</span> left_str = CONCAT(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i),<span class="string">'_'</span>); <span class="comment">-- 特殊字符左边的字符串</span></span><br><span class="line"><span class="keyword">SET</span> right_str = </span><br><span class="line">SUBSTRING(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i-(n)),<span class="number">2</span>,LENGTH(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i-(n)))); <span class="comment">-- 特殊字符右边的字符串</span></span><br><span class="line"><span class="keyword">SET</span> midd_char = UPPER(SUBSTRING(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i-(n)),<span class="number">1</span>,<span class="number">1</span>)); <span class="comment">-- 需要变化成大写的字符</span></span><br><span class="line"><span class="keyword">SET</span> str = concat(left_str,midd_char,right_str); <span class="comment">-- 对str字符串变量进行重新赋值</span></span><br><span class="line"><span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">SET</span> property_name = REPLACE(str,"_","");</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="用于前端react使用"><a href="#用于前端react使用" class="headerlink" title="用于前端react使用"></a>用于前端react使用</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `generate_view_interface_model`(<span class="keyword">in</span> t_name <span class="type">char</span>(<span class="number">125</span>))</span><br><span class="line"><span class="keyword">BEGIN</span>  <span class="comment">-- 原来的procedure - sql7java, 用于前端生成基本属性映射，现在改名为  generate_view_interface_model</span></span><br><span class="line"><span class="keyword">DECLARE</span> columnName <span class="type">varchar</span>(<span class="number">1000</span>); <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">class</span> <span class="type">varchar</span>(<span class="number">125</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> property <span class="type">varchar</span>(<span class="number">5000</span>);   <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> columnPropertyStr <span class="type">varchar</span>(<span class="number">5000</span>); <span class="comment">-- 列属性字符串变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> resultInterface <span class="type">varchar</span>(<span class="number">5000</span>);             <span class="comment">-- 新增记录</span></span><br><span class="line"><span class="keyword">DECLARE</span> str <span class="type">varchar</span>(<span class="number">5000</span>);       <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> n  <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span> ;     <span class="comment">-- 总共的字段数</span></span><br><span class="line"><span class="keyword">DECLARE</span> i  <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>;      <span class="comment">-- 循环时的变量</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql2java(property_name <span class="type">varchar</span>(<span class="number">5000</span>));</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql2java;</span><br><span class="line"><span class="keyword">SET</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> columnPropertyStr = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> str = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> resultInterface = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">CALL</span> generate_class_mapperClass_name(t_name,<span class="string">''</span>,@className);</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">class</span> = @className;</span><br><span class="line"><span class="keyword">select</span> count(*) <span class="keyword">into</span> n <span class="keyword">from</span> information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name;</span><br><span class="line"><span class="keyword">WHILE</span> i &lt;= n <span class="keyword">DO</span> </span><br><span class="line"><span class="keyword">select</span> <span class="built_in">column_name</span> <span class="keyword">into</span> columnName <span class="keyword">from</span> information_schema.`<span class="keyword">columns</span>` <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i;</span><br><span class="line"><span class="keyword">CALL</span> generate_property_name(columnName,@propertyName);</span><br><span class="line"><span class="keyword">SET</span> property = @propertyName;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    concat(</span><br><span class="line">     <span class="string">'/*'</span>,</span><br><span class="line">         column_comment,</span><br><span class="line">         <span class="string">'*/\n'</span>,</span><br><span class="line">        property,</span><br><span class="line"><span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> is_nullable <span class="keyword">in</span> (<span class="string">'YES'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'?'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="string">''</span></span><br><span class="line"><span class="keyword">end</span>,</span><br><span class="line">":",</span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'varchar'</span>, <span class="string">'char'</span>, <span class="string">'text'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'string'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="string">'number'</span></span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">    <span class="string">';\n'</span></span><br><span class="line">    ) <span class="keyword">as</span> java <span class="keyword">into</span> columnPropertyStr </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    information_schema. <span class="keyword">columns</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i;</span><br><span class="line"><span class="keyword">SET</span> str = CONCAT(str,columnPropertyStr);</span><br><span class="line"><span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">SET</span> resultInterface = CONCAT(<span class="string">'export interface '</span>,<span class="keyword">class</span>,<span class="string">' &#123;\n'</span>,str,<span class="string">'&#125;'</span>);</span><br><span class="line"><span class="keyword">select</span> resultInterface;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">CREATE <span class="attribute">DEFINER</span>=`admin`@`%` PROCEDURE `page_helper`(<span class="keyword">in</span><span class="built_in"> page </span>int,<span class="keyword">in</span> pageSize int,<span class="keyword">in</span> sqlValue text(10000))</span><br><span class="line">BEGIN  -- 原来的procedure - sql12java,现在改名称为 page_helper</span><br><span class="line">DECLARE prepareSQL text(10000);</span><br><span class="line">DECLARE countSQL int<span class="built_in"> default </span>0;</span><br><span class="line">DECLARE count_sql text(10000);</span><br><span class="line">DECLARE select_sql text(10000);</span><br><span class="line"><span class="builtin-name">SET</span> count_sql = <span class="string">''</span>;</span><br><span class="line"><span class="builtin-name">SET</span> select_sql = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">IF</span><span class="built_in"> page </span>&lt; 1 THEN </span><br><span class="line"><span class="builtin-name">SET</span><span class="built_in"> page </span>= 1;</span><br><span class="line">END <span class="keyword">IF</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">IF</span> pageSize &lt; 0 THEN </span><br><span class="line"><span class="builtin-name">SET</span> pageSize = 10;</span><br><span class="line">END <span class="keyword">IF</span>;</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">SET</span> <span class="attribute">count_sql</span>=concat('select count(*) as count_sum <span class="keyword">from</span> ( <span class="string">',sqlValue,'</span> ) t<span class="string">');</span></span><br><span class="line"><span class="string">  SET @prepareCountSql = count_sql;</span></span><br><span class="line"><span class="string">prepare countSQL from @prepareCountSql; </span></span><br><span class="line"><span class="string">EXECUTE countSQL;           </span></span><br><span class="line"><span class="string">deallocate prepare countSQL;    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select page, pageSize as page_size;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SET select_sql=concat(sqlValue,'</span>  limit <span class="string">',page*pageSize-pageSize,'</span>,<span class="string">',pageSize);</span></span><br><span class="line"><span class="string">-- select select_sql;</span></span><br><span class="line"><span class="string">SET @preparesql = select_sql;</span></span><br><span class="line"><span class="string">prepare prepareSQL from @preparesql; </span></span><br><span class="line"><span class="string">EXECUTE prepareSQL;           </span></span><br><span class="line"><span class="string">deallocate prepare prepareSQL;    </span></span><br><span class="line"><span class="string">END</span></span><br></pre></td></tr></table></figure><h3 id="通过供应商名称获取得到产品编号"><a href="#通过供应商名称获取得到产品编号" class="headerlink" title="通过供应商名称获取得到产品编号"></a>通过供应商名称获取得到产品编号</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `select_productId_by_supplierName`(<span class="keyword">in</span> keyValue <span class="type">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">BEGIN</span>  <span class="comment">-- 原来的procedure - sql8java,用于中台当中的产品管理当中的关键字查询，通过供应商名称查找得到供应商编号，再进行对比产品表当中存在有供应商为查询得到的供应商编号，则取出该产品编号，现在改名为 select_productId_by_supplierName</span></span><br><span class="line"><span class="keyword">DECLARE</span> n TINYINT(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> t_supplier_id <span class="type">int</span>; <span class="comment">-- t_supplier表当中通过模糊查询出来的供应商编号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> cur_1 <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">select</span> t.id <span class="keyword">from</span> t_supplier t <span class="keyword">where</span> t.supplier_name <span class="keyword">like</span> keyValue <span class="keyword">and</span> t.`status`=<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">CONTINUE</span> <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">NOT</span> <span class="built_in">FOUND</span> <span class="keyword">SET</span> n=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql3java(product <span class="type">int</span>);<span class="comment">-- 该表的作用在于，如果存在有这样的产品则进行新增到该表当中最后进行查询该表即可</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql3java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> cur_1;                               <span class="comment">-- 打开游标，开始第一轮的遍历循环，循环的内容是通过关键字模糊查询出来的所有供应商编号,过滤删除掉的</span></span><br><span class="line"><span class="keyword">WHILE</span> n&lt;&gt;<span class="number">1</span> <span class="keyword">DO</span></span><br><span class="line"><span class="keyword">FETCH</span> cur_1 <span class="keyword">INTO</span> t_supplier_id;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> nn TINYINT(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span>;                    <span class="comment">-- 变量，代表的是t_product当中supplier_id字段不为空值的总条数</span></span><br><span class="line"><span class="keyword">DECLARE</span> supplier_ids <span class="type">varchar</span>(<span class="number">255</span>); <span class="comment">-- 进行查询出来供应商字段取值不为空的未进行拆分的supplierId字符串</span></span><br><span class="line"><span class="keyword">DECLARE</span> supp_id_value <span class="type">varchar</span>(<span class="number">255</span>);        <span class="comment">-- 新增入tmp_sql4java表的属性字段supp_id</span></span><br><span class="line"><span class="keyword">DECLARE</span> flag <span class="type">int</span>;                <span class="comment">-- 是否可以将产品编号进行新增到tmp_sql3java表当中的依据，如果大于0则新增当前循环的产品编号</span></span><br><span class="line"><span class="keyword">DECLARE</span> nnn <span class="type">int</span>;                  <span class="comment">-- supplier_ids字符串拆分成数组后的总长度</span></span><br><span class="line"><span class="keyword">DECLARE</span> iii <span class="type">int</span>;                  <span class="comment">-- 遍历supplier_ids拆分后数组的变量iii</span></span><br><span class="line"><span class="keyword">DECLARE</span> id_value <span class="type">int</span>;             <span class="comment">-- 新增入tmp_sql4java表的属性字段id</span></span><br><span class="line"><span class="keyword">DECLARE</span> supplier_id <span class="type">int</span>;           <span class="comment">-- 进行了拆分之后的supplierId编号</span></span><br><span class="line"><span class="keyword">DECLARE</span> product_id <span class="type">int</span>;            <span class="comment">-- 进行查询出来供应商字段取值不为空的产品编号</span></span><br><span class="line"><span class="keyword">DECLARE</span> cur_2 <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">select</span> tt.id,tt.supplier_id <span class="keyword">from</span> t_product tt <span class="keyword">where</span> tt.supplier_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">and</span> tt.`status`=<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">CONTINUE</span> <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">NOT</span> <span class="built_in">FOUND</span> <span class="keyword">SET</span> nn=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> cur_2;                               <span class="comment">-- 打开游标，开始第二轮的遍历循环,循环的内容是产品表当中所有supplier_id字段不为空的记录,过滤删除掉的</span></span><br><span class="line"><span class="keyword">WHILE</span> nn&lt;&gt;<span class="number">1</span> <span class="keyword">DO</span></span><br><span class="line"><span class="keyword">FETCH</span> cur_2 <span class="keyword">INTO</span> product_id,supplier_ids; <span class="comment">-- 获取数据产品编号以及供应商字段取值（未进行拆分的供应商编号字符串）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql4java(supp_id <span class="type">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql4java;<span class="comment">-- 每当循环产品表一条记录则刷新一遍tmp_sql4java表，当中存的值是每一条产品表记录当中的supplier_ids字符串进行拆分出来的数值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> flag=<span class="number">0</span>;   <span class="comment">-- 首先先定义值为0</span></span><br><span class="line"><span class="keyword">SET</span> iii=<span class="number">1</span>;    <span class="comment">-- 赋初始值，赋值为1的原因是我是从1开始的，所以约定好从第一个开始，也就是@i,其实不要也行</span></span><br><span class="line"><span class="keyword">call</span> fieldValue_split_by_comma(supplier_ids);<span class="comment">-- 拆分之后进表</span></span><br><span class="line"><span class="keyword">SELECT</span> count(*) <span class="keyword">into</span> nnn <span class="keyword">FROM</span> tmp_sql5java; <span class="comment">-- 为nnn进行赋值</span></span><br><span class="line"><span class="keyword">while</span> iii &lt;= nnn <span class="keyword">DO</span> <span class="comment">-- 进行循环遍历拆分supplierIds的数组</span></span><br><span class="line"><span class="keyword">SELECT</span> s_id <span class="keyword">into</span> supp_id_value </span><br><span class="line"><span class="keyword">FROM</span>  </span><br><span class="line">tmp_sql5java </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">num=iii;</span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> tmp_sql4java <span class="keyword">values</span> (supp_id_value);</span><br><span class="line"><span class="keyword">SET</span> iii=iii+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> count(*) <span class="keyword">into</span> flag <span class="keyword">from</span> tmp_sql4java  <span class="keyword">where</span> tmp_sql4java.supp_id=t_supplier_id;</span><br><span class="line"><span class="keyword">if</span>(flag&gt;<span class="number">0</span>) <span class="keyword">THEN</span> <span class="comment">-- 如果存在有拆分出来的供应商编号与模糊查找出来的供应商编号对应的上的话则</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp_sql3java <span class="keyword">values</span>(product_id);<span class="comment">-- 将当前循环到的该产品编号存入临时表当中，否则不作处理</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">while</span>; #结束循环</span><br><span class="line"><span class="keyword">close</span> cur_2; #关闭游标<span class="number">2</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"> <span class="keyword">end</span> <span class="keyword">while</span>; #结束循环</span><br><span class="line"> <span class="keyword">close</span> cur_1; #关闭游标<span class="number">1</span></span><br><span class="line"> <span class="keyword">END</span>;</span><br><span class="line">    <span class="comment">-- select product from tmp_sql3java;</span></span><br><span class="line">  <span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="通过供应商编号获取产品编号"><a href="#通过供应商编号获取产品编号" class="headerlink" title="通过供应商编号获取产品编号"></a>通过供应商编号获取产品编号</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `select_productId_by_supplierId`(<span class="keyword">in</span> keyValue <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span>   <span class="comment">-- 通过供应商编号进行查找 产品对应有供应商编号的产品编号</span></span><br><span class="line"><span class="keyword">DECLARE</span> n <span class="type">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> t_supplier_id <span class="type">int</span>; <span class="comment">-- t_supplier表当中通过模糊查询出来的供应商编号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> cur_1 <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">select</span> t.id <span class="keyword">from</span> t_supplier t <span class="keyword">where</span> t.id = keyValue <span class="keyword">and</span> t.`status`=<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">SET</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> count(*) <span class="keyword">into</span> n <span class="keyword">from</span>  t_supplier t <span class="keyword">where</span> t.id = keyValue <span class="keyword">and</span> t.`status`=<span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql3java(product <span class="type">int</span>);<span class="comment">-- 该表的作用在于，如果存在有这样的产品则进行新增到该表当中最后进行查询该表即可</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql3java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> cur_1;                               <span class="comment">-- 打开游标，开始第一轮的遍历循环，循环的内容是通过关键字模糊查询出来的所有供应商编号,过滤删除掉的</span></span><br><span class="line"><span class="keyword">WHILE</span> i&lt;=n <span class="keyword">DO</span></span><br><span class="line"><span class="keyword">FETCH</span> cur_1 <span class="keyword">INTO</span> t_supplier_id;  </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> nn TINYINT(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span>;                    <span class="comment">-- 变量，代表的是t_product当中supplier_id字段不为空值的总条数</span></span><br><span class="line"><span class="keyword">DECLARE</span> supplier_ids <span class="type">varchar</span>(<span class="number">255</span>); <span class="comment">-- 进行查询出来供应商字段取值不为空的未进行拆分的supplierId字符串</span></span><br><span class="line"><span class="keyword">DECLARE</span> supp_id_value <span class="type">varchar</span>(<span class="number">255</span>);        <span class="comment">-- 新增入tmp_sql4java表的属性字段supp_id</span></span><br><span class="line"><span class="keyword">DECLARE</span> flag <span class="type">int</span>;                <span class="comment">-- 是否可以将产品编号进行新增到tmp_sql4java表当中的依据，如果大于0则新增当前循环的产品编号</span></span><br><span class="line"><span class="keyword">DECLARE</span> nnn <span class="type">int</span>;                  <span class="comment">-- supplier_ids字符串拆分成数组后的总长度</span></span><br><span class="line"><span class="keyword">DECLARE</span> iii <span class="type">int</span>;                  <span class="comment">-- 遍历supplier_ids拆分后数组的变量iii</span></span><br><span class="line"><span class="keyword">DECLARE</span> id_value <span class="type">int</span>;             <span class="comment">-- 新增入tmp_sql4java表的属性字段id</span></span><br><span class="line"><span class="keyword">DECLARE</span> supplier_id <span class="type">int</span>;           <span class="comment">-- 进行了拆分之后的supplierId编号</span></span><br><span class="line"><span class="keyword">DECLARE</span> product_id <span class="type">int</span>;            <span class="comment">-- 进行查询出来供应商字段取值不为空的产品编号</span></span><br><span class="line"> <span class="keyword">DECLARE</span> cur_2 <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">select</span> tt.id,tt.supplier_id <span class="keyword">from</span> t_product tt <span class="keyword">where</span> tt.supplier_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">and</span> tt.`status`=<span class="string">'0'</span>;</span><br><span class="line"> <span class="keyword">DECLARE</span> <span class="keyword">CONTINUE</span> <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">NOT</span> <span class="built_in">FOUND</span> <span class="keyword">SET</span> nn=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">open</span> cur_2;                               <span class="comment">-- 打开游标，开始第二轮的遍历循环,循环的内容是产品表当中所有supplier_id字段不为空的记录,过滤删除掉的</span></span><br><span class="line"> <span class="keyword">WHILE</span> nn&lt;&gt;<span class="number">1</span> <span class="keyword">DO</span></span><br><span class="line"> <span class="keyword">FETCH</span> cur_2 <span class="keyword">INTO</span> product_id,supplier_ids; <span class="comment">-- 获取数据产品编号以及供应商字段取值（未进行拆分的供应商编号字符串）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql4java(supp_id <span class="type">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql4java;<span class="comment">-- 每当循环产品表一条记录则刷新一遍tmp_sql4java表，当中存的值是每一条产品表记录当中的supplier_ids字符串进行拆分出来的数值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> flag=<span class="number">0</span>;   <span class="comment">-- 首先先定义值为0</span></span><br><span class="line"><span class="keyword">SET</span> iii=<span class="number">1</span>;    <span class="comment">-- 赋初始值，赋值为1的原因是我是从1开始的，所以约定好从第一个开始，也就是@i,其实不要也行</span></span><br><span class="line"><span class="keyword">call</span> fieldValue_split_by_comma(supplier_ids);<span class="comment">-- 拆分之后进表</span></span><br><span class="line"><span class="keyword">SELECT</span> count(*) <span class="keyword">into</span> nnn <span class="keyword">FROM</span> tmp_sql5java; <span class="comment">-- 为nnn进行赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> iii &lt;= nnn <span class="keyword">DO</span> <span class="comment">-- 进行循环遍历拆分supplierIds的数组</span></span><br><span class="line"><span class="keyword">SELECT</span> s_id <span class="keyword">into</span> supp_id_value </span><br><span class="line"><span class="keyword">FROM</span>  </span><br><span class="line">tmp_sql5java </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">num=iii;</span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> tmp_sql4java <span class="keyword">values</span> (supp_id_value);</span><br><span class="line"><span class="keyword">SET</span> iii=iii+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">select</span> count(*) <span class="keyword">into</span> flag <span class="keyword">from</span> tmp_sql4java  <span class="keyword">where</span> tmp_sql4java.supp_id=t_supplier_id;</span><br><span class="line"> <span class="keyword">IF</span>(flag&gt;<span class="number">0</span>) <span class="keyword">THEN</span> <span class="comment">-- 如果存在有拆分出来的供应商编号与模糊查找出来的供应商编号对应的上的话则</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> tmp_sql3java <span class="keyword">values</span>(product_id);<span class="comment">-- 将当前循环到的该产品编号存入临时表当中，否则不作处理</span></span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">end</span> <span class="keyword">while</span>; #结束循环</span><br><span class="line"> <span class="keyword">close</span> cur_2; #关闭游标<span class="number">2</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">end</span> <span class="keyword">while</span>; #结束循环</span><br><span class="line"> <span class="keyword">close</span> cur_1; #关闭游标<span class="number">1</span></span><br><span class="line"> <span class="keyword">END</span>;</span><br><span class="line">    <span class="comment">-- select product from tmp_sql3java;</span></span><br><span class="line">  <span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="通过供应商编号获取得到产品"><a href="#通过供应商编号获取得到产品" class="headerlink" title="通过供应商编号获取得到产品"></a>通过供应商编号获取得到产品</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `select_products_by_supplierId`(<span class="keyword">in</span> supplier_id <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> <span class="comment">-- 原来的procedure - sql10java,现在改名称为 select_product_by_params</span></span><br><span class="line"><span class="keyword">DECLARE</span> n <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> s <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> productNo <span class="type">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> str <span class="type">varchar</span>(<span class="number">256</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> concatSQL <span class="type">varchar</span>(<span class="number">256</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> sqls text(<span class="number">10000</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> prepareSQL text(<span class="number">10000</span>);</span><br><span class="line">#将局部变量转换成会话变量</span><br><span class="line">#动态<span class="keyword">sql</span>语言只接受会话变量</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> str=<span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> concatSQL=<span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> sqls=<span class="string">''</span>;</span><br><span class="line"> <span class="keyword">call</span> select_productId_by_supplierId(supplier_id);</span><br><span class="line">  <span class="keyword">select</span> count(*) <span class="keyword">into</span> n <span class="keyword">from</span> tmp_sql3java;</span><br><span class="line"> <span class="keyword">if</span> n&gt;<span class="number">0</span> <span class="keyword">then</span> </span><br><span class="line"> <span class="keyword">BEGIN</span></span><br><span class="line"> <span class="keyword">DECLARE</span> cur_3 <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">select</span> product <span class="keyword">from</span> tmp_sql3java;</span><br><span class="line"> <span class="keyword">open</span> cur_3;</span><br><span class="line"><span class="keyword">while</span> i&lt;=n <span class="keyword">do</span></span><br><span class="line"> <span class="keyword">fetch</span> cur_3 <span class="keyword">into</span> productNo;</span><br><span class="line"> <span class="keyword">SET</span> str=concat(str,productNo,",");</span><br><span class="line"><span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line"><span class="keyword">SET</span> str= substring(str, <span class="number">1</span>, length(str)<span class="number">-1</span>);</span><br><span class="line"> <span class="keyword">close</span> cur_3;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">SET</span> concatSQL=concat(" and b.id in(",str,")");</span><br><span class="line"> <span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">SET</span> sqls = concat(</span><br><span class="line"><span class="string">'select       </span></span><br><span class="line"><span class="string">  a.id, a.product_id, a.image, a.`name`, a.zh_name, </span></span><br><span class="line"><span class="string"> a.customs_code, a.unit_price, a.sku, a.fn_sku_no, </span></span><br><span class="line"><span class="string"> a.fn_sku_code, a.packing_size_long, a.packing_size_wide, </span></span><br><span class="line"><span class="string"> a.packing_size_height, a.box_weight, a.packing_num, a.card_board_load_num, </span></span><br><span class="line"><span class="string"> a.product_long, a.product_width, a.product_height, a.product_weight, </span></span><br><span class="line"><span class="string"> a.cal_unit,purpose, a.brand_info, a.material, a.model, </span></span><br><span class="line"><span class="string"> a.remark, a.attr_name, a.attr_value, a.`status` </span></span><br><span class="line"><span class="string">from t_product_attr a,t_product b </span></span><br><span class="line"><span class="string">where</span></span><br><span class="line"><span class="string">a.product_id=b.id </span></span><br><span class="line"><span class="string">and a.`status`=0 '</span>,</span><br><span class="line">concatSQL</span><br><span class="line">);</span><br><span class="line">  <span class="comment">-- select sqls;</span></span><br><span class="line">   <span class="keyword">SET</span> @preparesql = sqls;</span><br><span class="line">   <span class="keyword">prepare</span> prepareSQL <span class="keyword">from</span> @preparesql; <span class="comment">-- 预处理需要执行的动态SQL，其中stmt是一个变量</span></span><br><span class="line">   <span class="keyword">EXECUTE</span> prepareSQL;           <span class="comment">-- 执行SQL语句</span></span><br><span class="line">   <span class="keyword">deallocate</span> <span class="keyword">prepare</span> prepareSQL;     <span class="comment">-- 释放掉预处理段</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="渠道订单报表"><a href="#渠道订单报表" class="headerlink" title="渠道订单报表"></a>渠道订单报表</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `view_channel_order_report`(<span class="keyword">in</span> channelOrderId <span class="type">int</span>(<span class="number">11</span>))</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> step_id <span class="type">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> n <span class="type">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> step_finished_date <span class="type">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> id2 <span class="type">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> step_name2 <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> is_delay2 <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> standard_time2 <span class="type">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> actual_delay2 <span class="type">VARCHAR</span>(<span class="number">64</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> cur_step <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">select</span> id <span class="keyword">from</span> t_channel_order_step <span class="keyword">where</span> channel_order_id=channelOrderId;</span><br><span class="line"><span class="keyword">select</span> count(*) <span class="keyword">into</span> n <span class="keyword">from</span> t_channel_order_step <span class="keyword">where</span> channel_order_id=channelOrderId;</span><br><span class="line"><span class="keyword">SET</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_channel_order_report(</span><br><span class="line">id <span class="type">int</span>(<span class="number">11</span>), step_name <span class="type">varchar</span>(<span class="number">255</span>), is_delay <span class="type">varchar</span>(<span class="number">255</span>), standard_time <span class="type">int</span>(<span class="number">11</span>), actual_delay <span class="type">varchar</span>(<span class="number">64</span>) );</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tmp_channel_order_report;</span><br><span class="line"><span class="keyword">open</span> cur_step;</span><br><span class="line"><span class="keyword">WHILE</span> i&lt;n <span class="keyword">DO</span></span><br><span class="line"><span class="keyword">fetch</span> cur_step <span class="keyword">into</span> step_id;</span><br><span class="line"><span class="keyword">call</span> last_step_finished_date(step_id,step_finished_date);<span class="comment">-- 当前步骤id的上一步骤完成时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">id,`<span class="type">name</span>`,standard_time,</span><br><span class="line"><span class="keyword">if</span>(finished_date <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line"> ROUND((finished_date-step_finished_date)/<span class="number">3600</span>,<span class="number">1</span>),</span><br><span class="line"> <span class="keyword">if</span>(activity=<span class="number">1</span>, ROUND((unix_timestamp(now())-step_finished_date)/<span class="number">3600</span>,<span class="number">1</span>), <span class="string">'-'</span>)</span><br><span class="line">) <span class="keyword">as</span> actual_delay,</span><br><span class="line"><span class="keyword">if</span>(finished_date <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line"> <span class="keyword">if</span>(ROUND((finished_date-step_finished_date)/<span class="number">3600</span>,<span class="number">1</span>)&gt;standard_time,<span class="string">'是'</span>,<span class="string">'否'</span>),</span><br><span class="line"> <span class="keyword">if</span>(activity=<span class="number">1</span>,  <span class="keyword">if</span>(ROUND((unix_timestamp(now())-step_finished_date)/<span class="number">3600</span>,<span class="number">1</span>)&gt;standard_time,<span class="string">'是'</span>,<span class="string">'否'</span>), <span class="string">'否'</span>)</span><br><span class="line">) <span class="keyword">as</span> is_delay</span><br><span class="line"></span><br><span class="line"><span class="keyword">into</span> id2,step_name2,standard_time2,actual_delay2,is_delay2  </span><br><span class="line"><span class="keyword">from</span> t_channel_order_step <span class="keyword">where</span> id=step_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp_channel_order_report <span class="keyword">values</span>(id2,step_name2,is_delay2,standard_time2,actual_delay2);</span><br><span class="line"><span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">close</span> cur_step;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tmp_channel_order_report;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER=<span class="string">`admin`</span>@<span class="string">`%`</span> <span class="keyword">FUNCTION</span> <span class="string">`currval`</span>(seq_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>)) <span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">     <span class="keyword">DECLARE</span> <span class="keyword">value</span> <span class="built_in">INTEGER</span>; </span><br><span class="line">     <span class="keyword">SET</span> <span class="keyword">value</span> = <span class="number">0</span>; </span><br><span class="line">     <span class="keyword">SELECT</span> current_value <span class="keyword">INTO</span> <span class="keyword">value</span> </span><br><span class="line">          <span class="keyword">FROM</span> <span class="keyword">sequence</span></span><br><span class="line">          <span class="keyword">WHERE</span> <span class="keyword">name</span> = seq_name; </span><br><span class="line">     RETURN value; </span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DEFINER=<span class="string">`admin`</span>@<span class="string">`%`</span> <span class="keyword">FUNCTION</span> <span class="string">`nextval`</span>(seq_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>)) <span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">     <span class="keyword">UPDATE</span> <span class="keyword">sequence</span></span><br><span class="line">          <span class="keyword">SET</span> current_value = current_value + <span class="keyword">increment</span> </span><br><span class="line">          <span class="keyword">WHERE</span> <span class="keyword">name</span> = seq_name; </span><br><span class="line">     RETURN currval(seq_name); </span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DEFINER=<span class="string">`admin`</span>@<span class="string">`%`</span> <span class="keyword">FUNCTION</span> <span class="string">`setval`</span>(seq_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>), <span class="keyword">value</span> <span class="built_in">INTEGER</span>) <span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">     <span class="keyword">UPDATE</span> <span class="keyword">sequence</span></span><br><span class="line">          <span class="keyword">SET</span> current_value = <span class="keyword">value</span> </span><br><span class="line">          <span class="keyword">WHERE</span> <span class="keyword">name</span> = seq_name; </span><br><span class="line">     RETURN currval(seq_name); </span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 领赫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领赫 </tag>
            
            <tag> 存储过程 </tag>
            
            <tag> Sql </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于SpringBoot-邮件服务</title>
      <link href="/2020/04/14/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/04/14/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="参考Blog"><a href="#参考Blog" class="headerlink" title="参考Blog"></a>参考Blog</h2><ul><li><a href="https://blog.csdn.net/weixin_44767463/article/details/100688643" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44767463/article/details/100688643</a></li><li><a href="https://blog.csdn.net/daa20/article/details/88868807" target="_blank" rel="noopener">https://blog.csdn.net/daa20/article/details/88868807</a></li><li><a href="https://www.cnblogs.com/achengmu/p/10955765.html" target="_blank" rel="noopener">https://www.cnblogs.com/achengmu/p/10955765.html</a></li></ul><h2 id="API官方文档"><a href="#API官方文档" class="headerlink" title="API官方文档"></a>API官方文档</h2><ul><li><a href="https://sendgrid.api-docs.io/" target="_blank" rel="noopener">https://sendgrid.api-docs.io/</a></li><li><a href="https://sendgrid.com/docs/for-developers/sending-email/getting-started-smtp/" target="_blank" rel="noopener">https://sendgrid.com/docs/for-developers/sending-email/getting-started-smtp/</a></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>邮件样式html不兼容—已解决</li><li>邮件附件名称乱码—已解决</li><li>邮件发送到了垃圾箱—已解决</li><li>邮件使用多线程进行异步处理—已解决</li><li>邮件发送不成功如何处理—面试官提出的问题</li><li>邮件发送使用多线程，关于多线程相关的面试问题</li></ol><ul><li>邮件发送不成功如何处理  </li></ul><p>这个问题我记得我当时的回答是这样的：<br>因为在领赫这个项目当中发送邮件是通过多线程的方式进行发送的邮件，也就是异步处理发送邮件的这个业务。<br>然后面试官就问，如果通过这个多线程发送邮件，但是这个邮件并未发送成功该如何处理？<br>答：因为SendGrid发送邮件时如果发送成功会返回一个200的发送成功的响应码回来；也有的时候并不会发送200的响应码回来，也就是当渠道不稳定的时候，异常的时候，那么这个时候我们系统是没有对这种情况作出处理。因为领赫这个项目是初稿。还有很多需要完善的地方。当然了针对这个问题，我认为所需要作出的完善就是，可以建一张关于发送账单邮件的表，把每一次发送邮件的记录，发送邮件时间，发送人，发送内容，发送状态（未发送/成功/失败）等有必要记录下来的内容映射到表中的字段。而后台当中在每次发送邮件内容的操作旁，如果读取得到该相应操作的发送邮件未成功，可以点击重试发送邮件相关按钮进行重新操作。  </p><p>而且有个点很类似，就是获取paypal的支付链接的时候，因为是沙箱环境，paypal沙箱环境又在做更新处理，我遇到好几次情况就是paypal沙箱环境不稳定，然后返回的token无效，也就是说我通过这个token去获取paypal沙箱环境当中的支付链接的时候无法获取得到返回401响应码，也就是说在获取支付链接的这个业务操作的时候，如果遇到paypal，也就是渠道异常的时候该如何处理，david就建议说重试三次，如果三次内paypal未获取成功那么就判定为paypal渠道问题；否则在三次内进行获取paypal支付链接。不然一直循环获取支付链接的话，会给服务器带来不必要的麻烦，或者说压力。</p><ul><li>多线程</li></ul><p>这个也是面试官问我的一个问题，他问我Runnable和Thread 有什么区别？<br>因为我在项目当中是使用多线程完成的这个发送邮件的这个功能。<br>然后被问到有关多线程相关的问题也是人之常情。<br>但是我不会。<br>我就答了Thread是类，可继承；Runnable是接口多实现。<br>哦豁。其实领赫项目当中有关多线程的操作我都是直接百度来的代码。也怪自己对待面试不够认真。<br>代码：  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package com.yourshares.configuration;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.sendgrid.*;</span><br><span class="line">import com.yourshares.common.tools.LogFileName;</span><br><span class="line">import com.yourshares.common.utils.LoggerUtils;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> MailThread extends Thread&#123;</span><br><span class="line">    Logger logger = LoggerUtils.<span class="constructor">Logger(LogFileName.API)</span>;</span><br><span class="line"></span><br><span class="line">    String contentHtml=<span class="string">""</span>;</span><br><span class="line">    String mainMail=<span class="string">""</span>;</span><br><span class="line">    String sendgridApiKey=<span class="string">""</span>;</span><br><span class="line">    public <span class="constructor">MailThread(JSONObject <span class="params">mail</span>)</span> &#123;</span><br><span class="line">        this.contentHtml = mail.get<span class="constructor">String(<span class="string">"contentHtml"</span>)</span>;</span><br><span class="line">        this.mainMail = mail.get<span class="constructor">String(<span class="string">"mainMail"</span>)</span>;</span><br><span class="line">        this.sendgridApiKey = mail.get<span class="constructor">String(<span class="string">"sendgridApiKey"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要执行的部分</span></span><br><span class="line">    public void run<span class="literal">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        logger.info(<span class="string">"=========================MailThread========================="</span>);</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//发送邮件给客户嘞</span></span><br><span class="line">            Email from = <span class="keyword">new</span> <span class="constructor">Email(<span class="string">"info@fbabee.com"</span>)</span>;<span class="comment">//发件方@outlook.com</span></span><br><span class="line">            String subject = <span class="string">"领赫 - 消息提醒(*^▽^*)"</span>;<span class="comment">//</span></span><br><span class="line">            Email <span class="keyword">to</span> = <span class="keyword">new</span> <span class="constructor">Email(<span class="params">mainMail</span>)</span>;<span class="comment">//客户的主邮箱 mainMail</span></span><br><span class="line">            Content content = <span class="keyword">new</span> <span class="constructor">Content(<span class="string">"text/html"</span>,<span class="params">contentHtml</span>)</span>;</span><br><span class="line">            Mail mail = <span class="keyword">new</span> <span class="constructor">Mail(<span class="params">from</span>, <span class="params">subject</span>, <span class="params">to</span>, <span class="params">content</span>)</span>;</span><br><span class="line">            String apiKey = sendgridApiKey;<span class="comment">//这个key来源参考4如何获取apiKey</span></span><br><span class="line">            SendGrid sg = <span class="keyword">new</span> <span class="constructor">SendGrid(<span class="params">apiKey</span>)</span>;</span><br><span class="line">            Request request = <span class="keyword">new</span> <span class="constructor">Request()</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                request.set<span class="constructor">Method(Method.POST)</span>;</span><br><span class="line">                request.set<span class="constructor">Endpoint(<span class="string">"mail/send"</span>)</span>;</span><br><span class="line">                request.set<span class="constructor">Body(<span class="params">mail</span>.<span class="params">build</span>()</span>);</span><br><span class="line">                Response response = sg.api(request);</span><br><span class="line">                <span class="keyword">if</span>(response==null<span class="operator"> || </span><span class="module-access"><span class="module"><span class="identifier">JSONObject</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">response</span>)</span>.length<span class="literal">()</span>&lt;<span class="number">6</span>)&#123;<span class="comment">//发送账单后的响应信息做发送是否成功检查</span></span><br><span class="line">                    logger.info(<span class="string">"发送消息异常，渠道无响应"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(<span class="string">"sendMailResponse:[&#123;&#125;]"</span>,<span class="module-access"><span class="module"><span class="identifier">JSONObject</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">response</span>)</span>);</span><br><span class="line">                <span class="keyword">if</span>(response!=null<span class="operator"> &amp;&amp; </span><span class="string">"202"</span>.equals(response.get<span class="constructor">StatusCode()</span>+<span class="string">""</span>))&#123;</span><br><span class="line">                    logger.info(<span class="string">"消息发送成功：[&#123;&#125;]"</span>,response.get<span class="constructor">StatusCode()</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    logger.info(<span class="string">"发送消息异常，消息未发送成功，请稍后重试"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//发送账单信息之后，进行更新相关信息，即是否发送成功、财务状态改为待支付etc</span></span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                logger.error(<span class="string">"请求异常捕获，MSG=[&#123;&#125;]"</span>,e.get<span class="constructor">Message()</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">"=========================MailThread END========================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次调用的时候：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送邮件给客户嘞</span></span><br><span class="line">                       String url=<span class="string">""</span>;</span><br><span class="line">                       String url0=noticeUrl.split(<span class="string">"\\?"</span>)<span class="literal">[<span class="number">0</span>]</span>;<span class="comment">//前缀 http://114.116.22.115:8888/index.html#/seek/detail</span></span><br><span class="line">                       String url1=(noticeUrl.split(<span class="string">"\\?"</span>)<span class="literal">[<span class="number">1</span>]</span>).split(<span class="string">"&amp;"</span>).length!=<span class="number">2</span>?<span class="string">""</span>:(noticeUrl.split(<span class="string">"\\?"</span>)<span class="literal">[<span class="number">1</span>]</span>).split(<span class="string">"&amp;"</span>)<span class="literal">[<span class="number">1</span>]</span>;<span class="comment">//后缀 tab=1</span></span><br><span class="line">                       url=url0+<span class="string">"?id="</span>+tDeliveryOrder.get<span class="constructor">Id()</span>+<span class="string">"&amp;"</span>+url1;</span><br><span class="line">                       TConsumer tConsumer=tConsumerService.find<span class="constructor">By(<span class="string">"id"</span>,<span class="params">tDeliveryOrder</span>.<span class="params">getConsumerId</span>()</span>);<span class="comment">//客户id</span></span><br><span class="line">                       TMiddleClientUser tMiddleClientUser=tMiddleClientUserService.find<span class="constructor">By(<span class="string">"id"</span>,<span class="params">tConsumer</span>.<span class="params">getAccountId</span>()</span>);</span><br><span class="line">                       String contentHtml=get<span class="constructor">MailContent(<span class="params">tMiddleClientUser</span>.<span class="params">getFirstName</span>()</span>+tMiddleClientUser.get<span class="constructor">LastName()</span>,tDeliveryOrder.get<span class="constructor">TakeDeliveryId()</span>,url);<span class="comment">//客户名称,询价单号,打开的页面地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                       JSONObject mailJSON=<span class="keyword">new</span> <span class="constructor">JSONObject()</span>;</span><br><span class="line">                       mailJSON.put(<span class="string">"contentHtml"</span>,contentHtml);</span><br><span class="line">                       mailJSON.put(<span class="string">"mainMail"</span>,tConsumer.get<span class="constructor">MainMail()</span>);</span><br><span class="line">                       mailJSON.put(<span class="string">"sendgridApiKey"</span>,sendgridApiKey);</span><br><span class="line">                       MailThread thread=<span class="keyword">new</span> <span class="constructor">MailThread(<span class="params">mailJSON</span>)</span>;</span><br><span class="line">                       thread.start<span class="literal">()</span>;</span><br></pre></td></tr></table></figure><h2 id="邮件效果"><a href="#邮件效果" class="headerlink" title="邮件效果"></a>邮件效果</h2><p>先给晾出邮件的效果。  </p><blockquote><p>第一次尝试使用SendGrid发送邮件：  </p></blockquote><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX4BFvHaAjGTO21ZnBL.8UU3b*ATRZ4XiOCUkgfb9eneWEQNte7w0GoX1kSJ0FH9dWBYr2bPZsVyvEzU4I5UZcvQ!/r" alt="image"></p><blockquote><p>后来发送的时候想发送html，结果发送的内容变成了html代码，而且附件的名称还乱码，真是神奇了。  </p></blockquote><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX7toXqNpL60NEetxpe64wpKDyzAo*4fNUC1mz*aywJBexml.2A01S4fGOgzmYmL2WGgKM.q.l4QUgSqXEhbNih4!/r" alt="image"><br><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANXzSDjZfHnJ9mVms8QIiTTM5E82q7xnacy5AsQwUoZX78PFijAGBtOzjLr*kiZ3*he.v4GvE6R5kMe2G.gAGdBAw!/r" alt="image"></p><blockquote><p>再后来我想对这个img进行设置大小这些个，结果…  </p></blockquote><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX2WVdozPixujwI5BIkbfJRQ6z4ZH7p4jZ3L.gKsw*WFUuwprQ7mvaJVOyu.Pk0NAU9BgnRH.WcXZi1YkK0fiujA!/r" alt="image"></p><blockquote><p>后来我就想啊，阿里云每次给我发的样式也还可以啊，于是骚操作，我就f12，把阿里云的样式代码复制了一份下来当成邮件内容进行发送，结果阿里云的没毛病。  </p></blockquote><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX9l8TsJ01xt0XPvt76uekv8s0BNRW6rBUC1lUqyB05yltJEu.*u5B5PdmHmYvvhaOcziChD8auF5KgRi1uJoSU4!/r" alt="image"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX5pYjBiFD.HNLVin2rf4cc3*OODMx3u4*cCJXvNCi3o6qSDKVl1kV1zDX3ti3bMOX.JxP45zmntChdg*5GkQt0Y!/r" alt="image"></p><blockquote><p>解决一下附件名称乱码问题</p></blockquote><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX9yT4s8vLJLJukFjyzCWLe6FKYZYMBrRfIrdvrJ.PI7sY8AD7eL15JpEIxbNc4kzQY*212Qna24KROrkbdB7Wi4!/r" alt="image"><br><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX.igs8ZNrQGSq0f.L0h1vNVp883OoZjrpZLGlw*TO1U765OIhUdw7dzZnE4GhqzujJ9uDCVpBqd4vewcVeuB7e0!/r" alt="image"></p><blockquote><p>从下面开始就开始了我的账单样式兼容旅程</p></blockquote><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX*YVFKePJU0NOSZxmxuU8vJOCtT536pXYkUeec1XBnnLojgmaqt7pVBtPTC72*8YOeC1BtJ30iOz2kH*mOr01ds!/r" alt="image"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX4o*UiwIyuBDv78s8bWgh8ovgCmSscpQ9GcHHHqS4uy7HrXQb0Kt4gSDH.c0u5m5sU01tkhUCD0g67rwp8kfkeg!/r" alt="image"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX1jVgZSussaLt.N1Nt8bdp0pUWqnjTI8WaLw23wLoMKImUEoXx0VKLkzKZjpQc5ApJyVpocGX0EWqV3znFS1WrY!/r" alt="image"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX*GenUxHQqrSVsK0vfB6eTKVVPqcw.7vxBpMlkX6RH*9biADj0DcHG0KiEp.5HS.pmONx2TT1VgHUvD2EnZwi4U!/r" alt="image"></p><blockquote><p>处理好的账单样式</p></blockquote><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX8Rl*OZLw8E6ubzxv4R*d3VmFAvHE5PEHKFYhQD3775lpeHG8a3theqOuZoGVZdhf.AbkCILhDcu5nqttpi4*gE!/r" alt="image"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX6ThGnF7nbCkLiuC5NSFqzMuwoM0YuF3WM5cQE93CTtA9V9ajEh7qKsGiUCiAABSdcpL3jPkUHPm.RsD.MhG.pE!/r" alt="image"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANXyx4SEiOmlqZfzszuKcknSsjLVQJkF**PiXP31WycOzfahyCTxLlPbOW73pgeapNqw4nI9tldk9XUK0BITSj5XU!/r" alt="image"></p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANXzrzsI.fkttQUi7wb7EOmgdAxOPNsOH.vusV*31bHJxNEr9MRXpEWDagd6DlUymkid0VXPiRTPNWm1JFOSmYwKk!/r" alt="image"></p><h2 id="SendGrid"><a href="#SendGrid" class="headerlink" title="SendGrid"></a>SendGrid</h2><h3 id="SendGrid介绍"><a href="#SendGrid介绍" class="headerlink" title="SendGrid介绍"></a>SendGrid介绍</h3><p>首先介绍一下SendGrid邮件服务。  </p><blockquote><p>百度百科</p></blockquote><p>SendGrid 是一个电子邮件服务平台，可以帮助市场营销人员跟踪他们的电子邮件统计数据。<br>致力于帮助公司管理事务性邮件，包括航运通知、简报和注册确认等。</p><p>反正理解为就是一个用来发邮件的第三方就是的。<br>链接：<a href="https://app.sendgrid.com/" target="_blank" rel="noopener">https://app.sendgrid.com/</a><br>注册登录进去之后进行一系列操作，你将会获得你的账号、密码、api_key_id、api_key这些个东西就可以了。</p><h3 id="SendGrid-maven依赖"><a href="#SendGrid-maven依赖" class="headerlink" title="SendGrid maven依赖"></a>SendGrid maven依赖</h3><p>maven依赖jar包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.sendgrid/sendgrid-java --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sendgrid<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sendgrid-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SendGrid-Demo"><a href="#SendGrid-Demo" class="headerlink" title="SendGrid Demo"></a>SendGrid Demo</h3><p>下面我就贴一下测试demo:  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.yourshares.modelTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.paypal.base.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> com.sendgrid.*;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.Tester;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.common.tools.LogFileName;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.common.utils.LoggerUtils;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.service.TOutRepoOrderExpenseService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mail 模块测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailTest</span> <span class="title">extends</span> <span class="title">Tester</span> </span>&#123;</span><br><span class="line">    <span class="type">Logger</span> logger = <span class="type">LoggerUtils</span>.<span class="type">Logger</span>(<span class="type">LogFileName</span>.<span class="type">API</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> sendgridApiKey=<span class="string">"此处填上您在SendGrid上的APIKEY"</span>;</span><br><span class="line"><span class="comment">//    private final static String DEST = "D:\\80afa41a3bfc474cbf1ac8b5bc1d.pdf";//生成pdf的路径</span></span><br><span class="line"><span class="comment">//    private final static String SRC = "D:\\3b33a68bbf52417aac48687937352464.html";//html文件路径</span></span><br><span class="line"><span class="comment">//    public static final String FONT = "F:\otosanscjksc_downcc\otoSansCJKSC\otoSansCJKsc-Thin.otf";//本地字体路径（百度下载）</span></span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void style<span class="constructor">Test()</span>&#123;</span><br><span class="line">      String url=<span class="string">""</span>;</span><br><span class="line">      String noticeUrl=<span class="string">"http://114.116.22.115:8888/index.html#/pickup/directlist/detail?id=直发提货单ID"</span>;</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"url0:  "</span>+noticeUrl.split(<span class="string">"\\?"</span>)<span class="literal">[<span class="number">0</span>]</span>);</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"url1:  "</span>+noticeUrl.split(<span class="string">"\\?"</span>)<span class="literal">[<span class="number">1</span>]</span>);</span><br><span class="line">      String url0=noticeUrl.split(<span class="string">"\\?"</span>)<span class="literal">[<span class="number">0</span>]</span>;<span class="comment">//前缀 http://114.116.22.115:8888/index.html#/seek/detail</span></span><br><span class="line">      String url1=(noticeUrl.split(<span class="string">"\\?"</span>)<span class="literal">[<span class="number">1</span>]</span>).split(<span class="string">"&amp;"</span>).length!=<span class="number">2</span>?<span class="string">""</span>:(noticeUrl.split(<span class="string">"\\?"</span>)<span class="literal">[<span class="number">1</span>]</span>).split(<span class="string">"&amp;"</span>)<span class="literal">[<span class="number">1</span>]</span>;<span class="comment">//后缀 tab=1</span></span><br><span class="line">      url=url0+<span class="string">"?id="</span>+<span class="number">23</span>+<span class="string">"&amp;"</span>+url1;</span><br><span class="line">      String contentHtml=get<span class="constructor">MailContent(<span class="string">"冯莎娜"</span>,<span class="string">"TD202001010809435400000"</span>,<span class="params">url</span>)</span>;<span class="comment">//客户名称,询价单号,打开的页面地址</span></span><br><span class="line">      Email from = <span class="keyword">new</span> <span class="constructor">Email(<span class="string">"info@fbabee.com"</span>)</span>;<span class="comment">//发件方@outlook.com</span></span><br><span class="line">      String subject = <span class="string">"领赫 - 消息提醒(*^▽^*)"</span>;<span class="comment">//</span></span><br><span class="line">      Email <span class="keyword">to</span> = <span class="keyword">new</span> <span class="constructor">Email(<span class="string">"2915324940@qq.com"</span>)</span>;<span class="comment">//客户的主邮箱</span></span><br><span class="line">      Content content = <span class="keyword">new</span> <span class="constructor">Content(<span class="string">"text/html"</span>,<span class="params">contentHtml</span>)</span>;</span><br><span class="line">      Mail mail = <span class="keyword">new</span> <span class="constructor">Mail(<span class="params">from</span>, <span class="params">subject</span>, <span class="params">to</span>, <span class="params">content</span>)</span>;</span><br><span class="line">      String apiKey = sendgridApiKey;<span class="comment">//这个key来源参考4如何获取apiKey</span></span><br><span class="line">      SendGrid sg = <span class="keyword">new</span> <span class="constructor">SendGrid(<span class="params">apiKey</span>)</span>;</span><br><span class="line">      Request request = <span class="keyword">new</span> <span class="constructor">Request()</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          request.set<span class="constructor">Method(Method.POST)</span>;</span><br><span class="line">          request.set<span class="constructor">Endpoint(<span class="string">"mail/send"</span>)</span>;</span><br><span class="line">          request.set<span class="constructor">Body(<span class="params">mail</span>.<span class="params">build</span>()</span>);</span><br><span class="line">          Response response = sg.api(request);</span><br><span class="line">          <span class="keyword">if</span>(response==null<span class="operator"> || </span><span class="module-access"><span class="module"><span class="identifier">JSONObject</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">response</span>)</span>.length<span class="literal">()</span>&lt;<span class="number">6</span>)&#123;<span class="comment">//发送账单后的响应信息做发送是否成功检查</span></span><br><span class="line">              logger.info(<span class="string">"发送消息异常，渠道无响应"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          logger.info(<span class="string">"sendMailResponse:[&#123;&#125;]"</span>,<span class="module-access"><span class="module"><span class="identifier">JSONObject</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">response</span>)</span>);</span><br><span class="line">          <span class="comment">//账单发送成功，后续处理更改发货单状态</span></span><br><span class="line">          <span class="keyword">if</span>(response!=null<span class="operator"> &amp;&amp; </span><span class="string">"202"</span>.equals(response.get<span class="constructor">StatusCode()</span>+<span class="string">""</span>))&#123;</span><br><span class="line">              logger.info(<span class="string">"消息发送成功：[&#123;&#125;]"</span>,response.get<span class="constructor">StatusCode()</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              logger.info(<span class="string">"发送消息异常，消息未发送成功，请稍后重试"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//发送账单信息之后，进行更新相关信息，即是否发送成功、财务状态改为待支付etc</span></span><br><span class="line">      &#125; catch (IOException e) &#123;</span><br><span class="line">          logger.error(<span class="string">"请求异常捕获，MSG=[&#123;&#125;]"</span>,e.get<span class="constructor">Message()</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这个地方是做邮件样式处理的demo：  </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param middleClientUserName 客户名称</span></span><br><span class="line"><span class="comment"> * @param orderId 订单号</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public String getMailContent(String middleClientUserName,String orderId,String noticeUrl)&#123;</span><br><span class="line">    StringBuffer html=new StringBuffer(<span class="string">"&lt;!DOCTYPE html&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;html&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;meta charset=<span class="subst">\"</span>utf-8<span class="subst">\"</span> /&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/head&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;body&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;table width=<span class="subst">\"</span>800<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>center<span class="subst">\"</span> cellpadding=<span class="subst">\"</span>0<span class="subst">\"</span> cellspacing=<span class="subst">\"</span>0<span class="subst">\"</span> bgcolor=<span class="subst">\"</span>#ffffff<span class="subst">\"</span> style=<span class="subst">\"</span>font-family:'Microsoft YaHei';<span class="subst">\"</span>&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tbody&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;table width=<span class="subst">\"</span>800<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>center<span class="subst">\"</span> cellpadding=<span class="subst">\"</span>0<span class="subst">\"</span> cellspacing=<span class="subst">\"</span>0<span class="subst">\"</span> height=<span class="subst">\"</span>40<span class="subst">\"</span>&gt;&lt;/table&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;table width=<span class="subst">\"</span>800<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>center<span class="subst">\"</span> cellpadding=<span class="subst">\"</span>0<span class="subst">\"</span> cellspacing=<span class="subst">\"</span>0<span class="subst">\"</span> bgcolor=<span class="subst">\"</span>#ffffff<span class="subst">\"</span> height=<span class="subst">\"</span>48<span class="subst">\"</span> style=<span class="subst">\"</span>font-family:'Microsoft YaHei';<span class="subst">\"</span>&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tbody&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td height=<span class="subst">\"</span>48<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>center<span class="subst">\"</span> valign=<span class="subst">\"</span>middle<span class="subst">\"</span> style=<span class="subst">\"</span>padding-left:20px;<span class="subst">\"</span>&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;a href=<span class="subst">\"</span>javascript:void(0);<span class="subst">\"</span> target=<span class="subst">\"</span>_blank<span class="subst">\"</span> rel=<span class="subst">\"</span>noopener<span class="subst">\"</span>&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;img src=<span class="subst">\"</span>http://fba-srm.oss-cn-hongkong.aliyuncs.com/202002241734417550微信图片_20200224173432.png<span class="subst">\"</span> width=<span class="subst">\"</span>120px<span class="subst">\"</span> height=<span class="subst">\"</span>25px<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span>&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/a&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>703<span class="subst">\"</span> height=<span class="subst">\"</span>48<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span> align=<span class="subst">\"</span>right<span class="subst">\"</span> valign=<span class="subst">\"</span>middle<span class="subst">\"</span> style=<span class="subst">\"</span>color:#ffffff; padding-right:20px;<span class="subst">\"</span>&gt;&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tbody&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/table&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;table width=<span class="subst">\"</span>800<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>left<span class="subst">\"</span> cellpadding=<span class="subst">\"</span>0<span class="subst">\"</span> cellspacing=<span class="subst">\"</span>0<span class="subst">\"</span> style=<span class="subst">\"</span>border-top:none; border-bottom:none; padding:0 20px;font-size:14px;color:#333333;<span class="subst">\"</span>&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tbody&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>760<span class="subst">\"</span> height=<span class="subst">\"</span>56<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>left<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span> style=<span class="subst">\"</span> font-size:16px;vertical-align:bottom;<span class="subst">\"</span>&gt;尊敬的"</span> +</span><br><span class="line">            <span class="string">"&lt;a target=<span class="subst">\"</span>_blank<span class="subst">\"</span> href=<span class="subst">\"</span>javascript:void(0);<span class="subst">\"</span> style=<span class="subst">\"</span>font-size:16px; font-weight:bold;<span class="subst">\"</span> rel=<span class="subst">\"</span>noopener<span class="subst">\"</span>&gt;"</span>+middleClientUserName+<span class="string">"&lt;/a&gt;:&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>760<span class="subst">\"</span> height=<span class="subst">\"</span>30<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>left<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span>&gt;&amp;nbsp;&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>40<span class="subst">\"</span> height=<span class="subst">\"</span>32<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>left<span class="subst">\"</span> valign=<span class="subst">\"</span>middle<span class="subst">\"</span> style=<span class="subst">\"</span> width:40px; text-align:left;vertical-align:middle; line-height:32px; float:left;<span class="subst">\"</span>&gt;&amp;nbsp;&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>720<span class="subst">\"</span> height=<span class="subst">\"</span>32<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>left<span class="subst">\"</span> style=<span class="subst">\"</span> width:720px; text-align:left;vertical-align:middle;line-height:32px;<span class="subst">\"</span>&gt;您提交的询价单&lt;a href=<span class="subst">\"</span>javascript:void(0);<span class="subst">\"</span> target=<span class="subst">\"</span>_blank<span class="subst">\"</span> rel=<span class="subst">\"</span>noopener<span class="subst">\"</span>&gt;(ID:"</span>+orderId+<span class="string">")&lt;/a&gt;，已完成人工报价，请前往查看&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>720<span class="subst">\"</span> height=<span class="subst">\"</span>32<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span> style=<span class="subst">\"</span>padding-left:40px;line-height:32px;<span class="subst">\"</span>&gt;&lt;a href=<span class="subst">\"</span>"</span>+noticeUrl+<span class="string">"<span class="subst">\"</span> target=<span class="subst">\"</span>_blank<span class="subst">\"</span> rel=<span class="subst">\"</span>noopener<span class="subst">\"</span>&gt;点此查看&lt;/a&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">""</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>720<span class="subst">\"</span> height=<span class="subst">\"</span>32<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span> style=<span class="subst">\"</span>padding-left:40px;<span class="subst">\"</span>&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>720<span class="subst">\"</span> height=<span class="subst">\"</span>32<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span> style=<span class="subst">\"</span>padding-left:40px;<span class="subst">\"</span>&gt;&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>720<span class="subst">\"</span> height=<span class="subst">\"</span>32<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span> style=<span class="subst">\"</span>padding-left:40px;<span class="subst">\"</span>&gt;&amp;nbsp;&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">""</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>720<span class="subst">\"</span> height=<span class="subst">\"</span>14<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span> style=<span class="subst">\"</span>padding-bottom:16px; border-bottom:1px dashed #e5e5e5;font-family:'Microsoft YaHei';<span class="subst">\"</span>&gt; &lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>720<span class="subst">\"</span> height=<span class="subst">\"</span>14<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span> style=<span class="subst">\"</span>padding:8px 0 28px;color:#999999; font-size:12px;font-family:'Microsoft YaHei';<span class="subst">\"</span>&gt;此为系统邮件请勿回复&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tbody&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/table&gt;"</span> +</span><br><span class="line">            <span class="string">""</span> +</span><br><span class="line">            <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;table align=<span class="subst">\"</span>center<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> width=<span class="subst">\"</span>100%<span class="subst">\"</span> cellpadding=<span class="subst">\"</span>0<span class="subst">\"</span> cellspacing=<span class="subst">\"</span>0<span class="subst">\"</span> bgcolor=<span class="subst">\"</span>#fff<span class="subst">\"</span>&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tbody&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;p style=<span class="subst">\"</span>line-height: 22px; font-family: 'Microsoft YaHei'; font-size: 12px; color: #999; text-align: center;<span class="subst">\"</span>&gt;&lt;/p&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tbody&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/table&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tbody&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/table&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/body&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/html&gt;"</span>);</span><br><span class="line">    logger.info(<span class="string">"账单内容："</span>+html);</span><br><span class="line">    return html.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个地方是我写好的一个html样式，然后测试发送这个邮件内容到我自己的邮箱里面去：  </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送样式 的邮件   https://www.sandbox.paypal.com/invoice/p/#83NQMXZRG6KPAZ4Y</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @throws IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void test4() throws  IOException&#123;</span><br><span class="line">    Email from = new Email(<span class="string">"info@fbabee.com"</span>);<span class="comment">//发件方@outlook.com</span></span><br><span class="line">    String subject = <span class="string">"领赫 - 账单提醒(*^▽^*)"</span>;<span class="comment">//Sending with Twilio SendGrid is Fun</span></span><br><span class="line">    Email to = new Email(<span class="string">"2915324940@qq.com"</span>);<span class="comment">//收件方@gmail.com</span></span><br><span class="line">    <span class="comment">//"&lt;div style='width:800px;height:600px;background-color:black'&gt; &lt;img  width='200px' height='300px'  src='http://m.qpic.cn/psc?/V11rBmNJ1xB9lV/hsnfJ.a5yg7.BhItQyNwPS2w5W77Ya6n7UEvCBQEhtvp5TN5vlqR7nIjceIjHX.H5V6eg9RYIZp65ofTS1zkiEpKFmlRFGi7*beRV26DJLI!/b&amp;bo=VQhABgAKgAcRCag!&amp;rf=viewer_4'&gt;&lt;/img&gt;&lt;/div&gt;"</span></span><br><span class="line">    Content content = new Content(<span class="string">"text/html"</span>,<span class="string">"&lt;!DOCTYPE html&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"&lt;html&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span>&lt;head&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span>&lt;meta charset=<span class="subst">\"</span>utf-8<span class="subst">\"</span> /&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span>&lt;title&gt;&lt;/title&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span>&lt;style&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>.right&#123;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>text-align: right;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>font-size: 10px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>.indent&#123;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>text-indent: 180px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>font-size: 10px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>.widd&#123;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>width: 230px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>font-size: 10px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>.centt&#123;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>text-align: center;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>font-size: 10px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>.bolder&#123;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>font-size: 10px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>font-weight: bolder;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>.ant-btn-red &#123;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    color: #FFF;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    background-color: #FF5A44;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    border-color: #FF5A44;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    text-shadow: 0 -1px 0 rgba(0,0,0,0.12);<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    -webkit-box-shadow: 0 2px 0 rgba(0,0,0,0.045);<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    box-shadow: 0 2px 0 rgba(0,0,0,0.045);<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">".ant-btn &#123;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    line-height: 2.2;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    position: relative;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    display: inline-block;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    font-weight: 400;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    white-space: nowrap;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    text-align: center;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    background-image: none;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    border: 1px solid transparent;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    -webkit-box-shadow: 0 2px 0 rgba(0,0,0,0.015);<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    box-shadow: 0 2px 0 rgba(0,0,0,0.015);<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    cursor: pointer;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    -webkit-transition: all .3s cubic-bezier(.645, .045, .355, 1);<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    transition: all .3s cubic-bezier(.645, .045, .355, 1);<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    -webkit-user-select: none;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    -moz-user-select: none;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    -ms-user-select: none;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    user-select: none;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    -ms-touch-action: manipulation;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    touch-action: manipulation;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    height: 32px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    padding: 0 15px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    font-size: 14px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    border-radius: 4px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    color: rgba(0,0,0,0.65);<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    background-color: #fff;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    border-color: #d9d9d9;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>.font&#123;font-size: 10px;&#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span>&lt;/style&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span>&lt;/head&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span>&lt;body&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span>&lt;table width=<span class="subst">\"</span>650px<span class="subst">\"</span> height=<span class="subst">\"</span>100%<span class="subst">\"</span> style=<span class="subst">\"</span>background-color: white;margin: auto; font-family:'Microsoft YaHei';<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 25px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>4<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>width: 50px;<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr &gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span> class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;&lt;img width=<span class="subst">\"</span>120px<span class="subst">\"</span> height=<span class="subst">\"</span>25px<span class="subst">\"</span> src=<span class="subst">\"</span>http://fba-srm.oss-cn-hongkong.aliyuncs.com/202002241734417550微信图片_20200224173432.png<span class="subst">\"</span>/&gt;&lt;/td&gt;&lt;!--FBABEE--&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>2<span class="subst">\"</span> style=<span class="subst">\"</span>text-align: right;font-size: 25px;font-weight: bold;<span class="subst">\"</span> &gt;INVOICE&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 2px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span> class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;Shenzhen Linkhub Supply-Chain Management Co.LTD&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>font-size: 10px;text-align: right;font-weight: bolder;<span class="subst">\"</span>&gt;Invoince ID&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>font-size: 10px;text-align: right;<span class="subst">\"</span>&gt;1904193751&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span> class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;Add:302,Building D,New Retail Tech Industrial Zoon&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>font-size: 10px;text-align: right;font-weight: bolder;<span class="subst">\"</span>&gt;FBA ID&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>font-size: 10px;text-align: right;<span class="subst">\"</span>&gt;XXXXXXX&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span> class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;GUshu,Xixiang Street,Bao'An,518000&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>font-size: 10px;text-align: right;font-weight: bolder;<span class="subst">\"</span>&gt;Date Issued&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>font-size: 10px;text-align: right;<span class="subst">\"</span>&gt;2019/05/02&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span> class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;Guangdong Province,China&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>font-size: 10px;text-align: right;font-weight: bolder;<span class="subst">\"</span>&gt;Due Date&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>font-size: 10px;text-align: right;<span class="subst">\"</span>&gt;2019/05/02&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 30px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>2<span class="subst">\"</span> class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;Bill to&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span> class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;Ship to&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 2px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>2<span class="subst">\"</span> class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;公司名称&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span> class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;24300 Nandina Ave,Moreno Valley,CA,&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>2<span class="subst">\"</span> class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;公司地址&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span> class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;92551,United States&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 30px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;Items Description&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>4<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 2px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;费用集合一&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>bolder indent<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span>&gt;Rate&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>centt bolder<span class="subst">\"</span>&gt;Quantity&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>right bolder<span class="subst">\"</span>&gt;Amount&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 2px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;固定费用&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>indent<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span>&gt;1&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>centt<span class="subst">\"</span>&gt;x 10 &lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>right<span class="subst">\"</span>&gt;$ 10.00&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;快递取件费用&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>indent<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span>&gt;0/kg&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>centt<span class="subst">\"</span>&gt;x 121kg&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>right<span class="subst">\"</span>&gt;$ 0.00&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;关税&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>indent<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span>&gt;0&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>centt<span class="subst">\"</span>&gt;x 1331 &lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>right<span class="subst">\"</span>&gt;$ 0.00&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;重量变动费用&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>indent<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span>&gt;8/kg&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>centt<span class="subst">\"</span>&gt;x 121kg&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>right<span class="subst">\"</span>&gt;$ 968.00&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr style=<span class="subst">\"</span>height: 2px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>1<span class="subst">\"</span> class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;偏远地区配送附加费&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>4<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 2px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;偏远地区配送附加费&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>indent<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span>&gt;90/kg&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>centt<span class="subst">\"</span>&gt;x 121kg&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>right<span class="subst">\"</span>&gt;$ 10890.00&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr style=<span class="subst">\"</span>height: 2px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;Total&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>right bolder<span class="subst">\"</span>&gt;$ 11868.00&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 30px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;Bank Infomation&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>4<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 2px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>width: 100px;<span class="subst">\"</span> class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;Paypal Account&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>widd<span class="subst">\"</span>&gt;Palpal@fbabee.com&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;Payoneer Account&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>widd<span class="subst">\"</span>&gt;fsn2915324940@163.com&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;T/T&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>widd<span class="subst">\"</span>&gt;银行账号信息，暂时明确不了&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 80px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 30px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;div style=<span class="subst">\"</span>margin:0 auto;width:200px;<span class="subst">\"</span>&gt; <span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;a href=<span class="subst">\"</span>https://www.baidu.com<span class="subst">\"</span> class=<span class="subst">\"</span>ant-btn-red ant-btn<span class="subst">\"</span> style=<span class="subst">\"</span> text-decoration: none;<span class="subst">\"</span>&gt;PayPal确认支付&lt;/a&gt; <span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/div&gt; <span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span>&lt;/table&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span>&lt;/body&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"&lt;/html&gt;"</span> );</span><br><span class="line">    Mail mail = new Mail(from, subject, to, content);</span><br><span class="line">    String apiKey = sendgridApiKey;<span class="comment">//这个key来源参考4如何获取apiKey</span></span><br><span class="line">    SendGrid sg = new SendGrid(apiKey);</span><br><span class="line">    Request request = new Request();</span><br><span class="line">    try &#123;</span><br><span class="line">        request.setMethod(Method.POST);</span><br><span class="line">        request.setEndpoint(<span class="string">"mail/send"</span>);</span><br><span class="line">        request.setBody(mail.build());</span><br><span class="line">        Response response = sg.api(request);</span><br><span class="line">        System.out.println(response.getStatusCode());</span><br><span class="line">        System.out.println(response.getBody());</span><br><span class="line">        System.out.println(response.getHeaders());</span><br><span class="line">    &#125; catch (IOException ex) &#123;</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">public void t()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个地方是我之前参考的别人的博客，进行发送账单邮件这些的，但是我后来发现，写的样式并不那啥，就是我明明在hbuilder上面html写的还可以整体，但是发送到了qq邮箱里面去的时候，哦豁，不兼容，搞死我了。然而我也不是个前端小哥哥，所以兼容这方面还是费了我点心力的，总之就是心力交瘁。  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * https://www.sandbox.paypal.com/invoice/p/#W4NWHW2FA2XXGFZQ  账单的分享链接</span></span><br><span class="line"><span class="comment">     * 样式+附件一起发送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @org.junit.Test</span></span><br><span class="line"><span class="comment">//    public void test()&#123;</span></span><br><span class="line"><span class="comment">//        EmailOptions emailOptions = new EmailOptions();</span></span><br><span class="line"><span class="comment">//        emailOptions.setToMailList(Arrays.asList("2915324940@qq.com"));//"198866436@qq.com" "fsn2915324940@163.com",</span></span><br><span class="line"><span class="comment">//        emailOptions.setSubject("领赫 - 账单提醒~~~~(*^▽^*)");//附件测试</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        emailOptions.setContent("来了来了来了&lt;div style='width:800px;height:600px;background-color:black'&gt; &lt;img  width='200px' height='300px'  src='http://m.qpic.cn/psc?/V11rBmNJ1xB9lV/hsnfJ.a5yg7.BhItQyNwPS2w5W77Ya6n7UEvCBQEhtvp5TN5vlqR7nIjceIjHX.H5V6eg9RYIZp65ofTS1zkiEpKFmlRFGi7*beRV26DJLI!/b&amp;bo=VQhABgAKgAcRCag!&amp;rf=viewer_4'&gt;&lt;/img&gt;&lt;/div&gt;");//&lt;h1&gt;终于等到你，来付款吧&lt;/h1&gt;&lt;hr/&gt;&lt;a href='https://www.sandbox.paypal.com/invoice/p/#W4NWHW2FA2XXGFZQ'&gt;GO&lt;/a&gt;</span></span><br><span class="line"><span class="comment">//        //辛苦了。 详细情况请确认附件。  就这些。请多关照。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        // 添付ファイル  邮件附件。</span></span><br><span class="line"><span class="comment">//        List&lt;Attachments&gt; attachments = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        Attachments attachment = new Attachments();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        byte[] fileData = null;</span></span><br><span class="line"><span class="comment">//        fileData = fileConvertToByteArray(new File("C:\\Users\\ASUS\\Desktop\\账单TEST.pdf"));//附件  C:\Users\ASUS\Desktop\古风素材\psb (1).jpg</span></span><br><span class="line"><span class="comment">//        attachment.setContentId("账单邮件~~~~(*^▽^*)");</span></span><br><span class="line"><span class="comment">//        Base64 x = new Base64();</span></span><br><span class="line"><span class="comment">//        attachment.setContent(x.encodeAsString(fileData));</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            attachment.setFilename(MimeUtility.encodeText("领赫账单.pdf"));//image.jpg  此处发送过去的中文乱码</span></span><br><span class="line"><span class="comment">//        &#125;catch (UnsupportedEncodingException e)&#123;</span></span><br><span class="line"><span class="comment">//            logger.info("转码抛出异常=========");</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        attachment.setType("plain/text");</span></span><br><span class="line"><span class="comment">//        attachments.add(attachment);</span></span><br><span class="line"><span class="comment">//        emailOptions.setAttachments(attachments);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        logger.info("emailOptions:[&#123;&#125;]", JSONObject.toJSONString(emailOptions));</span></span><br><span class="line"><span class="comment">//        // メール送信 发送邮件</span></span><br><span class="line"><span class="comment">//        sendMail(emailOptions);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * メールの送信 发送邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param emailOptions メールオプション  邮件选项</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public void sendMail(EmailOptions emailOptions) &#123;</span></span><br><span class="line"><span class="comment">//        Mail mail = new Mail();</span></span><br><span class="line"><span class="comment">//        // 差出人 (sendFrom:注册时的邮箱)</span></span><br><span class="line"><span class="comment">//        Email from = new Email("info@fbabee.com");</span></span><br><span class="line"><span class="comment">//        mail.setFrom(from);</span></span><br><span class="line"><span class="comment">//        // 宛先</span></span><br><span class="line"><span class="comment">//        if (emailOptions.getToMailList() != null) &#123;</span></span><br><span class="line"><span class="comment">//            emailOptions.getToMailList().forEach(to -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                logger.info("========&gt;to:[&#123;&#125;]",JSONObject.toJSONString(to));</span></span><br><span class="line"><span class="comment">//                Personalization personalization = new Personalization();</span></span><br><span class="line"><span class="comment">//                personalization.addTo(new Email(to.toString()));</span></span><br><span class="line"><span class="comment">//                mail.addPersonalization(personalization);</span></span><br><span class="line"><span class="comment">//            &#125;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        // 件名</span></span><br><span class="line"><span class="comment">//        String subject = emailOptions.getSubject();</span></span><br><span class="line"><span class="comment">//        mail.setSubject(subject);</span></span><br><span class="line"><span class="comment">//        // メール内容 邮件内容</span></span><br><span class="line"><span class="comment">////        Content content = new Content("text/plain", emailOptions.getContent());</span></span><br><span class="line"><span class="comment">//        Content content = new Content("text/html", emailOptions.getContent());</span></span><br><span class="line"><span class="comment">//        mail.addContent(content);</span></span><br><span class="line"><span class="comment">//        // 添付ファイル 邮件附件。</span></span><br><span class="line"><span class="comment">//        if (emailOptions.getAttachments() != null) &#123;</span></span><br><span class="line"><span class="comment">//            emailOptions.getAttachments().forEach(attachments -&gt; &#123; mail.addAttachments(attachments); &#125;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        logger.info("mail:[&#123;&#125;]",JSONObject.toJSONString(mail));</span></span><br><span class="line"><span class="comment">//        // (sendgridApiKey:经过变换的API key)</span></span><br><span class="line"><span class="comment">//        SendGrid sg = new SendGrid(sendgridApiKey);</span></span><br><span class="line"><span class="comment">//        Request request = new Request();</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            request.setMethod(Method.POST);</span></span><br><span class="line"><span class="comment">//            request.setEndpoint("mail/send");</span></span><br><span class="line"><span class="comment">//            request.setBody(mail.build());</span></span><br><span class="line"><span class="comment">//            Response response = sg.api(request);</span></span><br><span class="line"><span class="comment">//            // 202:成功</span></span><br><span class="line"><span class="comment">//            logger.info("response:[&#123;&#125;]",JSONObject.toJSONString(response));</span></span><br><span class="line"><span class="comment">//            logger.info("StatusCode: [&#123;&#125;]", response.getStatusCode());</span></span><br><span class="line"><span class="comment">//        &#125; catch (IOException ex) &#123;</span></span><br><span class="line"><span class="comment">//            logger.error("", ex);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把一个文件转化为byte字节数组。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] fileConvertToByteArray(<span class="built_in">File</span> file) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = null;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.<span class="built_in">read</span>(<span class="built_in">buffer</span>)) != <span class="number">-1</span>) &#123;</span><br><span class="line">                baos.<span class="built_in">write</span>(<span class="built_in">buffer</span>, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            data = baos.toByteArray();</span><br><span class="line"></span><br><span class="line">            fis.<span class="built_in">close</span>();</span><br><span class="line">            baos.<span class="built_in">close</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//base64字符串转byte[]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] base64String2ByteFun(<span class="keyword">String</span> base64Str)&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64.decodeBase64(base64Str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//byte[]转base64</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">byte2Base64StringFun</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64.encodeBase64String(b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个forEache 简直了，我想说，反正应该是jdk1.8的新式写法吧，还可以感觉，给我的感觉有点额，就是有点像js里面哦哦不是jquery里面一样的那种forEach。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br></pre></td><td class="code"><pre><span class="line">    @org.junit.Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> test2()&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 测试forEach 用法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Map&lt;String,<span class="type">Integer</span>&gt;&gt; list=<span class="built_in">new</span> ArrayList&lt;Map&lt;String,<span class="type">Integer</span>&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            Map map=<span class="built_in">new</span> HashMap();</span><br><span class="line">            map.put("测试名称"+i,i);</span><br><span class="line">            list.<span class="keyword">add</span>(map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">            list.<span class="keyword">forEach</span>(<span class="keyword">to</span> -&gt; &#123;</span><br><span class="line">                Map&lt;String,<span class="type">Integer</span>&gt; map=JSONObject.parseObject(JSONObject.toJSONString(<span class="keyword">to</span>),Map.<span class="keyword">class</span>);</span><br><span class="line">               logger.<span class="keyword">info</span>("=====&gt;打印to:[&#123;&#125;]",JSONObject.toJSONString(map));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    TOutRepoOrderExpenseService tOutRepoOrderExpenseService;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> bytessss() throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">//        String str="hello World  你好世界";</span><br><span class="line">//        try &#123;</span><br><span class="line">//            String aaa = <span class="built_in">new</span> String(str.getBytes("UTF-8"), "iso-8859-1");</span><br><span class="line">//            <span class="keyword">System</span>.<span class="keyword">out</span>.println("=======&gt;aaa print: " + aaa);</span><br><span class="line">//        &#125;catch (UnsupportedEncodingException e)&#123;</span><br><span class="line">//            <span class="keyword">System</span>.<span class="keyword">out</span>.println("====&gt;转码抛出异常");</span><br><span class="line">//        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //查询账单信息，并循环样式</span><br><span class="line">//    Condition expenseCondition=<span class="built_in">new</span> Condition(TOutRepoOrderExpense.<span class="keyword">class</span>);</span><br><span class="line">//    expenseCondition.createCriteria().andEqualTo("outOrderNo",<span class="number">41</span>);</span><br><span class="line">//    List&lt;TOutRepoOrderExpense&gt; tOutRepoOrderExpenses=tOutRepoOrderExpenseService.findByCondition(expenseCondition);</span><br><span class="line">//    List&lt;List&lt;TOutRepoOrderExpense&gt;&gt; typeList=<span class="built_in">new</span> ArrayList&lt;List&lt;TOutRepoOrderExpense&gt;&gt;();</span><br><span class="line">//    BigDecimal totalSum=BigDecimal.ZERO;</span><br><span class="line">//    <span class="keyword">for</span> (TOutRepoOrderExpense tOutRepoOrderExpense:tOutRepoOrderExpenses)&#123;</span><br><span class="line">//        totalSum=totalSum.<span class="keyword">add</span>(tOutRepoOrderExpense.getTotal());</span><br><span class="line">//        <span class="keyword">if</span>(typeList.size()==<span class="number">0</span>)&#123;</span><br><span class="line">//            List&lt;TOutRepoOrderExpense&gt; list=<span class="built_in">new</span> ArrayList&lt;TOutRepoOrderExpense&gt;();</span><br><span class="line">//            list.<span class="keyword">add</span>(tOutRepoOrderExpense);</span><br><span class="line">//            typeList.<span class="keyword">add</span>(list);</span><br><span class="line">//        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">//         //需要进行比较collectionName是否一致，如果存在一致就放入该集合，如果遍历到底发现无一致的集合则创建新集合</span><br><span class="line">//            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;typeList.size();i++)&#123;</span><br><span class="line">//                List&lt;TOutRepoOrderExpense&gt; list=typeList.<span class="keyword">get</span>(i);</span><br><span class="line">//                <span class="type">boolean</span> addFlag=<span class="keyword">false</span>;</span><br><span class="line">//                <span class="keyword">for</span>(TOutRepoOrderExpense t:list)&#123;</span><br><span class="line">//                    <span class="keyword">if</span>(t.getCollectionName().equals(tOutRepoOrderExpense.getCollectionName()))&#123;</span><br><span class="line">//                        list.<span class="keyword">add</span>(tOutRepoOrderExpense);</span><br><span class="line">//                        break;</span><br><span class="line">//                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">//                        addFlag=<span class="keyword">true</span>;</span><br><span class="line">//                    &#125;</span><br><span class="line">//                &#125;</span><br><span class="line">//                <span class="keyword">if</span>(addFlag) &#123;</span><br><span class="line">//                    List&lt;TOutRepoOrderExpense&gt; list2=<span class="built_in">new</span> ArrayList&lt;TOutRepoOrderExpense&gt;();</span><br><span class="line">//                    list2.<span class="keyword">add</span>(tOutRepoOrderExpense);</span><br><span class="line">//                    typeList.<span class="keyword">add</span>(list2);</span><br><span class="line">//                    break;</span><br><span class="line">//                &#125;</span><br><span class="line">//            &#125;</span><br><span class="line">//        &#125;</span><br><span class="line">//    &#125;</span><br><span class="line"></span><br><span class="line">    StringBuffer html=<span class="built_in">new</span> StringBuffer("&lt;!DOCTYPE html&gt;" +</span><br><span class="line">            "&lt;html&gt;" +</span><br><span class="line">            "&lt;head&gt;" +</span><br><span class="line">            "&lt;meta charset=\"utf<span class="number">-8</span>\" /&gt;" +</span><br><span class="line">            "&lt;title&gt;&lt;/title&gt;" +</span><br><span class="line">            "&lt;style&gt;" +</span><br><span class="line">            ".right&#123;" +</span><br><span class="line">            "text-align: right;" +</span><br><span class="line">            "&#125;" +</span><br><span class="line">            ".widd&#123;" +</span><br><span class="line">            "width: 230px;" +</span><br><span class="line">            "&#125;" +</span><br><span class="line">            ".centt&#123;" +</span><br><span class="line">            "text-align: center;" +</span><br><span class="line">            "&#125;" +</span><br><span class="line">            ".bolder&#123;" +</span><br><span class="line">//            "font-weight: bolder;" +</span><br><span class="line">            "&#125;" +</span><br><span class="line">            ".ant-btn-red &#123;" +</span><br><span class="line">            "    color: #FFF;" +</span><br><span class="line">            "    background-color: #FF5A44;" +</span><br><span class="line">            "    border-color: #FF5A44;" +</span><br><span class="line">            "    text-shadow: 0 -1px 0 rgba(0,0,0,0.12);" +</span><br><span class="line">            "    -webkit-box-shadow: 0 2px 0 rgba(0,0,0,0.045);" +</span><br><span class="line">            "    box-shadow: 0 2px 0 rgba(0,0,0,0.045);" +</span><br><span class="line">            "&#125;" +</span><br><span class="line">            "" +</span><br><span class="line">            ".ant-btn &#123;" +</span><br><span class="line">            "    line-height: 2.2;" +</span><br><span class="line">            "    position: relative;" +</span><br><span class="line">            "    display: inline-block;" +</span><br><span class="line">            "    font-weight: 400;" +</span><br><span class="line">            "    white-space: nowrap;" +</span><br><span class="line">            "    text-align: center;" +</span><br><span class="line">            "    background-image: none;" +</span><br><span class="line">            "    border: 1px solid transparent;" +</span><br><span class="line">            "    -webkit-box-shadow: 0 2px 0 rgba(0,0,0,0.015);" +</span><br><span class="line">            "    box-shadow: 0 2px 0 rgba(0,0,0,0.015);" +</span><br><span class="line">            "    cursor: pointer;" +</span><br><span class="line">            "    -webkit-transition: all .3s cubic-bezier(.645, .045, .355, 1);" +</span><br><span class="line">            "    transition: all .3s cubic-bezier(.645, .045, .355, 1);" +</span><br><span class="line">            "    -webkit-user-select: none;" +</span><br><span class="line">            "    -moz-user-select: none;" +</span><br><span class="line">            "    -ms-user-select: none;" +</span><br><span class="line">            "    user-select: none;" +</span><br><span class="line">            "    -ms-touch-action: manipulation;" +</span><br><span class="line">            "    touch-action: manipulation;" +</span><br><span class="line">            "    height: 32px;" +</span><br><span class="line">            "    padding: 0 15px;" +</span><br><span class="line">            "    font-size: 14px;" +</span><br><span class="line">            "    border-radius: 4px;" +</span><br><span class="line">            "    color: rgba(0,0,0,0.65);" +</span><br><span class="line">            "    background-color: #fff;" +</span><br><span class="line">            "    border-color: #d9d9d9;" +</span><br><span class="line">            "&#125;" +</span><br><span class="line">            "a:link &#123; text-decoration: none;&#125;" +</span><br><span class="line">            "　　 a:active &#123; text-decoration:none&#125;" +</span><br><span class="line">            "　　 a:hover &#123; text-decoration:none;&#125; " +</span><br><span class="line">            "　　 a:visited &#123; text-decoration: none;&#125;"+</span><br><span class="line">            "&lt;/style&gt;" +</span><br><span class="line">            "&lt;/head&gt;" +</span><br><span class="line">            "&lt;body&gt;" +</span><br><span class="line">            "&lt;table width=\"<span class="number">650</span>px\" height=\"<span class="number">100</span>%\" style=\"background-color: white;margin: auto; font-<span class="keyword">family</span>:<span class="string">'Microsoft YaHei'</span>; font-size: <span class="number">10</span>px;\"&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">25</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">4</span>\"&gt;&lt;/td&gt;&lt;td style=\"width: <span class="number">50</span>px;\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr &gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\" class=\"bolder\"&gt;FBABEE&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">2</span>\" class=\"right bolder\"&gt;INVOICE&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">2</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;Shenzhen Linkhub Supply-Chain Management Co.LTD&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"right bolder\"&gt;Invoince ID&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"right\"&gt;1904193751&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;Add:302,Building D,New Retail Tech Industrial Zoon&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"right bolder\"&gt;FBA ID&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"right\"&gt;XXXXXXX&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;GUshu,Xixiang Street,Bao'An,518000&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"right bolder\"&gt;Date Issued&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"right\"&gt;2019/05/02&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;Guangdong Province,China&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"right bolder\"&gt;Due Date&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"right\"&gt;2019/05/02&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">30</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">2</span>\" class=\"bolder\"&gt;Bill to&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\" class=\"bolder\"&gt;Ship to&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">2</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">2</span>\"&gt;公司名称&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;24300 Nandina Ave,Moreno Valley,CA,&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">2</span>\"&gt;公司地址&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;92551,United States&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">30</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td class=\"bolder\"&gt;Items Description&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">4</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">2</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;");</span><br><span class="line">    //此时将集合分了个类，分类之后的集合需要做的即遍历样式 稍等复制一下</span><br><span class="line"></span><br><span class="line">//    <span class="keyword">System</span>.<span class="keyword">out</span>.println("typeList.size:  "+typeList.size());</span><br><span class="line">//    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;typeList.size();i++)&#123;</span><br><span class="line">//        <span class="keyword">if</span>(i==<span class="number">0</span>)&#123; //第一个集合</span><br><span class="line">//            List&lt;TOutRepoOrderExpense&gt; tOutRepoOrderExpensesList=typeList.<span class="keyword">get</span>(i);</span><br><span class="line">//                <span class="keyword">for</span> (<span class="type">int</span> x=<span class="number">0</span>;x&lt;tOutRepoOrderExpensesList.size();x++)&#123;</span><br><span class="line">//                    TOutRepoOrderExpense tOutRepoOrderExpense=tOutRepoOrderExpensesList.<span class="keyword">get</span>(x);</span><br><span class="line">//                    JSONArray jsonArray=JSONArray.parseArray(tOutRepoOrderExpense.getRuleDetail());</span><br><span class="line">//                    JSONObject ruleDetail=jsonArray.getJSONObject(<span class="number">0</span>);</span><br><span class="line">//</span><br><span class="line">//                    String collectionName=tOutRepoOrderExpense.getCollectionName();</span><br><span class="line">//                    String collectionItemName=tOutRepoOrderExpense.getCollectionItemName();</span><br><span class="line">//                    String rate=""+ruleDetail.getBigDecimal("rate");</span><br><span class="line">//                    String unit=ruleDetail.getString("unit")==<span class="keyword">null</span>?"":"/"+ruleDetail.getString("unit");</span><br><span class="line">//                    String unit2=ruleDetail.getString("unit")==<span class="keyword">null</span>?" ":ruleDetail.getString("unit");</span><br><span class="line">//                    String quantity=""+ruleDetail.getBigDecimal("quantity");</span><br><span class="line">//                    String total=""+tOutRepoOrderExpense.getTotal();</span><br><span class="line">//                    <span class="keyword">if</span>(x==<span class="number">0</span>)&#123; //第一个集合当中的第一个对象 //此处需要进行循环表头，以及第一行数据</span><br><span class="line">//                        html=html.append("&lt;tr&gt;" +</span><br><span class="line">//                                "&lt;td class=\"bolder\"&gt;"+collectionName+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"right bolder\" colspan=\"<span class="number">2</span>\"&gt;Rate&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"centt bolder\"&gt;Quantity&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"right bolder\"&gt;Amount&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;/tr&gt;" +</span><br><span class="line">//                                "&lt;tr style=\"height: <span class="number">2</span>px;\"&gt;" +</span><br><span class="line">//                                "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;/tr&gt;" +</span><br><span class="line">//                                "&lt;tr&gt;" +</span><br><span class="line">//                                "&lt;td&gt;"+collectionItemName+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"right\" colspan=\"<span class="number">2</span>\"&gt;"+rate+unit+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"centt\"&gt;x "+quantity+unit2+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"right\"&gt;$ "+total+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;/tr&gt;");</span><br><span class="line">//</span><br><span class="line">//                    &#125;<span class="keyword">else</span>&#123;//第一个集合当中的其余对象</span><br><span class="line">//                        html= html.append("&lt;tr&gt;" +</span><br><span class="line">//                                "&lt;td&gt;"+collectionItemName+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"right\" colspan=\"<span class="number">2</span>\"&gt;"+rate+unit+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"centt\"&gt;x "+quantity+unit2+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"right\"&gt;$ "+tOutRepoOrderExpense.getTotal()+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;/tr&gt;");</span><br><span class="line">//                    &#125;</span><br><span class="line">//                &#125;</span><br><span class="line">//                //第一个集合循环后结尾 需要进行空格处理</span><br><span class="line">//            html= html.append("&lt;tr style=\"height: <span class="number">2</span>px;\"&gt;" +</span><br><span class="line">//                    "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">//                    "&lt;/tr&gt;");</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">//        &#125;</span><br><span class="line">//        <span class="keyword">else</span>&#123;//第二个第三个第四个集合</span><br><span class="line">//            List&lt;TOutRepoOrderExpense&gt; tOutRepoOrderExpensesList=typeList.<span class="keyword">get</span>(i);</span><br><span class="line">//            <span class="keyword">for</span> (<span class="type">int</span> x=<span class="number">0</span>;x&lt;tOutRepoOrderExpensesList.size();x++)&#123;</span><br><span class="line">//</span><br><span class="line">//                TOutRepoOrderExpense tOutRepoOrderExpense=tOutRepoOrderExpensesList.<span class="keyword">get</span>(x);</span><br><span class="line">//                JSONArray jsonArray=JSONArray.parseArray(tOutRepoOrderExpense.getRuleDetail());</span><br><span class="line">//                JSONObject ruleDetail=jsonArray.getJSONObject(<span class="number">0</span>);</span><br><span class="line">//                String collectionName=tOutRepoOrderExpense.getCollectionName();</span><br><span class="line">//                String collectionItemName=tOutRepoOrderExpense.getCollectionItemName();</span><br><span class="line">//                String rate=""+ruleDetail.getBigDecimal("rate");</span><br><span class="line">//                String unit=ruleDetail.getString("unit")==<span class="keyword">null</span>?"":"/"+ruleDetail.getString("unit");</span><br><span class="line">//                String unit2=ruleDetail.getString("unit")==<span class="keyword">null</span>?" ":ruleDetail.getString("unit");</span><br><span class="line">//                String quantity=""+ruleDetail.getBigDecimal("quantity");</span><br><span class="line">//                String total=""+tOutRepoOrderExpense.getTotal();</span><br><span class="line">//</span><br><span class="line">//                <span class="keyword">if</span>(x==<span class="number">0</span>)&#123; //第一个集合当中的第一个对象</span><br><span class="line">//                    //此处需要进行循环表头，以及第一行数据</span><br><span class="line">//                    html=html.append("&lt;tr&gt;" +</span><br><span class="line">//                            "&lt;td colspan=\"<span class="number">1</span>\" class=\"bolder\"&gt;"+collectionName+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;td colspan=\"<span class="number">4</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;/tr&gt;" +</span><br><span class="line">//                            "&lt;/tr&gt;" +</span><br><span class="line">//                            "&lt;tr style=\"height: <span class="number">2</span>px;\"&gt;" +</span><br><span class="line">//                            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;/tr&gt;" +</span><br><span class="line">//                            "&lt;tr&gt;" +</span><br><span class="line">//                            "&lt;td&gt;"+collectionItemName+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;td class=\"right\" colspan=\"<span class="number">2</span>\"&gt;"+rate+unit+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;td class=\"centt\"&gt;x "+quantity+unit2+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;td class=\"right\"&gt;$ "+total+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;/tr&gt;");</span><br><span class="line">//                &#125;</span><br><span class="line">//                <span class="keyword">else</span>&#123;//第一个集合当中的其余对象</span><br><span class="line">//                    html=html.append("&lt;tr&gt;" +</span><br><span class="line">//                            "&lt;td&gt;"+collectionItemName+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;td class=\"right\" colspan=\"<span class="number">2</span>\"&gt;"+rate +rate+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;td class=\"centt\"&gt;x "+quantity+unit2+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;td class=\"right\"&gt;$ "+tOutRepoOrderExpense.getTotal()+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;/tr&gt;");</span><br><span class="line">//                &#125;</span><br><span class="line">//            &#125;</span><br><span class="line">//</span><br><span class="line">//            //第n个集合循环后结尾 需要进行空格处理</span><br><span class="line">//            html=  html.append("&lt;tr style=\"height: <span class="number">2</span>px;\"&gt;" +</span><br><span class="line">//                    "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">//                    "&lt;/tr&gt;");</span><br><span class="line">//        &#125;</span><br><span class="line">//    &#125;</span><br><span class="line">    String payoneer="fsn2915324940@163.com";//<span class="keyword">info</span>@fbabee.com</span><br><span class="line">    //当集合遍历结束，即加上total样式</span><br><span class="line">    html= html.append("&lt;tr&gt;" +</span><br><span class="line">            "&lt;td class=\"bolder\"&gt;Total&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">2</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">//            "&lt;td class=\"bolder\"&gt;$ 4761.52&lt;/td&gt;" +</span><br><span class="line">//            "&lt;td class=\"right bolder\"&gt;$ "+totalSum+"&lt;/td&gt;&lt;td&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">30</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td class=\"bolder\"&gt;Bank Infomation&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">4</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">2</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td style=\"width: <span class="number">100</span>px;\" class=\"bolder\"&gt;Paypal Account&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"widd\"&gt;Palpal@fbabee.com&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td class=\"bolder\"&gt;Payoneer Account&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"widd\"&gt;"+payoneer+"&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td class=\"bolder\"&gt;T/T&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"widd\"&gt;银行账号信息，暂时明确不了&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">80</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">30</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;" +</span><br><span class="line">            "&lt;div style=\"margin:<span class="number">0</span> auto;width:<span class="number">200</span>px;\"&gt; " +</span><br><span class="line">            "&lt;a href=\"https://www.baidu.com\" class=\"ant-btn-red ant-btn\"&gt;PayPal确认支付&lt;/a&gt; " +</span><br><span class="line">            "&lt;/div&gt; " +</span><br><span class="line">            "&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;/table&gt;" +</span><br><span class="line">            "&lt;/body&gt;" +</span><br><span class="line">            "&lt;/html&gt;");</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println("=======html:   "+html);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Email <span class="keyword">from</span> = <span class="built_in">new</span> Email("info@fbabee.com");//发件方@outlook.com</span><br><span class="line">    String subject = "领赫 - 账单提醒(*^▽^*)";//Sending <span class="keyword">with</span> Twilio SendGrid <span class="keyword">is</span> Fun</span><br><span class="line">    Email <span class="keyword">to</span> = <span class="built_in">new</span> Email("2915324940@qq.com");//收件方@gmail.com</span><br><span class="line">    //"&lt;div style='width:800px;height:600px;background-color:black'&gt; &lt;img  width='200px' height='300px'  src='http://m.qpic.cn/psc?/V11rBmNJ1xB9lV/hsnfJ.a5yg7.BhItQyNwPS2w5W77Ya6n7UEvCBQEhtvp5TN5vlqR7nIjceIjHX.H5V6eg9RYIZp65ofTS1zkiEpKFmlRFGi7*beRV26DJLI!/b&amp;bo=VQhABgAKgAcRCag!&amp;rf=viewer_4'&gt;&lt;/img&gt;&lt;/div&gt;"</span><br><span class="line">    Content content = <span class="built_in">new</span> Content("text/html",html.toString());</span><br><span class="line">    Mail mail = <span class="built_in">new</span> Mail(<span class="keyword">from</span>, subject, <span class="keyword">to</span>, content);</span><br><span class="line">    String apiKey = sendgridApiKey;//这个key来源参考<span class="number">4</span>如何获取apiKey</span><br><span class="line">    SendGrid sg = <span class="built_in">new</span> SendGrid(apiKey);</span><br><span class="line">    Request request = <span class="built_in">new</span> Request();</span><br><span class="line">    try &#123;</span><br><span class="line">        request.setMethod(<span class="keyword">Method</span>.POST);</span><br><span class="line">        request.setEndpoint("mail/send");</span><br><span class="line">        request.setBody(mail.build());</span><br><span class="line">        Response response = sg.api(request);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("=================&gt; response:"+JSONObject.toJSONString(response));</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("=================&gt; statusCode:"+response.getStatusCode());</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("=================&gt; body:"+response.getBody());</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("=================&gt; headers:"+response.getHeaders());</span><br><span class="line">    &#125; catch (IOException ex) &#123;</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为之前做出来的html样式一直不兼容，然后david就建议说换成pdf这种文档，直接发个附件过去，额，我试了一下，就是觉得吧，其实弄成pdf会更难看，我是这么觉得的。<br>因为搞出来的确是很难看。所以后面还是去弄了一下html格式。<br>后来发现就是，得每个element标签都给他设置一下style，这样就OK。<br>其实我觉得阿里云的那个账单样式挺好看的，但是账单的样式要求这么做，然后就只能按照客户的需求来。<br>后来的其他邮件内容样式自己发挥我就直接用了阿里云邮件的样式，嘿嘿。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * HTML转换成pdf</span><br><span class="line">     * @param html html文件路径</span><br><span class="line">     * @param DEST 生成pdf的路径</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static void tomPdf(String html, String DEST) throws Exception &#123;</span><br><span class="line">//        ConverterProperties props = new ConverterProperties();</span><br><span class="line">//        DefaultFontProvider defaultFontProvider = new DefaultFontProvider(false, false, false);</span><br><span class="line">////        defaultFontProvider.addFont("F:\otosanscjksc_downcc\otoSansCJKSC\otoSansCJKsc-Thin.otf");</span><br><span class="line">//        props.setFontProvider(defaultFontProvider);</span><br><span class="line">//        PdfWriter writer = new PdfWriter(DEST);</span><br><span class="line">//        PdfDocument pdf = new PdfDocument(writer);</span><br><span class="line">//        pdf.setDefaultPageSize(new PageSize(595.0F, 842.0F));</span><br><span class="line">//        Document document = HtmlConverter.convertToDocument(new FileInputStream(html), pdf, props);</span><br><span class="line">//        document.close();</span><br><span class="line">//        pdf.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testtt()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">//            tomPdf("F:\\phpStudy\\PhpStudy20180211\\PHPTutorial\\WWW\\领赫\est.html", "F:\\80afa41a3bfc474cbf1ac8b5bc1d.pdf");</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println("完======================");</span><br><span class="line">    &#125;</span><br><span class="line">/*</span><br><span class="line">=================&gt; response:</span><br><span class="line">&#123;"body":"",</span><br><span class="line">"headers":&#123;</span><br><span class="line">"Server":"nginx",</span><br><span class="line">"Access-Control-Allow-Origin":"https://sendgrid.api-docs.io",</span><br><span class="line">"Access-Control-Allow-Methods":"POST",</span><br><span class="line">"Connection":"keep-alive",</span><br><span class="line">"X-Message-Id":"4iVRN4HdSlCxByZsJd3qxA",</span><br><span class="line">"X-No-CORS-Reason":"https://sendgrid.com/docs/Classroom/Basics/API/cors.html",</span><br><span class="line">"Content-Length":"0",</span><br><span class="line">"Access-Control-Max-Age":"600",</span><br><span class="line">"Date":"Fri, 14 Feb 2020 07:43:16 GMT",</span><br><span class="line">"Access-Control-Allow-Headers":"Authorization,Content-Type, On-behalf-of, x-sg-elas-acl"</span><br><span class="line">&#125;,</span><br><span class="line">"statusCode":202&#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><blockquote><p>测试JSONObject</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> tesetJSON()&#123;</span><br><span class="line"></span><br><span class="line">//    JSONArray jsonObject=JSONArray.parseArray("[&#123;\"price\":10,\"quantity\":10,\"rate\":1&#125;]");</span><br><span class="line">////    <span class="keyword">System</span>.<span class="keyword">out</span>.println(jsonObject);</span><br><span class="line"></span><br><span class="line">    JSONObject jsonObject=<span class="built_in">new</span> JSONObject();</span><br><span class="line">    jsonObject.put("name","张三");</span><br><span class="line">    StringBuffer stringBuffer=<span class="built_in">new</span> StringBuffer("");</span><br><span class="line">    stringBuffer.append("姓名："+jsonObject.getString("name")+"~~~");</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println("打印;"+stringBuffer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 领赫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领赫 </tag>
            
            <tag> SendGrid </tag>
            
            <tag> 邮件服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Bean生命周期</title>
      <link href="/2020/04/14/%E3%80%90Spring%E3%80%91/Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2020/04/14/%E3%80%90Spring%E3%80%91/Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-AOP</title>
      <link href="/2020/04/12/%E3%80%90Spring%E3%80%91/AOP1/"/>
      <url>/2020/04/12/%E3%80%90Spring%E3%80%91/AOP1/</url>
      
        <content type="html"><![CDATA[<h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="面向切面的一些基本知识"><a href="#面向切面的一些基本知识" class="headerlink" title="面向切面的一些基本知识"></a>面向切面的一些基本知识</h4><h4 id="SpringAOP概览"><a href="#SpringAOP概览" class="headerlink" title="SpringAOP概览"></a>SpringAOP概览</h4><ol><li>走进面向切面编程</li></ol><h5 id="编程范式概览"><a href="#编程范式概览" class="headerlink" title="编程范式概览"></a>编程范式概览</h5><p>首先面向切面编程它是一个编程范式，<br>除了面向切面编程，还有哪几种编程范式？</p><ul><li>面向过程编程，C语言、Basic…</li><li>面向对象编程，Java、c++…</li><li>面向函数编程/函数式编程</li><li>事件驱动编程，JUI开发中常见</li><li>面向切面编程</li></ul><h5 id="AOP是什么"><a href="#AOP是什么" class="headerlink" title="AOP是什么"></a>AOP是什么</h5><ul><li>是一种编程范式，不是编程语言；AOP跟语言不是一个层次当中的；</li><li>解决特定问题，不能解决所有问题；（跟面向对象编程不是竞争关系，而是互补关系）</li><li>是OOP的补充，不是替代；</li></ul><h5 id="AOP的初衷"><a href="#AOP的初衷" class="headerlink" title="AOP的初衷"></a>AOP的初衷</h5><p>面向切面编程为什么会被提出来？<br>AOP跟面向对象编程互补，互补在哪里？<br>这就要讲到面向切面编程的一个初衷，也就是说AOP想要解决的一个问题是什么。  </p><ol><li>DRY：Don’t Repeat Yourself（代码层问题）</li><li>SoC：Separation of  Concerns（关注点分离）</li></ol><p>关注点分离：  </p><ul><li>水平分离：展示层-&gt;服务层-&gt;持久层</li><li>垂直分离：模块划分（订单、库存等，业务模块）</li><li>切面分离：分离功能性需求与非功能性需求</li></ul><p>非功能性需求从功能性需求当中剥离出来集中管理，从而实现Don’t Repeat Yourself这个功能。  </p><h5 id="使用AOP的好处"><a href="#使用AOP的好处" class="headerlink" title="使用AOP的好处"></a>使用AOP的好处</h5><ul><li>集中处理某一关注点/横切逻辑</li><li>可以很方便地添加/删除关注点</li><li>侵入性少，增强代码可读性及可维护性</li></ul><h5 id="AOP的应用场景"><a href="#AOP的应用场景" class="headerlink" title="AOP的应用场景"></a>AOP的应用场景</h5><p>在功能上属于非功能性需求<br>非常适合在AOP的应用场景  </p><ul><li>权限控制</li><li>缓存控制</li><li>事务控制，相对于数据库的事务控制</li><li>审计日志</li><li>性能监控</li><li>分布式追踪</li><li>异常处理</li></ul><h5 id="支持AOP的编程语言"><a href="#支持AOP的编程语言" class="headerlink" title="支持AOP的编程语言"></a>支持AOP的编程语言</h5><p>中间既包括了面向对象也包括了脚本语言，面向过程语言…  </p><ul><li>Java</li><li>.NET</li><li>c/c++</li><li>Ruby</li><li>Python</li><li>PHP</li><li>…</li></ul><ol start="2"><li>Spring中的AOP</li><li>小结</li></ol><h3 id="AOP使用"><a href="#AOP使用" class="headerlink" title="AOP使用"></a>AOP使用</h3><p>怎么在Spring中使用AOP</p><h3 id="AOP原理"><a href="#AOP原理" class="headerlink" title="AOP原理"></a>AOP原理</h3><p>讲述Spring  AOP的原理</p><h3 id="AOP开源运用"><a href="#AOP开源运用" class="headerlink" title="AOP开源运用"></a>AOP开源运用</h3><p>Spring AOP在一些开源项目当中的运用情况</p><h3 id="课程实战"><a href="#课程实战" class="headerlink" title="课程实战"></a>课程实战</h3><h3 id="课程总结"><a href="#课程总结" class="headerlink" title="课程总结"></a>课程总结</h3>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端页面双色球2</title>
      <link href="/2020/04/09/%E3%80%90%E5%91%A8%E5%BD%A4%E5%BD%A4%E3%80%91/%E3%80%90%E5%91%A8%E5%BD%A4%E5%BD%A4%E3%80%91%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%94%B9%E8%BF%9B2/"/>
      <url>/2020/04/09/%E3%80%90%E5%91%A8%E5%BD%A4%E5%BD%A4%E3%80%91/%E3%80%90%E5%91%A8%E5%BD%A4%E5%BD%A4%E3%80%91%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%94%B9%E8%BF%9B2/</url>
      
        <content type="html"><![CDATA[<h2 id="需求内容"><a href="#需求内容" class="headerlink" title="需求内容"></a>需求内容</h2><p><a href="https://github.com/fengshana/Mamai" target="_blank" rel="noopener">https://github.com/fengshana/Mamai</a>  </p><p>周聪这个孽畜，自己搞不清白需求，这个需求变来变去，你以为是变色龙，这么好变。<br>不要脑子啊。  </p><p>其实想了想，好像的确不怎么要脑子,挺简单的（说白了，我也想当一回这么瞎改需求的人，整天啥事不做，哔哔哔改需求）。<br>最近看了大话数据结构，我觉得这个写的有点那个运用到数据结构的味道，不知道是不是我想的有点多的缘故？<br>我想了下，我还想看剑指offer。<br>就这样决定了，我再看看剑指offer。等结束掉大话数据结构后。<br>刷算法面试题，emm，我的脑子可能不太好使啊。<br>david推荐的刷算法的地方我看了下，竞赛啊，啥啥啥的，因为里面论坛有人推荐说是，就是面试题先推荐剑指offer。<br>「David：<a href="https://leetcode-cn.com" target="_blank" rel="noopener">https://leetcode-cn.com</a> 这个上面好的算法题，可以练练，难度比较大一点。」</p><hr><p>我到时候先过一遍剑指offer吧，经典的先刷一波。  </p><p>好了不多说了，我的树还晾着呢。<br>代码变动不大，核心代码变动了主要是。<br><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXxuU4iMOynMQpgZWghe8iC*Hv9DIU54D9XwpBqPukpAap6RBv2zFOp*WfB.xOqeyEH4rbg9vByiV1MU7oLq7poY!/r" alt="image"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">这个是一段一段的</span><br><span class="line"></span><br><span class="line">第一个<span class="number">10</span>到第二个<span class="number">10</span> 没有</span><br><span class="line"></span><br><span class="line">那就是从第二个<span class="number">10</span>开始计算的</span><br><span class="line"></span><br><span class="line">是一段一段的</span><br><span class="line"></span><br><span class="line">不是说从第一个开始到结束的最后一个</span><br><span class="line"></span><br><span class="line">会分成很多段</span><br></pre></td></tr></table></figure><p>也就是说单排当中，即第一列当中如果第一个存在，第三个存在，第九个存在与查询的元素相同的元素的话，那么单排最大遗漏数是  </p><ol><li>第三个减去第一个得到一个，也就是第二个；</li><li>第九个减去第三个得到五个，也就是第四个、第五个、第六个、第七个、第八个；</li></ol><p>第二列、三列、…..、七列单排都这样。  </p><p>分段是指的是第一列当中的第一个到第三个是一段，第三个到第九个是一段；而第一个与第九个之间不会组成段。也就是相邻的相同元素之间组成的段。当前元素与下一相同元素之间组成的段。  </p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7uuHUVbVPuACfzTyR9eJsRiBmxtqPAUyvZo4RqJDM5tRKOUIoVDnT2XkRpSkRFQ5lXoVRpn0ahUJOp48IFGL.Y!/r" alt="image"></p><p>好，总排最大遗漏数就是，如果第一列当中的第一个存在，第二个存在，第六个存在；第二列当中第三个存在，第八个存在；第三列当中第三个存在，第八个存在；第四列当中第四个存在，第七个存在；那么总的遗漏数就是：</p><ol><li>总共有四列，八行。（x轴，y轴）</li><li>第一行当中，只有第一列当中的第一个存在（1，1），不进行比较；</li><li>第二行当中，只有第一列当中的第二个存在（1，2），进行与第一行当中的第一列当中的第一个（1，1）比较；得出这两个元素之间的遗漏数为0，中间没有隔元素，说白了，就是没有隔没有相同元素的行。</li><li>第三行当中，第二列（2，3）与第三列（3，3）当中存在，则与第二行的进行比较，行与行之间没有隔没有相同元素的行，所以遗漏数也是0。</li><li>第四行当中，第四列（4，4）存在相同元素，所以第三行在与第四行进行比较的时候，也是遗漏数为0。</li><li>重点来了，第五行当中不存在有相同元素。所以无法进行算端点与端点得出段的这个算这个遗漏数。</li><li>终于到了第六行，第六行当中，存在有（1，6）位置上的元素，所以此时，第六行与第四行的进行比较，不这样说吧，就是第四行的去与第六行的去进行比较，由于第五行不存在有相同元素，所以第五行是空着的，这样第六行与第四行之间就存在有遗漏数了。</li><li>说白了，也就是行与行之间的这个算了。存在有隔着的行就是有遗漏数了。跟单排一样的道理。我这个脑子没想明白。</li></ol><p>好了不说了，这个树晾了几天了。</p><blockquote><p>主要代码[ fillDataToTable ]：</p></blockquote><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给detailData表格填充数据</span></span><br><span class="line"><span class="comment">     * @param sumArrays 所有数据</span></span><br><span class="line"><span class="comment"> * @param arrays 前端页面展示的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> function fillDataToTable(<span class="built_in">arrays</span>,sumArrays)&#123;</span><br><span class="line"> //清空表格数据</span><br><span class="line"><span class="built_in">var</span> detailData=document.getElementById(<span class="string">"detailData"</span>);</span><br><span class="line">detailData.innerHTML=<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">//表格插入表头数据</span><br><span class="line"><span class="built_in">var</span> <span class="built_in">row</span>=detailData.insertRow(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">row</span>.<span class="built_in">style</span>.fontWeight=<span class="string">"bolder"</span>;</span><br><span class="line"><span class="built_in">var</span> cell0=<span class="built_in">row</span>.insertCell(<span class="number">0</span>);</span><br><span class="line">cell0.innerHTML=<span class="string">"期数"</span>;</span><br><span class="line"><span class="built_in">var</span> cell1=<span class="built_in">row</span>.insertCell(<span class="number">1</span>);</span><br><span class="line">cell1.innerHTML=<span class="string">"开奖日期"</span>;</span><br><span class="line"><span class="built_in">var</span> cell2=<span class="built_in">row</span>.insertCell(<span class="number">2</span>);</span><br><span class="line"> cell2.innerHTML=<span class="string">"第一位数"</span>;</span><br><span class="line"><span class="built_in">var</span> cell3=<span class="built_in">row</span>.insertCell(<span class="number">3</span>);</span><br><span class="line"> cell3.innerHTML=<span class="string">"第二位数"</span>;</span><br><span class="line"><span class="built_in">var</span> cell4=<span class="built_in">row</span>.insertCell(<span class="number">4</span>);</span><br><span class="line">cell4.innerHTML=<span class="string">"第三位数"</span>;</span><br><span class="line"><span class="built_in">var</span> cell5=<span class="built_in">row</span>.insertCell(<span class="number">5</span>);</span><br><span class="line">cell5.innerHTML=<span class="string">"第四位数"</span>;</span><br><span class="line"><span class="built_in">var</span> cell6=<span class="built_in">row</span>.insertCell(<span class="number">6</span>);</span><br><span class="line">cell6.innerHTML=<span class="string">"第五位数"</span>;</span><br><span class="line"><span class="built_in">var</span> cell7=<span class="built_in">row</span>.insertCell(<span class="number">7</span>);</span><br><span class="line">cell7.innerHTML=<span class="string">"第六位数"</span>;</span><br><span class="line"><span class="built_in">var</span> cell8=<span class="built_in">row</span>.insertCell(<span class="number">8</span>);</span><br><span class="line">cell8.innerHTML=<span class="string">"第七位数"</span>;</span><br><span class="line"><span class="built_in">var</span> cell9=<span class="built_in">row</span>.insertCell(<span class="number">9</span>);</span><br><span class="line"> cell9.innerHTML=<span class="string">"操作"</span>;</span><br><span class="line"></span><br><span class="line">//表格分页数据插入</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arrays</span>.<span class="built_in">length</span>;i++)&#123;</span><br><span class="line"><span class="built_in">var</span> json=<span class="built_in">arrays</span>[i];</span><br><span class="line"><span class="built_in">var</span> row2=detailData.insertRow(i+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">var</span> cell0=row2.insertCell(<span class="number">0</span>);</span><br><span class="line">cell0.innerHTML=json.number;</span><br><span class="line"><span class="built_in">var</span> cell1=row2.insertCell(<span class="number">1</span>);</span><br><span class="line">cell1.innerHTML=json.createTime;</span><br><span class="line"><span class="built_in">var</span> cell2=row2.insertCell(<span class="number">2</span>);</span><br><span class="line">cell2.innerHTML=json.oneColumn;</span><br><span class="line"><span class="built_in">var</span> cell3=row2.insertCell(<span class="number">3</span>);</span><br><span class="line">cell3.innerHTML=json.twoColumn;</span><br><span class="line"><span class="built_in">var</span> cell4=row2.insertCell(<span class="number">4</span>);</span><br><span class="line">cell4.innerHTML=json.threeColumn;</span><br><span class="line"><span class="built_in">var</span> cell5=row2.insertCell(<span class="number">5</span>);</span><br><span class="line">cell5.innerHTML=json.fourColumn;</span><br><span class="line"><span class="built_in">var</span> cell6=row2.insertCell(<span class="number">6</span>);</span><br><span class="line">cell6.innerHTML=json.fiveColumn;</span><br><span class="line"><span class="built_in">var</span> cell7=row2.insertCell(<span class="number">7</span>);</span><br><span class="line">cell7.innerHTML=json.sixColumn;</span><br><span class="line"><span class="built_in">var</span> cell8=row2.insertCell(<span class="number">8</span>);</span><br><span class="line">cell8.innerHTML=json.sevenColumn;</span><br><span class="line"><span class="built_in">var</span> cell9=row2.insertCell(<span class="number">9</span>);</span><br><span class="line">cell9.innerHTML=<span class="string">"&lt;button onclick=\"show(this,"</span>+json.id+<span class="string">")\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#myModal\" &gt;编辑&lt;/button&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//单排遗漏数计算  总排遗漏数的计算应该简单，即每一排当中的最小值index，与每一排的最大值index取出来放入集合最后遍历出最小index与最大indeax进行相减即可</span><br><span class="line">//将总数据中sumArrays每一列数组分组出来形成sumArray=[oneArray[oneColumn,...],twoArray[twoColumn,...],...,sevenArray[sevenColumn,...]]</span><br><span class="line"> <span class="built_in">var</span> oneArray=[], twoArray=[], threeArray=[], fourArray=[],  fiveArray=[],  sixArray=[],  sevenArray=[], sumArray=[];</span><br><span class="line"> <span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;sumArrays.<span class="built_in">length</span>;i++)&#123;</span><br><span class="line"> <span class="built_in">var</span> json=sumArrays[i];</span><br><span class="line"> oneArray.<span class="built_in">push</span>(json.oneColumn);</span><br><span class="line"> twoArray.<span class="built_in">push</span>(json.twoColumn);</span><br><span class="line"> threeArray.<span class="built_in">push</span>(json.threeColumn);</span><br><span class="line"> fourArray.<span class="built_in">push</span>(json.fourColumn);</span><br><span class="line"> fiveArray.<span class="built_in">push</span>(json.fiveColumn);</span><br><span class="line"> sixArray.<span class="built_in">push</span>(json.sixColumn);</span><br><span class="line"> sevenArray.<span class="built_in">push</span>(json.sevenColumn);</span><br><span class="line"> &#125;</span><br><span class="line"> //插入<span class="number">7</span>列数组数据</span><br><span class="line"> sumArray.<span class="built_in">push</span>(oneArray);</span><br><span class="line"> sumArray.<span class="built_in">push</span>(twoArray);</span><br><span class="line"> sumArray.<span class="built_in">push</span>(threeArray);</span><br><span class="line"> sumArray.<span class="built_in">push</span>(fourArray);</span><br><span class="line"> sumArray.<span class="built_in">push</span>(fiveArray);</span><br><span class="line"> sumArray.<span class="built_in">push</span>(sixArray);</span><br><span class="line"> sumArray.<span class="built_in">push</span>(sevenArray);</span><br><span class="line"></span><br><span class="line"> //底部表头插入</span><br><span class="line"> <span class="built_in">var</span> tr0=detailData.insertRow(<span class="built_in">arrays</span>.<span class="built_in">length</span>+<span class="number">1</span>);</span><br><span class="line"> <span class="built_in">var</span> td0=tr0.insertCell(<span class="number">0</span>);</span><br><span class="line"> td0.colSpan=<span class="number">2</span>;</span><br><span class="line"> td0.innerHTML=<span class="string">"遗漏信息"</span>;</span><br><span class="line"> td0.<span class="built_in">style</span>.fontWeight=<span class="string">"bolder"</span>;</span><br><span class="line"> <span class="built_in">var</span> td00=tr0.insertCell(<span class="number">1</span>);</span><br><span class="line"> td00.colSpan=<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">var</span> <span class="built_in">tr</span>=detailData.insertRow(<span class="built_in">arrays</span>.<span class="built_in">length</span>+<span class="number">2</span>);</span><br><span class="line"> <span class="built_in">var</span> td=<span class="built_in">tr</span>.insertCell(<span class="number">0</span>);</span><br><span class="line"> td.<span class="built_in">style</span>.fontWeight=<span class="string">"bolder"</span>;</span><br><span class="line"> td.innerHTML=<span class="string">"数字 | 单排最大遗漏数 | 总排最大遗漏数"</span>;</span><br><span class="line"> td.colSpan=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"> //根据所查询的number分隔逗号，计算并得到其遗漏信息(数字、单排最大遗漏数、总排最大遗漏数)</span><br><span class="line"> <span class="built_in">var</span> numbers=document.getElementById(<span class="string">"number"</span>).value.trim();</span><br><span class="line"> console.<span class="built_in">log</span>(<span class="string">"nums: "</span>+numbers.<span class="built_in">split</span>(<span class="string">","</span>));</span><br><span class="line"></span><br><span class="line">//需要查询的number为空；则不进行显示其遗漏信息</span><br><span class="line"> <span class="keyword">if</span>(numbers==null || numbers=='' || numbers==undefined)&#123;</span><br><span class="line"> <span class="built_in">var</span> td11=<span class="built_in">tr</span>.insertCell(<span class="number">1</span>);</span><br><span class="line"> td11.colSpan=<span class="number">8</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> //需要查询的number不为空；则进行显示其遗漏信息</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="built_in">var</span> nums=numbers.<span class="built_in">split</span>(<span class="string">","</span>); //则遗漏信息、数字、单排最大遗漏数进行显示 循环查询每个数值的单排 总排</span><br><span class="line"></span><br><span class="line"> //需要查询的number遗漏信息数组的长度进行循环得到</span><br><span class="line"> <span class="keyword">for</span>(<span class="built_in">var</span> h=<span class="number">0</span>;h&lt;nums.<span class="built_in">length</span>;h++)&#123;</span><br><span class="line">  <span class="built_in">var</span> number=nums[h];//查询的数值</span><br><span class="line"> <span class="built_in">var</span> singleMap=<span class="built_in">new</span> Map();//关于该数值的单排最大遗漏数</span><br><span class="line"> <span class="built_in">var</span> sumList=[];</span><br><span class="line"> // <span class="built_in">var</span> minIndexMap=<span class="built_in">new</span> Map();//每一列， 每一个单排当中的最小index</span><br><span class="line"> // <span class="built_in">var</span> maxIndexMap=<span class="built_in">new</span> Map();//每一列， 每一个单排当中的最大index</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(<span class="built_in">var</span> t=<span class="number">0</span>;t&lt;sumArray.<span class="built_in">length</span>;t++)&#123; //当前<span class="number">7</span>个数组当中都存有对应的关于该需要进行查询遗漏信息的数值number,循环<span class="number">7</span>次,在七列当中进行查找以及得到它们所在的index</span><br><span class="line"> <span class="built_in">var</span> arrays2=sumArray[t];//总共有<span class="number">7</span>列，当前第t，单个数组</span><br><span class="line"> <span class="built_in">var</span> <span class="built_in">map</span>=<span class="built_in">new</span> Map();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;arrays2.<span class="built_in">length</span>;i++) &#123; //每一列数组元素的循环</span><br><span class="line"> <span class="built_in">var</span> element = arrays2[i]; //当前七列中第t列数组当中具体的元素</span><br><span class="line"> <span class="keyword">if</span> (number == element) &#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(element)==null || <span class="built_in">map</span>.<span class="built_in">get</span>(element)==undefined)&#123;</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(element, &#123;prior: null, curr: null, size: null&#125;); //<span class="built_in">map</span>.<span class="built_in">put</span>(element,<span class="number">0</span>);//放入了该列当中所有不重复元素以及其实时变化的位移index+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(<span class="built_in">var</span> n=<span class="number">0</span>;n&lt;arrays2.<span class="built_in">length</span>;n++)&#123;</span><br><span class="line"> <span class="built_in">var</span> <span class="built_in">key</span>=arrays2[n]; //当前七列中第t列数组当中具体的元素</span><br><span class="line"> <span class="keyword">if</span>(<span class="built_in">key</span>!=null &amp;&amp; <span class="built_in">key</span>==element &amp;&amp; number == <span class="built_in">key</span>)&#123; //如果存在有当前循环的数组当中的取值与<span class="built_in">map</span>当中的键相同的则重新赋值，重新赋值后进行<span class="built_in">break</span>;//<span class="built_in">var</span> y=i-n;</span><br><span class="line"> sumList.<span class="built_in">push</span>(n);</span><br><span class="line"></span><br><span class="line"> //存储每一个元素他的前一位相同元素的下标；y为当前元素的下标</span><br><span class="line"> <span class="keyword">if</span>((<span class="built_in">map</span>.<span class="built_in">get</span>(element)!=null &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element)!=undefined)</span><br><span class="line"> &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).prior==null &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).curr==null &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).size==null)&#123;</span><br><span class="line"> <span class="built_in">map</span>.<span class="built_in">put</span>(element,&#123;prior: n, curr: n, size: <span class="number">0</span>&#125;); //第一次遇到元素相同的时候</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>((<span class="built_in">map</span>.<span class="built_in">get</span>(element)!=null &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element)!=undefined)</span><br><span class="line"> &amp;&amp; (<span class="built_in">map</span>.<span class="built_in">get</span>(element).prior!=null &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).curr!=null &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).size!=null)</span><br><span class="line">  &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).prior==<span class="built_in">map</span>.<span class="built_in">get</span>(element).curr)&#123;</span><br><span class="line"> <span class="built_in">map</span>.<span class="built_in">put</span>(element,&#123;prior: <span class="built_in">map</span>.<span class="built_in">get</span>(element).prior, curr: n, size: n-<span class="built_in">map</span>.<span class="built_in">get</span>(element).prior&#125;); //第二次遇到元素相同的时候</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>((<span class="built_in">map</span>.<span class="built_in">get</span>(element)!=null &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element)!=undefined)</span><br><span class="line"> &amp;&amp; (<span class="built_in">map</span>.<span class="built_in">get</span>(element).prior!=null &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).curr!=null  &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).size!=null)</span><br><span class="line"> &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).prior!=<span class="built_in">map</span>.<span class="built_in">get</span>(element).curr) &#123;</span><br><span class="line">  // 此时 <span class="built_in">map</span> 中的 curr 即当前 <span class="built_in">key</span> 的相同元素的上一位置 prior 的 index ;取出 prior;</span><br><span class="line"> // 得到当前 <span class="built_in">key</span> index 与当前 <span class="built_in">key</span> index 的 prior 的 size；</span><br><span class="line"> // 如果当前 size较之此时<span class="built_in">map</span>当中element元素的size要大，则进行替换</span><br><span class="line"> <span class="built_in">var</span> currPrior=<span class="built_in">map</span>.<span class="built_in">get</span>(element).curr; //当前的上一位</span><br><span class="line"> <span class="built_in">var</span> currSize=n-currPrior; //当前的大小</span><br><span class="line"> <span class="built_in">var</span> priorSize=<span class="built_in">map</span>.<span class="built_in">get</span>(element).size; //上一位的大小</span><br><span class="line"> <span class="keyword">if</span>(currSize&gt;priorSize)&#123;</span><br><span class="line"> <span class="built_in">map</span>.<span class="built_in">put</span>(element,&#123;prior:currPrior, curr:n, size:currSize&#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> continue;//跳出对于第i列数组中element元素对于当前n数组的当次循环，进入当前n数组迭代下一元素<span class="built_in">key</span>的循环</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> console.<span class="built_in">log</span>(<span class="string">"第"</span>+t+<span class="string">"列当中，每一个元素的单排最大遗漏数："</span>+JSON.stringify(<span class="built_in">map</span>));</span><br><span class="line"> <span class="keyword">if</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(number)!=null || <span class="built_in">map</span>.<span class="built_in">get</span>(number)!=undefined)&#123;</span><br><span class="line"> //取值则为当前该<span class="built_in">map</span>.<span class="built_in">get</span>(number)即当前列当中的单排最大遗漏数</span><br><span class="line"> singleMap.<span class="built_in">put</span>(t,<span class="built_in">map</span>.<span class="built_in">get</span>(number).size-<span class="number">1</span>);//singleMap.<span class="built_in">put</span>(t,<span class="built_in">map</span>.<span class="built_in">get</span>(number)-<span class="number">1</span>);//<span class="built_in">key</span> t：哪一列， value 当前该数值在当前排t的最大遗漏数  <span class="built_in">map</span>.<span class="built_in">get</span>(number)需要减去<span class="number">1</span></span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> //当前列取出number如果为空则说明当前列当中不存在有该数值，则替换为<span class="number">0</span></span><br><span class="line"> singleMap.<span class="built_in">put</span>(t,'当前列不存在'+number);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> //遍历完<span class="number">7</span>个数组后得到当前查询的该数值的所有index</span><br><span class="line"> //得到当前查询的该数值的在<span class="number">7</span>列中的所有index，并进行index排序<span class="built_in">sort</span>,每一个index都与index.next进行比较得到size</span><br><span class="line"> //定义maxSize变量，并进行赋值</span><br><span class="line"> sumList.<span class="built_in">sort</span>(sortNumber);</span><br><span class="line"> <span class="built_in">var</span> sumMaxNumber=null;</span><br><span class="line"> <span class="keyword">if</span>(sumList.<span class="built_in">length</span>==<span class="number">0</span>)&#123;</span><br><span class="line"> sumMaxNumber='不存在';</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="built_in">var</span> g=<span class="number">0</span>;g&lt;sumList.<span class="built_in">length</span>;g++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(sumMaxNumber==null)&#123;</span><br><span class="line"> sumMaxNumber=sumList[g+<span class="number">1</span>]-sumList[g];</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="built_in">var</span> nextSize=sumList[g+<span class="number">1</span>]-sumList[g];</span><br><span class="line"> <span class="keyword">if</span>(nextSize&gt;sumMaxNumber)&#123;</span><br><span class="line">sumMaxNumber=nextSize;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">var</span> mapArrays=singleMap.entrys();//循环之后获取得到singleMap,即单排数</span><br><span class="line"> <span class="keyword">if</span> (h == <span class="number">0</span>) &#123; //即第一个数值的时候填入行<span class="built_in">tr</span>:<span class="built_in">arrays</span>.<span class="built_in">length</span>+<span class="number">2</span></span><br><span class="line"> td.innerHTML=<span class="string">"数字: "</span>+number+<span class="string">" | 单排最大遗漏数 | 总排最大遗漏数: "</span>+sumMaxNumber;</span><br><span class="line"> <span class="keyword">for</span>(<span class="built_in">var</span> r=<span class="number">0</span>;r&lt;mapArrays.<span class="built_in">length</span>;r++) &#123;</span><br><span class="line"> <span class="built_in">var</span> td22 = <span class="built_in">tr</span>.insertCell(r+<span class="number">1</span>);//当前行处于第一行</span><br><span class="line"> td22.innerHTML = singleMap.<span class="built_in">get</span>(r);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">tr</span>.insertCell(mapArrays.<span class="built_in">length</span>+<span class="number">1</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> //新增行并插入</span><br><span class="line"> <span class="built_in">var</span> newTr=detailData.insertRow(<span class="built_in">arrays</span>.<span class="built_in">length</span>+<span class="number">2</span>+h);</span><br><span class="line"> <span class="built_in">var</span> newTd=newTr.insertCell(<span class="number">0</span>);</span><br><span class="line"> newTd.innerHTML=<span class="string">"数字: "</span>+number+<span class="string">" | 单排最大遗漏数 | 总排最大遗漏数: "</span>+sumMaxNumber;</span><br><span class="line"> newTd.<span class="built_in">style</span>.fontWeight=<span class="string">"bolder"</span>;</span><br><span class="line"> newTd.colSpan=<span class="number">2</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="built_in">var</span> r=<span class="number">0</span>;r&lt;mapArrays.<span class="built_in">length</span>;r++) &#123;</span><br><span class="line"> <span class="built_in">var</span> td22 = newTr.insertCell(r+<span class="number">1</span>);//从第二行开始进行新增列</span><br><span class="line"> td22.innerHTML = singleMap.<span class="built_in">get</span>(r);</span><br><span class="line"> &#125;</span><br><span class="line"> newTr.insertCell(mapArrays.<span class="built_in">length</span>+<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> console.<span class="built_in">log</span>(<span class="string">"================== 查询数值："</span>+number+<span class="string">" END =================="</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下面小哥我就贴一下全部的代码哟：</p></blockquote><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"com.alibaba.fastjson.JSONObject"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"java.util.ArrayList"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"java.util.HashMap"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"java.util.List"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"java.util.Map"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"com.maima.entity.MaiMa"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"com.maima.entity.TUserInfo"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="ruby"> pageEncoding=<span class="string">"UTF-8"</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page trimDirectiveWhitespaces=<span class="string">"true"</span></span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span></span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ taglib prefix=<span class="string">"itcast"</span> uri=<span class="string">"http://itcast.cn/common/"</span></span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span></span><br><span class="line"><span class="ruby">TUserInfo tUserInfo=(TUserInfo) request.getSession().getAttribute(<span class="string">"tUserInfo"</span>);</span></span><br><span class="line"><span class="ruby"><span class="keyword">if</span>(tUserInfo==null)&#123;</span></span><br><span class="line"><span class="ruby">String path = request.getContextPath();</span></span><br><span class="line"><span class="ruby">String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort()</span></span><br><span class="line"><span class="ruby">+ path + <span class="string">"/"</span>;</span></span><br><span class="line"><span class="ruby">response.sendRedirect(basePath+<span class="string">"maima/index"</span>);</span></span><br><span class="line"><span class="ruby">&#125;</span></span><br><span class="line"><span class="xml">%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="meta-string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Bootstrap Core CSS --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/metisMenu.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/dataTables.bootstrap.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/sb-admin-2.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/font-awesome.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span></span><br><span class="line"><span class="xml">  type="text/css"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/boot-crm.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span></span><br><span class="line"><span class="xml">  type="text/css"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/bootstrap-datetimepicker/4.17.47/css/bootstrap-datetimepicker.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">![endif]--</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">.inputText&#123;</span></span><br><span class="line"><span class="xml">width:200px;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">.alert &#123;</span></span><br><span class="line"><span class="xml">display: none;</span></span><br><span class="line"><span class="xml">position: fixed;</span></span><br><span class="line"><span class="xml">top: 50%;</span></span><br><span class="line"><span class="xml">left: 50%;</span></span><br><span class="line"><span class="xml">min-width: 300px;</span></span><br><span class="line"><span class="xml">max-width: 600px;</span></span><br><span class="line"><span class="xml">transform: translate(-50%,-50%);</span></span><br><span class="line"><span class="xml">z-index: 99999;</span></span><br><span class="line"><span class="xml">text-align: center;</span></span><br><span class="line"><span class="xml">padding: 15px;</span></span><br><span class="line"><span class="xml">border-radius: 3px;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">.alert-success &#123;</span></span><br><span class="line"><span class="xml">color: #3c763d;</span></span><br><span class="line"><span class="xml">background-color: #dff0d8;</span></span><br><span class="line"><span class="xml">border-color: #d6e9c6;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">.alert-info &#123;</span></span><br><span class="line"><span class="xml">color: #31708f;</span></span><br><span class="line"><span class="xml">background-color: #d9edf7;</span></span><br><span class="line"><span class="xml">border-color: #bce8f1;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">.alert-warning &#123;</span></span><br><span class="line"><span class="xml">color: #8a6d3b;</span></span><br><span class="line"><span class="xml">background-color: #fcf8e3;</span></span><br><span class="line"><span class="xml">border-color: #faebcc;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">.alert-danger &#123;</span></span><br><span class="line"><span class="xml">color: #a94442;</span></span><br><span class="line"><span class="xml">background-color: #f2dede;</span></span><br><span class="line"><span class="xml">border-color: #ebccd1;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 模态框（Modal） --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"myModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>编号 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span>  <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>期数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span>  <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"numberId"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>开奖日期 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span>  <span class="attr">style</span>=<span class="string">"width: 200px;"</span>  <span class="attr">id</span>=<span class="string">'datetimepicker3'</span> &gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">'createTime'</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第一位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"oneColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第二位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"twoColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第三位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"threeColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第四位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fourColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第五位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fiveColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第六位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sixColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第七位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sevenColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"edit()"</span>&gt;</span>提交更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 模态框（Modal） --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"myModal2"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal2"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel2"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>期数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"numberId2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>开奖日期 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span>  <span class="attr">style</span>=<span class="string">"width: 200px;"</span>  <span class="attr">id</span>=<span class="string">'datetimepicker4'</span> &gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">'createTime2'</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第一位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"oneColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第二位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"twoColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第三位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"threeColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第四位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fourColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第五位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fiveColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第六位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sixColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第七位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sevenColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"add()"</span>&gt;</span>提交更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"page-wrapper"</span> <span class="attr">style</span>=<span class="string">"height: 100%"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>数字搜索 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"number"</span> <span class="attr">value</span>=<span class="string">"$&#123;number&#125;"</span> <span class="attr">name</span>=<span class="string">"number"</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"page"</span> <span class="attr">value</span>=<span class="string">"$&#123;page&#125;"</span> <span class="attr">name</span>=<span class="string">"page"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"pageSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;pageSize&#125;"</span> <span class="attr">name</span>=<span class="string">"pageSize"</span>  <span class="attr">style</span>=<span class="string">"display: none;"</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>开始日期 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span> <span class="attr">id</span>=<span class="string">'datetimepicker1'</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"createTime3"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>结束日期 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span> <span class="attr">id</span>=<span class="string">'datetimepicker2'</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"createTime4"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"go()"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">"margin-left:10px"</span> <span class="attr">onclick</span>=<span class="string">"reset()"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">"margin-left:10px"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-target</span>=<span class="string">"#myModal2"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered table-striped"</span> <span class="attr">id</span>=<span class="string">"detailData"</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span> <span class="attr">style</span>=<span class="string">"text-align: right"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"up()"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"down()"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery-ui.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/metisMenu.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.dataTables.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/dataTables.bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/sb-admin-2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">'/static/js/stopExecutionOnTimeout.js?t=1'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/layui/layui.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/Particleground.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/Treatment.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.mockjax.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/moment.js/2.24.0/moment-with-locales.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/bootstrap-datetimepicker/4.17.47/js/bootstrap-datetimepicker.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 初始化日期组件1、2、3、4</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">$(function () &#123;</span></span><br><span class="line"><span class="xml">for(var i=1;i<span class="tag">&lt;<span class="name">5;i++)&#123;</span></span></span></span><br><span class="line"><span class="xml">$('#datetimepicker'+i).datetimepicker(&#123;</span></span><br><span class="line"><span class="xml">format: 'YYYY-MM-DD',</span></span><br><span class="line"><span class="xml">locale: moment.locale('zh-cn')</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 弹出式提示框，默认1.2秒自动消失</span></span><br><span class="line"><span class="xml"> * @param message 提示信息</span></span><br><span class="line"><span class="xml"> * @param style 提示样式，有alert-success、alert-danger、alert-warning、alert-info</span></span><br><span class="line"><span class="xml"> * @param time 消失时间</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">var prompt = function (message, style, time)</span></span><br><span class="line"><span class="xml">&#123;</span></span><br><span class="line"><span class="xml">style = (style === undefined) ? 'alert-success' : style;</span></span><br><span class="line"><span class="xml">time = (time === undefined) ? 1200 : time;</span></span><br><span class="line"><span class="xml">$('<span class="tag">&lt;<span class="name">div</span>&gt;</span>')</span></span><br><span class="line"><span class="xml">.appendTo('body')</span></span><br><span class="line"><span class="xml">.addClass('alert ' + style)</span></span><br><span class="line"><span class="xml">.html(message)</span></span><br><span class="line"><span class="xml">.show()</span></span><br><span class="line"><span class="xml">.delay(time)</span></span><br><span class="line"><span class="xml">.fadeOut();</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> *  成功提示 - alert-success</span></span><br><span class="line"><span class="xml"> *  失败提示 - alert-danger</span></span><br><span class="line"><span class="xml"> *  提醒 - alert-warning</span></span><br><span class="line"><span class="xml"> *  信息提示 - alert-info</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">var success_prompt = function(message, time)</span></span><br><span class="line"><span class="xml">&#123;</span></span><br><span class="line"><span class="xml">prompt(message, 'alert-success', time);</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> *  添加双色球</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">function add()&#123;</span></span><br><span class="line"><span class="xml">console.log("==============add===============");</span></span><br><span class="line"><span class="xml">var numberId2=document.getElementById("numberId2").value;</span></span><br><span class="line"><span class="xml">var createTime2=document.getElementById("createTime2").value;</span></span><br><span class="line"><span class="xml">var oneColumn2=document.getElementById("oneColumn2").value;</span></span><br><span class="line"><span class="xml">var twoColumn2=document.getElementById("twoColumn2").value;</span></span><br><span class="line"><span class="xml">var threeColumn2=document.getElementById("threeColumn2").value;</span></span><br><span class="line"><span class="xml">var fourColumn2=document.getElementById("fourColumn2").value;</span></span><br><span class="line"><span class="xml">var fiveColumn2=document.getElementById("fiveColumn2").value;</span></span><br><span class="line"><span class="xml">var sixColumn2=document.getElementById("sixColumn2").value;</span></span><br><span class="line"><span class="xml">var sevenColumn2=document.getElementById("sevenColumn2").value;</span></span><br><span class="line"><span class="xml">if((numberId2==null || numberId2=='' || numberId2==undefined) ||</span></span><br><span class="line"><span class="xml">(createTime2==null || createTime2=='' || createTime2==undefined) ||</span></span><br><span class="line"><span class="xml">(oneColumn2==null || oneColumn2=='' || oneColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(twoColumn2==null || twoColumn2=='' || twoColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(threeColumn2==null || threeColumn2=='' || threeColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(fourColumn2==null || fourColumn2=='' || fourColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(fiveColumn2==null || fiveColumn2=='' || fiveColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(sixColumn2==null || sixColumn2=='' || sixColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(sevenColumn2==null || sevenColumn2=='' || sevenColumn2==undefined)</span></span><br><span class="line"><span class="xml">)&#123;</span></span><br><span class="line"><span class="xml">console.log("数据不完整,请检查参数并重新填写");</span></span><br><span class="line"><span class="xml">&#125;else&#123;</span></span><br><span class="line"><span class="xml">//发送请求进行新增</span></span><br><span class="line"><span class="xml">var requestDataBean = &#123;</span></span><br><span class="line"><span class="xml">numberId:numberId2,</span></span><br><span class="line"><span class="xml">createTime:createTime2,</span></span><br><span class="line"><span class="xml">oneColumn:oneColumn2,</span></span><br><span class="line"><span class="xml">twoColumn:twoColumn2,</span></span><br><span class="line"><span class="xml">threeColumn:threeColumn2,</span></span><br><span class="line"><span class="xml">fourColumn:fourColumn2,</span></span><br><span class="line"><span class="xml">fiveColumn:fiveColumn2,</span></span><br><span class="line"><span class="xml">sixColumn:sixColumn2,</span></span><br><span class="line"><span class="xml">sevenColumn:sevenColumn2</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">console.log("add - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">var url="/maima/addMaiMa";</span></span><br><span class="line"><span class="xml">AjaxPost(url, requestDataBean,</span></span><br><span class="line"><span class="xml">function () &#123;</span></span><br><span class="line"><span class="xml">//ajax加载中</span></span><br><span class="line"><span class="xml">&#125;,</span></span><br><span class="line"><span class="xml">function (data) &#123;</span></span><br><span class="line"><span class="xml">console.log("========数据获取成功======");</span></span><br><span class="line"><span class="xml">if(data!=null &amp;&amp; data.Code!=null &amp;&amp; data.Code==200 &amp;&amp; data.Status!=null &amp;&amp; data.Status=="ok")&#123;</span></span><br><span class="line"><span class="xml">success_prompt(data.Msg,2000);</span></span><br><span class="line"><span class="xml">console.log("========FLUSH======");</span></span><br><span class="line"><span class="xml">go();//flush</span></span><br><span class="line"><span class="xml">&#125;else &#123;</span></span><br><span class="line"><span class="xml">fail_prompt(data.Msg,2000);</span></span><br><span class="line"><span class="xml">AjaxErro(data);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> *  编辑双色球</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">function edit()&#123;</span></span><br><span class="line"><span class="xml">console.log("==============edit===============");</span></span><br><span class="line"><span class="xml">var id=document.getElementById("id").value;</span></span><br><span class="line"><span class="xml">var numberId2=document.getElementById("numberId").value;</span></span><br><span class="line"><span class="xml">var createTime2=document.getElementById("createTime").value;</span></span><br><span class="line"><span class="xml">var oneColumn2=document.getElementById("oneColumn").value;</span></span><br><span class="line"><span class="xml">var twoColumn2=document.getElementById("twoColumn").value;</span></span><br><span class="line"><span class="xml">var threeColumn2=document.getElementById("threeColumn").value;</span></span><br><span class="line"><span class="xml">var fourColumn2=document.getElementById("fourColumn").value;</span></span><br><span class="line"><span class="xml">var fiveColumn2=document.getElementById("fiveColumn").value;</span></span><br><span class="line"><span class="xml">var sixColumn2=document.getElementById("sixColumn").value;</span></span><br><span class="line"><span class="xml">var sevenColumn2=document.getElementById("sevenColumn").value;</span></span><br><span class="line"><span class="xml">if((id==null || id=='' || id==undefined)||</span></span><br><span class="line"><span class="xml">(numberId2==null || numberId2=='' || numberId2==undefined) ||</span></span><br><span class="line"><span class="xml">(createTime2==null || createTime2=='' || createTime2==undefined) ||</span></span><br><span class="line"><span class="xml">(oneColumn2==null || oneColumn2=='' || oneColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(twoColumn2==null || twoColumn2=='' || twoColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(threeColumn2==null || threeColumn2=='' || threeColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(fourColumn2==null || fourColumn2=='' || fourColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(fiveColumn2==null || fiveColumn2=='' || fiveColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(sixColumn2==null || sixColumn2=='' || sixColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(sevenColumn2==null || sevenColumn2=='' || sevenColumn2==undefined)</span></span><br><span class="line"><span class="xml">)&#123;</span></span><br><span class="line"><span class="xml">console.log("数据不完整,请检查参数并重新填写");</span></span><br><span class="line"><span class="xml">&#125;else&#123;</span></span><br><span class="line"><span class="xml">//发送请求进行新增</span></span><br><span class="line"><span class="xml">var requestDataBean = &#123;</span></span><br><span class="line"><span class="xml">id:id,</span></span><br><span class="line"><span class="xml">numberId:numberId2,</span></span><br><span class="line"><span class="xml">createTime:createTime2,</span></span><br><span class="line"><span class="xml">oneColumn:oneColumn2,</span></span><br><span class="line"><span class="xml">twoColumn:twoColumn2,</span></span><br><span class="line"><span class="xml">threeColumn:threeColumn2,</span></span><br><span class="line"><span class="xml">fourColumn:fourColumn2,</span></span><br><span class="line"><span class="xml">fiveColumn:fiveColumn2,</span></span><br><span class="line"><span class="xml">sixColumn:sixColumn2,</span></span><br><span class="line"><span class="xml">sevenColumn:sevenColumn2</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">console.log("edit - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">var url="/maima/editMaiMa";</span></span><br><span class="line"><span class="xml">AjaxPost(url, requestDataBean,</span></span><br><span class="line"><span class="xml">function () &#123;</span></span><br><span class="line"><span class="xml">//ajax加载中</span></span><br><span class="line"><span class="xml">&#125;,</span></span><br><span class="line"><span class="xml">function (data) &#123;</span></span><br><span class="line"><span class="xml">console.log("========数据获取成功======");</span></span><br><span class="line"><span class="xml">if(data!=null &amp;&amp; data.Code!=null &amp;&amp; data.Code==200 &amp;&amp; data.Status!=null &amp;&amp; data.Status=="ok")&#123;</span></span><br><span class="line"><span class="xml">success_prompt(data.Msg,2000);</span></span><br><span class="line"><span class="xml">console.log("========FLUSH======");</span></span><br><span class="line"><span class="xml">go();//flush</span></span><br><span class="line"><span class="xml">&#125;else &#123;</span></span><br><span class="line"><span class="xml">fail_prompt(data.Msg,2000);</span></span><br><span class="line"><span class="xml">AjaxErro(data);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 重置</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">function reset()&#123;</span></span><br><span class="line"><span class="xml">document.getElementById("number").value="";</span></span><br><span class="line"><span class="xml">document.getElementById("createTime3").value="";</span></span><br><span class="line"><span class="xml">document.getElementById("createTime4").value="";</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 用于编辑显示页面填入数据</span></span><br><span class="line"><span class="xml"> * @param obj 被点击编辑的按钮</span></span><br><span class="line"><span class="xml"> * @param id 该按钮所代表的的双色球记录id</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">function show(obj,id)&#123;</span></span><br><span class="line"><span class="xml">var value0 = $(obj).parents("td").parents("tr").children("td").eq(0).text();</span></span><br><span class="line"><span class="xml">var value1 = $(obj).parents("td").parents("tr").children("td").eq(1).text();</span></span><br><span class="line"><span class="xml">var value2 = $(obj).parents("td").parents("tr").children("td").eq(2).text();</span></span><br><span class="line"><span class="xml">var value3 = $(obj).parents("td").parents("tr").children("td").eq(3).text();</span></span><br><span class="line"><span class="xml">var value4 = $(obj).parents("td").parents("tr").children("td").eq(4).text();</span></span><br><span class="line"><span class="xml">var value5 = $(obj).parents("td").parents("tr").children("td").eq(5).text();</span></span><br><span class="line"><span class="xml">var value6 = $(obj).parents("td").parents("tr").children("td").eq(6).text();</span></span><br><span class="line"><span class="xml">var value7 = $(obj).parents("td").parents("tr").children("td").eq(7).text();</span></span><br><span class="line"><span class="xml">var value8 = $(obj).parents("td").parents("tr").children("td").eq(8).text();</span></span><br><span class="line"><span class="xml">console.log("show - [numberId: "+value0+" ，createTime: "+value1+" ，oneColumn: "+value2+" ，twoColumn: "+value3+" ，threeColumn: "+value4+" ，fourColumn: "+value5+" ，fiveColumn: "+value6+" ，sixColumn: "+value7+" ，sevenColumn: "+value8+" ]");</span></span><br><span class="line"><span class="xml">document.getElementById("id").value=id;</span></span><br><span class="line"><span class="xml">document.getElementById("numberId").value=value0;</span></span><br><span class="line"><span class="xml">document.getElementById("createTime").value=value1;</span></span><br><span class="line"><span class="xml">document.getElementById("oneColumn").value=value2;</span></span><br><span class="line"><span class="xml">document.getElementById("twoColumn").value=value3;</span></span><br><span class="line"><span class="xml">document.getElementById("threeColumn").value=value4;</span></span><br><span class="line"><span class="xml">document.getElementById("fourColumn").value=value5;</span></span><br><span class="line"><span class="xml">document.getElementById("fiveColumn").value=value6;</span></span><br><span class="line"><span class="xml">document.getElementById("sixColumn").value=value7;</span></span><br><span class="line"><span class="xml">document.getElementById("sevenColumn").value=value8;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">function Map() &#123;</span></span><br><span class="line"><span class="xml">/** 存放键的数组(遍历用到) */</span></span><br><span class="line"><span class="xml">this.keys = new Array();</span></span><br><span class="line"><span class="xml">/** 存放数据 */</span></span><br><span class="line"><span class="xml">this.data = new Object();</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 放入一个键值对</span></span><br><span class="line"><span class="xml"> * @param &#123;String&#125; key</span></span><br><span class="line"><span class="xml"> * @param &#123;Object&#125; value</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">this.put = function(key, value) &#123;</span></span><br><span class="line"><span class="xml">if(this.data[key] == null)&#123;</span></span><br><span class="line"><span class="xml">this.keys.push(key);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">this.data[key] = value;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 获取某键对应的值</span></span><br><span class="line"><span class="xml"> * @param &#123;String&#125; key</span></span><br><span class="line"><span class="xml"> * @return &#123;Object&#125; value</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">this.get = function(key) &#123;</span></span><br><span class="line"><span class="xml">return this.data[key];</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 删除一个键值对</span></span><br><span class="line"><span class="xml"> * @param &#123;String&#125; key</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">this.remove = function(key) &#123;</span></span><br><span class="line"><span class="xml">this.keys.remove(key);</span></span><br><span class="line"><span class="xml">this.data[key] = null;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 遍历Map,执行处理函数</span></span><br><span class="line"><span class="xml"> *</span></span><br><span class="line"><span class="xml"> * @param &#123;Function&#125; 回调函数 function(key,value,index)&#123;..&#125;</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">this.each = function(fn)&#123;</span></span><br><span class="line"><span class="xml">if(typeof fn != 'function')&#123;</span></span><br><span class="line"><span class="xml">return;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">var len = this.keys.length;</span></span><br><span class="line"><span class="xml">for(var i=0;i<span class="tag">&lt;<span class="name">len;i++)&#123;</span></span></span></span><br><span class="line"><span class="xml">var k = this.keys[i];</span></span><br><span class="line"><span class="xml">fn(k,this.data[k],i);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 获取键值数组(类似<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://lib.csdn.net/base/java"</span> <span class="attr">class</span>=<span class="string">'replace_word'</span> <span class="attr">title</span>=<span class="string">"Java 知识库"</span> <span class="attr">target</span>=<span class="string">'_blank'</span> <span class="attr">style</span>=<span class="string">'color:#df3434; font-weight:bold;'</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span>的entrySet())</span></span><br><span class="line"><span class="xml"> * @return 键值对象&#123;key,value&#125;的数组</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">this.entrys = function() &#123;</span></span><br><span class="line"><span class="xml">var len = this.keys.length;</span></span><br><span class="line"><span class="xml">var entrys = new Array(len);</span></span><br><span class="line"><span class="xml">for (var i = 0; i <span class="tag">&lt; <span class="attr">len</span>; <span class="attr">i</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">entrys[i] = &#123;</span></span><br><span class="line"><span class="xml">key : this.keys[i],</span></span><br><span class="line"><span class="xml">value : this.data[i]</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">return entrys;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 判断Map是否为空</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">this.isEmpty = function() &#123;</span></span><br><span class="line"><span class="xml">return this.keys.length == 0;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 获取键值对数量</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">this.size = function()&#123;</span></span><br><span class="line"><span class="xml">return this.keys.length;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 重写toString</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">this.toString = function()&#123;</span></span><br><span class="line"><span class="xml">var s = "&#123;";</span></span><br><span class="line"><span class="xml">for(var i=0;i<span class="tag">&lt;<span class="name">this.keys.length;i++,s+=',')&#123;</span></span></span></span><br><span class="line"><span class="xml">var k = this.keys[i];</span></span><br><span class="line"><span class="xml">s += k+"="+this.data[k];</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">s=s.substr(0,s.length-1);</span></span><br><span class="line"><span class="xml">s+="&#125;";</span></span><br><span class="line"><span class="xml">return s;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 上一页</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">function up()&#123;</span></span><br><span class="line"><span class="xml">var upPage=document.getElementById("page").value;</span></span><br><span class="line"><span class="xml">var pageSize=document.getElementById("pageSize").value;</span></span><br><span class="line"><span class="xml">var number=document.getElementById("number").value;</span></span><br><span class="line"><span class="xml">if(upPage=='' || upPage==undefined || upPage==null || upPage<span class="tag">&lt;<span class="name">1)&#123;</span></span></span></span><br><span class="line"><span class="xml">upPage=0;</span></span><br><span class="line"><span class="xml">&#125;else&#123;</span></span><br><span class="line"><span class="xml">upPage=upPage*1-1;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">if(upPage<span class="tag">&lt;<span class="name">0)&#123;</span></span></span></span><br><span class="line"><span class="xml">upPage=0;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">var requestDataBean = &#123;page:upPage,pageSize:pageSize*1,number:number&#125;;</span></span><br><span class="line"><span class="xml">console.log("上一页 - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">getData(requestDataBean);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 下一页</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">function down()&#123;</span></span><br><span class="line"><span class="xml">var downPage=document.getElementById("page").value;</span></span><br><span class="line"><span class="xml">var pageSize=document.getElementById("pageSize").value;</span></span><br><span class="line"><span class="xml">var number=document.getElementById("number").value;</span></span><br><span class="line"><span class="xml">if(downPage=='' || downPage==undefined || downPage==null)&#123;</span></span><br><span class="line"><span class="xml">downPage=0;</span></span><br><span class="line"><span class="xml">&#125;else&#123;</span></span><br><span class="line"><span class="xml">downPage=downPage*1+1;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">var requestDataBean = &#123;page:downPage,pageSize:pageSize*1,number:number&#125;;</span></span><br><span class="line"><span class="xml">console.log("下一页 - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">getData(requestDataBean);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 查询</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">function go()&#123;</span></span><br><span class="line"><span class="xml">var page=document.getElementById("page").value;</span></span><br><span class="line"><span class="xml">var pageSize=document.getElementById("pageSize").value;</span></span><br><span class="line"><span class="xml">var number=document.getElementById("number").value;</span></span><br><span class="line"><span class="xml">var createTime1=document.getElementById("createTime3").value;</span></span><br><span class="line"><span class="xml">var createTime2=document.getElementById("createTime4").value;</span></span><br><span class="line"><span class="xml">var requestDataBean = &#123;page:page*1,pageSize:pageSize*1,number:number,createTime1:createTime1,createTime2:createTime2&#125;;</span></span><br><span class="line"><span class="xml">console.log("数据查询 - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">getData(requestDataBean);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 数字排序</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">function sortNumber(a,b)</span></span><br><span class="line"><span class="xml">&#123;</span></span><br><span class="line"><span class="xml">return a - b</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 给detailData表格填充数据</span></span><br><span class="line"><span class="xml">     * @param sumArrays 所有数据</span></span><br><span class="line"><span class="xml"> * @param arrays 前端页面展示的数据</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml"> function fillDataToTable(arrays,sumArrays)&#123;</span></span><br><span class="line"><span class="xml"> //清空表格数据</span></span><br><span class="line"><span class="xml">var detailData=document.getElementById("detailData");</span></span><br><span class="line"><span class="xml">detailData.innerHTML="";</span></span><br><span class="line"></span><br><span class="line"><span class="xml">//表格插入表头数据</span></span><br><span class="line"><span class="xml">var row=detailData.insertRow(0);</span></span><br><span class="line"><span class="xml">row.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml">var cell0=row.insertCell(0);</span></span><br><span class="line"><span class="xml">cell0.innerHTML="期数";</span></span><br><span class="line"><span class="xml">var cell1=row.insertCell(1);</span></span><br><span class="line"><span class="xml">cell1.innerHTML="开奖日期";</span></span><br><span class="line"><span class="xml">var cell2=row.insertCell(2);</span></span><br><span class="line"><span class="xml"> cell2.innerHTML="第一位数";</span></span><br><span class="line"><span class="xml">var cell3=row.insertCell(3);</span></span><br><span class="line"><span class="xml"> cell3.innerHTML="第二位数";</span></span><br><span class="line"><span class="xml">var cell4=row.insertCell(4);</span></span><br><span class="line"><span class="xml">cell4.innerHTML="第三位数";</span></span><br><span class="line"><span class="xml">var cell5=row.insertCell(5);</span></span><br><span class="line"><span class="xml">cell5.innerHTML="第四位数";</span></span><br><span class="line"><span class="xml">var cell6=row.insertCell(6);</span></span><br><span class="line"><span class="xml">cell6.innerHTML="第五位数";</span></span><br><span class="line"><span class="xml">var cell7=row.insertCell(7);</span></span><br><span class="line"><span class="xml">cell7.innerHTML="第六位数";</span></span><br><span class="line"><span class="xml">var cell8=row.insertCell(8);</span></span><br><span class="line"><span class="xml">cell8.innerHTML="第七位数";</span></span><br><span class="line"><span class="xml">var cell9=row.insertCell(9);</span></span><br><span class="line"><span class="xml"> cell9.innerHTML="操作";</span></span><br><span class="line"></span><br><span class="line"><span class="xml">//表格分页数据插入</span></span><br><span class="line"><span class="xml">for(var i=0;i<span class="tag">&lt;<span class="name">arrays.length;i++)&#123;</span></span></span></span><br><span class="line"><span class="xml">var json=arrays[i];</span></span><br><span class="line"><span class="xml">var row2=detailData.insertRow(i+1);</span></span><br><span class="line"><span class="xml">var cell0=row2.insertCell(0);</span></span><br><span class="line"><span class="xml">cell0.innerHTML=json.number;</span></span><br><span class="line"><span class="xml">var cell1=row2.insertCell(1);</span></span><br><span class="line"><span class="xml">cell1.innerHTML=json.createTime;</span></span><br><span class="line"><span class="xml">var cell2=row2.insertCell(2);</span></span><br><span class="line"><span class="xml">cell2.innerHTML=json.oneColumn;</span></span><br><span class="line"><span class="xml">var cell3=row2.insertCell(3);</span></span><br><span class="line"><span class="xml">cell3.innerHTML=json.twoColumn;</span></span><br><span class="line"><span class="xml">var cell4=row2.insertCell(4);</span></span><br><span class="line"><span class="xml">cell4.innerHTML=json.threeColumn;</span></span><br><span class="line"><span class="xml">var cell5=row2.insertCell(5);</span></span><br><span class="line"><span class="xml">cell5.innerHTML=json.fourColumn;</span></span><br><span class="line"><span class="xml">var cell6=row2.insertCell(6);</span></span><br><span class="line"><span class="xml">cell6.innerHTML=json.fiveColumn;</span></span><br><span class="line"><span class="xml">var cell7=row2.insertCell(7);</span></span><br><span class="line"><span class="xml">cell7.innerHTML=json.sixColumn;</span></span><br><span class="line"><span class="xml">var cell8=row2.insertCell(8);</span></span><br><span class="line"><span class="xml">cell8.innerHTML=json.sevenColumn;</span></span><br><span class="line"><span class="xml">var cell9=row2.insertCell(9);</span></span><br><span class="line"><span class="xml">cell9.innerHTML="<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">\</span>"<span class="attr">show</span>(<span class="attr">this</span>,"+<span class="attr">json.id</span>+")\" <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">btn</span> <span class="attr">btn-primary</span>\" <span class="attr">data-toggle</span>=<span class="string">\</span>"<span class="attr">modal</span>\" <span class="attr">data-target</span>=<span class="string">\</span>"#<span class="attr">myModal</span>\" &gt;</span>编辑<span class="tag">&lt;/<span class="name">button</span>&gt;</span>";</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">//单排遗漏数计算  总排遗漏数的计算应该简单，即每一排当中的最小值index，与每一排的最大值index取出来放入集合最后遍历出最小index与最大indeax进行相减即可</span></span><br><span class="line"><span class="xml">//将总数据中sumArrays每一列数组分组出来形成sumArray=[oneArray[oneColumn,...],twoArray[twoColumn,...],...,sevenArray[sevenColumn,...]]</span></span><br><span class="line"><span class="xml"> var oneArray=[], twoArray=[], threeArray=[], fourArray=[],  fiveArray=[],  sixArray=[],  sevenArray=[], sumArray=[];</span></span><br><span class="line"><span class="xml"> for(var i=0;i<span class="tag">&lt;<span class="name">sumArrays.length;i++)&#123;</span></span></span></span><br><span class="line"><span class="xml"> var json=sumArrays[i];</span></span><br><span class="line"><span class="xml"> oneArray.push(json.oneColumn);</span></span><br><span class="line"><span class="xml"> twoArray.push(json.twoColumn);</span></span><br><span class="line"><span class="xml"> threeArray.push(json.threeColumn);</span></span><br><span class="line"><span class="xml"> fourArray.push(json.fourColumn);</span></span><br><span class="line"><span class="xml"> fiveArray.push(json.fiveColumn);</span></span><br><span class="line"><span class="xml"> sixArray.push(json.sixColumn);</span></span><br><span class="line"><span class="xml"> sevenArray.push(json.sevenColumn);</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> //插入7列数组数据</span></span><br><span class="line"><span class="xml"> sumArray.push(oneArray);</span></span><br><span class="line"><span class="xml"> sumArray.push(twoArray);</span></span><br><span class="line"><span class="xml"> sumArray.push(threeArray);</span></span><br><span class="line"><span class="xml"> sumArray.push(fourArray);</span></span><br><span class="line"><span class="xml"> sumArray.push(fiveArray);</span></span><br><span class="line"><span class="xml"> sumArray.push(sixArray);</span></span><br><span class="line"><span class="xml"> sumArray.push(sevenArray);</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> //底部表头插入</span></span><br><span class="line"><span class="xml"> var tr0=detailData.insertRow(arrays.length+1);</span></span><br><span class="line"><span class="xml"> var td0=tr0.insertCell(0);</span></span><br><span class="line"><span class="xml"> td0.colSpan=2;</span></span><br><span class="line"><span class="xml"> td0.innerHTML="遗漏信息";</span></span><br><span class="line"><span class="xml"> td0.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml"> var td00=tr0.insertCell(1);</span></span><br><span class="line"><span class="xml"> td00.colSpan=8;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> var tr=detailData.insertRow(arrays.length+2);</span></span><br><span class="line"><span class="xml"> var td=tr.insertCell(0);</span></span><br><span class="line"><span class="xml"> td.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml"> td.innerHTML="数字 | 单排最大遗漏数 | 总排最大遗漏数";</span></span><br><span class="line"><span class="xml"> td.colSpan=2;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> //根据所查询的number分隔逗号，计算并得到其遗漏信息(数字、单排最大遗漏数、总排最大遗漏数)</span></span><br><span class="line"><span class="xml"> var numbers=document.getElementById("number").value.trim();</span></span><br><span class="line"><span class="xml"> console.log("nums: "+numbers.split(","));</span></span><br><span class="line"></span><br><span class="line"><span class="xml">//需要查询的number为空；则不进行显示其遗漏信息</span></span><br><span class="line"><span class="xml"> if(numbers==null || numbers=='' || numbers==undefined)&#123;</span></span><br><span class="line"><span class="xml"> var td11=tr.insertCell(1);</span></span><br><span class="line"><span class="xml"> td11.colSpan=8;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> //需要查询的number不为空；则进行显示其遗漏信息</span></span><br><span class="line"><span class="xml"> else&#123;</span></span><br><span class="line"><span class="xml"> var nums=numbers.split(","); //则遗漏信息、数字、单排最大遗漏数进行显示 循环查询每个数值的单排 总排</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> //需要查询的number遗漏信息数组的长度进行循环得到</span></span><br><span class="line"><span class="xml"> for(var h=0;h<span class="tag">&lt;<span class="name">nums.length;h++)&#123;</span></span></span></span><br><span class="line"><span class="xml">  var number=nums[h];//查询的数值</span></span><br><span class="line"><span class="xml"> var singleMap=new Map();//关于该数值的单排最大遗漏数</span></span><br><span class="line"><span class="xml"> var sumList=[];</span></span><br><span class="line"><span class="xml"> // var minIndexMap=new Map();//每一列， 每一个单排当中的最小index</span></span><br><span class="line"><span class="xml"> // var maxIndexMap=new Map();//每一列， 每一个单排当中的最大index</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> for(var t=0;t<span class="tag">&lt;<span class="name">sumArray.length;t++)&#123;</span> //当前<span class="attr">7</span>个数组当中都存有对应的关于该需要进行查询遗漏信息的数值<span class="attr">number</span>,循环<span class="attr">7</span>次,在七列当中进行查找以及得到它们所在的<span class="attr">index</span></span></span></span><br><span class="line"><span class="xml"> var arrays2=sumArray[t];//总共有7列，当前第t，单个数组</span></span><br><span class="line"><span class="xml"> var map=new Map();</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> for(var i=0;i<span class="tag">&lt;<span class="name">arrays2.length;i++)</span> &#123; //每一列数组元素的循环</span></span></span><br><span class="line"><span class="xml"> var element = arrays2[i]; //当前七列中第t列数组当中具体的元素</span></span><br><span class="line"><span class="xml"> if (number == element) &#123;</span></span><br><span class="line"><span class="xml"> if(map.get(element)==null || map.get(element)==undefined)&#123;</span></span><br><span class="line"><span class="xml">map.put(element, &#123;prior: null, curr: null, size: null&#125;); //map.put(element,0);//放入了该列当中所有不重复元素以及其实时变化的位移index+1</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> for(var n=0;n<span class="tag">&lt;<span class="name">arrays2.length;n++)&#123;</span></span></span></span><br><span class="line"><span class="xml"> var key=arrays2[n]; //当前七列中第t列数组当中具体的元素</span></span><br><span class="line"><span class="xml"> if(key!=null &amp;&amp; key==element &amp;&amp; number == key)&#123; //如果存在有当前循环的数组当中的取值与map当中的键相同的则重新赋值，重新赋值后进行break;//var y=i-n;</span></span><br><span class="line"><span class="xml"> sumList.push(n);</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> //存储每一个元素他的前一位相同元素的下标；y为当前元素的下标</span></span><br><span class="line"><span class="xml"> if((map.get(element)!=null &amp;&amp; map.get(element)!=undefined)</span></span><br><span class="line"><span class="xml"> &amp;&amp; map.get(element).prior==null &amp;&amp; map.get(element).curr==null &amp;&amp; map.get(element).size==null)&#123;</span></span><br><span class="line"><span class="xml"> map.put(element,&#123;prior: n, curr: n, size: 0&#125;); //第一次遇到元素相同的时候</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> if((map.get(element)!=null &amp;&amp; map.get(element)!=undefined)</span></span><br><span class="line"><span class="xml"> &amp;&amp; (map.get(element).prior!=null &amp;&amp; map.get(element).curr!=null &amp;&amp; map.get(element).size!=null)</span></span><br><span class="line"><span class="xml">  &amp;&amp; map.get(element).prior==map.get(element).curr)&#123;</span></span><br><span class="line"><span class="xml"> map.put(element,&#123;prior: map.get(element).prior, curr: n, size: n-map.get(element).prior&#125;); //第二次遇到元素相同的时候</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> if((map.get(element)!=null &amp;&amp; map.get(element)!=undefined)</span></span><br><span class="line"><span class="xml"> &amp;&amp; (map.get(element).prior!=null &amp;&amp; map.get(element).curr!=null  &amp;&amp; map.get(element).size!=null)</span></span><br><span class="line"><span class="xml"> &amp;&amp; map.get(element).prior!=map.get(element).curr) &#123;</span></span><br><span class="line"><span class="xml">  // 此时 map 中的 curr 即当前 key 的相同元素的上一位置 prior 的 index ;取出 prior;</span></span><br><span class="line"><span class="xml"> // 得到当前 key index 与当前 key index 的 prior 的 size；</span></span><br><span class="line"><span class="xml"> // 如果当前 size较之此时map当中element元素的size要大，则进行替换</span></span><br><span class="line"><span class="xml"> var currPrior=map.get(element).curr; //当前的上一位</span></span><br><span class="line"><span class="xml"> var currSize=n-currPrior; //当前的大小</span></span><br><span class="line"><span class="xml"> var priorSize=map.get(element).size; //上一位的大小</span></span><br><span class="line"><span class="xml"> if(currSize&gt;priorSize)&#123;</span></span><br><span class="line"><span class="xml"> map.put(element,&#123;prior:currPrior, curr:n, size:currSize&#125;);</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;else&#123;</span></span><br><span class="line"><span class="xml"> continue;//跳出对于第i列数组中element元素对于当前n数组的当次循环，进入当前n数组迭代下一元素key的循环</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> console.log("第"+t+"列当中，每一个元素的单排最大遗漏数："+JSON.stringify(map));</span></span><br><span class="line"><span class="xml"> if(map.get(number)!=null || map.get(number)!=undefined)&#123;</span></span><br><span class="line"><span class="xml"> //取值则为当前该map.get(number)即当前列当中的单排最大遗漏数</span></span><br><span class="line"><span class="xml"> singleMap.put(t,map.get(number).size-1);//singleMap.put(t,map.get(number)-1);//key t：哪一列， value 当前该数值在当前排t的最大遗漏数  map.get(number)需要减去1</span></span><br><span class="line"><span class="xml"> &#125;else&#123;</span></span><br><span class="line"><span class="xml"> //当前列取出number如果为空则说明当前列当中不存在有该数值，则替换为0</span></span><br><span class="line"><span class="xml"> singleMap.put(t,'当前列不存在'+number);</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> //遍历完7个数组后得到当前查询的该数值的所有index</span></span><br><span class="line"><span class="xml"> //得到当前查询的该数值的在7列中的所有index，并进行index排序sort,每一个index都与index.next进行比较得到size</span></span><br><span class="line"><span class="xml"> //定义maxSize变量，并进行赋值</span></span><br><span class="line"><span class="xml"> sumList.sort(sortNumber);</span></span><br><span class="line"><span class="xml"> var sumMaxNumber=null;</span></span><br><span class="line"><span class="xml"> if(sumList.length==0)&#123;</span></span><br><span class="line"><span class="xml"> sumMaxNumber='不存在';</span></span><br><span class="line"><span class="xml"> &#125;else&#123;</span></span><br><span class="line"><span class="xml"> for(var g=0;g<span class="tag">&lt;<span class="name">sumList.length;g++)&#123;</span></span></span></span><br><span class="line"><span class="xml"> if(sumMaxNumber==null)&#123;</span></span><br><span class="line"><span class="xml"> sumMaxNumber=sumList[g+1]-sumList[g];</span></span><br><span class="line"><span class="xml"> &#125;else&#123;</span></span><br><span class="line"><span class="xml"> var nextSize=sumList[g+1]-sumList[g];</span></span><br><span class="line"><span class="xml"> if(nextSize&gt;sumMaxNumber)&#123;</span></span><br><span class="line"><span class="xml">sumMaxNumber=nextSize;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> var mapArrays=singleMap.entrys();//循环之后获取得到singleMap,即单排数</span></span><br><span class="line"><span class="xml"> if (h == 0) &#123; //即第一个数值的时候填入行tr:arrays.length+2</span></span><br><span class="line"><span class="xml"> td.innerHTML="数字: "+number+" | 单排最大遗漏数 | 总排最大遗漏数: "+sumMaxNumber;</span></span><br><span class="line"><span class="xml"> for(var r=0;r<span class="tag">&lt;<span class="name">mapArrays.length;r++)</span> &#123;</span></span></span><br><span class="line"><span class="xml"> var td22 = tr.insertCell(r+1);//当前行处于第一行</span></span><br><span class="line"><span class="xml"> td22.innerHTML = singleMap.get(r);</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> tr.insertCell(mapArrays.length+1);</span></span><br><span class="line"><span class="xml"> &#125; else &#123;</span></span><br><span class="line"><span class="xml"> //新增行并插入</span></span><br><span class="line"><span class="xml"> var newTr=detailData.insertRow(arrays.length+2+h);</span></span><br><span class="line"><span class="xml"> var newTd=newTr.insertCell(0);</span></span><br><span class="line"><span class="xml"> newTd.innerHTML="数字: "+number+" | 单排最大遗漏数 | 总排最大遗漏数: "+sumMaxNumber;</span></span><br><span class="line"><span class="xml"> newTd.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml"> newTd.colSpan=2;</span></span><br><span class="line"><span class="xml"> for(var r=0;r<span class="tag">&lt;<span class="name">mapArrays.length;r++)</span> &#123;</span></span></span><br><span class="line"><span class="xml"> var td22 = newTr.insertCell(r+1);//从第二行开始进行新增列</span></span><br><span class="line"><span class="xml"> td22.innerHTML = singleMap.get(r);</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> newTr.insertCell(mapArrays.length+1);</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> console.log("================== 查询数值："+number+" END ==================");</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 获取list接口数据</span></span><br><span class="line"><span class="xml"> * @param requestDataBean</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">function getData(requestDataBean)&#123;</span></span><br><span class="line"><span class="xml">var url="/maima/findAllByParams";</span></span><br><span class="line"><span class="xml">AjaxPost(url, requestDataBean,</span></span><br><span class="line"><span class="xml">function () &#123;</span></span><br><span class="line"><span class="xml">//ajax加载中</span></span><br><span class="line"><span class="xml">&#125;,</span></span><br><span class="line"><span class="xml">function (data) &#123;</span></span><br><span class="line"><span class="xml">console.log("========数据获取成功======");</span></span><br><span class="line"><span class="xml">//ajax返回 //认证完成</span></span><br><span class="line"><span class="xml">if(data!=null)&#123;</span></span><br><span class="line"><span class="xml">var arrays=JSON.parse(JSON.stringify(data.list));</span></span><br><span class="line"><span class="xml">var sumArrays=JSON.parse(JSON.stringify(data.list2));</span></span><br><span class="line"><span class="xml">document.getElementById("page").value=data.page;</span></span><br><span class="line"><span class="xml">document.getElementById("pageSize").value=data.pageSize;</span></span><br><span class="line"><span class="xml">if (arrays.length!=0) &#123;</span></span><br><span class="line"><span class="xml">//前端填充数据操作</span></span><br><span class="line"><span class="xml">console.log("======= 表格填充数据 - fillDataToTable =======")</span></span><br><span class="line"><span class="xml">fillDataToTable(arrays,sumArrays);</span></span><br><span class="line"><span class="xml">&#125; else &#123;</span></span><br><span class="line"><span class="xml">AjaxErro(data);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 页面加载</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">window.onload = function()&#123;</span></span><br><span class="line"><span class="xml">var requestDataBean = &#123;page:0,pageSize:10&#125;;</span></span><br><span class="line"><span class="xml">console.info("页面加载 - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">getData(requestDataBean);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby">-</span></span><br><span class="line"></span><br><span class="line"><span class="ruby"> /<span class="regexp">/console.log(map.toString());</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ var mapArrays=map.entrys();</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ var maxValue=0;</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ var maxKey=0;</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ for(var i=0;i&lt;mapArrays.length;i++)&#123; /</span><span class="regexp">/当前列当中的map数组</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var key=mapArrays[i].key;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var value=map.get(key);</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ console.log("key: "+key+" value:"+value);</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ &#125;</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ console.log("单排最大遗漏数为 - key:"+maxKey+"  value:"+(maxValue-1));</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/添加元素</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ var td4=tr.insertCell(t+1);</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ if(maxKey&lt;=0)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  td4.innerHTML="-";</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  td4.innerHTML=maxKey;</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ &#125;</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ var td5=tr2.insertCell(t+1);</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ if((maxValue-1)&lt;=0)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  td5.innerHTML="-";</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  td5.innerHTML=(maxValue-1);</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ &#125;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="ruby">var tr=detailData.insertRow(arrays.length+<span class="number">2</span>);</span></span><br><span class="line"><span class="ruby"> var td=tr.insertCell(<span class="number">0</span>);</span></span><br><span class="line"><span class="ruby"> td.innerHTML=<span class="string">"数字"</span>;</span></span><br><span class="line"><span class="ruby"> td.style.fontWeight=<span class="string">"bolder"</span>;</span></span><br><span class="line"><span class="ruby"> td.colSpan=<span class="number">2</span>;</span></span><br><span class="line"><span class="ruby"> var tr2=detailData.insertRow(arrays.length+<span class="number">3</span>);</span></span><br><span class="line"><span class="ruby"> var td2=tr2.insertCell(<span class="number">0</span>);</span></span><br><span class="line"><span class="ruby"> td2.innerHTML=<span class="string">"单排最大遗漏数"</span>;</span></span><br><span class="line"><span class="ruby"> td2.style.fontWeight=<span class="string">"bolder"</span>;</span></span><br><span class="line"><span class="ruby"> td2.colSpan=<span class="number">2</span>;</span></span><br><span class="line"><span class="ruby"> var tr3=detailData.insertRow(arrays.length+<span class="number">4</span>);</span></span><br><span class="line"><span class="ruby"> var td3=tr3.insertCell(<span class="number">0</span>);</span></span><br><span class="line"><span class="ruby"> td3.innerHTML=<span class="string">"总排最大遗漏数"</span>;</span></span><br><span class="line"><span class="ruby"> td3.style.fontWeight=<span class="string">"bolder"</span>;</span></span><br><span class="line"><span class="ruby"> td3.colSpan=<span class="number">2</span>;</span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ /</span><span class="regexp">/当前7个数组当中都存有对应的数值</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ for(var t=0;t&lt;sumArray.length;t++)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/ var arrays=[01,28,19,35,43,08,01,12,32,41];</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var arrays=sumArray[t];/</span><span class="regexp">/单个数组</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  console.log(arrays);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var flag=true;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var map=new Map();</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  for(var i=0;i&lt;arrays.length;i++)&#123; /</span><span class="regexp">/循环10次</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var element=arrays[i];/</span><span class="regexp">/数组当中具体的元素</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  map.put(element,0);/</span><span class="regexp">/放入的只有9个</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  for(var n=0;n&lt;arrays.length;n++)&#123; /</span><span class="regexp">/循环10次</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var key=arrays[n];</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/console.log("当前遍历的element: "+element+"；所处index: "+i+"  map当中循环的element: "+key+"所处index: "+n)</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  if(key!=null &amp;&amp; key==element)&#123; /</span><span class="regexp">/如果存在有当前循环的数组当中的取值与map当中的键相同的则重新赋值，重新赋值后进行下一次break;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var y=i-n;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/console.log("key: "+key+" element:"+element+" y: "+y);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  map.put(element,y);/</span><span class="regexp">/此处的y没有减去当前自己的位数,所以当单排最大遗漏数查询的时候还需要-1</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  break;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  continue;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/console.log(map.toString());</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var mapArrays=map.entrys();</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var maxValue=0;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var maxKey=0;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  for(var i=0;i&lt;mapArrays.length;i++)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var key=mapArrays[i].key;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var value=map.get(key);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/console.log("key: "+key+" value:"+value);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  if(maxValue&lt;value)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  maxValue=value;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  maxKey=key;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  console.log("单排最大遗漏数为 - key:"+maxKey+"  value:"+(maxValue-1));</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/添加元素</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var td4=tr.insertCell(t+1);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  if(maxKey&lt;=0)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  td4.innerHTML="-";</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  td4.innerHTML=maxKey;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var td5=tr2.insertCell(t+1);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  if((maxValue-1)&lt;=0)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  td5.innerHTML="-";</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  td5.innerHTML=(maxValue-1);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ &#125;</span></span></span><br><span class="line"><span class="ruby">-</span><span class="xml">-%&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> 双色球 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>串</title>
      <link href="/2020/04/07/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E4%B8%B2-05/"/>
      <url>/2020/04/07/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E4%B8%B2-05/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/04/07/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E4%B8%B2-05/%E4%B8%B2-05.png" alt="串-05"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 串 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈与队列</title>
      <link href="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/"/>
      <url>/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04.png" alt="栈与队列-04"></p><p><img src="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E5%BC%80%E5%9C%BA%E7%99%BD.png" alt="开场白"></p><p><img src="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%A0%88%E7%9A%84%E5%AE%9A%E4%B9%89.png" alt="栈的定义"></p><p><img src="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%A0%88%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="栈的抽象数据类型"></p><p><img src="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%8F%8A%E5%AE%9E%E7%8E%B0.png" alt="栈的顺序存储结构及实现"></p><p><img src="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E4%B8%A4%E6%A0%88%E7%9A%84%E5%85%B1%E4%BA%AB%E7%A9%BA%E9%97%B4.png" alt="两栈的共享空间"></p><p><img src="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%8F%8A%E5%AE%9E%E7%8E%B0.png" alt="栈的链式存储结构及实现"></p><p><img src="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%A0%88%E7%9A%84%E4%BD%9C%E7%94%A8.png" alt="栈的作用"></p><p><img src="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E9%80%92%E5%BD%92.png" alt="栈的应用-递归"></p><p><img src="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.png" alt="栈的应用-四则运算表达式求值"></p><p><img src="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9A%E4%B9%89.png" alt="队列的定义"></p><p><img src="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E9%98%9F%E5%88%97%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="队列的抽象数据类型"></p><p><img src="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97.png" alt="循环队列"></p><p><img src="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%8F%8A%E5%AE%9E%E7%8E%B0.png" alt="队列的链式存储结构及实现"></p><p><img src="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%80%BB%E7%BB%93%E5%9B%9E%E9%A1%BE.png" alt="总结回顾"></p><p><img src="/2020/04/05/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E7%BB%93%E5%B0%BE%E8%AF%AD.png" alt="结尾语"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈与队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>社会主义接班人</title>
      <link href="/2020/04/03/%E3%80%90%E7%90%90%E7%A2%8E%E9%9A%8F%E7%AC%94%E3%80%91/%E6%88%91%E6%98%AF%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E6%8E%A5%E7%8F%AD%E4%BA%BA/"/>
      <url>/2020/04/03/%E3%80%90%E7%90%90%E7%A2%8E%E9%9A%8F%E7%AC%94%E3%80%91/%E6%88%91%E6%98%AF%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E6%8E%A5%E7%8F%AD%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>帮我妹改改作文。</p></blockquote><p>主题：灾害到来时我该怎么做</p><ol><li>身份：新时代的青年人，是社会建设和国家发展的接班人</li><li>态度：勇敢面对，承担使命</li><li>方向：针对新冠疫情；视角要宽；</li><li>人群：90,00代的突出表现和感人事迹</li></ol><p>面临黑暗，我向阳光</p><p>  汽车的鸣笛，街道的喧闹。<br>  在蓝天白云下，在灿阳照射下，看似和谐美好的生活，也有阳光穿不透的黑暗，<br>  他们在黑暗里肆意欢笑，趁人不注意，便将罪恶的双手伸向人们，<br>  他们在变态心理的引导下剥夺了人爱阳光照耀的机会，<br>  将人无情地拉进黑暗。</p><p>  黑暗就如病毒，如同冠状病毒，从天而降，肆意传播，于是将人们的天空浸染成了黑色，<br>  雨水冲刷着人们的双眼。但总会有阳光，哪怕只剩一缕，他也会穿过乌云照向大地。<br>  新闻中不断播的着“巨婴”的行为，可以说是个反面教材了，<br>  在面对危险时，他们慌乱了手脚，将内心底的自私播出来给人们看，<br>  像跳梁小丑，引人发笑。当医生带着阳光冲向黑暗，“巨婴”们手里拿着盾牌，却站反了方向。<br>  我们理应相信那一缕阳光，将我们内心的力量融合，为医生助力。</p><p>  黑暗也如同恐惧心理，覆压人的心灵，痛打着人们的躯体，凌辱了人的自尊，却仍在暗自偷笑。<br>  校园暴力给人带来的伤痛往往是比身体的疼痛更令人刻骨铭心。<br>  但总有强大心灵带着阳光，即使”身在井隅”，却仍然”心向璀璨”。<br>  冰冷的法律中出现裂痕，投进去了温暖，扫黑，禁止校园暴力的法律的颁布，<br>  在这个社会，让人们走在街道上，没有胆怯。我们主动站出来打击黑恶势力，将力量团结在一起。<br>  黑暗骑士也没有那么可怕。</p><p>  我想阳光的力量一定可以战胜黑暗，我想，抬头暖阳春草，用拥抱将黑暗消融。<br>  阳光会穿过茂密的树枝，穿过乱窜的树枝，知道最后，千缕阳光冲破黑来前来拥抱我。</p><p>  ======================================================================</p><h2 id="面临黑暗，我向阳光"><a href="#面临黑暗，我向阳光" class="headerlink" title="面临黑暗，我向阳光"></a>面临黑暗，我向阳光</h2><p>“等到黑夜翻面之后，会是新的白昼；<br>等到海啸退去之后，只是潮起潮落；<br>别到最后你才发觉，心里头的野兽，还没到最终就已经罢休；<br>心脏没有那么脆弱，总还会有执着；<br>人生不会只有收获，总难免有伤口；<br>不要害怕生命中，不完美的角落；<br>阳光在每个裂缝中散落，不如就勇敢打破生命中的裂缝，阳光就逐渐洒满了其中。”<br>——题记</p><p>2019的尾巴到2020的开端，甚至更甚。<br>爆发的新冠状病毒，在这场看不见硝烟的抗疫战争中告诉我们，<br>这不仅仅是一场我们巍巍中华人民需要迎接且不能退缩的挑战，这更是让我们泱泱华夏子孙心与心贴在了一起的连线。</p><p>在这场抗疫当中，有着数不清的前线抗疫战士为了这场战争前继后扑。<br>贵州省黔西南州兴义市人民医院的一位呼吸科医生张恩莉争分夺秒，只为更多患者康复；<br>吉林省援鄂医疗队的一位护士长高岚守护生命，坚持到最后胜利；<br>武汉大学人民医院东院区山东医疗队的主治医生郭海鹏用仁心仁术守护生命…</p><p>不仅仅是前线的抗疫战士，就连普普通通老百姓也送上了来自他们的绵薄之力。<br>山东日照一个环卫工人捐了一万二,钱虽然不是很多，但对于他来说却是一个大数目；<br>1月28日，寿光免费赠送了300吨新鲜蔬菜。并且29日起，每天给武汉送600吨平价新鲜蔬菜，持续供应10到15天。截止到2月3日共捐赠1120吨；<br>1月29日，临沂兰陵县捐赠200吨大蒜;<br>1月31日，临沂蔬菜公司原计划捐赠100吨蔬菜，结果这个消息传到了菜农耳朵里又自愿增加60吨，共计160吨;<br>1月31日，金乡捐赠300吨大蒜;<br>2月1日，滕州捐赠66吨马铃薯;<br>2月4日，菏泽8节车厢满载着275吨优质农产品驰援武汉…</p><p>给出力量的不仅仅来自于前线、百姓、企业…<br>也有来自00后，90后那些一度被认为仍处在温室的花朵，也给予了来自他们微弱的力量。</p><p>“阿姨，您的处方单是以前的，药店说需要新的处方单才能开药，请您让主治医师再开一张过来吧”，“叔叔，您要的药没有了，看看这种行不行”，……<br>在武汉市汉阳区晴川街的一家药店，19岁的张玉欣一边跟店主报需求，一边联系居民询问购药的细节，忙的不可开交。<br>张玉欣是武汉本地的“00”后大学生，疫情发生后，她主动到社区报名，成为一名志愿者，主要负责给居民买药送药。<br>“之前有过志愿服务经验，现在我们的城市遇到困难了，我想为家乡人民出一份力。”张玉欣说。<br>张玉欣工作的汉阳晴川街龙灯社区龙灯里小区是一个老旧小区，居民大多是老年人。<br>为了满足居民多样化的用药需求，张玉欣和同事们经常从早跑到晚，遇到一些难买到的药，还得一家家药店去询问，经常饭都来不及吃。<br>“虽然只是跑腿的工作，但有些药对居民来说是‘救命药’，我们必须争分夺秒去买。”张玉欣说。<br>小区居民买高血压、糖尿病等慢性病的药物比较多，有的隔几天就需要再买一次。最多的时候，她一天要买五六十种药品，光排队就要好几个小时。<br>让张玉欣印象最深的是，一天下午，她接到居民求助：一名70多岁的危重症者急需球蛋白。她和同事立即开车外出找药，一家家药店去询问，从汉阳一路搜到汉口，辗转10多家药店，终于在快要天黑时，在一家即将打烊的药店买到了药。<br>当他们把药送到求助居民手中时，对方感动的热泪盈眶。志愿者的辛苦付出，居民都看在眼里。<br>“开始时一些居民不放心，但看到那些买药的居民不仅拿到了急需的药，零钱也一份不少，现在他们都提前写下医保卡密码，放心地交给我们购药”张玉欣欣慰地说。</p><p>“身在无间，心在桃源”。<br>前有武汉汉阳区“00”后志愿者张玉欣为居民买药送药争分夺秒，后有“90”后一线抗疫英雄谢小玉的12小时无私奉献。</p><p>过去有人说他们是娇滴滴的一代，但现在看，他们成了抗疫一线的主力军，不怕苦、不怕牺牲。抗疫一线比其他地方更能考验人。”<br>3月10日，习近平总书记来到武汉市东湖新城社区考察。听完社区志愿者代表、中国矿业大学(北京)大二学生谢小玉的工作汇报后，总书记深有感触地说。<br>　　受到总书记的肯定和鼓励，谢小玉工作起来更有干劲了。这名社区第一批参加志愿服务、唯一的大学生志愿者，已经在30栋楼值守一个多月。日前，记者来到东湖新城社区，感受了谢小玉忙碌的一天。<br>　　上午9点——主动上门问需求。<br>　　趁着上午9点物资尚未送达的待命时刻，谢小玉看望了住在30栋楼15层的80多岁的周奶奶。<br>　　“奶奶，降压药够吗?燃气卡要充值吗?”“小玉来啦，放心，都够用。”周奶奶感动地说，有一次为了帮她买降压药，谢小玉连跑了3家药店。<br>　　因为老人家不会用手机、腿脚又不方便，谢小玉就特别关心周奶奶。“周奶奶第一次接电话时，看到是陌生的手机号码，以为遇到了骗子，熟悉了以后，周奶奶经常主动打电话找我谈心。”她说，以前连对门邻居都不熟悉，这段时间却认识了很多社区邻居，有些人还给她送防护物资。<br>　　服务200多户居民不是简单事。单从买药来说，居民对生产厂家、品牌型号都有特殊要求。有时候她和其他志愿者连“逛”几天药店，才能买到某种指定的药。<br>　　上午10点——大箱小箱送快递。<br>　　“我的顺丰快递到南门了。”上午10点，30栋楼1单元一位居民在群里求助志愿者，谢小玉看到后立刻起身。<br>　　取快递是志愿者的日常工作，30栋楼离社区南门最远，来回一趟要十几分钟。一上午谢小玉就帮居民取了4次快递，看到她气喘吁吁地抱着大箱小箱，其他志愿者连忙帮她找推车。“没事，这几天，我的力气都锻炼大了。”谢小玉说。<br>　　“快递业务是从2月下旬开始逐渐增多的，最忙时一天要跑十几趟，一批快递在南门，一批在社区服务站前，收到居民通知就得赶紧取走、避免堆积。”谢小玉介绍说，居民个性化需求比较多，经常会有退换货的情况。<br>　　几天前，谢小玉向一位社区居民借了辆电瓶车。“最近取快递、取货方便多了，但小玉总是把电瓶车给我们用。”一起负责30栋楼的下沉干部毕彪说，谢小玉年纪虽小却很爱照顾人。<br>　　当然，工作中也有不顺心的时候。有一次分快递时，有居民冲她发了火，她哭了。“不只是感到委屈，更多的是觉得自己没做好。”谢小玉不好意思地说，社区工作人员和家人都在鼓励她，她也慢慢学会了调整心态。<br>　　下午5点半——挨家挨户发活鱼。<br>　　“团购活鱼到楼下了。”下午5点半，近10份活鱼在灌满清水的塑料袋里活蹦乱跳。谢小玉在群里发出通知，担心有居民没及时看到，她又一家家打电话通知。“谢谢小玉!”不到20分钟，鱼分发完了。随后，她仔细查阅笔记本上的记录，再次确认当天的物资和生活用品是否全部送到，然后继续值班。<br>　　脚踩一双粉色球鞋，外面套着一件红马甲，扎着利落的马尾辫，未满20岁的谢小玉浑身洋溢着青春的活力。她原本计划今年寒假和家人出去旅游过年，“虽然旅游没成行，但当社区志愿者也挺有意义的。”<br>　　搭档万小强说，小玉上岗时正值2月中旬寒潮来袭，爱心物资大部分是米面油，都特别沉，一周要发三四次。小玉挨家挨户敲门送货，好几次一直从傍晚忙到晚上11点。“这个‘00后’小姑娘一点也不娇气，很坚强，很有责任感。”万小强佩服地说。<br>　　“抗疫一线也是大学，志愿服务就是课堂。社区工作的经历和体验，是我课堂上学不到的。现在，我的承受能力、沟通能力、信息整合能力都增强了。”谢小玉自豪地说。</p><p>阳光会穿过茂密的树枝，投下的那些光影将斑驳这段可歌可泣的岁月，成为这程征途上熠熠生辉的勋章。<br>我知道最后，千万缕阳光会冲破黑暗前来拥抱那些需要握住阳光的人。<br>我想，其实勇敢一点，我们也能手握阳光，给予他人。</p><p>那是一个即将下着雨的午后，<br>早些时候火辣的太阳瞧得人都睁不开眼睛，<br>烤的地铁车厢的壳都想生烟，车窗外的樟树叶子被晒的都好像要反光似的，卟呤卟呤的。<br>得亏地铁中有穿堂风倒是凉快。<br>不过本来身上就发了汗，黏黏糊糊的。<br>风一吹，贴在身上的衣服与皮肉之间倒是分开了，反倒生出一股子燥意。<br>就是一冷一热夹杂搞得人有点头昏脑涨，有点崩溃。<br>说白了，就是有点晕地铁。<br>车上人多的很，一个小小的车厢挤得好像已经腾不出地儿再去容纳更多的人了。<br>周遭放眼望去就是人。<br>戴着耳机听歌看电视的，看新闻的，低头玩手机的，逗孩子乐呵的，打电话的，望向车窗外放空的，喊着借过让道的，也有些观察着别人的人。<br>总之就是人挤人，挨着站一块儿。挤一挤，位置总会有的。<br>充斥在耳旁的声音还有地铁上穿堂而过的风声，那响声绝了，感觉就像是坐在过山车上尖叫声。<br>六月的天说变就变，不过一会儿，车窗外的天空就被就大块黑漆漆的乌云给占地为王了。<br>阴沉沉的，就像考试没考好爸妈的脸色似的，跟锅底有的一拼。跟要下暴雨似的，确是有黑云压城城欲摧的气势。<br>“哕！”<br>天！我一听声音就知道离我不远。我就杵在地铁门口的地儿，估算一下离我也就两个人的距离吧，听着声音倒不像是好事。<br>看向车窗外的视线立马掉转了180度，看向了声源地，准备凑凑热闹。<br>那是一个小男孩，得到我鼻子这么高了。<br>一手捂着口，脸通红着，冒着热汗，又止不住的想要吐。<br>不是想要吐，是止不住的吐，到后面吐到没东西吐了在那里干呕。<br>中午应该是吃了带有火腿肠热狗面包一类的快餐，<br>呕出的酸臭粘液从他指缝中滑过，连着口水丝都掺有一股浓浓的感觉没有消化完全的那股味道，<br>淌了一地的污秽物，红的白的黄的浑浊搅在一起，胆汁都要给吐出来了。<br>真真是惨不忍睹，人间惨剧。<br>旁边站着一位中年女士也是急了眼，手抓着小男孩的衣领骂，伸手拍打了小男孩背部几下，像是在训斥他怎么没有忍住在公共场合给吐了，<br>那小男孩有些不满，有些抵触，又做不得声。<br>该是他的妈妈。<br>那母亲也红了脸，隔着人我都能感觉得到她满脸的尴尬之情，无以言表。<br>她忙的翻了翻挎包，挎包夹层，里里外外找了一通，都没来得及扣好挎包的扣子，又从衣服口袋里翻了翻，没翻出什么东西，又从裤口袋里翻了翻，还是没找着什么。<br>她大概是在找能够清理那些污秽物的东西。<br>我突然发现，整一我在的这节车厢，不，是这小男孩和他母亲所在的这一车厢都安静了很多。<br>地铁上的穿堂风依然呼呼疾行而过，顺路将这节车厢的酸臭味稍稍带去了些许。<br>并且最最最古怪的事是，明明之前还挤得不可开交，现在倒是成了距离那对母子所在范围一两米都没有什么人。<br>他们都捂着口鼻，神色异样，仍在惊异怎么吐了，怎么偏偏在这节车厢吐了，今天可真是倒霉。<br>呕吐物带来的酸臭味让人退避三尺。<br>那对母子希望能有人帮助他们一点点，就一节纸巾或者是一个塑料袋的善意，那一点微末的雪中送炭，却都无人问津。<br>离那对母子最近的一位农民老奶奶颤巍巍的从自己挑的篮子当中找出了个卖菜的那种塑料袋，短小粗糙泛黄的手中递出了她的一点零星善意。<br>“你拿塑料袋盛着”。<br>那母亲连声道谢，一边鞠躬一边道谢，赶紧让那小男孩拿着那塑料袋以免再吐。<br>有了老奶奶递出的那个塑料袋，旁边一些近身旁的人也纷纷从口袋里拿出一包包的纸巾。<br>那母亲一边道谢一边拿着不多的纸巾去擦地铁上小男孩吐的一片狼藉，将那一张张纸一点点包住污秽，然后放到塑料袋里面。<br>但是纸巾依然不够。<br>我知道我今天出门前特意带了卷纸出来了。但我不太好意思拿出来给那母亲用。<br>于是我从包里将卷纸扯了一大长节，再在包里尴尬的折好紧张的递了过去。<br>我朝她笑了笑，她脸仍然是红着，但是已经好些了，也朝我笑了笑，拿过纸巾，怀着歉意拘谨的道谢。<br>狼藉已经被那母亲擦拭得差不多了，小男孩也吐的差不多了，看上去脸色要舒服点了。<br>我又扯了节纸巾折好了递了过去给那小男孩。<br>“可以拿着擦手”。<br>那小男孩摇了摇手，连声道谢说不用。<br>于是我拿着那节纸巾又把手给缩了回来。<br>“要下车的乘客，请您提前做好准备”。<br>地铁停下来的时候，那对母子从我身旁经过，我将那节纸巾准备递给那母亲。<br>“可以拿着擦手”。<br>那母亲提着污秽物的塑料袋，笑笑温婉答道：“不用了，谢谢你”。<br>直到他们下了地铁后，我手里仍有些紧张的拿着那节纸巾，心底突然放松了些，畅快了许多。<br>好像突然晓得”初极狭，才通人，复行数十步，豁然开朗”是个什么滋味儿。<br>地铁上又涌上来了许多人。人依然很挤。<br>嘈杂的声音依然存在着，穿堂风也依然在疾声作响，只是忽然从耳畔淡了下去。<br>车窗外的云好像也没有那么黑了。压的人透不过气的那股子气好像也泄了了下去。<br>而最终，这场疑似暴雨的天气也没有来临。</p><p>我想，其实勇敢一点，他人不仅能获取阳光，或许还能将阳光撒的更远。</p><p>即便是一脚踏空，我也会相信会有人将你扶起；<br>我向上不再会是迷茫，也不再会是抹掉的慌张，而是抬头便是暖阳春草；<br>我向下听见你说这世界不再是空荡荡，而是看见你会伸开双手将我搂住给我拥抱。<br>踩碎了冰冷走过时光，睁开眼你就会听到人间四月芳菲始盛开的声音。</p><p>微笑向暖，清风自来；而面临黑暗，我心向阳光。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 社会主义接班人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表</title>
      <link href="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/"/>
      <url>/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E7%BA%BF%E6%80%A7%E8%A1%A8-03.png" alt="线性表-03"></p><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%AE%9A%E4%B9%89.png" alt="线性表定义"></p><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="线性表的抽象数据类型"></p><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="线性表的顺序存储结构"></p><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E6%8F%92%E5%85%A5%E4%B8%8E%E5%88%A0%E9%99%A4.png" alt="顺序存储结构的插入与删除"></p><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="线性表的链式存储结构"></p><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E8%AF%BB%E5%8F%96.png" alt="单链表的读取"></p><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E4%B8%8E%E5%88%A0%E9%99%A4.png" alt="单链表的插入与删除"></p><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%95%B4%E8%A1%A8%E5%88%9B%E5%BB%BA.png" alt="单链表的整表创建"></p><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%95%B4%E8%A1%A8%E5%88%A0%E9%99%A4.png" alt="单链表的整表删除"></p><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%E4%B8%8E%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%BC%98%E7%BC%BA%E7%82%B9.png" alt="单链表结构与顺序存储结构优缺点"></p><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8.png" alt="静态链表"></p><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E7%BB%93%E5%B0%BE%E8%AF%AD.png" alt="结尾语"></p><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png" alt="循环链表"></p><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.png" alt="双向链表"></p><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E6%80%BB%E7%BB%93%E5%9B%9E%E9%A1%BE.png" alt="总结回顾"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%91-06/"/>
      <url>/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%91-06/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%A0%91-06/%E6%A0%91-06.png" alt="树-06"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%8E%92%E5%BA%8F-09/"/>
      <url>/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%8E%92%E5%BA%8F-09/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%8E%92%E5%BA%8F-09/%E6%8E%92%E5%BA%8F-09.png" alt="排序-09"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找</title>
      <link href="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%9F%A5%E6%89%BE-08/"/>
      <url>/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%9F%A5%E6%89%BE-08/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%9F%A5%E6%89%BE-08/%E6%9F%A5%E6%89%BE-08.png" alt="查找-08"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图</title>
      <link href="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E5%9B%BE-07/"/>
      <url>/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E5%9B%BE-07/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/04/03/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E5%9B%BE-07/%E5%9B%BE-07.png" alt="图-07"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2020/04/01/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%AE%97%E6%B3%95-02/"/>
      <url>/2020/04/01/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%AE%97%E6%B3%95-02/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/04/01/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E7%AE%97%E6%B3%95-02/%E7%AE%97%E6%B3%95-02.png" alt="算法-02"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试</title>
      <link href="/2020/03/29/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E3%80%91%E4%BB%8A%E5%B9%B4%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
      <url>/2020/03/29/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E3%80%91%E4%BB%8A%E5%B9%B4%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ul><li>自我介绍</li><li>最熟悉的一个项目进行介绍</li><li>多线程（Thread与Runnable的不同）</li><li>重构从哪些地方入手</li><li>索引优化</li><li>为什么红黑树快，二进制为什么快（底层操作系统）</li><li>描述下计算机的底层原理</li><li>SpringBoot统一异常处理机制</li><li>SpringBoot的AOP、IOC流程，以及简单实现</li><li>SpringBoot的注解@Autowired,@Resource实现原理</li><li>Spring当中Bean的实现流程</li><li>HashMap当中红黑树为什么需要左旋右旋</li><li>Redis缓存击穿，缓存穿透，雪崩</li><li>分布式相关知识点</li><li>时间空间复杂度，O(n),二叉搜索树O(logn)</li><li>如何看待加班</li><li>SpringBoot当中事务实现</li><li>Redis底层进制实现，为什么Redis性能高</li><li>使用过哪些锁机制，有哪些锁</li><li>邮件服务，通过多线程，邮件没有发送成功如何处理</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红黑树</title>
      <link href="/2020/03/26/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
      <url>/2020/03/26/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>最近两天看到了HashMap比较多，包括一致性Hash等。<br>基本的了解了。<br>就是不太晓得红黑树。  </p><p>要是觉得看文档实在觉得不适的话，可以建议先去b站看个视频：<a href="https://www.bilibili.com/video/BV1tE411f7tP?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1tE411f7tP?p=1</a>  </p><p>HashMap源码阅读参考：</p><ul><li><a href="https://ke.qq.com/webcourse/index.html#cid=459141&amp;term_id=100549477&amp;taid=4078067153043845&amp;vid=5285890795538344618" target="_blank" rel="noopener">https://ke.qq.com/webcourse/index.html#cid=459141&amp;term_id=100549477&amp;taid=4078067153043845&amp;vid=5285890795538344618</a>  </li></ul><p>一致性Hash:  </p><ul><li><a href="https://www.bilibili.com/video/av25184175" target="_blank" rel="noopener">https://www.bilibili.com/video/av25184175</a>  </li><li><a href="https://www.cnblogs.com/lpfuture/p/5796398.html" target="_blank" rel="noopener">https://www.cnblogs.com/lpfuture/p/5796398.html</a></li><li>Redis哈希槽：<a href="https://blog.csdn.net/z15732621582/article/details/79121213" target="_blank" rel="noopener">https://blog.csdn.net/z15732621582/article/details/79121213</a></li></ul><p>blog:</p><ul><li><a href="https://www.cnblogs.com/mfrank/p/9227097.html" target="_blank" rel="noopener">https://www.cnblogs.com/mfrank/p/9227097.html</a></li><li><a href="https://blog.csdn.net/carson_ho/article/details/79373026" target="_blank" rel="noopener">https://blog.csdn.net/carson_ho/article/details/79373026</a></li><li><a href="https://blog.csdn.net/carson_ho/article/details/79373134" target="_blank" rel="noopener">https://blog.csdn.net/carson_ho/article/details/79373134</a></li><li><a href="https://www.cnblogs.com/FCWORLD/articles/8504383.html" target="_blank" rel="noopener">https://www.cnblogs.com/FCWORLD/articles/8504383.html</a></li><li><a href="https://www.cnblogs.com/leesf456/p/5242233.html" target="_blank" rel="noopener">https://www.cnblogs.com/leesf456/p/5242233.html</a></li><li><a href="https://www.jianshu.com/p/400f3c019557" target="_blank" rel="noopener">https://www.jianshu.com/p/400f3c019557</a></li></ul><p>打算看完再睡觉。对自己蜜汁自信。  </p><p>Node是TreeNode的爷爷，而且普通节点一般来说也比TreeNode要多。  </p><ul><li>红黑树介绍</li><li>TreeNode结构</li><li>树化的过程</li><li>红黑树的左旋和右旋</li><li>TreeNode的左旋和右旋</li><li>红黑树的插入</li><li>TreeNode的插入</li><li>红黑树的删除</li><li>TreeNode的删除</li></ul><p>理论部分：红黑树部分<br>代码实践部分：TreeNode部分  </p><p>好饿啊。  </p><h2 id="红黑树介绍"><a href="#红黑树介绍" class="headerlink" title="红黑树介绍"></a>红黑树介绍</h2><blockquote><p>什么是树？  </p></blockquote><p> <img src="https://images2018.cnblogs.com/blog/1043143/201806/1043143-20180625235951335-1438523857.jpg" alt="image"></p><ul><li>A~H 都是树的节点，每个节点有零个或者多个子节点，或者说多个孩子。</li><li>但是除根节点以外，每个节点都只有一个父节点，也称只要一个父亲。</li><li>最上面的A是根节点，最下面的D、H、F、G是叶子节点。</li><li>每一个非根节点【有且只有】一个父节点；</li><li>树是具有【一层一层】的【层次】结构；</li><li>这里A位于第一层，B、C位于第二层，D、E、F、G位于第三层，H位于第四层。以此类推。</li><li>将左边的B节点部分（包括BDEH）拿出来，则又是一棵树，称为树的子树。</li></ul><blockquote><p>什么是二叉搜索树？</p></blockquote><p> <img src="https://images2018.cnblogs.com/blog/1043143/201806/1043143-20180626005359234-143383116.jpg" alt="image"></p><ul><li>二叉代表他的节点最多有两个子节点; 而且左右有顺序，不能颠倒，分别叫左孩子和右孩子；这两个节点互成为兄弟节点。</li><li>4、9互为兄弟，7是他们的父亲，9是2的叔叔，8是2的堂兄弟。</li><li>既然叫做搜索树，表示它的用途是为了【更快的搜索和查找】而设计的，所以这棵树本身满足【一定的排序规则】，即数组的【任何节点的值大于它的左孩子，且小于它的右孩子】。</li><li>任意节点的左、右子树也分别为二叉查找树。</li></ul><blockquote><p>什么是红黑树？  </p></blockquote><p> <img src="https://images2018.cnblogs.com/blog/1043143/201806/1043143-20180626004222951-1996840383.jpg" alt="image"></p><ul><li>红黑树，本质上来说是一棵二叉搜索树。</li><li>红黑树，就跟他的名字一样，又红又黑，红黑并进，理实交融，【节点是非红即黑的】。</li></ul><h3 id="红黑树的主要特性"><a href="#红黑树的主要特性" class="headerlink" title="红黑树的主要特性"></a>红黑树的主要特性</h3><ol><li>每个节点要么是黑色，要么是红色。（节点非黑继红）</li><li>根节点是黑色的。</li><li>每个叶子节点（NIL）是黑色。</li><li>如果一个节点是红色的，则它的子节点必须是黑色的。（也就是说父子节点不能同时为红色）</li><li>从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。（这一点是平衡的关键）</li></ol><p>其实就是一棵比较平衡的又红又黑的二叉树。  </p><h4 id="TreeNode结构"><a href="#TreeNode结构" class="headerlink" title="TreeNode结构"></a>TreeNode结构</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">用于Tree bins的Entry.</span></span><br><span class="line"><span class="comment">扩展LinkedHashMap.Entry(进而扩展Node)，</span></span><br><span class="line"><span class="comment">因此可以用作常规节点或链接节点的扩展</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">static <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode&lt;K</span>,<span class="title">V&gt;</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry&lt;K</span>,<span class="title">V&gt;</span></span>&#123;</span><br><span class="line">    <span class="type">TreeNode</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; parent;<span class="comment">//红黑树父节点</span></span><br><span class="line">    <span class="type">TreeNode</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; left;<span class="comment">//红黑树左节点？</span></span><br><span class="line">    <span class="type">TreeNode</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; right;<span class="comment">//红黑树右节点？</span></span><br><span class="line">    <span class="type">TreeNode</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; prev;<span class="comment">//红黑树前一节点，删除后需要取消链接</span></span><br><span class="line">    boolean red;<span class="comment">//是否为红色，是否为红节点</span></span><br><span class="line">    <span class="comment">//构建TreeNode所需参数</span></span><br><span class="line">    <span class="type">TreeNode</span>(int hash,<span class="type">K</span> key,<span class="type">V</span> <span class="keyword">val</span>,<span class="type">Node</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; next)&#123;</span><br><span class="line">      <span class="keyword">super</span>(hash,key,<span class="keyword">val</span>,next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//省略后续代码</span></span><br></pre></td></tr></table></figure><p>TreeNode继承自LinkedHashMap中的内部类——-LinkedHashMap.Entry.<br>而这个内部类又继承自Node，所以算是Node的孙子辈了。  </p><p>属性：</p><ul><li>parent 用来指向他的父节点。</li><li>left 指向左孩子。</li><li>right 指向右孩子。</li><li>prev 则指向前一节点（原链表中的前一个节点）</li></ul><p>注意，这些字段跟Entry，Node中的字段是一样的，是使用默认访问权限的，所以子类可以直接使用父类的属性。</p><h4 id="树化的过程"><a href="#树化的过程" class="headerlink" title="树化的过程"></a>树化的过程</h4><p>当HashMap桶中的元素个数超过一定数量时，就会树化，也就是将链表转化为红黑树的结构。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//put方法===》调用putVal方法</span></span><br><span class="line"> <span class="keyword">public</span> V put(K <span class="built_in">key</span>, V value) &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(<span class="built_in">key</span>), <span class="built_in">key</span>, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现hashMap的put操作</span></span><br><span class="line">    <span class="keyword">final</span> V putVal(<span class="built_in">int</span> hash, K <span class="built_in">key</span>, V value, <span class="built_in">boolean</span> onlyIfAbsent,</span><br><span class="line">                   <span class="built_in">boolean</span> evict) &#123;</span><br><span class="line">        ...省略部分代码...</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, <span class="built_in">key</span>, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">//当桶中元素个数超过阈值（8）时就进行树化</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)</span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">         ...省略部分代码...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="红黑树的具体实现方式（重点）"><a href="#红黑树的具体实现方式（重点）" class="headerlink" title="红黑树的具体实现方式（重点）"></a>红黑树的具体实现方式（重点）</h2><p>在JDK1.8 HashMap中，转换为红黑树大致分为三个步骤  </p><ol><li>第一阶段：将链表转化为二叉树</li><li>第二节点：验证是否满足红黑树的五大特征</li><li>第三阶段：对二叉树进行左右旋转操作</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将链表转化为二叉树；即tab为链表</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> treeifyBin(Node&lt;K,V&gt;[] tab, <span class="built_in">int</span> hash) &#123;</span><br><span class="line">        <span class="built_in">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        如果node节点数组为空或者node节点数组的长度小于最小树化容量则进入判断进行初始化该节点数组吧应该是。或者扩容?</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        对n进行赋值为链表的长度</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        */</span></span></span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            resize();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        key根据算法算出得到hash,</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        然后通过(n - 1) &amp; hash进行得到下标index位置，</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        这里根据(n - 1) &amp; hash得到下标位置index也有一段说辞，</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        请看视频：https://ke.qq.com/webcourse/index.html#cid=459141&amp;term_id=100549477&amp;taid=4078067153043845&amp;vid=5285890795538344618</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        此处判断Node节点数组当中的该index下标位置上的Node是否为空</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        如果不为空则进入判断</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        */</span></span></span></span><br><span class="line">        <span class="comment">//重新计算hash段位，以及table节点数组的索引位，第一个节点</span></span><br><span class="line">        <span class="comment">//链表长度-1&amp;hash得到index下标取值</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">*双向链表 strat*</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line">          <span class="comment">//定义树节点hd为空； 树节点tl为空</span></span><br><span class="line">          <span class="comment">//hd：头节点head；tl: 为节点tail</span></span><br><span class="line">            TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                将节点替换为TreeNode</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                循环所有节点；即tab当中的所有Node(Node&lt;K,V&gt; e)</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                获取相对应的树节点p</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                */</span></span></span></span><br><span class="line">                TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果当前尾节点为空则将当前循环的p节点赋值给头结点</span></span><br><span class="line">                <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">　　　　　　　　　　　<span class="comment">//hd指向头结点</span></span><br><span class="line">                    hd = p;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                    这里其实是将单链表转化成了双向链表，</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                    tl是p的前驱，</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                    每次循环更新指向双链表的最后一个元素，</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                    用来和p相连，</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                    p是当前节点</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                    */</span></span></span></span><br><span class="line">                    p.prev = tl;</span><br><span class="line">                    tl.next = p;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//对尾节点进行赋值为当前树节点</span></span><br><span class="line">                tl = p;</span><br><span class="line"></span><br><span class="line">                <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                如果当前执行完do后执行while,首先进行重新赋值，</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                将e.next下一节点赋值给当前节点e，</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                并判断该节点是否为空;</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                不为空的情况下继续执行否则结束循环；</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                */</span></span></span></span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">          <span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">*双向链表 end*</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">            前面仅仅转换为双向链表，treeify才是转换红黑树的处理方法入口;</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">            第一个节点赋值为头结点，也就是根节点</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">            查询链表当中是否存在头结点hd，如果不为空存在的话即验证</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">            */</span></span></span></span><br><span class="line">            <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//将链表进行树化；将二叉树转换为红黑树；</span></span><br><span class="line">                hd.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在treeifyBin函数中，先将所有节点替换为TreeNode，然后再将单链表转为双链表，方便之后的遍历和移动操作。<br>而最终的操作，实际上是调用了TreeNode的方法treeify进行的</p><p>看这些代码让我看得怀疑人生。仿佛又回到了当年的数学课。  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//树化</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">调用这个方法之前，也就是一个双向链表</span></span><br><span class="line"><span class="comment">初始进入值为 this头结点</span></span><br><span class="line"><span class="comment">将双向链表转换为红黑树</span></span><br><span class="line"><span class="comment">目标：查询root节点</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">验证是否满足红黑树的五大特征</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">final void treeify(Node&lt;K,V&gt;<span class="literal">[]</span> tab) &#123;</span><br><span class="line">            <span class="comment">//树的根节点；初始化为空；root节点</span></span><br><span class="line">            TreeNode&lt;K,V&gt; root = null;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//x是当前节点，next是后继</span></span><br><span class="line">            <span class="comment">//这里的this是树转换数组索引处的第一个链表元素</span></span><br><span class="line">            for (TreeNode&lt;K,V&gt; x = this, next; x != null; x = next) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//next 当前节点的下一个节点，对next节点进行重新赋值</span></span><br><span class="line">                next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//设置左右节点为空</span></span><br><span class="line">                x.left = x.right = null;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果根节点为null，把当前节点设置为根节点</span></span><br><span class="line">                <span class="comment">//首次循环root根节点==null，设置当前循环的x节点为根节点</span></span><br><span class="line">                <span class="comment">//设置根节点特征</span></span><br><span class="line">                <span class="keyword">if</span> (root<span class="operator"> == </span>null) &#123;</span><br><span class="line"></span><br><span class="line">                  <span class="comment">//将根节点的父节点位置设置为空；根节点没有父节点</span></span><br><span class="line">                    x.parent = null;</span><br><span class="line">                  <span class="comment">//将根节点设置为black黑色；根节点是黑色的</span></span><br><span class="line">                    x.red = <span class="literal">false</span>;</span><br><span class="line">                  <span class="comment">//将当前节点设置为根节点，根节点重新赋值</span></span><br><span class="line">                    root = x;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果根节点现在不为空则当前的x节点，非根节点</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">//当前节点x的键进行赋值给k</span></span><br><span class="line">                  <span class="comment">//获取当前循环节点x的Key</span></span><br><span class="line">                    K k = x.key;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//得到当前该节点x的hash进行赋值给h</span></span><br><span class="line">                    <span class="comment">//获取当前节点x的Hash</span></span><br><span class="line">                    <span class="built_in">int</span> h = x.hash;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//定义key所属于的class</span></span><br><span class="line">                    Class&lt;?&gt; kc = null;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//这里循环遍历，进行二叉搜索树的插入</span></span><br><span class="line">                    <span class="comment">//从根节点开始验证</span></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                    循环这个红黑树，从根节点开始，也就是从上到下进行遍历</span></span><br><span class="line"><span class="comment">                    外层循环树节点也就相当于是Entry[]循环，内部是新建的，</span></span><br><span class="line"><span class="comment">                    外层循环到的当前该节点x也就相当于Entry,与构建的红黑树当中的根节点是否为空进行比较，</span></span><br><span class="line"><span class="comment">                    如果根节点不为空则说明当前遍历的x节点为非根节点，也就是左节点或者右节点，子节点</span></span><br><span class="line"><span class="comment">                    如果根节点为空则使之当前循环遍历到的x节点为根节点</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    for (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                        p指向遍历中的当前节点，</span></span><br><span class="line"><span class="comment">                        x为待插入节点，</span></span><br><span class="line"><span class="comment">                        k是x的key，</span></span><br><span class="line"><span class="comment">                        h是x的hash值，</span></span><br><span class="line"><span class="comment">                        ph是p的hash值，</span></span><br><span class="line"><span class="comment">                        dir用来指示x节点与p的比较，</span></span><br><span class="line"><span class="comment">                        -1表示比p小，</span></span><br><span class="line"><span class="comment">                        1表示比p大，</span></span><br><span class="line"><span class="comment">                        不存在相等情况，</span></span><br><span class="line"><span class="comment">                        因为HashMap中是不存在两个key完全一致的情况。</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                        <span class="built_in">int</span> dir, ph;</span><br><span class="line">                        K pk = p.key;<span class="comment">//每一个节点的key</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                        每个节点的hash与外层的x.hash作比较</span></span><br><span class="line"><span class="comment">                        这里做了一个赋值的操作，即当前内部循环当中循环的节点p的hash赋值给了ph;</span></span><br><span class="line"><span class="comment">                        如果当前内部循环的字节点的hash大于外层循环当中x的hash值时，则进行判断其hash大小，</span></span><br><span class="line"><span class="comment">                        通过判断hash大小，</span></span><br><span class="line"><span class="comment">                        从而可以知道节点大致位置，比如在左边还是右边</span></span><br><span class="line"><span class="comment">                        因为(n-1) &amp; hash得到index下标位置</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                        dir用来指示x节点与当前内部的p节点的比较，</span></span><br><span class="line"><span class="comment">                        如果dir小于0，沿左路径查找；</span></span><br><span class="line"><span class="comment">                        二叉查找树特征即为：任意节点大于左节点值，小于右节点值；</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                            dir = -<span class="number">1</span>;</span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                        如果dir大于0，则沿右路径查找</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                            dir = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                        如果hash值相等，</span></span><br><span class="line"><span class="comment">                        那么判断k是否实现了comparable接口，</span></span><br><span class="line"><span class="comment">                        如果实现了comparable接口就使用compareTo进行进行比较，</span></span><br><span class="line"><span class="comment">                        如果仍旧相等或者没有实现comparable接口，则在tieBreakOrder中比较</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> ((kc<span class="operator"> == </span>null &amp;&amp;</span><br><span class="line">                                  (kc = comparable<span class="constructor">ClassFor(<span class="params">k</span>)</span>)<span class="operator"> == </span>null) <span class="pattern-match"><span class="operator">||</span></span></span><br><span class="line"><span class="pattern-match">                                 (dir = compare<span class="constructor">Comparables(<span class="params">kc</span>, <span class="params">k</span>, <span class="params">pk</span>)</span>) <span class="operator">==</span> 0)</span></span><br><span class="line"><span class="pattern-match">                            dir = tie<span class="constructor">BreakOrder(<span class="params">k</span>, <span class="params">pk</span>)</span>;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">                        <span class="operator">/</span><span class="operator">/</span>xp节点为内部循环遍历的节点p</span></span><br><span class="line"><span class="pattern-match">                        <span class="operator">/</span><span class="operator">/</span>p设置为x的父节点 xp</span></span><br><span class="line"><span class="pattern-match">                        <span class="constructor">TreeNode</span>&lt;<span class="constructor">K</span>,<span class="constructor">V</span>&gt; xp = p;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">                        <span class="operator">/</span><span class="operator">**</span></span></span><br><span class="line"><span class="pattern-match">                        dir默认为0；</span></span><br><span class="line"><span class="pattern-match">                        所以此处如果dir小于等于0即定义为向左</span></span><br><span class="line"><span class="pattern-match">                        沿左路径查找;</span></span><br><span class="line"><span class="pattern-match">                        如果dir小于等于0取值为内部循环节点p的左节点否则为右节点;</span></span><br><span class="line"><span class="pattern-match">                        对获取得到的该节点进行判空;</span></span><br><span class="line"><span class="pattern-match">                        内部循环也是从上往下循环节点的；</span></span><br><span class="line"><span class="pattern-match">                        所以如果当前内部循环的p节点的左节点或者右节点为空，即进行插入操作</span></span><br><span class="line"><span class="pattern-match">                        <span class="operator">*</span><span class="operator">/</span></span></span><br><span class="line"><span class="pattern-match">                        <span class="keyword">if</span> ((p = (dir &lt;= 0) ? p.left : p.right) <span class="operator">==</span> null) &#123;</span></span><br><span class="line"><span class="pattern-match">                          <span class="operator">/</span><span class="operator">/</span>将xp设置为x的父节点</span></span><br><span class="line"><span class="pattern-match">                            x.parent = xp;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">                            <span class="keyword">if</span> (dir &lt;= 0)</span></span><br><span class="line"><span class="pattern-match">                                xp.left = x;</span></span><br><span class="line"><span class="pattern-match">                            <span class="keyword">else</span></span></span><br><span class="line"><span class="pattern-match">                                xp.right = x;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">　　　　　　　　　　　　　　　　 <span class="operator">/</span><span class="operator">/</span>进行插入平衡处理</span></span><br><span class="line"><span class="pattern-match">                              <span class="operator">/</span><span class="operator">/</span>将二叉树转换为红黑树-正式转换红黑树</span></span><br><span class="line"><span class="pattern-match">                            root = balance<span class="constructor">Insertion(<span class="params">root</span>, <span class="params">x</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">                            break;</span></span><br><span class="line"><span class="pattern-match">                        &#125;</span></span><br><span class="line"><span class="pattern-match">                    &#125;</span></span><br><span class="line"><span class="pattern-match">                &#125;</span></span><br><span class="line"><span class="pattern-match">            &#125;</span></span><br><span class="line"><span class="pattern-match">　　　　　　　<span class="operator">/</span><span class="operator">/</span>确保给定节点是桶中的第一个元素</span></span><br><span class="line"><span class="pattern-match">            move<span class="constructor">RootToFront(<span class="params">tab</span>, <span class="params">root</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">        &#125;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">     <span class="operator">/</span><span class="operator">/</span>这里不是为了整体排序，而是为了在插入中保持一致的顺序</span></span><br><span class="line"><span class="pattern-match">     static <span class="built_in">int</span> tie<span class="constructor">BreakOrder(Object <span class="params">a</span>, Object <span class="params">b</span>)</span> &#123;</span></span><br><span class="line"><span class="pattern-match">            <span class="built_in">int</span> d;</span></span><br><span class="line"><span class="pattern-match">            <span class="operator">/</span><span class="operator">/</span>用两者的类名进行比较，如果相同则使用对象默认的hashcode进行比较</span></span><br><span class="line"><span class="pattern-match">            <span class="keyword">if</span> (a <span class="operator">==</span> null <span class="operator">||</span> b <span class="operator">==</span> null <span class="operator">||</span></span></span><br><span class="line"><span class="pattern-match">                (d = a.get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span>.</span></span><br><span class="line"><span class="pattern-match">                 compare<span class="constructor">To(<span class="params">b</span>.<span class="params">getClass</span>()</span>.get<span class="constructor">Name()</span>)) <span class="operator">==</span> 0)</span></span><br><span class="line"><span class="pattern-match">                d = (<span class="constructor">System</span>.identity<span class="constructor">HashCode(<span class="params">a</span>)</span> &lt;= <span class="constructor">System</span>.identity<span class="constructor">HashCode(<span class="params">b</span>)</span> ?</span></span><br><span class="line"><span class="pattern-match">                     -1 : 1);</span></span><br><span class="line"><span class="pattern-match">            return d;</span></span><br><span class="line"><span class="pattern-match">        &#125;</span></span><br></pre></td></tr></table></figure><p>这里的逻辑其实并不复杂，仅仅是循环遍历当前树，然后找到可以该节点可以插入的位置，依次和遍历节点比较，比他大则跟其右孩子比较，小则与其左孩子比较，依次遍历，直到找到左孩子或者右孩子为null的位置进行插入。  </p><p>真正复杂一点的地方在于balanceInsertion函数，这个函数，后欧诺个黑叔进行插入平衡处理，保证插入节点后仍保持红黑树性质。  </p><p>这个函数稍后在TreeNode的插入中进行介绍，这里先看moveRootToFront,这个函数是将root节点移动到同种的第一个元素，也就是链表的首节点，这样做是因为在判断同种元素类型的时候会对链表进行遍历，将根节点移动到链表前端可以确保类型判断时不会出现错误。</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 把给定节点设为桶中的第一个元素</span><br><span class="line"> */        </span><br><span class="line">    static &lt;K,V&gt; void moveRootToFront(Node&lt;K,V&gt;[] tab, TreeNode&lt;K,V&gt; root) &#123;</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果根节点不为空以及树节点数组不为空以及树节点数组长度大于0</span></span><br><span class="line">            if (root != <span class="built_in">null</span> &amp;&amp; tab != <span class="built_in">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//得到该根节点在该树节点数组当中的位置下标index</span></span><br><span class="line">                <span class="type">int</span> index = (n - <span class="number">1</span>) &amp; root.hash;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//first指向链表第一个节点</span></span><br><span class="line">                TreeNode&lt;K,V&gt; <span class="built_in">first</span> = (TreeNode&lt;K,V&gt;)tab[index];</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断如果根节点与index查找出来的根节点不一致则</span></span><br><span class="line">                if (root != <span class="built_in">first</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果root不是第一个节点，则将root放到第一个首节点位置</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//定义next节点应该是</span></span><br><span class="line">                    Node&lt;K,V&gt; rn;</span><br><span class="line"></span><br><span class="line">                  <span class="comment">//对index位置的节点，树节点数组进行重新赋值为指定的根节点</span></span><br><span class="line">                    tab[index] = root;</span><br><span class="line"></span><br><span class="line">                  <span class="comment">//root节点的上一个节点进行赋值给rp</span></span><br><span class="line">                    TreeNode&lt;K,V&gt; rp = root.<span class="built_in">prev</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//对rn进行重新赋值为根节点的下一节点，判空</span></span><br><span class="line">                    if ((rn = root.<span class="built_in">next</span>) != <span class="built_in">null</span>)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)rn).<span class="built_in">prev</span> = rp;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//对rp进行判空，即根节点的上一节点判空</span></span><br><span class="line">                    if (rp != <span class="built_in">null</span>)</span><br><span class="line">                        rp.<span class="built_in">next</span> = rn;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line">                    if (<span class="built_in">first</span> != <span class="built_in">null</span>)</span><br><span class="line">                        <span class="built_in">first</span>.<span class="built_in">prev</span> = root;</span><br><span class="line">                    root.<span class="built_in">next</span> = <span class="built_in">first</span>;</span><br><span class="line">                    root.<span class="built_in">prev</span> = <span class="built_in">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//这里是防御性编程，校验更改后的结构是否满足红黑树和双链表的特性</span></span><br><span class="line">                <span class="comment">//因为HashMap并没有做并发安全处理，可能在并发场景中意外破坏了结构</span></span><br><span class="line">                assert checkInvariants(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="红黑树的左旋和右旋"><a href="#红黑树的左旋和右旋" class="headerlink" title="红黑树的左旋和右旋"></a>红黑树的左旋和右旋</h3><blockquote><p>左旋和右旋，顾名思义，就是将节点以某个节点向左或者向右进行旋转操作以保持二叉树的平衡</p></blockquote><h3 id="二叉树的左旋"><a href="#二叉树的左旋" class="headerlink" title="二叉树的左旋"></a>二叉树的左旋</h3><p>左旋：相当于以要旋转的节点为中心，将子树整体向左旋转，该节点变成子树的根节点，原来的父节点A变成了左孩子，如果右孩子C有左孩子D，则将其便成为A的右孩子  </p><p>当节点A向左旋转之后，C的左孩子D可以理解为因为重力问题掉到A的右孩子的位置。  </p><p> <img src="https://images2018.cnblogs.com/blog/1043143/201807/1043143-20180717135149338-1921395779.png" alt="image"></p><h3 id="二叉树的右旋"><a href="#二叉树的右旋" class="headerlink" title="二叉树的右旋"></a>二叉树的右旋</h3><p> <img src="https://images2018.cnblogs.com/blog/1043143/201807/1043143-20180717135200454-1697647783.png" alt="image"></p><h3 id="TreeNode的左旋和右旋"><a href="#TreeNode的左旋和右旋" class="headerlink" title="TreeNode的左旋和右旋"></a>TreeNode的左旋和右旋</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 左旋</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; rotateLeft(TreeNode&lt;K,V&gt; root,</span><br><span class="line">                                              TreeNode&lt;K,V&gt; p) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">            这里的p即上图的A节点，</span></span><br><span class="line"><span class="comment">            r指向右孩子即C，</span></span><br><span class="line"><span class="comment">            rl指向右孩子的左孩子即D，</span></span><br><span class="line"><span class="comment">            pp为p的父节点</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断A节点是否为空以及A的右节点C节点r是否不为空,满足判断即左旋</span></span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (r = p.right) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">              <span class="comment">/**</span></span><br><span class="line"><span class="comment">              如果A的右节点C，</span></span><br><span class="line"><span class="comment">              C的左节点D赋值给A节点的右节点；</span></span><br><span class="line"><span class="comment">              且将A节点的右节点赋值给r1树节点</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">                <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//将D的父节点重新赋值为A节点</span></span><br><span class="line">                    rl.<span class="keyword">parent</span> = p;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将p的父节点的孩子节点指向r</span></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                A的父节点重新赋值给，A节点的右节点即C节点</span></span><br><span class="line"><span class="comment">                C节点的父节点重新赋值给pp节点，进行判空</span></span><br><span class="line"><span class="comment">                如果为空则C节点重新赋值给root根节点指向，</span></span><br><span class="line"><span class="comment">                将从C节点的是否标红改为false，即根节点的颜色都是黑色的</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">if</span> ((pp = r.<span class="keyword">parent</span> = p.<span class="keyword">parent</span>) == <span class="keyword">null</span>)</span><br><span class="line">                    (root = r).red = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                如果A的父节点赋值给C的父节点，C的父节点赋值给pp节点</span></span><br><span class="line"><span class="comment">                如果pp节点的左节点为为A节点；</span></span><br><span class="line"><span class="comment">                则pp节点的左节点进行重新赋值为C节点</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">                    pp.left = r;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                最后如果不满足以上条件则进入else判断</span></span><br><span class="line"><span class="comment">                A节点的父节点C节点的父节点pp节点的右节点改为C节点</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.right = r;</span><br><span class="line">                <span class="comment">//将p置为r的左节点</span></span><br><span class="line">                r.left = p;</span><br><span class="line">                p.<span class="keyword">parent</span> = r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 右旋</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; rotateRight(TreeNode&lt;K,V&gt; root,</span><br><span class="line">                                               TreeNode&lt;K,V&gt; p) &#123;</span><br><span class="line">             <span class="comment">//这里的p即上图的A节点，l指向左孩子即C，lr指向左孩子的右孩子即E，pp为p的父节点</span></span><br><span class="line">            TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (l = p.left) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="keyword">null</span>)</span><br><span class="line">                    lr.<span class="keyword">parent</span> = p;</span><br><span class="line">                <span class="keyword">if</span> ((pp = l.<span class="keyword">parent</span> = p.<span class="keyword">parent</span>) == <span class="keyword">null</span>)</span><br><span class="line">                    (root = l).red = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">                    pp.right = l;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.left = l;</span><br><span class="line">                l.right = p;</span><br><span class="line">                p.<span class="keyword">parent</span> = l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="红黑树的插入"><a href="#红黑树的插入" class="headerlink" title="红黑树的插入"></a>红黑树的插入</h3><p>红黑树的插入，首先找到这个节点要插入的位置。<br>即一层一层比较，大的放右边，小的放左边，直到找到为null的节点放入即可。<br>可是如何在插入的过程中保持红黑树的特性呢，其实又这么几种情况：</p><ol><li>插入的为根节点，则直接把颜色改成黑色即可。</li><li>插入的节点的父节点是黑色节点，则不需要调整，因为插入的节点会初始化为红色节点，红色节点是不会影响树的平衡的。</li><li>插入的节点的祖父节点为null，即插入的节点的父节点是根节点，直接插入即可（因为根节点肯定是黑色）。</li><li>插入的节点父节点和祖父节点都存在，并且其父节点是祖父节点的左节点。这种情况稍微麻烦一点，又分两种子情况：</li></ol><ul><li>插入节点的叔叔节点是红色，则将父亲节点和叔叔节点都改成黑色，然后祖父节点改成红色即可。</li><li>插入节点的叔叔节点是黑色或不存在：<ul><li>若插入节点是其父节点的孩子，则将其父节点左旋</li><li>若为左孩子，则将其父节点变成黑色节点，将其祖父节点变成红色节点，然后将其祖父节点右旋。</li></ul></li></ul><ol start="5"><li>插入的节点父节点和祖父节点都存在，并且其父节点是祖父节点的右节点。这种情况跟上面是类似的，分两种子情况：</li></ol><ul><li>插入节点的叔叔节点是红色，则将父亲节点和叔叔节点都改成黑色，然后祖父节点改成红色即可。</li><li>插入节点的叔叔节点是黑色或不存在：<ul><li>若插入节点是其父节点的左孩子，则将其父节点右旋。</li><li>若为右孩子，则将其父节点变成黑色节点，将其祖父节点变成红色节点，然后将其祖父节点左旋。</li></ul></li></ul><p>然后重复进行上述操作，直到变成1或2的情况时则结束变换。<br>构建一棵红黑树，假设插入的顺序为：10,5,9,3,6,7,19,32,24,17</p><p>先来插个10，为情境1，直接改成黑色即可；<br>再插入5，为情境2，比10小，放到10的左孩子位置；<br>插入9，比10小，但是比5大，放到5的右孩子位置，此时为情境4iia，左旋后变成了情境4iib，变色右旋即可完成转化；<br>插入3后为情境4i，将父节点和叔叔节点同时变色即可；<br>插入6不需要调整；<br>插入7后变为情境5i，变色即可。<br>插入19不需要调整；<br>插入32，变成了5iib，左旋变色即可；<br>插入24，变成5iia，右旋变成5i，变色即可；<br>最后插入17，完美</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">static &lt;K,V&gt; TreeNode&lt;K,V&gt; balanceInsertion(TreeNode&lt;K,V&gt; root,</span><br><span class="line">                                                    TreeNode&lt;K,V&gt; x) &#123;</span><br><span class="line">            x.<span class="attr">red</span> = <span class="literal">true</span>;</span><br><span class="line">            for (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">                //情景<span class="number">1</span>：父节点为<span class="literal">null</span></span><br><span class="line">                <span class="keyword">if</span> ((<span class="attr">xp</span> = x.parent) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    x.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                    return x;</span><br><span class="line">                &#125;</span><br><span class="line">　　　　　　　　　 //情景<span class="number">2</span>，<span class="number">3</span>：父节点是黑色节点或者祖父节点为<span class="literal">null</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (<span class="attr">xpp</span> = xp.parent) == <span class="literal">null</span>)</span><br><span class="line">                    return root;</span><br><span class="line">　　　　　　　　　　//情景<span class="number">4</span>：插入的节点父节点和祖父节点都存在，并且其父节点是祖父节点的左节点</span><br><span class="line">                <span class="keyword">if</span> (<span class="attr">xp</span> == (<span class="attr">xppl</span> = xpp.left)) &#123;</span><br><span class="line">　　　　　　　　　　　　//情景<span class="number">4</span>i：插入节点的叔叔节点是红色</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="attr">xppr</span> = xpp.right) != <span class="literal">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                        xppr.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                        xp.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                        xpp.<span class="attr">red</span> = <span class="literal">true</span>;</span><br><span class="line">                        <span class="attr">x</span> = xpp;</span><br><span class="line">                    &#125;</span><br><span class="line">　　　　　　　　　　　　//情景<span class="number">4</span>ii：插入节点的叔叔节点是黑色或不存在</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　　　　　　　　　　　//情景<span class="number">4</span>iia：插入节点是其父节点的右孩子</span><br><span class="line">                        <span class="keyword">if</span> (<span class="attr">x</span> == xp.right) &#123;</span><br><span class="line">                            <span class="attr">root</span> = rotateLeft(root, <span class="attr">x</span> = xp);</span><br><span class="line">                            <span class="attr">xpp</span> = (<span class="attr">xp</span> = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.parent;</span><br><span class="line">                        &#125;</span><br><span class="line">　　　　　　　　　　　　　　//情景<span class="number">4</span>iib：插入节点是其父节点的左孩子</span><br><span class="line">                        <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                            xp.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">if</span> (xpp != <span class="literal">null</span>) &#123;</span><br><span class="line">                                xpp.<span class="attr">red</span> = <span class="literal">true</span>;</span><br><span class="line">                                <span class="attr">root</span> = rotateRight(root, xpp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">　　　　　　　　　 //情景<span class="number">5</span>：插入的节点父节点和祖父节点都存在，并且其父节点是祖父节点的右节点</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　　　　　　　　　//情景<span class="number">5</span>i：插入节点的叔叔节点是红色</span><br><span class="line">                    <span class="keyword">if</span> (xppl != <span class="literal">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                        xppl.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                        xp.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                        xpp.<span class="attr">red</span> = <span class="literal">true</span>;</span><br><span class="line">                        <span class="attr">x</span> = xpp;</span><br><span class="line">                    &#125;</span><br><span class="line">　　　　　　　　　　　　//情景<span class="number">5</span>ii：插入节点的叔叔节点是黑色或不存在</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">·　　　　　　　　　　　　　　//情景<span class="number">5</span>iia：插入节点是其父节点的左孩子　</span><br><span class="line">                        <span class="keyword">if</span> (<span class="attr">x</span> == xp.left) &#123;</span><br><span class="line">                            <span class="attr">root</span> = rotateRight(root, <span class="attr">x</span> = xp);</span><br><span class="line">                            <span class="attr">xpp</span> = (<span class="attr">xp</span> = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.parent;</span><br><span class="line">                        &#125;</span><br><span class="line">　　　　　　　　　　　　　　//情景<span class="number">5</span>iib：插入节点是其父节点的右孩子</span><br><span class="line">                        <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                            xp.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">if</span> (xpp != <span class="literal">null</span>) &#123;</span><br><span class="line">                                xpp.<span class="attr">red</span> = <span class="literal">true</span>;</span><br><span class="line">                                <span class="attr">root</span> = rotateLeft(root, xpp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="红黑树的删除"><a href="#红黑树的删除" class="headerlink" title="红黑树的删除"></a>红黑树的删除</h3><p>红黑树是一颗特殊的二叉搜索树，所以进行删除操作时，其实是先进行二叉搜索树的删除，然后再进行整理。  </p><p>所以，其实这里分为两部分内容：</p><ul><li>二叉搜索树的删除</li><li>红黑树的删除调整</li></ul><p>二叉搜索树的删除主要有这么几种情境：<br>情境一：待删除的节点五左右孩子；<br>情景二：待删除的节点只有左孩子或者右孩子；<br>情境三：待删除的节点既有左孩子又有右孩子；</p><p>对于情景一，直接删除即可；<br>情景二，则直接把该节点的父节点指向他的左孩子或者右孩子即可；<br>情境三稍微复杂一点，需要先找到其右子树的最左孩子(或者左子树的最右孩子)，即左（右）子树中序遍历时的第一个节点，然后将其与待删除的节点互换，最后再删除该节点（如果有右子树，则右子树上位）。<br>总之，就是先找到他的替代者，找到之后替换这个要删除的节点，然后再把这个节点真正删除掉。  </p><p>其实二叉搜索树的删除总体来说还是比较简单的。<br>删除完之后，如果替代者是红色节点，则不需要调整；<br>如果是黑色节点，则会导致左子树和右子树路径中黑色节点数量不一致，需要进行红黑树的调整；<br>跟上面一样，替代节点为其父节点的左孩子与右孩子的情况类似，所以这里直说其为左孩子的情景（PS：上一步的寻找替换节点使用的是右子树的最左节点，所以该节点如果右孩子，只能是右孩子）；  </p><p>情景一：只有右孩子且为红色，直接用右孩子替换该节点然后变成黑色即可。  </p><p>（D代表替代节点，即要被删除的节点，之前在经过二叉搜索树的删除之后，D节点其实已经被删除了，这里为了方便理解这个变化过程，所以把这个节点也画出来了，所以当初的初始状态是待删除节点与其替换节点互换位置与颜色字后的状态）  </p><p>情景二：只有右孩子且为黑色，那么删除该节点会导致父节点的左子树路径上黑色节点减一，此时只能去借助右子树，从右子树中借一个红色节点过来即可，具体取决于右子树的情况，这里又要分成两种情况：  </p><ul><li><p>兄弟节点是红色，则此时父节点是黑色，且兄弟节点肯定有两个孩子，且兄弟节点的左右子树路径上均有两个黑色节点，此时只需将兄弟节点与父节点颜色互换，然后将父节点左旋，左旋后，兄弟节点的左子树SL挂到了父节点p的右孩子位置，这时会导致p的右子树路径上的黑色节点比左子树多一，此时再SL置为红色即可。  </p></li><li><p>兄弟节点是黑色，那么就只能打他孩子的主意了。这里主要关注远侄子（兄弟节点的右孩子，即SR）的颜色情况，这里分成两种情况：</p><ul><li>远侄子SR是黑色，近侄子任意（白色代表颜色可以为任意颜色），现将S转为红色，然后右旋，再将SL换成P节点颜色，P土城黑色，S也涂成黑色，在进行左旋即可。<br>其实简单说就是SL上位，替换父节点位置。  </li><li>远侄子SR为红色，近侄子（该子树路径中有且有仅有一个黑色节点），则现将兄弟节点与父节点颜色互换，将SR涂成黑色，再将父节点左旋即可。  </li></ul></li></ul><h3 id="TreeNode的删除节点"><a href="#TreeNode的删除节点" class="headerlink" title="TreeNode的删除节点"></a>TreeNode的删除节点</h3><p>TreeNode删除节点其实也是两步走：  </p><ol><li>先进性二叉搜索树的删除，然后再进行红黑树的调整，跟之前的情况分析是一致的。  </li></ol><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">final void removeTreeNode(HashMap&lt;K,V&gt; <span class="built_in">map</span>, Node&lt;K,V&gt;[] tab, boolean movable) &#123;</span><br><span class="line"></span><br><span class="line">     ......</span><br><span class="line"></span><br><span class="line">     //p是待删除节点，replacement用于后续的红黑树调整，指向的是p或者p的继承者。</span><br><span class="line">     //如果p是叶子节点，<span class="attr">p==replacement，否则replacement为p的右子树中最左节点</span></span><br><span class="line">     <span class="keyword">if</span> (replacement != p) &#123;</span><br><span class="line">        //若p不是叶子节点，则让replacement的父节点指向p的父节点</span><br><span class="line">        TreeNode&lt;K,V&gt; <span class="attr">pp</span> = replacement.<span class="attr">parent</span> = p.parent;</span><br><span class="line">        <span class="keyword">if</span> (<span class="attr">pp</span> == <span class="literal">null</span>)</span><br><span class="line">            <span class="attr">root</span> = replacement;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="attr">p</span> == pp.left)</span><br><span class="line">            pp.<span class="attr">left</span> = replacement;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.<span class="attr">right</span> = replacement;</span><br><span class="line">        p.<span class="attr">left</span> = p.<span class="attr">right</span> = p.<span class="attr">parent</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //若待删除的节点p时红色的，则树平衡未被破坏，无需进行调整。</span><br><span class="line">    //否则删除节点后需要进行调整</span><br><span class="line">    TreeNode&lt;K,V&gt; <span class="attr">r</span> = p.red ? root : balanceDeletion(root, replacement);</span><br><span class="line"></span><br><span class="line">    //p为叶子节点，则直接将p从树中清除</span><br><span class="line">    <span class="keyword">if</span> (<span class="attr">replacement</span> == p) &#123;  // detach</span><br><span class="line">        TreeNode&lt;K,V&gt; <span class="attr">pp</span> = p.parent;</span><br><span class="line">        p.<span class="attr">parent</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (pp != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="attr">p</span> == pp.left)</span><br><span class="line">                pp.<span class="attr">left</span> = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="attr">p</span> == pp.right)</span><br><span class="line">                pp.<span class="attr">right</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>麻烦的地方就在删除节点后的调整了，所有逻辑都在balanceDeletion函数里，两个参数分别表示根节点和删除节点的继承者，具体实现如下：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">static &lt;K,V&gt; TreeNode&lt;K,V&gt; balanceDeletion(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; x) &#123;</span><br><span class="line">    for (TreeNode&lt;K,V&gt; xp, xpl, xpr;;)  &#123;</span><br><span class="line">        //x为空或x为根节点，直接返回</span><br><span class="line">        <span class="keyword">if</span> (<span class="attr">x</span> == <span class="literal">null</span> || <span class="attr">x</span> == root)</span><br><span class="line">            return root; </span><br><span class="line">        //x为根节点，染成黑色，直接返回（因为调整过后，root并不一定指向删除操作过后的根节点，如果之前删除的是root节点，则x将成为新的根节点）</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="attr">xp</span> = x.parent) == <span class="literal">null</span>) &#123;</span><br><span class="line">            x.<span class="attr">red</span> = <span class="literal">false</span>; </span><br><span class="line">            return x;</span><br><span class="line">        &#125;</span><br><span class="line">        //如果x为红色，则无需调整，返回</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x.red) &#123;</span><br><span class="line">            x.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">            return root; </span><br><span class="line">        &#125;</span><br><span class="line">        //x为其父节点的左孩子</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="attr">xpl</span> = xp.left) == x) &#123;</span><br><span class="line">            //如果它有红色的兄弟节点xpr，那么它的父亲节点xp一定是黑色节点</span><br><span class="line">            <span class="keyword">if</span> ((<span class="attr">xpr</span> = xp.right) != <span class="literal">null</span> &amp;&amp; xpr.red) &#123; </span><br><span class="line">                xpr.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                xp.<span class="attr">red</span> = <span class="literal">true</span>; </span><br><span class="line">                //对父节点xp做左旋转</span><br><span class="line">                <span class="attr">root</span> = rotateLeft(root, xp); </span><br><span class="line">                //重新将xp指向x的父节点，xpr指向xp新的右孩子</span><br><span class="line">                <span class="attr">xpr</span> = (<span class="attr">xp</span> = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.right; </span><br><span class="line">            &#125;</span><br><span class="line">            //如果xpr为空，则向上继续调整，将x的父节点xp作为新的x继续循环</span><br><span class="line">            <span class="keyword">if</span> (<span class="attr">xpr</span> == <span class="literal">null</span>)</span><br><span class="line">                <span class="attr">x</span> = xp; </span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                //sl和sr分别为其近侄子和远侄子</span><br><span class="line">                TreeNode&lt;K,V&gt; <span class="attr">sl</span> = xpr.left, <span class="attr">sr</span> = xpr.right;</span><br><span class="line">　　　　　　　　　　　　</span><br><span class="line">                <span class="keyword">if</span> ((<span class="attr">sr</span> == <span class="literal">null</span> || !sr.red) &amp;&amp;</span><br><span class="line">                    (<span class="attr">sl</span> == <span class="literal">null</span> || !sl.red)) &#123;</span><br><span class="line">                    xpr.<span class="attr">red</span> = <span class="literal">true</span>; //若sl和sr都为黑色或者不存在，即xpr没有红色孩子，则将xpr染红</span><br><span class="line">                    <span class="attr">x</span> = xp; //本轮结束，继续向上循环</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    //否则的话，就需要进一步调整</span><br><span class="line">                    <span class="keyword">if</span> (<span class="attr">sr</span> == <span class="literal">null</span> || !sr.red) &#123; </span><br><span class="line">                        <span class="keyword">if</span> (sl != <span class="literal">null</span>) //若左孩子为红，右孩子不存在或为黑</span><br><span class="line">                            sl.<span class="attr">red</span> = <span class="literal">false</span>; //左孩子染黑</span><br><span class="line">                        xpr.<span class="attr">red</span> = <span class="literal">true</span>; //将xpr染红</span><br><span class="line">                        <span class="attr">root</span> = rotateRight(root, xpr); //右旋</span><br><span class="line">                        <span class="attr">xpr</span> = (<span class="attr">xp</span> = x.parent) == <span class="literal">null</span> ?</span><br><span class="line">                            <span class="literal">null</span> : xp.right;  //右旋后，xpr指向xp的新右孩子，即上一步中的sl</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpr != <span class="literal">null</span>) &#123;</span><br><span class="line">                        xpr.<span class="attr">red</span> = (<span class="attr">xp</span> == <span class="literal">null</span>) ? <span class="literal">false</span> : xp.red; //xpr染成跟父节点一致的颜色，为后面父节点xp的左旋做准备</span><br><span class="line">                        <span class="keyword">if</span> ((<span class="attr">sr</span> = xpr.right) != <span class="literal">null</span>)</span><br><span class="line">                            sr.<span class="attr">red</span> = <span class="literal">false</span>; //xpr新的右孩子染黑，防止出现两个红色相连</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                        xp.<span class="attr">red</span> = <span class="literal">false</span>; //将xp染黑，并对其左旋，这样就能保证被删除的X所在的路径又多了一个黑色节点，从而达到恢复平衡的目的</span><br><span class="line">                        <span class="attr">root</span> = rotateLeft(root, xp);</span><br><span class="line">                    &#125;</span><br><span class="line">                    //到此调整已经完毕，进入下一次循环后将直接退出</span><br><span class="line">                    <span class="attr">x</span> = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //x为其父节点的右孩子，跟上面类似</span><br><span class="line">        <span class="keyword">else</span> &#123; // symmetric</span><br><span class="line">            <span class="keyword">if</span> (xpl != <span class="literal">null</span> &amp;&amp; xpl.red) &#123;</span><br><span class="line">                xpl.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                xp.<span class="attr">red</span> = <span class="literal">true</span>;</span><br><span class="line">                <span class="attr">root</span> = rotateRight(root, xp);</span><br><span class="line">                <span class="attr">xpl</span> = (<span class="attr">xp</span> = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="attr">xpl</span> == <span class="literal">null</span>)</span><br><span class="line">                <span class="attr">x</span> = xp;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; <span class="attr">sl</span> = xpl.left, <span class="attr">sr</span> = xpl.right;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="attr">sl</span> == <span class="literal">null</span> || !sl.red) &amp;&amp;</span><br><span class="line">                    (<span class="attr">sr</span> == <span class="literal">null</span> || !sr.red)) &#123;</span><br><span class="line">                    xpl.<span class="attr">red</span> = <span class="literal">true</span>;</span><br><span class="line">                    <span class="attr">x</span> = xp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="attr">sl</span> == <span class="literal">null</span> || !sl.red) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (sr != <span class="literal">null</span>)</span><br><span class="line">                            sr.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                        xpl.<span class="attr">red</span> = <span class="literal">true</span>;</span><br><span class="line">                        <span class="attr">root</span> = rotateLeft(root, xpl);</span><br><span class="line">                        <span class="attr">xpl</span> = (<span class="attr">xp</span> = x.parent) == <span class="literal">null</span> ?</span><br><span class="line">                            <span class="literal">null</span> : xp.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpl != <span class="literal">null</span>) &#123;</span><br><span class="line">                        xpl.<span class="attr">red</span> = (<span class="attr">xp</span> == <span class="literal">null</span>) ? <span class="literal">false</span> : xp.red;</span><br><span class="line">                        <span class="keyword">if</span> ((<span class="attr">sl</span> = xpl.left) != <span class="literal">null</span>)</span><br><span class="line">                            sl.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                        xp.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                        <span class="attr">root</span> = rotateRight(root, xp);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="attr">x</span> = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://r.photo.store.qq.com/psc?/V11rBmNJ3kviLN/hsnfJ.a5yg7.BhItQyNwPS8WgpyOY*TnhQ6ra5OBonOaSJRRjYa.EwaeDcHd5u0Z2wMIczAx0nk6IHzpV2SuW5ZkbqYqWpEyQuGfndQv*mU!/r" alt="image"></p><p><img src="https://r.photo.store.qq.com/psc?/V11rBmNJ3kviLN/hsnfJ.a5yg7.BhItQyNwPZ0TVvbWf.6wlQibDDEU9nwepElsriUycANIyLMCH972q4*18zAQ2JnfajC3UcA3FOOYO1pY.VPGyy9Yhc5qm0U!/r" alt="image"></p><p><img src="https://r.photo.store.qq.com/psc?/V11rBmNJ3kviLN/hsnfJ.a5yg7.BhItQyNwPVrsS.2eQykh7ln*jpalRaYOuC840EjilEUf*3l1I4Uj5vN8oKglrkZSTgN9O7NMea.f2q30d9hZwhBgLkZ2pjc!/r" alt="image"></p><p><img src="https://r.photo.store.qq.com/psc?/V11rBmNJ3kviLN/hsnfJ.a5yg7.BhItQyNwPaZRzqjFpkGRmkeFlPQdsF3YnWtpVuzAnvhHE3LZZLP.CEPsRNlRt0U.WFtozxfBS3bCEjSVmbIFygRtlzEuDYY!/r" alt="image"></p><p><img src="https://r.photo.store.qq.com/psc?/V11rBmNJ3kviLN/hsnfJ.a5yg7.BhItQyNwPXdSPInQ3l8qS*.LcdHVIU3s1Gt6GVBtTa9yvpW2nENYOBAu4lPqx2**2LleuReBcgcvRMJXIU9kfBqvzwfvC1A!/r" alt="image"></p><p><img src="https://r.photo.store.qq.com/psc?/V11rBmNJ3kviLN/hsnfJ.a5yg7.BhItQyNwPek1*OE0FbhH1wkxqG3uJo4a90xtMKMRqDZROfloDawycjwz7yjR*VrmgnpyK1.DoWB9aksaXcF2svMMndLJNUU!/r" alt="image"></p><p><img src="https://r.photo.store.qq.com/psc?/V11rBmNJ3kviLN/hsnfJ.a5yg7.BhItQyNwPfeCIgjNMUSfKD8lKPVMn13P9lKi7RRo3e8RSqlAT5LwIXSns.TckldPKVuWYuAh17R7wiB9FFZTtwfrabXsmY8!/r" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 红黑树 </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一点点复习</title>
      <link href="/2020/03/24/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90%E5%A4%8D%E4%B9%A0%E3%80%91%E4%B8%80%E7%82%B9%E7%82%B9%E5%A4%8D%E4%B9%A0/"/>
      <url>/2020/03/24/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90%E5%A4%8D%E4%B9%A0%E3%80%91%E4%B8%80%E7%82%B9%E7%82%B9%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h2><h2 id="理解常用的设计模式"><a href="#理解常用的设计模式" class="headerlink" title="理解常用的设计模式"></a>理解常用的设计模式</h2><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><h2 id="Jquery"><a href="#Jquery" class="headerlink" title="Jquery"></a>Jquery</h2><h2 id="微服务架构设计原理"><a href="#微服务架构设计原理" class="headerlink" title="微服务架构设计原理"></a>微服务架构设计原理</h2><h2 id="Linux操作系统，shell编程，Linux操作命令"><a href="#Linux操作系统，shell编程，Linux操作命令" class="headerlink" title="Linux操作系统，shell编程，Linux操作命令"></a>Linux操作系统，shell编程，Linux操作命令</h2><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>Redis 是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API的非关系型数据库。  </p><p>传统数据库遵循ACID规则。而NoSql(Not Only Sql的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称)一般为分布式，而分布式一般遵循CAP定理。</p><h3 id="Redis支持的数据类型"><a href="#Redis支持的数据类型" class="headerlink" title="Redis支持的数据类型"></a>Redis支持的数据类型</h3><ul><li>String<ul><li>字符串类型</li><li>格式：set key value</li><li>String 类型是二进制安全的。意思是Redis的String可以包含任何数据。比如jpg图片或者序列化的对象。</li><li>String类型是Redis最基本的数据类型。一个键最大能存储512MB。</li></ul></li><li>Hash<ul><li>哈希</li><li>格式：hmset name key1 value1 key2 value2</li><li>Redis Hash 是一个键值（key=&gt;value）对集合</li><li>Redis Hash 是一个String类型的field和value的映射表，hash特别适合用于存储对象。</li></ul></li><li>List<ul><li>列表</li><li>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</li><li>格式：lpush name value</li><li>在key对应list的头部添加字符串元素</li><li>格式：rpush name value</li><li>在key对应list的尾部添加字符串元素</li><li>格式：lrem name index</li><li>key对应list中删除count个和value相同的元素</li><li>格式： llen name</li><li>返回key对应list的长度</li></ul></li><li>Set<ul><li>集合</li><li>格式：sadd name value</li><li>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1).</li></ul></li><li>Zset<ul><li>sorted set:有序集合</li><li>格式：zadd name score value</li><li>Redis zset和set一样也是String类型元素的集合，且不允许重复的成员</li><li>不同的是每个元素都会关联一个double类型的分数。Redis正式通过分数来为集合中的成员从小到大的排序。</li><li>zset的成员是唯一的，但是分数（score）却可以重复。</li></ul></li></ul><h3 id="什么是Redis持久化，Rredis有哪几种持久化方式，优缺点是什么"><a href="#什么是Redis持久化，Rredis有哪几种持久化方式，优缺点是什么" class="headerlink" title="什么是Redis持久化，Rredis有哪几种持久化方式，优缺点是什么"></a>什么是Redis持久化，Rredis有哪几种持久化方式，优缺点是什么</h3><ul><li>持久化就是把内存的数据写到磁盘中去，防止服务宕机内存数据丢失。</li><li>Redis提供了两种持久化方式：RDB（默认）和AOF </li></ul><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>rdb是Redis DataBase的缩写。<br>核心功能函数rdbSave(生成RDB文件)和rdbLoad（从文件加载内存）两个函数<br>内存中的数据对象—–rdbSave—–&gt;磁盘中的RDB文件<br>内存中的数据对象&lt;—-rdbLoad——磁盘中的RDB文件  </p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>Aof是Append-only file缩写<br>服务端——–flush Append Only File——-&gt;磁盘中的AOF文件</p><p>每当执行服务器（定时）任务或者函数时flushAppendOnlyFile函数都会被调用，这个函数执行以下两个工作  </p><p>aof写入保存：<br>WRITE: 根据条件，将aof_buf中的缓存写入到AOF文件<br>SAVE：根据条件，调用fsync或者fdatasync函数，将AOF文件保存到磁盘中。</p><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>内容是Redis通讯协议（RESP）格式的命令文本存储</p><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li>aof文件比rdb更新频率高，有限使用aof还原数据。</li><li>aof比rdb更安全也更大</li><li>rdb性能比aof好</li><li>如果两个都进行了配置优先加载AOF</li></ol><h3 id="其实上面你有提到Redis通讯协议（RESP），能解释下什么是RESP-有什么特点"><a href="#其实上面你有提到Redis通讯协议（RESP），能解释下什么是RESP-有什么特点" class="headerlink" title="其实上面你有提到Redis通讯协议（RESP），能解释下什么是RESP,有什么特点"></a>其实上面你有提到Redis通讯协议（RESP），能解释下什么是RESP,有什么特点</h3><ul><li>RESP 是Redis客户端和服务端之间使用的一种通讯协议</li><li>RESP的特点是：实现简单、快速解析、可读性好</li></ul><h3 id="REdis有哪些架构模式，讲讲各自的特点"><a href="#REdis有哪些架构模式，讲讲各自的特点" class="headerlink" title="REdis有哪些架构模式，讲讲各自的特点"></a>REdis有哪些架构模式，讲讲各自的特点</h3><ul><li><p>单机版</p><ul><li>特点：简单</li><li>问题：<ul><li>1.内存容量有限</li><li>2.处理能力有限</li><li>3.无法高可用</li></ul></li></ul></li><li><p>主从复制</p><ul><li>Redis的复制（replication）功能允许用户根据一个REdis服务器来创建任意多个该服务器的复制品，其中被复制的服务器为主服务器（master），而通过复制创建出来的服务器复制品则为从服务器（slave）。</li><li>只要主从服务器之间的网络连接正常，主从服务器两者会具有相同的数据库，，主服务器就会一直讲发生在自己身上的数据更新同步给从服务器，从而抑制保证主从服务器的数据相同。</li><li>特点：<ul><li>1.master/slave角色</li><li>2.master/slave数据相同</li><li>3.降低master读压力在转交从库</li></ul></li><li>问题： 无法保证高可用，没有解决master写的压力</li></ul></li><li><p>哨兵</p><ul><li>Redis sentinel 是一个分布式系统中监控redis主从服务器，并在主服务器下线时自动进行故障转移。</li><li>其中三个特性：<ul><li>监控（Monitoring）：Sentinel会不断的检查你的主服务器和从服务器是否运作正常；</li><li>提醒（Notification）：当被监控的某个Redis服务器出现问题时，Sentinel可以通过API向管理员或者其他应用程序发送通知</li><li>自动故障迁移（Automatic failover）:当一个主服务器不能正常工作时，Sentinel会开始一次自动故障迁移操作。</li></ul></li><li>特点：<ul><li>1.保证高可用</li><li>2.监控各个节点</li><li>3.自动故障迁移</li></ul></li><li>缺点： 主从模式，切换需要时间丢数据；没有解决master写的压力</li></ul></li><li><p>集群（Proxy）型</p><ul><li>Twemproxy是一个Twitter开源的一个Redis和memcache快速、轻量级代理服务器；</li><li>Twemproxy是一个快速的单线程代理程序，支持Memcached ASCII协议和Redis协议</li><li>特点：<ul><li>1.多种hash算法：MD 5、CRC16、CRC32、CRC32a、hsieh、nurmur、Jenkins </li><li>2.支持失败节点自动删除 </li><li>3.后端Sharding分片逻辑对业务透明，业务放的读写方式和操作单个Redis一致</li></ul></li><li>缺点：增加了新的proxy，需要维护其高可用</li></ul></li><li><p>集群（直连型）</p><ul><li>从redis 3.0之后版本支持redis-cluster集群，Redis-Cluster采用无中心结构，每个节点保存数据和整个集群状态，每个节点都和其他所有节点连接</li><li>特点：<ul><li>无中心架构（不存在哪个节点影响性能瓶颈），少了proxy层</li><li>数据按照slot存储分布在多个节点，节点间数据共享，可动态调整数据分步</li><li>可扩展性，可先行扩展到1000个节点，节点可动态添加或者删除</li><li>高可用性，部分节点不可用时，集群仍然可用。通过增加Slave做备份数据副本。</li><li>实现谷中自动failover，节点之间通过gossip协议交换状态信息，用投票机制完成Slave到Master的角色提升。</li></ul></li><li>缺点<ul><li>1.资源隔离性较差，容易出现相互影响的情况</li><li>2.数据通过异步复制，不保证数据的强一致性</li></ul></li></ul></li></ul><h3 id="什么是一致性哈希算法，什么是哈希槽"><a href="#什么是一致性哈希算法，什么是哈希槽" class="headerlink" title="什么是一致性哈希算法，什么是哈希槽"></a>什么是一致性哈希算法，什么是哈希槽</h3><h3 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h3><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="使用RabbitMQ有什么好处"><a href="#使用RabbitMQ有什么好处" class="headerlink" title="使用RabbitMQ有什么好处"></a>使用RabbitMQ有什么好处</h3><ol><li>解耦：系统A在代码中国直接调用系统B和系统C的代码，如果将来D系统接入，系统A还不需要修改代码，过于麻烦</li><li>异步：将消息写入消息队列，非必要的业务逻辑以异步的方式运行，加快响应速度。</li><li>削峰：并发量大的时候，所有的请求直接怼到数据库，造成数据库连接异常。</li></ol><h3 id="RabbitMQ中的broker是指的什么，cluster又是指的什么"><a href="#RabbitMQ中的broker是指的什么，cluster又是指的什么" class="headerlink" title="RabbitMQ中的broker是指的什么，cluster又是指的什么"></a>RabbitMQ中的broker是指的什么，cluster又是指的什么</h3><ul><li>broker是指一个或者多个erlang node 的逻辑分组，且node上运行着rabbitMQ的应用程序。</li><li>cluster是指在broker的基础之上，增加了node之间共享元数据的约束。</li></ul><h3 id="RabbitMQ概念里的Channel、exchange和queue是逻辑概念还是对应着进程实体，分别起着什么作用"><a href="#RabbitMQ概念里的Channel、exchange和queue是逻辑概念还是对应着进程实体，分别起着什么作用" class="headerlink" title="RabbitMQ概念里的Channel、exchange和queue是逻辑概念还是对应着进程实体，分别起着什么作用"></a>RabbitMQ概念里的Channel、exchange和queue是逻辑概念还是对应着进程实体，分别起着什么作用</h3><ul><li>queue具有自己的erlang进程；</li><li>exchange内部实现为保存binding关系的查找表；</li><li>channel是实际进行路由工作的实体，即负责按照routing_key将message投递给queue；</li><li>由AMQP协议描述可知，channel是真实TCP连接之上的虚拟连接，所有AMQP命令都是通过channel发送的，且每一个channel都有一个唯一的ID。一个channel只能被单独一个操作系统线程使用，故投递到特定channel上的message是有顺序的。单一个操作系统还是那个允许使用多个channel。</li></ul><h3 id="vhost是什么，起什么作用"><a href="#vhost是什么，起什么作用" class="headerlink" title="vhost是什么，起什么作用"></a>vhost是什么，起什么作用</h3><ul><li>vhost可以理解为虚拟broker，即mini-RabbitMQ server。</li><li>其内部均含有独立的queue、exchange和binding等。</li><li>但最最最重要的是，其拥有独立的权限系统。可以做到vhost范围的用户控制。</li><li>当然，从RabbitMQ的全局角度，vhost可以作为不同权限隔离的手段（一个典型的例子就是不同应用可以跑在不同的vhost中）。</li></ul><h3 id="消息基于什么传输"><a href="#消息基于什么传输" class="headerlink" title="消息基于什么传输"></a>消息基于什么传输</h3><ul><li>由于TCP连接的擦行间和销毁开销较大，且并发数受系统资源限制，会造成性能瓶颈。</li><li>RabbitMQ使用【信道】的方式来传输数据。</li><li>信道是建立在真是的TCP连接内的虚拟连接，且每条TCP连接上的信道数量没有限制。</li></ul><h3 id="消息如何分发"><a href="#消息如何分发" class="headerlink" title="消息如何分发"></a>消息如何分发</h3><ul><li>若该队列至少有一个消费者订阅，消息将以循环（round-robin）的方式发送给消费者。</li><li>每条消息只会分发给一个订阅的消费者（前提是消费者能够正常处理消息并进行确认）。</li></ul><h3 id="消息怎么路由"><a href="#消息怎么路由" class="headerlink" title="消息怎么路由"></a>消息怎么路由</h3><p>从概念上来说，消息路由必须有三部分：交换器exchange、路由routing_key、绑定binding。  </p><p>生产者把消息发布到交换器上；绑定决定消息如何从路由器路由到特定的队列；消息最终到达队列，并被消费者接收。</p><ol><li>消息发布到交换器时，消息将拥有一个路由键（routing key），在消息创建时设定；</li><li>通过队列路由键，可以吧队列绑定到交换器上。</li><li>消息到达交换器后，RabbitMQ会将消息的路由键与队列的路由键进行匹配（针对不同的交换器有不同的路由规则）；如果能够匹配到队列，则消息会投递到相应的队列当中；如果不能匹配到任何队列，消息将进入”黑洞”；</li></ol><h4 id="常用的交换器主要分为以下三种"><a href="#常用的交换器主要分为以下三种" class="headerlink" title="常用的交换器主要分为以下三种"></a>常用的交换器主要分为以下三种</h4><ul><li>direct: 如果路由键完全匹配，消息就被投递到相应的队列</li><li>fanout: 如果交换器收到消息，将会广播到所有绑定的队列上</li><li>topic：可以使来自不同源头的消息能够到达同一个队列。使用topic交换器时，可以使用通配符；比如：”*”匹配特定位置的任意文本。”.”把路由键分为了几个部分。”#”匹配所有规则等。</li><li>特别注意：发往topic交换器的消息不能随意的设置选择键（routing_key）,必须是由”.”隔开的一系列的标识符组成。</li></ul><h3 id="什么是元数据，元数据分为哪些类型，包括哪些内容，与cluster相关的元数据有哪些，元数据是如何保存的，元数据在cluster中是如何分布的"><a href="#什么是元数据，元数据分为哪些类型，包括哪些内容，与cluster相关的元数据有哪些，元数据是如何保存的，元数据在cluster中是如何分布的" class="headerlink" title="什么是元数据，元数据分为哪些类型，包括哪些内容，与cluster相关的元数据有哪些，元数据是如何保存的，元数据在cluster中是如何分布的"></a>什么是元数据，元数据分为哪些类型，包括哪些内容，与cluster相关的元数据有哪些，元数据是如何保存的，元数据在cluster中是如何分布的</h3><ul><li>在非cluster模式下，元数据主要分为：<ul><li>Queue元数据（queue名字和属性等）；</li><li>Exchange元数据（exchange名字、类型、属性等）</li><li>Binding元数据（存放路由关系的查找表）</li><li>Vhost元数据（Vhost范围内针对前三者的名字空间约束和安全属性设置）</li></ul></li><li>在cluster模式下，元数据还包括：<ul><li>cluster中node位置信息和node关系信息</li></ul></li><li>元数据按照erlang node的类型确定是仅保存于RAM中，还是同时保存在RAM和disk上。</li><li>元数据在cluster中是全node分步的。</li></ul><h3 id="在单node系统和多node构成的cluster系统中声明queue、exchange、以及进行binding会有什么不同"><a href="#在单node系统和多node构成的cluster系统中声明queue、exchange、以及进行binding会有什么不同" class="headerlink" title="在单node系统和多node构成的cluster系统中声明queue、exchange、以及进行binding会有什么不同"></a>在单node系统和多node构成的cluster系统中声明queue、exchange、以及进行binding会有什么不同</h3><ul><li><p>当你在单node上声明queue时，只要该node上相关元数据进行了变更，你就会得到Queue.Declare-ok回应。</p></li><li><p>而在cluster上声明queue，则要求cluster上的全部node都要进行元数据成功更新，才会得到Queue.Declare-ok回应。</p></li><li><p>另外，若node类型为RAM node则变更的数据仅保存在内存中；若类型为disk node 则还要变更保存在磁盘上的数据。</p></li><li><p>死信队列&amp;死信交换器：DLX全称（Dead-Letter-Exchange），称之为死信交换器，当消息变成一个死信之后，如果这个消息所在的队列存在x-dead-letter-exchange参数，那它会被发送到x-dead-letter-exchange对应值的交换器上，这个交换器就称之为死信交换器，与这个死信交换器绑定的队列就是死信队列。</p></li></ul><h3 id="如何确保消息正确的发送至RabbitMQ"><a href="#如何确保消息正确的发送至RabbitMQ" class="headerlink" title="如何确保消息正确的发送至RabbitMQ"></a>如何确保消息正确的发送至RabbitMQ</h3><ul><li>RabbitMQ使用发送方确认模式，确保消息正确地发送到RabbitMQ。</li><li>发送方确认模式：将信道设置confirm模式（发送方确认模式），则所有在信道上发布的消息都会被指派一个唯一的id。一旦消息被投递到目的地队列之后，或者消息被写入磁盘之后（可持久化消息），信道会发送一个确认和生产者（包含消息唯一id）。</li><li>如果RabbitMQ发送内部错误而导致消息丢失，会发送一条nack(not acknowledged,未确认)消息。</li><li>发送方确认模式是异步的，生产者应用程序在等待确认的同时，可以继续发送消息。</li><li>当确认消息到达生产者应用程序，生产者应用程序的回调方法就会被触发来处理确认消息。</li></ul><h3 id="如何确保消费接收方消费了消息"><a href="#如何确保消费接收方消费了消息" class="headerlink" title="如何确保消费接收方消费了消息"></a>如何确保消费接收方消费了消息</h3><ul><li>接收方消息确认机制： 消费者接受每一条消息后都必须进行确认（消息接受和消息确认时两个不同的操作）。</li><li>只有消费者确认了消息，RabbitMQ才能安全的把消息从队列中删除。</li><li>这里并没有用到超时机制，RabbitMQ仅通过COnsumer的连接中断来确认是否需要重新发送消息。</li><li>也就是说，只要连接不中断，RabbitMQ给了Consumer足够长的时间来处理消息。</li></ul><p>下面罗列几种特殊情况；</p><ul><li>如果消费者接收到消息，在确认之前断开了连接或者取消订阅，RabbitMQ会认为消息没有被分发，然后重新分发给下一个订阅的消费者（可能存在消息重复消费的隐患，需要根据bizId去重）</li><li>如果消费者接收到消息却没有确认消息，连接也未断开，则RabbitMQ认为该消费者繁忙，将不会给该消费者分发更多的消息。</li></ul><h3 id="如何避免消息重复投递或者重复消费"><a href="#如何避免消息重复投递或者重复消费" class="headerlink" title="如何避免消息重复投递或者重复消费"></a>如何避免消息重复投递或者重复消费</h3><ul><li>在消息生产时，MQ内部针对每条生产者发送的消息生成了一个inner-msg-id，作为去重和幂等性的依据（消息投递失败并重传）避免重复的消息进入队列；</li><li>在消息消费时，要求消息体重必须要有一个bizId（对于同一个业务全局唯一，如支付ID、订单ID、帖子ID等）作为去重和幂等的依据，避免同一条消息被重复消费。</li></ul><p>这个问题针对业务场景来答，分以下几点：</p><ol><li>比如，你拿到这个消息做数据库的insert操作，那就容易了。给这个消息做一个唯一主键，那么就算出现重复消费的情况，就会导致主键冲突，避免数据库出现脏数据。</li><li>再比如，你拿到这个消息做redis的set操作，那就容易了，不用解决，因为你无论set几次结果都是一样的，set操作本来就算幂等操作。</li><li>如果上面两种情况还不行，上大招，准备一个第三方介质，来做消费记录。以redis为例，给消息分配一个全局id，只要消费过该消息，将&lt; id, message&gt; 以key-value形式写入redis。那消费者开始消费前，先去redis中查询有没有消费记录即可。</li></ol><h3 id="如何结局丢数据的问题"><a href="#如何结局丢数据的问题" class="headerlink" title="如何结局丢数据的问题"></a>如何结局丢数据的问题</h3><ol><li>生产者丢数据</li></ol><p>生产者的消息如果没有投递到MQ中怎么办？<br>从生产者弄丢数据这个角度来看，RabbitMQ提供transaction和confirm模式来确保生产者不丢消息。  </p><p>transaction机制就是说，发送消息前，开启事务（channel.txSelect()）,然后放消息，如果发送过程中出现什么异常，事务就会回滚（channel.txRollback()）,如果发送成功则提交事务（channel.txCommit()）。  </p><p>然后缺点就是吞吐量下降了。因此，生产商用confirm模式居多。<br>一旦channel进入confirm模式，所有在该信道上面发布的消息都将会呗指派一个唯一的ID（从1开始），一旦消息被投递到素有匹配的队列之后，rabbitMQ就会发送一个Ack给生产者（包含消息的唯一ID），这就使得生产知道消息已经正确到达目的地队列了。<br>如果RabbitMQ没能处理该消息，则会发送一个nack消息给你，你可以进行重试操作。</p><ol start="2"><li>消息队列丢失数据</li></ol><p>处理消息队列丢失数据的情况，一般是开启持久化磁盘的配置。<br>这个持久化配置可以和confirm机制配合使用。<br>你可以在消息持久化磁盘之后，再给生产者发送一个Ack信号。这样，如果消息持久化磁盘之前，RabbitMQ阵亡了，那么生产者收不到Ack信号，生产者会自动重发。  </p><p>那么如何持久化呢，这里顺便说一下，其实也很容易，就下面两步骤：  </p><ul><li>将queue的持久化标示durable设置为true，则代表是一个持久的队列</li><li>发送消息的时候将deliveryMode=2</li></ul><p>这样设置以后，RabbitMQ就算挂了，重启后也能恢复数据，在消息还没哟持久化到硬盘时，可能服务已经死掉，这种那个情况可以通过引入mirrored-queue即镜像队列，但是也不能保证消息百分百不丢失（整个集群都挂掉）</p><ol start="3"><li>消费者丢失数据</li></ol><p>启用手动确认模式可以解决这个问题  </p><ul><li>自动确认模式：消费者挂掉，等待ack的消息回归到队列中。消费者抛出异常，消息会不断地被重发，知道处理成功。不会丢失消息，即便服务挂掉，没有处理完成的消息会重回队列，但是异常回访消息不断重试。</li><li>手动确认模式：如果消费者来不及处理就死掉时，没有响应ack时会重复发送一条消息给其他消费者；如果监听程序处理异常了，且未对异常进行捕获，会一直重复接收消息，然后一直抛出异常；如果对异常进行了捕获，但是没有在finally里ack，也会一直重复发送消息（重试机制）；</li><li>不确认模式，acknowledge=”none”,不使用确认机制，只要消息发送完成会立即在队列移除，无论客户端异常还是断开，只要发送完就移除，不会重发。</li></ul><h3 id="死信队列和延迟队列的使用"><a href="#死信队列和延迟队列的使用" class="headerlink" title="死信队列和延迟队列的使用"></a>死信队列和延迟队列的使用</h3><p>死信消息：</p><ol><li>消息被拒绝（Basic.Reject或者Basic.Nack）并且设置requeue参数的值为false</li><li>消息过期了</li><li>队列达到最大的长度</li></ol><p>过期消息：</p><p>在RabbitMQ中存在两种方式方可设置消息的过期时间：</p><ul><li>第一种通过对队列进行设置，这猴子那个设置后，该队列中所有消息都存在相同的过期时间；</li><li>第二种通过对消息本身进行设置，那么每条消息的过期时间都不一样。</li><li>如果同时使用这两种方法，那么以过期时间小的那个数值为准。</li><li>当消息达到过期时间还没有被消费，那么这个消息就成为了一个死信消息.</li></ul><p>队列设置: 在队列申明的时候使用x-message-ttl参数，单位为毫秒</p><p>单个消息设置：是设置消息属性的expiration参数的值，单位为毫秒</p><p>延时队列：在RabbitMQ中不存在延时队列。但是我们可以通过设置消息的过期时间和死信队列来模拟出延时队列。消费者监听死信交换器绑定的队列，而不要监听消息发送的队列。</p><p>需求：用户在系统中创建了一个订单，如果超过时间用户没有进行支付，那么自动取消订单。<br>分析：</p><ol><li>上面这个情况，我们就适合使用延时队列来实现，那么延时队列如何创建</li><li>延时队列可以由 过期消息+死信队列 来实现</li><li>过期消息通过队列中设置x-message-ttl 参数实现</li><li>死信队列通过在队列申明时，给队列设置x-dead-letter-exchange参数，然后另外申明一个队列绑定x-dead-letter-exchange对应的交换器。</li></ol><h3 id="使用消息队列会有什么缺点"><a href="#使用消息队列会有什么缺点" class="headerlink" title="使用消息队列会有什么缺点"></a>使用消息队列会有什么缺点</h3><ol><li>系统可用性降低</li><li>系统复杂性增加，需要考虑的东西更多，系统复杂性增大。</li><li>一致性问题</li></ol><h2 id="SQL数据库索引优化"><a href="#SQL数据库索引优化" class="headerlink" title="SQL数据库索引优化"></a>SQL数据库索引优化</h2><ul><li>索引不会包含有NULLL的值</li><li>使用短索引</li><li>不要在列上进行运算</li><li>不适用not in 和in操作</li></ul><h2 id="SQL数据库查询优化"><a href="#SQL数据库查询优化" class="headerlink" title="SQL数据库查询优化"></a>SQL数据库查询优化</h2><h4 id="SQL优化的具体操作"><a href="#SQL优化的具体操作" class="headerlink" title="SQL优化的具体操作"></a>SQL优化的具体操作</h4><ol><li>在表中建立索引，优先考虑where、group by 使用到的字段；<br>【优化方式】：在表中建立索引，优先考虑where、group by使用到的字段。</li><li>尽量避免使用select * ,<br>返回无用的字段会降低查询效率。<br>如下：select * from t.<br>【优化方式】：使用具体的字段代替*，只返回使用到的字段。</li><li>尽量避免使用in 和not in,会导致数据库引擎放弃索引进行全表扫描。如下:<br>select * from t where id in (2,3);<br>select * from t1 where username in (select username from t2);<br>【优化方式】：如果是连续数值，可以用between and代替。如下：<br>select * from t where id between 2 and 3;<br>如果是子查询，可以用exists代替，如下：<br>select * from t1 where exists (select * from t2 where t1.username=t2.username);</li><li>尽量避免使用or，会导致数据库引擎放弃索引进行全表扫描。如下:<br>select * from t where id=1 or id=3;<br>【优化方式】：可以用union代替or，如下：<br>select * from t where id=1 union select * from t where id=3;<br>(ps:如果or两边的字段是同一个，如例子中这样，貌似两种方式效率差不多，及时union扫描的是索引，or扫描的是全表)。</li><li>尽量避免在字段开头模糊查询，会导致数据库引擎放弃索引进行全表扫描。如下：<br>select * from t where username like ‘%li%’;<br>【优化方式】：尽量在字段后面使用模糊查询。如下：<br>select * from t where username like ‘li%’;</li><li>尽量避免进行null值的判断，会导致数据库引擎放弃索引进行全表扫描。如下：<br>select * from t where score is null;<br>【优化方式】：可以给字段添加默认值为0，对0值进行判断，如下：<br>selext * from t where score =0;</li><li>尽量避免在where条件中等号的左边进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描。如下：<br>select * from t2 where score/10=9;<br>select * from t2 where substr(username,1,2)=’li’;<br>【优化方式】：可以将表达式、函数操作移动到灯油右侧，如下：<br>select * from t2 where socre=10*9;<br>select * from t2 where username like ‘li%’;</li><li>当数据量较大时，避免使用where 1=1的条件。通常是为了方便拼装插叙条件，我们会默认使用该条件，数据库引擎会放弃索引进行全表扫描。如下：<br>select * from t where 1=1;<br>【优化方式】：用代码拼装sql时进行判断，没有where加where,有where加and.</li><li>对查询进行优化，应尽量避免全表扫描，首先应该考虑在where以及order by涉及的列上建立索引，一个表的索引不能过多，过多则不利于删除、插入等操作。</li><li>避免频繁创建和删除临时表，以减少系统表资源的消耗。</li><li>尽可能的使用varchar代替char，因为首选变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</li><li>尽量使用数字型字段，若只含有数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，炳辉增加存储的开销。这是因为引擎在处理查询和连接是会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</li><li>索引并不是越多越好，索引固然可以提高相应的select的效率，但同时也降低了insert和update的效率，因为insert或者是update时有可能重建索引，所以怎样建立索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，弱太多则应该考虑一些不常使用到的列上键的索引是否有必要。</li><li>并不是所有索引对查询都要效。SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一张表中有字段sex，male、female各占了一半，那么即使在sex上建立了索引也对查询效率起不了作用。</li></ol><h2 id="SQL数据库存储过程优化"><a href="#SQL数据库存储过程优化" class="headerlink" title="SQL数据库存储过程优化"></a>SQL数据库存储过程优化</h2><p>SQL语句需要【先编译然后执行】。<br>而存储过程（Stored Procedure）则是一组为了完成特定功能的【SQL语句集】，经过【编译】之后【存储】在数据库中，用户通过指定存储过程的【名字】并传给定【参数】（如果该存储过程带有参数的话）来调用执行它。  </p><p>存储过程是可编程的函数，在数据库中创建并保存，可以由【SQL语句】和【控制结构】组成。<br>当想要在【不同的应用程序或着平台】上执行【相同的函数】，或者【封装特定功能】时，存储过程是非常有用的。<br>数据库中的存储过程可以看做是对编程中【面向对象方法的模拟】，它【允许控制数据的访问方式】。  </p><p>存储过程的优点：</p><ol><li>【增强SQL语言的功能和灵活性】：存储过程可以用控制语句编写，有很强的灵活性，可以完成复杂的判断和比较复杂的运算。</li><li>【标准组件式编程】：存储过程被创建之后，可以在程序中被调用多次，而不必重新编写该存储过程的SQL语句。而且数据库专业人员可以随时对存储过程进行修改，对应用程序源代码毫无影响。</li><li>【较快的执行速度】：如果某已操作包含大量的Transaction-SQL代码或者分别被多次执行，那么存储过程要比批处理的执行速度快很多。因为存储过程是预编译的。在首次运行一个存储过程时查询，优化器对其进行分析优化，并且给出最终被存储在系统表中的执行计划。而批处理的Transaction-SQL语句则在每次运行时都要进行编译和优化，速度相对要慢一些。</li><li>【减少网络流量】：针对同一个数据库对象的操作（如查询、修改），如果这一操作所涉及的Transaction-SQL语句被组织进存储过程，那么当在客户计算机上调用该存储过程的时候，网络中传送的只是该调用语句，从而大大减少网络流量并降低了网络负载。</li><li>【作为一种安全机制来充分利用】：通过对执行某一存储过程的权限进行限制，能够实现对相应的数据的访问权限的限制，避免了非授权用户对数据的访问，保证了数据的安全性。</li></ol><h3 id="MySQL的存储过程"><a href="#MySQL的存储过程" class="headerlink" title="MySQL的存储过程"></a>MySQL的存储过程</h3><p>存储过程是数据库的一个重要的功能，【MySQL5.0】 以前并不支持存储过程这使得MySQL在应用上大打折扣。好在MySQL5.0开始支持存储过程，这样既可以大大提高数据库的【处理速度】，同时也可以提供数据库【编程的灵活性】。</p><h3 id="存储过程编写经验和优化措施"><a href="#存储过程编写经验和优化措施" class="headerlink" title="存储过程编写经验和优化措施"></a>存储过程编写经验和优化措施</h3><ol><li>开发人员如果用到其他库的Table或者View，务必在当前库中简历View来实现跨库操作，最好不要直接使用”database.dbo.table_name”，因为sp_depends不能显示出该SP所使用的的跨库table或者view，不方便校验。</li><li>开发人员在提交SP前，必须已经使用set showplan on 分析过查询计划，做过自身的查询优化检查。</li><li>高程序运行效率，优化应用程序，在SP编写过程中应该注意以下几点：</li></ol><ul><li>SQL的使用规范：<ul><li>尽量避免大量事务操作，慎用holdlock子句，提高系统并发能力。</li><li>尽量避免反复访问同一张或者几张表，尤其是数据量较大的二标，可以考虑先根据条件提取数据到临时表中，然后再做连接。</li><li>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过一万行，那么就应该改写；如果使用了游标，就要尽量避免在游标循环中在进行表连接的操作。</li><li>注意where 子句写法，必须考虑语句顺序，应该根据索引顺序，范围大小来确定条件子句的前后顺序，尽可能的让字段顺序与所以顺序相一致，范围从大到小。</li><li>不要在where子句中的”=”左边进行函数、算数运算或者其他表达式运算，否则系统将可能无法正确使用索引。</li><li>尽量使用exists代替select count(1)来判断是否存在记录，count函数只有在统计表中所有行数时使用，而且count(1)比count(*)更有效率。</li><li>尽量使用”&gt;=”，不要使用”&gt;”</li><li>注意一些or子句和union子句之间的替换</li><li>注意表之间的数据类型，避免不同类型数据之间的链接。</li><li>注意存储过程中国参数和数据类型的关系。</li><li>注意insert、update操作的数据量，防止与其他应用冲突。如果数据量超过200个数据页面（400k），那么系统将会进行锁升级，页级锁会升级成表级锁。</li></ul></li><li>索引的使用规范：<ul><li>所以的创建要与应用结合考虑，建议大的OLTP表不要超过6个索引</li><li>尽可能的使用索引字段作为查询条件，尤其是聚簇索引，必要时可以通过index index_name来强制指定索引</li><li>避免对大表查询时进行table scan,必要时考虑新建索引</li><li>在使用索引字段作为条件时，如果该索引是联合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用。</li><li>要注意索引的维护，周期性重建索引，重新编译存储过程。</li></ul></li><li>tempdb的使用规范<ul><li>尽量避免使用distinct、order by、group by、having、join、***pute，因为这些语句会加重tempdb的负担。</li><li>避免频繁创建和删除临时表，减少系统表资源的消耗。</li><li>在新建临时表时，如果一次性插入数据量很大，那么可以使用select into 代替create table,避免log,提高速度；如果数据量不大，为了缓和系统表的资源，建议先create table,然后insert</li><li>如果临时表的数据量较大，需要建立索引，那么应该将创建临时表和建立索引的过后才能放在单独一个自存储过程中，这样才能保证系统能够很好的使用到该临时表的索引。</li><li>如果使用到了临时表，在存储过程的最后务必将所有临时表显示删除，先truncate table然后drop table,这样可以便面系统表的较长时间锁定。</li><li>慎用大的临时表与其他大表的链接查询和修改，减低系统表的负担，因为这种操作会在一条语句中多次使用tempdb的系统表。</li></ul></li><li>合理的算法使用<ul><li>根据上面已经提到的SQL优化技术和ASE Tuning手册中的SQL优化内容，结合实际内容，采用多种算法进行比较，以获得消耗资源最少，效率最高的方法。具体可以使用ASE调优命令：set statistics io on,set statistics time on,set showplan on 等。</li></ul></li></ul><h3 id="存储过程执行速度优化"><a href="#存储过程执行速度优化" class="headerlink" title="存储过程执行速度优化"></a>存储过程执行速度优化</h3><ol><li>首先查看存储过程中是否有很多重复的实体表（一般给报表写存储过程，第一步就是使用临时表）</li><li>如果反复使用的实体表很多，就要考虑将这个实体表最小范围的数据放到临时表，这样就可以大大提高查询效率。</li><li>如果前两条都做到了还是很慢，就分步骤执行你的存储过程，看看慢在哪个SQL</li><li>如果临时表做到了，问题基本就是在临时表提取数据的时候慢，那就专门对这个临时表提取数据的sql看看有没有走索引，需要的情况下拆分SQL，分步提取数据。</li><li>分步执行你的存储过程，看看慢在哪一个SQL上。一般给报表写存储过程，要在第一步提取出最小范围的数据放到临时表，之后全部的处理过程都对该临时表操作，不再涉及任何实体表，先看看这一点你做大了没有。</li></ol><h3 id="存储过程编写与优化"><a href="#存储过程编写与优化" class="headerlink" title="存储过程编写与优化"></a>存储过程编写与优化</h3><h4 id="编写存储过程有如下好处"><a href="#编写存储过程有如下好处" class="headerlink" title="编写存储过程有如下好处"></a>编写存储过程有如下好处</h4><ol><li>使用存储过程可以对所执行的SQL语句进行封装，在接口保持不变的情况下不影响调用程序。</li><li>最大限度的重用已缓存的执行计划。</li><li>减少网络流量。</li><li>提供更好的数据库安全控制，防止直接对表操作。</li></ol><p>存储过程的编译占用CPU，因此我们应该发那个孩子存储过程不必要的重新编译。  </p><p>防止存储过程不必要的重新编译，达到优化存储过程的目的。  </p><h4 id="存储过程编写经验和优化措施-1"><a href="#存储过程编写经验和优化措施-1" class="headerlink" title="存储过程编写经验和优化措施"></a>存储过程编写经验和优化措施</h4><ul><li><p>存储过程正确的编译发生于</p><ul><li>1.所引用的表中大部分的数据发生了的更改，导致统计信息变化过大</li><li>2.所引用的表的架构被修改，包括添加或者取消约束，默认值或者规则</li><li>3.明确使用WITH RECOMPILE强制每次执行过程时重新编译或者sp_recompile使用过程缓存无效。</li><li>4.由于服务器内存不足或者长期不使用，使缓存过程被清除。</li></ul></li><li><p>在以下情况下编写的存储过程会被不必要的重新编译</p><ul><li>1.在调用过程时，不指定架构所有者。</li><li>2.存储过程在临时表上执行了特定操作。</li><li>3.过程定义中出现DDL和DML的交错。</li><li>4.不应该使用sp_作为自定义存储过程的前缀。这是微软用作系统存储的前缘；在调用以sp_开头的过程中，会首先在master数据库中进行查找，如果找不到才会在用户数据库中查找。</li><li>5.存储过程编写的安全方面，因为传入的参数可能会引起脚本注入的危险，因此应该对每个参数进行一些判断。</li></ul></li></ul><h2 id="Docker服务"><a href="#Docker服务" class="headerlink" title="Docker服务"></a>Docker服务</h2><h3 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h3><p>Docker是一个【容器化】平台。<br>它以【容器】的形式将您的【应用程序】及其所有【依赖项】打包在一起，以确保您的应用程序在【任何环境】中无缝运行。</p><h3 id="CI-持续集成-服务器的功能是什么"><a href="#CI-持续集成-服务器的功能是什么" class="headerlink" title="CI (持续集成)服务器的功能是什么"></a>CI (持续集成)服务器的功能是什么</h3><p>CI功能就是在每次提交之后不断地集成所有提交到存储库的代码，并编译检查错误。</p><h3 id="什么是Docker镜像"><a href="#什么是Docker镜像" class="headerlink" title="什么是Docker镜像"></a>什么是Docker镜像</h3><p>Docker镜像是Docker容器的源代码，Docker镜像用于创建容器，使用build命令创建镜像。</p><h3 id="什么是Docker容器"><a href="#什么是Docker容器" class="headerlink" title="什么是Docker容器"></a>什么是Docker容器</h3><p>Docker容器包括应用程序以及其所有依赖项，作为操作系统的独立进程运行</p><h3 id="Docker容器有几种状态"><a href="#Docker容器有几种状态" class="headerlink" title="Docker容器有几种状态"></a>Docker容器有几种状态</h3><p>Docker容器可以有四种状态</p><ul><li>运行状态</li><li>已暂停状态</li><li>重新启动状态</li><li>已退出状态</li></ul><h3 id="Docker使用流程"><a href="#Docker使用流程" class="headerlink" title="Docker使用流程"></a>Docker使用流程</h3><ol><li>创建Dockerfile之后，您可以构建它已创建容器的镜像。</li><li>推送或拉取镜像。</li></ol><h3 id="Dockerfile中最常见的命令是什么"><a href="#Dockerfile中最常见的命令是什么" class="headerlink" title="Dockerfile中最常见的命令是什么"></a>Dockerfile中最常见的命令是什么</h3><p>Dockerfile中的一些常用指令如下：</p><ul><li>FROM: 指定基础镜像</li><li>LABEL：功能是为镜像指定标签</li><li>RUN：运行指定的命令</li><li>CMD：容器启动时要运行的命令</li></ul><h3 id="Dockerfile中的命令COPY和ADD命令有什么区别"><a href="#Dockerfile中的命令COPY和ADD命令有什么区别" class="headerlink" title="Dockerfile中的命令COPY和ADD命令有什么区别"></a>Dockerfile中的命令COPY和ADD命令有什么区别</h3><p>COPY与ADD的区别在于：COPY的&lt; src &gt;只能是本地文件，其他的用法一致</p><h3 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h3><ul><li>docker pull 拉取或者更新指定镜像</li><li>docker pusl 将镜像推送至远程仓库</li><li>docker rm 删除容器</li><li>docker rmi 删除镜像</li><li>docker images 列出所有镜像</li><li>docker ps 列出所有容器</li></ul><h3 id="DevOps有哪些优势"><a href="#DevOps有哪些优势" class="headerlink" title="DevOps有哪些优势"></a>DevOps有哪些优势</h3><ol><li>技术优势</li></ol><ul><li>持续的软件交付</li><li>修复不太复杂的问题</li><li>更快地解决问题</li></ul><ol start="2"><li>商业利益：</li></ol><ul><li>更快速的传递功能</li><li>更稳定的操作环境</li><li>有更多时间可以增加价值（而不是修复/维护）</li></ul><h3 id="CI（持续集成）服务器的功能是什么"><a href="#CI（持续集成）服务器的功能是什么" class="headerlink" title="CI（持续集成）服务器的功能是什么"></a>CI（持续集成）服务器的功能是什么</h3><p>CI服务器功能是：不断地集成所有正在进行的更改并由不同的开发人员提交到存储库，并检查编译错误。<br>他需要每天多次构建代码，最好是在每次提交之后，以便他可以检测在问题发生时是哪个提交bug了。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="/2020/03/23/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90%E5%A4%8D%E4%B9%A0%E3%80%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/03/23/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90%E5%A4%8D%E4%B9%A0%E3%80%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>借鉴自博客：<a href="https://blog.csdn.net/fangchao2011/article/details/89184058" target="_blank" rel="noopener">https://blog.csdn.net/fangchao2011/article/details/89184058</a></p></blockquote><h2 id="面试题模块"><a href="#面试题模块" class="headerlink" title="面试题模块"></a>面试题模块</h2><ul><li>Java基础</li><li>容器</li><li>多线程</li><li>反射</li><li>对象拷贝</li><li>Java Web模块</li><li>异常</li><li>网络</li><li>设计模式</li><li>Spring/Spring MVC</li><li>SpringBoot/Spring Cloud</li><li>Hibernate</li><li>Mybatis</li><li>RabbitMQ</li><li>Kafka</li><li>Zookeeper</li><li>Mysql</li><li>Redis</li><li>JVM</li></ul><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><ul><li>Java基础</li><li>容器</li><li>多线程</li><li>对象拷贝</li><li>Java Web模块</li><li>异常模块</li><li>网络模块</li><li>设计模块</li></ul><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><ul><li>Spring<ul><li>Spring MVC</li><li>Spring Boot</li><li>Spring Cloud</li></ul></li><li>Hibernate</li><li>Mybatis</li><li>中间件<ul><li>RabbitMQ</li><li>Kafka</li><li>Zookeeper</li></ul></li><li>数据<ul><li>Mysql</li><li>Redis</li></ul></li><li>JVM</li></ul><h2 id="基础模块"><a href="#基础模块" class="headerlink" title="基础模块"></a>基础模块</h2><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><h4 id="1-JDK和JRE有什么区别"><a href="#1-JDK和JRE有什么区别" class="headerlink" title="1.JDK和JRE有什么区别"></a>1.JDK和JRE有什么区别</h4><ul><li>JDK: Java Development Kit的简称，Java开发工具包，提供了Java的开发环境和运行环境。</li><li>JRE：Java Runtime Environment的简称，Java运行环境，为Java的运行提供了所需环境。</li></ul><p>具体分析来说，【JDK其实包含了JRE，同时还包含了编译Java源码的编译器Javac，还包含了很多Java程序调试和分析的工具。】<br>简单来说，如果你需要运行Java程序，只需要安装JRE就可以了；如果你需要编写Java程序，那么需要安装JDK。  </p><h4 id="2-和equals的区别是什么"><a href="#2-和equals的区别是什么" class="headerlink" title="2.==和equals的区别是什么"></a>2.==和equals的区别是什么</h4><h5 id="解读"><a href="#解读" class="headerlink" title="==解读"></a>==解读</h5><p>对于【基本类型】和【引用类型】，==的作用效果是不同的，如下所示：  </p><ul><li>基本类型：比较的是值是否相同；</li><li>引用类型：比较的是引用是否相同；</li></ul><p>代码示例：  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String x=<span class="string">"string"</span>;</span><br><span class="line">String y=<span class="string">"string"</span>;</span><br><span class="line"></span><br><span class="line">String z=<span class="keyword">new</span> <span class="constructor">String(<span class="string">"string"</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(x==y);<span class="comment">//true</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(x==z);<span class="comment">//false</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(x.equals(y));<span class="comment">//true</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(x.equals(z));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>代码解读：<br>因为x和y指向的是同一个引用，所以==也是true；<br>而new String()方法则是重写开辟了内存空间，所以==结果为false，而equals比较的一直是值，所以结果都为true。  </p><h5 id="equals解读"><a href="#equals解读" class="headerlink" title="equals解读"></a>equals解读</h5><p>equals本质上就是==，只不过String和Integer等重写了equals方法，把它变成了值比较。  </p><p>看下面的代码就明白了。  </p><p>首先来看默认情况下equals比较一个有相同值的对象，代码如下：  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>&#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(<span class="keyword">String</span> name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Cat c1=<span class="keyword">new</span> Cat(<span class="string">"王磊"</span>);</span><br><span class="line">  Cat c2=<span class="keyword">new</span> Cat(<span class="string">"王磊"</span>);</span><br><span class="line">  System.out.<span class="built_in">println</span>(c1.equals(c2));<span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果出乎我们的意料，竟然是false? 这是怎么回事，看了equals源码就知道了，源码如下：  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">this</span>==obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来equals本质上就是==  </p><p>那么问题来了，两个相同值的String对象，为什么返回的是true？代码如下:  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> s1=<span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"老王"</span>);</span><br><span class="line"><span class="keyword">String</span> s2=<span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"老王"</span>);</span><br><span class="line">System.out.<span class="built_in">println</span>(s1.equals(s2));</span><br></pre></td></tr></table></figure><p>同样的，当我们进入String的equals方法，找到了答案，代码如下：  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="type">boolean</span> equals(<span class="keyword">Object</span> anObject)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(this==anObject)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(anObject instanceOf String)&#123;</span><br><span class="line">      String anotherString=(String)anObject;</span><br><span class="line">      <span class="type">int</span> n=<span class="keyword">value</span>.length;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(n==anotherString.<span class="keyword">value</span>.length)&#123;</span><br><span class="line">          <span class="type">char</span> v1[]=<span class="keyword">value</span>;</span><br><span class="line">          <span class="type">char</span> v2[]=anotherString.<span class="keyword">value</span>;</span><br><span class="line">          <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">          <span class="keyword">while</span>(n<span class="comment">-- !=0)&#123;</span></span><br><span class="line">            <span class="keyword">if</span>(v1[i] != v2[i])&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来是String重写了Object的equals方法，把引用比较改成了值比较。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>==对于基本类型来说是值比较；<br>==对于引用类型来说是比较的引用；<br>而equals默认情况下是引用比较，只是很多类重写了equals方法，比如String、Integer等把他变成了值比较，所以一般情况下equals比较的是值是否相等。  </p><h4 id="3-两个对象的hashCode-相同，则equals-也一定为true，对吗"><a href="#3-两个对象的hashCode-相同，则equals-也一定为true，对吗" class="headerlink" title="3.两个对象的hashCode()相同，则equals()也一定为true，对吗"></a>3.两个对象的hashCode()相同，则equals()也一定为true，对吗</h4><p>不对，两个对象的hashCode()相同，equals()不一定true  </p><p>代码示例：  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str1=<span class="string">"通话"</span>;</span><br><span class="line">String str2=<span class="string">"重地"</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println( <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>format(<span class="string">"str1: %d | str2: %d"</span>, str1.hash<span class="constructor">Code()</span>, str2.hash<span class="constructor">Code()</span> ) );</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.equals(str2));</span><br></pre></td></tr></table></figure><p>执行的结果：<br>str1: 1179395 | str2: 1179395<br>false  </p><p>代码解读：很显然”通话”和”重地”的hashCode()相同,然而equals()则为false；<br>因为在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。  </p><h4 id="4-final在Java中有什么作用"><a href="#4-final在Java中有什么作用" class="headerlink" title="4.final在Java中有什么作用"></a>4.final在Java中有什么作用</h4><ul><li>final修饰的类叫做最终类，该类不能被继承</li><li>final修饰的方法不能被重写</li><li>final修饰的变量叫做常量，常量必须初始化，初始化之后值就不能被修改</li></ul><h4 id="5-Java中的Math-round-1-5-等于多少"><a href="#5-Java中的Math-round-1-5-等于多少" class="headerlink" title="5.Java中的Math.round(-1.5)等于多少"></a>5.Java中的Math.round(-1.5)等于多少</h4><p>等于-1。</p><h4 id="6-String属于基础的数据类型吗"><a href="#6-String属于基础的数据类型吗" class="headerlink" title="6.String属于基础的数据类型吗"></a>6.String属于基础的数据类型吗</h4><p>String不属于基础的数据类型；<br>基础类型有8种：byte、short、char、int、long、float、double、boolean;<br>而String属于对象。</p><h4 id="7-Java-中操作字符串的类都有哪些类？他们之间有什么区别"><a href="#7-Java-中操作字符串的类都有哪些类？他们之间有什么区别" class="headerlink" title="7.Java 中操作字符串的类都有哪些类？他们之间有什么区别"></a>7.Java 中操作字符串的类都有哪些类？他们之间有什么区别</h4><p>操作字符串的类有：String、StringBuffer、StringBuilder  </p><p>String和StringBuffer、StringBuilder的区别在于：  </p><p>String声明的是不可变的对象，每次操作都会生成新的String对象，然后将指针指向新的String对象；<br>而StringBuffer、StringBuilder可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用String。  </p><p>StringBuffer和StringBuilder最大的区别在于，StringBuffer是线程安全的，而StringBuilder是非线程安全的。<br>但是StringBuilder的性能却高于StringBuffer，所以单线程环境推荐使用StringBuilder，多线程环境下推荐使用StringBuffer。</p><h4 id="8-String-str-”i”与String-str-new-String-“i”-一样吗"><a href="#8-String-str-”i”与String-str-new-String-“i”-一样吗" class="headerlink" title="8.String str=”i”与String str=new String(“i”)一样吗"></a>8.String str=”i”与String str=new String(“i”)一样吗</h4><p>不一样，因为内存的分配方式不一样。<br>String str=”i”的方式，Java虚拟机会将其分配到常量池当中；而String str=new String(“i”)则会被分配到堆内存中。</p><h4 id="9-如何将字符串反装"><a href="#9-如何将字符串反装" class="headerlink" title="9.如何将字符串反装"></a>9.如何将字符串反装</h4><p>使用StringBuilder 或者StringBuffer的reverse()  </p><p>示例代码：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StringBuffer reverse</span></span><br><span class="line">StringBuffer stringBuffer=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">stringBuffer.<span class="keyword">append</span>(<span class="string">"abcdefg"</span>);</span><br><span class="line">System.out.<span class="keyword">println</span>(stringBuffer.<span class="keyword">reverse</span>());<span class="comment">//gfedcba</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//StringBuilder reverse</span></span><br><span class="line">StringBuilder stringBuilder=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">stringBuilder.<span class="keyword">append</span>(<span class="string">"abcdefg"</span>);</span><br><span class="line">System.out.<span class="keyword">println</span>(stringBuilder.<span class="keyword">reverse</span>());<span class="comment">//gfedcba</span></span><br></pre></td></tr></table></figure><h4 id="10-String类的常用方法都有哪些"><a href="#10-String类的常用方法都有哪些" class="headerlink" title="10.String类的常用方法都有哪些"></a>10.String类的常用方法都有哪些</h4><p>好饿啊</p><ul><li>indexOf(): 返回指定字符的索引</li><li>chatAt(): 返回指定索引出的字符</li><li>replace(): 字符串替换</li><li>trim(): 取出字符串两端空白</li><li>split(): 分隔字符串，返回一个分隔后的字符串数组</li><li>getBytes(): 返回字符串的byte类型数组</li><li>length(): 返回字符串的长度</li><li>toLowerCase(): 将字符串转成小写字母</li><li>toUpperCase(): 将字符串转成大写字母</li><li>substring(): 截取字符串</li><li>equals(): 字符串比较</li></ul><h4 id="11-抽象类必须要有抽象方法吗"><a href="#11-抽象类必须要有抽象方法吗" class="headerlink" title="11.抽象类必须要有抽象方法吗"></a>11.抽象类必须要有抽象方法吗</h4><p>不需要，抽象类不一定非要有抽象方法。  </p><p>示例代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Cat</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"hi~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码，抽象类并没有抽象方法但完全可以正常运行</p><h4 id="12-普通类和抽象类的区别"><a href="#12-普通类和抽象类的区别" class="headerlink" title="12.普通类和抽象类的区别"></a>12.普通类和抽象类的区别</h4><ul><li>普通类不能够包含抽象方法，抽象类可以包含抽象方法；</li><li>抽象类不能够直接实例化，普通类可以直接实例化；</li></ul><h4 id="13-抽象类能够使用final修饰吗"><a href="#13-抽象类能够使用final修饰吗" class="headerlink" title="13.抽象类能够使用final修饰吗"></a>13.抽象类能够使用final修饰吗</h4><p>不能。<br>定义抽象类就是让其他类继承的；<br>如果定义为final该类就不能被继承，这样彼此就会产生矛盾，所以final不能修饰抽象类。<br>编辑器也会提示错误信息。  </p><h4 id="14-接口和抽象类有什么区别"><a href="#14-接口和抽象类有什么区别" class="headerlink" title="14.接口和抽象类有什么区别"></a>14.接口和抽象类有什么区别</h4><ul><li>实现：抽象类的子类使用extend是来进行继承；接口必须使用implements来实现接口。</li><li>构造函数：抽象类可以有构造函数，但是接口不能有。</li><li>main方法：抽象类可以有main方法，并且我们能够运行他；但是接口不能有main方法。</li><li>实现数量：类可以是实现很多个接口；但是只能继承一个抽象类。</li><li>访问修饰符：接口中的方法默认使用public修饰；抽象类中的方法可以使任意访问修饰符。</li></ul><h4 id="15-Java中IO流分几种"><a href="#15-Java中IO流分几种" class="headerlink" title="15.Java中IO流分几种"></a>15.Java中IO流分几种</h4><p>按照功能来分：  </p><ul><li>输入流</li><li>输出流</li></ul><p>按照类型来分：</p><ul><li>字节流</li><li>字符流</li></ul><p>字节流和字符流的区别是： 字节流按照8位传输，以字节为单位，输入输出数据；字符流按照16位传输，以字符为单位；</p><h4 id="16-BIO、NIO、AIO有什么区别"><a href="#16-BIO、NIO、AIO有什么区别" class="headerlink" title="16.BIO、NIO、AIO有什么区别"></a>16.BIO、NIO、AIO有什么区别</h4><ul><li>BIO：Block IO同步阻塞式IO，就是我们平常使用的传统IO，他的特点是模式简单，使用方便，并发处理能力低。</li><li>NIO：New IO同步非阻塞式IO，是传统IO的升级，客户端和服务器通过Channel（通道）通讯，实现了多路复用。</li><li>AIO：Asynchronous IO 是NIO的升级，也叫NIO2，实现了异步非堵塞IO，异步IO的操作基于事件和回调机制。</li></ul><h4 id="17-Files的常用方法都有哪些"><a href="#17-Files的常用方法都有哪些" class="headerlink" title="17.Files的常用方法都有哪些"></a>17.Files的常用方法都有哪些</h4><ul><li>Files.exists(): 检测文件路径是否存在。</li><li>Files.createFile(): 创建文件。</li><li>Files.createDirectory(): 创建文件夹。</li><li>Files.delete(): 删除一个文件或者目录。</li><li>Files.copy(): 复制文件。</li><li>Files.move(): 移动文件。</li><li>Files.size(): 查看文件个数。</li><li>Files.read(): 读取文件。</li><li>Files.write(): 写入文件。</li></ul><h4 id="抽象类与接口的区别2"><a href="#抽象类与接口的区别2" class="headerlink" title="抽象类与接口的区别2"></a>抽象类与接口的区别2</h4><ol><li>修饰符不同。一个是abstract，一个是interface。</li><li>抽象类中可以有不是抽象的方法，接口当中必须全是抽象方法（jdk1.8之前成立）</li><li>接口中变量全部默认是public static final修饰的常量，抽象类当中不限制。</li><li>抽象类继承（extends），接口实现（implements）。</li><li>抽象类中只能被单继承，接口可以有多实现。</li></ol><h3 id="容器（二）"><a href="#容器（二）" class="headerlink" title="容器（二）"></a>容器（二）</h3><h4 id="18-Java容器都有哪些"><a href="#18-Java容器都有哪些" class="headerlink" title="18.Java容器都有哪些"></a>18.Java容器都有哪些</h4><ul><li>Collection<ul><li>List<ul><li>Vector<ul><li>Stack</li></ul></li><li>ArrayList</li><li>LinkedLIst</li></ul></li><li>Queue<ul><li>LinkedList</li><li>PriorityQueue</li></ul></li><li>Set<ul><li>HashSet<ul><li>LinkHashSet</li></ul></li><li>TreeSet</li></ul></li></ul></li><li>Map<ul><li>HashMap</li><li>TreeMap</li></ul></li></ul><h4 id="19-Collection和Collections有什么区别"><a href="#19-Collection和Collections有什么区别" class="headerlink" title="19.Collection和Collections有什么区别"></a>19.Collection和Collections有什么区别</h4><ul><li>java.util.Collection是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操作的通用方法。Collection接口再Java类库当中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方法，其直接继承接口有List与Set。</li><li>Collections则是集合类的一个工具类、帮助类，其中提供了一系列静态方法，用于集合元素进行排序、搜索以及线程安全等各种操作。</li></ul><h4 id="20-List、Set、Map之间的区别是什么"><a href="#20-List、Set、Map之间的区别是什么" class="headerlink" title="20.List、Set、Map之间的区别是什么"></a>20.List、Set、Map之间的区别是什么</h4><table>  <thead>   <tr>      <th>比较</th>      <th>List</th>      <th>Set</th>      <th>Map</th>   </tr>  </thead>  <tbody>    <tr>      <th>继承接口</th>      <td>Collection</td>      <td>Collection</td>      <td></td>    </tr>    <tr>      <th>常见实现类</th>      <td>AbstractList(其常用子类有ArrayList、LinkedList、Vector)</td>      <td>AbstractSet（其常用子类有HashSet、LinkedHashSet、TreeSet）</td>      <td>HashMap、HashTable</td>    </tr>    <tr>      <th>常用方法</th>      <td>add()、remove()、clear()、get()、contains()、size()</td>      <td>add()、remove()、clear()、contains()、size()</td>      <td>put()、get()、remove()、clear()、containsKey()、containsValue()、keySet()、values()、size()</td>    </tr>    <tr>      <th>元素</th>      <td>可重复</td>      <td>不可重复（用equals判断）</td>      <td>不可重复</td>    </tr>    <tr>      <th>顺序</th>      <td>有序</td>      <td>无需（实际上用HashCode决定）</td>      <td></td>    </tr>    <tr>      <th>线程安全</th>      <td>Vector线程安全</td>      <td></td>      <td>HashTable线程安全</td>    </tr>  </tbody></table><h4 id="21-HashMap和HashTable有什么区别"><a href="#21-HashMap和HashTable有什么区别" class="headerlink" title="21.HashMap和HashTable有什么区别"></a>21.HashMap和HashTable有什么区别</h4><ul><li>HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。</li><li>HashTable是同步的，而hashMap是非同步的，效率上要比HashTable要高</li><li>hashMap允许空键值，而HashTable不允许。</li></ul><h4 id="22-如何决定使用HashMap还是TreeMap"><a href="#22-如何决定使用HashMap还是TreeMap" class="headerlink" title="22.如何决定使用HashMap还是TreeMap"></a>22.如何决定使用HashMap还是TreeMap</h4><p>对于在Map中插入、删除和定位这类操作，HashMap是最好的选择。<br>然后，假如你需要对一个有序的key集合进行遍历，TreeMap是更好的选择。<br>基于你的collection的大小，也许向HashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历。</p><h4 id="23-说一下HashMap的实现原理"><a href="#23-说一下HashMap的实现原理" class="headerlink" title="23.说一下HashMap的实现原理"></a>23.说一下HashMap的实现原理</h4><p>HashMap概述： HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是他不保证该顺序恒久不变。  </p><p>HashMap的数据结构：在Java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用）。所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个”链表散列”的数据结构，即数组和链表的结合体。  </p><p>当我们往HashMap当中put元素时，<br>首先根据key的hashCode重新计算Hash值，<br>根据Hash值得到这个元素在数组当中的位置（下标），<br>如果该数组在该位置上已经存放了其他元素，那么在这个位置上的元素将以链表的形式存放，新加入的放在链表头部，最先加入的放在链表尾部，如果数组该位置没有元素，那么就直接将该元素放到该数组的该位置上。  </p><p>需要注意Jdk1.8中对HashMap的实现做了优化，当链表当中的节点数据超过了八个之后，该链表会转为红黑树来提高查询效率，从原来的O(n)到O(logn).</p><h4 id="24-说一下HashSet的实现原理"><a href="#24-说一下HashSet的实现原理" class="headerlink" title="24.说一下HashSet的实现原理"></a>24.说一下HashSet的实现原理</h4><ul><li>HashSet底层由HashMap实现</li><li>HashSet的值存放在HashMap的key上</li><li>HashMap的value统一为PRESENT present</li></ul><h4 id="25-ArrayList和LinkedList的区别是什么"><a href="#25-ArrayList和LinkedList的区别是什么" class="headerlink" title="25.ArrayList和LinkedList的区别是什么"></a>25.ArrayList和LinkedList的区别是什么</h4><p>最明显的区别是ArrayList底层的数据结构是数组，支持随机访问。<br>而LinkedList的底层数据结构是双向循环链表，不支持随机访问。<br>使用下标访问下一个元素，ArrayList的时间复杂度是O(1)，而LinkedList的时间复杂度是O(n)。</p><h4 id="26-如何实现数组和List之间的转换"><a href="#26-如何实现数组和List之间的转换" class="headerlink" title="26.如何实现数组和List之间的转换"></a>26.如何实现数组和List之间的转换</h4><ul><li>List转换成为数组：调用ArrayList的toArray()方法</li><li>数组转换成为List：调用Arrays的asList方法</li></ul><h4 id="27-ArrayList和Vector的区别是什么"><a href="#27-ArrayList和Vector的区别是什么" class="headerlink" title="27.ArrayList和Vector的区别是什么"></a>27.ArrayList和Vector的区别是什么</h4><ul><li>Vector是同步的，而ArrayList不是。然后，如果你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList。</li><li>ArrayList比Vector快，Vector因为有同步，不会过载。</li><li>ArrayList更加通用，因为我们可以使用Collections工具类轻易的获取同步列表和只读列表。</li></ul><h4 id="28-Array和ArrayList有何区别"><a href="#28-Array和ArrayList有何区别" class="headerlink" title="28.Array和ArrayList有何区别"></a>28.Array和ArrayList有何区别</h4><ul><li>Array可以容纳基本类型和对象，而ArrayList只能够容纳对象。</li><li>Array是指定大小后不可变的，而ArrayList是可变的。</li><li>Array没有提供ArrayList那么多功能，比如addAll、removeAll和iterator等。</li></ul><h4 id="29-在Queue中poll-和remove-有什么区别"><a href="#29-在Queue中poll-和remove-有什么区别" class="headerlink" title="29.在Queue中poll()和remove()有什么区别"></a>29.在Queue中poll()和remove()有什么区别</h4><p>poll()和remove()都是从队列当中取出一个元素，但是poll()在获取元素失败的时候会返回空，但是remove()在获取元素失败的时候会抛出异常。</p><h4 id="30-哪些集合类是线程安全的"><a href="#30-哪些集合类是线程安全的" class="headerlink" title="30.哪些集合类是线程安全的"></a>30.哪些集合类是线程安全的</h4><ul><li>Vector：就比ArrayList多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在Web应用中，特别是前端页面，往往效率（页面响应速度）是优先考虑的。</li><li>stack：堆栈类，先进后出。</li><li>HashTable：就比HashMap多了个线程安全。</li><li>enumeration：枚举，相当于迭代器。</li></ul><h4 id="31-迭代器iterator是什么"><a href="#31-迭代器iterator是什么" class="headerlink" title="31.迭代器iterator是什么"></a>31.迭代器iterator是什么</h4><p>迭代器是一种设计模式。<br>它是一个对象。<br>他可以遍历并选择序列中的对象，而开发人员不需要了解序列的底层结构，迭代器通常被称为”轻量级”对象，因为创建它的代价小。</p><h4 id="32-Iterator怎么使用，有什么特点"><a href="#32-Iterator怎么使用，有什么特点" class="headerlink" title="32.Iterator怎么使用，有什么特点"></a>32.Iterator怎么使用，有什么特点</h4><p>Java中的Iterator功能比较简单，并且只能单向移动。  </p><ol><li>使用方法Iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterator接口，被Collection继承。</li><li>使用next()获得序列中的下一个元素。</li><li>使用hasNext()检查序列中是否还有元素。</li><li>使用remove()将迭代器新返回的元素删除。</li></ol><p>iterator是Java迭代器最简单的实现，为List设计的LIstIterator具有更多的功能，他可以从两个方向遍历List，也可以从List中插入和删除元素。</p><h4 id="Iterator和ListIterator有什么区别"><a href="#Iterator和ListIterator有什么区别" class="headerlink" title="Iterator和ListIterator有什么区别"></a>Iterator和ListIterator有什么区别</h4><ul><li>Iterator可用来遍历Set和List集合，但是LIstIterator只能用来遍历List。</li><li>Iterator对集合只能是向前遍历，ListIterator既可以向前遍历也可以向后遍历。</li><li>LIstIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引等。</li></ul><h4 id="HashMap原理"><a href="#HashMap原理" class="headerlink" title="HashMap原理"></a>HashMap原理</h4><p>HashMap的原理：<br>众所周知，HashMap是用来存储Key-Value键值对的一种集合，这个键值对也叫做Entry，而每个Entry都是存储在数组当中，因此这个数组就是HashMap的主干。  </p><p>HashMap数组中的每一个元素的初始值都是NULL。  </p><ol><li>put()方法的实现原理  </li></ol><p>HashMap的一种重要的方法是put()方法，当我们调用put()方法时，比如hashMap.put(“java”,0); 此时要插入一个Key值为”java”的元素，这时首先需要一个Hash函数来确定这个Entry的插入位置，设为index，即index=hash(“java”),假设求出的index值为2，那么这个Entry就会插入到数组索引为2的位置。  </p><p>但是HashMap的长度肯定是有限的，当插入的Entry越来越多时，不同的Key值通过哈希函数算出来的index肯定会有冲突，此时就可以利用链表来解决。  </p><p>其实HashMap数组的每一个元素不只是一个Entry对象，也是一个链表的头结点，每一个Entry对象通过Next指针指向下一个Entry对象，这样，当新的Entry的哈市值与之前的存在冲突时，只需要插入到对应点链表即可。  </p><p>需要注意的是，新来的Entry节点采用的是“头插法”，而不是直接插入在链表的尾部，这时候因为HashMap的发明者认为，新插入的节点被查找出来的可能性更大。  </p><ol start="2"><li>get()方法的实现原理  </li></ol><p>get()方法用来根据key值来查找对应点的value，当调用get方法时，比如hashMap.get(“apple”)，这时同样要对key值做一次Hash映射，算出其对一样的index值，即index=hash(“apple”)。前面说到的可能存在hash冲突，同一个位置可能存在多个Entry，这时就要从对应链表的头结点开始，一个个向下查找，知道找到对应的Key值，这样就获得了索要查找的键值对。例如假设我们要找的Key值是”apple”：  </p><ul><li>第一步，算出key值”apple”的hash值，假设为2.</li><li>第二步，在数组中查找索引为2的位置，此时找到头结点为Entry6,Entry6的key值是banana，不是我们要找的值。</li><li>第三部，查找Entry6的Next节点，这里为Entry1,它的key值为apple,使我们要查找的值，这样就找到了对应的价值对，结束。  </li></ul><p>在jdk1.8之后，hashMap的链表数量如果超过8个，那么就会自动转成红黑树了。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="/2020/03/23/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90%E5%A4%8D%E4%B9%A0%E3%80%91%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/03/23/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90%E5%A4%8D%E4%B9%A0%E3%80%91%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h2><p>Spring是一个开源的Java EE开发框架。<br>Spring框架的核心功能可以应用在任何java应用程序中，但对Java EE平台上的Web应用程序有更好的扩展性。<br>Spring框架的目标是使得Java EE应用程序的开发更加简捷，通过使用POJO为基础的变成模型促进良好的变成风格。  </p><h2 id="Spring有哪些优点"><a href="#Spring有哪些优点" class="headerlink" title="Spring有哪些优点"></a>Spring有哪些优点</h2><ul><li>轻量级： Spring在大小和透明性方面觉得属于轻量级的，基础版本的Spring框架大约只有2MB。</li><li>控制反转（IOC）： SPring使用控制反转技术实现了松耦合。依赖被注入到对象，而不是创建或者寻找依赖对象。</li><li>面向切面编程（AOP）: Spring支持面向切面编程，同时把应用的业务逻辑与系统的服务分离开来。</li><li>容器： Spring包含并管理应用程序对象的配置以及生命周期。</li><li>MVC框架：Spring的web框架是一个设计优良的web MVC框架，很好的取代了一些web框架。</li><li>事务管理： Spring对下至本地业务上至全局业务（JAT）提供了统一的事务管理接口。</li><li>异常处理： Spring提供一个方便的API将特定技术的异常（由JDBC，Hibernate，或者JDO抛出）转化为一致的、Unchecked异常。</li></ul><h2 id="Spring事务实现方式"><a href="#Spring事务实现方式" class="headerlink" title="Spring事务实现方式"></a>Spring事务实现方式</h2><ul><li>编程式事务管理： 这意味着你可以通过编程的方式管理事务，这种方式带来了很大的灵活性，但是很难维护。</li><li>声明式事务管理： 这种方式意味着你可以将事务和业务代码分离。你只需要通过注解或者XML配置管理事务。</li></ul><h2 id="Spring框架的事务管理有哪些优点"><a href="#Spring框架的事务管理有哪些优点" class="headerlink" title="Spring框架的事务管理有哪些优点"></a>Spring框架的事务管理有哪些优点</h2><ul><li>它为不同的事务API（如JTA,JDBC,Hibernate,JPA,和JDO）提供了统一的编程模型。</li><li>它为编程式事务管理提供了一个简单的API而非一系列复杂的事务API（如JTA）</li><li>它支持声明式事务管理。</li><li>它可以和Spring的多种数据访问技术很好的融合。</li></ul><h2 id="Spring事务定义的传播规则"><a href="#Spring事务定义的传播规则" class="headerlink" title="Spring事务定义的传播规则"></a>Spring事务定义的传播规则</h2><ul><li>propagation_required: 支持当前事务，如果当前没有事务，就建一个事务。这是最常见的选择。</li><li>propagation_supports: 支持当前事务，如果当前没有事务，就以非事务方式执行。</li><li>propagation_mandatory: 支持当前事务，如果当前没有事务，就抛出异常。</li><li>propagation_requires_new: 新建事务，如果当前存在事务，把当前事务挂起。</li><li>propagation_not_supported: 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li>propagation_never: 以非事务方式执行，如果当前存在事务，则抛出异常。</li><li>propagation_nested: 如果当前存在事务，则在嵌套式事务内执行。如果当前没有事务，则进行与propagation_required类似的操作，即支持当前事务，如果当前没有事务，就建一个事务。这是最常见的选择。</li></ul><h2 id="Spring事务底层原理"><a href="#Spring事务底层原理" class="headerlink" title="Spring事务底层原理"></a>Spring事务底层原理</h2><h3 id="划分处理单元—-ioc"><a href="#划分处理单元—-ioc" class="headerlink" title="划分处理单元—-ioc"></a>划分处理单元—-ioc</h3><p>由于Spring解决的问题是对【单个数据库】进行【局部事务】处理的。<br>具体的实现首先用Spring的IOC划分了【事务处理单元】。<br>并且将对事务的各种配置放到了ioc容器中。<br>（设置事务管理器，设置事务的传播特性以及隔离机制）。  </p><h3 id="AOP拦截需要进行事务处理的类"><a href="#AOP拦截需要进行事务处理的类" class="headerlink" title="AOP拦截需要进行事务处理的类"></a>AOP拦截需要进行事务处理的类</h3><p>【Spring事务处理模块】是通过【AOP】功能来实现【声明式事务】处理的，<br>具体操作（比如事务实行的配置和读取，事务对象的抽象），用TransactionProxyFactoryBean接口来使用AOP功能，生成proxy代理对象，通过TransactionInterceptor完成对代理方法的拦截，将事务处理的功能编织到拦截的方法中。读取ioc容器事务配置属性，转化为Spring事务处理需要的内部数据结构（TransactionAttributeSourceAdvisor），转化为TransactionAttribute表示的数据对象。</p><h2 id="对事务处理实现（事务的生成、提交、回滚、挂起）"><a href="#对事务处理实现（事务的生成、提交、回滚、挂起）" class="headerlink" title="对事务处理实现（事务的生成、提交、回滚、挂起）"></a>对事务处理实现（事务的生成、提交、回滚、挂起）</h2><p>Spring委托给具体的事务处理器实现。<br>实现了一个抽象和适配。<br>适配的具体事务处理器：DataSource数据源支持、Hibernate数据源事务处理支持、JDO数据源事务处理支持、JPA、JTA数据源事务处理支持。<br>这些支持都是通过设计PlatformTransactionManager、AbstractPlatformTransaction一些列事务处理的支持。<br>为常用数据源支持提供了一系列TransactionManager。</p><ul><li>结合<br>PlatformTransactionManager实现了TransactionInterception接口，让其与TransactionProxyFactoryBean结合起来，形成一个Spring声明式事务处理的设计体系。</li></ul><h2 id="Spring-MVC运行流程"><a href="#Spring-MVC运行流程" class="headerlink" title="Spring MVC运行流程"></a>Spring MVC运行流程</h2><ol><li>第一步：发起请求到前端控制器（DispatcherServlet）</li><li>第二步：前端控制器请求HandlerMapping查找Handler（可以根据XML配置、注解进行查找）</li><li>第三步：处理器映射器HandlerMapping向前端控制器返回Handler</li><li>第四步：前端控制器调用处理器适配器去执行Handler</li><li>第五步：处理器适配器去执行Handler</li><li>第六步：Handler执行完成给适配器返回ModelAndView</li><li>第七步：处理器适配器向前端控制器返回ModelAndView（ModelAndView是SpringMVC框架的一个底层对象，包括Model和View）</li><li>第八步：前端控制器请求视图解析器去进行视图解析（根据逻辑视图名解析成真正的视图（jsp））</li><li>第九步：视图解析器向前端控制器返回View</li><li>前端控制器进行视图渲染（视图渲染将模型数据（在ModelAndView对象中）填充到Request域）</li><li>前端控制器向用户响应结果</li></ol><h2 id="BeanFactory和ApplicationContext有什么区别"><a href="#BeanFactory和ApplicationContext有什么区别" class="headerlink" title="BeanFactory和ApplicationContext有什么区别"></a>BeanFactory和ApplicationContext有什么区别</h2><p>ApplicationContext提供了一种解决文档信息的方法，一种加载文件资源的方式（如图片），他们可以向监听他们的Beans发送消息。<br>另外，容器或者容器中的Beans的操作，这些必须以Bean工厂的编程方式处理的操作可以在应用上下文中以声明的方式处理。<br>应用上下文实现了MessageSource，该接口用于获取本地消息，实际的实现是可选的。  </p><ul><li>相同点：两者都是通过xml配置文件加载Bean，ApplicationContext和BeanFactory相比，提供了更多的扩展功能。</li><li>不同点：BeanFactory是延迟加载，如果Bean的某一个属性没有注入，BeanFactory加载后，直至第一次使用调用getBean方法才会报异常；而ApplicationContext则在初始化自身是检验，这样有利于检查所依赖属性是否注入；通常情况狂下我们选择使用ApplicationContext。</li></ul><h2 id="什么是Spring-Beans"><a href="#什么是Spring-Beans" class="headerlink" title="什么是Spring Beans"></a>什么是Spring Beans</h2><p>Spring Beans是构成Spring应用核心的Java对象。<br>这些对象由Spring IOC容器实例化、组装、管理。<br>这些对象通过容器中配置的元数据创建。<br>例如，使用XML文件中的定义的创建。  </p><p>在Spring中创建的beans都是单例的beans。<br>在bean标签中国有一个属性为”singleton”<br>如果设为true,则该bean是单例的；如果设置为false，则该bean是原型bean。<br>Singleton属性默认设置为true。<br>因此，Spring框架中所有的bean都默认是单例bean。  </p><h2 id="说一下Spring中支持的bean作用域"><a href="#说一下Spring中支持的bean作用域" class="headerlink" title="说一下Spring中支持的bean作用域"></a>说一下Spring中支持的bean作用域</h2><p>Spring框架支持如下五种不同的作用域：</p><ul><li><p>singleton: 在Spring IOC容器中仅存在一个Bean实例，Bean以单实例的方式存在。</p></li><li><p>prototype：一个Bean可以定义多个实例。</p></li><li><p>request：每次Http请求都会创建一个新的Bean。该作用域仅适用于WebApplicationContext环境。</p></li><li><p>session：一个Http Session定义一个Bean。该作用于仅适用于WebApplicationContext环境。</p></li><li><p>globalSession：同一个全局Http Session定义一个Bean。该作用于同样仅适用于WebApplicationContext环境。</p></li><li><p>bean默认的scope属性是”singleton”</p></li></ul><h2 id="Spring-的单例实现原理"><a href="#Spring-的单例实现原理" class="headerlink" title="Spring 的单例实现原理"></a>Spring 的单例实现原理</h2><p>Spring框架对单例的支持是采用单例注册表的方式进行实现的，而这个注册表的缓存是HashMap对象，如果配置文件中的配置信息不要求使用单例Spring会采用新建实例的方式返回对象实例。</p><h2 id="解释Spring框架中Bean的生命周期"><a href="#解释Spring框架中Bean的生命周期" class="headerlink" title="解释Spring框架中Bean的生命周期"></a>解释Spring框架中Bean的生命周期</h2><ol><li>容器启动</li><li>实例化Bean对象</li><li>设置对象属性</li><li>调用BeanNameAware的setBeanName()方法</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>In the Supermarket</title>
      <link href="/2020/03/21/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91/lesson3/"/>
      <url>/2020/03/21/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91/lesson3/</url>
      
        <content type="html"><![CDATA[<h2 id="Learn-amp-Talk-I"><a href="#Learn-amp-Talk-I" class="headerlink" title="Learn &amp; Talk I"></a>Learn &amp; Talk I</h2><h3 id="Chapter-1-Shopping"><a href="#Chapter-1-Shopping" class="headerlink" title="Chapter 1 Shopping"></a>Chapter 1 Shopping</h3><h4 id="Lesson-3-In-the-Supermarket"><a href="#Lesson-3-In-the-Supermarket" class="headerlink" title="Lesson 3 In the Supermarket"></a>Lesson 3 In the Supermarket</h4><blockquote><p>at the bottom of the following pages:T1=teaching instructions;T=teacher;S=student</p></blockquote><h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul><li><p>part <big>A</big>. Let’s Learn (12 mins)</p></li><li><p>part <big>B</big>. Let’s Talk (12 mins)</p></li><li><p>part <big>C</big>. Review (1 min)</p></li></ul><blockquote><p>Learning Objectives</p></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">学习目标：</span><br><span class="line"><span class="number">4</span> <span class="built_in">words</span> <span class="keyword">about</span> <span class="string">"supermarket shopping"</span> | <span class="number">4</span>个和<span class="string">"超市购物"</span>相关的单词</span><br><span class="line">Expressions <span class="keyword">for</span> <span class="string">"supermarket"</span> | <span class="string">"超市购物"</span>常用表达</span><br><span class="line">How <span class="keyword">to</span> talk <span class="keyword">about</span> topics related <span class="keyword">to</span> <span class="string">"supermarket shopping"</span> | 谈论和<span class="string">"超市购物"</span>相关的话题</span><br></pre></td></tr></table></figure><h2 id="part-A-Let’s-Learn"><a href="#part-A-Let’s-Learn" class="headerlink" title="part A. Let’s Learn"></a>part A. Let’s Learn</h2><h3 id="Vocabulary-4-mins"><a href="#Vocabulary-4-mins" class="headerlink" title="Vocabulary (4 mins)"></a>Vocabulary (4 mins)</h3><table><thead><tr><th>vocabulary</th><th>means</th><th>sentense</th><th>etc</th><th>phrase</th></tr></thead><tbody><tr><td>toothbrush</td><td>a small brush with a long handle that you use to clean your teeth</td><td>e.g. How much is the <u><strong><em>toothbrush</em></strong></u> .</td><td>toothpaste 牙膏；mouthwash 漱口水</td><td></td></tr><tr><td>promote</td><td>to encourage people to like,buy,use,do,or support something 宣传，促销</td><td>e.g. The saleswoman is <u><strong><em>promoting</em></strong></u> cookies.</td><td>promotion n.促销（often on posters 常做海报标语）</td><td></td></tr><tr><td>include</td><td>to contain something as a part of something else,or to make something part of something else 包括</td><td>e.g. This gift pack(礼包) <u><strong><em>includes</em></strong></u> toothbrushes,toothpaste, and mouthwash.</td><td></td><td></td></tr><tr><td>aisle</td><td>a long,narrow space between the rows of shelves in a large shop （商店货架间的）通道</td><td>e.g. You’ll find toothbrushes in the fourth <u><strong><em>aisle</em></strong></u> .</td><td></td><td></td></tr></tbody></table><h3 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h3><h4 id="Role-play-the-dialog-with-your-teacher-twice-and-learn-the-highlighted-expressions-by-heart-和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达"><a href="#Role-play-the-dialog-with-your-teacher-twice-and-learn-the-highlighted-expressions-by-heart-和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达" class="headerlink" title="Role-play the dialog with your teacher twice,and learn the highlighted expressions by heart.和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达"></a>Role-play the dialog with your teacher twice,and learn the highlighted expressions by heart.和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达</h4><h5 id="（Mark-is-choosing-a-gift-for-His-girlfriend-in-a-jewelry-珠宝-store-）"><a href="#（Mark-is-choosing-a-gift-for-His-girlfriend-in-a-jewelry-珠宝-store-）" class="headerlink" title="（Mark is choosing a gift for His girlfriend in a jewelry(珠宝) store.）"></a>（Mark is choosing a gift for His girlfriend in a jewelry(珠宝) store.）</h5><ul><li><strong><em>Salesman:</em></strong> Have a look at these toothbrushes.They are being promoted in this gift pack now.</li><li><strong><em>Mark:</em></strong> What’s included in the gift pack ?</li><li><strong><em>Salesman:</em></strong> Toothbrushes,toothpaste,mouthwash and a cup .</li><li><strong><em>Mark:</em></strong> It’s good deal. Where can i find shower gel(沐浴露).</li><li><strong><em>Salesman:</em></strong> It’s in aisle 10.</li></ul><blockquote><p>It’s good deal. 直译：这是笔好交易./意译：这挺划算的.</p></blockquote><h2 id="part-B-Let’s-Talk"><a href="#part-B-Let’s-Talk" class="headerlink" title="part B. Let’s Talk"></a>part B. Let’s Talk</h2><h3 id="Conversation"><a href="#Conversation" class="headerlink" title="Conversation"></a>Conversation</h3><h4 id="Suppose-you’re-choosing-a-gift-in-a-jewelry-store-Use-th-vocabulary-and-expressions-you’ve-learned-in-part-A-to-complete-the-following-conversation-假设你在商店里挑礼物。运用在第一部分学到的词汇和表达将一下情境对话补充完整"><a href="#Suppose-you’re-choosing-a-gift-in-a-jewelry-store-Use-th-vocabulary-and-expressions-you’ve-learned-in-part-A-to-complete-the-following-conversation-假设你在商店里挑礼物。运用在第一部分学到的词汇和表达将一下情境对话补充完整" class="headerlink" title="Suppose you’re choosing a gift in a jewelry store. Use th vocabulary and expressions you’ve learned in part A to complete the following conversation. 假设你在商店里挑礼物。运用在第一部分学到的词汇和表达将一下情境对话补充完整"></a>Suppose you’re choosing a gift in a jewelry store. Use th vocabulary and expressions you’ve learned in part A to complete the following conversation. 假设你在商店里挑礼物。运用在第一部分学到的词汇和表达将一下情境对话补充完整</h4><blockquote><p>Hints<br><strong><em>aisle</em></strong><br><strong><em>It’s good deal</em></strong><br><strong><em>toothbrush</em></strong><br><strong><em>What’s included in the pack?</em></strong><br><strong><em>promote</em></strong></p></blockquote><ul><li><strong><em>A:</em></strong> Excuse me. Where can i find toothbrush ?</li><li><strong><em>B:</em></strong> In aisle 4. Follow me.</li><li><strong><em>A:</em></strong> Thanks.</li><li><strong><em>B:</em></strong> Have a look at this pack. It’s being promote and it is selling well.</li><li><strong><em>A:</em></strong> What’s included in the pack ?</li><li><strong><em>B:</em></strong> Toothbrushes,toothpaste and mouthwash. They’re only 25 yuan in total(合计).</li><li><strong><em>A:</em></strong> It’s good deal.</li></ul><h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><h4 id="Talk-with-your-teacher-about-the-following-question-Refer-to-the-hints-if-necessary-和老师一起讨论一下问题。可以参考方框中的提示。"><a href="#Talk-with-your-teacher-about-the-following-question-Refer-to-the-hints-if-necessary-和老师一起讨论一下问题。可以参考方框中的提示。" class="headerlink" title="Talk with your teacher about the following question. Refer to the hints if necessary.和老师一起讨论一下问题。可以参考方框中的提示。"></a>Talk with your teacher about the following question. Refer to the hints if necessary.和老师一起讨论一下问题。可以参考方框中的提示。</h4><ul><li>1.When are things in the supermarket promoted in your city? Will you by a lot when they’re being promoted? Why?</li></ul><blockquote><p>Hints:<br><strong><em>around hoildays like Christmas,Women’s Day…</em></strong><br><strong><em>will by a lot-&gt;cheap/It’s a good deal…</em></strong><br><strong><em>won’t buy a lot-&gt;waste</em></strong></p></blockquote><blockquote><p>Hints:<br><strong><em>toothbrushes</em></strong><br><strong><em>aisle</em></strong><br><strong><em>promoted</em></strong><br><strong><em>What’s included in the pack</em></strong><br><strong><em>It’s a good deal</em></strong></p></blockquote><ul><li>2.How often do you go to the supermarket? What do you usually buy in the supermarket?</li></ul><blockquote><p>Hints:<br><strong><em>every day/every week/when i need to buy</em></strong><br><strong><em>thins/once in a while(时不时，偶尔)…</em></strong><br><strong><em>bread/fruit/drinks/showr gel…</em></strong></p></blockquote><ul><li>Have you ever bought(buy的过去分词) things in an online supermarket? Do you like it? Why or Why not?</li></ul><blockquote><p>Hints:<br><strong><em>yes-&gt;anytime and anywhere / no need to carry the heavy shopping bags…</em></strong><br><strong><em>no-&gt;wait for days for things to come…</em></strong></p></blockquote><h2 id="part-c-Review"><a href="#part-c-Review" class="headerlink" title="part c. Review"></a>part c. Review</h2><p>In this lesson,you’ve learned</p><ul><li>4 words about “shopping in the supermarket”</li></ul><blockquote><p>toothbrush<br>promote<br>include<br>aisle</p></blockquote><ul><li>commonly used expressions for buying gifts</li></ul><blockquote><p>What’s included in the gift pack?<br>It’s good deal.</p></blockquote><ul><li>how to talk about topics related to “supermarket shopping”</li></ul><h2 id="Further-Study"><a href="#Further-Study" class="headerlink" title="Further Study"></a>Further Study</h2><h3 id="Listen-and-Learn"><a href="#Listen-and-Learn" class="headerlink" title="Listen and Learn"></a>Listen and Learn</h3><blockquote><p>save up to 40% 打六折<br>shopping list 购物清单<br>coupon 优惠券</p></blockquote><ul><li>There are lots of items on sale today.</li><li>That chair is for sale.</li></ul><p>(both highlighted phrases means “sold at a lower price”上述加粗词组均有“打特价”之意)</p><blockquote><p>closing down sale 结业大甩卖</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hello,teacher</span><br><span class="line">ok ,i <span class="keyword">am</span> introducing myself <span class="keyword">to</span> you.</span><br><span class="line"><span class="keyword">first</span>,my chinese name <span class="keyword">is</span> fengshana,i <span class="keyword">am</span> not have englishname,<span class="keyword">so</span>,you can <span class="keyword">call</span> <span class="keyword">me</span> shana.</span><br><span class="line">i <span class="keyword">am</span> twenty yeas old.</span><br></pre></td></tr></table></figure><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">like</span> <span class="built_in">Double</span> Twelve Festival,<span class="keyword">or</span> <span class="built_in">Double</span> Eleven Festival <span class="keyword">on</span> internet Shopping <span class="keyword">by</span> TaoBao apps.<span class="keyword">if</span> i have more money,i will buy a lot <span class="keyword">and</span> useful things <span class="keyword">for</span> <span class="keyword">me</span> <span class="keyword">and</span> my family <span class="keyword">when</span> they<span class="comment">'re being promoted. because something usually is expansive,but,if in the some festivals,these will be cheaper than usually. so, the time ,we are not go to the buy, when  we are going to wait.It's good deal.of course, in generally,if i need go to the trip or go to the outside working,  i will buy something to prepare.</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">when i need <span class="built_in">to</span> buy something,so i will go <span class="built_in">to</span> <span class="keyword">the</span> supermarket. </span><br><span class="line">i will <span class="keyword">with</span> my friend buy some vegetables <span class="keyword">and</span> some  fruits <span class="keyword">in</span> <span class="keyword">the</span> supermarket.</span><br><span class="line">usually, <span class="keyword">in</span> <span class="keyword">the</span> evening,<span class="keyword">at</span> <span class="keyword">the</span> <span class="number">8</span><span class="string">'clock,9'</span>clock. we go <span class="built_in">to</span> <span class="keyword">the</span> supermarket <span class="keyword">for</span> preparing our dinner.but ,today,i am <span class="keyword">not</span> go <span class="built_in">to</span> <span class="keyword">the</span> supermarket.because my friends need <span class="built_in">to</span> working <span class="keyword">in</span> her company. so ,today ,<span class="keyword">in</span> <span class="keyword">the</span> evening, i eat some noodles <span class="keyword">as</span> <span class="keyword">a</span> dinner.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yes, i have. <span class="keyword">and</span> ,yes, i <span class="built_in">do</span>.</span><br><span class="line">because sometime <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">internet</span> shopping,online supermarket,i can compare <span class="keyword">the</span> store A<span class="string">',and store B,and c ,in these stores compare the same goods ,in price.and i think online supermarket'</span>s goods is cheaper than live supermarket. but have <span class="keyword">a</span> shortcoming,<span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">internet</span> shopping will be <span class="built_in">wait</span> <span class="keyword">for</span> days when you buy something <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">internet</span>.sometimes ,<span class="keyword">it</span><span class="string">'s slowly.sometimes,it'</span>s quickly.sure,when i received my something that i bought <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">internet</span>,i am very happy.looks like kids received sweet <span class="keyword">in</span> <span class="keyword">the</span> festival.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六节心态课</title>
      <link href="/2020/03/18/%E3%80%90%E5%BF%83%E6%80%81%E4%BF%AE%E7%82%BC%E3%80%91/%E7%AC%AC%E5%85%AD%E8%8A%82%E8%AF%BE/"/>
      <url>/2020/03/18/%E3%80%90%E5%BF%83%E6%80%81%E4%BF%AE%E7%82%BC%E3%80%91/%E7%AC%AC%E5%85%AD%E8%8A%82%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<p>朋友推荐我看的心态修炼课程：<a href="http://www.gulixueyuan.com/h5/index.html#/course/354" target="_blank" rel="noopener">http://www.gulixueyuan.com/h5/index.html#/course/354</a>   </p><p>第六堂课主题：这个世界上，没人该为你的选择买单  </p><h2 id="选择自己所爱的，爱自己所选择的"><a href="#选择自己所爱的，爱自己所选择的" class="headerlink" title="选择自己所爱的，爱自己所选择的"></a>选择自己所爱的，爱自己所选择的</h2><p>人生中每一个重要的决定都必须自己做，这个世界上没有任何人要为你的选择买单  </p><p>如果你觉得岁月静好，一定是有人为你负重前行。  </p><p>一个人的独立，是从自己选择去做某件事情开始的。不要让别人为你的行为承担风险。自己的事情自己解决否则永远是个长不大的孩子。  </p><p>什么是稳定，稳定的穷着稳定的累着稳定的看着他人成功  </p><p>真正的稳定不是你在一家公司又饭吃，而是无论走到哪里都有饭吃。</p><p>父母不远游，游必有方。自己要想清楚了，不要过于顾虑别人的看法。<br>这是自己的人生，不应该活在别人的嘴里。  </p><h2 id="人性一个最特别的弱点：在意别人如何看待自己"><a href="#人性一个最特别的弱点：在意别人如何看待自己" class="headerlink" title="人性一个最特别的弱点：在意别人如何看待自己"></a>人性一个最特别的弱点：在意别人如何看待自己</h2><p>父母不应该为自己的人生买单。<br>根据自己的想法去做决定。<br>什么是孝：</p><ol><li>第一个阶段:不要再为自己担心了,自己做决定</li><li>第二阶段：我是你的骄傲吗，选择自己所爱的，清楚自己想要的是什么，得努力以后失败才不可耻</li></ol><h2 id="当自己所选了自己的选择，就要肩负起相应的责任"><a href="#当自己所选了自己的选择，就要肩负起相应的责任" class="headerlink" title="当自己所选了自己的选择，就要肩负起相应的责任"></a>当自己所选了自己的选择，就要肩负起相应的责任</h2><p>满足感会一步步吞噬自己的焦虑感。时间一长就会为这种满足感辩护  </p><h2 id="走好选择的路，别选择好走的路"><a href="#走好选择的路，别选择好走的路" class="headerlink" title="走好选择的路，别选择好走的路"></a>走好选择的路，别选择好走的路</h2><h2 id="工作以后跟父母报喜不报忧"><a href="#工作以后跟父母报喜不报忧" class="headerlink" title="工作以后跟父母报喜不报忧"></a>工作以后跟父母报喜不报忧</h2><p>做一个认真起来连自己都害怕的人  </p><p>只有披荆斩棘这一条路，值得赞美的是处理困难的能力以及处理之后获得的幸福  </p><p>吃苦本身不值得赞美，什么年纪就应该做什么样的事情  </p><p>越疼越要不动声色，越苦越要保持沉默  </p><h2 id="成年人的世界里，一切都是自作自受"><a href="#成年人的世界里，一切都是自作自受" class="headerlink" title="成年人的世界里，一切都是自作自受"></a>成年人的世界里，一切都是自作自受</h2><p>选择自己所爱的，爱自己所选择的。越是重大决定越要自己选，任何人帮自己选了都会不甘心。  </p><h2 id="选择的基本原则"><a href="#选择的基本原则" class="headerlink" title="选择的基本原则"></a>选择的基本原则</h2><p>学会接受不完美</p><ul><li>两利相权取其重</li><li>两害相权取其轻</li></ul><p>选择就是权衡利害，取舍之道，没有完美的选择，不可鱼与熊掌兼得</p><p>张爱玲：娶了红玫瑰，久而久之，红的变成了墙上的一抹蚊子血。白的还是窗前明月光。娶了白玫瑰，白的便是衣服上的一粒饭粘子，红的却是心头上的一个朱砂痣。<br>所以得不到的永远是最好的。<br>将硬币抛上空中的那一刻，你会突然发现希望自己的选择是哪一个</p><h2 id="选择永远比努力更重要"><a href="#选择永远比努力更重要" class="headerlink" title="选择永远比努力更重要"></a>选择永远比努力更重要</h2><p>真正决定我们的人生的，第一是我们的选择，第二才是我们的能力和努力。</p>]]></content>
      
      
      <categories>
          
          <category> 心态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心态课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二节心态课</title>
      <link href="/2020/03/18/%E3%80%90%E5%BF%83%E6%80%81%E4%BF%AE%E7%82%BC%E3%80%91/%E7%AC%AC%E4%BA%8C%E8%8A%82%E8%AF%BE/"/>
      <url>/2020/03/18/%E3%80%90%E5%BF%83%E6%80%81%E4%BF%AE%E7%82%BC%E3%80%91/%E7%AC%AC%E4%BA%8C%E8%8A%82%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<p>朋友推荐我看的心态修炼课程：<a href="http://www.gulixueyuan.com/h5/index.html#/course/354" target="_blank" rel="noopener">http://www.gulixueyuan.com/h5/index.html#/course/354</a>   </p><p>第二堂课主题：别让你的情绪，变成你的性格缺陷  </p><p>不打招呼不说话，情绪写在脸上的人不能委以重任<br>田乐好像都跟我说过<br>先处理心情，再处理事情  </p><p>在职场掉眼泪能接受吗？<br>其实哪儿都不相信眼泪  </p><p>老板不会惯着你<br>所有的善良都需要有人买单的<br>老板为自己的错误买单<br>任何时候别干哭鼻子的事情，有泪不轻弹，有多少委屈自己打碎了牙吞进去<br>像个爷们<br>错了就要人，挨打就要立正，有问题就要解决问题，都是成年人，职业一点，一个人要是当地隐藏自己的情绪<br>高兴的时候就笑，不高兴的时候假装什么也没有发生<br>不要在人前表演你的情绪  </p><h2 id="第一点-你不应该是个煤气罐"><a href="#第一点-你不应该是个煤气罐" class="headerlink" title="第一点 你不应该是个煤气罐"></a>第一点 你不应该是个煤气罐</h2><p>嗓门大不代表你有道理，脸通红不代表可以主持正义<br>就是再好也有人挑刺<br>为什么要活在别人的评价里<br>别人只会关心你有用还是没用<br>从为人处世上来说，别做煤气罐一点就炸了  </p><p>要用体面的方式表达你的情绪，否则你的情绪会被视作性格的缺陷<br>可以表达愤怒，而不是愤怒的表达，这二者区别很大。<br>吵架只会让心情更差，打架只会让事情变糟<br>已解决问题为目的，发脾气是本能，控制脾气是本领  </p><p>永远不要让你的脾气比你的本事还大  </p><p>冷静下来问自己三个问题：</p><ol><li>这是别人的错吗？</li></ol><p>很多时候并不是别人的问题，而是误会或者是我们对别人有误解或者偏见，所以闲谈莫论人非，静坐常思己过，先从自己身上找找问题<br>的确是的，有很多的时候都是我自己的错误  </p><ol start="2"><li>这个事情值得生气吗</li></ol><p>田乐就跟我说过，你至于为了这么一件小事跟我吵？<br>其实的确不值得。<br>但是我还是吵了。<br>确实，我的确是一个小肚鸡肠的人。<br>俗话说宰相肚里能撑船，但是要明白，他不是当了宰相肚里才能撑船，一定是他平时肚里就能撑船，所以他才当了宰相  </p><ol start="3"><li>生气能解决问题吗？</li></ol><p>越是有本事的人，脾气越好。<br>是的。<br>我脾气就不好。<br>因为明白发脾气无法解决任何问题。<br>解决问题唯一的方法就是面对它，然后冷静的把这个问题给解决掉。  </p><p>没那么多需要生气的事情。  </p><h2 id="第二点：你也不应该还是个祥林嫂"><a href="#第二点：你也不应该还是个祥林嫂" class="headerlink" title="第二点：你也不应该还是个祥林嫂"></a>第二点：你也不应该还是个祥林嫂</h2><p>碰到一点压力，就把自己变成不堪重负的样子，碰到一点不确定性，就把前途描摹成前途无光  </p><p>不要做个怨妇  </p><p>这个世界上最无能的就是怨妇。<br>挫折失败经历的太少了。你才会觉得鸡毛蒜皮都是烦恼。<br>抱怨只会让别人觉得你委屈，可怜，但无助于解决任何问题<br>牢骚太盛防肠断，风物长宜放眼量<br>已经发生的事情，埋怨一点用也没有，成年人，我已经是个成年人了  </p><p>其实在生活当中，让你不堪重负的不是压力，而是你承受压力的方式<br>你曾在什么样的公司工作，你就是什么样的人<br>说过去的公司不好那只是证明你的无能<br>的确，我挺无能的  </p><h2 id="第三点：没有本事就不要表演真性情"><a href="#第三点：没有本事就不要表演真性情" class="headerlink" title="第三点：没有本事就不要表演真性情"></a>第三点：没有本事就不要表演真性情</h2><p>只有玻璃心的员工，所以别那么多怀才不遇的抱怨。<br>我觉得这就是在说我呗。<br>说明你的能力还撑不起你的雄心。<br>没有收拾残局的能力，就不要放纵你善变的情绪。<br>在你成为强者之前，所有的委屈都必须吞咽和妥协。<br>因为没有人会在乎弱者的眼泪。<br>成年的世界里，微笑只是一个表情，对讨厌的人或者事情露出你的微笑，使我们必须要学会的恶心<br>要想人前显贵必须背后受罪<br>能忍多大的事情就能成多大的事情<br>永远不应该挑战领导的权威<br>鸡汤：使我们痛苦者让我们强大，没本事的时候身边的坏人特别多，就会受委屈<br>等有一天强大了，所有人都是好人，和颜悦色<br>表达厌恶最好的方式不是争吵，而是要努力的奋斗。  </p>]]></content>
      
      
      <categories>
          
          <category> 心态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心态课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一节心态课</title>
      <link href="/2020/03/18/%E3%80%90%E5%BF%83%E6%80%81%E4%BF%AE%E7%82%BC%E3%80%91/%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE/"/>
      <url>/2020/03/18/%E3%80%90%E5%BF%83%E6%80%81%E4%BF%AE%E7%82%BC%E3%80%91/%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<p>朋友推荐我看的心态修炼课程：<a href="http://www.gulixueyuan.com/h5/index.html#/course/354" target="_blank" rel="noopener">http://www.gulixueyuan.com/h5/index.html#/course/354</a>  </p><p>第一堂课主题：基于评价体系的自我认知术  </p><p>飞机的发动机，内因</p><p>心态很重要  </p><p>你做任何事情最后的结果，都由你做这些事情时，所抱持的心态所决定  </p><p>拼了命-试试看：不必拼尽全力  </p><p>你的心态：从你的声音里能听见，从你的举止里能看见，从你的身上能感受到  </p><p>自我认知实验<br>写出自己的五个优点和五个缺点  </p><p>五个优点  </p><ul><li>别人觉得我很努力  </li><li>别人觉得我字写的好看  </li><li>别人觉得我拍照拍的好看  </li><li>找不到自己的优点算优点吗</li><li>爱整洁  </li></ul><p>发现的不多，好像也没有什么优点  </p><p>五个缺点  </p><ul><li>懒</li><li>自私  </li><li>不上进  </li><li>心态不好  </li><li>不诚信，答应别人的事情没做到  </li><li>自我约束不够，自制力不够强  </li><li>情商低，智商低  </li><li>得过且过  </li></ul><p>第二个实验 了解一下别人对你的评价<br>找你最好的朋友，让他写下看到你的人或听到你的名字时，最先想到的形容词  </p><p>不用找了，我觉得第一个词肯定是傻  </p><p>「ChoiMinki：单纯 努力 勤奋」</p><hr><p>「ChoiMinki：good  心态还不错」</p><hr><p>「David：美」</p><hr><p>「ChoiMinki：@Fsn   还有缺点哦  一根筋」</p><hr><p>「七七：大概就是上面那个吧」 最好的朋友</p><hr><p>这个实验结果非常具有参考价值  </p><p>自我认知和别人对自己的评价几乎一致是相当有难度的，因为人容易高估自己<br>自己看自己永远是上帝视角<br>第一个是发现问题<br>第二个是解决问题<br>第三个复杂点的实验<br>招聘企业最在意的员工的职业素养  </p><p>举例： 1. 你够勤奋吗 - 答：不够  3分 够 7分</p><ol><li>你有目标吗？ - 答：好像是没有的 3分    目标能让你坚持</li><li>你够勤奋吗？ - 答：不够努力 3分  勤奋是高效利用时间</li><li>你持之以恒吗？ - 答：应该没有 3分 做任何事要坚持到底，哪怕是一个坏结果，至少证明你人生有一条路走不通，这不是坏事  </li><li>你安排有序吗 - 答：没有 3分 东搞搞西搞搞，时间都被浪费掉了  </li><li>你有创造性吗 - 答:   想方设法解决问题的能力，我会百度搜索这个够不够？ 问老师问同学问朋友这些我很少会问  4分吧那就</li><li>你精力集中吗 - 答： 现在挺集中的  7分  </li><li>你正直吗？ - 答： 就是你是否有正常和正确的心态，我没有 3分 不能一边抱怨一边不停的努力，让在这个不公平的社会里，站在对自己有利的位置。一边抱怨一边懒得要死这样就不好，我应该是正直的。7分   </li><li>你乐观吗？ - 答: 一种乐观，想尽办法解决处理问题 ，一种悲观，为什么倒霉的总是我，总想着该抱怨谁 我好像也没有抱怨谁，就是挺抱怨自己的。4分吧  </li><li>你愿与人合作吗？ - 答：我可能额，愿意吧。就是共赢的一种吧，那我还挺乐意的，我就是担心别人不愿意。  7分</li><li>你愿接受他人的建议吗？ - 答：这个问题，首先对待他人的建议得理性的去想这个建议对我是好是坏，做出客观的判断，这个建议是否合理。我倒是挺愿意接受别人的建议，但是我担心我改不过来呗。3分吧。别人给我建议的时候，我首先会像个刺猬一样把刺竖起来，但是我仔细想过之后，我会承认这个是我的错误，是我没有处理好，会坦白的。因为一开始我也不知道是怎么错了。后来仔细想过之后发现的确是自己的错，还是去主动承担这个错误比较好。我觉得我还是不咋地这方面。  </li></ol><p>总分：3<em>8）+2+2</em>7）=24+2+14=40<br>60——80 心态不错<br>20——30 说明你未来可以进步的空间还是挺大的。  </p><p>判断自己的心态偏积极还是消极，建议每年做一次<br>一个人心态积极还是消极，看一个生活中的常见问题，怎么回答即可<br>我有一个好消息还是坏消息，- 答： 先听坏消息，再听好消息<br>如果总是先听好消息，可能偏积极，如果总是先听坏消息，可能偏消极  </p>]]></content>
      
      
      <categories>
          
          <category> 心态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心态课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第七节心态课</title>
      <link href="/2020/03/18/%E3%80%90%E5%BF%83%E6%80%81%E4%BF%AE%E7%82%BC%E3%80%91/%E7%AC%AC%E4%B8%83%E8%8A%82%E8%AF%BE/"/>
      <url>/2020/03/18/%E3%80%90%E5%BF%83%E6%80%81%E4%BF%AE%E7%82%BC%E3%80%91/%E7%AC%AC%E4%B8%83%E8%8A%82%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<p>朋友推荐我看的心态修炼课程：<a href="http://www.gulixueyuan.com/h5/index.html#/course/354" target="_blank" rel="noopener">http://www.gulixueyuan.com/h5/index.html#/course/354</a>   </p><p>第七堂课主题：职场最糟糕的两种心态：自我和自私  </p><p>警惕： 我以为和我觉得<br>完全从自身出发，想当然的思考问题，不经确认就行动了。<br>以自我为中心不顾及别人的想法。<br>做自己这是一种借口。当做任性的挡箭牌。<br>太多个性十足的背后多站着自私的影子。<br>自私是人的天性，但是得有个度。</p><p>自我和自私是两种最糟糕的负面心态。</p><h2 id="什么是自我：别人的问题与我无关"><a href="#什么是自我：别人的问题与我无关" class="headerlink" title="什么是自我：别人的问题与我无关"></a>什么是自我：别人的问题与我无关</h2><p>所以不要妄想别人与自己感同身受。<br>人的喜怒哀乐都是执着于自己的得失<br>做人不能太过自我。<br>老话：己所不欲勿施于人</p><p>先做好自己不要给别人带来麻烦。</p><h2 id="所谓不自我，就是换位思考；最深层的本性，就是渴望得到别人的重视"><a href="#所谓不自我，就是换位思考；最深层的本性，就是渴望得到别人的重视" class="headerlink" title="所谓不自我，就是换位思考；最深层的本性，就是渴望得到别人的重视"></a>所谓不自我，就是换位思考；最深层的本性，就是渴望得到别人的重视</h2><h2 id="今天你不帮助别人，明天一定不会有人帮你"><a href="#今天你不帮助别人，明天一定不会有人帮你" class="headerlink" title="今天你不帮助别人，明天一定不会有人帮你"></a>今天你不帮助别人，明天一定不会有人帮你</h2><p>工作中交不到真正的朋友</p><h2 id="你要先把别人当朋友，别人才可能把你当朋友"><a href="#你要先把别人当朋友，别人才可能把你当朋友" class="headerlink" title="你要先把别人当朋友，别人才可能把你当朋友"></a>你要先把别人当朋友，别人才可能把你当朋友</h2><p>为人：以诚待人<br>处事：更够帮别人一把就帮，投桃报李</p><h2 id="什么是自私：我的利益比什么都重要"><a href="#什么是自私：我的利益比什么都重要" class="headerlink" title="什么是自私：我的利益比什么都重要"></a>什么是自私：我的利益比什么都重要</h2><p>有什么职业规划：能不能随着公司共同成长  </p><h2 id="别人帮了你，你会心存感激；你帮了别人，他会想要报答你"><a href="#别人帮了你，你会心存感激；你帮了别人，他会想要报答你" class="headerlink" title="别人帮了你，你会心存感激；你帮了别人，他会想要报答你"></a>别人帮了你，你会心存感激；你帮了别人，他会想要报答你</h2><p>绝大多数付出都会得到回报，回报的时间长短不同<br>但是不付出就一定没有回报。也不是付出了马上就会得到回报的。<br>春天播种还要秋天收获呢  </p><h2 id="你越是自私，反而得到的越少；占得全是小便宜，吃的全是大亏"><a href="#你越是自私，反而得到的越少；占得全是小便宜，吃的全是大亏" class="headerlink" title="你越是自私，反而得到的越少；占得全是小便宜，吃的全是大亏"></a>你越是自私，反而得到的越少；占得全是小便宜，吃的全是大亏</h2><h2 id="不要太自私"><a href="#不要太自私" class="headerlink" title="不要太自私"></a>不要太自私</h2><p>人从来都不只是为自己而活着，是为自己以及自己所热爱的人活着</p><p>记恨多于感恩，多付出<br>不自我就是换位思考多替别人着想；不自私就是乐于付出，付出才会有收获。</p><p>总结：</p><ul><li>第一讲：心态认知，别人的评价…自我认知</li><li>……..</li></ul><h2 id="如果自己是蚂蚁心态，那么再小的石头都是障碍；如果你是雄鹰心态，再高的山峰也敢尝试"><a href="#如果自己是蚂蚁心态，那么再小的石头都是障碍；如果你是雄鹰心态，再高的山峰也敢尝试" class="headerlink" title="如果自己是蚂蚁心态，那么再小的石头都是障碍；如果你是雄鹰心态，再高的山峰也敢尝试"></a>如果自己是蚂蚁心态，那么再小的石头都是障碍；如果你是雄鹰心态，再高的山峰也敢尝试</h2><p>心小了，所有的小事情就大了<br>心大了，所有的大事情就都小了  </p>]]></content>
      
      
      <categories>
          
          <category> 心态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心态课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三节心态课</title>
      <link href="/2020/03/18/%E3%80%90%E5%BF%83%E6%80%81%E4%BF%AE%E7%82%BC%E3%80%91/%E7%AC%AC%E4%B8%89%E8%8A%82%E8%AF%BE/"/>
      <url>/2020/03/18/%E3%80%90%E5%BF%83%E6%80%81%E4%BF%AE%E7%82%BC%E3%80%91/%E7%AC%AC%E4%B8%89%E8%8A%82%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<p>朋友推荐我看的心态修炼课程：<a href="http://www.gulixueyuan.com/h5/index.html#/course/354" target="_blank" rel="noopener">http://www.gulixueyuan.com/h5/index.html#/course/354</a>   </p><p>第三堂课主题：自信都没有，你的世界怎么可能好  </p><p>面试逻辑：你先要有自信，才有资格要求别人对你有信心  </p><p>不自信会害死自己。<br>当前能力，学习能力，未来成长的自信  </p><p>如果对自己的某一个能力没有自信，这个方法叫做，一点一点小的成功会积累你的自信  </p><p>第二个不知道哪里不自信，方法：去做一件一直想做但没敢去做的事情  </p><p>它可以帮你建立自信  </p><h2 id="一点一点小的成功会积累你的自信"><a href="#一点一点小的成功会积累你的自信" class="headerlink" title="一点一点小的成功会积累你的自信"></a>一点一点小的成功会积累你的自信</h2><p>锻炼自己的演说你能力，不要定宏伟的大目标。<br>大目标是用来规划方向的，小目标才可以积累你的自信。<br>定那种短时间就可以实现的，跳一跳脚就可以完成的目标。  </p><p>这个跟我以前看到的并且作为座右铭的一句话很相似，就是，永远只追上离你最近的那个人去追赶他。把最近的那个人当做目标，这个目标不大，但是你慢慢慢慢的就可以超越过很多的人。  </p><p>良性循环。<br>一点一点小的成功积累得越来越多，从量变到质变，就成为了你的自信。  </p><p>改变你可以改变的，接受你不能改变的，你得学会接受你自己。<br>希望实现某个方面的自信，切记，不能是脱离实际的盲目自信。<br>培养自信一定是一个循序渐进的过程<br>如果目标太大耗时太久，那么在执行的过程中，就容易让你懈怠甚至失败。<br>所以定短时间可以完成的小目标，不断获得的成就感可以让你坚持并且自信。<br>建议：对某一个方面不自信可试的方法  </p><h2 id="做一件你一直想做但是没有敢去做的事情"><a href="#做一件你一直想做但是没有敢去做的事情" class="headerlink" title="做一件你一直想做但是没有敢去做的事情"></a>做一件你一直想做但是没有敢去做的事情</h2><p>建立自信最好的方法，做一件不敢去做的事情直到你获得成功  </p><p>挑战一下自己<br>戒酒日志<br>失败经验：有第一次破例就有第二次破例，有第二次就有第三次，是的我非常认同  </p><p>破例只有一次和很多次。<br>持久的坚持才能变成惯性，而超出你自己预期的这种践行，慢慢就会长成根植于你心底的自信  </p><h2 id="当你有足够的自信时。你就能做成很多你原本做不到的事情"><a href="#当你有足够的自信时。你就能做成很多你原本做不到的事情" class="headerlink" title="当你有足够的自信时。你就能做成很多你原本做不到的事情"></a>当你有足够的自信时。你就能做成很多你原本做不到的事情</h2><p>培养自信的目的所在。</p><p>李敖：人生第一大快乐，是做到自己认为自己做不到的事情；人生第二快乐，是做到别人认为自己做不到的事情；  </p><p>疗效持久不易复发  </p><p>自卑不自信一定要试试  </p><h2 id="心理暗示"><a href="#心理暗示" class="headerlink" title="心理暗示"></a>心理暗示</h2><p>谁在自己心里还不觉得自己是个人物，哈哈哈  </p><p>培养自己自信的心理暗示方法，要多给自己一些肯定的暗示，每个人内心深处都有一点自卑，这很正常。<br>这种否定的心态很要命，尤其当你经历挫折的时候，这种自我否定就会不断地累加。  </p><p>觉得自己有天赋，自己就会刻意的去锻炼。<br>就比如说，别人夸我写字好看，我就会主动的去写字，以及拍照啊这些。因为我在这方面受到了表扬。<br>积极性就会慢慢提高了。<br>良性循环，相信什么，就拥有什么，就会越有决心可以去锻炼自己。  </p><p>好孩子都是夸出来的。<br>信则有不信则无。  </p><h2 id="简单的自信培养法"><a href="#简单的自信培养法" class="headerlink" title="简单的自信培养法"></a>简单的自信培养法</h2><p>走路很快，我这个人很重要，我要做的事情很重要，慢慢的对自己建立自信非常有帮助  </p>]]></content>
      
      
      <categories>
          
          <category> 心态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心态课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四节心态课</title>
      <link href="/2020/03/18/%E3%80%90%E5%BF%83%E6%80%81%E4%BF%AE%E7%82%BC%E3%80%91/%E7%AC%AC%E5%9B%9B%E8%8A%82%E8%AF%BE/"/>
      <url>/2020/03/18/%E3%80%90%E5%BF%83%E6%80%81%E4%BF%AE%E7%82%BC%E3%80%91/%E7%AC%AC%E5%9B%9B%E8%8A%82%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<p>朋友推荐我看的心态修炼课程：<a href="http://www.gulixueyuan.com/h5/index.html#/course/354" target="_blank" rel="noopener">http://www.gulixueyuan.com/h5/index.html#/course/354</a>   </p><p>第四堂课主题：很多人，一辈子就靠这两个字活着  </p><p>别人家孩子。  </p><p>你看看人家谁谁谁，你再看看你自己  </p><p>不能让孩子输在起跑线上  </p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><h2 id="比较无处不在，比较学习"><a href="#比较无处不在，比较学习" class="headerlink" title="比较无处不在，比较学习"></a>比较无处不在，比较学习</h2><p>竞争的是全中国人民。  </p><h2 id="建议：把眼光放远一点，你未来的世界远比现在大"><a href="#建议：把眼光放远一点，你未来的世界远比现在大" class="headerlink" title="建议：把眼光放远一点，你未来的世界远比现在大"></a>建议：把眼光放远一点，你未来的世界远比现在大</h2><p>不要在需要埋头种地的时候，走错了别人家的花园，还以为自己收获了整个秋天，这才是最大的作死  </p><p>生活啊，从来都不会心平气和的和你招招手<br>生活只会一脚把你踢翻在地，然后说傻叉以后长点记性  </p><p>所以别因为比较而沾沾自喜或者郁郁寡欢  </p><p>如果要比，就和上个月的自己比，和以前的自己相比较  </p><h2 id="比较无处不在：比对象"><a href="#比较无处不在：比对象" class="headerlink" title="比较无处不在：比对象"></a>比较无处不在：比对象</h2><p>高不成低不就，难在了比较二字  </p><p>比较有时让人惶恐  </p><p>不要在千千万万的比较当中迷失自我。  </p><p>比较有时候就是用拉人下水的形式找认同感  </p><h2 id="比较无处不在：比较收入"><a href="#比较无处不在：比较收入" class="headerlink" title="比较无处不在：比较收入"></a>比较无处不在：比较收入</h2><p>比较是一种局限和狭隘，会让你变得不思进取  </p><p>人和人的差距，根源在于有的人总是喜欢通过比较降低自己的标准，然后躲在舒适圈，享安乐  </p><p>演好自己的角色，别成天盯着别人的剧本看，越是优秀的人越努力，越是富有的人越勤奋。</p><p>越是智慧的人越是谦卑学习。优秀的人总能看到比自己更好的。而平庸的人总能看到比自己更差的。<br>如果总是看到比自己优秀的人，说明自己可能在走上坡路，你总是看到和自己差不多的人，甚至更甚，说明自己正在混日子。<br>如果你是这个房间最聪明的人，那么自己一定是走错了房间。  </p><p>年龄越大越没有人会原谅你的穷。<br>现在的生活也许不是自己想要的，但是觉得是自己自找的。  </p><p>别成天在比较中安逸，生活里，不必要去苛求别人的理解和认同，因为别人也没有这些义务。  </p><h2 id="记住：今天所做的努力，不是为了让别人觉得自己了不起，而是为了能够让你打心里看得起自己。"><a href="#记住：今天所做的努力，不是为了让别人觉得自己了不起，而是为了能够让你打心里看得起自己。" class="headerlink" title="记住：今天所做的努力，不是为了让别人觉得自己了不起，而是为了能够让你打心里看得起自己。"></a>记住：今天所做的努力，不是为了让别人觉得自己了不起，而是为了能够让你打心里看得起自己。</h2><h2 id="最后：比较无处不在：比个屁"><a href="#最后：比较无处不在：比个屁" class="headerlink" title="最后：比较无处不在：比个屁"></a>最后：比较无处不在：比个屁</h2><p>比较让人愤愤不平。<br>世界上最好的安慰，并不是告诉对方一切都会好起来，而是愁眉苦脸的说，你哭个屁啊，你看我比你还惨  </p><h2 id="一起比惨-痛苦减半"><a href="#一起比惨-痛苦减半" class="headerlink" title="一起比惨 痛苦减半"></a>一起比惨 痛苦减半</h2><p>幸福是用来感觉不是用来比较  </p><p>知足是一种生活态度  </p><p>自己喜欢的东西就不要问别人好不好看，你的生活不会因为别人的话就变好了<br>自己的事情和别人没有关系  </p><p>石黑一雄：如果说有一件事是我鼓励你们大家去做的，那就是永远不要随波逐流，要超越我们周围那些低级和颓废的影响  </p>]]></content>
      
      
      <categories>
          
          <category> 心态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心态课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五节心态课</title>
      <link href="/2020/03/18/%E3%80%90%E5%BF%83%E6%80%81%E4%BF%AE%E7%82%BC%E3%80%91/%E7%AC%AC%E4%BA%94%E8%8A%82%E8%AF%BE/"/>
      <url>/2020/03/18/%E3%80%90%E5%BF%83%E6%80%81%E4%BF%AE%E7%82%BC%E3%80%91/%E7%AC%AC%E4%BA%94%E8%8A%82%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<p>朋友推荐我看的心态修炼课程：<a href="http://www.gulixueyuan.com/h5/index.html#/course/354" target="_blank" rel="noopener">http://www.gulixueyuan.com/h5/index.html#/course/354</a>   </p><p>第五堂课主题：面对批评，你应该摆一个正确姿势  </p><p>懒惰是最可怕的事情<br>不牺牲短暂的享乐和安逸，就换不来长久的保障和幸福<br>找借口也很可怕<br>找借口会让自己失去机会<br>不能扛起责任无法付以重任  </p><h2 id="闻过则喜的心态"><a href="#闻过则喜的心态" class="headerlink" title="闻过则喜的心态"></a>闻过则喜的心态</h2><p>一味在意对方的态度和自己的感受就会忘了事情的根本所在<br>错了就是错了，面对批评输球不要输姿势。  </p><h2 id="永远感谢愿意花时间在你身上的人"><a href="#永远感谢愿意花时间在你身上的人" class="headerlink" title="永远感谢愿意花时间在你身上的人"></a>永远感谢愿意花时间在你身上的人</h2><p>他认识你。<br>你们之间有关系别人才会花时间批评你。<br>所以一定是你们之间有联系，尤其在你年轻的时候，多半是你有改进的空间<br>他的批评可以让你变得更好<br>所以错了就认，认了就改正。</p><h2 id="面对批评的心态应该是：把“为什么挨骂的总是我”变成“我能从这件事上学到什么”"><a href="#面对批评的心态应该是：把“为什么挨骂的总是我”变成“我能从这件事上学到什么”" class="headerlink" title="面对批评的心态应该是：把“为什么挨骂的总是我”变成“我能从这件事上学到什么”"></a>面对批评的心态应该是：把“为什么挨骂的总是我”变成“我能从这件事上学到什么”</h2><p>哪怕严厉苛刻，谦虚使人进步骄傲使人落后，有则改之无则加勉。<br>达尔文： 能够生存性下来的物种，并不是那些最强壮的，也不是最聪明的，而是那些对变化做出快速反应的<br>面对批评，正确地姿势应该是沉心静气的想一想我哪儿做错了。我该怎么改。<br>被批评不是坏事。  </p><p>因为在意，所以争吵。  </p><h2 id="如果你觉得批评是一种刁难，一开始就输了。如果你觉得批评是一种雕刻，迟早都会赢的。"><a href="#如果你觉得批评是一种刁难，一开始就输了。如果你觉得批评是一种雕刻，迟早都会赢的。" class="headerlink" title="如果你觉得批评是一种刁难，一开始就输了。如果你觉得批评是一种雕刻，迟早都会赢的。"></a>如果你觉得批评是一种刁难，一开始就输了。如果你觉得批评是一种雕刻，迟早都会赢的。</h2><p>凡事先在自身找原因。<br>不要苛求他人。千万不要遇事着急，冷静思考沉着应对才是面对批评正确的姿势。<br>如果大错酿成，最重要的不是埋怨推诿，而是面对和解决。  </p><h2 id="面对批评的职业心态"><a href="#面对批评的职业心态" class="headerlink" title="面对批评的职业心态"></a>面对批评的职业心态</h2><p>不要埋怨老板苛刻。老板骂你是希望快点成长。</p><h2 id="褒贬是买主，喝彩是闲人"><a href="#褒贬是买主，喝彩是闲人" class="headerlink" title="褒贬是买主，喝彩是闲人"></a>褒贬是买主，喝彩是闲人</h2><p>正是因为有所期待才会批评有所改进。</p><p>普京：没有实力的愤怒毫无意义。<br>道理：好学生做坏事不是没有被老师发现，老师可能只是装作看不见。对自己而言成长才是硬道理。  </p><p>苦练七十二变才能笑对八十一难。  </p><p>高情商：不断改过，默默自强。<br>解释就是掩饰，掩饰就是事实。  </p><p>可怕的不是犯错，而是不知道错在哪里还在盲目争辩。而是知错不改还重复犯错。  </p><p>所以错了第一步是认，第二步是改。  </p><p>第一次是不知道，第二次是不小心，第三次就是故意了。</p><h2 id="示弱有助于解决冲突。先认错后解释"><a href="#示弱有助于解决冲突。先认错后解释" class="headerlink" title="示弱有助于解决冲突。先认错后解释"></a>示弱有助于解决冲突。先认错后解释</h2><h2 id="越是不认错被骂的越多"><a href="#越是不认错被骂的越多" class="headerlink" title="越是不认错被骂的越多"></a>越是不认错被骂的越多</h2><p>骂你是因为你是负责的人。谁负责谁担责。这个是态度问题。  </p><p>狗咬人一口，人不能回咬回去。</p><p>有个好心态，先和自己将锻炼自己情商的时候到了，先克制情绪在解决问题。  </p><p>退一步海阔天空，退三分风平浪静。  </p><p>所以和蛮不讲理的人讲理先示弱表达部分认同，再换位思考给出方案，先礼后兵。  </p><p>发现问题是好事，解决问题是大事，没有问题是坏事。</p><p>成功是来自精准的勤奋而不是平庸的忙碌，批评是成长的机会，闻过则喜。  </p>]]></content>
      
      
      <categories>
          
          <category> 心态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心态课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ简单问答</title>
      <link href="/2020/03/18/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90RABBITMQ%E3%80%91RabbitMQ%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/03/18/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90RABBITMQ%E3%80%91RabbitMQ%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>今天糟老头子问了我一通RabbitMQ，反正我不会就是了….<br>再问就是不会。  </p><p>david: 有空再思考一下发送邮件这个如何可以做的更好。 其实这里很有些门道的（面试如何聊项目，聊什么，就是聊这些细节，以及你是如何处理好这些细节，以此类推）。至少一点发送邮件这里肯定是要做成异步的，也就是邮件发送之后，不应等待它完成处理而应该立即返回，邮件的成功与否不应该是这个业务成功的关键。当然这是个ERP系统满意度可以接受，如果是互联网产品，这样一个接口就因为这个操作会拖累整个接口的访问速度。@Fsn  </p><p>david: 面试如何聊项目，聊什么，就是聊这些细节，以及你是如何处理好这些细节，以此类推 @ChoiMinki 对你也有用  </p><p>me: 那我用多线程或者是rabbitmq对比  </p><p>david: 就多线程就可以  </p><p>david: 说说我为什么说只用线程而不用RM?  </p><p>david: 多线程和RM不是同一个层面的概念，这个要理清楚。  </p><p>david: 多线程和RM不是同一个层面的概念！！！！  </p><p>me: 要不就是大材小用了，要不就是懒得配置  </p><p>me: rabbitmq更多时候用在分布式环境下  </p><p>me: 我们项目的话用多线程够了  </p><p>david: 还有呢？  </p><p>david: 难道分布式才能用RM？  </p><p>me: 那倒不是只有分布式才能用mq，mq有两种模式一种是点对点也就是队列生产者消费者，还有一种就是发布与订阅，mq有可能存在有消息丢失啊堵塞啊这种情况  </p><p>david: 我看你简历中有说使用过Mq，能具体举个你做过的项目中通过Mq解决了什么问题了？  </p><p>me：信666这个项目当中使用了mq，我们业务当中主要是使用了mq的点对点模式，也就是生产者消费者队列这种，我们这个项目当中要用到消息队列的地方很多，比如说交易成功之后有些交易类型会需要分润，这个时候为了不影响正常的交易流程，就会发送分润队列，消费者去完成这个任务，因为分润也占据了一个比较大的模块，模块于模块之间松散耦合，互不干扰，分润流程不会影响到正常的交易流程。用到mq的地方还有消费，代付以及初次注册之后会有90元佣金的产生到该客户相对应的账户当中这个会要使用到mq。以及交易的时候针对不同类型的交易也就是不停的业务场景会有着同步异步处理。比如说支付宝链接支付会要响应一个支付链接正如paypal支付得到支付链接一样这个时候就没有使用mq进行处理，而是直接响应给了客户端。而消费代付这种，并不是需要即时响应给客户端，就是用了mq进行处理  </p><p>david: 前面表达的很好，也是Mq常用的使用场景。 这里“比如说支付宝链接支付会要响应一个支付链接正如paypal支付得到支付链接一样这个时候就没有使用mq进行处理，而是直接响应给了客户端。” 和使用Mq不是很贴切  </p><p>me： 这个没答在点上是吧  </p><p>david: 是。  </p><p>me: 没有符合主题是吧  </p><p>me: 我想想我是想表达啥时候用它啥时候不用他  </p><p>david: 那如果我们有个业务需要发送邮件，如果用Mq做，那么你是怎么设计的，Mq在其中承担什么角色，你能描述一下？  </p><p>david: 「 Fsn: 我想想我是想表达啥时候用它啥时候不用他 」</p><hr><p>比喻不当  </p><p>david: 以上只是个演练， 我不太清楚你们遇到面试官是如何面试的，但是我知道大公司的面试官面试一定会是这样层次追问问题的。  </p><p>me: 我们领赫这个项目有几个地方是需要异步处理发送邮件的，即直发提货等状态更改的情况下，那么可以提供生成一个队列即可，该队列专门用于发送邮件，当业务逻辑需要发送邮件的时候直接推送发邮件的队列上即可，在原来的业务场景当中就不会因为邮件发送不成功或者是sendgrid返回了其他的响应码而做其他处理而影响了原来的业务逻辑导致事务回滚等异常状况的发生，发送队列的话就与原来的主线分开不再影响原来的主线逻辑，从而使得原来的主线逻辑能够正常执行完整，两者互不干扰彼此执行完彼此的业务逻辑处理。在这个业务场景当中，mq承担了两个业务模块当中的一个消息传递的一个媒介。且可能会有多个生产者，且一个消费者就够了。  </p><p>david: 发邮件和你前面提到的，思路是一样的，万变不离其宗  </p><p>david: 还可以深问  </p><p>david: 不，我要为难你，你也样不知道说什么，我是有点顺带你思路  </p><p>me: 好嘞百度了  </p><p>me: 解耦、异步、削峰，解耦针对项目模块与模块之间，异步是具体业务逻辑需要，削峰则针对访问数据库请求数过大，诶诶诶对了我发现多看点源码还是有点好处嘞，参考：<a href="https://www.cnblogs.com/zhuifeng523/p/11579568.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhuifeng523/p/11579568.html</a>  </p><p>me: 引入一个新的内容得考虑下他对这个项目的必要性以及风险性，是不是会对这个项目造成不必要的麻烦。  </p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ实战指南</title>
      <link href="/2020/03/17/%E3%80%90RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%E3%80%91/RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%9701/"/>
      <url>/2020/03/17/%E3%80%90RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%E3%80%91/RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%9701/</url>
      
        <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>《RabbitMQ实战指南》 - 朱忠华  </p><blockquote><p>内容简介</p></blockquote><ul><li>从消息中间件的概念和RabbitMQ的历史切入，阐述RabbitMQ的安装、使用、配置、管理、运维、原理、扩展等方面的细节。</li><li>分为基础、进阶、高级三个部分。</li><li>基础：介绍RabbitMQ的基本安装以及使用方式，RabbitMQ的基本概念，包括生产者、消费者、交换器、队列、绑定等，通过java讲述客户端如何与RabbitMQ建立（关闭）连接，声明（删除）交换器，队列，绑定关系，以及如何发送和消费消息等。</li><li>进阶：RabbitMQ的TTL，死信、延迟队列、优先级队列、RPC、消息持久化、生产端和消费端的消息确认机制等内容。</li><li>中间篇幅主要从RabbitMQ的管理、配置、运维三个角度提供帮助文档以及解决问题的思路。</li><li>高阶：RabbitMQ的存储机制、流控以及镜像队列的原理，深入讲述RabbitMQ的一些实现细节，</li><li>涉及网络分区概念。</li><li>最后讲述的是RabbitMQ的一些扩展内容以及附录，供参考使用。</li></ul><blockquote><p>前言  </p></blockquote><p>略…  </p><blockquote><p>内容大纲</p></blockquote><ul><li>第一章：摘要性介绍，什么是消息中间件、消息中间件的作用以及特点等。引入RabbitMQ对其历史和相关特点做一个简要介绍，最后介绍RabbitMQ的安装以及生产、消费的使用示例。</li><li>第二章：讲述RabbitMQ的入门知识，包括生产者、消费者、队列、交换器、路由键、绑定、连接以及信道等基本术语。还阐述了RabbitMQ与AMQP协议的对应关系。</li><li>第三章：介绍RabbitMQ客户端开发的简单使用，按照一个生命周期对连接、创建、生产、消费以及关闭等几个方面进行宏观的介绍。</li><li>第四章：数据可靠性的一些细节，展示RabbitMQ的集中已具备或衍生的高级特性，包括TTL、死信队列、延迟队列、优先级队列、RPC等。</li><li>第五章：围绕RabbitMQ管理展开，包括多租户、权限、用户、应用和集群管理、服务端状态等方面，并且从侧面讲述rabbitmqctl工具和rabbitmq_management插件的使用。</li><li>第六章：讲述RabbitMQ的配置，通过环境变量、配置文件、运行时参数（和策略）等三种方式来定制化相应的服务。</li><li>第七章：围绕运维层面展开，主要包括集群搭建、日志查看、故障恢复、集群迁移、集群监控等方面。</li><li>第八章：讲述Federation和Shovel这两个插件的使用、细节以及相关原理。区别于第七章中集群的部署方式，Federation和Shovel可以部署在广域网中，为RabbitMQ提供更广泛的应用空间。</li><li>第九章：介绍RabbitMQ相关原理，包括RabbitMQ存储机制、磁盘和内存告罄、流控机制、镜像队列。</li><li>第十章：围绕网络分区进行展开，阐述网络分区意义，如何查看和处理网络分区以及网络分区所带来的的影响。</li><li>第十一章：探讨RabbitMQ的两个扩展内容：消息追踪和负载均衡。消息追踪可以有效定位消息丢失的问题。负载均衡本身属于运维层面，但是负载均衡一般需要借助第三方工具—–HAProxy、LVS等实现。</li></ul><blockquote><p>读者讨论</p></blockquote><p>略…</p><blockquote><p>致谢</p></blockquote><p>略…</p><h3 id="第一章-RabbitMQ简介"><a href="#第一章-RabbitMQ简介" class="headerlink" title="第一章 RabbitMQ简介"></a>第一章 RabbitMQ简介</h3><p>RabbitMQ: 消息中间件<br>RabbitMQ功能特性：【高可靠】、【易扩展】、【高可用】、其他丰富的功能特性  </p><h4 id="1-1-什么是消息中间件"><a href="#1-1-什么是消息中间件" class="headerlink" title="1.1 什么是消息中间件"></a>1.1 什么是消息中间件</h4><p>消息（Message）是指在【应用间】传送的数据。  </p><table><thead><tr><th>消息</th><th>example</th><th>example2</th></tr></thead><tbody><tr><td>简单</td><td>文本字符串</td><td>JSON</td></tr><tr><td>复杂</td><td>内前对象</td><td></td></tr></tbody></table><p>消息队列中间件（Message Queue Middleware,简称MQ）<br>是指利用高效可靠的【消息传递机制】进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。<br>通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间的通信。  </p><p>消息队列中间件，也可以成为消息队列或者消息中间件。  </p><p>消息中间件 |  |<br>-|-|-<br>| 传递模式1 | 点对点（P2P，Point-to-Point）模式 |  | |<br>| 传递模式2 | 发布/订阅(Pub/Sub)模式 | | |</p><blockquote><p>点对点模式</p></blockquote><ul><li>基于队列的  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">消息生产者发送消息到队列，消息消费者从队列当中接受消息，队列的存在使得消息的异步传输成为可能。</span><br></pre></td></tr></table></figure><blockquote><p>发布订阅模式  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">发布订阅模式定义了如何向一个内容节点发布和订阅消息，</span><br><span class="line">这个内容节点成为主题（topic），</span><br><span class="line">主题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者则可以从主体中订阅消息，主题使得晓得的订阅者和消息的发布者相互保持独立，不需要进行接触即可保证消息的传递，</span><br><span class="line">发布&#x2F;订阅模式在消息的一对多广播室采用。</span><br></pre></td></tr></table></figure><p>目前开源的消息中间件有很多，比较主流的有：</p><ul><li>RabbitMQ</li><li>Kafka</li><li>ActiveMQ</li><li>RocketMQ</li><li>等</li></ul><p>面向消息的中间件（简称为MOM，Message Oriented Middleware）提供了以【松散耦合】的灵活方式集成应用程序的一种机制。  </p><p>它们提供了基于【存储】和【转发】的应用程序之间的【异步数据】发送，即应用程序彼此不直接通信，而是与作为【中介】的消息中间件通信。  </p><p>消息中间件提供了有保证的消息发送，应用程序开发人员无需了解远程调用（RPC）和网络通信协议的细节。  </p><p>消息中间件适用于需要可靠的数据传送的【分布式环境】。<br>采用消息中间件的系统中，不同的对象之间通过传递消息来激活对方的时间，已完成相应的操作，发送者将消息发送给消息服务器，消息服务器将消息存放在若干队列中，在合适的时候再将消息转发给接受者。  </p><p>消息中间件能在不同平台之间通信，它常被用来表示屏蔽各种平台以及协议之间的特性，实现应用程序之间的协同，其优点在于能够在客户和服务器之间提供同步和异步的链接，并且在任何时刻都可以将消息进行传送或者存储转发，这也是它比远程调用更进步的原因。</p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> RabbitMQ实战指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2020/03/14/%E3%80%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%91/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/03/14/%E3%80%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%91/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p><a href="https://www.bilibili.com/video/av6538245?from=search&amp;seid=14655081057930783496" target="_blank" rel="noopener">https://www.bilibili.com/video/av6538245?from=search&amp;seid=14655081057930783496</a>    </p><p>操作系统 Operating Systems<br>1.1 课程概述</p><p>基本概述</p><ul><li>课程简介</li><li>什么是操作系统</li><li>为什么学习以及如何学习操作系统</li><li>当前的操作系统的实例，操作系统的历史和操作系统的结构介绍，演变过程<br>对操作系统有一个大概的简介</li></ul><p>这门课涉及概念  </p><ul><li>基本概念以及原理</li><li>操作系统介绍</li><li>中断以及系统调用</li><li>内存管理</li><li>进程以及线程管理</li><li>调度，进程线程调度，cpu调度</li><li>结合进程管理带来的同步互斥</li><li>文件系统</li><li>I/O 子系统</li></ul><p>基本概念以及原理</p><p>操作系统其实是一个很复杂的一个系统软件</p><p>原理与具体代码对应起来<br>实际操作系统以及练习<br>小型操作系统uCore</p><ul><li>练习</li><li>在uCore 操作系统上做实验</li><li>延伸</li><li>讨论一些相关的话题或者故事</li><li><a href="https://github.io" target="_blank" rel="noopener">https://github.io</a>….</li></ul><h2 id="操作系统实验"><a href="#操作系统实验" class="headerlink" title="操作系统实验"></a>操作系统实验</h2><ul><li>实验0：准备操作系统怎么构成的，最开始的准备到怎么去怎么到一个实验环境中建立好他的开发环境这个是一个准备过程【准备】</li><li>实验1：系统启动，操作系统启动以及中断</li><li>实验2：操作系统物理内存进行管理，以及进一步进行堆内存进行虚拟化的管理，使得我们的程序可以有更大更丰富的资源去利用</li><li>实验3：虚拟内存管理,</li><li>实验4：内核线程管理</li><li>实验5：用户进程管理</li><li>实验6：CPU调度</li><li>实验7：同步与互斥,访问资源</li><li>实验8：文件系统</li></ul><p>概念原理+实验=&gt;二者有机结合<br>为什么这么做，怎么做</p><p>有必要了解<br>预备知识：</p><ul><li>计算机结构，原理（Intel 80386+）</li><li>数据结构（涉及算法，数据组织管理）</li><li>主要是C语言和有一小部分是汇编语言uCore  </li></ul><h2 id="1-2-什么是操作系统"><a href="#1-2-什么是操作系统" class="headerlink" title="1.2 什么是操作系统"></a>1.2 什么是操作系统</h2><p>操作系统的定义等  </p><ul><li>复杂的一个软件，没有一个完整、精确、公认的定义</li><li>从功能和特点来介绍操作系统</li><li>操作系统可以对上对下来理解，对上是从用户角度上来说，操作系统是一个控制软件</li><li>管理应用程序</li><li>为应用程序提供服务</li><li>杀死应用程序</li><li>资源管理</li><li>管理外设、分配资源，怎么把资源协调好</li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList源码</title>
      <link href="/2020/03/13/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90%E5%A4%8D%E4%B9%A0%E3%80%91ArrayList/"/>
      <url>/2020/03/13/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90%E5%A4%8D%E4%B9%A0%E3%80%91ArrayList/</url>
      
        <content type="html"><![CDATA[<p>坚强。<br>虽然很想发个表情包出来。<br>我得坚强。<br>我就不信了，磨不死我。<br>我得向阳而生，活的灿烂一点。<br>我可真讨厌做笔记。  </p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Copyright (c) 1997, 2017, Oracle<span class="built_in"> and/or </span>its affiliates. All rights reserved.</span><br><span class="line"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>Copyright n.版权，著作权 adj.版权的；受版权保护的。vt.保护版权；为…取得版权<br>Oracle n.神谕；语言；神谕处；圣人/ 甲骨文；甲骨文公司；数据库；神谕<br>affiliates 附属公司；联播电台<br>reserved adj.保留的，预定的；缄默的，冷淡的，高冷的；包租的<br>proprietary adj.专卖的，专营的；所有的，所有权的；（行为）像所有者那样的，所有人（似的）n.所有权，所有人<br>confidential adj.机密的；表示信任的；获信任的<br>subject n.主题；科目；[ 语 ]主语；国民；adj.服从的；易患…的；受制于…的；vt.使…隶属；<br>license n.执照，许可证；特许 vt.许可；特许；发许可证给…<br>terms n.地位，关系；[ 法 ]条款；术语；措辞；价钱（term的复数形式）…<br>Oracle and/or its affiliates Oracle和/或其关联公司<br>All rights reserved. 版权所有，保留所有权利。<br>ORACLE PROPRIETARY/CONFIDENTIAL Oracle专有/机密。<br>Use is subject to license terms. 使用受许可条款约束。  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">java</span><span class="selector-class">.util</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.util</span><span class="selector-class">.function</span><span class="selector-class">.Consumer</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.util</span><span class="selector-class">.function</span><span class="selector-class">.Predicate</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.util</span><span class="selector-class">.function</span><span class="selector-class">.UnaryOperator</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">sun</span><span class="selector-class">.misc</span><span class="selector-class">.SharedSecrets</span>;</span><br></pre></td></tr></table></figure><p>Consumer 消费者<br>Predicate  谓词<br>Unary 一元<br>UnaryOperator 非合格算子<br>SharedSecrets 共享的秘密  </p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Resizable-array implementation <span class="keyword">of</span> the <span class="xml"><span class="tag">&lt;<span class="name">tt</span>&gt;</span>List<span class="tag">&lt;/<span class="name">tt</span>&gt;</span></span> interface.  Implements</span><br><span class="line"> * all optional list operations, <span class="keyword">and</span> permits all elements, including</span><br><span class="line"> * <span class="xml"><span class="tag">&lt;<span class="name">tt</span>&gt;</span>null<span class="tag">&lt;/<span class="name">tt</span>&gt;</span></span>.  In addition <span class="keyword">to</span> implementing the <span class="xml"><span class="tag">&lt;<span class="name">tt</span>&gt;</span>List<span class="tag">&lt;/<span class="name">tt</span>&gt;</span></span> interface,</span><br><span class="line"> * this class provides methods <span class="keyword">to</span> manipulate the size <span class="keyword">of</span> the <span class="keyword">array</span> that <span class="literal">is</span></span><br><span class="line"> * used internally <span class="keyword">to</span> store the list.  (This class <span class="literal">is</span> roughly equivalent <span class="keyword">to</span></span><br><span class="line"> * <span class="xml"><span class="tag">&lt;<span class="name">tt</span>&gt;</span>Vector<span class="tag">&lt;/<span class="name">tt</span>&gt;</span></span>, <span class="keyword">except</span> that it <span class="literal">is</span> unsynchronized.)</span><br></pre></td></tr></table></figure><p>Resizable 可调整大小的<br>Implements all optional list operations 实现所有可选的List操作<br>permits 许可证<br>可调整大小的数组实现了接口List。实现了所有可选的List操作，并且许可所有的元素，包括空元素。<br>In addition to 除了<br>manipulate 操作<br>internally 在内部<br>store 贮藏<br>除了实现接口List，该类ArrayList还提供了方法来操作数组的大小的方法，被用在内部来存储的list<br>roughly 粗略地<br>equivalent 等效<br>该类ArrayList粗略地等效于类Vector，除了他不是同步的  </p><blockquote><p>由此可得，注释当中说明ArrayList是不同步的，也就是unsynchronized；而Vector是同步的，也就是synchronized  </p></blockquote><p>由此可得，看点源码还是非常非常非常好的。<br>但是我有个问题，为什么呢，为什么这样说他ArrayList是不同步，而Vector是同步的，有理由吗？<br>我觉得接着往下看可能有答案呗。  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">* <span class="tag">&lt;<span class="name">p</span>&gt;</span>The <span class="tag">&lt;<span class="name">tt</span>&gt;</span>size<span class="tag">&lt;/<span class="name">tt</span>&gt;</span>, <span class="tag">&lt;<span class="name">tt</span>&gt;</span>isEmpty<span class="tag">&lt;/<span class="name">tt</span>&gt;</span>, <span class="tag">&lt;<span class="name">tt</span>&gt;</span>get<span class="tag">&lt;/<span class="name">tt</span>&gt;</span>, <span class="tag">&lt;<span class="name">tt</span>&gt;</span>set<span class="tag">&lt;/<span class="name">tt</span>&gt;</span>,</span><br><span class="line">* <span class="tag">&lt;<span class="name">tt</span>&gt;</span>iterator<span class="tag">&lt;/<span class="name">tt</span>&gt;</span>, and <span class="tag">&lt;<span class="name">tt</span>&gt;</span>listIterator<span class="tag">&lt;/<span class="name">tt</span>&gt;</span> operations run in constant</span><br><span class="line">* time.  The <span class="tag">&lt;<span class="name">tt</span>&gt;</span>add<span class="tag">&lt;/<span class="name">tt</span>&gt;</span> operation runs in <span class="tag">&lt;<span class="name">i</span>&gt;</span>amortized constant time<span class="tag">&lt;/<span class="name">i</span>&gt;</span>,</span><br><span class="line">* that is, adding n elements requires O(n) time.  All of the other operations</span><br><span class="line">* run in linear time (roughly speaking).  The constant factor is low compared</span><br><span class="line">* to that for the <span class="tag">&lt;<span class="name">tt</span>&gt;</span>LinkedList<span class="tag">&lt;/<span class="name">tt</span>&gt;</span> implementation.</span><br></pre></td></tr></table></figure><p>constant 常数<br>size()，isEmpty()，get()，set()，iterator()，listIterator()这些操作运行在常数时间，大概意思应该说的是这些方法经常用。<br>amortized 分期偿还，摊销<br>add() 操作在平摊常数时间中，操作即方法之意<br>that is 那是，添加n个元素要求在O(n) 时间内，注意下是O(n)time，而不是0零啊，我第一反应是同时，现在想来不是同时的意思了。<br>添加n个元素需要O(n)时间。<br>O(n)感觉好像在哪里见过嘞，哦哦之前算法书里面讲过好像。<br>也就是说添加n个元素，数据量增大n倍，那么耗时也就增大几倍。<br>in linear time 在线性时间以内<br>（粗略的来说）所有的其他操作运行都在限行时间以内。<br>factor 因素<br>compared 相比<br>low 就没必要翻译了吧<br>常量因素是低于LinkedList的实现，与LinkedList实现相比，常量因子较低  </p><blockquote><p><a href="https://www.jianshu.com/p/f31744e423eb" target="_blank" rel="noopener">https://www.jianshu.com/p/f31744e423eb</a>  </p></blockquote><ul><li>描述算法复杂度时，常用o(1)，o(n)，o(logn)，o(nlogn)表示对应算法的时间复杂度，是算法的时空复杂度的表示。不仅仅用于表示时间复杂度，也用于表示空间复杂度。  </li><li>O后面的括号中有一个函数，指明某个算法的耗时/耗空间与数据增长量之间的关系。其中的n代表输入数据的量  </li><li>比如时间复杂度为O(n)，就代表数据量增大几倍，耗时也增大几倍。比如常见的遍历算法。再比如时间复杂度O(n^2)，就代表数据量增大n倍时，耗时增大n的平方倍，这是比线性更高的时间复杂度。比如冒泡排序，就是典型的O(n^2)的算法，对n个数排序，需要扫描n x n次。  </li><li>再比如O(logn)，当数据增大n倍时，耗时增大logn倍(这里的log是以2为底的，比如，当数据增大256倍时，耗时只增大8倍，是比线性还要低的时间复杂度)。二分查找就是O(logn)的算法，每找一次排除一半的可能，256个数据中查找只要找8次就可以找到目标。  </li><li>O(nlogn)同理，就是n乘以logn，当数据增大256倍时，耗时增大256*8=2048倍。这个复杂度高于线性低于平方。归并排序就是O(nlogn)的时间复杂度。  </li><li>O(1)就是最低的时空复杂度了，也就是耗时/耗空间与输入数据大小无关，无论输入数据增大多少倍，耗时/耗空间都不变。哈希算法就是典型的O(1)时间复杂度，无论数据规模多大，都可以在一次计算后找到目标（不考虑冲突的话）。  </li></ul><p>看来阅读源码，不仅让我知道了我要学算法，我还把冒泡排序这些….东西都给忘了。  </p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* &lt;p&gt;Each &lt;tt&gt;ArrayList&lt;/tt&gt;<span class="built_in"> instance </span>has a &lt;i&gt;capacity&lt;/i&gt;.  The capacity is</span><br><span class="line">* the size of the<span class="built_in"> array </span>used to store the elements in the list.  It is always</span><br><span class="line">* at least as large as the list size.  As elements are added to an ArrayList,</span><br><span class="line">* its capacity grows automatically.  The details of the growth policy are not</span><br><span class="line">* specified beyond the fact that adding an element has constant amortized</span><br><span class="line">* time cost.</span><br></pre></td></tr></table></figure><p>each 每个，each other互相<br>每个ArrayList实例都有一个capacity,capacity电梯里面有，我看到过，容量，就是能够乘载人数容量的那个<br>这个容量是数组的大小，被用来存储list当中的元素。<br>其总是至少和数组的大小是一样大的。<br>我忘了这个as as啥意思了。<br>as large as 一样大；at least 至少<br>last but not least 最后但是同等重要的，突然想起了这个<br>最为元素是要被添加到一个ArrayList集合当中去的，他的容量增长是自动增长的。<br>automatically 自动，因为auto是自动的意思吧所以联想自动。<br>details 细节； policy 政策；specified 指定的；beyond 除了；fact 事实<br>这个增长政策的细节是没有指定的除了事实上添加一个元素有常数平摊时间消耗上<br>增长策略的细节没有指定，除了添加一个元素有恒定的平摊时间成本。<br>我都不知道我在说些什么鬼。  </p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &lt;p&gt;An application can increase the capacity of an &lt;tt&gt;ArrayList&lt;/tt&gt; instance</span><br><span class="line">* before adding a large number of elements using the &lt;tt&gt;ensureCapacity&lt;/tt&gt;</span><br><span class="line">* operation.  This may reduce the amount of incremental reallocation.</span><br></pre></td></tr></table></figure><p>a large number of 大量的<br>increase 增加<br>一个应用程序能够增长其一个ArrayList实例的容量之前添加一个大数量的元素时使用ensureCapacity 确保容量操作<br>在使用ensureCapacity操作添加大量元素之前，应用程序可以增加一个ArrayList实例的容量<br>incremental 增量 ；reallocation 重新分配；allocation 分配<br>这或许可以减少大数量的增量重新分配.<br>amount 数量<br>这可能会减少增量重新分配的数量。  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* &lt;p&gt;&lt;strong&gt;Note that this implementation <span class="keyword">is</span> <span class="keyword">not</span> synchronized.&lt;/strong&gt;</span><br><span class="line">* <span class="keyword">If</span> multiple threads <span class="keyword">access</span> an &lt;tt&gt;ArrayList&lt;/tt&gt; instance <span class="keyword">concurrently</span>,</span><br><span class="line">* <span class="keyword">and</span> at least one <span class="keyword">of</span> the threads modifies the list structurally, it</span><br><span class="line">* &lt;i&gt;must&lt;/i&gt; be synchronized externally.  (A structural modification <span class="keyword">is</span></span><br><span class="line">* <span class="keyword">any</span> operation that adds <span class="keyword">or</span> deletes one <span class="keyword">or</span> more elements, <span class="keyword">or</span> explicitly</span><br><span class="line">* resizes the backing <span class="keyword">array</span>; merely setting the <span class="keyword">value</span> <span class="keyword">of</span> an element <span class="keyword">is</span> <span class="keyword">not</span></span><br><span class="line">* a structural modification.)  This <span class="keyword">is</span> typically accomplished <span class="keyword">by</span></span><br><span class="line">* synchronizing <span class="keyword">on</span> <span class="keyword">some</span> <span class="keyword">object</span> that naturally encapsulates the list.</span><br></pre></td></tr></table></figure><p>Note 请注意<br>请注意这个实现方法并不是同步的。也就是ArrayList非同步。<br>concurrently 同时  ；structurally 构造，externally 外部<br>如果多个线程同时访问同一个ArrayList实例，并且至少某一个线程对这个list集合做了结构性的修改的操作，他必须是外部同步的<br>explicitly 显示地<br>一个构造性修改可以使任意操作比如add添加或者delete删除某一个或者更多的元素，或者显示地重新调整了数组的大小<br>backing array 备份数组 ；modification 修改<br>仅仅是设置一个元素的值是不需要一个构造性的修改的<br>accomplished  完成 ；typically 通常 ；naturally自然；encapsulates封装<br>这是通常完成同步在某些自然封装的list对象上<br>这通常是通过对一些自然封装list的对象进行同步来实现的。  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* If no such object exists, the <span class="built_in">list</span> should be <span class="string">"wrapped"</span> using the</span><br><span class="line">* &#123;@link Collections#synchronizedList <span class="module-access"><span class="module"><span class="identifier">Collections</span>.</span></span>synchronizedList&#125;</span><br><span class="line">* <span class="keyword">method</span>.  This is best <span class="keyword">done</span> at creation time, <span class="keyword">to</span> prevent accidental</span><br><span class="line">* unsynchronized access <span class="keyword">to</span> the <span class="built_in">list</span>:&lt;pre&gt;</span><br><span class="line">*   List <span class="built_in">list</span> = <span class="module-access"><span class="module"><span class="identifier">Collections</span>.</span></span>synchronized<span class="constructor">List(<span class="params">new</span> ArrayList(<span class="operator">...</span>)</span>);&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>如果没有这样的对象存在，这个list集合应该是封装的，使用{@link Collections#synchronizedList Collections.synchronizedList}方法，同步集合。<br>prevent 防止；accidental 意外<br>这是最好的做法在创建时间上，来防止意外的不同步来访问list集合  </p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">* &lt;p&gt;&lt;a name="fail-fast"&gt;</span></span><br><span class="line"><span class="comment">* The iterators returned by this class's &#123;@link #iterator() iterator&#125; and</span></span><br><span class="line"><span class="comment">* &#123;@link #listIterator(int) listIterator&#125; methods are &lt;em&gt;fail-fast&lt;/em&gt;:&lt;/a&gt;</span></span><br><span class="line"><span class="comment">* if the list is structurally modified at any time after the iterator is</span></span><br><span class="line"><span class="comment">* created, in any way except through the iterator's own</span></span><br><span class="line"><span class="comment">* &#123;@link ListIterator#remove() remove&#125; or</span></span><br><span class="line"><span class="comment">* &#123;@link ListIterator#add(Object) add&#125; methods, the iterator will throw a</span></span><br><span class="line"><span class="comment">* &#123;@link ConcurrentModificationException&#125;.  Thus, in the face of</span></span><br><span class="line"><span class="comment">* concurrent modification, the iterator fails quickly and cleanly, rather</span></span><br><span class="line"><span class="comment">* than risking arbitrary, non-deterministic behavior at an undetermined</span></span><br><span class="line"><span class="comment">* time in the future.</span></span><br></pre></td></tr></table></figure><p>超链接：快速失败<br>这个迭代器通过类的iterator以及listIterator方法返回是快速失败的。<br>如果list是构造性修改在迭代器创建的任何时间之后，在任何方法当中除了迭代器自身<br>如果再迭代器创建后的任何时候对list集合进行了结构上的修改，则可以使用除了迭代器本身之外的方式进行修改  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* <span class="symbol">&lt;p&gt;</span>Note that the fail-fast behavior of <span class="keyword">an</span> iterator cannot <span class="keyword">be</span> guaranteed</span><br><span class="line">* <span class="keyword">as</span> it <span class="keyword">is</span>, generally speaking, impossible <span class="keyword">to</span> <span class="keyword">make</span> any hard guarantees in the</span><br><span class="line">* presence of unsynchronized concurrent modification.  Fail-fast iterators</span><br><span class="line">* <span class="keyword">throw</span> &#123;@code ConcurrentModificationException&#125; <span class="keyword">on</span> <span class="keyword">a</span> best-effort basis.</span><br><span class="line">* Therefore, it would <span class="keyword">be</span> wrong <span class="keyword">to</span> <span class="keyword">write</span> <span class="keyword">a</span> program that depended <span class="keyword">on</span> this</span><br><span class="line">* exception <span class="keyword">for</span> its correctnes<span class="variable">s:</span>  <span class="symbol">&lt;i&gt;</span>the fail-fast behavior of iterators</span><br><span class="line">* should <span class="keyword">be</span> used <span class="keyword">only</span> <span class="keyword">to</span> detect bugs.&lt;/i&gt;</span><br></pre></td></tr></table></figure><p>guarantees 担保；presence存在 ；impossible 不可能的<br>请注意快速失败 一个迭代器不能够担保作为他自身的行为，通常来说，来制作困难的担保存在在不同步且同时修改是不可能的。<br>在不同步并发修改的情况下，不可能做出任何严格的保证。<br>concurrent 并发<br>快速失败 迭代器应发的 并发修改异常 在一个最好的努力基础上。<br>尽最大努力抛出并发修改异常。<br>因此，他可能会导致错误的去写一个对于这个错误去依赖这个异常的程序<br>detect 检测<br>快速失败 迭代器应该被仅仅使用在检测bug的行为上  </p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">* &lt;p&gt;This class is a member of the</span></span><br><span class="line"><span class="comment">* &lt;a href="&#123;@docRoot&#125;/../technotes/guides/collections/index.html"&gt;</span></span><br><span class="line"><span class="comment">* Java Collections Framework&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @author  Josh Bloch</span></span><br><span class="line"><span class="comment">* @author  Neal Gafter</span></span><br><span class="line"><span class="comment">* @see     Collection</span></span><br><span class="line"><span class="comment">* @see     List</span></span><br><span class="line"><span class="comment">* @see     LinkedList</span></span><br><span class="line"><span class="comment">* @see     Vector</span></span><br><span class="line"><span class="comment">* @since   1.2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>java集合框架  </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ArrayList&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractList&lt;E&gt;</span></span></span><br><span class="line"><span class="class">        <span class="title">implements</span> <span class="title">List&lt;E&gt;</span>, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br></pre></td></tr></table></figure><p>ArrayList&lt;&gt; 可以泛型，继承了父类AbstractList 抽象List，实现了接口List，RandomAccess随机访问? 可可隆化，以及序列化这几个接口。  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;<span class="comment">//定义了一个常量 序列化版本uid</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default initial capacity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>默认一个初始化容量。<br>默认的这个容量的值为10，也就是说这个ArrayList里面默认能放10个object  </p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Shared empty<span class="built_in"> array </span>instance used for empty instances.</span><br><span class="line"> */</span><br><span class="line">private<span class="keyword"> static</span><span class="keyword"> final</span> Object[] EMPTY_E<span class="class">LEMENTDATA = &#123;&#125;;</span></span><br></pre></td></tr></table></figure><p>分享空的数组实例给空的实例数组  </p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Shared empty<span class="built_in"> array </span>instance used for default sized empty instances. We</span><br><span class="line"> * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span><br><span class="line"> * first element is added.</span><br><span class="line"> */</span><br><span class="line">private<span class="keyword"> static</span><span class="keyword"> final</span> Object[] DEFAU<span class="class">LTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span></span><br></pre></td></tr></table></figure><p>distinguish 区分；inflate 膨胀<br>分享空的数组实例使用给默认大小的空的实例。 我们区分这个是来自于一个空元素数组  ，来知道当第一个元素被添加时会膨胀多少<br>我们将其与EMPTY_ELEMENTDATA区分开来，以了解在添加第一个元素时应该膨胀多少  </p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The<span class="built_in"> array </span>buffer into which the elements of the ArrayList are stored.</span><br><span class="line"> * The capacity of the ArrayList is the length of this<span class="built_in"> array </span>buffer. Any</span><br><span class="line"> * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class="line"> * will be expanded to DEFAULT_CAPACITY when the first element is added.</span><br><span class="line"> */</span><br><span class="line">transient Object[] elementData; // non-private to simplify nested class access</span><br></pre></td></tr></table></figure><p>被ArrayList所存储的元素会被缓冲到数组当中去。<br>存储ArrayList元素的数组缓冲区。<br>这个ArrayList的容量是数组缓冲区的长度。<br>任何一个空的ArrayList以及他的数组 等于等于 默认容量空元素数组 将会被扩展到默认容量当第一个元素被添加的时候。  </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The size of the ArrayList (the number of elements it contains).</span></span><br><span class="line"><span class="comment"> * @serial</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">size</span>;</span><br></pre></td></tr></table></figure><p>定义这个ArrayList集合的大小，也就是这个集合当中所包含的元素个数  </p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty list with the specified initial capacity.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  initialCapacity  the initial capacity of the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if the specified initial capacity</span></span><br><span class="line"><span class="comment"> *         is negative</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(initialCapacity == <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造一个空的list集合以及指定初始化的容量。<br>initalCapacity list集合当中初始化容量大小，当前为构造方法，普通方法为：访问修饰+返回类型+方法名称+方法参数+方法体<br>如果初始化容量大小大于0，则元素数组构建一个Object数组，当中初始容量为初始化容量大小<br>如果初始化容量大小等于0，则元素数组则是一个空数组，即所定义的空数组<br>如果初始化容量大小既不大于0也不是等于0，那就是小于0，为负数了，那么则抛出异常，非法参数异常，非法容量+所需要初始化容量的大小值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty list with an initial capacity of ten.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法是一个空的list集合，并带有默认的初始化容量为10  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a list containing the elements of the specified</span></span><br><span class="line"><span class="comment"> * collection, in the order they are returned by the collection's</span></span><br><span class="line"><span class="comment"> * iterator.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param c the collection whose elements are to be placed into this list</span></span><br><span class="line"><span class="comment"> * @throws NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="constructor">ArrayList(Collection&lt;? <span class="params">extends</span> E&gt; <span class="params">c</span>)</span> &#123;</span><br><span class="line">    elementData = c.<span class="keyword">to</span><span class="constructor">Array()</span>;</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.get<span class="constructor">Class()</span> != Object<span class="literal">[]</span>.<span class="keyword">class</span>)</span><br><span class="line">            elementData = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">Of(<span class="params">elementData</span>, <span class="params">size</span>, Object[].<span class="params">class</span>)</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造一个list集合，该list集合包含指定集合当中的元素，通过集合的迭代按照他们返回的顺序<br>参数c为元素将被替换到list当中的集合<br>抛出空指针异常如果该指定的集合为空<br>private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};<br>elementData原来就是一个空数组，现在重新赋值为一个新的数组，即该集合数组化成为一个数组。<br>对size变量进行赋值，size即为数组elementData的长度，如果size不为0，则<br>incorrectly 不正确<br>集合c数组后之后可能错误的不能返回对象数组<br>如果数组elementData的反射不等于Object[]数组的反射，即两者如果不是同出一宗的话<br>数组elementData将又被重新赋值，数组的复制，复制的数组elementData，复制的个数，以Object[]对象数组的形式<br>如果elementData的长度为0，则elementData数组则将被重新赋值为<br>private static final Object[] EMPTY_ELEMENTDATA = {};空数组  </p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Trims the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt;<span class="built_in"> instance </span>to be the</span><br><span class="line"> * list's current size.  An application can use this operation to minimize</span><br><span class="line"> * the storage of an &lt;tt&gt;ArrayList&lt;/tt&gt; instance.</span><br><span class="line"> */</span><br><span class="line">public void trimToSize() &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">   <span class="built_in"> if </span>(size &lt; elementData.length) &#123;</span><br><span class="line">        elementData = (size == 0)</span><br><span class="line">          ? EMPTY_ELEMENTDATA</span><br><span class="line">         <span class="keyword"> :</span> Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>trim 修剪；<br>修剪ArrayList实例的容量来成为这个list集合的当前size数量<br>minimize 最小化；<br>一个应用程序能够使用该操作来最小化一个ArrayList实例的存储量<br>该类ArrayList当中没有定影modCount，应该是继承的父类当中的变量。<br>修改次数自增。<br>如果size变量小于elementData数组的长度，则对elementData数组进行重新复制，三元换算法，如果size为0则elementData取值为空数组，否则进行复制elementData当中的size个元素成为一个新数组并赋值给elementData。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Increases the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance, if</span></span><br><span class="line"><span class="comment">     * necessary, to ensure that it can hold at least the number of elements</span></span><br><span class="line"><span class="comment">     * specified by the minimum capacity argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   minCapacity   the desired minimum capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">            <span class="comment">// any size if not default element table</span></span><br><span class="line">            ? <span class="number">0</span></span><br><span class="line">            <span class="comment">// larger than default for default empty table. It's already</span></span><br><span class="line">            <span class="comment">// supposed to be at default size.</span></span><br><span class="line">            : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">            ensureExplicitCapacity(minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The maximum size of array to allocate.</span></span><br><span class="line"><span class="comment">     * Some VMs reserve some header words in an array.</span></span><br><span class="line"><span class="comment">     * Attempts to allocate larger arrays may result in</span></span><br><span class="line"><span class="comment">     * OutOfMemoryError: Requested array size exceeds VM limit</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Increases the capacity to ensure that it can hold at least the</span></span><br><span class="line"><span class="comment">     * number of elements specified by the minimum capacity argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minCapacity the desired minimum capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the number of elements in this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of elements in this list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains no elements.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list contains no elements</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains the specified element.</span></span><br><span class="line"><span class="comment">     * More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this list contains</span></span><br><span class="line"><span class="comment">     * at least one element &lt;tt&gt;e&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o element whose presence in this list is to be tested</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list contains the specified element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the index of the first occurrence of the specified element</span></span><br><span class="line"><span class="comment">     * in this list, or -1 if this list does not contain the element.</span></span><br><span class="line"><span class="comment">     * More formally, returns the lowest index &lt;tt&gt;i&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment">     * or -1 if there is no such index.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the index of the last occurrence of the specified element</span></span><br><span class="line"><span class="comment">     * in this list, or -1 if this list does not contain the element.</span></span><br><span class="line"><span class="comment">     * More formally, returns the highest index &lt;tt&gt;i&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment">     * or -1 if there is no such index.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a shallow copy of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance.  (The</span></span><br><span class="line"><span class="comment">     * elements themselves are not copied.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a clone of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">            v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">            v.modCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an array containing all of the elements in this list</span></span><br><span class="line"><span class="comment">     * in proper sequence (from first to last element).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The returned array will be "safe" in that no references to it are</span></span><br><span class="line"><span class="comment">     * maintained by this list.  (In other words, this method must allocate</span></span><br><span class="line"><span class="comment">     * a new array).  The caller is thus free to modify the returned array.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method acts as bridge between array-based and collection-based</span></span><br><span class="line"><span class="comment">     * APIs.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an array containing all of the elements in this list in</span></span><br><span class="line"><span class="comment">     *         proper sequence</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an array containing all of the elements in this list in proper</span></span><br><span class="line"><span class="comment">     * sequence (from first to last element); the runtime type of the returned</span></span><br><span class="line"><span class="comment">     * array is that of the specified array.  If the list fits in the</span></span><br><span class="line"><span class="comment">     * specified array, it is returned therein.  Otherwise, a new array is</span></span><br><span class="line"><span class="comment">     * allocated with the runtime type of the specified array and the size of</span></span><br><span class="line"><span class="comment">     * this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;If the list fits in the specified array with room to spare</span></span><br><span class="line"><span class="comment">     * (i.e., the array has more elements than the list), the element in</span></span><br><span class="line"><span class="comment">     * the array immediately following the end of the collection is set to</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;null&lt;/tt&gt;.  (This is useful in determining the length of the</span></span><br><span class="line"><span class="comment">     * list &lt;i&gt;only&lt;/i&gt; if the caller knows that the list does not contain</span></span><br><span class="line"><span class="comment">     * any null elements.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a the array into which the elements of the list are to</span></span><br><span class="line"><span class="comment">     *          be stored, if it is big enough; otherwise, a new array of the</span></span><br><span class="line"><span class="comment">     *          same runtime type is allocated for this purpose.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an array containing the elements of the list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ArrayStoreException if the runtime type of the specified array</span></span><br><span class="line"><span class="comment">     *         is not a supertype of the runtime type of every element in</span></span><br><span class="line"><span class="comment">     *         this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified array is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">            <span class="comment">// Make a new array of a's runtime type, but my contents:</span></span><br><span class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">            a[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Positional Access Operations</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the element at the specified position in this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  index index of the element to return</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the element at the specified position in this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> elementData(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Replaces the element at the specified position in this list with</span></span><br><span class="line"><span class="comment">     * the specified element.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index index of the element to replace</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element element to be stored at the specified position</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the element previously at the specified position</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts the specified element at the specified position in this</span></span><br><span class="line"><span class="comment">     * list. Shifts the element currently at that position (if any) and</span></span><br><span class="line"><span class="comment">     * any subsequent elements to the right (adds one to their indices).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index index at which the specified element is to be inserted</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element element to be inserted</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                         size - index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the element at the specified position in this list.</span></span><br><span class="line"><span class="comment">     * Shifts any subsequent elements to the left (subtracts one from their</span></span><br><span class="line"><span class="comment">     * indices).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index the index of the element to be removed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the element that was removed from the list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the first occurrence of the specified element from this list,</span></span><br><span class="line"><span class="comment">     * if it is present.  If the list does not contain the element, it is</span></span><br><span class="line"><span class="comment">     * unchanged.  More formally, removes the element with the lowest index</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;i&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * (if such an element exists).  Returns &lt;tt&gt;true&lt;/tt&gt; if this list</span></span><br><span class="line"><span class="comment">     * contained the specified element (or equivalently, if this list</span></span><br><span class="line"><span class="comment">     * changed as a result of the call).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o element to be removed from this list, if present</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list contained the specified element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Private remove method that skips bounds checking and does not</span></span><br><span class="line"><span class="comment">     * return the value removed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes all of the elements from this list.  The list will</span></span><br><span class="line"><span class="comment">     * be empty after this call returns.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear to let GC do its work</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Appends all of the elements in the specified collection to the end of</span></span><br><span class="line"><span class="comment">     * this list, in the order that they are returned by the</span></span><br><span class="line"><span class="comment">     * specified collection's Iterator.  The behavior of this operation is</span></span><br><span class="line"><span class="comment">     * undefined if the specified collection is modified while the operation</span></span><br><span class="line"><span class="comment">     * is in progress.  (This implies that the behavior of this call is</span></span><br><span class="line"><span class="comment">     * undefined if the specified collection is this list, and this</span></span><br><span class="line"><span class="comment">     * list is nonempty.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c collection containing elements to be added to this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts all of the elements in the specified collection into this</span></span><br><span class="line"><span class="comment">     * list, starting at the specified position.  Shifts the element</span></span><br><span class="line"><span class="comment">     * currently at that position (if any) and any subsequent elements to</span></span><br><span class="line"><span class="comment">     * the right (increases their indices).  The new elements will appear</span></span><br><span class="line"><span class="comment">     * in the list in the order that they are returned by the</span></span><br><span class="line"><span class="comment">     * specified collection's iterator.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index index at which to insert the first element from the</span></span><br><span class="line"><span class="comment">     *              specified collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c collection containing elements to be added to this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                             numMoved);</span><br><span class="line"></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes from this list all of the elements whose index is between</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> fromIndex&#125;, inclusive, and &#123;<span class="doctag">@code</span> toIndex&#125;, exclusive.</span></span><br><span class="line"><span class="comment">     * Shifts any succeeding elements to the left (reduces their index).</span></span><br><span class="line"><span class="comment">     * This call shortens the list by &#123;<span class="doctag">@code</span> (toIndex - fromIndex)&#125; elements.</span></span><br><span class="line"><span class="comment">     * (If &#123;<span class="doctag">@code</span> toIndex==fromIndex&#125;, this operation has no effect.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException if &#123;<span class="doctag">@code</span> fromIndex&#125; or</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> toIndex&#125; is out of range</span></span><br><span class="line"><span class="comment">     *         (&#123;<span class="doctag">@code</span> fromIndex &lt; 0 ||</span></span><br><span class="line"><span class="comment">     *          fromIndex &gt;= size() ||</span></span><br><span class="line"><span class="comment">     *          toIndex &gt; size() ||</span></span><br><span class="line"><span class="comment">     *          toIndex &lt; fromIndex&#125;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> numMoved = size - toIndex;</span><br><span class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class="line">                         numMoved);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear to let GC do its work</span></span><br><span class="line">        <span class="keyword">int</span> newSize = size - (toIndex-fromIndex);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = newSize; i &lt; size; i++) &#123;</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size = newSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Checks if the given index is in range.  If not, throws an appropriate</span></span><br><span class="line"><span class="comment">     * runtime exception.  This method does *not* check if the index is</span></span><br><span class="line"><span class="comment">     * negative: It is always used immediately prior to an array access,</span></span><br><span class="line"><span class="comment">     * which throws an ArrayIndexOutOfBoundsException if index is negative.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A version of rangeCheck used by add and addAll.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an IndexOutOfBoundsException detail message.</span></span><br><span class="line"><span class="comment">     * Of the many possible refactorings of the error handling code,</span></span><br><span class="line"><span class="comment">     * this "outlining" performs best with both server and client VMs.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">outOfBoundsMsg</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes from this list all of its elements that are contained in the</span></span><br><span class="line"><span class="comment">     * specified collection.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c collection containing elements to be removed from this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException if the class of an element of this list</span></span><br><span class="line"><span class="comment">     *         is incompatible with the specified collection</span></span><br><span class="line"><span class="comment">     * (&lt;a href="Collection.html#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if this list contains a null element and the</span></span><br><span class="line"><span class="comment">     *         specified collection does not permit null elements</span></span><br><span class="line"><span class="comment">     * (&lt;a href="Collection.html#optional-restrictions"&gt;optional&lt;/a&gt;),</span></span><br><span class="line"><span class="comment">     *         or if the specified collection is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Collection#contains(Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(c);</span><br><span class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retains only the elements in this list that are contained in the</span></span><br><span class="line"><span class="comment">     * specified collection.  In other words, removes from this list all</span></span><br><span class="line"><span class="comment">     * of its elements that are not contained in the specified collection.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c collection containing elements to be retained in this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException if the class of an element of this list</span></span><br><span class="line"><span class="comment">     *         is incompatible with the specified collection</span></span><br><span class="line"><span class="comment">     * (&lt;a href="Collection.html#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if this list contains a null element and the</span></span><br><span class="line"><span class="comment">     *         specified collection does not permit null elements</span></span><br><span class="line"><span class="comment">     * (&lt;a href="Collection.html#optional-restrictions"&gt;optional&lt;/a&gt;),</span></span><br><span class="line"><span class="comment">     *         or if the specified collection is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Collection#contains(Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(c);</span><br><span class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (; r &lt; size; r++)</span><br><span class="line">                <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</span><br><span class="line">                    elementData[w++] = elementData[r];</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Preserve behavioral compatibility with AbstractCollection,</span></span><br><span class="line">            <span class="comment">// even if c.contains() throws.</span></span><br><span class="line">            <span class="keyword">if</span> (r != size) &#123;</span><br><span class="line">                System.arraycopy(elementData, r,</span><br><span class="line">                                 elementData, w,</span><br><span class="line">                                 size - r);</span><br><span class="line">                w += size - r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (w != size) &#123;</span><br><span class="line">                <span class="comment">// clear to let GC do its work</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</span><br><span class="line">                    elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">                modCount += size - w;</span><br><span class="line">                size = w;</span><br><span class="line">                modified = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Save the state of the &lt;tt&gt;ArrayList&lt;/tt&gt; instance to a stream (that</span></span><br><span class="line"><span class="comment">     * is, serialize it).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serialData</span> The length of the array backing the &lt;tt&gt;ArrayList&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     *             instance is emitted (int), followed by all of its elements</span></span><br><span class="line"><span class="comment">     *             (each an &lt;tt&gt;Object&lt;/tt&gt;) in the proper order.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">        <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">        s.writeInt(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            s.writeObject(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reconstitute the &lt;tt&gt;ArrayList&lt;/tt&gt; instance from a stream (that is,</span></span><br><span class="line"><span class="comment">     * deserialize it).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in capacity</span></span><br><span class="line">        s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// be like clone(), allocate array based upon size not capacity</span></span><br><span class="line">            <span class="keyword">int</span> capacity = calculateCapacity(elementData, size);</span><br><span class="line">            SharedSecrets.getJavaOISAccess().checkArray(s, Object[]<span class="class">.<span class="keyword">class</span>, <span class="title">capacity</span>)</span>;</span><br><span class="line">            ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">            Object[] a = elementData;</span><br><span class="line">            <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">                a[i] = s.readObject();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a list iterator over the elements in this list (in proper</span></span><br><span class="line"><span class="comment">     * sequence), starting at the specified position in the list.</span></span><br><span class="line"><span class="comment">     * The specified index indicates the first element that would be</span></span><br><span class="line"><span class="comment">     * returned by an initial call to &#123;<span class="doctag">@link</span> ListIterator#next next&#125;.</span></span><br><span class="line"><span class="comment">     * An initial call to &#123;<span class="doctag">@link</span> ListIterator#previous previous&#125; would</span></span><br><span class="line"><span class="comment">     * return the element with the specified index minus one.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The returned list iterator is &lt;a href="#fail-fast"&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a list iterator over the elements in this list (in proper</span></span><br><span class="line"><span class="comment">     * sequence).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The returned list iterator is &lt;a href="#fail-fast"&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #listIterator(int)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an iterator over the elements in this list in proper sequence.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The returned iterator is &lt;a href="#fail-fast"&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an iterator over the elements in this list in proper sequence</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An optimized version of AbstractList.Itr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">                cursor = lastRet;</span><br><span class="line">                lastRet = -<span class="number">1</span>;</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(consumer);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">                consumer.accept((E) elementData[i++]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">            cursor = i;</span><br><span class="line">            lastRet = i - <span class="number">1</span>;</span><br><span class="line">            checkForComodification();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An optimized version of AbstractList.ListItr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        ListItr(<span class="keyword">int</span> index) &#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">            cursor = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            cursor = i;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ArrayList.<span class="keyword">this</span>.set(lastRet, e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = cursor;</span><br><span class="line">                ArrayList.<span class="keyword">this</span>.add(i, e);</span><br><span class="line">                cursor = i + <span class="number">1</span>;</span><br><span class="line">                lastRet = -<span class="number">1</span>;</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a view of the portion of this list between the specified</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> fromIndex&#125;, inclusive, and &#123;<span class="doctag">@code</span> toIndex&#125;, exclusive.  (If</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> fromIndex&#125; and &#123;<span class="doctag">@code</span> toIndex&#125; are equal, the returned list is</span></span><br><span class="line"><span class="comment">     * empty.)  The returned list is backed by this list, so non-structural</span></span><br><span class="line"><span class="comment">     * changes in the returned list are reflected in this list, and vice-versa.</span></span><br><span class="line"><span class="comment">     * The returned list supports all of the optional list operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method eliminates the need for explicit range operations (of</span></span><br><span class="line"><span class="comment">     * the sort that commonly exist for arrays).  Any operation that expects</span></span><br><span class="line"><span class="comment">     * a list can be used as a range operation by passing a subList view</span></span><br><span class="line"><span class="comment">     * instead of a whole list.  For example, the following idiom</span></span><br><span class="line"><span class="comment">     * removes a range of elements from a list:</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     *      list.subList(from, to).clear();</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * Similar idioms may be constructed for &#123;<span class="doctag">@link</span> #indexOf(Object)&#125; and</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #lastIndexOf(Object)&#125;, and all of the algorithms in the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Collections&#125; class can be applied to a subList.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The semantics of the list returned by this method become undefined if</span></span><br><span class="line"><span class="comment">     * the backing list (i.e., this list) is &lt;i&gt;structurally modified&lt;/i&gt; in</span></span><br><span class="line"><span class="comment">     * any way other than via the returned list.  (Structural modifications are</span></span><br><span class="line"><span class="comment">     * those that change the size of this list, or otherwise perturb it in such</span></span><br><span class="line"><span class="comment">     * a fashion that iterations in progress may yield incorrect results.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, <span class="number">0</span>, fromIndex, toIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">subListRangeCheck</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"fromIndex = "</span> + fromIndex);</span><br><span class="line">        <span class="keyword">if</span> (toIndex &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"toIndex = "</span> + toIndex);</span><br><span class="line">        <span class="keyword">if</span> (fromIndex &gt; toIndex)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromIndex("</span> + fromIndex +</span><br><span class="line">                                               <span class="string">") &gt; toIndex("</span> + toIndex + <span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SubList</span> <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">RandomAccess</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AbstractList&lt;E&gt; parent;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parentOffset;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> offset;</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">        SubList(AbstractList&lt;E&gt; parent,</span><br><span class="line">                <span class="keyword">int</span> offset, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) &#123;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">            <span class="keyword">this</span>.parentOffset = fromIndex;</span><br><span class="line">            <span class="keyword">this</span>.offset = offset + fromIndex;</span><br><span class="line">            <span class="keyword">this</span>.size = toIndex - fromIndex;</span><br><span class="line">            <span class="keyword">this</span>.modCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">            rangeCheck(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            E oldValue = ArrayList.<span class="keyword">this</span>.elementData(offset + index);</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.elementData[offset + index] = e;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            rangeCheck(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">return</span> ArrayList.<span class="keyword">this</span>.elementData(offset + index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.add(parentOffset + index, e);</span><br><span class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="keyword">this</span>.size++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            rangeCheck(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            E result = parent.remove(parentOffset + index);</span><br><span class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="keyword">this</span>.size--;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.removeRange(parentOffset + fromIndex,</span><br><span class="line">                               parentOffset + toIndex);</span><br><span class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="keyword">this</span>.size -= toIndex - fromIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> addAll(<span class="keyword">this</span>.size, c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            <span class="keyword">int</span> cSize = c.size();</span><br><span class="line">            <span class="keyword">if</span> (cSize==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.addAll(parentOffset + index, c);</span><br><span class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="keyword">this</span>.size += cSize;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> listIterator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="keyword">this</span>.offset;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ListIterator&lt;E&gt;() &#123;</span><br><span class="line">                <span class="keyword">int</span> cursor = index;</span><br><span class="line">                <span class="keyword">int</span> lastRet = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> cursor != SubList.<span class="keyword">this</span>.size;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    checkForComodification();</span><br><span class="line">                    <span class="keyword">int</span> i = cursor;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= SubList.<span class="keyword">this</span>.size)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">                    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    cursor = i + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">return</span> (E) elementData[offset + (lastRet = i)];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> cursor != <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    checkForComodification();</span><br><span class="line">                    <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">                    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    cursor = i;</span><br><span class="line">                    <span class="keyword">return</span> (E) elementData[offset + (lastRet = i)];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">                    Objects.requireNonNull(consumer);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> size = SubList.<span class="keyword">this</span>.size;</span><br><span class="line">                    <span class="keyword">int</span> i = cursor;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">                        consumer.accept((E) elementData[offset + (i++)]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">                    lastRet = cursor = i;</span><br><span class="line">                    checkForComodification();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> cursor;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> cursor - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">                    checkForComodification();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        SubList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">                        cursor = lastRet;</span><br><span class="line">                        lastRet = -<span class="number">1</span>;</span><br><span class="line">                        expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">                    checkForComodification();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        ArrayList.<span class="keyword">this</span>.set(offset + lastRet, e);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">                    checkForComodification();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> i = cursor;</span><br><span class="line">                        SubList.<span class="keyword">this</span>.add(i, e);</span><br><span class="line">                        cursor = i + <span class="number">1</span>;</span><br><span class="line">                        lastRet = -<span class="number">1</span>;</span><br><span class="line">                        expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (expectedModCount != ArrayList.<span class="keyword">this</span>.modCount)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">            subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, offset, fromIndex, toIndex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>.size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="keyword">this</span>.size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">outOfBoundsMsg</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+<span class="keyword">this</span>.size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (ArrayList.<span class="keyword">this</span>.modCount != <span class="keyword">this</span>.modCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayListSpliterator&lt;E&gt;(ArrayList.<span class="keyword">this</span>, offset,</span><br><span class="line">                                               offset + <span class="keyword">this</span>.size, <span class="keyword">this</span>.modCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="keyword">final</span> E[] elementData = (E[]) <span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">            action.accept(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &lt;em&gt;&lt;a href="Spliterator.html#binding"&gt;late-binding&lt;/a&gt;&lt;/em&gt;</span></span><br><span class="line"><span class="comment">     * and &lt;em&gt;fail-fast&lt;/em&gt; &#123;<span class="doctag">@link</span> Spliterator&#125; over the elements in this</span></span><br><span class="line"><span class="comment">     * list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The &#123;<span class="doctag">@code</span> Spliterator&#125; reports &#123;<span class="doctag">@link</span> Spliterator#SIZED&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Spliterator#SUBSIZED&#125;, and &#123;<span class="doctag">@link</span> Spliterator#ORDERED&#125;.</span></span><br><span class="line"><span class="comment">     * Overriding implementations should document the reporting of additional</span></span><br><span class="line"><span class="comment">     * characteristic values.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a &#123;<span class="doctag">@code</span> Spliterator&#125; over the elements in this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayListSpliterator&lt;&gt;(<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Index-based split-by-two, lazily initialized Spliterator */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListSpliterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * If ArrayLists were immutable, or structurally immutable (no</span></span><br><span class="line"><span class="comment">         * adds, removes, etc), we could implement their spliterators</span></span><br><span class="line"><span class="comment">         * with Arrays.spliterator. Instead we detect as much</span></span><br><span class="line"><span class="comment">         * interference during traversal as practical without</span></span><br><span class="line"><span class="comment">         * sacrificing much performance. We rely primarily on</span></span><br><span class="line"><span class="comment">         * modCounts. These are not guaranteed to detect concurrency</span></span><br><span class="line"><span class="comment">         * violations, and are sometimes overly conservative about</span></span><br><span class="line"><span class="comment">         * within-thread interference, but detect enough problems to</span></span><br><span class="line"><span class="comment">         * be worthwhile in practice. To carry this out, we (1) lazily</span></span><br><span class="line"><span class="comment">         * initialize fence and expectedModCount until the latest</span></span><br><span class="line"><span class="comment">         * point that we need to commit to the state we are checking</span></span><br><span class="line"><span class="comment">         * against; thus improving precision.  (This doesn't apply to</span></span><br><span class="line"><span class="comment">         * SubLists, that create spliterators with current non-lazy</span></span><br><span class="line"><span class="comment">         * values).  (2) We perform only a single</span></span><br><span class="line"><span class="comment">         * ConcurrentModificationException check at the end of forEach</span></span><br><span class="line"><span class="comment">         * (the most performance-sensitive method). When using forEach</span></span><br><span class="line"><span class="comment">         * (as opposed to iterators), we can normally only detect</span></span><br><span class="line"><span class="comment">         * interference after actions, not before. Further</span></span><br><span class="line"><span class="comment">         * CME-triggering checks apply to all other possible</span></span><br><span class="line"><span class="comment">         * violations of assumptions for example null or too-small</span></span><br><span class="line"><span class="comment">         * elementData array given its size(), that could only have</span></span><br><span class="line"><span class="comment">         * occurred due to interference.  This allows the inner loop</span></span><br><span class="line"><span class="comment">         * of forEach to run without any further checks, and</span></span><br><span class="line"><span class="comment">         * simplifies lambda-resolution. While this does entail a</span></span><br><span class="line"><span class="comment">         * number of checks, note that in the common case of</span></span><br><span class="line"><span class="comment">         * list.stream().forEach(a), no checks or other computation</span></span><br><span class="line"><span class="comment">         * occur anywhere other than inside forEach itself.  The other</span></span><br><span class="line"><span class="comment">         * less-often-used methods cannot take advantage of most of</span></span><br><span class="line"><span class="comment">         * these streamlinings.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;E&gt; list;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> index; <span class="comment">// current index, modified on advance/split</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fence; <span class="comment">// -1 until used; then one past last index</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount; <span class="comment">// initialized when fence set</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Create new spliterator covering the given  range */</span></span><br><span class="line">        ArrayListSpliterator(ArrayList&lt;E&gt; list, <span class="keyword">int</span> origin, <span class="keyword">int</span> fence,</span><br><span class="line">                             <span class="keyword">int</span> expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">this</span>.list = list; <span class="comment">// OK if null unless traversed</span></span><br><span class="line">            <span class="keyword">this</span>.index = origin;</span><br><span class="line">            <span class="keyword">this</span>.fence = fence;</span><br><span class="line">            <span class="keyword">this</span>.expectedModCount = expectedModCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getFence</span><span class="params">()</span> </span>&#123; <span class="comment">// initialize fence to size on first use</span></span><br><span class="line">            <span class="keyword">int</span> hi; <span class="comment">// (a specialized variant appears in method forEach)</span></span><br><span class="line">            ArrayList&lt;E&gt; lst;</span><br><span class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((lst = list) == <span class="keyword">null</span>)</span><br><span class="line">                    hi = fence = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    expectedModCount = lst.modCount;</span><br><span class="line">                    hi = fence = lst.size;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> hi;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ArrayListSpliterator&lt;E&gt; <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (lo &gt;= mid) ? <span class="keyword">null</span> : <span class="comment">// divide range in half unless too small</span></span><br><span class="line">                <span class="keyword">new</span> ArrayListSpliterator&lt;E&gt;(list, lo, index = mid,</span><br><span class="line">                                            expectedModCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">int</span> hi = getFence(), i = index;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; hi) &#123;</span><br><span class="line">                index = i + <span class="number">1</span>;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E)list.elementData[i];</span><br><span class="line">                action.accept(e);</span><br><span class="line">                <span class="keyword">if</span> (list.modCount != expectedModCount)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i, hi, mc; <span class="comment">// hoist accesses and checks from loop</span></span><br><span class="line">            ArrayList&lt;E&gt; lst; Object[] a;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">if</span> ((lst = list) != <span class="keyword">null</span> &amp;&amp; (a = lst.elementData) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    mc = lst.modCount;</span><br><span class="line">                    hi = lst.size;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    mc = expectedModCount;</span><br><span class="line">                <span class="keyword">if</span> ((i = index) &gt;= <span class="number">0</span> &amp;&amp; (index = hi) &lt;= a.length) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (; i &lt; hi; ++i) &#123;</span><br><span class="line">                        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E) a[i];</span><br><span class="line">                        action.accept(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (lst.modCount == mc)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">long</span>) (getFence() - index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeIf</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> E&gt; filter)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(filter);</span><br><span class="line">        <span class="comment">// figure out which elements are to be removed</span></span><br><span class="line">        <span class="comment">// any exception thrown from the filter predicate at this stage</span></span><br><span class="line">        <span class="comment">// will leave the collection unmodified</span></span><br><span class="line">        <span class="keyword">int</span> removeCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> BitSet removeSet = <span class="keyword">new</span> BitSet(size);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            <span class="keyword">final</span> E element = (E) elementData[i];</span><br><span class="line">            <span class="keyword">if</span> (filter.test(element)) &#123;</span><br><span class="line">                removeSet.set(i);</span><br><span class="line">                removeCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// shift surviving elements left over the spaces left by removed elements</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> anyToRemove = removeCount &gt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (anyToRemove) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> newSize = size - removeCount;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) &#123;</span><br><span class="line">                i = removeSet.nextClearBit(i);</span><br><span class="line">                elementData[j] = elementData[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=newSize; k &lt; size; k++) &#123;</span><br><span class="line">                elementData[k] = <span class="keyword">null</span>;  <span class="comment">// Let gc do its work</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.size = newSize;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">            modCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> anyToRemove;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(operator);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">            elementData[i] = operator.apply((E) elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        Arrays.sort((E[]) elementData, <span class="number">0</span>, size, c);</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArrayList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSS</title>
      <link href="/2020/03/12/%E3%80%90Vuejs%E3%80%91/Vuejs%E6%8E%A5%E8%A7%A6/"/>
      <url>/2020/03/12/%E3%80%90Vuejs%E3%80%91/Vuejs%E6%8E%A5%E8%A7%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>虽然说不是第一次接触Vuejs,但是吧之前也只是打过包而已。<br>反正我是有点懵。<br>这个是依赖了ali-oss这个module进行oss文件下载运行，随便找篇百度的帖子搭建一个简单的vuejs工程，然后把我这个方案一的代码放到main.js里面，然后敲命令<br>搭建vuejs工程：<a href="https://www.jianshu.com/p/02b12c600c7b" target="_blank" rel="noopener">https://www.jianshu.com/p/02b12c600c7b</a><br>ali-oss依赖下载oss文件: <a href="https://www.cnblogs.com/zoo-x/articles/11778010.html" target="_blank" rel="noopener">https://www.cnblogs.com/zoo-x/articles/11778010.html</a><br>ali后台参考下并配置下: <a href="https://help.aliyun.com/knowledge_detail/39518.html?spm=a2c4g.11186623.2.25.46edc4516qVyeW" target="_blank" rel="noopener">https://help.aliyun.com/knowledge_detail/39518.html?spm=a2c4g.11186623.2.25.46edc4516qVyeW</a>  </p><p>反正就是多百度，多看阿里的API，要是不行就找售后提工单。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br><span class="line">cnpm <span class="keyword">run</span><span class="bash"> dev</span></span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:8080/即可" target="_blank" rel="noopener">http://localhost:8080/即可</a></p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">// The Vue build version <span class="keyword">to</span> load with the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf with an alias.</span><br><span class="line"><span class="keyword">import</span> Vue from <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App from <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router from <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> OSS from <span class="string">'ali-oss'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip =<span class="built_in"> false</span></span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 配置信息</span><br><span class="line"> */</span><br><span class="line">const region = <span class="string">'oss-cn-xxxxxxxxxxxx'</span> // 换成自己的region</span><br><span class="line">const accessKeyId = <span class="string">'xxxxxxxxxxxxxxxxx'</span> // 换成自己的accessKeyId</span><br><span class="line">const accessKeySecret = <span class="string">'xxxxxxxxxxxxxxxxxxxxxxxxx'</span> // 换成自己的accessKeySecret</span><br><span class="line">const bucket = <span class="string">'xxxxxxxxx'</span> // 换成自己的bucket名称</span><br><span class="line">// <span class="keyword">import</span> &#123; Message &#125; from <span class="string">'element-ui'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> client = new OSS(&#123;</span><br><span class="line">  region: region,</span><br><span class="line">  accessKeyId: accessKeyId,</span><br><span class="line">  accessKeySecret: accessKeySecret,</span><br><span class="line">  bucket: bucket</span><br><span class="line">&#125;)</span><br><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * @param &#123;上传是设置文<span class="built_in">件key</span> , 一般为文件名称&#125; objectKey</span><br><span class="line"> * @param &#123;文件file&#125; file</span><br><span class="line">//  上传</span><br><span class="line">const CooOss = <span class="keyword">function</span> (file) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (this instanceof CooOss) &#123;</span><br><span class="line">    <span class="keyword">let</span> objectKey = file.lastModified + <span class="string">'_'</span> + file<span class="built_in">.name</span> ;</span><br><span class="line">    <span class="keyword">return</span> new Promise((resolve,reject) =&gt; &#123;</span><br><span class="line">      client.multipartUpload(objectKey, file).<span class="keyword">then</span>(result =&gt; &#123;</span><br><span class="line">        resolve(&#123;</span><br><span class="line">          code: <span class="number">0</span>,</span><br><span class="line">          objectKey: objectKey,</span><br><span class="line">          url: this.getOssFileUrl(objectKey),</span><br><span class="line">          msg: <span class="string">'ok'</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;).<span class="keyword">catch</span>(err =&gt; &#123;</span><br><span class="line">        console.log(<span class="string">'上传出错了'</span>);</span><br><span class="line">        reject(&#123;code : -<span class="number">1</span> , url : <span class="string">""</span>, objectKey : <span class="string">""</span>, msg : <span class="string">"上传出错了"</span>&#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> new CooOss(file);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// 下载</span><br><span class="line">const downloadFile = <span class="keyword">function</span> <span class="built_in">(key</span>) &#123;</span><br><span class="line">  console.log<span class="built_in">(key</span>)</span><br><span class="line">  <span class="keyword">let</span> url = client.signatureUrl<span class="built_in">(key</span>)</span><br><span class="line">  <span class="keyword">let</span> Img = new Image()</span><br><span class="line">  <span class="keyword">let</span> dataURL = <span class="string">''</span></span><br><span class="line">  <span class="keyword">let</span> fileName =<span class="built_in"> key</span><span class="built_in">.substring</span><span class="built_in">(key</span>.indexOf(<span class="string">'_'</span>) + <span class="number">1</span>)</span><br><span class="line">  Img.src = url</span><br><span class="line">  Img.setAttribute(<span class="string">'crossOrigin'</span>, <span class="string">'Anonymous'</span>)</span><br><span class="line">  Img.onload = <span class="keyword">function</span> () &#123;</span><br><span class="line">    <span class="keyword">let</span> canvas =<span class="built_in"> document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line">    <span class="keyword">let</span> width = Img.width</span><br><span class="line">    <span class="keyword">let</span> height = Img.height</span><br><span class="line">    canvas.width = width</span><br><span class="line">    canvas.height = height</span><br><span class="line">    canvas.getContext(<span class="string">'2d'</span>).drawImage(Img, <span class="number">0</span>, <span class="number">0</span>, width, height)</span><br><span class="line">    dataURL = canvas.toDataURL(<span class="string">'image/png'</span>)</span><br><span class="line">    <span class="keyword">let</span> eleLink =<span class="built_in"> document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">    eleLink.download = fileName</span><br><span class="line">    eleLink.style.display = <span class="string">'none'</span></span><br><span class="line">    eleLink.href = dataURL</span><br><span class="line">   <span class="built_in"> document</span>.body.appendChild(eleLink)</span><br><span class="line">    eleLink.click()</span><br><span class="line">   <span class="built_in"> document</span>.body.removeChild(eleLink)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">downloadFile(<span class="string">'201912111621536609会员卡效果图.jpg'</span>)</span><br><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * @param &#123;上传是设置文<span class="built_in">件key</span> 一般是文件名&#125; obecjtKey</span><br><span class="line"> CooOss.prototype.getOssFileUrl = obecjtKey =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(!obecjtKey) <span class="keyword">return</span>  new Error(<span class="string">"object key 必须传"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"https://"</span> + bucket + <span class="string">"."</span> + region + <span class="string">".aliyuncs.com/"</span> + obecjtKey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  install(Vue)&#123;</span><br><span class="line">    Vue.prototype.Oss = &#123;</span><br><span class="line">      uploadFile : CooOss,</span><br><span class="line">      downloadFile : downloadFile</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>我自认为也不叫方案二吧，额，好吧总得给个名分。<br>就是如果要在oss下载文件，但是吧又不通过ali-oss包的话，因为david说他，觉得前端包太大了如果加了ali-oss的话，唉毕竟是老大，不敢反驳，瑟瑟发抖。好吧那就不用ali-oss进行下载oss文件。<br>然后就又换了种方法。<br>用javaScript，额这个网上一大堆啊。我也是百度的。  </p><blockquote><p>参考：  </p></blockquote><p><a href="https://www.cnblogs.com/xtjatswc/p/11345584.html" target="_blank" rel="noopener">https://www.cnblogs.com/xtjatswc/p/11345584.html</a><br><a href="https://blog.csdn.net/qq_34233080/article/details/90635235" target="_blank" rel="noopener">https://blog.csdn.net/qq_34233080/article/details/90635235</a>  </p><p>对了需要在程序当中访问，也就是localhost:8080/这种访问，清下缓存。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">售后工程师    <span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">11</span>:<span class="number">36</span>:<span class="number">22</span></span><br><span class="line">您好，这个跨域的配置是可以的，您客户端情况下浏览器缓存后，不要直接访问这个URL，直接通过程序访问测试下是否正常，避免客户端缓存的情况</span><br></pre></td></tr></table></figure><p>差不多了，讲完了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"> /**</span><br><span class="line">     * 获取页面文件名</span><br><span class="line">     * @param url 文件url 8020-8079</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">downloadUrlFile</span><span class="params">(url)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">"downloadFile====="</span>);</span></span><br><span class="line"><span class="javascript">      url= url.replace(<span class="regexp">/\\/g</span>, <span class="string">'/'</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">      xhr.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">      xhr.responseType = <span class="string">'blob'</span>;</span></span><br><span class="line"><span class="actionscript">      xhr.setRequestHeader(<span class="string">'Authorization'</span>, <span class="string">'Basic a2VybWl0Omtlcm1pdA=='</span>);</span></span><br><span class="line"><span class="actionscript">  xhr.setRequestHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'http://localhost:8080'</span>);</span></span><br><span class="line"><span class="actionscript">  xhr.setRequestHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'GET, POST, HEAD, PUT, DELETE'</span>);</span></span><br><span class="line"><span class="actionscript">  xhr.setRequestHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Content-Type'</span>);</span></span><br><span class="line"><span class="javascript">      xhr.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">        if (xhr.status === 200) &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 获取文件blob数据并保存</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> fileName = getFileName(url);</span></span><br><span class="line">          saveAs(xhr.response, fileName);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      xhr.send();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * URL方式保存文件到本地</span><br><span class="line">     * @param data 文件的blob数据</span><br><span class="line">     * @param name 文件名</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">saveAs</span><span class="params">(data, name)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> urlObject = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL || <span class="built_in">window</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> export_blob = <span class="keyword">new</span> Blob([data]);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> save_link = <span class="built_in">document</span>.createElementNS(<span class="string">'http://www.w3.org/1999/xhtml'</span>, <span class="string">'a'</span>)</span></span><br><span class="line">        save_link.href = urlObject.createObjectURL(export_blob);</span><br><span class="line">        save_link.download = name;</span><br><span class="line">        save_link.click();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 根据文件url获取文件名</span><br><span class="line">     * @param url 文件url</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">getFileName</span><span class="params">(url)</span> </span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> num = url.lastIndexOf(<span class="string">'/'</span>)+<span class="number">1</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> fileName = url.substring(num)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//把参数和文件名分割开</span></span></span><br><span class="line"><span class="javascript">        fileName = <span class="built_in">decodeURI</span>(fileName.split(<span class="string">"?"</span>)[<span class="number">0</span>]);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> fileName;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">downloadUrlFile(<span class="string">"http://   [bucket name]   .oss-cn-  [region]   .aliyuncs.com/202003031140425717批注 2020-02-20 150155.png"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> oss对象存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuejs </tag>
            
            <tag> oss </tag>
            
            <tag> nodejs </tag>
            
            <tag> CORS </tag>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot与tomcat</title>
      <link href="/2020/03/09/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90SPRINTBOOT%E3%80%91springboot%E4%B8%8Etomcat/"/>
      <url>/2020/03/09/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90SPRINTBOOT%E3%80%91springboot%E4%B8%8Etomcat/</url>
      
        <content type="html"><![CDATA[<p>「我：领赫这个项目是在docker容器当中将 项目打包成容器然后直接使用是吗？」</p><hr><p>「David：不是」</p><hr><p>「David：docker你就理解为一个虚拟机」</p><hr><p>「David：跟项目没有关系」</p><hr><p>「我：那是不是类似于，hbuilder一样  www下直接访问的那种一个站点目录」</p><hr><p>「我：我知道理解为一个虚拟机」</p><hr><p>「David：docker容器里面直接跑了个java spring boot程序」</p><hr><p>「我：你说docker是一个虚拟机，虚拟机也就相当于是远程服务器，远程服务器呢也就相当于是本机，docker当中配置了nginx,也就相当于是本机配置了nginx, 对啊」</p><hr><p>「我：本机当中也就是直接跑了hbuilder的网页也可以跑噻，而java直接跑的前提是装了环境噻，」</p><hr><p>「David：docker当中配置了nginx,也就相当于是本机配置了nginx, 这句话又毛病」</p><hr><p>「我：docker当中没有配置NGINX？」</p><hr><p>「David：没有」</p><hr><p>「我：那就是服务器配置了nginx是吧」</p><hr><p>「David：是的」</p><hr><p>「我：就好像我们的本机  cmd,  javac 编译 java运行」</p><hr><p>「我：也是不需要容器的」</p><hr><p>「David：当然docker中也可以配置nginx，服务器也可以配置。如果服务器不想配置nginx，想使用docker中的nginx，那么需要把服务器的80端口映射到docker容器中就可以了」</p><hr><p>「我：而，领赫这个项目，就相当于是在cmd当中，只要额配置了java环境，那么」</p><hr><p>「我：就可以跑起来这个意思？」</p><hr><p>「我：因为本机cmd不依赖tomcat容器也是可以进行编译以及运行java的」</p><hr><p>「David：「 Fsn: 而，领赫这个项目，就相当于是在cmd当中，只要额配置了java环境，那么 」</p><hr><p>可以这么理解， 其实springboot自带容器。它包含了tomcat容器功能」</p><hr><p>「我：springboot 内置了tomcat」</p><hr><p>「我：那我们项目就是依赖的是springboot本身的内置tomcat是吧」</p><hr><p>「David：是的」</p><hr><p>「我：cmd 这种的」</p><hr><p>「我：cmd他就只能是运行单个文件，而无法部署一个web应用是吧」</p><hr><p>「David：你不要以为tomat好像很大一样，对操作系统来说它也只是个进程，跟命令行启动一个java程序没什么区别。」</p><hr><p>「我：cmd 进行javac java 是没有依赖tomcat的」</p><hr><p>「我：是吧」</p><hr><p>「David：是的」</p><hr><p>「David：tomcat你可以理解为也是一个普通java程序」</p><hr><p>「我：cmd进行javac java是泡在java虚拟机上面」</p><hr><p>「我：tomcat 也是跑在虚拟机上面」</p><hr><p>「David：我们项目丢到tomcat里，相当于项目就是tomcat的一部分了，或者你理解为它的一个模块」</p><hr><p>「David：如果用tomcat。来了一个http请求，tomcat先收到这个请求，然后再路由到我们项目中」</p><hr><p>「我：借助了tomcat进行发布，部署，tomcat会有一个pid, 就相当于是一个站点，，，，，，他本来就是一个程序啊，然后我们通过这个pid,进程号可以知道端口号，通过端口号访问进来， 访问的即根目录，而这个根目录是可以进行设置的」</p><hr><p>「我：我有点不知道自己在纠结什么….」</p><hr><p>「我：哦哦哦，springboot,依赖了一个jar,关于tomcat的jar,是这些个jar在起作用是吧，把tomcat打成了jar是吧」</p><hr><p>「David：如果用tomcat，那么你tomcat启动在哪个端口，你项目运行就早那个端口。比如8080，那么tomcat中的所有项目都在8080。如果不用tomcat，就是你每个项目各自可以有各自的端口」</p><hr><p>「David：「 Fsn: 哦哦哦，springboot,依赖了一个jar,关于tomcat的jar,是这些个jar在起作用是吧，把tomcat打成了jar是吧 」</p><hr><p>对」</p><hr><p>「我：这样依赖，每个项目都需要tomcat这个jar,或者不是不一定是tomcat的jar,其他的jar也可以，但是需要依赖jar是吧」</p><hr><p>「David：不能完全说把tomcat打包成了jar。」</p><hr><p>「David：其他的jar当然也可以啊，而且不止一个jar。这个类似tomcat的jar无非就是实现了，监听http请求，路由请求等等基础功能」</p><hr><p>「David：只要这个jar包实现了这些功能，都可以。」</p><hr><p>「我：对因为单独的这一个jar也依赖了其他的jar」</p><hr><p>「我：所以会需要多依赖，也就是多module,  简化了整个程序，从而没有那么肥胖，而是清爽，模块化好处是吧？  ………….我去我到底在说些什么」</p><hr><p>「David：「 Fsn: 所以会需要多依赖，也就是多module,  简化了整个程序，从而没有那么肥胖，而是清爽，模块化好处是吧？  ………….我去我到底在说些什么 」</p><hr><p>你在开始理解，到底什么是程序」</p><hr><p>「David：<a href="https://item.jd.com/12395269.html" target="_blank" rel="noopener">https://item.jd.com/12395269.html</a>  @Fsn @ChoiMinki  有时间就翻阅翻阅」</p><hr><p>「David：操作系统这本书，有利于你们对计算机的理解」</p><hr><p><a href="https://github.com/qiu-deqing/FE-interview#$html，-http，web综合问题" target="_blank" rel="noopener">https://github.com/qiu-deqing/FE-interview#$html，-http，web综合问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> springboot </tag>
            
            <tag> tomcat </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端页面双色球</title>
      <link href="/2020/03/09/%E3%80%90%E5%91%A8%E5%BD%A4%E5%BD%A4%E3%80%91/%E3%80%90%E5%91%A8%E5%BD%A4%E5%BD%A4%E3%80%91%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A21/"/>
      <url>/2020/03/09/%E3%80%90%E5%91%A8%E5%BD%A4%E5%BD%A4%E3%80%91/%E3%80%90%E5%91%A8%E5%BD%A4%E5%BD%A4%E3%80%91%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A21/</url>
      
        <content type="html"><![CDATA[<h2 id="需求内容"><a href="#需求内容" class="headerlink" title="需求内容"></a>需求内容</h2><p>长这样：<a href="http://120.78.211.216:8080/maima/list2" target="_blank" rel="noopener">http://120.78.211.216:8080/maima/list2</a>  </p><p>「来日方长：这是一列的吧」</p><hr><p>「来日方长：七列都要有」</p><hr><p>「来日方长：七个数字 每个数字有七列」</p><hr><p>「来日方长：你想一下那个表格要怎么排版」</p><hr><p>「来日方长：你测试数据再改一下」</p><hr><p>「来日方长：一个隔两个一个隔三个」</p><hr><p>「我：总排最大遗漏数什么意思来着我给忘了」</p><hr><p>「我：数字搜索了多少个，然后总排当中就调出这些数字的在7列当中的最大遗漏数是吧」</p><hr><p>「我：没有出现最大遗漏数的也就是1都没有的我用-代替了」</p><hr><p>「来日方长：你这个有点不对吧」</p><hr><p>「来日方长：遗漏数是所有的数据对比 不是当页的」</p><hr><p>「来日方长：但是遗漏数是所有数据对比」</p><hr><p>「来日方长：还有 你这个遗漏数啊 还是不够勒」</p><hr><p>「来日方长：就每一个数字 都有七列的遗漏数」</p><hr><p>「来日方长：遗漏数 是他搜索哪个数字」</p><hr><p>「来日方长：就用哪个数字去做遗漏数对比」</p><hr><p>「来日方长：最多可以七个」</p><hr><p>「来日方长：意思就是每一个数字有七个单排遗漏数」</p><hr><p>「我：那他要是不搜的话，单排 总排都没有是吧」</p><hr><p>「来日方长：记得再加一个时间筛选」</p><hr><p>「来日方长：新增和修改」</p><hr><p>「我：我有个问题，其实数据可以查很多个的」</p><hr><p>「我：就是数字搜索那里，可以搜索不止7个的」</p><hr><p>「我：但是只搜索七个是吧」</p><hr><p>也行，要不你说很多吧不限制「我：单排最大遗漏数说的不是数字吧」</p><hr><p>「我：而是之间的差index吧？」</p><hr><p>「我：我跟你理一理，单排是指的每一列当中单列当中当前查询的该数字的最大差index,而总排是指的是每一列当中的最大index取最大值是不是」</p><hr><p>「来日方长：那个页面是响应式的不」</p><hr><p>大概的一个意思就是，给一个数组给前端，<br>数组当中存在多个类似对象数据  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;<span class="string">"number"</span>:<span class="number">1</span>,<span class="string">"one"</span>:<span class="number">1</span>,<span class="string">"two"</span>:<span class="number">1</span>,<span class="string">"three"</span>:<span class="number">1</span>,<span class="string">"four"</span>:<span class="number">1</span>,<span class="string">"five"</span>:<span class="number">1</span>,,<span class="string">"six"</span>:<span class="number">1</span>,<span class="string">"seven"</span>:<span class="number">1</span>,<span class="string">"time"</span>:<span class="number">2020</span><span class="number">-01</span><span class="number">-01</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"number"</span>:<span class="number">1</span>,<span class="string">"one"</span>:<span class="number">1</span>,<span class="string">"two"</span>:<span class="number">1</span>,<span class="string">"three"</span>:<span class="number">1</span>,<span class="string">"four"</span>:<span class="number">1</span>,<span class="string">"five"</span>:<span class="number">1</span>,,<span class="string">"six"</span>:<span class="number">1</span>,<span class="string">"seven"</span>:<span class="number">1</span>,<span class="string">"time"</span>:<span class="number">2020</span><span class="number">-01</span><span class="number">-01</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"number"</span>:<span class="number">1</span>,<span class="string">"one"</span>:<span class="number">1</span>,<span class="string">"two"</span>:<span class="number">1</span>,<span class="string">"three"</span>:<span class="number">1</span>,<span class="string">"four"</span>:<span class="number">1</span>,<span class="string">"five"</span>:<span class="number">1</span>,,<span class="string">"six"</span>:<span class="number">1</span>,<span class="string">"seven"</span>:<span class="number">1</span>,<span class="string">"time"</span>:<span class="number">2020</span><span class="number">-01</span><span class="number">-01</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"number"</span>:<span class="number">1</span>,<span class="string">"one"</span>:<span class="number">1</span>,<span class="string">"two"</span>:<span class="number">1</span>,<span class="string">"three"</span>:<span class="number">1</span>,<span class="string">"four"</span>:<span class="number">1</span>,<span class="string">"five"</span>:<span class="number">1</span>,,<span class="string">"six"</span>:<span class="number">1</span>,<span class="string">"seven"</span>:<span class="number">1</span>,<span class="string">"time"</span>:<span class="number">2020</span><span class="number">-01</span><span class="number">-01</span>&#125;,</span><br><span class="line">  ...]</span><br></pre></td></tr></table></figure><p>然后前端根据这个数据做出表格  </p><blockquote><p>example</p></blockquote><table><thead><tr><th>期数</th><th>开奖日期</th><th>第一位数</th><th>第二位数</th><th>第三位数</th><th>第四位数</th><th>第五位数</th><th>第六位数</th><th>第七位数</th></tr></thead><tbody><tr><td>number</td><td>time</td><td>one</td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td>one</td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td>one</td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td>one</td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>遗漏信息</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>数字-<br>单排最大遗漏数-<br>总排最大遗漏数</td><td></td><td>第一列最大遗漏数</td><td>第二列最大遗漏数</td><td>第三列最大遗漏数</td><td>第四列最大遗漏数</td><td>第五列最大遗漏数</td><td>第六列最大遗漏数</td><td>第七列最大遗漏数</td></tr></tbody></table><p>数字指的是搜索的数字，做多可以搜索n+，即有一个数字搜索、（开始时间、结束时间）时间筛选的表格，数字搜索为搜索的搜索的数字如果多个通过,逗号隔开，且搜索的数字匹配满足其中字段当中一个即带出该条记录。<br>(“one”:1,”two”:1,”three”:1,<br>“four”:1,”five”:1,”six”:1,”seven”:1)<br>单排最大遗漏数指的是，在th:第一列数该列当中，进行搜索数字one:01,即比如说第一列当中第一行数据为01，第一列当中第三行数据为01，那么，第一行第一列的01与第三行第一列的01的遗漏数为1  </p><table><thead><tr><th>期数</th><th>开奖日期</th><th>第一位数</th><th>第二位数</th><th>第三位数</th><th>第四位数</th><th>第五位数</th><th>第六位数</th><th>第七位数</th></tr></thead><tbody><tr><td>number</td><td>time</td><td><span style="color:red">01</span></td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td>one</td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td><span style="color:red">01</span></td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td>one</td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>遗漏信息</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>数字-<br>单排最大遗漏数-<br>总排最大遗漏数</td><td></td><td>第一列最大遗漏数</td><td>第二列最大遗漏数</td><td>第三列最大遗漏数</td><td>第四列最大遗漏数</td><td>第五列最大遗漏数</td><td>第六列最大遗漏数</td><td>第七列最大遗漏数</td></tr></tbody></table><p>而最大遗漏数，即比如第一列第一行的数值为01，第一列第二行的数值为01，第一列第三行的数值为01，第一列第五行的数值为01，那么第一列one，当中搜索01的单排最大遗漏数为3，也就是该列当中第一次出现该数值的index:0，  该列当中最后一次出现该数值的index:4，他们之间的差值4-0-1，也就是该列的manIndex-minIndex-1=3，td.index从0开始  </p><table><thead><tr><th>期数</th><th>开奖日期</th><th>第一位数</th><th>第二位数</th><th>第三位数</th><th>第四位数</th><th>第五位数</th><th>第六位数</th><th>第七位数</th></tr></thead><tbody><tr><td>number</td><td>time</td><td><span style="color:red">01</span></td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td><span style="color:red">01</span></td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td><span style="color:red">01</span></td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td>one</td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td><span style="color:red">01</span></td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>遗漏信息</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>数字-<br>单排最大遗漏数-<br>总排最大遗漏数</td><td></td><td>第一列最大遗漏数</td><td>第二列最大遗漏数</td><td>第三列最大遗漏数</td><td>第四列最大遗漏数</td><td>第五列最大遗漏数</td><td>第六列最大遗漏数</td><td>第七列最大遗漏数</td></tr></tbody></table><p>好，那么再说下总排最大遗漏数，总排最大遗漏数的意思就是第一列当中第一行出现搜索的数值01，第二列第三行出现搜索的数据01，那么在一、二列当中的总排遗漏数为1，而相对于7列来说，for example，第一列第三行出现搜索数值01，第二列第五行出现搜索数值01，第三列第六行出现搜索数值01，第四列第九行出现搜索数值01，第五列第五行出现搜索数值01，第六列第二行出现搜索数值01，第七列第一行出现搜索数值01，那么总排最大遗漏数为8  </p><table><thead><tr><th>期数</th><th>开奖日期</th><th>第一位数</th><th>第二位数</th><th>第三位数</th><th>第四位数</th><th>第五位数</th><th>第六位数</th><th>第七位数</th></tr></thead><tbody><tr><td>number</td><td>time</td><td>one</td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td><span style="color:red">01</span></td></tr><tr><td>number</td><td>time</td><td>one</td><td>two</td><td>three</td><td>four</td><td>five</td><td><span style="color:red">01</span></td><td>seven</td></tr><tr><td>number</td><td>time</td><td><span style="color:red">01</span></td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td>one</td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td>one</td><td><span style="color:red">01</span></td><td>three</td><td>four</td><td><span style="color:red">01</span></td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td>one</td><td>two</td><td><span style="color:red">01</span></td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td>one</td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td>one</td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td>one</td><td>two</td><td>three</td><td><span style="color:red">01</span></td><td>five</td><td>six</td><td>seven</td></tr><tr><td>number</td><td>time</td><td>one</td><td>two</td><td>three</td><td>four</td><td>five</td><td>six</td><td>seven</td></tr><tr><td>遗漏信息</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>数字-<br>单排最大遗漏数-<br>总排最大遗漏数</td><td></td><td>第一列最大遗漏数</td><td>第二列最大遗漏数</td><td>第三列最大遗漏数</td><td>第四列最大遗漏数</td><td>第五列最大遗漏数</td><td>第六列最大遗漏数</td><td>第七列最大遗漏数</td></tr></tbody></table><blockquote><p>max.html-demo</p></blockquote><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">function Map() </span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">    /** 存放键的数组(遍历用到) */    </span></span><br><span class="line"><span class="xquery">    this.keys = new Array();     </span></span><br><span class="line"><span class="xquery">    /** 存放数据 */    </span></span><br><span class="line"><span class="xquery">    this.data = new Object();     </span></span><br><span class="line"></span><br><span class="line"><span class="xquery">    /**   </span></span><br><span class="line"><span class="xquery">     * 放入一个键值对   </span></span><br><span class="line"><span class="xquery">     * @param &#123;String&#125;</span><span class="xml"> key   </span></span><br><span class="line"><span class="xml">     * @param </span><span class="xquery">&#123;Object&#125;</span><span class="xml"> value   </span></span><br><span class="line"><span class="xml">     */    </span></span><br><span class="line"><span class="xml">    this.put = function(key, value) </span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">        <span class="keyword">if</span>(this.data<span class="built_in">[key</span>] == null)&#123;     </span></span><br><span class="line"><span class="xquery">            this.keys.push<span class="built_in">(key</span>);     </span></span><br><span class="line"><span class="xquery">        &#125;</span><span class="xml">     </span></span><br><span class="line"><span class="xml">        this.data[key] = value;     </span></span><br><span class="line"><span class="xml">    &#125;;     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    /**   </span></span><br><span class="line"><span class="xml">     * 获取某键对应的值   </span></span><br><span class="line"><span class="xml">     * @param </span><span class="xquery">&#123;String&#125;</span><span class="xml"> key   </span></span><br><span class="line"><span class="xml">     * @return </span><span class="xquery">&#123;Object&#125;</span><span class="xml"> value   </span></span><br><span class="line"><span class="xml">     */    </span></span><br><span class="line"><span class="xml">    this.get = function(key) </span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">        <span class="keyword">return</span> this.data<span class="built_in">[key</span>];     </span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml">;     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    /**   </span></span><br><span class="line"><span class="xml">     * 删除一个键值对   </span></span><br><span class="line"><span class="xml">     * @param </span><span class="xquery">&#123;String&#125;</span><span class="xml"> key   </span></span><br><span class="line"><span class="xml">     */    </span></span><br><span class="line"><span class="xml">    this.remove = function(key) </span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">        this.keys<span class="built_in">.remove</span><span class="built_in">(key</span>);     </span></span><br><span class="line"><span class="xquery">        this.data<span class="built_in">[key</span>] = null;     </span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml">;     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    /**   </span></span><br><span class="line"><span class="xml">     * 遍历Map,执行处理函数   </span></span><br><span class="line"><span class="xml">     *    </span></span><br><span class="line"><span class="xml">     * @param </span><span class="xquery">&#123;Function&#125;</span><span class="xml"> 回调函数 function(key,value,index)</span><span class="xquery">&#123;..&#125;</span><span class="xml">   </span></span><br><span class="line"><span class="xml">     */    </span></span><br><span class="line"><span class="xml">    this.each = function(fn)</span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">        <span class="keyword">if</span>(typeof fn != <span class="string">'function'</span>)&#123;     </span></span><br><span class="line"><span class="xquery">            <span class="keyword">return</span>;     </span></span><br><span class="line"><span class="xquery">        &#125;</span><span class="xml">     </span></span><br><span class="line"><span class="xml">        var len = this.keys.length;     </span></span><br><span class="line"><span class="xml">        for(var i=0;i<span class="tag">&lt;<span class="name">len;i++)</span></span></span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">            var k = this.keys[i];     </span></span><br><span class="line"><span class="xquery">            fn(k,this.data[k],i);     </span></span><br><span class="line"><span class="xquery">        &#125;</span><span class="xml">     </span></span><br><span class="line"><span class="xml">    &#125;;     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    /**   </span></span><br><span class="line"><span class="xml">     * 获取键值数组(类似</span><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://lib.csdn.net/base/java"</span> <span class="attr">class</span>=<span class="string">'replace_word'</span> <span class="attr">title</span>=<span class="string">"Java 知识库"</span> <span class="attr">target</span>=<span class="string">'_blank'</span> <span class="attr">style</span>=<span class="string">'color:#df3434; font-weight:bold;'</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml">的entrySet())   </span></span><br><span class="line"><span class="xml">     * @return 键值对象</span><span class="xquery"><span class="built_in">&#123;key</span>,<span class="keyword">value</span>&#125;</span><span class="xml">的数组   </span></span><br><span class="line"><span class="xml">     */    </span></span><br><span class="line"><span class="xml">    this.entrys = function() </span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">        var len = this.keys.length;     </span></span><br><span class="line"><span class="xquery">        var entrys = new Array(len);     </span></span><br><span class="line"><span class="xquery">        <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; len; i++) &#123;     </span></span><br><span class="line"><span class="xquery">            entrys[i] = &#123;     </span></span><br><span class="line"><span class="xquery">               <span class="built_in"> key</span> : this.keys[i],     </span></span><br><span class="line"><span class="xquery">                <span class="keyword">value</span> : this.data[i]     </span></span><br><span class="line"><span class="xquery">            &#125;</span><span class="xml">;     </span></span><br><span class="line"><span class="xml">        &#125;     </span></span><br><span class="line"><span class="xml">        return entrys;     </span></span><br><span class="line"><span class="xml">    &#125;;     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    /**   </span></span><br><span class="line"><span class="xml">     * 判断Map是否为空   </span></span><br><span class="line"><span class="xml">     */    </span></span><br><span class="line"><span class="xml">    this.isEmpty = function() </span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">        <span class="keyword">return</span> this.keys.length == <span class="number">0</span>;     </span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml">;     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    /**   </span></span><br><span class="line"><span class="xml">     * 获取键值对数量   </span></span><br><span class="line"><span class="xml">     */    </span></span><br><span class="line"><span class="xml">    this.size = function()</span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">        <span class="keyword">return</span> this.keys.length;     </span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml">;     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    /**   </span></span><br><span class="line"><span class="xml">     * 重写toString    </span></span><br><span class="line"><span class="xml">     */    </span></span><br><span class="line"><span class="xml">    this.toString = function()</span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">        var s = <span class="string">"&#123;"</span>;     </span></span><br><span class="line"><span class="xquery">        <span class="keyword">for</span>(var i=<span class="number">0</span>;i&lt;this.keys.length;i++,s+=<span class="string">','</span>)&#123;     </span></span><br><span class="line"><span class="xquery">            var k = this.keys[i];     </span></span><br><span class="line"><span class="xquery">            s += k+<span class="string">"="</span>+this.data[k];     </span></span><br><span class="line"><span class="xquery">        &#125;</span><span class="xml">   </span></span><br><span class="line"><span class="xml">s=s.substr(0,s.length-1);</span></span><br><span class="line"><span class="xml">        s+="&#125;";     </span></span><br><span class="line"><span class="xml">        return s;     </span></span><br><span class="line"><span class="xml">    &#125;;     </span></span><br><span class="line"><span class="xml">&#125;     </span></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml">var arrays=[01,28,19,35,43,08,01,12,32,41];</span></span><br><span class="line"><span class="xml">console.log(arrays);</span></span><br><span class="line"><span class="xml">var flag=true;</span></span><br><span class="line"><span class="xml">var map=new Map();</span></span><br><span class="line"><span class="xml">for(var i=0;i<span class="tag">&lt;<span class="name">arrays.length;i++)</span></span></span><span class="xquery">&#123; //循环<span class="number">10</span>次</span></span><br><span class="line"><span class="xquery">var <span class="keyword">element</span>=arrays[i];//数组当中具体的元素</span></span><br><span class="line"><span class="xquery"><span class="keyword">map</span>.put(<span class="keyword">element</span>,0);//放入的只有9个</span></span><br><span class="line"><span class="xquery"></span></span><br><span class="line"><span class="xquery"><span class="keyword">for</span>(var n=<span class="number">0</span>;n&lt;arrays.length;n++)&#123; //循环<span class="number">10</span>次 </span></span><br><span class="line"><span class="xquery">var<span class="built_in"> key</span>=arrays[n];</span></span><br><span class="line"><span class="xquery">//console.log(<span class="string">"当前遍历的element: "</span>+<span class="keyword">element</span>+"；所处index: "+i+"  map当中循环的<span class="keyword">element</span>: "+key+"所处index: "+n)</span></span><br><span class="line"><span class="xquery"><span class="keyword">if</span><span class="built_in">(key</span>!=null &amp;&amp;<span class="built_in"> key</span>==<span class="keyword">element</span>)&#123; //如果存在有当前循环的数组当中的取值与<span class="keyword">map</span>当中的键相同的则重新赋值，重新赋值后进行下一次break;</span></span><br><span class="line"><span class="xquery">var y=i-n;</span></span><br><span class="line"><span class="xquery">//console.log(<span class="string">"key: "</span><span class="built_in">+key</span>+<span class="string">" element:"</span>+<span class="keyword">element</span>+" y: "+y);</span></span><br><span class="line"><span class="xquery"><span class="keyword">map</span>.put(<span class="keyword">element</span>,y);//此处的y没有减去当前自己的位数,所以当单排最大遗漏数查询的时候还需要-1</span></span><br><span class="line"><span class="xquery">break;</span></span><br><span class="line"><span class="xquery">&#125;</span><span class="xml">else</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">continue;</span></span><br><span class="line"><span class="xquery">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">//console.log(map.toString());</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">var mapArrays=map.entrys();</span></span><br><span class="line"><span class="xml">var maxValue=0;</span></span><br><span class="line"><span class="xml">var maxKey=0;</span></span><br><span class="line"><span class="xml">for(var i=0;i<span class="tag">&lt;<span class="name">mapArrays.length;i++)</span></span></span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">var<span class="built_in"> key</span>=mapArrays[i]<span class="built_in">.key</span>;</span></span><br><span class="line"><span class="xquery">var <span class="keyword">value</span>=<span class="keyword">map</span>.get<span class="built_in">(key</span>);</span></span><br><span class="line"><span class="xquery">//console.log(<span class="string">"key: "</span><span class="built_in">+key</span>+<span class="string">" value:"</span>+<span class="keyword">value</span>);</span></span><br><span class="line"><span class="xquery"><span class="keyword">if</span>(maxValue&lt;<span class="keyword">value</span>)&#123;</span></span><br><span class="line"><span class="xquery">maxValue=<span class="keyword">value</span>;</span></span><br><span class="line"><span class="xquery">maxKey<span class="built_in">=key</span>;</span></span><br><span class="line"><span class="xquery">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">console.log("单排最大遗漏数为 - key:"+maxKey+"  value:"+(maxValue-1));</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">var numbers="hello,world,hello,world,hello,wrold";</span></span><br><span class="line"><span class="xml">var nums=numbers.split(",");</span></span><br><span class="line"><span class="xml">console.log("nums: "+nums.length);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">*/</span></span><br><span class="line"><span class="xml"> var tr0=detailData.insertRow(arrays.length+1);</span></span><br><span class="line"><span class="xml"> var td0=tr0.insertCell(0);</span></span><br><span class="line"><span class="xml"> td0.colSpan=2;</span></span><br><span class="line"><span class="xml"> td0.innerHTML="遗漏信息";</span></span><br><span class="line"><span class="xml"> td0.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml"> var td00=tr0.insertCell(1);</span></span><br><span class="line"><span class="xml"> td00.colSpan=7;</span></span><br><span class="line"><span class="xml"> var tr=detailData.insertRow(arrays.length+2);</span></span><br><span class="line"><span class="xml"> var td=tr.insertCell(0);</span></span><br><span class="line"><span class="xml"> td.innerHTML="数字";</span></span><br><span class="line"><span class="xml"> td.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml"> td.colSpan=2;</span></span><br><span class="line"><span class="xml"> var tr2=detailData.insertRow(arrays.length+3);</span></span><br><span class="line"><span class="xml"> var td2=tr2.insertCell(0);</span></span><br><span class="line"><span class="xml"> td2.innerHTML="单排最大遗漏数";</span></span><br><span class="line"><span class="xml"> td2.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml"> td2.colSpan=2;</span></span><br><span class="line"><span class="xml"> var tr3=detailData.insertRow(arrays.length+4);</span></span><br><span class="line"><span class="xml"> var td3=tr3.insertCell(0);</span></span><br><span class="line"><span class="xml"> td3.innerHTML="总排最大遗漏数";</span></span><br><span class="line"><span class="xml"> td3.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml"> td3.colSpan=2;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">//当前7个数组当中都存有对应的数值</span></span><br><span class="line"><span class="xml"> for(var t=0;t<span class="tag">&lt;<span class="name">sumArray.length;t++)</span></span></span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery"> // var arrays=[<span class="number">01</span>,<span class="number">28</span>,<span class="number">19</span>,<span class="number">35</span>,<span class="number">43</span>,08,<span class="number">01</span>,<span class="number">12</span>,<span class="number">32</span>,<span class="number">41</span>];</span></span><br><span class="line"><span class="xquery"> var arrays=sumArray[t];//单个数组</span></span><br><span class="line"><span class="xquery"> console.log(arrays);</span></span><br><span class="line"><span class="xquery"> var flag<span class="built_in">=true</span>;</span></span><br><span class="line"><span class="xquery"> var <span class="keyword">map</span>=new Map();</span></span><br><span class="line"><span class="xquery"> <span class="keyword">for</span>(var i=<span class="number">0</span>;i&lt;arrays.length;i++)&#123; //循环<span class="number">10</span>次</span></span><br><span class="line"><span class="xquery"> var <span class="keyword">element</span>=arrays[i];//数组当中具体的元素</span></span><br><span class="line"><span class="xquery"> <span class="keyword">map</span>.put(<span class="keyword">element</span>,0);//放入的只有9个</span></span><br><span class="line"></span><br><span class="line"><span class="xquery"> <span class="keyword">for</span>(var n=<span class="number">0</span>;n&lt;arrays.length;n++)&#123; //循环<span class="number">10</span>次</span></span><br><span class="line"><span class="xquery"> var<span class="built_in"> key</span>=arrays[n];</span></span><br><span class="line"><span class="xquery"> //console.log(<span class="string">"当前遍历的element: "</span>+<span class="keyword">element</span>+"；所处index: "+i+"  map当中循环的<span class="keyword">element</span>: "+key+"所处index: "+n)</span></span><br><span class="line"><span class="xquery"> <span class="keyword">if</span><span class="built_in">(key</span>!=null &amp;&amp;<span class="built_in"> key</span>==<span class="keyword">element</span>)&#123; //如果存在有当前循环的数组当中的取值与<span class="keyword">map</span>当中的键相同的则重新赋值，重新赋值后进行下一次break;</span></span><br><span class="line"><span class="xquery"> var y=i-n;</span></span><br><span class="line"><span class="xquery"> //console.log(<span class="string">"key: "</span><span class="built_in">+key</span>+<span class="string">" element:"</span>+<span class="keyword">element</span>+" y: "+y);</span></span><br><span class="line"><span class="xquery"> <span class="keyword">map</span>.put(<span class="keyword">element</span>,y);//此处的y没有减去当前自己的位数,所以当单排最大遗漏数查询的时候还需要-1</span></span><br><span class="line"><span class="xquery"> break;</span></span><br><span class="line"><span class="xquery"> &#125;</span><span class="xml">else</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery"> continue;</span></span><br><span class="line"><span class="xquery"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> //console.log(map.toString());</span></span><br><span class="line"><span class="xml"> var mapArrays=map.entrys();</span></span><br><span class="line"><span class="xml"> var maxValue=0;</span></span><br><span class="line"><span class="xml"> var maxKey=0;</span></span><br><span class="line"><span class="xml"> for(var i=0;i<span class="tag">&lt;<span class="name">mapArrays.length;i++)</span></span></span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery"> var<span class="built_in"> key</span>=mapArrays[i]<span class="built_in">.key</span>;</span></span><br><span class="line"><span class="xquery"> var <span class="keyword">value</span>=<span class="keyword">map</span>.get<span class="built_in">(key</span>);</span></span><br><span class="line"><span class="xquery"> //console.log(<span class="string">"key: "</span><span class="built_in">+key</span>+<span class="string">" value:"</span>+<span class="keyword">value</span>);</span></span><br><span class="line"><span class="xquery"> <span class="keyword">if</span>(maxValue&lt;<span class="keyword">value</span>)&#123;</span></span><br><span class="line"><span class="xquery"> maxValue=<span class="keyword">value</span>;</span></span><br><span class="line"><span class="xquery"> maxKey<span class="built_in">=key</span>;</span></span><br><span class="line"><span class="xquery"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> console.log("单排最大遗漏数为 - key:"+maxKey+"  value:"+(maxValue-1));</span></span><br><span class="line"><span class="xml"> //添加元素</span></span><br><span class="line"><span class="xml"> var td4=tr.insertCell(t+1);</span></span><br><span class="line"><span class="xml"> if(maxKey<span class="tag">&lt;<span class="name">=0)</span></span></span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery"> td4.innerHTML=<span class="string">"-"</span>;</span></span><br><span class="line"><span class="xquery"> &#125;</span><span class="xml">else</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery"> td4.innerHTML=maxKey;</span></span><br><span class="line"><span class="xquery"> &#125;</span></span><br><span class="line"><span class="xml"> var td5=tr2.insertCell(t+1);</span></span><br><span class="line"><span class="xml"> if((maxValue-1)<span class="tag">&lt;<span class="name">=0)</span></span></span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery"> td5.innerHTML=<span class="string">"-"</span>;</span></span><br><span class="line"><span class="xquery"> &#125;</span><span class="xml">else</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery"> td5.innerHTML=(maxValue-<span class="number">1</span>);</span></span><br><span class="line"><span class="xquery"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>complete-demo</p></blockquote><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"com.alibaba.fastjson.JSONObject"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"java.util.ArrayList"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"java.util.HashMap"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"java.util.List"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"java.util.Map"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="ruby"> pageEncoding=<span class="string">"UTF-8"</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page trimDirectiveWhitespaces=<span class="string">"true"</span></span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span></span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ taglib prefix=<span class="string">"itcast"</span> uri=<span class="string">"http://itcast.cn/common/"</span></span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span></span><br><span class="line"><span class="ruby">String path = request.getContextPath();</span></span><br><span class="line"><span class="ruby">String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort()</span></span><br><span class="line"><span class="ruby">+ path + <span class="string">"/"</span>;</span></span><br><span class="line"><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="meta-string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Bootstrap Core CSS --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/metisMenu.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/dataTables.bootstrap.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/sb-admin-2.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/font-awesome.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span></span><br><span class="line"><span class="xml">  type="text/css"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/boot-crm.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span></span><br><span class="line"><span class="xml">  type="text/css"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/bootstrap-datetimepicker/4.17.47/css/bootstrap-datetimepicker.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">![endif]--</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">.inputText&#123;</span></span><br><span class="line"><span class="xml">width:200px;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">.alert &#123;</span></span><br><span class="line"><span class="xml">display: none;</span></span><br><span class="line"><span class="xml">position: fixed;</span></span><br><span class="line"><span class="xml">top: 50%;</span></span><br><span class="line"><span class="xml">left: 50%;</span></span><br><span class="line"><span class="xml">min-width: 300px;</span></span><br><span class="line"><span class="xml">max-width: 600px;</span></span><br><span class="line"><span class="xml">transform: translate(-50%,-50%);</span></span><br><span class="line"><span class="xml">z-index: 99999;</span></span><br><span class="line"><span class="xml">text-align: center;</span></span><br><span class="line"><span class="xml">padding: 15px;</span></span><br><span class="line"><span class="xml">border-radius: 3px;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">.alert-success &#123;</span></span><br><span class="line"><span class="xml">color: #3c763d;</span></span><br><span class="line"><span class="xml">background-color: #dff0d8;</span></span><br><span class="line"><span class="xml">border-color: #d6e9c6;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">.alert-info &#123;</span></span><br><span class="line"><span class="xml">color: #31708f;</span></span><br><span class="line"><span class="xml">background-color: #d9edf7;</span></span><br><span class="line"><span class="xml">border-color: #bce8f1;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">.alert-warning &#123;</span></span><br><span class="line"><span class="xml">color: #8a6d3b;</span></span><br><span class="line"><span class="xml">background-color: #fcf8e3;</span></span><br><span class="line"><span class="xml">border-color: #faebcc;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">.alert-danger &#123;</span></span><br><span class="line"><span class="xml">color: #a94442;</span></span><br><span class="line"><span class="xml">background-color: #f2dede;</span></span><br><span class="line"><span class="xml">border-color: #ebccd1;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 模态框（Modal） --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"myModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>编号 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span>  <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>期数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span>  <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"numberId"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>开奖日期 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span>  <span class="attr">style</span>=<span class="string">"width: 200px;"</span>  <span class="attr">id</span>=<span class="string">'datetimepicker3'</span> &gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">'createTime'</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第一位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"oneColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第二位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"twoColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第三位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"threeColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第四位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fourColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第五位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fiveColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第六位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sixColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第七位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sevenColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"edit()"</span>&gt;</span>提交更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 模态框（Modal） --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"myModal2"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal2"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel2"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>期数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"numberId2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>开奖日期 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span>  <span class="attr">style</span>=<span class="string">"width: 200px;"</span>  <span class="attr">id</span>=<span class="string">'datetimepicker4'</span> &gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">'createTime2'</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第一位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"oneColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第二位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"twoColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第三位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"threeColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第四位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fourColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第五位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fiveColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第六位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sixColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第七位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sevenColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"add()"</span>&gt;</span>提交更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"page-wrapper"</span> <span class="attr">style</span>=<span class="string">"height: 100%"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>数字搜索 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"number"</span> <span class="attr">value</span>=<span class="string">"$&#123;number&#125;"</span> <span class="attr">name</span>=<span class="string">"number"</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"page"</span> <span class="attr">value</span>=<span class="string">"$&#123;page&#125;"</span> <span class="attr">name</span>=<span class="string">"page"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"pageSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;pageSize&#125;"</span> <span class="attr">name</span>=<span class="string">"pageSize"</span>  <span class="attr">style</span>=<span class="string">"display: none;"</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>开始日期 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span> <span class="attr">id</span>=<span class="string">'datetimepicker1'</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"createTime3"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>结束日期 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span> <span class="attr">id</span>=<span class="string">'datetimepicker2'</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"createTime4"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"go()"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">"margin-left:10px"</span> <span class="attr">onclick</span>=<span class="string">"reset()"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">"margin-left:10px"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-target</span>=<span class="string">"#myModal2"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered table-striped"</span> <span class="attr">id</span>=<span class="string">"detailData"</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span> <span class="attr">style</span>=<span class="string">"text-align: right"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"up()"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"down()"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery-ui.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/metisMenu.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.dataTables.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/dataTables.bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/sb-admin-2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">'/static/js/stopExecutionOnTimeout.js?t=1'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/layui/layui.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/Particleground.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/Treatment.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.mockjax.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/moment.js/2.24.0/moment-with-locales.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/bootstrap-datetimepicker/4.17.47/js/bootstrap-datetimepicker.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">$(function () &#123;</span></span><br><span class="line"><span class="xml">$('#datetimepicker1').datetimepicker(&#123;</span></span><br><span class="line"><span class="xml">format: 'YYYY-MM-DD',</span></span><br><span class="line"><span class="xml">locale: moment.locale('zh-cn')</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line"><span class="xml">$('#datetimepicker2').datetimepicker(&#123;</span></span><br><span class="line"><span class="xml">format: 'YYYY-MM-DD',</span></span><br><span class="line"><span class="xml">locale: moment.locale('zh-cn')</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line"><span class="xml">$('#datetimepicker3').datetimepicker(&#123;</span></span><br><span class="line"><span class="xml">format: 'YYYY-MM-DD',</span></span><br><span class="line"><span class="xml">locale: moment.locale('zh-cn')</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line"><span class="xml">$('#datetimepicker4').datetimepicker(&#123;</span></span><br><span class="line"><span class="xml">format: 'YYYY-MM-DD',</span></span><br><span class="line"><span class="xml">locale: moment.locale('zh-cn')</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 弹出式提示框，默认1.2秒自动消失</span></span><br><span class="line"><span class="xml"> * @param message 提示信息</span></span><br><span class="line"><span class="xml"> * @param style 提示样式，有alert-success、alert-danger、alert-warning、alert-info</span></span><br><span class="line"><span class="xml"> * @param time 消失时间</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">var prompt = function (message, style, time)</span></span><br><span class="line"><span class="xml">&#123;</span></span><br><span class="line"><span class="xml">style = (style === undefined) ? 'alert-success' : style;</span></span><br><span class="line"><span class="xml">time = (time === undefined) ? 1200 : time;</span></span><br><span class="line"><span class="xml">$('<span class="tag">&lt;<span class="name">div</span>&gt;</span>')</span></span><br><span class="line"><span class="xml">.appendTo('body')</span></span><br><span class="line"><span class="xml">.addClass('alert ' + style)</span></span><br><span class="line"><span class="xml">.html(message)</span></span><br><span class="line"><span class="xml">.show()</span></span><br><span class="line"><span class="xml">.delay(time)</span></span><br><span class="line"><span class="xml">.fadeOut();</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 成功提示</span></span><br><span class="line"><span class="xml">var success_prompt = function(message, time)</span></span><br><span class="line"><span class="xml">&#123;</span></span><br><span class="line"><span class="xml">prompt(message, 'alert-success', time);</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 失败提示</span></span><br><span class="line"><span class="xml">var fail_prompt = function(message, time)</span></span><br><span class="line"><span class="xml">&#123;</span></span><br><span class="line"><span class="xml">prompt(message, 'alert-danger', time);</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 提醒</span></span><br><span class="line"><span class="xml">var warning_prompt = function(message, time)</span></span><br><span class="line"><span class="xml">&#123;</span></span><br><span class="line"><span class="xml">prompt(message, 'alert-warning', time);</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 信息提示</span></span><br><span class="line"><span class="xml">var info_prompt = function(message, time)</span></span><br><span class="line"><span class="xml">&#123;</span></span><br><span class="line"><span class="xml">prompt(message, 'alert-info', time);</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">function add()&#123;</span></span><br><span class="line"><span class="xml">console.log("==============add===============");</span></span><br><span class="line"><span class="xml">var numberId2=document.getElementById("numberId2").value;</span></span><br><span class="line"><span class="xml">var createTime2=document.getElementById("createTime2").value;</span></span><br><span class="line"><span class="xml">var oneColumn2=document.getElementById("oneColumn2").value;</span></span><br><span class="line"><span class="xml">var twoColumn2=document.getElementById("twoColumn2").value;</span></span><br><span class="line"><span class="xml">var threeColumn2=document.getElementById("threeColumn2").value;</span></span><br><span class="line"><span class="xml">var fourColumn2=document.getElementById("fourColumn2").value;</span></span><br><span class="line"><span class="xml">var fiveColumn2=document.getElementById("fiveColumn2").value;</span></span><br><span class="line"><span class="xml">var sixColumn2=document.getElementById("sixColumn2").value;</span></span><br><span class="line"><span class="xml">var sevenColumn2=document.getElementById("sevenColumn2").value;</span></span><br><span class="line"><span class="xml">if((numberId2==null || numberId2=='' || numberId2==undefined) ||</span></span><br><span class="line"><span class="xml">(createTime2==null || createTime2=='' || createTime2==undefined) ||</span></span><br><span class="line"><span class="xml">(oneColumn2==null || oneColumn2=='' || oneColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(twoColumn2==null || twoColumn2=='' || twoColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(threeColumn2==null || threeColumn2=='' || threeColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(fourColumn2==null || fourColumn2=='' || fourColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(fiveColumn2==null || fiveColumn2=='' || fiveColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(sixColumn2==null || sixColumn2=='' || sixColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(sevenColumn2==null || sevenColumn2=='' || sevenColumn2==undefined)</span></span><br><span class="line"><span class="xml">)&#123;</span></span><br><span class="line"><span class="xml">console.log("数据不完整,请检查参数并重新填写");</span></span><br><span class="line"><span class="xml">&#125;else&#123;</span></span><br><span class="line"><span class="xml">//发送请求进行新增</span></span><br><span class="line"><span class="xml">var requestDataBean = &#123;</span></span><br><span class="line"><span class="xml">numberId:numberId2,</span></span><br><span class="line"><span class="xml">createTime:createTime2,</span></span><br><span class="line"><span class="xml">oneColumn:oneColumn2,</span></span><br><span class="line"><span class="xml">twoColumn:twoColumn2,</span></span><br><span class="line"><span class="xml">threeColumn:threeColumn2,</span></span><br><span class="line"><span class="xml">fourColumn:fourColumn2,</span></span><br><span class="line"><span class="xml">fiveColumn:fiveColumn2,</span></span><br><span class="line"><span class="xml">sixColumn:sixColumn2,</span></span><br><span class="line"><span class="xml">sevenColumn:sevenColumn2</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">console.log("add - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">var url="/maima/addMaiMa";</span></span><br><span class="line"><span class="xml">AjaxPost(url, requestDataBean,</span></span><br><span class="line"><span class="xml">function () &#123;</span></span><br><span class="line"><span class="xml">//ajax加载中</span></span><br><span class="line"><span class="xml">&#125;,</span></span><br><span class="line"><span class="xml">function (data) &#123;</span></span><br><span class="line"><span class="xml">console.log("========数据获取成功======");</span></span><br><span class="line"><span class="xml">if(data!=null &amp;&amp; data.Code!=null &amp;&amp; data.Code==200 &amp;&amp; data.Status!=null &amp;&amp; data.Status=="ok")&#123;</span></span><br><span class="line"><span class="xml">success_prompt(data.Msg,2000);</span></span><br><span class="line"><span class="xml">go();//flush</span></span><br><span class="line"><span class="xml">&#125;else &#123;</span></span><br><span class="line"><span class="xml">fail_prompt(data.Msg,2000);</span></span><br><span class="line"><span class="xml">AjaxErro(data);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">function edit()&#123;</span></span><br><span class="line"><span class="xml">console.log("==============edit===============");</span></span><br><span class="line"><span class="xml">var id=document.getElementById("id").value;</span></span><br><span class="line"><span class="xml">var numberId2=document.getElementById("numberId").value;</span></span><br><span class="line"><span class="xml">var createTime2=document.getElementById("createTime").value;</span></span><br><span class="line"><span class="xml">var oneColumn2=document.getElementById("oneColumn").value;</span></span><br><span class="line"><span class="xml">var twoColumn2=document.getElementById("twoColumn").value;</span></span><br><span class="line"><span class="xml">var threeColumn2=document.getElementById("threeColumn").value;</span></span><br><span class="line"><span class="xml">var fourColumn2=document.getElementById("fourColumn").value;</span></span><br><span class="line"><span class="xml">var fiveColumn2=document.getElementById("fiveColumn").value;</span></span><br><span class="line"><span class="xml">var sixColumn2=document.getElementById("sixColumn").value;</span></span><br><span class="line"><span class="xml">var sevenColumn2=document.getElementById("sevenColumn").value;</span></span><br><span class="line"><span class="xml">if((id==null || id=='' || id==undefined)||</span></span><br><span class="line"><span class="xml">(numberId2==null || numberId2=='' || numberId2==undefined) ||</span></span><br><span class="line"><span class="xml">(createTime2==null || createTime2=='' || createTime2==undefined) ||</span></span><br><span class="line"><span class="xml">(oneColumn2==null || oneColumn2=='' || oneColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(twoColumn2==null || twoColumn2=='' || twoColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(threeColumn2==null || threeColumn2=='' || threeColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(fourColumn2==null || fourColumn2=='' || fourColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(fiveColumn2==null || fiveColumn2=='' || fiveColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(sixColumn2==null || sixColumn2=='' || sixColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">(sevenColumn2==null || sevenColumn2=='' || sevenColumn2==undefined)</span></span><br><span class="line"><span class="xml">)&#123;</span></span><br><span class="line"><span class="xml">console.log("数据不完整,请检查参数并重新填写");</span></span><br><span class="line"><span class="xml">&#125;else&#123;</span></span><br><span class="line"><span class="xml">//发送请求进行新增</span></span><br><span class="line"><span class="xml">var requestDataBean = &#123;</span></span><br><span class="line"><span class="xml">id:id,</span></span><br><span class="line"><span class="xml">numberId:numberId2,</span></span><br><span class="line"><span class="xml">createTime:createTime2,</span></span><br><span class="line"><span class="xml">oneColumn:oneColumn2,</span></span><br><span class="line"><span class="xml">twoColumn:twoColumn2,</span></span><br><span class="line"><span class="xml">threeColumn:threeColumn2,</span></span><br><span class="line"><span class="xml">fourColumn:fourColumn2,</span></span><br><span class="line"><span class="xml">fiveColumn:fiveColumn2,</span></span><br><span class="line"><span class="xml">sixColumn:sixColumn2,</span></span><br><span class="line"><span class="xml">sevenColumn:sevenColumn2</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">console.log("edit - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">var url="/maima/editMaiMa";</span></span><br><span class="line"><span class="xml">AjaxPost(url, requestDataBean,</span></span><br><span class="line"><span class="xml">function () &#123;</span></span><br><span class="line"><span class="xml">//ajax加载中</span></span><br><span class="line"><span class="xml">&#125;,</span></span><br><span class="line"><span class="xml">function (data) &#123;</span></span><br><span class="line"><span class="xml">console.log("========数据获取成功======");</span></span><br><span class="line"><span class="xml">if(data!=null &amp;&amp; data.Code!=null &amp;&amp; data.Code==200 &amp;&amp; data.Status!=null &amp;&amp; data.Status=="ok")&#123;</span></span><br><span class="line"><span class="xml">success_prompt(data.Msg,2000);</span></span><br><span class="line"><span class="xml">go();//flush</span></span><br><span class="line"><span class="xml">&#125;else &#123;</span></span><br><span class="line"><span class="xml">fail_prompt(data.Msg,2000);</span></span><br><span class="line"><span class="xml">AjaxErro(data);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">function reset()&#123;</span></span><br><span class="line"><span class="xml">document.getElementById("number").value="";</span></span><br><span class="line"><span class="xml">document.getElementById("createTime3").value="";</span></span><br><span class="line"><span class="xml">document.getElementById("createTime4").value="";</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">function show(obj,id)&#123;</span></span><br><span class="line"><span class="xml">var value0 = $(obj).parents("td").parents("tr").children("td").eq(0).text();</span></span><br><span class="line"><span class="xml">var value1 = $(obj).parents("td").parents("tr").children("td").eq(1).text();</span></span><br><span class="line"><span class="xml">var value2 = $(obj).parents("td").parents("tr").children("td").eq(2).text();</span></span><br><span class="line"><span class="xml">var value3 = $(obj).parents("td").parents("tr").children("td").eq(3).text();</span></span><br><span class="line"><span class="xml">var value4 = $(obj).parents("td").parents("tr").children("td").eq(4).text();</span></span><br><span class="line"><span class="xml">var value5 = $(obj).parents("td").parents("tr").children("td").eq(5).text();</span></span><br><span class="line"><span class="xml">var value6 = $(obj).parents("td").parents("tr").children("td").eq(6).text();</span></span><br><span class="line"><span class="xml">var value7 = $(obj).parents("td").parents("tr").children("td").eq(7).text();</span></span><br><span class="line"><span class="xml">var value8 = $(obj).parents("td").parents("tr").children("td").eq(8).text();</span></span><br><span class="line"><span class="xml">console.log("value0: "+value0+" value1: "+value1+" value2: "+value2+" value3: "+value3+" value4: "+value4+" value5: "+value5+" value6: "+value6+" value7: "+value7+" value8: "+value8);</span></span><br><span class="line"><span class="xml">document.getElementById("id").value=id;</span></span><br><span class="line"><span class="xml">document.getElementById("numberId").value=value0;</span></span><br><span class="line"><span class="xml">document.getElementById("createTime").value=value1;</span></span><br><span class="line"><span class="xml">document.getElementById("oneColumn").value=value2;</span></span><br><span class="line"><span class="xml">document.getElementById("twoColumn").value=value3;</span></span><br><span class="line"><span class="xml">document.getElementById("threeColumn").value=value4;</span></span><br><span class="line"><span class="xml">document.getElementById("fourColumn").value=value5;</span></span><br><span class="line"><span class="xml">document.getElementById("fiveColumn").value=value6;</span></span><br><span class="line"><span class="xml">document.getElementById("sixColumn").value=value7;</span></span><br><span class="line"><span class="xml">document.getElementById("sevenColumn").value=value8;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">function Map() &#123;</span></span><br><span class="line"><span class="xml">/** 存放键的数组(遍历用到) */</span></span><br><span class="line"><span class="xml">this.keys = new Array();</span></span><br><span class="line"><span class="xml">/** 存放数据 */</span></span><br><span class="line"><span class="xml">this.data = new Object();</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 放入一个键值对</span></span><br><span class="line"><span class="xml"> * @param &#123;String&#125; key</span></span><br><span class="line"><span class="xml"> * @param &#123;Object&#125; value</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">this.put = function(key, value) &#123;</span></span><br><span class="line"><span class="xml">if(this.data[key] == null)&#123;</span></span><br><span class="line"><span class="xml">this.keys.push(key);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">this.data[key] = value;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 获取某键对应的值</span></span><br><span class="line"><span class="xml"> * @param &#123;String&#125; key</span></span><br><span class="line"><span class="xml"> * @return &#123;Object&#125; value</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">this.get = function(key) &#123;</span></span><br><span class="line"><span class="xml">return this.data[key];</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 删除一个键值对</span></span><br><span class="line"><span class="xml"> * @param &#123;String&#125; key</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">this.remove = function(key) &#123;</span></span><br><span class="line"><span class="xml">this.keys.remove(key);</span></span><br><span class="line"><span class="xml">this.data[key] = null;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 遍历Map,执行处理函数</span></span><br><span class="line"><span class="xml"> *</span></span><br><span class="line"><span class="xml"> * @param &#123;Function&#125; 回调函数 function(key,value,index)&#123;..&#125;</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">this.each = function(fn)&#123;</span></span><br><span class="line"><span class="xml">if(typeof fn != 'function')&#123;</span></span><br><span class="line"><span class="xml">return;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">var len = this.keys.length;</span></span><br><span class="line"><span class="xml">for(var i=0;i<span class="tag">&lt;<span class="name">len;i++)&#123;</span></span></span></span><br><span class="line"><span class="xml">var k = this.keys[i];</span></span><br><span class="line"><span class="xml">fn(k,this.data[k],i);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 获取键值数组(类似<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://lib.csdn.net/base/java"</span> <span class="attr">class</span>=<span class="string">'replace_word'</span> <span class="attr">title</span>=<span class="string">"Java 知识库"</span> <span class="attr">target</span>=<span class="string">'_blank'</span> <span class="attr">style</span>=<span class="string">'color:#df3434; font-weight:bold;'</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span>的entrySet())</span></span><br><span class="line"><span class="xml"> * @return 键值对象&#123;key,value&#125;的数组</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">this.entrys = function() &#123;</span></span><br><span class="line"><span class="xml">var len = this.keys.length;</span></span><br><span class="line"><span class="xml">var entrys = new Array(len);</span></span><br><span class="line"><span class="xml">for (var i = 0; i <span class="tag">&lt; <span class="attr">len</span>; <span class="attr">i</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">entrys[i] = &#123;</span></span><br><span class="line"><span class="xml">key : this.keys[i],</span></span><br><span class="line"><span class="xml">value : this.data[i]</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">return entrys;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 判断Map是否为空</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">this.isEmpty = function() &#123;</span></span><br><span class="line"><span class="xml">return this.keys.length == 0;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 获取键值对数量</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">this.size = function()&#123;</span></span><br><span class="line"><span class="xml">return this.keys.length;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 重写toString</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">this.toString = function()&#123;</span></span><br><span class="line"><span class="xml">var s = "&#123;";</span></span><br><span class="line"><span class="xml">for(var i=0;i<span class="tag">&lt;<span class="name">this.keys.length;i++,s+=',')&#123;</span></span></span></span><br><span class="line"><span class="xml">var k = this.keys[i];</span></span><br><span class="line"><span class="xml">s += k+"="+this.data[k];</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">s=s.substr(0,s.length-1);</span></span><br><span class="line"><span class="xml">s+="&#125;";</span></span><br><span class="line"><span class="xml">return s;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">//上一页</span></span><br><span class="line"><span class="xml">function up()&#123;</span></span><br><span class="line"><span class="xml">var upPage=document.getElementById("page").value;</span></span><br><span class="line"><span class="xml">var pageSize=document.getElementById("pageSize").value;</span></span><br><span class="line"><span class="xml">var number=document.getElementById("number").value;</span></span><br><span class="line"><span class="xml">if(upPage=='' || upPage==undefined || upPage==null || upPage<span class="tag">&lt;<span class="name">1)&#123;</span></span></span></span><br><span class="line"><span class="xml">upPage=0;</span></span><br><span class="line"><span class="xml">&#125;else&#123;</span></span><br><span class="line"><span class="xml">upPage=upPage*1-1;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">if(upPage<span class="tag">&lt;<span class="name">0)&#123;</span></span></span></span><br><span class="line"><span class="xml">upPage=0;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">var requestDataBean = &#123;page:upPage,pageSize:pageSize*1,number:number&#125;;</span></span><br><span class="line"><span class="xml">console.log("上一页 - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">getData(requestDataBean);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">//下一页</span></span><br><span class="line"><span class="xml">function down()&#123;</span></span><br><span class="line"><span class="xml">var downPage=document.getElementById("page").value;</span></span><br><span class="line"><span class="xml">var pageSize=document.getElementById("pageSize").value;</span></span><br><span class="line"><span class="xml">var number=document.getElementById("number").value;</span></span><br><span class="line"><span class="xml">if(downPage=='' || downPage==undefined || downPage==null)&#123;</span></span><br><span class="line"><span class="xml">downPage=0;</span></span><br><span class="line"><span class="xml">&#125;else&#123;</span></span><br><span class="line"><span class="xml">downPage=downPage*1+1;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">var requestDataBean = &#123;page:downPage,pageSize:pageSize*1,number:number&#125;;</span></span><br><span class="line"><span class="xml">console.log("下一页 - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">getData(requestDataBean);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">//查询</span></span><br><span class="line"><span class="xml">function go()&#123;</span></span><br><span class="line"><span class="xml">var page=document.getElementById("page").value;</span></span><br><span class="line"><span class="xml">var pageSize=document.getElementById("pageSize").value;</span></span><br><span class="line"><span class="xml">var number=document.getElementById("number").value;</span></span><br><span class="line"><span class="xml">var createTime1=document.getElementById("createTime3").value;</span></span><br><span class="line"><span class="xml">var createTime2=document.getElementById("createTime4").value;</span></span><br><span class="line"><span class="xml">var requestDataBean = &#123;page:page*1,pageSize:pageSize*1,number:number,createTime1:createTime1,createTime2:createTime2&#125;;</span></span><br><span class="line"><span class="xml">console.log("数据查询 - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">getData(requestDataBean);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">//给detailData表格填充数据</span></span><br><span class="line"><span class="xml"> function fillDataToTable(arrays,sumArrays)&#123;</span></span><br><span class="line"><span class="xml">var detailData=document.getElementById("detailData");</span></span><br><span class="line"><span class="xml">detailData.innerHTML="";</span></span><br><span class="line"><span class="xml">var row=detailData.insertRow(0);</span></span><br><span class="line"><span class="xml">row.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml">var cell0=row.insertCell(0);</span></span><br><span class="line"><span class="xml">cell0.innerHTML="期数";</span></span><br><span class="line"><span class="xml">var cell1=row.insertCell(1);</span></span><br><span class="line"><span class="xml">cell1.innerHTML="开奖日期";</span></span><br><span class="line"><span class="xml">var cell2=row.insertCell(2);</span></span><br><span class="line"><span class="xml">cell2.innerHTML="第一位数";</span></span><br><span class="line"><span class="xml">var cell3=row.insertCell(3);</span></span><br><span class="line"><span class="xml">cell3.innerHTML="第二位数";</span></span><br><span class="line"><span class="xml">var cell4=row.insertCell(4);</span></span><br><span class="line"><span class="xml">cell4.innerHTML="第三位数";</span></span><br><span class="line"><span class="xml">var cell5=row.insertCell(5);</span></span><br><span class="line"><span class="xml">cell5.innerHTML="第四位数";</span></span><br><span class="line"><span class="xml">var cell6=row.insertCell(6);</span></span><br><span class="line"><span class="xml">cell6.innerHTML="第五位数";</span></span><br><span class="line"><span class="xml">var cell7=row.insertCell(7);</span></span><br><span class="line"><span class="xml">cell7.innerHTML="第六位数";</span></span><br><span class="line"><span class="xml">var cell8=row.insertCell(8);</span></span><br><span class="line"><span class="xml">cell8.innerHTML="第七位数";</span></span><br><span class="line"><span class="xml">var cell9=row.insertCell(9);</span></span><br><span class="line"><span class="xml"> cell9.innerHTML="操作";</span></span><br><span class="line"></span><br><span class="line"><span class="xml">//分页数据插入</span></span><br><span class="line"><span class="xml">for(var i=0;i<span class="tag">&lt;<span class="name">arrays.length;i++)&#123;</span></span></span></span><br><span class="line"><span class="xml">var json=arrays[i];</span></span><br><span class="line"><span class="xml">var row2=detailData.insertRow(i+1);</span></span><br><span class="line"><span class="xml">var cell0=row2.insertCell(0);</span></span><br><span class="line"><span class="xml">cell0.innerHTML=json.number;</span></span><br><span class="line"><span class="xml">var cell1=row2.insertCell(1);</span></span><br><span class="line"><span class="xml">cell1.innerHTML=json.createTime;</span></span><br><span class="line"><span class="xml">var cell2=row2.insertCell(2);</span></span><br><span class="line"><span class="xml">cell2.innerHTML=json.oneColumn;</span></span><br><span class="line"><span class="xml">var cell3=row2.insertCell(3);</span></span><br><span class="line"><span class="xml">cell3.innerHTML=json.twoColumn;</span></span><br><span class="line"><span class="xml">var cell4=row2.insertCell(4);</span></span><br><span class="line"><span class="xml">cell4.innerHTML=json.threeColumn;</span></span><br><span class="line"><span class="xml">var cell5=row2.insertCell(5);</span></span><br><span class="line"><span class="xml">cell5.innerHTML=json.fourColumn;</span></span><br><span class="line"><span class="xml">var cell6=row2.insertCell(6);</span></span><br><span class="line"><span class="xml">cell6.innerHTML=json.fiveColumn;</span></span><br><span class="line"><span class="xml">var cell7=row2.insertCell(7);</span></span><br><span class="line"><span class="xml">cell7.innerHTML=json.sixColumn;</span></span><br><span class="line"><span class="xml">var cell8=row2.insertCell(8);</span></span><br><span class="line"><span class="xml">cell8.innerHTML=json.sevenColumn;</span></span><br><span class="line"><span class="xml">var cell9=row2.insertCell(9);</span></span><br><span class="line"><span class="xml">cell9.innerHTML="<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">\</span>"<span class="attr">show</span>(<span class="attr">this</span>,"+<span class="attr">json.id</span>+")\" <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">btn</span> <span class="attr">btn-primary</span>\" <span class="attr">data-toggle</span>=<span class="string">\</span>"<span class="attr">modal</span>\" <span class="attr">data-target</span>=<span class="string">\</span>"#<span class="attr">myModal</span>\" &gt;</span>编辑<span class="tag">&lt;/<span class="name">button</span>&gt;</span>";</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">//单排遗漏数计算  总排遗漏数的计算应该简单，即每一排当中的最小值index，与每一排的最大值index取出来放入集合最后遍历出最小index与最大indeax进行相减即可</span></span><br><span class="line"><span class="xml"> var oneArray=[]; var twoArray=[]; var threeArray=[]; var fourArray=[]; var fiveArray=[]; var sixArray=[]; var sevenArray=[];</span></span><br><span class="line"><span class="xml"> var sumArray=[];</span></span><br><span class="line"><span class="xml"> //总数据 算遗漏数</span></span><br><span class="line"><span class="xml"> for(var i=0;i<span class="tag">&lt;<span class="name">sumArrays.length;i++)&#123;</span></span></span></span><br><span class="line"><span class="xml"> var json=sumArrays[i];</span></span><br><span class="line"><span class="xml"> oneArray.push(json.oneColumn);</span></span><br><span class="line"><span class="xml"> twoArray.push(json.twoColumn);</span></span><br><span class="line"><span class="xml"> threeArray.push(json.threeColumn);</span></span><br><span class="line"><span class="xml"> fourArray.push(json.fourColumn);</span></span><br><span class="line"><span class="xml"> fiveArray.push(json.fiveColumn);</span></span><br><span class="line"><span class="xml"> sixArray.push(json.sixColumn);</span></span><br><span class="line"><span class="xml"> sevenArray.push(json.sevenColumn);</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> //插入7列数组数据</span></span><br><span class="line"><span class="xml"> sumArray.push(oneArray);</span></span><br><span class="line"><span class="xml"> sumArray.push(twoArray);</span></span><br><span class="line"><span class="xml"> sumArray.push(threeArray);</span></span><br><span class="line"><span class="xml"> sumArray.push(fourArray);</span></span><br><span class="line"><span class="xml"> sumArray.push(fiveArray);</span></span><br><span class="line"><span class="xml"> sumArray.push(sixArray);</span></span><br><span class="line"><span class="xml"> sumArray.push(sevenArray);</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> var tr0=detailData.insertRow(arrays.length+1);</span></span><br><span class="line"><span class="xml"> var td0=tr0.insertCell(0);</span></span><br><span class="line"><span class="xml"> td0.colSpan=2;</span></span><br><span class="line"><span class="xml"> td0.innerHTML="遗漏信息";</span></span><br><span class="line"><span class="xml"> td0.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml"> var td00=tr0.insertCell(1);</span></span><br><span class="line"><span class="xml"> td00.colSpan=8;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> var tr=detailData.insertRow(arrays.length+2);</span></span><br><span class="line"><span class="xml"> var td=tr.insertCell(0);</span></span><br><span class="line"><span class="xml"> td.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml"> td.innerHTML="数字 | 单排最大遗漏数 | 总排最大遗漏数";</span></span><br><span class="line"><span class="xml"> td.colSpan=2;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> var numbers=document.getElementById("number").value.trim();</span></span><br><span class="line"><span class="xml"> console.log("nums: "+numbers.split(","));</span></span><br><span class="line"><span class="xml"> if(numbers==null || numbers=='' || numbers==undefined)&#123;//则遗漏信息、数字、单排最大遗漏数不进行显示</span></span><br><span class="line"><span class="xml"> var td11=tr.insertCell(1);</span></span><br><span class="line"><span class="xml"> td11.colSpan=8;</span></span><br><span class="line"><span class="xml"> &#125;else&#123;</span></span><br><span class="line"><span class="xml"> var nums=numbers.split(","); //则遗漏信息、数字、单排最大遗漏数进行显示 循环查询每个数值的单排 总排</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> for(var h=0;h<span class="tag">&lt;<span class="name">nums.length;h++)&#123;</span></span></span></span><br><span class="line"><span class="xml">  var number=nums[h];//查询的数值</span></span><br><span class="line"><span class="xml"> var singleMap=new Map();//关于该数值的单排遗漏数</span></span><br><span class="line"><span class="xml"> var minIndexMap=new Map();//t每一列， 每一个单排当中的最小index</span></span><br><span class="line"><span class="xml"> var maxIndexMap=new Map();//t每一列， 每一个单排当中的最大index</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> for(var t=0;t<span class="tag">&lt;<span class="name">sumArray.length;t++)&#123;</span> //当前<span class="attr">7</span>个数组当中都存有对应的数值,循环<span class="attr">7</span>次 // <span class="attr">var</span> <span class="attr">arrays</span>=<span class="string">[01,28,19,35,43,08,01,12,32,41];</span></span></span></span><br><span class="line"><span class="xml"> var arrays2=sumArray[t];//单个数组</span></span><br><span class="line"><span class="xml"> var map=new Map();</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> for(var i=0;i<span class="tag">&lt;<span class="name">arrays2.length;i++)&#123;</span></span></span></span><br><span class="line"><span class="xml"> var element=arrays2[i];//数组当中具体的元素</span></span><br><span class="line"><span class="xml"> map.put(element,0);//放入了该列当中所有不重复元素以及其世事变化的位移index+1</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> for(var n=0;n<span class="tag">&lt;<span class="name">arrays2.length;n++)&#123;</span></span></span></span><br><span class="line"><span class="xml"> var key=arrays2[n];</span></span><br><span class="line"><span class="xml"> if(key!=null &amp;&amp; key==element)&#123; //如果存在有当前循环的数组当中的取值与map当中的键相同的则重新赋值，重新赋值后进行break;</span></span><br><span class="line"><span class="xml"> var y=i-n;</span></span><br><span class="line"><span class="xml"> map.put(element,y);//此处的y没有减去当前自己的位数,所以当单排最大遗漏数查询的时候还需要-1</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> //每一组的min与max取出来之后的差也应该是该列的最大遗漏数+1，没有减1处理</span></span><br><span class="line"><span class="xml"> if(element==number)&#123; //当key不为空以及key与element相同的机会有多次，则每次赋值时进行比较看是否是最小值</span></span><br><span class="line"><span class="xml"> if(minIndexMap.get(t)==null || minIndexMap.get(t)==undefined)&#123; //取出的数值为空则说明还没有放入过值,则判断number与当前循环的element是否一致，如果一致则放入当前t与该element的位移index  //一般没有放过且第一次放的话即判断为最小index,后续无需再次判断了</span></span><br><span class="line"><span class="xml"> minIndexMap.put(t,i);</span></span><br><span class="line"><span class="xml"> &#125;else&#123;//从minIndexMap当中进行取出该t 如果当前number与当前的element相同，则放入当前element的位移,我觉得这种可能性没有</span></span><br><span class="line"><span class="xml">if(minIndexMap.get(t)&gt;i)&#123;</span></span><br><span class="line"><span class="xml">minIndexMap.put(t,i);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> if(maxIndexMap.get(t)==null || maxIndexMap.get(t)==undefined)&#123;//取最大值的话可能性就有</span></span><br><span class="line"><span class="xml"> maxIndexMap.put(t,i);</span></span><br><span class="line"><span class="xml"> &#125;else&#123;</span></span><br><span class="line"><span class="xml"> if(maxIndexMap.get(t)<span class="tag">&lt;<span class="name">i)&#123;</span></span></span></span><br><span class="line"><span class="xml"> maxIndexMap.put(t,i);</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> break;</span></span><br><span class="line"><span class="xml"> &#125;else&#123;</span></span><br><span class="line"><span class="xml"> continue;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> console.log("第"+t+"列当中，每一个元素的单排最大遗漏数："+map.toString());</span></span><br><span class="line"><span class="xml"> if(map.get(number)!=null || map.get(number)!=undefined)&#123;</span></span><br><span class="line"><span class="xml"> //取值则为当前该map.get(number)即当前列当中的单排最大遗漏数</span></span><br><span class="line"><span class="xml"> singleMap.put(t,map.get(number)-1);//key t：哪一列， value 当前该数值在当前排t的最大遗漏数  map.get(number)需要减去1</span></span><br><span class="line"><span class="xml"> &#125;else&#123;</span></span><br><span class="line"><span class="xml"> //当前列取出number如果为空则说明当前列当中不存在有该数值，则替换为0</span></span><br><span class="line"><span class="xml"> singleMap.put(t,'当前列不存在'+number);</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> console.log("minIndexMap: "+minIndexMap.toString());</span></span><br><span class="line"><span class="xml"> console.log("maxIndexMap: "+maxIndexMap.toString());</span></span><br><span class="line"><span class="xml"> var minIndex;</span></span><br><span class="line"><span class="xml"> var mapArrays1=minIndexMap.entrys();</span></span><br><span class="line"><span class="xml"> for(var i=0;i<span class="tag">&lt;<span class="name">mapArrays1.length;i++)&#123;</span> //当前列当中的<span class="attr">min</span> <span class="attr">map</span>数组</span></span></span><br><span class="line"><span class="xml"> var value=minIndexMap.get(i);</span></span><br><span class="line"><span class="xml"> if(minIndex==undefined || minIndex==null)&#123;</span></span><br><span class="line"><span class="xml"> minIndex=value;</span></span><br><span class="line"><span class="xml"> &#125;else&#123;</span></span><br><span class="line"><span class="xml"> if(minIndex&gt;value)&#123;</span></span><br><span class="line"><span class="xml"> minIndex=value;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> var maxIndex;</span></span><br><span class="line"><span class="xml"> var mapArrays2=maxIndexMap.entrys();</span></span><br><span class="line"><span class="xml"> for(var i=0;i<span class="tag">&lt;<span class="name">mapArrays2.length;i++)&#123;</span> //当前列当中的<span class="attr">min</span> <span class="attr">map</span>数组</span></span></span><br><span class="line"><span class="xml"> var value=maxIndexMap.get(i);</span></span><br><span class="line"><span class="xml"> if(maxIndex==undefined || maxIndex==null)&#123;</span></span><br><span class="line"><span class="xml"> maxIndex=value;</span></span><br><span class="line"><span class="xml"> &#125;else&#123;</span></span><br><span class="line"><span class="xml"> if(maxIndex<span class="tag">&lt;<span class="name">value)&#123;</span></span></span></span><br><span class="line"><span class="xml"> maxIndex=value;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> var sumMaxNumber=maxIndex-minIndex-1;</span></span><br><span class="line"><span class="xml"> console.log("minIndex: "+minIndex+" maxIndex: "+maxIndex+" sumMaxNumber: "+sumMaxNumber);</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> var mapArrays=singleMap.entrys();//循环之后获取得到singleMap,即单排数</span></span><br><span class="line"><span class="xml"> if (h == 0) &#123; //即第一个数值的时候填入行tr:arrays.length+2</span></span><br><span class="line"><span class="xml"> td.innerHTML="数字: "+number+" | 单排最大遗漏数 | 总排最大遗漏数: "+sumMaxNumber;</span></span><br><span class="line"><span class="xml"> for(var r=0;r<span class="tag">&lt;<span class="name">mapArrays.length;r++)</span> &#123;</span></span></span><br><span class="line"><span class="xml"> var td22 = tr.insertCell(r+1);//当前行处于第一行</span></span><br><span class="line"><span class="xml"> td22.innerHTML = singleMap.get(r);</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> tr.insertCell(mapArrays.length+1);</span></span><br><span class="line"><span class="xml"> &#125; else &#123;</span></span><br><span class="line"><span class="xml"> //新增行并插入</span></span><br><span class="line"><span class="xml"> var newTr=detailData.insertRow(arrays.length+2+h);</span></span><br><span class="line"><span class="xml"> var newTd=newTr.insertCell(0);</span></span><br><span class="line"><span class="xml"> newTd.innerHTML="数字: "+number+" | 单排最大遗漏数 | 总排最大遗漏数: "+sumMaxNumber;</span></span><br><span class="line"><span class="xml"> newTd.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml"> newTd.colSpan=2;</span></span><br><span class="line"><span class="xml"> for(var r=0;r<span class="tag">&lt;<span class="name">mapArrays.length;r++)</span> &#123;</span></span></span><br><span class="line"><span class="xml"> var td22 = newTr.insertCell(r+1);//从第二行开始进行新增列</span></span><br><span class="line"><span class="xml"> td22.innerHTML = singleMap.get(r);</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> newTr.insertCell(mapArrays.length+1);</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> console.log("================== 查询数值："+number+" END ==================");</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">//获取list接口数据</span></span><br><span class="line"><span class="xml">function getData(requestDataBean)&#123;</span></span><br><span class="line"><span class="xml">var url="/maima/findAllByParams";</span></span><br><span class="line"><span class="xml">AjaxPost(url, requestDataBean,</span></span><br><span class="line"><span class="xml">function () &#123;</span></span><br><span class="line"><span class="xml">//ajax加载中</span></span><br><span class="line"><span class="xml">&#125;,</span></span><br><span class="line"><span class="xml">function (data) &#123;</span></span><br><span class="line"><span class="xml">console.log("========数据获取成功======");</span></span><br><span class="line"><span class="xml">//ajax返回 //认证完成</span></span><br><span class="line"><span class="xml">if(data!=null)&#123;</span></span><br><span class="line"><span class="xml">var arrays=JSON.parse(JSON.stringify(data.list));</span></span><br><span class="line"><span class="xml">var sumArrays=JSON.parse(JSON.stringify(data.list2));</span></span><br><span class="line"><span class="xml">document.getElementById("page").value=data.page;</span></span><br><span class="line"><span class="xml">document.getElementById("pageSize").value=data.pageSize;</span></span><br><span class="line"><span class="xml">if (arrays.length!=0) &#123;</span></span><br><span class="line"><span class="xml">//前端填充数据操作</span></span><br><span class="line"><span class="xml">console.log("======= 表格填充数据 - fillDataToTable =======")</span></span><br><span class="line"><span class="xml">fillDataToTable(arrays,sumArrays);</span></span><br><span class="line"><span class="xml">&#125; else &#123;</span></span><br><span class="line"><span class="xml">AjaxErro(data);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">//页面加载</span></span><br><span class="line"><span class="xml">window.onload = function()&#123;</span></span><br><span class="line"><span class="xml">var requestDataBean = &#123;page:0,pageSize:10&#125;;</span></span><br><span class="line"><span class="xml">console.info("页面加载 - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">getData(requestDataBean);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby">-</span></span><br><span class="line"></span><br><span class="line"><span class="ruby"> /<span class="regexp">/console.log(map.toString());</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ var mapArrays=map.entrys();</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ var maxValue=0;</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ var maxKey=0;</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ for(var i=0;i&lt;mapArrays.length;i++)&#123; /</span><span class="regexp">/当前列当中的map数组</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var key=mapArrays[i].key;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var value=map.get(key);</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ console.log("key: "+key+" value:"+value);</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ &#125;</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ console.log("单排最大遗漏数为 - key:"+maxKey+"  value:"+(maxValue-1));</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/添加元素</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ var td4=tr.insertCell(t+1);</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ if(maxKey&lt;=0)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  td4.innerHTML="-";</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  td4.innerHTML=maxKey;</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ &#125;</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ var td5=tr2.insertCell(t+1);</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ if((maxValue-1)&lt;=0)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  td5.innerHTML="-";</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  td5.innerHTML=(maxValue-1);</span></span></span><br><span class="line"><span class="ruby"> /<span class="regexp">/ &#125;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="ruby">var tr=detailData.insertRow(arrays.length+<span class="number">2</span>);</span></span><br><span class="line"><span class="ruby"> var td=tr.insertCell(<span class="number">0</span>);</span></span><br><span class="line"><span class="ruby"> td.innerHTML=<span class="string">"数字"</span>;</span></span><br><span class="line"><span class="ruby"> td.style.fontWeight=<span class="string">"bolder"</span>;</span></span><br><span class="line"><span class="ruby"> td.colSpan=<span class="number">2</span>;</span></span><br><span class="line"><span class="ruby"> var tr2=detailData.insertRow(arrays.length+<span class="number">3</span>);</span></span><br><span class="line"><span class="ruby"> var td2=tr2.insertCell(<span class="number">0</span>);</span></span><br><span class="line"><span class="ruby"> td2.innerHTML=<span class="string">"单排最大遗漏数"</span>;</span></span><br><span class="line"><span class="ruby"> td2.style.fontWeight=<span class="string">"bolder"</span>;</span></span><br><span class="line"><span class="ruby"> td2.colSpan=<span class="number">2</span>;</span></span><br><span class="line"><span class="ruby"> var tr3=detailData.insertRow(arrays.length+<span class="number">4</span>);</span></span><br><span class="line"><span class="ruby"> var td3=tr3.insertCell(<span class="number">0</span>);</span></span><br><span class="line"><span class="ruby"> td3.innerHTML=<span class="string">"总排最大遗漏数"</span>;</span></span><br><span class="line"><span class="ruby"> td3.style.fontWeight=<span class="string">"bolder"</span>;</span></span><br><span class="line"><span class="ruby"> td3.colSpan=<span class="number">2</span>;</span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ /</span><span class="regexp">/当前7个数组当中都存有对应的数值</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ for(var t=0;t&lt;sumArray.length;t++)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/ var arrays=[01,28,19,35,43,08,01,12,32,41];</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var arrays=sumArray[t];/</span><span class="regexp">/单个数组</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  console.log(arrays);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var flag=true;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var map=new Map();</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  for(var i=0;i&lt;arrays.length;i++)&#123; /</span><span class="regexp">/循环10次</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var element=arrays[i];/</span><span class="regexp">/数组当中具体的元素</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  map.put(element,0);/</span><span class="regexp">/放入的只有9个</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  for(var n=0;n&lt;arrays.length;n++)&#123; /</span><span class="regexp">/循环10次</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var key=arrays[n];</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/console.log("当前遍历的element: "+element+"；所处index: "+i+"  map当中循环的element: "+key+"所处index: "+n)</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  if(key!=null &amp;&amp; key==element)&#123; /</span><span class="regexp">/如果存在有当前循环的数组当中的取值与map当中的键相同的则重新赋值，重新赋值后进行下一次break;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var y=i-n;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/console.log("key: "+key+" element:"+element+" y: "+y);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  map.put(element,y);/</span><span class="regexp">/此处的y没有减去当前自己的位数,所以当单排最大遗漏数查询的时候还需要-1</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  break;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  continue;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/console.log(map.toString());</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var mapArrays=map.entrys();</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var maxValue=0;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var maxKey=0;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  for(var i=0;i&lt;mapArrays.length;i++)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var key=mapArrays[i].key;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var value=map.get(key);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/console.log("key: "+key+" value:"+value);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  if(maxValue&lt;value)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  maxValue=value;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  maxKey=key;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  console.log("单排最大遗漏数为 - key:"+maxKey+"  value:"+(maxValue-1));</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/添加元素</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var td4=tr.insertCell(t+1);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  if(maxKey&lt;=0)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  td4.innerHTML="-";</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  td4.innerHTML=maxKey;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var td5=tr2.insertCell(t+1);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  if((maxValue-1)&lt;=0)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  td5.innerHTML="-";</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  td5.innerHTML=(maxValue-1);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ &#125;</span></span></span><br><span class="line"><span class="ruby">-</span><span class="xml">-%&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> 双色球 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>david说的面试题</title>
      <link href="/2020/03/07/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/03/07/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>面试题</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">「ChoiMinki：@David   登录页面得操作  我是在退出登录得时候缓存得路径  为啥重新启动程序会 缓存这个路径呢」</span><br><span class="line"><span class="bullet">- </span>- - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">「David：@ChoiMinki 那个不用存缓存，作为参数拼接到url中」</span><br><span class="line"><span class="bullet">- </span>- - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">「ChoiMinki：我是做的缓存处理」</span><br><span class="line"><span class="bullet">- </span>- - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">「ChoiMinki：我不知道你怎么写的」</span><br><span class="line"><span class="bullet">- </span>- - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">「ChoiMinki：我按照我得思路来的[捂脸]」</span><br><span class="line"><span class="bullet">- </span>- - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">「David：不能写在缓存，假设我给你个链接要调到制定页面，缓存的方式就实现不了」</span><br><span class="line"><span class="bullet">- </span>- - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">「David：但是作为参数就可以」</span><br><span class="line"><span class="bullet">- </span>- - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">「David：想想为什么用我说的，而不能用你的方式@ChoiMinki」</span><br><span class="line"><span class="bullet">- </span>- - - - - - - - - - - - - -</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 领赫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领赫 </tag>
            
            <tag> 前端面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>领赫介绍</title>
      <link href="/2020/03/05/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E9%A2%86%E8%B5%ABDESC/"/>
      <url>/2020/03/05/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E9%A2%86%E8%B5%ABDESC/</url>
      
        <content type="html"><![CDATA[<h2 id="领赫"><a href="#领赫" class="headerlink" title="领赫"></a>领赫</h2><p>跨境<br>物流公司 example 快递一些货物<br>业务：欧洲国外客户 , 想买中国的一些东西，<br>通过领赫，领赫通过供应商拿到货，<br>并运送到欧洲国外可指定的地方<br>重要规则：主要业务（直发提货流程） 借助系统完成  </p><p>客户想要买东西，发起一个客户提交直发提货，用户用的是中台系统，领赫公司用的是后台管理系统， 点开中台系统，预估价格界面（发起提货-申请一个提货买东西）/直发提货列表 用来发货  </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">直发提货 <span class="selector-tag">-</span> 选择要提的东西 <span class="selector-tag">-</span> 填写完信息之后生成订单</span><br><span class="line">生成一个订单，领赫公司就可以在后台管理系统当中看到 直发提货菜单</span><br><span class="line">订单状态为等待联系工厂，领赫即需要看哪个工厂可提供，联系厂家， 联系到了之后，将订单状态改为已联系，此时需要做价格评估，报价，（价格可不变/也有时候需要评估）</span><br><span class="line">如果价格需要重新评估则中台系统需要中台客户重新确认价格，如果确认则为订单状态为待提货状态</span><br><span class="line">此时领赫公司去提货，当货进来之后即确认到货，订单状态变为待入库，并生成待入库订单，（确认商品和货物对不对的上），确认无误之后则入库存对应商品库存则增加。</span><br><span class="line">入库后告诉用户，用户发起是否可以发货请求，用户发起发货请求，走发货流程</span><br><span class="line">发货单通过邮件发给用户的邮箱，发的内容即为货物信息，涉及支付信息</span><br><span class="line">也有一些不需要支付，走线下弄完了，不需要支付就相当于一个记录功能</span><br><span class="line">用户确认支付，点击按钮进行支付，</span><br><span class="line">付款成功之后，生成渠道订单，发到对应的订单，流程</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">prep</span>  <span class="selector-tag">prepare</span> 预先准备  提前让物流公司发货</span><br><span class="line">用户提一个提货单，物流公司发货，入库，</span><br><span class="line">入库不一样，有两个库存</span><br><span class="line">设计订单，库存两个需要分开</span><br><span class="line"></span><br><span class="line">询价</span><br><span class="line">后台系统里面菜单 有一个</span><br><span class="line">询价</span><br><span class="line">客户发起商品的 询价请求  公司对这个商品进行价格预估，告诉客户</span><br><span class="line"></span><br><span class="line">价格计算</span><br><span class="line">发起提货的时候</span><br><span class="line">价格模板</span><br><span class="line">费用计算模板 业务难点  计算费用</span><br><span class="line">如何设计模板</span><br><span class="line"></span><br><span class="line">直发货流程以及<span class="selector-tag">prepare</span>发货流程</span><br><span class="line">基础数据的增删改查</span><br><span class="line">库存管理，商品管理入库则加商品</span><br><span class="line">客户管理等基础数据，录入这种的</span><br><span class="line">供应商 能够提供商品的一些厂家的基本信息，厂家/供应商可能跟用户挂钩</span><br><span class="line"></span><br><span class="line">产品预添加</span><br><span class="line">发起提货的时候选择一些系统当中的数据</span><br><span class="line"></span><br><span class="line">系统先设定模板，询价的时候可能套用模板计算费用</span><br><span class="line"></span><br><span class="line">管理员列表 <span class="selector-tag">-</span> 维护登录后台账户的 一些巴拉巴拉..</span><br><span class="line">账单<span class="selector-tag">-</span>发邮件出去的<span class="selector-tag">-</span>生成支付的一些信息</span><br><span class="line"></span><br><span class="line">技术方面：我们整个后台，现在是<span class="selector-tag">5</span>个人，</span><br><span class="line">前端<span class="selector-tag">react</span>+阿里框架</span><br><span class="line">后台<span class="selector-tag">springboot</span></span><br><span class="line">数据库<span class="selector-tag">mysql</span></span><br><span class="line"></span><br><span class="line">邮件服务</span><br><span class="line"><span class="selector-tag">-</span> 邮件服务用<span class="selector-tag">mailgun</span>，订单信息，商品信息</span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">CDN</span> 用阿里云的<span class="selector-tag">oss</span> ，用于文件存储</span><br><span class="line"><span class="selector-tag">-</span> 接<span class="selector-tag">Paypal</span>的支付接口（接到邮件账单通知里，到时得研究下）</span><br><span class="line"><span class="selector-tag">-</span> 快递鸟的快递查询接口</span><br><span class="line">商品图片放到阿里云服务器当中的<span class="selector-tag">oss</span>对象存储</span><br><span class="line">上传接口到本地服务器，本地服务器再去传到阿里云的<span class="selector-tag">oss</span>的对象存储</span><br><span class="line"><span class="selector-tag">oss</span>生成网络链接</span><br><span class="line"><span class="selector-tag">paypal</span>支付接入</span><br><span class="line">快递鸟的快递查询</span><br><span class="line"></span><br><span class="line">本地电脑的文件服务器就是一个文件夹</span><br><span class="line"><span class="selector-tag">oss</span>对象存储就相当于是，远程电脑上的一个文件夹</span><br><span class="line">也就是服务器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">整个项目，大概一周的时间做完</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">后台登录接口 </span><br><span class="line">接口名称先确定</span><br><span class="line">先把接口名称确定再写接口</span><br><span class="line"></span><br><span class="line">关税 <span class="selector-tag">-</span> 查询</span><br><span class="line"><span class="selector-tag">swagger2</span>接口访问地址：</span><br><span class="line"><span class="selector-tag">http</span>:<span class="comment">//localhost:8080/swagger-ui.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">后台<span class="selector-tag">UI</span>设计：<span class="selector-tag">https</span>:<span class="comment">//next.modao.cc/app/3a7da83645ba6bea7ac16bb3a3eb9cfb#screen=s20cd83f9b8156312231300</span></span><br><span class="line"></span><br><span class="line">数据库设计规范：</span><br><span class="line"><span class="selector-tag">https</span>:<span class="comment">//choerodon.io/zh/docs/practice-specification-reference/database-design-specification/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">java</span>开发规范：</span><br><span class="line"><span class="selector-tag">https</span>:<span class="comment">//choerodon.io/zh/docs/practice-specification-reference/development/developmen-to-micro-services/</span></span><br><span class="line"></span><br><span class="line">团队管理：</span><br><span class="line"><span class="selector-tag">https</span>:<span class="comment">//www.teambition.com/project/5dd6528d8233030019cdd3a5/analytics</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span>练习：</span><br><span class="line"><span class="selector-tag">https</span>:<span class="comment">//www.jianshu.com/p/59e66364ea6e</span></span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"><span class="selector-tag">http</span>:<span class="comment">//gitlab.yourshares.cn/david/lingo/tree/master</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">领赫<span class="selector-tag">-</span>原型图</span><br><span class="line">导航菜单栏</span><br><span class="line">总览</span><br><span class="line">询价单</span><br><span class="line">直发提货</span><br><span class="line"><span class="selector-tag">Prep</span>提货</span><br><span class="line">入库单</span><br><span class="line">库存管理</span><br><span class="line">发货单</span><br><span class="line">渠道跟进单</span><br><span class="line">卸货清点</span><br><span class="line">客户管理</span><br><span class="line">产品管理</span><br><span class="line">渠道管理</span><br><span class="line">费用计算模板</span><br><span class="line">管理员管理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这里进行估计的时候会比较麻烦，</span><br><span class="line">后台要根据选择的模板，以及当前货物的重量，提交....等信息，</span><br><span class="line">匹配之前模板设置的规则</span><br><span class="line"></span><br><span class="line">单位上，其实费用类型确定了，单位也就确定了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">后台 <span class="selector-tag">-</span> 客户管理</span><br><span class="line">列表 <span class="selector-tag">-</span> 查询所有客户信息 <span class="selector-tag">-</span> 按日期降序排序</span><br><span class="line">恢复 <span class="selector-tag">-</span> 禁用 客户接口</span><br><span class="line">编辑 <span class="selector-tag">-</span> 内容和新增客户内容一样</span><br><span class="line">前端带*为必填</span><br><span class="line">个人信息 <span class="selector-tag">-</span> 客户<span class="selector-tag">ID</span>  后台生成 <span class="selector-tag">-</span> 保证在系统中唯一性</span><br><span class="line">负责业务员 <span class="selector-tag">-</span> 提供接口 <span class="selector-tag">-</span> 后台当中的所有用户 <span class="selector-tag">t_user_info</span> <span class="selector-tag">-</span> 显示业务员所有信息先</span><br><span class="line">获取渠道和亚马逊站点 <span class="selector-tag">-</span> 两种做法 </span><br><span class="line">一种做法是 不要传到前端来，但是前端有后台也有，但是需要统一</span><br><span class="line">这两个数据为基础数据，提前录入进的数据</span><br><span class="line">接口提供这两个信息，可以一个接口给过来</span><br><span class="line">基础数据的查询接口</span><br><span class="line">必须提供一个接口来查询 站点以及亚马逊站点信息 一个接口提供过来</span><br><span class="line">新增，编辑 接口，</span><br><span class="line">区别：编辑的客户编号给后台系统，以及编辑的内容给后台系统</span><br><span class="line"></span><br><span class="line">供应商</span><br><span class="line">国家信息 <span class="selector-tag">-</span> 基础信息 <span class="selector-tag">-</span> 直接存在前端</span><br><span class="line">数据库保存 国家省市<span class="selector-tag">xxx</span>名字</span><br><span class="line">不需要获取国家信息的相关接口，前端写好 <span class="selector-tag">-</span> 字段直接填写国家名称</span><br><span class="line">客户联系人 <span class="selector-tag">-</span> 新增的时候一次性给后台系统</span><br><span class="line">联系人 <span class="selector-tag">maybe</span>为数组 <span class="selector-tag">-</span> <span class="selector-attr">[]</span></span><br><span class="line">编辑有点区别 <span class="selector-tag">-</span> 保存时一次性把数据全给我</span><br><span class="line">联系人 </span><br><span class="line"><span class="selector-tag">1</span>. 存在<span class="selector-tag">id</span>则<span class="selector-tag">update</span>,不存在<span class="selector-tag">id</span>则<span class="selector-tag">insert</span></span><br><span class="line"><span class="selector-tag">2</span>. 将数据全部删除，重新生成</span><br><span class="line"></span><br><span class="line">产品管理</span><br><span class="line">查询所有产品列表</span><br><span class="line">编辑</span><br><span class="line">删除</span><br><span class="line">中台也有产品管理 <span class="selector-tag">-</span> <span class="selector-tag">consumer_id</span></span><br><span class="line">中台只看到自己的产品唯一区别于</span><br><span class="line">只提交一个接口即可，唯一区别在于是否上送<span class="selector-tag">consumer_id</span>参数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">单规格 <span class="selector-tag">-</span>多规格  </span><br><span class="line">黑色衣服 <span class="selector-tag">-</span> 白色衣服 <span class="selector-tag">-</span> 衣服属性</span><br><span class="line">衣服多属性<span class="selector-tag">-</span> 多规格</span><br><span class="line">衣服单属性 <span class="selector-tag">-</span> 单规格</span><br><span class="line"></span><br><span class="line">查询客户接口<span class="selector-tag">-</span> 所有后台的客户 提供接口查询所有客户信息<span class="selector-tag">-</span> 基础信息</span><br><span class="line">查询客户 <span class="selector-tag">-</span> 查询客户的供应商信息 <span class="selector-tag">-</span> 供应商跟客户相关 <span class="selector-tag">-</span> 添加供应商时需要客户</span><br><span class="line">产品类型 <span class="selector-tag">-</span> 前段写死（或者是后台提供产品类型接口以供选择）</span><br><span class="line">是否多规格.....不需要后台提供接口</span><br><span class="line"></span><br><span class="line">产品信息 <span class="selector-tag">-</span> 海关编码</span><br><span class="line">海关信息 <span class="selector-tag">-</span>海关编码</span><br><span class="line">产品单价 <span class="selector-tag">-</span> 海关单价 前段多名称 但是对应的后台数据库当中只有一个字段</span><br><span class="line">应用名称 <span class="selector-tag">-</span> 对应产品表的产品名称</span><br><span class="line"><span class="selector-tag">t_product</span></span><br><span class="line"><span class="selector-tag">t_product_attr</span> 产品属性表</span><br><span class="line"></span><br><span class="line">产品多规格产品</span><br><span class="line">前段处理不一样</span><br><span class="line">相当于提交数组</span><br><span class="line">产品单规格即提交一个数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">渠道管理</span><br><span class="line">查询 <span class="selector-tag">-</span> 删除接口</span><br><span class="line">系统当中的所有渠道</span><br><span class="line">编辑</span><br><span class="line">点开后 <span class="selector-tag">-</span> 系统自动生成渠道代码</span><br><span class="line"><span class="selector-tag">t_channel</span> 主表</span><br><span class="line">国家名字  前端提名字给后台</span><br><span class="line">运输方式 <span class="selector-tag">-</span>选择 <span class="selector-tag">-</span> 查询接口数据在<span class="selector-tag">t_transport_type</span> 写死了</span><br><span class="line"><span class="selector-tag">steps</span>字段对应表 <span class="selector-tag">t_transport_step</span> 表  提前录入  </span><br><span class="line"><span class="selector-tag">t_transport_type</span> 的<span class="selector-tag">steps</span> 关联外键  <span class="selector-tag">t_transport_step</span></span><br><span class="line">走海运 <span class="selector-tag">-</span> 海运步骤</span><br><span class="line">举例  快递<span class="selector-tag">-</span> </span><br><span class="line"><span class="selector-tag">all_status</span>  一个过程经历的状态  基础数据 为功能服务</span><br><span class="line">编辑渠道页面  <span class="selector-tag">-</span>  一次性拿 <span class="selector-tag">-</span></span><br><span class="line"> 运输方式以及相对应的步骤信息传送给前端，两者关联</span><br><span class="line"></span><br><span class="line">步骤当中有许多状态 至于选择哪种状态根据步骤关联</span><br><span class="line">每种状态有触发字段</span><br><span class="line">单<span class="selector-tag">-</span>选择渠道<span class="selector-tag">-</span> 状态及运输的状态 </span><br><span class="line">渠道管理编辑的信息</span><br><span class="line"></span><br><span class="line">渠道编辑要提供基础数据的查询</span><br><span class="line">渠道的主表就是<span class="selector-tag">t_channel</span></span><br><span class="line">渠道可以没有步骤 <span class="selector-tag">t_channel_step</span>当中的记录可以没有</span><br><span class="line">一个步骤可能没有状态，</span><br><span class="line"></span><br><span class="line">应该提供哪些接口出去...</span><br><span class="line">供应商管理相关表：<span class="selector-tag">t_suppier</span>，<span class="selector-tag">t_supplier_connecter</span></span><br><span class="line">渠道管理相关表: </span><br><span class="line"><span class="selector-tag">t_channel</span>, <span class="selector-tag">t_channel_step</span>, <span class="selector-tag">t_channel_step_status</span>, <span class="selector-tag">t_channel_step_status_trigger</span>, <span class="selector-tag">t_transport_step</span>, <span class="selector-tag">t_transport_type</span></span><br><span class="line">产品管理相关表</span><br><span class="line"><span class="selector-tag">t_product</span>, <span class="selector-tag">t_product_atrr</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">管理员和用户角色数据库设计。</span><br><span class="line"><span class="selector-tag">MySQL</span>官网保留关键字：<span class="selector-tag">https</span>:<span class="comment">//dev.mysql.com/doc/refman/5.7/en/keywords.html</span></span><br><span class="line">参照原型图【管理员列表】</span><br><span class="line"></span><br><span class="line">管理员列表</span><br><span class="line">账号</span><br><span class="line">名称</span><br><span class="line">角色</span><br><span class="line">编辑管理员</span><br><span class="line">账号</span><br><span class="line">角色</span><br><span class="line">名称</span><br><span class="line">登录密码</span><br><span class="line">重复密码</span><br><span class="line">角色管理</span><br><span class="line">角色名称</span><br><span class="line">编辑角色</span><br><span class="line">角色名称</span><br><span class="line">权限设置</span><br><span class="line">页面权限</span><br><span class="line">操作权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">本数据库设计规范是以   <span class="selector-tag">MySQL</span>数据库    为基准，</span><br><span class="line">主要分为四个部分，</span><br><span class="line">即 建表规约、索引规约、<span class="selector-tag">SQL</span>语句和<span class="selector-tag">ORM</span>映射。</span><br><span class="line"></span><br><span class="line">其中，将阐述在建表过程中的要求和约定，</span><br><span class="line">例如   数据库名称、表名称、视图名称  以及  表别名使用  等，</span><br><span class="line">最后还将描述如何在<span class="selector-tag">ORM</span>中进行数据库表映射等。</span><br><span class="line"></span><br><span class="line">此规范是   <span class="selector-tag">Choerodon</span>  社区在研发和实施的过程中经验的总结，</span><br><span class="line">希望能够给广大读者提供一个参考和借鉴，</span><br><span class="line">俗话说，“百密一疏”，其中如有不正确的地方，烦请不吝指正。</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Note</span>：如若使用<span class="selector-tag">Choerodon</span>猪齿鱼微服务开发框架，强烈建议参考使用此规范，</span><br><span class="line">这样可以保持与开发框架数据库设计规范的一致性。</span><br><span class="line"></span><br><span class="line">建表规约</span><br><span class="line">强制要求</span><br><span class="line"><span class="selector-tag">1</span>. </span><br><span class="line">表达   是/否  概念的字段，必须使用   <span class="selector-tag">is_xxx</span>  的方式命名，</span><br><span class="line">数据类型是   <span class="selector-tag">unsigned</span> <span class="selector-tag">tinyint</span>(<span class="number">1</span>  表示是，<span class="number">0</span>   表示否)。</span><br><span class="line">说明：任何字段如果为非负数，必须是   <span class="selector-tag">unsigned</span>。</span><br><span class="line">正例：表达逻辑删除的字段名 <span class="selector-tag">is_deleted</span>，<span class="selector-tag">1</span>表示删除，<span class="selector-tag">0</span>表示未删除。</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">2</span>.</span><br><span class="line">表名、字段名     必须使用   小写字母或数字，</span><br><span class="line">禁止出现数字开头，</span><br><span class="line">禁止两个下划线中间只出现数字。</span><br><span class="line">说明：<span class="selector-tag">MySQL</span>在<span class="selector-tag">Windows</span>下不区分大小写，但是在<span class="selector-tag">Linux</span>下默认是区分大小写。</span><br><span class="line">因此，数据库名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。</span><br><span class="line">正例：<span class="selector-tag">hap_admin</span>,<span class="selector-tag">rdc_config</span>,<span class="selector-tag">level3_name</span></span><br><span class="line">反例：<span class="selector-tag">HapAdmin</span>,<span class="selector-tag">rdcConfig</span>,<span class="selector-tag">level_3_name</span>  </span><br><span class="line">（数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑）</span><br><span class="line"><span class="selector-tag">3</span>.</span><br><span class="line">表名  不使用  复数名词。</span><br><span class="line">说明：表名  应该仅仅表示表里面的    实体内容，不应该表示   实体数量，</span><br><span class="line">对应于<span class="selector-tag">DO</span>类名也是单数形式，符合表达习惯。</span><br><span class="line"><span class="selector-tag">4</span>. </span><br><span class="line">禁用保留字</span><br><span class="line">如  <span class="selector-tag">desc</span>、<span class="selector-tag">range</span>、<span class="selector-tag">match</span>、<span class="selector-tag">delayed</span>等，请参考<span class="selector-tag">MySQL</span>官方保留字。</span><br><span class="line"><span class="selector-tag">5</span>.</span><br><span class="line">主键索引名为  <span class="selector-tag">pk_</span>字段名；</span><br><span class="line">唯一索引名为  <span class="selector-tag">uk_</span>字段名；</span><br><span class="line">普通索引名则为  <span class="selector-tag">idx_</span>字段名。</span><br><span class="line">说明：<span class="selector-tag">pk_</span>  即  <span class="selector-tag">primary_key</span>;  <span class="selector-tag">uk_</span> 即  <span class="selector-tag">unique_key</span>;  <span class="selector-tag">idx</span>  即  <span class="selector-tag">index</span></span><br><span class="line"><span class="selector-tag">6</span>.</span><br><span class="line">小数类型为  <span class="selector-tag">decimal</span>，禁止使用   <span class="selector-tag">float</span> 和  <span class="selector-tag">double</span>;</span><br><span class="line">说明：<span class="selector-tag">float</span>  和  <span class="selector-tag">double</span>在存储的时候，</span><br><span class="line">存在精度损失的问题，很可能在值的比较时，得到不正确的结果。</span><br><span class="line">如果存储的数据范围超过  <span class="selector-tag">decimal</span>  的范围，建议将数据拆成整数和小数分开存储。</span><br><span class="line"><span class="selector-tag">7</span>. </span><br><span class="line">如果存储的字符串长度几乎相等，使用   <span class="selector-tag">char</span>  定长字符串类型。</span><br><span class="line"><span class="selector-tag">8</span>.</span><br><span class="line"><span class="selector-tag">varchar</span>  是可变长字符串，不预先分配存储空间，长度不要超过<span class="selector-tag">5000</span>，</span><br><span class="line">如果存储长度大于此值，定义字段类型为<span class="selector-tag">text</span>,独立出来一张表，</span><br><span class="line">用主键来对应，避免影响其他字段索引效率。</span><br><span class="line">说明：该表的命名以  原表名<span class="selector-tag">_</span>字段缩写  的格式命名。</span><br><span class="line"><span class="selector-tag">9</span>.</span><br><span class="line">表必备字段：</span><br><span class="line"><span class="selector-tag">id</span> , </span><br><span class="line"><span class="selector-tag">create_date</span> , </span><br><span class="line"><span class="selector-tag">last_update_date</span> , </span><br><span class="line"><span class="selector-tag">create_by</span> , </span><br><span class="line"><span class="selector-tag">last_update_by</span> , </span><br><span class="line"><span class="selector-tag">object_version_number</span>。</span><br><span class="line">也可以叫做<span class="selector-tag">who</span>字段，就是每个表里必须具备的字段。</span><br><span class="line">这些字段起到类似<span class="selector-tag">metadata</span>的作用。</span><br><span class="line">这些字段的作用很大，例如，数据分析的时候，可以使用<span class="selector-tag">last_update_date</span>作为数据抽取的时间戳字段。</span><br><span class="line"><span class="selector-tag">id</span> 必为  主键，类型为  <span class="selector-tag">unsigned</span> <span class="selector-tag">bigint</span>、单表时自增、步长为<span class="selector-tag">1</span></span><br><span class="line"><span class="selector-tag">create_date</span> 是此条数据的创建时间，数据类型为  <span class="selector-tag">datetime</span> 类型</span><br><span class="line"><span class="selector-tag">last_update_date</span> 是此条数据的最后更新时间，数据类型为 <span class="selector-tag">datetime</span> 类型</span><br><span class="line"><span class="selector-tag">create_by</span> 是此条数据的创建人，数据类型为  <span class="selector-tag">unsigned</span> <span class="selector-tag">bigint</span>类型</span><br><span class="line"><span class="selector-tag">last_update_by</span> 是此条数据的最后更新人，数据类型为  <span class="selector-tag">unsigned</span> <span class="selector-tag">bigint</span> 类型</span><br><span class="line"><span class="selector-tag">object_version_number</span> 是此条数据的版本号，如果启用数据库数据版本控制，则会使用到次数据</span><br><span class="line">以下是基于<span class="selector-tag">MySQL</span>数据库的创建脚本，可供参考。</span><br><span class="line"><span class="selector-tag">column</span> (<span class="attribute">name</span>:<span class="string">"object_version_number"</span>,   type：<span class="string">"BIGINT UNSIGNED"</span>,  <span class="attribute">defaultValue</span>:<span class="string">"1"</span>)</span><br><span class="line"><span class="selector-tag">column</span> (<span class="attribute">name</span>:<span class="string">"created_by"</span>,  <span class="attribute">type</span>:<span class="string">"BIGINT UNSIGNED"</span>, <span class="attribute">defaultValue</span>:<span class="string">"0"</span>)</span><br><span class="line"><span class="selector-tag">column</span> (<span class="attribute">name</span>:<span class="string">"creation_date"</span>, <span class="string">"type:"</span>DATETIME<span class="string">", defaultValueConputed:"</span>CURRENT_TIMESTAMP")</span><br><span class="line"><span class="selector-tag">column</span>(<span class="attribute">name</span>:<span class="string">"last_update_by"</span>,  <span class="attribute">type</span>:<span class="string">"BIGINT UNSIGNED"</span>,<span class="attribute">defaultValue</span>:<span class="string">"0"</span>)</span><br><span class="line"><span class="selector-tag">column</span>(<span class="attribute">name</span>:<span class="string">"last_update_date"</span>,<span class="attribute">type</span>:<span class="string">"DATETIME"</span>,<span class="attribute">defaultValueConputed</span>:<span class="string">"CURRENT_TIMESTAMP"</span>)</span><br><span class="line"><span class="selector-tag">10</span>.</span><br><span class="line">表的命名最好是加上  业务名称<span class="selector-tag">_</span>表的作用</span><br><span class="line">正例：<span class="selector-tag">kanban_task</span> 、<span class="selector-tag">devops_project</span>、<span class="selector-tag">website_config</span></span><br><span class="line"></span><br><span class="line">推荐规约</span><br><span class="line"><span class="selector-tag">1</span>. 数据库名称  或者  编码 与  应用名称  或者 编码  尽量一致。</span><br><span class="line"><span class="selector-tag">2</span>. 如果 修改字段含义 或者对   字段表示的状态追加时， 需要及时更新字段注释。</span><br><span class="line"><span class="selector-tag">3</span>. 字段允许  适当冗余，（所谓冗余是指   在不同的表里面存储相同的字段），</span><br><span class="line">以提高查询性能，但必须考虑数据一致，</span><br><span class="line">冗余字段应遵循：</span><br><span class="line"> 不是频繁修改的字段</span><br><span class="line">不是 <span class="selector-tag">varchar</span> 超长字段，更不能是<span class="selector-tag">text</span>字段</span><br><span class="line">正例：商品类目名称使用频率高，字段长度短，名称基本一成不变，</span><br><span class="line">可在相关联的表中冗余存储类目名称，避免关联查询。</span><br><span class="line"><span class="selector-tag">4</span>. 单表行数超过  <span class="selector-tag">500</span> 万行或者单表超过 <span class="selector-tag">2</span> <span class="selector-tag">GB</span>，才推荐分库分表。</span><br><span class="line">说明：如果预计三年后的数量根本达不到这个级别，请不要在创建时就分库分表。</span><br><span class="line"></span><br><span class="line">规约参考</span><br><span class="line">合适的字符存储长度，不但节约数据库空间、节约索引存储</span><br><span class="line">更重要的是提升检索速度。</span><br><span class="line">正例：如下表，其中无符号值  可以避免误存 负数，  且扩大了表示范围。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 领赫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领赫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心情</title>
      <link href="/2020/03/02/%E3%80%90%E5%BF%83%E6%83%85%E3%80%91/%E5%BF%83%E6%83%854/"/>
      <url>/2020/03/02/%E3%80%90%E5%BF%83%E6%83%85%E3%80%91/%E5%BF%83%E6%83%854/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Hey, password is required here." /><label>Hey, password is required here.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="eba6423c712fadc1c60a0f4b7007311ecc755bce75d0e3a26af48154d59d5d82">b31f159afd2875e238fd142233ddd138ab0d44113399ddd50e5ab9b91b0c753d14a01c8b3bcab5e08ccf8224732c4c70a840a7308c87103c606a5af5e236c0f6c50ac472a5e1b17c499f9d933266a62042f3de19e4ec423d23aed3c70d366f3c44caa5aaa05849f3da439e9d7fc3ec1666d0549c63d75c5cf681938638c5c3e663f66c9ab216784739d8c5a0464dd40dd2e94520e5f38d69f30abc6c891dc72679be36d493273ee456d11855f26d6e7429e93e849824314265ee3eaa7640af69a5ce0603eef9a03efe5166ec0669a7ed36f3e28ad7c315739a351ca497aeadab1c3b4a0a6b4ee397ae6c40adebffc7f159e596e2e3cf674336b55b7512637728a14e0ffc4bb458904082b6df9694f8044b3912e221635e0e4827e28eaf0272df5ae67dbb3779ebf15b85e152f5b4c53025df49efc1f4d904b82b26913bd1d5ed6278376b880ea9bc09e8e0b16888a4e8da2ea2ba79c473cd33cff39fd32e76b6abd687c69e8e21e2b4a5b77d3567bd869ef8d8f51917c97c6a2f2d2e9a378736afd6c06b91bc58bb106f093c130cccf48a7efc7a77b6050b01437867c0b8584ae3f4e0432c501a2f6101841d63f8a7c7312a923f515f72e2f42edf20380d962a103e6a145405bcb58d6d27bd155ec0e3559e517aced496266bafed8608473e875dd058cfc8b148dc196b2fa84d4846a7aa7543d5f3f24b6db93d791124b759b73a8b49884e0972f37f1ed38ce9dd343c68caebc7c9b24f6d9aff767f59af8be7ee2cdd5468d6f8ecd9c42f2d821191a387a4a522ca3cc33e6e92996be99acd842aeccda0fdefc41480767048f8ee5400e088e64f40357d616d5f94b576a3434877f646a56ab4632b130679a6ac6174010c634d9cc51ac658764fe89149d9c9ba7240216fc9491dc0d09c4e25752ab5be2dcdb7a757e5b204a5adbb2523bae63fed7d6f57db6ed9c6f6597638b1e1b9b665ab6b42fca4ecec9a0a29a96bbe5eb719643012edc6bbca9dfb8d679e2d8b1bb18b8d5c3e866a23f98402f604a3225a02a708271b6adaaddfa5d915a1c907e86b449f959ea2a9e3caf116f78edc95b555522c95885c439ae4074682e95def110b615af352c43d196e0ac4dd412f05806ab0f7fa64445682b9ccf93ce256ebba3924723a1be266e1ff27f56a902a19e49d7a3ff84ec9b5ab6a5c39b7916a604e9f2d6fe35d51a8d2f5abd08797682887ab04bc1400fa1c4df167cfd83c5b54c9f9107beea8266d3fef4e5abf47d1e3ab6c2233ecc51391f9cec03caa7f493a5090a4ff4d83186d3708c81158d97da63456bb73465ef2e81a8c92583f976b18ad898cb2ce36778469f6fefe8b5c905c1eff61570a6b331d18ea2c86b28edc2b72a6b7a1593f971e8321668aeff200a8ba95bf7aa41de3cc6f32f73c22b822e5386c980e73cf4bda6b679de0ac6205aa56d8c4895bda0cd79be75ba6e4b099c682557138057007d098c4c9c7b487315d6a51b7726f772532e8afc66e359c092f51f63138fac029f080784c74cf66b0f9b06b5f07ed7121817f2c912974e19fe9c39320ca2fcdc2430b9187fc50c9b5c1ea0df6b12c739664af07c1f08d6a8c172987649db4c0de3c63ccb6988c73e327ec07c84e4ff5545fbe68001135c3289f03a01465f8abf78f0c0c1786709e9434023882199a2e635f21c14fcf92ff9c1d6da559e4c4d97c46a4978223c5d8151f74936e5e30cd2e6b4b8ad3ea3d944d621d42ab091d8d1e27050416e256ee23b115824b68b4a00d4fd763f6017138d8108ffd64d7cb0acfdb68d9a3f8b502311f53653a0ccd4f64dda5bddaf654354364b29883b937ec92f4eb0e717f5724eef021cb1a640de554b73bd35576b50c634d314e83bd1629df8991144eb576b54ea257952503b79f9edbf40343c7f2de0a3a26397c7d7e3cbf8a86ab2e73fd9ce7f92ed582364de238edd985b5a03158848e329c13872f0a80201b402cfe8cd51d4ca62252bf8e7bb085820406b79b106c605a6ff0532fcb36149c5812653992ad17dd78ffa9530586e87ed52270f1487adbb19e7a16d3e7da09b91daf7cf48ee940fa7ee92c5165f9780e1eff0df30b76f3b4b6021ef3b6032bd3093d0627dbc87f7727c0d444f8bdf3f2f6f84216a15545a195f4ebf86e17e6f7980589d81070a26f107fc5942997c3aac4d8e2c2bdc72a3881d932d4efc2f8e445e2bc6002fc37d7b289066d4473cd932ae6cf184b059878fe0cbbcdd87ca8d107044c0aef47c2f14044c9612bf0e59412eccfac9068ad9fb1d73f13832ac3b498e4d1d64541986a55c9fccfc66268ca143f3c09ba16ed6d60c1f0a925c853203bd0d7a4c69a3f995fb88b82ad39f99594ee9cd3e34b54ebd6c33557ea3f8748bc215902a8638d9ba873af80060e28191e55d63367906ceddc113fdd94c7cb072992640bf30a8c44fe1e1a402d63c9a02cbc4307aaa25891b8de076cb368fff2c796d0cf87fc91943d8ccdbc1610d9c5a1b4c945e4c716a6eafc4bd1f5ec90eee5043bb210a8bc0f1acc6ca49cd10f9c760c91b1644fd3a6bb22ae094d36220e5a5ef06e34a4076414372ea1105672c8239f09dcdfffd162d4443fd437587be9af94c7c02a9add7cf64d2ce12a3d467da295fa4ae340b7d018ddf86355965aafd67159442e886729bbee5f7993bb28cefcabc53c4bf85ae820737af0b2b011b6e9e6d097cec034043199d564d71dc776f8deca9e05f37737e5613619fad785329f1a0147fc4ec7548ad56cab2784b6e841c77608ecee37521131c656c3a4c84c28e79c4b49d97e0336d465d6e9f2af043ab7ae56423297151338da9ba029dd29147448132f192e4e594d670395f093c473e04261e9bbe5dcce87f8c79ee272eb229a9f410331a71cefd94f5df7f8cfe7843eb30f8ea2a27c22b2b6bc0bf4648a60098338a6b81d9b90190d2bb02bb814f2821d7b0a8e122321c908996a0d5d2a61c2f9d42774e15c1fae514b9d13fb0c84cd03245198f11664ab675604873f19e9a335b17c14c0877fff13ca99726a2fc209cef682be7700acf40c8230c1d2bbd9012d25cf58626c59a486094288b1000f801e5cb9b7df3b7ddbed197408fa6979341de0e29f0dfa275ae30a325a2eddd4494f60bd0852f83fa170db98d53f8d68509f4a4cdf6afa3d0596c751c91eeb92a15aaef9245e2c37aec2017d99d7a6b71eb75068cdbefc791625f2cdd9aa75236e0ae2c0c906316423176d8fd2bb25d8b827045f635409</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 心情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KING服务</title>
      <link href="/2020/03/01/%E3%80%90%E4%BF%A1666%E3%80%91/KING%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/03/01/%E3%80%90%E4%BF%A1666%E3%80%91/KING%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="KING服务"><a href="#KING服务" class="headerlink" title="KING服务"></a>KING服务</h2><p>该服务主要应用于信666的android与ios、h5后台以及后台管理平台所提供的服务；<br>主要有：  </p><ul><li>apiservice<ul><li>configure<ul><li>swagger2 前后台的交互文档</li><li>WebMVCConfigurer WebMVC的配置</li></ul></li><li>controller<ul><li>IncomeController 提供进件接口层</li><li>KayouIncomeController 卡友进件接口层</li><li>MerchQueryController 商户信息相关查询接口层主要应用于前端ios以及android、h5等</li><li>MposController 主要是用于Mpos刷卡相关接口</li><li>PartnerController 合作代理商等相关接口</li><li>PlanController 余额规划、全额规划等相关接口</li><li>RegisterController 前端Vuejs用户注册方面的相关接口</li><li>TradeController 交易接口</li><li>WebController Web端的接口</li><li>WeixinController 微信公众号关注等相关接口</li></ul></li><li>enums<ul><li>MerchlevelEnum 商户登记枚举</li><li>MerchStatusEnum 商户状态枚举</li><li>SmsTypeEnum 商户注册、商户修改密码、商户规划不同状态通知等短信类型枚举</li></ul></li><li>exception<ul><li>RegisterException 注册相关异常</li></ul></li><li>model<ul><li>BankCardResult 银行卡绑卡结果model</li><li>BaseResult 返回给前端基本的model</li><li>CarResult 绑卡model</li><li>ContactBean 相关Bean</li><li>DeviceInfo 位置信息model</li><li>FaceResult 人脸识别model</li><li>GetKayouIncomeResult 获取卡友进件结果</li><li>GetKayouOrderResult 获取卡友订单结果</li><li>IdCardResults 身份证识别结果model</li><li>KayouIncomeCallback 卡友进件回调</li><li>KayouIncomeResult 卡友进件结果model</li><li>KayouUnbindTermIdResult 卡友未绑卡…结果model</li><li>PhotoBean 图片等Bean</li><li>PlanBean 规划Bean</li><li>PosBean  Mpos等Bean</li><li>RequestBean 前端请求Bean</li><li>WeChatBean 微信Bean</li></ul></li><li>service<ul><li>IncomeService 进件服务</li><li>KayouIncomeService 卡友进件服务</li><li>MerchQueryService 商户查询服务</li><li>MposService Mpos服务</li><li>PartnerService 合作商代理商等服务</li><li>PlanService 规划服务</li><li>RegisterService 注册服务</li><li>ReportService 报表服务</li><li>TradeService 交易服务</li><li>WebService Web服务</li><li>WechatService 微信服务</li></ul></li><li>tool<ul><li>BaiduAip 人脸识别、图片识别等认证服务</li><li>JGPush 极光推送，用于android、ios端的消息推送</li></ul></li><li>utils<ul><li>ImagesUtils 图片工具类用于上传图片等</li><li>JwtTokenUtil 用于前端用户登录超时等；token令牌</li></ul></li></ul></li></ul><h3 id="king-apiservice"><a href="#king-apiservice" class="headerlink" title="king-apiservice"></a>king-apiservice</h3><h3 id="king-cardmanager"><a href="#king-cardmanager" class="headerlink" title="king-cardmanager"></a>king-cardmanager</h3><h3 id="king-channel"><a href="#king-channel" class="headerlink" title="king-channel"></a>king-channel</h3><h3 id="king-common"><a href="#king-common" class="headerlink" title="king-common"></a>king-common</h3><h3 id="king-entity"><a href="#king-entity" class="headerlink" title="king-entity"></a>king-entity</h3><h3 id="king-operation"><a href="#king-operation" class="headerlink" title="king-operation"></a>king-operation</h3><h3 id="king-pay"><a href="#king-pay" class="headerlink" title="king-pay"></a>king-pay</h3><h3 id="king-service"><a href="#king-service" class="headerlink" title="king-service"></a>king-service</h3><h3 id="king-timer"><a href="#king-timer" class="headerlink" title="king-timer"></a>king-timer</h3><h3 id="king-web"><a href="#king-web" class="headerlink" title="king-web"></a>king-web</h3>]]></content>
      
      
      <categories>
          
          <category> 信666 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信666 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins</title>
      <link href="/2020/03/01/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E6%B8%A0%E9%81%93%E8%B7%9F%E8%BF%9B%E5%8D%95%E5%8D%B8%E8%B4%A7%E6%B8%85%E5%8D%95/"/>
      <url>/2020/03/01/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E6%B8%A0%E9%81%93%E8%B7%9F%E8%BF%9B%E5%8D%95%E5%8D%B8%E8%B4%A7%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>/var/log/jenkins/jenkins.log  这个是jenkins日志</p><p>它把磁盘撑爆了，你看下能否修改一下jenkins</p><p>这个系统，里面有2个物理盘， 系统在40G这个盘，/root/data下面挂载了一个200G的盘，数据库存在这个地方。但是jenkins装载系统盘，所以把40G的系统盘撑爆了</p><p>这里稍微和你普及一下linux文件系统。linux系统的开始的几个目录名称，安装的时候确定好了，且安装完成之后，这些目录都指向系统磁盘分区的磁盘空间。比如最开始有个目录 /var ,它所在位置是系统安装时候的盘。linux如果要加一个硬盘到系统，就是把磁盘分区之后挂载某个目录下。如果你加个磁盘分区，并把它挂载/var目录下，那么/var就指向新的磁盘空间了。原来系统盘/var这个目录你就无法访问了，当然/var目录还是在，如果你卸载/var目录这个磁盘，那么又回到了系统磁盘分区的/var</p><p>jenkins root账号密码是liukai2009</p>]]></content>
      
      
      <categories>
          
          <category> 领赫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领赫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>账单样式</title>
      <link href="/2020/02/26/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E8%B4%A6%E5%8D%95/"/>
      <url>/2020/02/26/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E8%B4%A6%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>今天突然觉得内心十分惶恐不安。<br>实在是太茫然了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span>&#123;</span></span><br><span class="line">text-align: right;</span><br><span class="line">font-size: 10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.indent</span>&#123;</span></span><br><span class="line">text-indent: 180px;</span><br><span class="line">font-size: 10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.widd</span>&#123;</span></span><br><span class="line">width: 230px;</span><br><span class="line">font-size: 10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.centt</span>&#123;</span></span><br><span class="line">text-align: center;</span><br><span class="line">font-size: 10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.bolder</span>&#123;</span></span><br><span class="line">font-size: 10px;</span><br><span class="line">font-weight: bolder;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.ant-btn-red</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#FFF</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#FF5A44</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-color</span>: <span class="selector-id">#FF5A44</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">text-shadow</span>: 0 <span class="selector-tag">-1px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.12</span>);</span></span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-box-shadow</span>: 0 2<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.045</span>);</span></span><br><span class="line"><span class="css">    <span class="selector-tag">box-shadow</span>: 0 2<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.045</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.ant-btn</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">line-height</span>: 2<span class="selector-class">.2</span>;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    font-weight: 400;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    text-align: center;</span><br><span class="line">    background-image: none;</span><br><span class="line">    border: 1px solid transparent;</span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-box-shadow</span>: 0 2<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.015</span>);</span></span><br><span class="line"><span class="css">    <span class="selector-tag">box-shadow</span>: 0 2<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.015</span>);</span></span><br><span class="line">    cursor: pointer;</span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.3s</span> <span class="selector-tag">cubic-bezier</span>(<span class="selector-class">.645</span>, <span class="selector-class">.045</span>, <span class="selector-class">.355</span>, 1);</span></span><br><span class="line"><span class="css">    <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.3s</span> <span class="selector-tag">cubic-bezier</span>(<span class="selector-class">.645</span>, <span class="selector-class">.045</span>, <span class="selector-class">.355</span>, 1);</span></span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">    -ms-touch-action: manipulation;</span><br><span class="line">    touch-action: manipulation;</span><br><span class="line">    height: 32px;</span><br><span class="line">    padding: 0 15px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.65</span>);</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-color</span>: <span class="selector-id">#d9d9d9</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.font</span>&#123;<span class="attribute">font-size</span>: <span class="number">10px</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"650px"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">style</span>=<span class="string">"background-color: white;margin: auto; font-family:'Microsoft YaHei';"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 25px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 50px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"120px"</span> <span class="attr">height</span>=<span class="string">"25px"</span> <span class="attr">src</span>=<span class="string">"http://fba-srm.oss-cn-hongkong.aliyuncs.com/202002241734417550微信图片_20200224173432.png"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="comment">&lt;!--FBABEE--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">style</span>=<span class="string">"text-align: right;font-size: 25px;font-weight: bold;"</span> &gt;</span>INVOICE<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 2px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>Shenzhen Linkhub Supply-Chain Management Co.LTD<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"font-size: 10px;text-align: right;font-weight: bolder;"</span>&gt;</span>Invoince ID<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"font-size: 10px;text-align: right;"</span>&gt;</span>1904193751<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>Add:302,Building D,New Retail Tech Industrial Zoon<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"font-size: 10px;text-align: right;font-weight: bolder;"</span>&gt;</span>FBA ID<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"font-size: 10px;text-align: right;"</span>&gt;</span>XXXXXXX<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>GUshu,Xixiang Street,Bao'An,518000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"font-size: 10px;text-align: right;font-weight: bolder;"</span>&gt;</span>Date Issued<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"font-size: 10px;text-align: right;"</span>&gt;</span>2019/05/02<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>Guangdong Province,China<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"font-size: 10px;text-align: right;font-weight: bolder;"</span>&gt;</span>Due Date<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"font-size: 10px;text-align: right;"</span>&gt;</span>2019/05/02<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 30px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>Bill to<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>Ship to<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 2px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>公司名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>24300 Nandina Ave,Moreno Valley,CA,<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>公司地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>92551,United States<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 30px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>Items Description<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 2px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>费用集合一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"bolder indent"</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>Rate<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"centt bolder"</span>&gt;</span>Quantity<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right bolder"</span>&gt;</span>Amount<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 2px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>固定费用<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"indent"</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"centt"</span>&gt;</span>x 10 <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>$ 10.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>快递取件费用<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"indent"</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>0/kg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"centt"</span>&gt;</span>x 121kg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>$ 0.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>关税<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"indent"</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"centt"</span>&gt;</span>x 1331 <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>$ 0.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>重量变动费用<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"indent"</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>8/kg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"centt"</span>&gt;</span>x 121kg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>$ 968.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 2px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>偏远地区配送附加费<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 2px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>偏远地区配送附加费<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"indent"</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>90/kg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"centt"</span>&gt;</span>x 121kg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>$ 10890.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 2px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>Total<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right bolder"</span>&gt;</span>$ 11868.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 30px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>Bank Infomation<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 2px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 100px;"</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>Paypal Account<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"widd"</span>&gt;</span>Palpal@fbabee.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>Payoneer Account<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"widd"</span>&gt;</span>fsn2915324940@163.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>T/T<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"widd"</span>&gt;</span>银行账号信息，暂时明确不了<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 80px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 30px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin:0 auto;width:200px;"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">class</span>=<span class="string">"ant-btn-red ant-btn"</span> <span class="attr">style</span>=<span class="string">" text-decoration: none;"</span>&gt;</span>PayPal确认支付<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 领赫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领赫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分页</title>
      <link href="/2020/02/26/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90%E8%B5%9B%E6%9D%B0%E3%80%91%E5%88%86%E9%A1%B5/"/>
      <url>/2020/02/26/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91/%E3%80%90%E8%B5%9B%E6%9D%B0%E3%80%91%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>这个是很久很久之前做的个人理解。  </p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br></pre></td><td class="code"><pre><span class="line">webRoot 文件夹中放.jsp文件(index.jsp/show.jsp)/images文件夹/WEB-INF 文件夹</span><br><span class="line">lib文件夹中放.jar文件(mysql.jar)</span><br><span class="line">WEB-INF 文件夹当中放置.xml文件(web.xml)/lib文件夹(.xml文件与lib文件夹同级)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">工程名\WebRoot\index.jsp</span><br><span class="line"></span><br><span class="line">index.jsp</span><br><span class="line"></span><br><span class="line">&lt;%@ page language="java" import="java.util.<span class="strong">*" pageEncoding="UTF-8" %&gt;</span></span><br><span class="line"><span class="strong">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="strong">/*</span></span><br><span class="line">JSP页面元素：指令[以"&lt;%@"开始，以"%&gt;"]</span><br><span class="line"></span><br><span class="line">将该index.jsp文件放置到浏览器当中去，让浏览器按照指令中的内容去完成</span><br><span class="line">page 页面指令 language 语言是Java语言 import 导入的是Java工程中的util包中的<span class="strong">*所有类 pageEncoding 页面编码为UTF-8</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">JSP页面元素</span></span><br><span class="line"><span class="strong">静态内容 HTMl静态文本/CSS/图片/JS</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">指令 以"&lt;%@"开始，以"%&gt;"结束</span></span><br><span class="line"><span class="strong">举例：&lt;%@ page language="java" import="java.util.*</span>" pageEncoding="UTF-8" %&gt;</span><br><span class="line"><span class="code">page 页面指令 language 语言是Java语言 import 导入的是Java工程中的util包中的*所有类 pageEncoding 页面编码为UTF-8</span></span><br><span class="line"></span><br><span class="line">表达式 "&lt;%=Java表达式%&gt;"  //将查询到的内容 在界面/客户端/浏览器网页上进行输出</span><br><span class="line"><span class="code">举例：&lt;%=info.getUsername()%&gt;&lt;%=info.getPassword()%&gt;</span></span><br><span class="line">小脚本 "&lt;% java代码 %&gt;"</span><br><span class="line">声明 "&lt;%! 函数或者是方法%&gt;"</span><br><span class="line"></span><br><span class="line">动作 以"&lt;jsp:动作名"开始,以"&lt;/jsp:动作名&gt;"结束</span><br><span class="line"></span><br><span class="line">注释 "&lt;!--注释内容，客户端可以进行查看得到 --&gt;"</span><br><span class="line"><span class="code">"&lt;%--注释内容，但客户端无法查看得到--&gt;"</span></span><br><span class="line"></span><br><span class="line">注意：当前的jsp页面中原本默认的编码方式是ISO-8859-1；</span><br><span class="line"><span class="code">然而浏览器中的编码方式为UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="code">如果以当前页中的原本的编码方式，也就是ISO-8859-1的编码方式进行在当前的jsp页面进行编码，</span></span><br><span class="line"><span class="code">那么传送到浏览器当中去的内容将是以ISO-8859-1的编码形式的内容传送过去，</span></span><br><span class="line"><span class="code">但浏览器当中的编码方式是UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="code">相当于jsp页面当中是写的韩文，然而浏览器当中只认识中文，</span></span><br><span class="line"><span class="code">所以当浏览器接受该jsp文件时就会将韩文看作是中文，以中文来对待</span></span><br><span class="line"><span class="code">浏览器是看不懂韩文的，所以会就会发生翻译上的偏差，也就是出现乱码</span></span><br><span class="line"><span class="code">也就是当两种编码方式不一致的时候，就会出现乱码的情况</span></span><br><span class="line"></span><br><span class="line"><span class="code">所以在指令中就需要将该jsp页面的页面编码方式该为与浏览器当中一样的编码方式</span></span><br><span class="line"><span class="code">这样以中文编码的形式传送过去的内容，这时候浏览器就能够识别jsp页面中所写的内容，以中文的编码方式来认识中文</span></span><br><span class="line"><span class="code">这样就不会出现乱码的情况</span></span><br><span class="line"><span class="code">也就是说当两种编码方式一致的时候，就不会出现乱码的情况</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">还有两种方式可以进行编码操作：request.setCharacterEncoding("UTF-8");</span></span><br><span class="line"><span class="code">response.setContentType("text/html;charset=utf-8");</span></span><br><span class="line"></span><br><span class="line">page n.一页；专栏；一张；事件；网页；vi.翻书；vt.标记…的页码</span><br><span class="line">language n.语言，语言文字，表达方式</span><br><span class="line">import v.进口，输入 n.进口，输入</span><br><span class="line">encoding n.编码</span><br><span class="line"></span><br><span class="line"><span class="strong">*/</span></span><br><span class="line"><span class="strong">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="strong">&lt;jsp:forward page="user.do?method=fenye"&gt;&lt;/jsp:forward&gt;</span></span><br><span class="line"><span class="strong">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="strong">/*</span> </span><br><span class="line">JSP页面元素：动作[以"&lt;jsp:动作名"开始，以"&lt;/jsp:动作名&gt;"结束]</span><br><span class="line"></span><br><span class="line">联想：jsp:forward 当前的jsp页面发生了一个动作也就是页面的前进，也就是相当于跳转到另外一个界面中去</span><br><span class="line"><span class="code">page="user.do?method=fenye" 跳转到的指定的页面,该指定的页面是user.do,也就是去到UserServlet.java的这个界面</span></span><br><span class="line"><span class="code">且传递了一个参数，传递参数的格式是在跳转到指定的页面后(user.do)后面添加一个问号？，</span></span><br><span class="line"><span class="code">？问号后面就写具体要传递的参数名称(method)以及参数值(fenye)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">传递参数的原因：当客户端向服务器发起一个请求，</span></span><br><span class="line"><span class="code">就像相当于有一个用户向qq发起一个请求一样</span></span><br><span class="line"><span class="code">有可能该用户需要进行的是登陆操作(也就是到数据库当中去进行查询看有没有与之一样的账户，密码，若有则进行登陆；若没有，则有可能是账户或密码错误或者是该用户被禁用又或者是该用户根本没有注册过)</span></span><br><span class="line"><span class="code">也有可能用户需要进行的是注册操作(也就是到新增一条记录[账户，密码]到数据库去)</span></span><br><span class="line"><span class="code">也有可能用户需要进行的是修改信息操作</span></span><br><span class="line"><span class="code">也有可能用户需要进行的是注销操作(也就是到数据库当中将该用户进行删除操作)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">那么如何知道该用户到底需要进行的是什么操作？</span></span><br><span class="line"><span class="code">因此，此时就传递一个参数(method=fenye)过来,告诉服务器，</span></span><br><span class="line"><span class="code">客户端也就是该用户到底想要干什么</span></span><br><span class="line"><span class="code">想要干什么，就传递一个参数过来，告诉服务器，</span></span><br><span class="line"><span class="code">然后服务器就根据这个参数做出相应的判断，</span></span><br><span class="line"><span class="code">判断完成之后，</span></span><br><span class="line"><span class="code">就执行登陆(查询)操作/注册(新增)操作/修改(修改)信息操作/注销(删除)操作</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">UserServlet.java是一个servlet/servlet在现在指的就是UserServlet.java</span></span><br><span class="line"><span class="code">(Servlet的步骤：</span></span><br><span class="line"><span class="code">1.写一个Java类(该UserServlet.java即为一个servlet)</span></span><br><span class="line"><span class="code">2.在该.java类中也就是UserServlet.java类中</span></span><br><span class="line"><span class="code">实现一个Servlet接口(implements Servlet)/继承一个HttpServlet类(extends HttpServlet)</span></span><br><span class="line"></span><br><span class="line"><span class="code">实现(implements)Servlet接口和继承(extends)HttpServlet类有所不同</span></span><br><span class="line"><span class="code">1'当采取的是实现Servlet这个接口时（implements Serevlet),</span></span><br><span class="line"><span class="code">该java类也就是UserServlet.java相当于变成了一个实现类</span></span><br><span class="line"><span class="code">该实现类UserServlet.java就将会自动的去重写Servlet接口当中的所有方法</span></span><br><span class="line"><span class="code">也就是说有些方法不管需不需要被用到，都会进行重写，</span></span><br><span class="line"><span class="code">也就是说多了很多不必要的操作</span></span><br><span class="line"><span class="code">2'当采取的是继承HttpServlet这个类是(extends HttpServlet)</span></span><br><span class="line"><span class="code">也就是说此时的HttpServlet.java相当于UserServlet.java该类的父类</span></span><br><span class="line"><span class="code">这个时候子类继承父类，</span></span><br><span class="line"><span class="code">就不会像实现类实现接口中的一样，自动重写接口当中全部的方法</span></span><br><span class="line"><span class="code">而是可以进行有所选择性的去重写方法</span></span><br><span class="line"><span class="code">需要父类当中的XX()方法，就对该方法进行重写即可</span></span><br><span class="line"></span><br><span class="line"><span class="code">3.注册和映射</span></span><br><span class="line"><span class="code">也就是web.xml文件中进行操作，</span></span><br><span class="line"><span class="code">有多少个servlet文件就需要写多少个注册和映射，</span></span><br><span class="line"><span class="code">因为每个servlet的.java文件不同，其访问方式也就不同</span></span><br><span class="line"></span><br><span class="line"><span class="code">&lt;!--注册--&gt;</span></span><br><span class="line"><span class="code">&lt;servlet&gt;</span></span><br><span class="line"><span class="code">&lt;servlet-name&gt;UserServlet&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="code">&lt;servlet-class&gt;com.servlet.UserServlet&lt;/servlet-class&gt;</span></span><br><span class="line"><span class="code">                                                        &lt;/servlet&gt;</span></span><br><span class="line"><span class="code">&lt;!--映射--&gt;</span></span><br><span class="line"><span class="code">&lt;servlet-mapping&gt;</span></span><br><span class="line"><span class="code">&lt;servlet-name&gt;UserServlet&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="code">&lt;url-pattern&gt;/user.do&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="code">&lt;/servlet-mapping&gt;</span></span><br><span class="line"><span class="code">/*</span></span><br><span class="line"><span class="code">注册：</span></span><br><span class="line"><span class="code">&lt;servlet-name&gt;&lt;/servlet-name&gt;：servlet的名字</span></span><br><span class="line"><span class="code">servlet步骤中的第一个中讲到：写一个.java类,</span></span><br><span class="line"><span class="code">也就是说该.java类就是servlet，</span></span><br><span class="line"><span class="code">所以.java类的名称也就是servlet的名称(UserServlet.java)</span></span><br><span class="line"><span class="code">&lt;servlet-class&gt;&lt;/servlet-class&gt;:指定是哪一个.java类是servlet</span></span><br><span class="line"><span class="code">servlet所在java当中的的具体的地址(全类名)[class 类]</span></span><br><span class="line"><span class="code">servlet相当于.java类也就是UserServlet.java类</span></span><br><span class="line"><span class="code">也就是在问UserServlet.java类在具体哪一个地方</span></span><br><span class="line"><span class="code">com.servlet.UserServlet</span></span><br><span class="line"><span class="code">com.servlet是一个自己创建的一个包</span></span><br><span class="line"><span class="code">UserServlet是一个自己写的java类，也就是servlet</span></span><br><span class="line"><span class="code">包名+类名=全类名</span></span><br><span class="line"><span class="code">映射：</span></span><br><span class="line"><span class="code">&lt;servlet-name&gt;&lt;/servlet-name&gt;:servlet的名字</span></span><br><span class="line"><span class="code">&lt;url-pattern&gt;&lt;/url-pattern&gt;：相当于是UserServlet.java的一个地址，</span></span><br><span class="line"><span class="code">只不过该地址是放在网页上的以供被打开这个文件</span></span><br><span class="line"><span class="code">也就是同样还是在网页上去搜寻的还是UserServlet.java这个文件，</span></span><br><span class="line"><span class="code">但后缀名以及名称变了，名称可变可不变</span></span><br><span class="line"><span class="code">内容却还是那个.java文件</span></span><br><span class="line"><span class="code"> &lt;url-pattern&gt;/user.do&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="code">"/"和".do"是这个如果.java文件要放在网页上的格式，所必不可少的</span></span><br><span class="line"><span class="code">user.do和UserServlet.java指的是同一个文件</span></span><br><span class="line"><span class="code">只是UserServlet.java文件的后缀名的格式变换成了.do，</span></span><br><span class="line"><span class="code">以及名称换成了user，也可以不改变名称，依旧用UserServlet亦可，那么就变成了UserServlet.do</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">书写方式：http://127.0.0.1:8080/工程名(UserServlet.java所在的工程当中)/文件名(user.do)</span></span><br><span class="line"></span><br><span class="line"><span class="code">  也就是说在网页当中输入的是哪一个url,哪一个XX.do 说明的是要访问的是&lt;url-pattern&gt;与之对应一样的哪一个servlet文件</span></span><br><span class="line"></span><br><span class="line"><span class="code">  在该映射当中，通过url找到该servlet的名字，</span></span><br><span class="line"><span class="code">再通过servlet的名字找到注册当中的与之对应的一样的servlet名字，</span></span><br><span class="line"><span class="code">最后在注册当中通过知道了servlet的名字，找到该servlet的类</span></span><br><span class="line"></span><br><span class="line"><span class="code">流程：网页当中输入的是web.xml文件当中的&lt;url-pattern&gt;&lt;/url-pattern&gt;当中输入的内容</span></span><br><span class="line"><span class="code">                                                                                                                           |</span></span><br><span class="line"><span class="code">     通过该url地址&lt;url-pattern&gt;&lt;/url-pattern&gt;找到映射&lt;servlet-mapping&gt;&lt;/servlet-mapping&gt;</span></span><br><span class="line"><span class="code">    |</span></span><br><span class="line"><span class="code">     找到该映射之后，进行查找映射当中的&lt;servlet-name&gt;&lt;servlet-name&gt;,也就是servlet的名字，也就是.java文件(UserServlet.java)的名字</span></span><br><span class="line"><span class="code">    |</span></span><br><span class="line"><span class="code">     通过servlet的名字找到servlet的注册&lt;servlet&gt;&lt;/servlet&gt;</span></span><br><span class="line"><span class="code">    |</span></span><br><span class="line"><span class="code">      找到该注册之后，依据在映射当中的servlet-name,进行查找注册当中的&lt;servlet-name&gt;&lt;/servlet-name&gt;,</span></span><br><span class="line"><span class="code">(注册和映射当中的&lt;servlet-name&gt;&lt;/servlet-name&gt;需要保持一致，</span></span><br><span class="line"><span class="code">否则通过url查找到映射，映射当中的servlet的名字name之后，却找不到与之对应servlet名字一样的注册)</span></span><br><span class="line"><span class="code">    |</span></span><br><span class="line"><span class="code">查找的servlet-name所对应的注册之后，再找到该注册当中的&lt;servlet-class&gt;&lt;/servlet-class&gt;,也就是该servlet文件在Java当中的地址(包名+类名)，也就是该.java文件所在的具体地址(全类名)</span></span><br><span class="line"></span><br><span class="line"><span class="code">*/</span></span><br><span class="line"><span class="code"> </span></span><br><span class="line">forward adv. 向前，前进；adj.向前的，前部的；进步的 v.转交，转递；n.前锋</span><br><span class="line">mapping 动词map的现在分词形式 n.绘图；[数]映象</span><br><span class="line">map v.测绘，为…绘制地图 n.地图；路线图；天体图</span><br><span class="line">pattern n.模型；典型；图案；方式 vi.形成图案 vt.模仿；用图案装饰</span><br><span class="line">url abbr.Uniform Resource Locator 统一资源定位符 缩写为URL，又叫做网页地址，是互联网上标准的资源的地址(Address)</span><br><span class="line"><span class="code">互联网上的每一个文件都有一个唯一的一个URL，它包含的信息是指出文件的位置以及浏览器应该怎么处理他</span></span><br><span class="line"><span class="code">它最初是由蒂姆.伯纳斯-李 发明用来作为万维网的地址的</span></span><br><span class="line"><span class="code">现在他已经被万维网联盟编制为因特网标准RFC1738了</span></span><br><span class="line"><span class="code">统一资源定位符的开始，一般会标志着一个计算机网络所使用的网络协议</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">因为index.jsp当中写到一个动作&lt;jsp:forward&gt;,实现当前index.jso页面(page)跳转到user.do界面去，所以需要去到那个界面就写哪一个界面</span><br><span class="line"></span><br><span class="line">工程名\src\com\servlet\UserServlet.java</span><br><span class="line"></span><br><span class="line">UserServlet.java</span><br><span class="line"></span><br><span class="line">package com.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dao.UserDao;</span><br><span class="line">import com.pojo.UserInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class UserInfo extends HttpServlet&#123;</span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">/*servlet的三个步骤：1.写一个java类，即该类UserServlet.java即为一个servlet</span></span><br><span class="line"><span class="code">     2.实现一个Servlet接口(implements Servlet),并进行重写Servlet接口当中的service()方法</span></span><br><span class="line"><span class="code">/继承HttpServlet类，并同样进行重写HttpServlet父类当中的service()方法</span></span><br><span class="line"><span class="code">(两者有不同，查上)</span></span><br><span class="line"><span class="code">     3.注册和映射</span></span><br><span class="line"><span class="code">可以写一个web.xml文件，自己写UserServlet的注册和映射</span></span><br><span class="line"><span class="code">也可以采取自带注册和映射的方式</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">自带注册和映射的方式</span></span><br><span class="line"><span class="code">点击com.servlet包，</span></span><br><span class="line"><span class="code">并右击new一个Servlet文件，</span></span><br><span class="line"><span class="code">写好servlet的文件名(也就是.java文件的名字)之后，</span></span><br><span class="line"><span class="code">找到</span></span><br><span class="line"><span class="code">which method stubs would you like to create?</span></span><br><span class="line"><span class="code"> Inherited abstract methods     doGet()</span></span><br><span class="line"><span class="code"> Constructors from superclass   doPost()</span></span><br><span class="line"><span class="code"> init() and destroy()     doPut()</span></span><br><span class="line"><span class="code"> doDelete()getServletInfo()</span></span><br><span class="line"><span class="code">将其全部都不要选择勾选</span></span><br><span class="line"></span><br><span class="line"><span class="code">单击NEXT，</span></span><br><span class="line"><span class="code">找到</span></span><br><span class="line"><span class="code">Servlet/JSP Mapping URL：/servlet/类名(servlet的文件，.java的名称)</span></span><br><span class="line"><span class="code">将/servlet/类名  修改为：/XX.do的格式即可</span></span><br><span class="line"><span class="code">就完成了servlet的自带注册映射的web.xml文件</span></span><br><span class="line"><span class="code">最后Finish</span></span><br><span class="line"></span><br><span class="line"><span class="code">inherited adj. 遗传的(病的)，继承权的，通过继承得到的</span></span><br><span class="line"><span class="code">abstract adj.抽象的，深奥的； n.摘要</span></span><br><span class="line"><span class="code">methods 名词method的复数形式 n.方法</span></span><br><span class="line"><span class="code">method n.办法，方法；秩序，规律</span></span><br><span class="line"><span class="code">constructors n.构造器</span></span><br><span class="line"><span class="code">from prep.从…来，来自</span></span><br><span class="line"><span class="code">super从子类当中调用父类的构造方法</span></span><br><span class="line"><span class="code">class 类</span></span><br><span class="line"><span class="code">init abbr.[计]初始化(=initialization)</span></span><br><span class="line"><span class="code">destroy v.破坏，消灭，毁灭</span></span><br><span class="line"><span class="code">put v.放，摆；使出于</span></span><br><span class="line"><span class="code">servlet n.小服务程序</span></span><br><span class="line"><span class="code">info abbr.信息；情报(=infomation)</span></span><br><span class="line"><span class="code">override v.推翻；无视；凌驾；超驰控制(使自动控制暂时失效而改用手动控制)；[计算机]覆盖；n.给代理人的佣金；超驰控制装置；推翻</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">private UserDao userDao = new UserDao();</span></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="code">/*override 重写service方法(重写Servlet接口当中的service方法/重写HttpServlet父类当中的service方法),</span></span><br><span class="line"><span class="code">service()方法当中的参数需要进行修改</span></span><br><span class="line"><span class="code">将service(HttpServletRequest avg0,HttpServletResponse avg1)方法当中的avg0修改为request，当中的avg1修改为response</span></span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">@Override</span></span><br><span class="line"><span class="code">protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOExcetion&#123;</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="code">/* 通过request对象的getParameter("参数名称")方法</span></span><br><span class="line"><span class="code">获得从index.jsp界面传递过来的参数值(fenye)</span></span><br><span class="line"><span class="code">且将该参数值赋值给String字符串类型的method，</span></span><br><span class="line"><span class="code">   由该参数值让服务器进行判断</span></span><br><span class="line"><span class="code">判断之后得知用户/客户端到底需要进行一个什么操作</span></span><br><span class="line"><span class="code">request.getParameter("index.jsp界面中传递的参数名称")：返回的是该参数名称所对应的参数值，也就是fenye</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">String method = request.getParameter("request");</span></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">/*为什么要进行一个if判断</span></span><br><span class="line"><span class="code">if(条件)&#123;条件成立所要执行的代码&#125;</span></span><br><span class="line"><span class="code">客户端向服务器发起一个请求，</span></span><br><span class="line"><span class="code">服务器是不知道客户端/用户到底要进行一个什么操作的</span></span><br><span class="line"><span class="code">有可能该用户/客户端要进行一个登陆(查询)操作/修改(修改)操作/注销(删除)操作/注册(新增)操作</span></span><br><span class="line"><span class="code">所以就有了传递参数，</span></span><br><span class="line"><span class="code">由该参数告诉服务器，客户端/用户想要做一个什么样的操作</span></span><br><span class="line"><span class="code">此时接收到参数的服务器就会对传递过来的参数进行判断</span></span><br><span class="line"><span class="code">[</span></span><br><span class="line"><span class="code">用.equals()布尔类型Boolean方法进行内容上的比较判断，</span></span><br><span class="line"><span class="code">true则表示两者一致，也就是说要进行的操作就是这个；</span></span><br><span class="line"><span class="code">false则表示两者不一致，也就是说要进行的操作不是这个，再进行下一个if()判断，是否为其他操作</span></span><br><span class="line"><span class="code">]</span></span><br><span class="line"><span class="code">判断传递过来的到底是一个什么参数</span></span><br><span class="line"><span class="code">因为存在很多的不同的操作，所以传递过来的参数也就不一致，执行的操作(方法)也就不一致</span></span><br><span class="line"></span><br><span class="line"><span class="code">如果要进行一个fenye操作(查询操作[查询出的内容以分页的形式显示出来])，</span></span><br><span class="line"><span class="code">那么传递过来的参数就需要是fenye,</span></span><br><span class="line"><span class="code">很明显从index.jsp界面传递过来的参数是fenye</span></span><br><span class="line"><span class="code">那么就执行这一个方法doFenYe(request,response)</span></span><br><span class="line"><span class="code">那么此时当写出doFenYe(request,response)方法时，是会报错的</span></span><br><span class="line"><span class="code">因为此时的当前类当中，是没有写这样一个方法的，所以报错</span></span><br><span class="line"><span class="code">所以此时Ctrl+1或者时Alt+/，</span></span><br><span class="line"><span class="code">进行自动创建一个这样的方法 </span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">if("fenye".equals(method))&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="code">doFenYe(request,response);</span></span><br><span class="line"></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">/* 分页操作的原理：</span></span><br><span class="line"><span class="code">举例子</span></span><br><span class="line"><span class="code">如果淘宝/京东/天猫要进行一次查询用户名以及密码的操作[select usernmae,password from userinfo]</span></span><br><span class="line"><span class="code">那么到时候查出来的数据将会过于庞大，</span></span><br><span class="line"><span class="code">更何况数据还要在一张界面当中显示出来，</span></span><br><span class="line"><span class="code">那么这一张界面极有可能因为数据太过于庞大而被撑爆</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">又比方说，如果将一本语文书中的所有内容全部显示在一张A4纸当中，</span></span><br><span class="line"><span class="code">那么这一张纸当中显示出来一定是密密麻麻的全部都是文字，让人眼花缭乱，就无法快捷的找到自己所需要的内容</span></span><br><span class="line"></span><br><span class="line"><span class="code">所以就采取了分页的操作，</span></span><br><span class="line"><span class="code">也就是说语文书是一本书，</span></span><br><span class="line"><span class="code">一页一页纸张组成的书，每一页当中都有其固定的文条数，也有一个页码数</span></span><br><span class="line"><span class="code">要哪一页就找哪一页的页码即可</span></span><br><span class="line"><span class="code">这样既方便找到所需要的内容，也方便页面的整洁，美观，用起来也更加的快捷</span></span><br><span class="line"></span><br><span class="line"><span class="code">所以分页的操作也就是应用于此，适用于数据量庞大时，就进行分页操作</span></span><br><span class="line"></span><br><span class="line"><span class="code">现在从数据库当中进行查询得到一结果集，其中的记录有50条，也就是说有50个对象用户</span></span><br><span class="line"></span><br><span class="line"><span class="code">若每一页指定放置10条记录</span></span><br><span class="line"><span class="code">那么总共即为 50/10=5页</span></span><br><span class="line"></span><br><span class="line"><span class="code">若每一页指定放置5条记录</span></span><br><span class="line"><span class="code">那么总共即为50/5=10页</span></span><br><span class="line"></span><br><span class="line"><span class="code">若每一页指定放置2条记录</span></span><br><span class="line"><span class="code">那么总共即为50/2=25页</span></span><br><span class="line"></span><br><span class="line"><span class="code">所以得出一个结论：</span></span><br><span class="line"><span class="code">总的记录数是固定的，</span></span><br><span class="line"><span class="code">但是每一页放置的记录数是可变的</span></span><br><span class="line"><span class="code">随着每一页放置的记录数变化</span></span><br><span class="line"><span class="code">最后的总页数是跟着变化的</span></span><br><span class="line"></span><br><span class="line"><span class="code">然而真正进行操作时，</span></span><br><span class="line"><span class="code">最主要还是要进行查询操作，也就是说重要的是查询出来的内容</span></span><br><span class="line"><span class="code">那么如何根据总的记录条数/每一页的条数/以及总页数，来快速的查询找到用户所需要的内容？</span></span><br><span class="line"></span><br><span class="line"><span class="code">结果集为一个集合</span></span><br><span class="line"><span class="code">集合当中的记录是从下标为0的记录数开始的</span></span><br><span class="line"><span class="code">也就是说</span></span><br><span class="line"><span class="code">现有一结果集，其中总共有50条记录，每一页当中放置5条记录，那么总共有50/5=10页</span></span><br><span class="line"></span><br><span class="line"><span class="code">那么第一页当中放置的记录数为5条，即1，2，3，4，5</span></span><br><span class="line"><span class="code">但若以集合的形式来说明有几条记录的话</span></span><br><span class="line"><span class="code">则下标为0，1，2，3，4的记录就代表着的就是1，2，3，4，5</span></span><br><span class="line"><span class="code">也就是说第下标为0的记录就是第一条记录</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">以下都以下标来表示记录条数</span></span><br><span class="line"><span class="code">第1页0，1，2，3，4</span></span><br><span class="line"><span class="code">第2页5，6，7，8，9</span></span><br><span class="line"><span class="code">第3页10，11，12，13，14</span></span><br><span class="line"><span class="code">第4页15，16，17，18，19</span></span><br><span class="line"><span class="code">…………</span></span><br><span class="line"><span class="code">那么能不能说，第下标为0的记录条也就是代表着第1页</span></span><br><span class="line"><span class="code">      第下标为5的记录条也就是代表者第2页</span></span><br><span class="line"><span class="code">      第下标为10的记录条也就是代表着第3页</span></span><br><span class="line"><span class="code">      第下标为10的记录条也就是代表着第4页</span></span><br><span class="line"><span class="code">      </span></span><br><span class="line"><span class="code">即通过每一页的第一条记录数的下标数，来知道其所翻到的页数是哪一页</span></span><br><span class="line"><span class="code">在数据库当中有一个limit</span></span><br><span class="line"><span class="code">limit n 代表着的是显示n条记录</span></span><br><span class="line"><span class="code">limit m , n 代表着的是显示从第下标数为m的记录数开始显示，显示n条记录  </span></span><br><span class="line"><span class="code">那么limit m ，n 就代表了显示页面当中每一页的第一条记录以及每一页要放多少条记录</span></span><br><span class="line"><span class="code">通过m,也就知道了该页是哪一页</span></span><br><span class="line"></span><br><span class="line"><span class="code">*/</span></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">private void doFenYe(HttpServletRequest request,HttpServletResponse response) throws ServletException ,IOException&#123;</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="code">/*</span></span><br><span class="line"><span class="code">总页数是依据总的记录条数以及每一页当中要放置多少条记录计算而来的</span></span><br><span class="line"><span class="code">需要显示的是哪一个页面，以及每一个页面当中放置多少条记录都是可变的，也就是说都是可以被指定的</span></span><br><span class="line"><span class="code">若客户端/用户指定需要看到哪一个页面，又或者是说指定每一页当中该放多少条记录，都是可以的</span></span><br><span class="line"><span class="code">同样也是以传递参数的形式传递过来</span></span><br><span class="line"></span><br><span class="line"><span class="code">在index.jsp传递参数</span></span><br><span class="line"><span class="code">例如</span></span><br><span class="line"><span class="code">&lt;jsp:forward page="user.do?method=fenye&amp;page=m&amp;size=n"&gt;&lt;/jsp:forward&gt;</span></span><br><span class="line"><span class="code">参数与参数用&amp;连接即可</span></span><br><span class="line"></span><br><span class="line"><span class="code">若用户/客户端未传递参数过来，则采用默认的显示哪一页，以及每一页显示多少条记录，</span></span><br><span class="line"><span class="code">也就是自己所输入的 int page=1; int size=4;默认显示的是第一页，以及每一页显示4条记录</span></span><br><span class="line"></span><br><span class="line"><span class="code">但当用户/客户端传递了参数过来，也就是说指定了要显示第几页，每一页显示多少条记录时，</span></span><br><span class="line"><span class="code">那么就要先将用户/客户端传递过来的参数取出来</span></span><br><span class="line"><span class="code">同样还是通过request对象的getParameter("参数名称")方法将参数值(page=?&amp;size=?)取出来,</span></span><br><span class="line"><span class="code">(这时候，通过request对象的getParameter()方法取出来的值的类型是一个字符串String类型的)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">然后进行判断(判断原因：也有可能仅仅只是传了一个参数名称，但并没有传递参数值过来)</span></span><br><span class="line"><span class="code">判断传递过来的参数值是否为空(也就是说以防用户/客户端传递了一个参数名称过来，但并没有传递参数值，即参数值为空null)</span></span><br><span class="line"><span class="code">若不为空也就是page!=null&amp;size!=null</span></span><br><span class="line"><span class="code">那么page和size的取值就按照用户/客户端指定的要显示的页数以及每一页要显示多少条记录来操作</span></span><br><span class="line"><span class="code">但上文说到通过request对象的getParameter()方法得到的值是一个字符串类型的值</span></span><br><span class="line"><span class="code">而需要显示的第几页，每一页需要显示几条，这都是一个整数</span></span><br><span class="line"><span class="code">所以这时候就需要一个从字符串String到整数int的转换</span></span><br><span class="line"></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line"><span class="code">将字符串String类型转换为整数int类型的方法为：int XX(变量名)=Integer.parseInt(需要转换成int整数类型的String字符串类型);</span></span><br><span class="line"><span class="code">[</span></span><br><span class="line"><span class="code">若需要转换成int整数类型的String字符串类型本身就是被标注了是一个字符串类型就不必要打双引号""</span></span><br><span class="line"><span class="code">比如：声明是一个字符串类型</span></span><br><span class="line"><span class="code"> String str = "12";</span></span><br><span class="line"><span class="code">int str2 = Integer.parseInt(str);</span></span><br><span class="line"><span class="code">未声明是一个字符串类型</span></span><br><span class="line"><span class="code">int str3 = Integer.parseInt("13");</span></span><br><span class="line"><span class="code">]</span></span><br><span class="line"><span class="code">将整数int类型转换为字符串String类型的方法为：String XX(变量名)=整数的变量名.toString();</span></span><br><span class="line"><span class="code">[</span></span><br><span class="line"><span class="code">比如： 声明一个整数类型的变量,使之字符串化</span></span><br><span class="line"><span class="code">int a= 12;</span></span><br><span class="line"><span class="code">String b = a.toString();</span></span><br><span class="line"><span class="code">]</span></span><br><span class="line"></span><br><span class="line"><span class="code">该处有个重新赋值的操作</span></span><br><span class="line"><span class="code">也就是先定义了默认的显示页码数和每一页中要显示的条数 int page=1；</span></span><br><span class="line"><span class="code">       int size=4;</span></span><br><span class="line"><span class="code">但当用户/客户端有指定的参数传递过来时，</span></span><br><span class="line"><span class="code">就先将参数取出来，再判断是否为null,[if(条件)&#123;条件成立执行的代码&#125;]</span></span><br><span class="line"><span class="code">最后将参数进行从String字符串类型转换成int整数类型并且赋值给之前定义过的page以及size</span></span><br><span class="line"></span><br><span class="line"><span class="code">但当用户/客户端没有指定的参数传递过来时/或者说时传递过来了参数名称，却并没有参数值，</span></span><br><span class="line"><span class="code">也就是说page为null空以及size为null空[page==null&amp;size==null]</span></span><br><span class="line"><span class="code">就将不会执行if语句当中大括号当中的代码，</span></span><br><span class="line"><span class="code">也就不会被重新赋值，</span></span><br><span class="line"><span class="code">也就是说明没有传递参数过来，</span></span><br><span class="line"><span class="code">就用默认的page&amp;size参数显示查询的数据</span></span><br><span class="line"><span class="code">[if(条件)&#123;条件成立执行的代码&#125;]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    */</span></span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">int page = 1;</span></span><br><span class="line"><span class="code">int size = 4;</span></span><br><span class="line"></span><br><span class="line"><span class="code">String pageString = request.getParameter("page");</span></span><br><span class="line"><span class="code">if(page != null)&#123;</span></span><br><span class="line"><span class="code">page = Integer.parseInt(pageString);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">String sizeString = request.getParameter("size");</span></span><br><span class="line"><span class="code">if(sizeString != null)&#123;</span></span><br><span class="line"><span class="code">size = Integer.parseInt(sizeString);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">/*越界判断</span></span><br><span class="line"><span class="code">也就是说当按"上一页"一直按一直按，按到了第0页，甚至按到了第-1页，第-2页，…</span></span><br><span class="line"><span class="code">从第0页开始，一直往下-1，-2页界面当中是没有任何的内容的</span></span><br><span class="line"><span class="code">可能出现这种情况吗？</span></span><br><span class="line"><span class="code">很显然，是不被允许的，这就被看作是一个漏洞</span></span><br><span class="line"><span class="code">所以仅需要写出一个判断即可</span></span><br><span class="line"><span class="code">也就是判断如果用户/客户端要显示的页面是否为第0页，第负数的页，也就是当页数小于1时，</span></span><br><span class="line"><span class="code">将其page进行重新赋值，赋值为1，也就是说一旦显示的页数小于1，就给page赋值为1，</span></span><br><span class="line"><span class="code">也就是说显示的内容一直都是第1页当中的内容</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">if(page &lt; 1)&#123;</span></span><br><span class="line"><span class="code">page = 1;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">/*该处有一句语法知识：接口的引用指向实现类</span></span><br><span class="line"><span class="code">Map是一个接口，HashMap是接口Map的实现类</span></span><br><span class="line"><span class="code">如同List与ArrayList是一样的</span></span><br><span class="line"><span class="code">List同样是一个接口，而ArrayList是接口List的实现类</span></span><br><span class="line"><span class="code">称之为接口的引用指向实现类</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line"><span class="code">Map map = new HashMap();</span></span><br><span class="line"></span><br><span class="line"><span class="code">/*使用到了UserDAO中的fenye()方法</span></span><br><span class="line"><span class="code">知识点：</span></span><br><span class="line"><span class="code">之前学习的是.jsp文件负责界面，servlet做访问数据库部分</span></span><br><span class="line"><span class="code">(jsp与servlet两者其实都可以负责界面以及数据库，只是进行依据代码简洁程度做了分工)</span></span><br><span class="line"><span class="code">而现在分成了三类，</span></span><br><span class="line"><span class="code">第一类仍然是.jsp文件负责界面</span></span><br><span class="line"><span class="code">第二类是servlet,却不再是负责访问数据库的操作了，</span></span><br><span class="line"><span class="code">而是负责协调，又或者说成是传递参数的作用，</span></span><br><span class="line"><span class="code">是一个媒介</span></span><br><span class="line"></span><br><span class="line"><span class="code">从index.jsp中传递过来的参数(method=fenye :具体要执行的是什么操作/page=m :显示的是第m页的内容/size=n :每一页要显示几条记录)</span></span><br><span class="line"><span class="code">将参数整理好(进行了参数判断)之后，</span></span><br><span class="line"><span class="code">又将参数进行传递给DAO，让之写好sql语句，</span></span><br><span class="line"><span class="code">DAO利用其参数(page,size)写好sql语句之后，又将sql语句传递给DBUtil类当中的query(String sql,Object...p)查询方法</span></span><br><span class="line"><span class="code">DBUtil类当中的query()方法的返回类型是一个ResultSet结果集，</span></span><br><span class="line"><span class="code">也就是说查询到的内容都放到了结果集当中</span></span><br><span class="line"><span class="code">也就是说调用者调用了这个方法，得到的结果是一个结果集，</span></span><br><span class="line"><span class="code">也就是说调用DBUtil类当中的query()方法的调用者DAO得到的只是一个结果集</span></span><br><span class="line"><span class="code">但需要的真的只是结果集吗？</span></span><br><span class="line"><span class="code">操作对象方便，还是操作结果集方便</span></span><br><span class="line"><span class="code">大多数人的回答是操作结果集方便</span></span><br><span class="line"></span><br><span class="line"><span class="code">但是并不是操作结果集方便</span></span><br><span class="line"><span class="code">但是并不是操作结果集方便</span></span><br><span class="line"><span class="code">但是并不是操作结果集方便</span></span><br><span class="line"></span><br><span class="line"><span class="code">相反，是操作对象方便</span></span><br><span class="line"><span class="code">原因有二：</span></span><br><span class="line"><span class="code">一是因为java是一门面向对象的编程语言，所以操作对象方便</span></span><br><span class="line"><span class="code">二是自己猜的：如果说操作结果集方便的话，</span></span><br><span class="line"><span class="code">使用结果集带给我们的是什么？</span></span><br><span class="line"><span class="code">一张满是记录，满是数据的表？</span></span><br><span class="line"><span class="code">一堆数据？一堆毫无生机的死气沉沉的数据？</span></span><br><span class="line"><span class="code">尽管显示的时候，</span></span><br><span class="line"><span class="code">如果要显示的记录，数据，</span></span><br><span class="line"><span class="code">他的确是做到了，可他的用处也就止于此了，</span></span><br><span class="line"><span class="code">除了显示一堆了无生机的死的数据之外，结果集再做不了其他的用处</span></span><br><span class="line"></span><br><span class="line"><span class="code">但如果说操作对象的话，很大的不一样</span></span><br><span class="line"><span class="code">他带来的数据是活着的，并且很方便</span></span><br><span class="line"><span class="code">怎么活着？</span></span><br><span class="line"><span class="code">用自己打个比方：现在自己的名字叫做XXX,可能以后自己的名字随时更换，就叫AAA,又或者是BBB,CCC甚至都有可能</span></span><br><span class="line"><span class="code">可以随时想换名字就换不受顾忌(重新赋值XXX,又被赋值成了AAA…)</span></span><br><span class="line"><span class="code">到了要显示数据的时候直接显示即可</span></span><br><span class="line"></span><br><span class="line"><span class="code">但结果集不一样，如果要进行改名字的话</span></span><br><span class="line"><span class="code">第一：要连接数据库，jdbc七大步骤访问数据库，然后到数据库当中去修改名字，修改操作</span></span><br><span class="line"><span class="code">第二：在数据库当中更改完名字之后，又要再java当中进行刷新操作，也就是进行重新查找的操作，然后才能显示在页面当中</span></span><br><span class="line"><span class="code">简直不要太麻烦</span></span><br><span class="line"></span><br><span class="line"><span class="code">所以是操作对象方便，到了此时UserDAO类中接受到的是DBUtil类中query()方法返回的ResultSet结果集</span></span><br><span class="line"><span class="code">需要的不是结果集，不是死的记录，死的数据</span></span><br><span class="line"><span class="code">所以此时，需要的是进行一个转化操作</span></span><br><span class="line"><span class="code">也就是将一条条记录转换成为一个个的对象</span></span><br><span class="line"><span class="code">数据库当中的一张表对应java当中的一个.java类(com.pojo包当中的UserInfo.java该类)</span></span><br><span class="line"><span class="code">数据库当中的一个字段对应java当中的一个属性(private String username;/private String password;)</span></span><br><span class="line"><span class="code"> 数据库当中的一条记录对应java当中的一个对象(UserInfo userinfo = new UserInfo();(new出一个对象需要给其赋值，使之真正成为一个对象)</span></span><br><span class="line"><span class="code">循环结果集while(rs.next())</span></span><br><span class="line"><span class="code">循环一次结果集，就表示有一条记录；</span></span><br><span class="line"><span class="code">有一条记录，就表示有一个对象，就new 一个对象[UserInfo userinfo = new UserInfo();]</span></span><br><span class="line"><span class="code">循环完结果集之后，得到的也就是全部的记录，也就是得到了全部的对象</span></span><br><span class="line"><span class="code">当然此时的对象，还仅仅只是一个对象，并不是真正的对象，</span></span><br><span class="line"><span class="code">真正的对象是有特征的，也就是有属性，</span></span><br><span class="line"><span class="code">比如说现在只是产生了一个人，只有给这个人标上ID编号，姓名，年龄…之后，才能真正的成为一个人/一个对象</span></span><br><span class="line"><span class="code">也就是说现在需要一个赋值的操作，当赋完值之后的这个对象，才是我真正所需要的这个对象</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">那么这个时候，查询的记录查了，该由记录转换成对象的操作也做了之后，就将对象传递给UserServlet.java</span></span><br><span class="line"><span class="code">最后再由UserServlet.java类获得这些对象，由UserServlet.java将这些对象呈递给show.jsp界面中去，显示出来这些对象</span></span><br><span class="line"></span><br><span class="line"><span class="code">第三类是DAO,由DAO负责访问数据库操作了</span></span><br><span class="line"><span class="code">(</span></span><br><span class="line"><span class="code">但其实真正操刀数据库的应该是DBUtil类，</span></span><br><span class="line"><span class="code">因为DAO仅仅只是写了一个sql语句，</span></span><br><span class="line"><span class="code">调用了DBUtil类当中的方法进行访问数据库，</span></span><br><span class="line"><span class="code">也就是说DBUtil类当中的zsg()方法以及query()方法当中的jdbc七大步骤都已经写好，</span></span><br><span class="line"><span class="code">万事俱备只欠"东风"(sql语句)</span></span><br><span class="line"></span><br><span class="line"><span class="code">jdbc七大步骤：拷贝驱动/加载驱动/创建连接对象/写sql语句/发送并编译sql语句/执行操作/关闭连接对象</span></span><br><span class="line"><span class="code">)</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line"><span class="code">List&lt;UserInfo&gt; list = userDAO.fenye(page,size);</span></span><br><span class="line"></span><br><span class="line"><span class="code">/*</span></span><br><span class="line"><span class="code">UserServlet类中不再操刀访问数据库的操作，而只是负责一个连接的作用，传递参数的作用</span></span><br><span class="line"><span class="code">当前UserServlet.java类用到了UserDAO类当中的fenye()方法</span></span><br><span class="line"><span class="code">需要该方法就写什么</span></span><br><span class="line"><span class="code">所以此时就直接写UserDAO.java该类</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="code">/*这时候，UserServlet.java类是得到了所有所需要显示在show.jsp界面当中去的东西</span></span><br><span class="line"><span class="code">同样，既要将page参数传递过去，也要将size参数传递过去(原因：进行上一页/下一页分页的操作)</span></span><br><span class="line"><span class="code">更要将装有所有记录/对象的集合list传递过去</span></span><br><span class="line"><span class="code">同样还是因为，如果是一个个的传递过去，太耗时间，太麻烦了</span></span><br><span class="line"><span class="code">所以就创建了一个map集合，</span></span><br><span class="line"><span class="code">map集合以键值对的形式进行存储，</span></span><br><span class="line"><span class="code">也就是相当于，存进去的内容是一个一个的对象存进去的，</span></span><br><span class="line"><span class="code">对象的名称是"page"/"size"/"list",对象一一所对应的值是page/size/list</span></span><br><span class="line"><span class="code">都是以一个对象Object类型进行被添加到map集合中取得的</span></span><br><span class="line"><span class="code">Object类：所有子类直接或间接的父类</span></span><br><span class="line"></span><br><span class="line"><span class="code">相当于将所有的要进行传递的内容都变成一个一个的对象放到了一个叫做map的大袋子中去</span></span><br><span class="line"><span class="code">最后要通过request对象进行呈递到show.jsp界面当中去，因为map大袋子本身是无法自己动起来跑到show.jsp页面中去</span></span><br><span class="line"><span class="code">所以就要依靠request对象，request对象就相当于一辆自行车，map这个大袋子就放在了自行车的后座椅上，</span></span><br><span class="line"><span class="code">也就是相当于存值的操作[request.setAttribut("map",map)]</span></span><br><span class="line"><span class="code">存值的形式也是以键值对的形式存进去的，也就是说，map是以一个对象类型进行存值在request对象中</span></span><br><span class="line"><span class="code">Object类：所有子类直接或间接的父类</span></span><br><span class="line"></span><br><span class="line"><span class="code">request对象存值完之后，就要开始驮着map大袋子去到show.jsp界面中去显示查询到的数据[也就是转发过程]</span></span><br><span class="line"></span><br><span class="line"><span class="code">为什么这里用的是转发request对象</span></span><br><span class="line"><span class="code">而不是用的重定向response对象</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">原因：转发是同一次请求；重定向是两次不同的请求</span></span><br><span class="line"><span class="code">然而请求一次，请求完了之后该请求对象就会被销毁</span></span><br><span class="line"><span class="code">如果说，用的是重定向的话</span></span><br><span class="line"><span class="code">那么request.setAttribute("map",map);就已经是相当于第一次请求，存值完之后，也就是请求完了之后，该存了map对象值的request请求对象就会被销毁</span></span><br><span class="line"><span class="code">所以又会产生一个新的request请求对象，也就是通过这个新的request请求对象，进行页面跳转到show.jsp页面中去</span></span><br><span class="line"><span class="code">show.jsp界面中本就是要显示出所查询的数据，也就是存起来的值</span></span><br><span class="line"><span class="code">而之前那个存了值的request对象却被销毁了，也就是，存起来的值跟没有存一样</span></span><br><span class="line"><span class="code">就将没有内容显示在界面当中去</span></span><br><span class="line"><span class="code">所做的查询操作，就跟都白做了一样</span></span><br><span class="line"></span><br><span class="line"><span class="code">但转发不同，转发是一次请求，也就是说存值的这个请求，与跳转到show.jsp界面中去的这个请求，作为一次请求完成了</span></span><br><span class="line"><span class="code">那么所存的值就都还在</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">所以现在要到达的界面是show.jsp界面</span></span><br><span class="line"><span class="code">但此时，show.jsp界面还未被创建，</span></span><br><span class="line"><span class="code">所以接下来的操作就是去写show.jsp</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">map.out("page",page);</span></span><br><span class="line"><span class="code">map.out("size",size);</span></span><br><span class="line"><span class="code">map.out("list",list);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">request.setAttribute("map",map);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">request.getRequestDispatcher("show.jsp").forward(request,response);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="code">/* 该类UserServlet.java中的步骤即为：</span></span><br><span class="line"><span class="code">1.先通过request对象的getParameter("参数名称")方法获得index.jsp中传过来的参数，为字符串类型</span></span><br><span class="line"><span class="code">2.对于传过来的参数进行一个判断，(判断客户端/用户到底要进一个什么操作)，判断完成之后，创建该方法</span></span><br><span class="line"><span class="code">3.在创建的该方法中写出默认显示的页码数，以及每一页要显示出来的条数</span></span><br><span class="line"><span class="code">4.若客户端/用户有指定显示页码数以及每一页当中要显示出来的条数</span></span><br><span class="line"><span class="code">1'则先通过request对象的getParameter("参数名称")取出该参数，该参数为字符串类型</span></span><br><span class="line"><span class="code">2'取出参数后进行判断,若该参数为空，也就说明为仅仅只是传递了一个参数名称过来而已</span></span><br><span class="line"><span class="code">3'取出参数后进行判断，若该参数不为空，page/size也就要进行重新赋值，换成用户/客户端指定的page和size</span></span><br><span class="line"><span class="code">4'重新赋值要进行一个字符串类型转换成整数类型的操作</span></span><br><span class="line"><span class="code">5.UserServlet.java不再负责访问数据库操作，访问数据库操作的是UserDAO.java，</span></span><br><span class="line"><span class="code">所以就调用UserDAO.java中的fenye(int page,int size)方法，并传递参数page和size参数过去</span></span><br><span class="line"><span class="code">得到UserDAO.java类中返回的是一个List&lt;UserInfo&gt;集合类型的对象，并赋值给List&lt;UserInfo&gt;类型对象list</span></span><br><span class="line"><span class="code">6.创建一个map集合，将所有要显示再界面当中去的数据都以键值对的形式，通过map对象的.put()方法添加list/page/size</span></span><br><span class="line"><span class="code">7.将map存入request对象中，通过request对象的setAttribute()方法进行存值</span></span><br><span class="line"><span class="code">8.通过request对象转发到show.jsp界面中去</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line">工程名\src\com\dao\UserDAO.java</span><br><span class="line"></span><br><span class="line">UserDAO.java</span><br><span class="line"></span><br><span class="line">package com.dao;</span><br><span class="line"></span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.pojo.UserInfo;</span><br><span class="line">import com.util.DBUtil;</span><br><span class="line"></span><br><span class="line">public class UserDAO&#123;</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">/*UserDAO.java类中现在只产生了一个方法也就是fenye(int page,int size)方法</span></span><br><span class="line"><span class="code">方法的组成：访问修饰符+返回类型+方法名称+(方法的参数)+&#123;方法的主体&#125;</span></span><br><span class="line"><span class="code">看上去这个方法很麻烦，但只要看清楚这个方法之后，就不再复杂了</span></span><br><span class="line"><span class="code">该方法：</span></span><br><span class="line"><span class="code">访问修饰符 public</span></span><br><span class="line"><span class="code">返回类型 List&lt;UserInfo&gt;  </span></span><br><span class="line"><span class="code">该返回类型说的是调用者调用该方法将会得到一个list集合类型的对象，</span></span><br><span class="line"><span class="code">该list集合当中放置的元素全部都是从UserInfo.java类中产生的</span></span><br><span class="line"><span class="code">也就是说返回的list集合中的所有元素的类型只能是UserInfo类型的对象</span></span><br><span class="line"><span class="code">    UserInfo userinfo = new UserInfo();</span></span><br><span class="line"><span class="code">该操作叫做泛型[指明集合当中只能放置某种类型的元素]</span></span><br><span class="line"><span class="code">方法的名字 fenye</span></span><br><span class="line"><span class="code">方法的参数 (int page,int size)</span></span><br><span class="line"><span class="code">为什么要传递两个参数过来</span></span><br><span class="line"><span class="code">三个流程操作 </span></span><br><span class="line"><span class="code">JSP界面</span></span><br><span class="line"><span class="code">servlet文件(只负责页面之间的协调也就是传递参数，不再负责访问数据库操作)</span></span><br><span class="line"><span class="code">DAO界面</span></span><br><span class="line"><span class="code">(</span></span><br><span class="line"><span class="code">负责访问数据库部分，</span></span><br><span class="line"><span class="code">但真正访问数据库操作的部分是在DBUtil类中</span></span><br><span class="line"><span class="code">原因DBUtil类中的jdbc步骤都写好了，就只差一个sql语句了</span></span><br><span class="line"><span class="code">而DAO就只是需要将sql语句写好并调用DBUtil类当中的query方法就可以了</span></span><br><span class="line"><span class="code">)</span></span><br><span class="line"><span class="code">所以UserDAO.java类中就只需要写好sql语句就可以了，那么关两个参数什么事呢？</span></span><br><span class="line"><span class="code">请注意：要进行查询的分页查询，也就是说查询出来的内容要以分页的形式显示出来</span></span><br><span class="line"><span class="code">那么怎样怎样实现分类的操作？</span></span><br><span class="line"><span class="code">要用到limit 限制</span></span><br><span class="line"><span class="code">limit n 表示的是查询的记录只显示n条记录</span></span><br><span class="line"><span class="code">  limit m,n 表示的是查询的记录从下标为m的记录开始进行查询，查询n条记录</span></span><br><span class="line"><span class="code">举例</span></span><br><span class="line"><span class="code">有50条记录，每一页当中显示的条数为10条，那么总共的页数就会是50/10=5页</span></span><br><span class="line"><span class="code">那么每一页的记录条数就将会显示成是</span></span><br><span class="line"><span class="code">第一页1，2，3，4，5，6，7，8，9，10</span></span><br><span class="line"><span class="code">第二页11，12，13，14，15，16，17，18，19，20</span></span><br><span class="line"><span class="code">第三页21，22，23，24，25，26，27，28，29，30</span></span><br><span class="line"><span class="code">…………</span></span><br><span class="line"><span class="code">这50条记录都是从结果集当中取出来的</span></span><br><span class="line"><span class="code"> 显而易见：结果集是一个集合，当中的数据第1条记录，也就是下标为0的记录</span></span><br><span class="line"><span class="code">集合当中的数据排列都是以下标0开始的，</span></span><br><span class="line"><span class="code">也就是说第0条记录就代表着第一条数据</span></span><br><span class="line"><span class="code">显示出来的将会是</span></span><br><span class="line"><span class="code">第一页0，1，2，3，4，5，6，7，8，9</span></span><br><span class="line"><span class="code">第二页10，11，12，13，14，15，16，17，18，19</span></span><br><span class="line"><span class="code">第三页20，21，22，23，24，25，26，27，28，29</span></span><br><span class="line"><span class="code">…………</span></span><br><span class="line"><span class="code">那么，如何判断页码呢</span></span><br><span class="line"><span class="code">也就是说，怎样得知所处的页码是哪一个页码</span></span><br><span class="line"><span class="code">每一个页码当中都只显示10条记录</span></span><br><span class="line"><span class="code">记录是从下标为0开始计数起的</span></span><br><span class="line"><span class="code">也就相当于说若该页码10条记录当中的第1条记录是为0(下标)的话，也就是在结果集数据当中的第1条数据</span></span><br><span class="line"><span class="code">那么也就是说明了这就是第1页</span></span><br><span class="line"><span class="code">   如果有一页码10条记录当中的第1条记录是为10(下标)的话，也就是在结果即数据当中的第11条数据</span></span><br><span class="line"><span class="code">那么也就是说明了这就是第2页</span></span><br><span class="line"><span class="code">如果有一页码10条记录当中的第1条记录是为20(下标)的话，也就是在结果即数据当中的第21条数据</span></span><br><span class="line"><span class="code">那么也就是说明了这就是第3页</span></span><br><span class="line"><span class="code">也就有了一个规律</span></span><br><span class="line"><span class="code">page(页数)(page-1)*size（该页数当中的第一条[下标]记录数）</span></span><br><span class="line"><span class="code">   1               （1-1）*10=0</span></span><br><span class="line"><span class="code">   2               （2-1）*10=10</span></span><br><span class="line"><span class="code">   3          （3-1）*10=20</span></span><br><span class="line"><span class="code">也就是说limit (page-1)*size,size</span></span><br><span class="line"><span class="code">记录数从(page-1)*size开始，并且该(page-1)*size也代表了现在处于的是哪一夜</span></span><br><span class="line"><span class="code">size说的是该页面要显示多少条记录</span></span><br><span class="line"><span class="code">所以需要传递这两个参数到DAO的界面中，完成sql语句的编写</span></span><br><span class="line"></span><br><span class="line"><span class="code">方法的主题&#123;&#125;</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">public List&lt;UserInfo&gt; fenye(int page,int size)&#123;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">//sql语句为从userinfo这张表当中进行查找用户名以及密码，并且从第下标为(page-1)*size的记录开始，在页面当中只显示size条记录</span></span><br><span class="line"></span><br><span class="line"><span class="code">String sql="select username,password from userinfo limit ?,?";</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">/*DAO界面只负责写好sql语句，</span></span><br><span class="line"><span class="code">真正操刀数据库操作的是DBUtil.java类，</span></span><br><span class="line"><span class="code">DBUtil.java类中所有的jdbc步骤都已经写好，</span></span><br><span class="line"><span class="code">就只差一个sql语句以及给sql语句赋的值</span></span><br><span class="line"><span class="code">给sql语句赋的值都放在Object...p不定参数数组p当中</span></span><br><span class="line"><span class="code">Object...是不定参数数组的格式</span></span><br><span class="line"><span class="code">p是不定参数数组的名称</span></span><br><span class="line"><span class="code">该不定参数数组的类型是Object类型</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line"></span><br><span class="line"><span class="code">ResultSet rs = DBUtil.query(sql,(page-1)*size,size);</span></span><br><span class="line"></span><br><span class="line"><span class="code">/*</span></span><br><span class="line"><span class="code">UserDAO类中进行访问数据库的操作，</span></span><br><span class="line"><span class="code">而真正进行访问数据库操作的其实是DBUtil类(DBUtil类中jdbc七大步骤已经全部写好，只欠sql语句未写)</span></span><br><span class="line"><span class="code">当前UserDAO.java类用到了DBUtil类当中的query(String sql,Object...p)方法</span></span><br><span class="line"><span class="code">需要该方法就写什么</span></span><br><span class="line"><span class="code">所以此时就直接写DBUtil.java该类</span></span><br><span class="line"><span class="code">也可以在写index.jsp之前就先写好DBUtil类</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="code">/*list接口 ArrayList是接口list的实现类</span></span><br><span class="line"><span class="code">该语句的语法为接口的引用指向实现类</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line"><span class="code">List&lt;UserInfo&gt; list = new Array&lt;UserInfo&gt;();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">try&#123;</span></span><br><span class="line"><span class="code">/* 从DBUtil.java类当中的query(String sql,Object...p)方法返回得到的是一个结果集</span></span><br><span class="line"><span class="code">但需要的并不是一个结果集</span></span><br><span class="line"><span class="code">所以进行一个转换</span></span><br><span class="line"><span class="code">将结果集当中的所有记录转换成为一个个的对象</span></span><br><span class="line"><span class="code">通过while(rs.next())指向下一条循环</span></span><br><span class="line"><span class="code">循环一次就代表着有一条记录</span></span><br><span class="line"><span class="code">有一条记录就代表着有一个对象</span></span><br><span class="line"><span class="code">既然有一个对象就需要产生这个对象，</span></span><br><span class="line"><span class="code">从UserInfo.java这个类当中去产生，数据库与java当中的数据是一一对应的关系(对象关系映射orm)</span></span><br><span class="line"><span class="code">产生了对象之后就需要对这个对象进行赋值，只有赋值了的对象，才是我们真正所需要的对象</span></span><br><span class="line"><span class="code">setUsername(String username);以及setPassword(String password)都是一个从UserInfo.java类当中产生的方法</span></span><br><span class="line"><span class="code">在当前类当中去调用不是当前类的方法，有两个方法：</span></span><br><span class="line"><span class="code">第一个通过产生那个方法的那个类去调用那个类中自己的方法</span></span><br><span class="line"><span class="code">比如说</span></span><br><span class="line"><span class="code">DBUtil.releaseConnection(rs.getStatement().getConnection());</span></span><br><span class="line"><span class="code">第二个在当前类当中产生一个属于那个类中的对象，通过该对象去调用那个类中的方法</span></span><br><span class="line"><span class="code">比如说</span></span><br><span class="line"><span class="code">UserInfo userinfo = new UserInfo();</span></span><br><span class="line"><span class="code">userinfo.setUsername(rs.getString(1));</span></span><br><span class="line"><span class="code">userinfo.getPassword(rs.getString(2));</span></span><br><span class="line"><span class="code">如果在当前类当中需要调用当前类中创建的一个方法，可直接进行调用，也就是说，不需要谁来调用，直接写</span></span><br><span class="line"><span class="code">比如说：</span></span><br><span class="line"><span class="code">在DBUtil类当中，有一个getConnection()方法</span></span><br><span class="line"><span class="code">那么在zsg(String sql,Object...p)方法当中或者是query(String sql,Object...p)方法当中</span></span><br><span class="line"><span class="code">去调用getConnection(),如何调用getConnection()方法的到Connection类型的对象？</span></span><br><span class="line"><span class="code">Connection connection = getConnection();即可</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line"><span class="code">/*那么UserDAO.java返回给Servlet的就是一个对象(也就是查询的内容，只是从结果集中的一条记录变成了一个对象)，也甚至是很多个对象，</span></span><br><span class="line"><span class="code">那么UserDAO.java将这些对象一个一个发送给UserServlet.java文件吗</span></span><br><span class="line"><span class="code">那样将会变得很麻烦，浪费时间</span></span><br><span class="line"><span class="code">所以就用了一个list集合</span></span><br><span class="line"><span class="code">也就是说通过该list集合去将从UserInfo.java当中产生的对象一一添加到list集合当中去</span></span><br><span class="line"><span class="code">由UserDAO.java发送到UserServlet.java中去的就是一个集合的形式，</span></span><br><span class="line"><span class="code">就只需要发送一次，发送一个集合，</span></span><br><span class="line"><span class="code">而该集合当中放置的也就是UserInfo.java产生的所有对象</span></span><br><span class="line"><span class="code">也就是需要这一步骤的原因：List&lt;UserInfo&gt; list = new ArrayList&lt;UserInfo&gt;();</span></span><br><span class="line"><span class="code">产生一个集合，泛型：该集合当中产生的所有元素都是从UserInfo.java类当中产生的对象</span></span><br><span class="line"><span class="code">最后通过list对象的add()方法，将对象都添加到list集合当中去</span></span><br><span class="line"></span><br><span class="line"><span class="code">当我们将ResultSet结果集当中的数据用尽之后就可以进行释放连接对象了</span></span><br><span class="line"><span class="code">在DBUtil.java类当中的query()方法是并没有进行释放连接对象的，</span></span><br><span class="line"><span class="code">因为在DBUtil类当中时，所返回的是一个结果集，但是这个结果集并没有被我们用到（也就是显示在浏览器界面当中去），</span></span><br><span class="line"><span class="code">所以在DBUtil.java类当中时并没有进行释放连接对象的</span></span><br><span class="line"><span class="code">因为一旦释放连接对象，那么所查询的内容还未被利用到connection对象就被返回到连接池当中去了，那么查询的内容也就不知所踪了(相当于查询了跟没有查询是一样的)</span></span><br><span class="line"></span><br><span class="line"><span class="code">释放连接对象需要在finally&#123;&#125;块进行，原因：无论之前发生多大的一场，或者是报错等原因，finally&#123;&#125;块当中的内容都会被执行</span></span><br><span class="line"><span class="code">再次做人要讲诚信</span></span><br><span class="line"><span class="code">    做人要讲诚信</span></span><br><span class="line"><span class="code">    做人要讲诚信</span></span><br><span class="line"><span class="code">从连接池当中借的连接对象，就一定要还回去</span></span><br><span class="line"><span class="code">若接连再三的不将连接对象还回去的话，</span></span><br><span class="line"><span class="code">那么连接池当中的连接对象就会减少，</span></span><br><span class="line"><span class="code">公用的连接对象也就变得越来越少，</span></span><br><span class="line"><span class="code">直到连接池没有连接对象，</span></span><br><span class="line"><span class="code">那么就无法取得公用的连接对象了，那么就与创建连接对象，又将其销毁(connection.close())是一样的本质了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">最后返回一个list集合</span></span><br><span class="line"><span class="code">若不返回该list集合该方法就将会报错</span></span><br><span class="line"><span class="code">因为该方法当中的返回类型时List&lt;UserInfo&gt;,即要求该方法返回一个List类型的对象，对象list集合当中的元素必须时UserInfo.java该类中产生的对象</span></span><br><span class="line"><span class="code">也可以返回的是对象，但如果由很多的记录/也就代表了由很多的对象，要一个一个对象的发送到UserServlet.java中去的话，将太过于麻烦</span></span><br><span class="line"><span class="code">所以方法是将对象都放在list集合当中，一次性发送给UserServlet.java中去，既方便又快捷</span></span><br><span class="line"></span><br><span class="line"><span class="code">所以UserDAO.java的内容到此就任务结束了</span></span><br><span class="line"><span class="code"> UserDAO的步骤0.写一个fenye(int page,int size)的方法</span></span><br><span class="line"><span class="code">1.接收UserServlet.java传递过来的参数（int page, int size）</span></span><br><span class="line"><span class="code">2.写好sql语句</span></span><br><span class="line"><span class="code">3.调用DBUtil.java类当中的query(String sql,Object...p)方法进行到数据库当中查询操作</span></span><br><span class="line"><span class="code">4.接收到DBUtil.java类中返回的结果集之后，</span></span><br><span class="line"><span class="code">5.通过while(rs.next())指向下一条循环将结果集中的所有记录变成一个个的对象，且赋值，让其变成一个真正的对象</span></span><br><span class="line"><span class="code">6.创建一个list集合对象，通过该list对象的add()方法将所有的对象都添加到集合中去</span></span><br><span class="line"><span class="code">7.结果集的用处已经被用尽，所以进行释放连接</span></span><br><span class="line"><span class="code">8.最后应返回类型List&lt;UserInfo&gt;,所以需要返回一个List类型的对象，对象中包含的元素必须是UserInfo.java该类中所产生的对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">所以此时又要返回到UserServlet.java中去</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">while(rs.next())&#123;</span></span><br><span class="line"><span class="code">UserInfo userinfo = new UserInfo();</span></span><br><span class="line"><span class="code">info.serUsername(rs.getString(1));</span></span><br><span class="line"><span class="code">info.serPassword(rs.getString(2));</span></span><br><span class="line"><span class="code">list.add(info);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">&#125;catch(SQLException e)&#123;</span></span><br><span class="line"><span class="code">e.printStackTrace();</span></span><br><span class="line"><span class="code">&#125;finally&#123;</span></span><br><span class="line"><span class="code">try&#123;</span></span><br><span class="line"><span class="code">DBUtil.release(rs.getStatement().getConnection());</span></span><br><span class="line"><span class="code">&#125;catch(SQLException e)&#123;</span></span><br><span class="line"><span class="code">e.printStackTrace();</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">return list;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">工程名\src\cmo.util\DBUtil.java</span><br><span class="line"></span><br><span class="line">DBUtil.java</span><br><span class="line"></span><br><span class="line">package com.util;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLExcetion;</span><br><span class="line"></span><br><span class="line">import java.util.Vector;</span><br><span class="line"></span><br><span class="line">public class DBUtil&#123;</span><br><span class="line"></span><br><span class="line"><span class="code">//1.实例化连接池</span></span><br><span class="line"><span class="code">public static Vector&lt;Connection&gt; connectionPool = new Vector&lt;Connection&gt;();</span></span><br><span class="line"></span><br><span class="line"><span class="code">//2.初始化连接池</span></span><br><span class="line"><span class="code">static&#123;</span></span><br><span class="line"><span class="code">try&#123;</span></span><br><span class="line"><span class="code">Class.forName("com.mysql.jdbc.Driver");</span></span><br><span class="line"><span class="code">//循环10次，往连接池当中添加10个连接对象</span></span><br><span class="line"><span class="code">for(int i = 0;i &lt; 10; i++)&#123;</span></span><br><span class="line"><span class="code">Connection connection = DriverManager.getConnection(</span></span><br><span class="line"><span class="code">"jdbc；mysql://127.0.0.1:3306/s67",</span></span><br><span class="line"><span class="code">"root",</span></span><br><span class="line"><span class="code">"123"</span></span><br><span class="line"><span class="code">);</span></span><br><span class="line"><span class="code">connectionPool.add(connection);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">&#125;catch(Exception e)&#123;</span></span><br><span class="line"><span class="code">e.printStackTrace();</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">//3.取连接</span></span><br><span class="line"><span class="code">public static Connection getConnection()&#123;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">Connection connection = connectionPool.get(0);</span></span><br><span class="line"></span><br><span class="line"><span class="code">connectionPool.remove(0);</span></span><br><span class="line"></span><br><span class="line"><span class="code">return connection;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">//4.释放连接</span></span><br><span class="line"><span class="code">public static void releaseConnection(Connection connection)&#123;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">connectionPool.add(connection);</span></span><br><span class="line"></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">//5.增删改</span></span><br><span class="line"><span class="code">public static int zsg(String sql,Object...p)&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="code">Connection connection = getConnection();</span></span><br><span class="line"></span><br><span class="line"><span class="code">int n = 0;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">try&#123;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">PreparedStatement ps = connection.prepareStatement(sql);</span></span><br><span class="line"><span class="code">for(int i =0; i &lt; p.length; i++)&#123;</span></span><br><span class="line"><span class="code">ps.setObject(i+1，p[i]);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">n = ps.executeUpdate();</span></span><br><span class="line"><span class="code">&#125;catch(SQLException e)&#123;</span></span><br><span class="line"><span class="code">e.printStackTrace();</span></span><br><span class="line"><span class="code">&#125;finally&#123;</span></span><br><span class="line"><span class="code">releaseConnection(connection);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">return n;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">//6.查询</span></span><br><span class="line"><span class="code">public static ResultSet query(String sql,Object...p)&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="code">Connection connection = getConnection();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">ResultSet rs = null;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">try&#123;</span></span><br><span class="line"><span class="code">PreparedStatement ps = connection.prepareStatement(sql);</span></span><br><span class="line"><span class="code">for(int i = 0; i &lt; p.length;i++)&#123;</span></span><br><span class="line"><span class="code">ps.setObject(i+1,p[i]);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">rs = ps.executeQuery();</span></span><br><span class="line"><span class="code">&#125;catch(SQLException e)&#123;</span></span><br><span class="line"><span class="code">e.printStackTrace();</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">return rs;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="code">/*</span></span><br><span class="line"><span class="code">UserDAO类中进行访问数据库的操作，</span></span><br><span class="line"><span class="code">而真正进行访问数据库操作的其实是DBUtil类(DBUtil类中jdbc七大步骤已经全部写好，只欠sql语句未写)</span></span><br><span class="line"><span class="code">当前UserDAO.java类用到了DBUtil类当中的query(String sql,Object...p)方法</span></span><br><span class="line"><span class="code">DBUtil类中的query(String sql,Object...p)方法的返回类型是一个ResultSet结果集</span></span><br><span class="line"><span class="code">也就是说UserDAO接受到的是一个结果集，</span></span><br><span class="line"><span class="code">但是</span></span><br><span class="line"><span class="code">操作结果集/操作对象谁方便</span></span><br><span class="line"><span class="code">有了以上的解释之后很显然是对象更容易操作</span></span><br><span class="line"><span class="code">所以就有了将结果集当中的所有记录都转换成一个个的对象</span></span><br><span class="line"><span class="code">那么这些对象从哪里产生？</span></span><br><span class="line"><span class="code">数据库当中的一张表对应java当中的一个专门的类</span></span><br><span class="line"><span class="code">数据库当中的一个字段对应java当中的一个属性</span></span><br><span class="line"><span class="code">数据库当中的一条记录对应java当中的一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="code">既是如此</span></span><br><span class="line"><span class="code">那么就new一个与数据库当中相对应的表一致的.java类[Class]</span></span><br><span class="line"><span class="code">数据库当中的表名叫做userinfo</span></span><br><span class="line"><span class="code">那么该.java类的名字同样叫做UserInfo即可</span></span><br><span class="line"></span><br><span class="line"><span class="code">所以现在就要去写好UserInfo.java该类</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">工程名\src\com\pojo\UserInfo.java</span><br><span class="line"></span><br><span class="line">UserInfo.java</span><br><span class="line"></span><br><span class="line">package com.pojo;</span><br><span class="line"></span><br><span class="line">public class UserInfo&#123;</span><br><span class="line"><span class="code">/*[数据库当中的数据与java当中的数据存在关系：对象关系映射orm(Object Relation Mapping)]</span></span><br><span class="line"><span class="code">对象关系映射的体现：数据库当中的一张userinfo表代表java当中的一个UserInfo类</span></span><br><span class="line"><span class="code">    数据库当中的一个username/password字段代表java当中的一个属性[private String username;/private String password;]</span></span><br><span class="line"><span class="code">    数据库当中的一条记录username='张三'&amp;password='zhangsan'代表java当中的一个对象</span></span><br><span class="line"><span class="code">[(select username,password from userinfo;)</span></span><br><span class="line"><span class="code">UserInfo userinfo = new UserInfo();//此时产生的对象并不是真正的对象，只有该对象被赋了值之后，才是一个真正的对象</span></span><br><span class="line"><span class="code">info.setUsername(rs.getString(1));//rs.getString(1)代表sql语句当中的第一个字段username</span></span><br><span class="line"><span class="code">info.setPassword(rs.getString(2));//rs.getString(2)代表sql语句当中的第一个字段password</span></span><br><span class="line"><span class="code">]</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line"></span><br><span class="line"><span class="code">private String username;</span></span><br><span class="line"><span class="code">private String passward;</span></span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="code">/* 以下的4个方法可以自己手动打/也可以通过快捷方法得到</span></span><br><span class="line"><span class="code">快捷方式</span></span><br><span class="line"><span class="code">在当前界面当中，右击找到Source</span></span><br><span class="line"><span class="code">找到分界面当中的Generate Getters and Setters,并单击他</span></span><br><span class="line"><span class="code">出现一个新的界面，找到Select All ,并单击他</span></span><br><span class="line"><span class="code">最后Finish即可</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line"><span class="code">/* 以下该4个方法当中，有两个是取值的方法，有两个是赋值的方法</span></span><br><span class="line"><span class="code">有多少个属性，那么就有多少个Getters以及多少个Setters方法</span></span><br><span class="line"><span class="code">为什么要有setUsername(String name)&amp;setPassword(String password)方法</span></span><br><span class="line"><span class="code">原因：结果集当中有一条记录代表着有多少个记录</span></span><br><span class="line"><span class="code">有多少个记录也就代表着有多少个对象</span></span><br><span class="line"><span class="code">也就是UserInfo userinfo = new UserInfo();</span></span><br><span class="line"><span class="code">但是此时new出来的对象userinfo并不是我们真正想要的对象，</span></span><br><span class="line"><span class="code">也就是说现在产生对象相当于只是产生了一个人，</span></span><br><span class="line"><span class="code">却并没有给这个人进行ID编号，也没有给这个人取名字</span></span><br><span class="line"><span class="code">也就是说现在的这个人还并不是一个完整的人</span></span><br><span class="line"></span><br><span class="line"><span class="code">也就是说只有当给这个人赋予了ID编号，赋予了他姓名，这个人才真正完整了，才真正是一个人</span></span><br><span class="line"><span class="code">对象也是如此</span></span><br><span class="line"><span class="code">所以就有了setUsername(String username)以及setPassword(String password)方法</span></span><br><span class="line"><span class="code">select username ,password from userinfo ;</span></span><br><span class="line"><span class="code">rs.getString(1)代表的也就是从数据库当中查询找到的与之第一个字段相对应的字段值</span></span><br><span class="line"><span class="code">rs.getString(2)代表的同样也就是从数据库当中查询找到的与之第二个字段相对应的字段值</span></span><br><span class="line"><span class="code">info.setUsername(rs.getString(1));</span></span><br><span class="line"><span class="code">info.setPassword(rs.getString(2));</span></span><br><span class="line"><span class="code">完成了这个操作的对象，才是我们所需要的对象</span></span><br><span class="line"></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">为什么要有getUsername()&amp;getPassword()方法</span></span><br><span class="line"><span class="code">原因：我们现在做的是最终还只是一个查询操作，只不过显示出来的内容进行了分页操作</span></span><br><span class="line"><span class="code">进行的是一个查询操作，也就是说最终要显示在界面当中的是对象的属性，显示这些属性，也就说明了，有这么一个对象</span></span><br><span class="line"><span class="code">(举例：也就是将对象的ID编号或者是对象的username账户或者是对象的password密码显示在页面当中去，代表了存在这么一条记录，这么一个对象)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">所以，有几个属性，就需要几个取值和赋值的方法</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">public String getUsername()&#123;</span></span><br><span class="line"><span class="code">return username;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">public setUsername(String username)&#123;</span></span><br><span class="line"><span class="code">this.username = username;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">public String getPassword()&#123;</span></span><br><span class="line"><span class="code">return password;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">public setPassword(String password)&#123;</span></span><br><span class="line"><span class="code">this.password = password;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">/*</span></span><br><span class="line"><span class="code">写完UserInfo.java界面当中的内容之后，现在就可以跳转到UserDAO.java类中去</span></span><br><span class="line"><span class="code">        原因：是在UserDAO.java该类中将DBUtil.java中的query(String sql,Object...p)返回的ResultSet结果集变成了一个个的对象</span></span><br><span class="line"><span class="code">产生该对象的类与数据库中的表相对应</span></span><br><span class="line"><span class="code"> 产生该对象的属性与数据库当中的字段相对应</span></span><br><span class="line"><span class="code">产生该对象与数据库当中的记录相对应</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">也就是说UserDAO.java中产生的对象从该类UserInfo.java当中产生</span></span><br><span class="line"><span class="code">也就是 UserInfo userinfo = new UserInfo();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">跳转到UserDAO.java当中去</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">WebRoot\show.jsp</span><br><span class="line"></span><br><span class="line">show.jsp</span><br><span class="line"></span><br><span class="line">&lt;%@ page import="com.pojo.UserInfo"%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page language="java" import="java.util.<span class="strong">*" pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="strong">/*</span> &lt;%@ 指令内容%&gt;指令   page页面指令 import 导入的是com.pojo包中的UserInfo.java类</span><br><span class="line"><span class="code">指令page 页面指令language 语言是java语言import 导入的是java工程中的util包中的*所有类pageEncoding 页面编码是UTF-8</span></span><br><span class="line"><span class="strong">*/</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">/*</span>通过在request对象那辆自行车上存的map集合 </span><br><span class="line"><span class="code">所以也是通过request对象中去取出在UserServlet.java类存入request对象的参数</span></span><br><span class="line"><span class="code">在哪里放的，[request.setAttribute("map",map);存进去的map集合对象键值对的形式；是以一个对象Object类型存入map集合中]</span></span><br><span class="line"><span class="code">也就到到哪里去取出来request.getAttribute("map")</span></span><br><span class="line"><span class="code">[</span></span><br><span class="line"><span class="code">request.getAttribute("对象的名称")；返回的是对应的Object类型的该对象</span></span><br><span class="line"><span class="code">在request对象取出map集合对象是同样，</span></span><br><span class="line"><span class="code">取出来的肯定也是一个Object类型的对象，</span></span><br><span class="line"><span class="code">但需要的并不是一个对象，而是一个集合,</span></span><br><span class="line"><span class="code">而Object是所有子类直接或间接的父类，大类型转小类型需要强转</span></span><br><span class="line"><span class="code">所以也就出现了Map map = (Map)request.getAttribute("map");当中的小括号(Map)</span></span><br><span class="line"></span><br><span class="line"><span class="code">同样list/page/size三者都是以键值对的形式存入map集合当中的，也就是说以该方式存入的都是以一个Object对象的类型存入map集合当中的</span></span><br><span class="line"><span class="code">所以当取出的时候，也是以一个Object类型的对象取出的</span></span><br><span class="line"><span class="code">但是真正需要的并不是一个Object类型的对象</span></span><br><span class="line"><span class="code">Object类是所有子类的直接或间接的父类</span></span><br><span class="line"><span class="code">大类型转小类型需要强转也就有了(List&lt;UserInfo&gt;)/(Integer)小括号的原因</span></span><br><span class="line"><span class="code">从map对象中取出元素的方法为.get()方法</span></span><br><span class="line"><span class="code">而从request对象中取出内容的方法是.getAttribute()方法</span></span><br><span class="line"><span class="code">]</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">&lt;%</span><br><span class="line"><span class="code">Map map = (Map)request.getAttribute("map");</span></span><br><span class="line"><span class="code">List&lt;UserInfo&gt; list = (List&lt;UserInfo&gt;)map.get("list");</span></span><br><span class="line"><span class="code">int currentpage = (Integer)map.get("page");//注意不能写成page,会报主键重复的错误[9大隐式对象中已经存在了一个page对象，为java对象的保留字，不能重名]</span></span><br><span class="line"><span class="code">int size = (Integer)map.get("size");</span></span><br><span class="line">%&gt;</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">/*</span></span><br><span class="line"><span class="code">list集合中放入的都是UserInfo.java类中产生的对象</span></span><br><span class="line"><span class="code">如何将集合中的所有对象都显示在界面当中？</span></span><br><span class="line"><span class="code">通过foreach循环遍历，再通过表达式进行输出</span></span><br><span class="line"><span class="code">foreach循环遍历：</span></span><br><span class="line"><span class="code">取一个UserInfo类中产生的对象info,并不是随意从哪一个类当中产生的对象</span></span><br><span class="line"><span class="code">一定要是和list集合当中的元素的类型一样的对象，</span></span><br><span class="line"><span class="code">也就是说list集合中所放入的对象的类型，以及要进行遍历的该对象的类型，两者的类型必须一致</span></span><br><span class="line"><span class="code">才能进行遍历</span></span><br><span class="line"></span><br><span class="line"><span class="code">info对象到list集合当中进行遍历，也就是说info对象一个一个代替list集合中的对象，进行输出</span></span><br><span class="line"><span class="code">比方说</span></span><br><span class="line"><span class="code">现在有一个集合，集合当中放的1，2，3，4，5，都是整数类型的元素</span></span><br><span class="line"><span class="code">现在 自己也是一个int类型的数，也就是自己现在是被声明，但未被赋值</span></span><br><span class="line"><span class="code">现在遍历该存有整数元素的集合</span></span><br><span class="line"><span class="code">也就是现在自己代替集合中的1，也就是自己被1赋值，输出自己，也就是输出1</span></span><br><span class="line"><span class="code">又一次代替集合中的2，也就是自己被2赋值，输出自己，也就是输出2</span></span><br><span class="line"><span class="code">……</span></span><br><span class="line"><span class="code">就成功的输出了所有的对象</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line"></span><br><span class="line"><span class="code">/* .getUsername()以及.getPassword()都是从UserInfo.java当中产生的方法</span></span><br><span class="line"><span class="code">为的就是输出该对象的属性值（用户名以及密码）</span></span><br><span class="line"><span class="code">*/</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line">&lt;%for(UserInfo info : list)&#123; %&gt;</span><br><span class="line"><span class="code">&lt;%=info.getUsername()%&gt;</span></span><br><span class="line"><span class="code">&lt;%=info.getPassword()%&gt;</span></span><br><span class="line"><span class="code">&lt;br&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="code">/*写一个超链接，进行上一页/下一页操作</span></span><br><span class="line"><span class="code">跳转到user.do界面中去，也就是UserServlet.java类中去，且带有参数method=fenye</span></span><br><span class="line"><span class="code">并且该带有其他两个参数page/size</span></span><br><span class="line"><span class="code">传递参数page以及size的原因</span></span><br><span class="line"><span class="code">同样还是进行查询操作，还进行了一个分页操作</span></span><br><span class="line"><span class="code">也就是说只是查询出来的内容的显示方式不同与要显示的页数/页码不同而已</span></span><br><span class="line"><span class="code">所以需要传递参数page/size</span></span><br><span class="line"><span class="code">格式：参数与参数之间用&amp;进行连接</span></span><br><span class="line"><span class="code">上一页：也就是当前页的上一页，即为当前页数-1</span></span><br><span class="line"><span class="code">下一页：也就是当前页的下一页，即为当前页数+1</span></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">&lt;a href="user.do?method=fenye&amp;page=&lt;%=currentpage-1%&gt;&amp;size=&lt;%=size%&gt;"&gt;上一页&lt;/a&gt;</span></span><br><span class="line"><span class="code">   &lt;a href="user.do?method=fenye&amp;page=&lt;%=currentpage+1%&gt;&amp;size=&lt;%=size%&gt;"&gt;下一页&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">/*show.jsp 步骤</span></span><br><span class="line"><span class="code">1.取出存在request对象中的map值，需要进行强转</span></span><br><span class="line"><span class="code">2，取出存在map对象中的list/size/page,需要进行强转</span></span><br><span class="line"><span class="code">3.通过foreach循环，将要显示再页面中的内容通过表达式进行输出对象info的属性值(getUsername()/getPassword())</span></span><br><span class="line"><span class="code">4.上一页/下一页操作，传递参数method=fenye/page=?/size=?传递到user.do界面中去，进行重新查询</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分页 </tag>
            
            <tag> 理解分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构绪论</title>
      <link href="/2020/02/21/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA-01/"/>
      <url>/2020/02/21/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA-01/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/02/21/%E3%80%90%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA-01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA-01.png" alt="数据结构绪论-01"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PayPal 支付流程</title>
      <link href="/2020/02/20/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/paypal%E6%94%AF%E4%BB%98%E6%B5%81%E7%A8%8B/"/>
      <url>/2020/02/20/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/paypal%E6%94%AF%E4%BB%98%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="PayPal-交互示意图"><a href="#PayPal-交互示意图" class="headerlink" title="PayPal 交互示意图"></a>PayPal 交互示意图</h2><p>有一个关于paypal的交互图我得贡献出来，不知道从哪篇博客上保存下来的了，不太记得了。<br>通过这个交互图，然后再加上API文档更好理解一点。</p><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX2e3FjuQJF1Z5tWbx.4FG5JL.HWnrtw7AHhlwZdbCbKOOk8Slh7k48Le*rSTcyj0OytedTNvnOyiYo.YjOMuSqQ!/r" alt="image"></p><p>分为四个端：一个是开发者端，一个是live端，一个是沙箱端，还有一个就是提工单的那个端</p><ul><li>提工单：<a href="https://www.paypal-support.com/s/contactsupport" target="_blank" rel="noopener">https://www.paypal-support.com/s/contactsupport</a></li><li>开发者：<a href="https://developer.paypal.com" target="_blank" rel="noopener">https://developer.paypal.com</a></li><li>沙箱：<a href="https://www.sandbox.paypal.com/" target="_blank" rel="noopener">https://www.sandbox.paypal.com/</a></li><li>live：<a href="https://www.paypal.com/c2/home" target="_blank" rel="noopener">https://www.paypal.com/c2/home</a></li></ul><h2 id="PayPal-maven依赖"><a href="#PayPal-maven依赖" class="headerlink" title="PayPal maven依赖"></a>PayPal maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.paypal.sdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rest-api-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;version&gt;1.4.2&lt;/version&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.14.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="PayPal-相关Code"><a href="#PayPal-相关Code" class="headerlink" title="PayPal 相关Code"></a>PayPal 相关Code</h2><blockquote><p>PaypalConfig，paypal相关配置  </p></blockquote><p>关于这个代码百度一下，有很多。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yourshares.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.<span class="keyword">JSONObject</span>;</span><br><span class="line"><span class="keyword">import</span> com.paypal.base.codec.<span class="built_in">binary</span>.Base64;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">BufferedReader</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">HashMap</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.paypal.base.rest.APIContext;</span><br><span class="line"><span class="keyword">import</span> com.paypal.base.rest.OAuthTokenCredential;</span><br><span class="line"><span class="keyword">import</span> com.paypal.base.rest.PayPalRESTException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line"><span class="keyword">public</span> class PaypalConfig&#123;</span><br><span class="line">    @Value(<span class="string">"$&#123;paypal.client.app&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> clientId;</span><br><span class="line">    @Value(<span class="string">"$&#123;paypal.client.secret&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> clientSecret;</span><br><span class="line">    @Value(<span class="string">"$&#123;paypal.mode&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> mode;</span><br><span class="line">    @Value(<span class="string">"$&#123;paypal.tokenurl&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> tokenurl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; paypalSdkConfig()&#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; sdkConfig = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">        sdkConfig.put(<span class="string">"mode"</span>, mode);</span><br><span class="line">        <span class="keyword">return</span> sdkConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> OAuthTokenCredential authTokenCredential()&#123;</span><br><span class="line">        OAuthTokenCredential oAuthTokenCredential=<span class="keyword">new</span> OAuthTokenCredential(clientId, clientSecret, paypalSdkConfig());</span><br><span class="line">        <span class="keyword">return</span> oAuthTokenCredential;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> APIContext apiContext() <span class="keyword">throws</span> PayPalRESTException&#123;</span><br><span class="line"><span class="comment">//        APIContext apiContext = new APIContext(authTokenCredential().getAccessToken());</span></span><br><span class="line">        APIContext apiContext = <span class="keyword">new</span> APIContext(clientId, clientSecret, <span class="string">"sandbox"</span>);</span><br><span class="line"><span class="comment">//        apiContext.setConfigurationMap(paypalSdkConfig());</span></span><br><span class="line">        <span class="keyword">return</span> apiContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> APIContext refreshToken(APIContext apiContext)&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"===========[refreshToken]==========="</span>);</span><br><span class="line">        apiContext=apiContext.setRefreshToken(getAccessToken());</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"===========[refreshToken END]==========="</span>);</span><br><span class="line">        <span class="keyword">return</span> apiContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    URL url = new URL(TOKEN_URL);</span></span><br><span class="line"><span class="comment">     *    String authorization = clientId+":"+secret;</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">String</span> getAccessToken()&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"===========[getAccessToken]==========="</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(tokenurl);</span><br><span class="line">            <span class="keyword">String</span> authorization = clientId+<span class="string">":"</span>+clientSecret;</span><br><span class="line">            authorization = Base64.encodeBase64String(authorization.getBytes());</span><br><span class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">            conn.setRequestMethod(<span class="string">"POST"</span>);<span class="comment">// 提交模式</span></span><br><span class="line">            <span class="comment">//设置请求头header</span></span><br><span class="line">            conn.setRequestProperty(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">            conn.setRequestProperty(<span class="string">"Accept-Language"</span>, <span class="string">"en_US"</span>);</span><br><span class="line">            conn.setRequestProperty(<span class="string">"Authorization"</span>, <span class="string">"Basic "</span>+authorization);</span><br><span class="line">            <span class="comment">// conn.setConnectTimeout(10000);//连接超时 单位毫秒</span></span><br><span class="line">            <span class="comment">// conn.setReadTimeout(2000);//读取超时 单位毫秒</span></span><br><span class="line">            conn.setDoOutput(<span class="keyword">true</span>);<span class="comment">// 是否输入参数</span></span><br><span class="line">            <span class="keyword">String</span> params = <span class="string">"grant_type=client_credentials"</span>;</span><br><span class="line">            conn.getOutputStream().write(params.getBytes());<span class="comment">// 输入参数</span></span><br><span class="line"></span><br><span class="line">            InputStreamReader inStream = <span class="keyword">new</span> InputStreamReader(conn.getInputStream());</span><br><span class="line">            <span class="keyword">BufferedReader</span> reader = <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(inStream);</span><br><span class="line">            StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">String</span> lineTxt = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((lineTxt = reader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                result.<span class="built_in">append</span>(lineTxt);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.close();</span><br><span class="line">            <span class="keyword">String</span> accessTokey = <span class="keyword">JSONObject</span>.parseObject(result.toString()).getString(<span class="string">"access_token"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"[getAccessToken]:"</span>+accessTokey);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"===========[getAccessToken END]==========="</span>);</span><br><span class="line">            <span class="keyword">return</span> accessTokey;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception err)&#123;</span><br><span class="line">            err.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务层Service接口</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.yourshares.service.adminWeb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.paypal.api.payments.Payment;</span><br><span class="line"><span class="keyword">import</span> com.paypal.base.rest.PayPalRESTException;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.model.vo.PaypalPaymentIntent;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.model.vo.PaypalPaymentMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> interface PayService &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pay</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> throws IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">String</span> <span class="title">toPay</span><span class="params">(Double totalAmount,<span class="keyword">String</span> OutRepoOrderNo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Payment <span class="title">createPayment</span><span class="params">(Double total,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">String</span> currency,</span></span></span><br><span class="line"><span class="function"><span class="params">                          PaypalPaymentMethod method,</span></span></span><br><span class="line"><span class="function"><span class="params">                          PaypalPaymentIntent intent,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">String</span> description,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">String</span> cancelUrl,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">String</span> successUrl,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">String</span> outRepoOrderNo)</span>throws PayPalRESTException</span>;</span><br><span class="line">    <span class="function">Payment <span class="title">executePayment</span><span class="params">(<span class="keyword">String</span> paymentId, <span class="keyword">String</span> payerId)</span> throws PayPalRESTException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paypalCallback</span><span class="params">(Map params,HttpServletRequest request,HttpServletResponse response)</span>throws  IOException</span>;<span class="comment">//回调业务处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务层实现</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">package com.yourshares.service.adminWeb.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.util.StringUtil;</span><br><span class="line"><span class="keyword">import</span> com.paypal.api.payments.*;</span><br><span class="line"><span class="keyword">import</span> com.paypal.base.rest.APIContext;</span><br><span class="line"><span class="keyword">import</span> com.paypal.base.rest.PayPalRESTException;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.common.exception.BizException;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.model.vo.PaypalPaymentIntent;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.model.vo.PaypalPaymentMethod;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.common.tools.LogFileName;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.common.utils.Kits;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.common.utils.LoggerUtils;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.configuration.PaypalConfig;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.configuration.SpringDynamicCronTask;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.dao.TOutRepoOrderMapper;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.dao.TPaypalTransMapper;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.model.po.TOutRepoOrder;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.model.po.TPaypalTrans;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.service.TOutRepoOrderService;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.service.TPaypalTransService;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.service.adminWeb.PayService;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.interceptor.TransactionAspectSupport;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.entity.Condition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line">@<span class="type">Service</span></span><br><span class="line">@<span class="type">PropertySource</span>(value = &#123;<span class="string">"classpath:application-$&#123;spring.profiles.active&#125;.properties"</span>&#125;, encoding = <span class="string">"utf-8"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayServiceImpl</span> <span class="title">extends</span> <span class="title">BaseService</span> <span class="title">implements</span> <span class="title">PayService</span> </span>&#123;</span><br><span class="line">    <span class="type">Logger</span> logger = <span class="type">LoggerUtils</span>.<span class="type">Logger</span>(<span class="type">LogFileName</span>.<span class="type">API</span>);</span><br><span class="line"></span><br><span class="line">    @<span class="type">Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">APIContext</span> apiContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回调地址</span></span><br><span class="line">    @<span class="type">Value</span>(<span class="string">"$&#123;paypal.notifyurl&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> notifyurl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//支付成功页面地址</span></span><br><span class="line">    @<span class="type">Value</span>(<span class="string">"$&#123;paypal.successurl&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> successurl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//支付关闭页面地址</span></span><br><span class="line">    @<span class="type">Value</span>(<span class="string">"$&#123;paypal.cancleurl&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> cancleurl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ipn生产/沙箱地址</span></span><br><span class="line">    @<span class="type">Value</span>(<span class="string">"$&#123;paypal.ipnurl&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> ipnurl;</span><br><span class="line"></span><br><span class="line">    @<span class="type">Resource</span></span><br><span class="line">    <span class="type">TPaypalTransMapper</span> tPaypalTransMapper;</span><br><span class="line">    @<span class="type">Resource</span></span><br><span class="line">    <span class="type">TPaypalTransService</span> tPaypalTransService;</span><br><span class="line">    @<span class="type">Resource</span></span><br><span class="line">    <span class="type">TOutRepoOrderMapper</span> tOutRepoOrderMapper;</span><br><span class="line">    @<span class="type">Resource</span></span><br><span class="line">    <span class="type">TOutRepoOrderService</span> tOutRepoOrderService;</span><br><span class="line">    @<span class="type">Resource</span></span><br><span class="line">    <span class="type">PaypalConfig</span> paypalConfig;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="type">COMPLETED_STATUS</span>=<span class="string">"Completed"</span>;<span class="comment">//完成</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="type">REFUNDED_STATUS</span>=<span class="string">"refunded"</span>;<span class="comment">//退款</span></span><br><span class="line"></span><br><span class="line">    @<span class="type">Override</span></span><br><span class="line">    <span class="keyword">public</span> void pay(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        <span class="type">String</span> cancelUrl = cancleurl;<span class="comment">//关闭路径 URLUtils.getBaseURl(request) + "/api/v1/pay/cancle"</span></span><br><span class="line">        <span class="type">String</span> successUrl = successurl;<span class="comment">//成功路径 URLUtils.getBaseURl(request) + "/api/v1/pay/success"</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Payment</span> payment = createPayment(</span><br><span class="line">                    <span class="number">500.00</span>,</span><br><span class="line">                    <span class="string">"USD"</span>,</span><br><span class="line">                    <span class="type">PaypalPaymentMethod</span>.paypal,</span><br><span class="line">                    <span class="type">PaypalPaymentIntent</span>.sale,</span><br><span class="line">                    <span class="string">"payment description"</span>,</span><br><span class="line">                    cancelUrl,</span><br><span class="line">                    successUrl,<span class="string">"OUB"</span>+ <span class="type">Kits</span>.<span class="type">Date</span>.getyyyyMMddHHmmss());</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">Links</span> links : payment.getLinks())&#123;</span><br><span class="line">                <span class="keyword">if</span>(links.getRel().equals(<span class="string">"approval_url"</span>))&#123;</span><br><span class="line">                    logger.info(<span class="string">"======toPay redirect:[&#123;&#125;]"</span>,links.getHref());</span><br><span class="line">                    response.sendRedirect(links.getHref());</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    response:</span></span><br><span class="line"><span class="comment">                    &#123;"id":"PAYID-LYZJW5A74P54450UP962954B","intent":"sale","state":"created",</span></span><br><span class="line"><span class="comment">                    "payer":&#123;"payment_method":"paypal"&#125;,</span></span><br><span class="line"><span class="comment">                    "transactions":[&#123;"amount":&#123;"total":"500.00","currency":"USD"&#125;,</span></span><br><span class="line"><span class="comment">                    "description":"payment description","related_resources":[]&#125;],"create_time":"2020-01-30T09:01:40Z",</span></span><br><span class="line"><span class="comment">                    "links":[&#123;"href":"https://api.sandbox.paypal.com/v1/payments/payment/PAYID-LYZJW5A74P54450UP962954B",</span></span><br><span class="line"><span class="comment">                    "rel":"self","method":"GET"&#125;,</span></span><br><span class="line"><span class="comment">                    &#123;"href":"https://www.sandbox.paypal.com/cgi-bin/webscr?cmd=_express-checkout&amp;token=EC-7K413818TR837130E","rel":"approval_url","method":"REDIRECT"&#125;,&#123;"href":"https://api.sandbox.paypal.com/v1/payments/payment/PAYID-LYZJW5A74P54450UP962954B/execute","rel":"execute","method":"POST"&#125;]&#125;</span></span><br><span class="line"><span class="comment">2020-01-30 17:01:37.676  WARN 3644 -- [nio-8080-exec-7] c.y.c.GlobalExceptionResolver            : Resolved [java.lang.IllegalStateException: Cannot call sendRedirect() after the response has been committed]</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="type">PayPalRESTException</span> e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        response.sendRedirect(cancleurl);</span><br><span class="line"><span class="comment">//        response.getWriter().write("&lt;h1&gt;HELLO WORLLD&lt;/h1&gt;");</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>获取支付链接</p></blockquote><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public String toPay(Double totalAmount,String outRepoOrderNo) &#123;</span><br><span class="line">        String cancelUrl = cancleurl;//关闭路径</span><br><span class="line">        String successUrl =successurl;//成功路径</span><br><span class="line">        String url=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Payment payment = createPayment(</span><br><span class="line">                    totalAmount,</span><br><span class="line">                    <span class="string">"USD"</span>,</span><br><span class="line">                    PaypalPaymentMethod.paypal,</span><br><span class="line">                    PaypalPaymentIntent.sale,</span><br><span class="line">                    <span class="string">"领赫 - 账单(*^▽^*)"</span>,</span><br><span class="line">                    cancelUrl,</span><br><span class="line">                    successUrl,</span><br><span class="line">                    outRepoOrderNo);</span><br><span class="line">            <span class="keyword">for</span>(Links links : payment.getLinks())&#123;</span><br><span class="line">                <span class="keyword">if</span>(links.getRel().equals(<span class="string">"approval_url"</span>))&#123;</span><br><span class="line">                    logger.info(<span class="string">"======toPay redirect:[&#123;&#125;]"</span>,links.getHref());</span><br><span class="line">                    url=links.getHref();</span><br><span class="line">                    /*</span><br><span class="line">                    response:</span><br><span class="line">                    &#123;<span class="string">"id"</span>:<span class="string">"PAYID-LYZJW5A74P54450UP962954B"</span>,<span class="string">"intent"</span>:<span class="string">"sale"</span>,<span class="string">"state"</span>:<span class="string">"created"</span>,</span><br><span class="line">                    <span class="string">"payer"</span>:&#123;<span class="string">"payment_method"</span>:<span class="string">"paypal"</span>&#125;,</span><br><span class="line">                    <span class="string">"transactions"</span>:[&#123;<span class="string">"amount"</span>:&#123;<span class="string">"total"</span>:<span class="string">"500.00"</span>,<span class="string">"currency"</span>:<span class="string">"USD"</span>&#125;,</span><br><span class="line">                    <span class="string">"description"</span>:<span class="string">"payment description"</span>,<span class="string">"related_resources"</span>:[]&#125;],<span class="string">"create_time"</span>:<span class="string">"2020-01-30T09:01:40Z"</span>,</span><br><span class="line">                    <span class="string">"links"</span>:[&#123;<span class="string">"href"</span>:<span class="string">"https://api.sandbox.paypal.com/v1/payments/payment/PAYID-LYZJW5A74P54450UP962954B"</span>,</span><br><span class="line">                    <span class="string">"rel"</span>:<span class="string">"self"</span>,<span class="string">"method"</span>:<span class="string">"GET"</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">"href"</span>:<span class="string">"https://www.sandbox.paypal.com/cgi-bin/webscr?cmd=_express-checkout&amp;token=EC-7K413818TR837130E"</span>,<span class="string">"rel"</span>:<span class="string">"approval_url"</span>,<span class="string">"method"</span>:<span class="string">"REDIRECT"</span>&#125;,&#123;<span class="string">"href"</span>:<span class="string">"https://api.sandbox.paypal.com/v1/payments/payment/PAYID-LYZJW5A74P54450UP962954B/execute"</span>,<span class="string">"rel"</span>:<span class="string">"execute"</span>,<span class="string">"method"</span>:<span class="string">"POST"</span>&#125;]&#125;</span><br><span class="line"><span class="number">2020</span><span class="number">-01</span><span class="number">-30</span> <span class="number">17</span>:<span class="number">01</span>:<span class="number">37.676</span>  WARN <span class="number">3644</span> -- [nio<span class="number">-8080</span>-exec<span class="number">-7</span>] c.y.c.GlobalExceptionResolver            : Resolved [java.lang.IllegalStateException: Cannot call sendRedirect() after the response has been committed]</span><br><span class="line">                     */</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PayPalRESTException e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">            /*</span><br><span class="line">            david</span><br><span class="line">            设置有限刷新次数（&lt;<span class="number">10</span>次），如果多次失败，返回必须返回给上层应用，且把下次刷新时间设置为<span class="number">10</span>分钟之后。成功了就设置为<span class="number">10</span>个小时。</span><br><span class="line">            尝试次数你设置<span class="number">3</span>次吧,现在如果失败了，发送账单接口很久才能返回</span><br><span class="line">             */</span><br><span class="line">            //Error code : <span class="number">401</span> <span class="keyword">with</span> response : &#123;<span class="string">"error"</span>:<span class="string">"invalid_token"</span>,<span class="string">"error_description"</span>:<span class="string">"Access Token not found in cache"</span>&#125;</span><br><span class="line">            // Error code : <span class="number">400</span> <span class="keyword">with</span> response : &#123;<span class="string">"name"</span>:<span class="string">"VALIDATION_ERROR"</span>,<span class="string">"details"</span>:[&#123;<span class="string">"field"</span>:<span class="string">"transactions[0].amount"</span>,<span class="string">"issue"</span>:<span class="string">"Amount cannot be zero"</span>&#125;],<span class="string">"message"</span>:<span class="string">"Invalid request - see details"</span>,<span class="string">"information_link"</span>:<span class="string">"https://developer.paypal.com/docs/api/payments/#errors"</span>,<span class="string">"debug_id"</span>:<span class="string">"16ccf2387e7d9"</span>&#125;</span><br><span class="line">            //Error code : <span class="number">400</span> <span class="keyword">with</span> response : &#123;<span class="string">"name"</span>:<span class="string">"VALIDATION_ERROR"</span>,<span class="string">"message"</span>:<span class="string">"Invalid request - see details"</span>,<span class="string">"debug_id"</span>:<span class="string">"cf6130d18a99"</span>,<span class="string">"information_link"</span>:<span class="string">"https://developer.paypal.com/docs/api/payments/#errors"</span>,<span class="string">"details"</span>:[&#123;<span class="string">"field"</span>:<span class="string">"transactions[0].amount.total"</span>,<span class="string">"location"</span>:<span class="string">"body"</span>,<span class="string">"issue"</span>:<span class="string">"Currency amount must be non-negative number, contain exactly 2 decimal places separated by '.' (JPY contains 0 decimal places), optional thousands separator ',', limited to 7 digits before the decimal point and currency which is a valid ISO Currency Code"</span>&#125;,&#123;<span class="string">"field"</span>:<span class="string">"transactions[0].amount.total.value"</span>,<span class="string">"location"</span>:<span class="string">"body"</span>,<span class="string">"issue"</span>:<span class="string">"Value too long (max length 10)"</span>&#125;]&#125;</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isNotEmpty(e.getMessage()))&#123;</span><br><span class="line">                String responseDesc=e.getMessage();</span><br><span class="line">                String[] strings=responseDesc.split(<span class="string">"\\&#123;"</span>);</span><br><span class="line">                String json=<span class="string">"&#123;"</span>+strings[<span class="number">1</span>];</span><br><span class="line">                JSONObject response=JSONObject.parseObject(json);</span><br><span class="line">                logger.info(<span class="string">"打印response: "</span>+response.toString());</span><br><span class="line">                <span class="keyword">if</span>(response!=<span class="literal">null</span> &amp;&amp; response.getString(<span class="string">"error"</span>)!=<span class="literal">null</span> &amp;&amp; response.getString(<span class="string">"error"</span>).equalsIgnoreCase(<span class="string">"invalid_token"</span>))&#123;</span><br><span class="line">                    String newUrl=<span class="string">""</span>;</span><br><span class="line">                    <span class="keyword">for</span>(int n=<span class="number">0</span>;n&lt;<span class="number">3</span>;n++)&#123;</span><br><span class="line">                        //在更新了token之后重试</span><br><span class="line">                        logger.info(<span class="string">"token失效，更换新的token,原来的token: &#123;&#125;"</span>,apiContext.getAccessToken());</span><br><span class="line">//                        paypalConfig.refreshToken(apiContext);</span><br><span class="line">                        logger.info(<span class="string">"更换新的token:&#123;&#125;"</span>,apiContext.getAccessToken());</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Payment payment = createPayment(</span><br><span class="line">                                    totalAmount,</span><br><span class="line">                                    <span class="string">"USD"</span>,</span><br><span class="line">                                    PaypalPaymentMethod.paypal,</span><br><span class="line">                                    PaypalPaymentIntent.sale,</span><br><span class="line">                                    <span class="string">"领赫 - 账单(*^▽^*)"</span>,</span><br><span class="line">                                    cancelUrl,</span><br><span class="line">                                    successUrl,</span><br><span class="line">                                    outRepoOrderNo);</span><br><span class="line">                            <span class="keyword">for</span> (Links links : payment.getLinks()) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (links.getRel().equals(<span class="string">"approval_url"</span>)) &#123;</span><br><span class="line">                                    logger.info(<span class="string">"======toPay redirect:[&#123;&#125;]"</span>, links.getHref());</span><br><span class="line">                                    newUrl = links.getHref();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">catch</span> (PayPalRESTException e1)&#123;</span><br><span class="line">                            logger.error(e1.getMessage());</span><br><span class="line">                        &#125;</span><br><span class="line">                       <span class="keyword">if</span>(StringUtils.isNotEmpty(newUrl))&#123;//尝试三次当中存在有一次url不为空则断开循环</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                       &#125;<span class="keyword">else</span>&#123;//当次循环当中支付链接为空则跳出当次循环进入下一次循环</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(StringUtils.isEmpty(newUrl))&#123;//循环了三次之后如果newUrl还是空则抛出异常通知上层应用，说获取支付链接失败</span><br><span class="line">                        //且把下次刷新时间设置为<span class="number">10</span>分钟之后。成功了就设置为<span class="number">10</span>个小时。</span><br><span class="line">                        SpringDynamicCronTask.cron=<span class="string">"0/600 * * * * ?"</span>;//十分钟后再试</span><br><span class="line">                        <span class="keyword">throw</span> new BizException(<span class="string">"获取支付链接异常，请稍后重试"</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        url=newUrl;</span><br><span class="line">                        SpringDynamicCronTask.cron=<span class="string">"*/36000 * * * * ?"</span>;//十分钟后再试</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (response!=<span class="literal">null</span> &amp;&amp; response.getString(<span class="string">"name"</span>)!=<span class="literal">null</span> &amp;&amp;response.getString(<span class="string">"name"</span>).equalsIgnoreCase(<span class="string">"VALIDATION_ERROR"</span>))&#123;</span><br><span class="line">                    //金额无效</span><br><span class="line">                    url =<span class="literal">null</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    url=<span class="literal">null</span>;//<span class="string">"http://y22711s118.iask.in/pay/cancle.html"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            url=StringUtils.isEmpty(url)==<span class="literal">true</span>?<span class="literal">null</span>:url;//<span class="string">"http://y22711s118.iask.in/pay/cancle.html"</span></span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建支付</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="built_in">public</span> Payment createPayment(</span><br><span class="line">        <span class="type">Double</span> total,</span><br><span class="line">        String currency,</span><br><span class="line">        PaypalPaymentMethod <span class="keyword">method</span>,</span><br><span class="line">        PaypalPaymentIntent intent,</span><br><span class="line">        String description,</span><br><span class="line">        String cancelUrl,</span><br><span class="line">        String successUrl,</span><br><span class="line">        String outRepoOrderNo) throws PayPalRESTException &#123;</span><br><span class="line">    Amount amount = <span class="built_in">new</span> Amount();</span><br><span class="line">    amount.setCurrency(currency);</span><br><span class="line">    amount.setTotal(String.format("%.2f", total));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Transaction</span> <span class="keyword">transaction</span> = <span class="built_in">new</span> <span class="keyword">Transaction</span>();</span><br><span class="line">    <span class="keyword">transaction</span>.setDescription(description);</span><br><span class="line">    <span class="keyword">transaction</span>.setAmount(amount);</span><br><span class="line">    <span class="keyword">transaction</span>.setNotifyUrl(notifyurl);</span><br><span class="line">    <span class="keyword">transaction</span>.setCustom(outRepoOrderNo);//设置订单号<span class="comment">--就取自发货单好了</span></span><br><span class="line"></span><br><span class="line">    List&lt;<span class="keyword">Transaction</span>&gt; transactions = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    transactions.<span class="keyword">add</span>(<span class="keyword">transaction</span>);</span><br><span class="line"></span><br><span class="line">    Payer payer = <span class="built_in">new</span> Payer();</span><br><span class="line">    payer.setPaymentMethod(<span class="keyword">method</span>.toString());</span><br><span class="line"></span><br><span class="line">    Payment payment = <span class="built_in">new</span> Payment();</span><br><span class="line">    payment.setIntent(intent.toString());</span><br><span class="line">    payment.setPayer(payer);</span><br><span class="line">    payment.setTransactions(transactions);</span><br><span class="line">    RedirectUrls redirectUrls = <span class="built_in">new</span> RedirectUrls();</span><br><span class="line">    redirectUrls.setCancelUrl(cancelUrl);</span><br><span class="line">    redirectUrls.setReturnUrl(successUrl);</span><br><span class="line">    payment.setRedirectUrls(redirectUrls);</span><br><span class="line"></span><br><span class="line">    logger.<span class="keyword">info</span>("token: "+apiContext.getAccessToken());</span><br><span class="line">    <span class="keyword">return</span> payment.<span class="keyword">create</span>(apiContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行支付</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Payment execute<span class="constructor">Payment(String <span class="params">paymentId</span>, String <span class="params">payerId</span>)</span> throws PayPalRESTException&#123;</span><br><span class="line">    Payment payment = <span class="keyword">new</span> <span class="constructor">Payment()</span>;</span><br><span class="line">    payment.set<span class="constructor">Id(<span class="params">paymentId</span>)</span>;</span><br><span class="line">    PaymentExecution paymentExecute = <span class="keyword">new</span> <span class="constructor">PaymentExecution()</span>;</span><br><span class="line">    paymentExecute.set<span class="constructor">PayerId(<span class="params">payerId</span>)</span>;</span><br><span class="line">    return payment.execute(apiContext, paymentExecute);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>paypal的ipn回调处理</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><span class="line">    @Transactional</span><br><span class="line">    @Override</span><br><span class="line">    public void paypal<span class="constructor">Callback(Map <span class="params">params</span>,HttpServletRequest <span class="params">request</span>,HttpServletResponse <span class="params">response</span>)</span> throws  IOException&#123;</span><br><span class="line">        logger.info(<span class="string">"paypalCallback &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 进入paypal后台支付通知"</span>);</span><br><span class="line">        PrintWriter out = response.get<span class="constructor">Writer()</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取paypal请求参数,并拼接验证参数  文档：https://developer.paypal.com/docs/ipn/integration-guide/ht-ipn/</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"打印一下姓氏："</span>+request.get<span class="constructor">Parameter(<span class="string">"first_name"</span>)</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; en = request.get<span class="constructor">ParameterNames()</span>;</span><br><span class="line">        String str = <span class="string">"cmd=_notify-validate"</span>;</span><br><span class="line">        <span class="keyword">while</span> (en.has<span class="constructor">MoreElements()</span>) &#123;</span><br><span class="line">            String paramName = en.next<span class="constructor">Element()</span>;</span><br><span class="line">            String paramValue = request.get<span class="constructor">Parameter(<span class="params">paramName</span>)</span>;<span class="comment">//通过参数名称获取参数值</span></span><br><span class="line">            <span class="comment">//此处的编码一定要和自己的网站编码一致，不然会出现乱码，paypal回复的通知为‘INVALID’</span></span><br><span class="line">            str = str + <span class="string">"&amp;"</span> + paramName + <span class="string">"="</span> + <span class="module-access"><span class="module"><span class="identifier">URLEncoder</span>.</span></span>encode(paramValue,<span class="string">"utf-8"</span>);<span class="comment">//utf-8 URLEncoder.encode(paramValue, "UTF-8")</span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"paramName: "</span>+paramName+<span class="string">"   paramValue:"</span>+paramValue);</span><br><span class="line">            logger.info(<span class="string">"paramName: "</span>+paramName+<span class="string">"   paramValue:"</span>+paramValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//建议在此将接受到的信息 str 记录到日志文件中以确认是否收到 IPN 信息</span></span><br><span class="line">        logger.info(<span class="string">"========================================================================================="</span>);</span><br><span class="line">        logger.info(<span class="string">"paypal传递过来的交易信息:"</span>+str);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将信息 POST 回给 PayPal 进行验证</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//验证地址测试环境和正式环境不一样配置在yml中</span></span><br><span class="line">        URL u = <span class="keyword">new</span> <span class="constructor">URL(<span class="params">ipnurl</span>)</span>;<span class="comment">//https://ipnpb.paypal.com/cgi-bin/webscr  https://ipnpb.sandbox.paypal.com/cgi-bin/webscr</span></span><br><span class="line">        HttpURLConnection uc = (HttpURLConnection) u.<span class="keyword">open</span><span class="constructor">Connection()</span>;</span><br><span class="line">        uc.set<span class="constructor">RequestMethod(<span class="string">"POST"</span>)</span>;</span><br><span class="line">        uc.set<span class="constructor">DoOutput(<span class="params">true</span>)</span>;</span><br><span class="line">        uc.set<span class="constructor">DoInput(<span class="params">true</span>)</span>;</span><br><span class="line">        uc.set<span class="constructor">UseCaches(<span class="params">false</span>)</span>;</span><br><span class="line">        <span class="comment">//设置 HTTP 的头信息</span></span><br><span class="line">        uc.set<span class="constructor">RequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span>;</span><br><span class="line">        PrintWriter pw = <span class="keyword">new</span> <span class="constructor">PrintWriter(<span class="params">uc</span>.<span class="params">getOutputStream</span>()</span>);</span><br><span class="line">        pw.println(str);</span><br><span class="line">        pw.close<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 接受 PayPal 对 IPN 回发的回复信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        BufferedReader <span class="keyword">in</span> = <span class="keyword">new</span> <span class="constructor">BufferedReader(<span class="params">new</span> InputStreamReader(<span class="params">uc</span>.<span class="params">getInputStream</span>()</span>));</span><br><span class="line">        String res = <span class="keyword">in</span>.read<span class="constructor">Line()</span>;</span><br><span class="line">        <span class="keyword">in</span>.close<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将 POST 信息分配给本地变量，可以根据您的需要添加</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String paymentStatus = request.get<span class="constructor">Parameter(<span class="string">"payment_status"</span>)</span>; <span class="comment">// 交易状态 Completed 代表交易成功</span></span><br><span class="line">        String paymentDate = request.get<span class="constructor">Parameter(<span class="string">"payment_date"</span>)</span>;<span class="comment">// 交易时间</span></span><br><span class="line">        String txnId = request.get<span class="constructor">Parameter(<span class="string">"txn_id"</span>)</span>; <span class="comment">// 交易id</span></span><br><span class="line">        String parentTxnId = request.get<span class="constructor">Parameter(<span class="string">"parent_txn_id"</span>)</span>; <span class="comment">// 父交易id</span></span><br><span class="line"><span class="comment">//        String receiverEmail = request.getParameter("receiver_email"); // 收款人email</span></span><br><span class="line"><span class="comment">//        String receiverId = request.getParameter("receiver_id"); // 收款人id</span></span><br><span class="line"><span class="comment">//        String payerEmail = request.getParameter("payer_email"); // 付款人email</span></span><br><span class="line"><span class="comment">//        String payerId = request.getParameter("payer_id");  // 付款人id</span></span><br><span class="line"><span class="comment">//        String mcGross = request.getParameter("mc_gross"); // 交易金额</span></span><br><span class="line">        String custom = request.get<span class="constructor">Parameter(<span class="string">"custom"</span>)</span>; <span class="comment">// 自定义字段，我们存放的订单ID</span></span><br><span class="line">        <span class="keyword">if</span> (res<span class="operator"> == </span>null<span class="operator"> || </span>res<span class="operator"> == </span><span class="string">""</span>) &#123;</span><br><span class="line">            res = <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">"res = "</span> + res);</span><br><span class="line">        logger.info(<span class="string">"paymentStatus = "</span> + paymentStatus);</span><br><span class="line">        logger.info(<span class="string">"txnI = "</span> + txnId);</span><br><span class="line">        logger.info(<span class="string">"parentTxnId = "</span> + parentTxnId);</span><br><span class="line">        logger.info(<span class="string">"custom = "</span> + custom);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取 PayPal 对回发信息的回复信息，判断刚才的通知是否为 PayPal 发出的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"VERIFIED"</span>.equals<span class="constructor">IgnoreCase(<span class="params">res</span>)</span>) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果 parentTxnId 不为空我们就认为是通知就不是第一次通知</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">StringUtil</span>.</span></span>is<span class="constructor">NotEmpty(<span class="params">parentTxnId</span>)</span>) &#123;</span><br><span class="line"><span class="comment">//                // 根据父支付交易号查询付款表数据</span></span><br><span class="line"><span class="comment">//                List&lt;ShopOrderPayment&gt; list = shopOrderPaymentService.getOrderPaymentByParentTxnId(parentTxnId);</span></span><br><span class="line">                Condition paypalTransCondition=<span class="keyword">new</span> <span class="constructor">Condition(TPaypalTrans.<span class="params">class</span>)</span>;</span><br><span class="line">                paypalTransCondition.create<span class="constructor">Criteria()</span>.<span class="keyword">and</span><span class="constructor">EqualTo(<span class="string">"parentTxnId"</span>,<span class="params">parentTxnId</span>)</span>;</span><br><span class="line">                List&lt;TPaypalTrans&gt; tPaypalTransList=tPaypalTransService.find<span class="constructor">ByCondition(<span class="params">paypalTransCondition</span>)</span>;</span><br><span class="line">                <span class="keyword">if</span> (null != tPaypalTransList<span class="operator"> &amp;&amp; </span>tPaypalTransList.size<span class="literal">()</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 保存支付历史记录数据</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    TPaypalTrans updateTPaypalTrans=<span class="keyword">new</span> <span class="constructor">TPaypalTrans()</span>;</span><br><span class="line">                    updateTPaypalTrans.set<span class="constructor">PaymentStatus(<span class="params">paymentStatus</span>)</span>;<span class="comment">//更新交易状态</span></span><br><span class="line">                    updateTPaypalTrans.set<span class="constructor">PaymentDate(<span class="params">paymentDate</span>)</span>;<span class="comment">//更新交易时间</span></span><br><span class="line">                    <span class="built_in">int</span> n=tPaypalTransService.update(updateTPaypalTrans,paypalTransCondition);</span><br><span class="line">                    <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        logger.info(<span class="string">"更新paypalTrans记录成功：[&#123;&#125;]"</span>,n);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        logger.info(<span class="string">"更新paypalTrans记录失败：[&#123;&#125;]"</span>,n);</span><br><span class="line">                        throw <span class="keyword">new</span> <span class="constructor">BizException(<span class="string">"更新paypalTrans记录失败"</span>)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="comment">//                    /**</span></span><br><span class="line"><span class="comment">//                     * 判断状态是complete则更新订单状态为待确认收货</span></span><br><span class="line"><span class="comment">//                     * 如果是refunded则更新订单状态为已完成</span></span><br><span class="line"><span class="comment">//                     */</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">COMPLETED_STATUS</span>.</span></span>equals<span class="constructor">IgnoreCase(<span class="params">paymentStatus</span>)</span><span class="operator"> &amp;&amp; </span><span class="module-access"><span class="module"><span class="identifier">StringUtils</span>.</span></span>is<span class="constructor">NotEmpty(<span class="params">custom</span>)</span>) &#123;</span><br><span class="line">                        <span class="comment">//状态是已经完成则进行更新发货表当中的状态OK  //进行更新发货单的状态为支付成功</span></span><br><span class="line">                        TOutRepoOrder tOutRepoOrder=<span class="keyword">new</span> <span class="constructor">TOutRepoOrder()</span>;</span><br><span class="line">                        tOutRepoOrder.set<span class="constructor">TakeDeliveryId(<span class="params">custom</span>)</span>;</span><br><span class="line">                        tOutRepoOrder=tOutRepoOrderService.find<span class="constructor">OneForUpdate(<span class="params">tOutRepoOrder</span>)</span>;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="number">1</span>==tOutRepoOrder.get<span class="constructor">FinanceStatus()</span>)&#123;</span><br><span class="line">                            <span class="comment">//已经更新为已支付无需再次更新下============================================</span></span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="comment">//进行更新为已支付</span></span><br><span class="line">                            TOutRepoOrder updateTOutRepoOrder=<span class="keyword">new</span> <span class="constructor">TOutRepoOrder()</span>;</span><br><span class="line">                            updateTOutRepoOrder.set<span class="constructor">FinanceStatus(1)</span>;<span class="comment">////财务状态0-待确认账单，1-等待支付，2-已支付/3-无需支付 david:还要把订单状态改为“待投入渠道</span></span><br><span class="line">                            updateTOutRepoOrder.set<span class="constructor">Status(2)</span>;<span class="comment">//0 :待发送账单/1:待放货/2:待投入渠道/3:已投入渠道/4：已完成 / 5：已取消*/</span></span><br><span class="line">                            updateTOutRepoOrder.set<span class="constructor">LastUpdateDate((System.<span class="params">currentTimeMillis</span>()</span>/<span class="number">1000L</span>));</span><br><span class="line">                            updateTOutRepoOrder.set<span class="constructor">ConfirmPaymentDate((System.<span class="params">currentTimeMillis</span>()</span>/<span class="number">1000L</span>));<span class="comment">//确认支付时间</span></span><br><span class="line">                            Condition updateOutRepoCondition=<span class="keyword">new</span> <span class="constructor">Condition(TOutRepoOrder.<span class="params">class</span>)</span>;</span><br><span class="line">                            updateOutRepoCondition.create<span class="constructor">Criteria()</span>.<span class="keyword">and</span><span class="constructor">EqualTo(<span class="string">"takeDeliveryId"</span>,<span class="params">custom</span>)</span>;</span><br><span class="line">                            <span class="built_in">int</span> m=tOutRepoOrderService.update(updateTOutRepoOrder,updateOutRepoCondition);</span><br><span class="line">                            <span class="keyword">if</span>(m&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                                logger.info(<span class="string">"更新发货单成功：[&#123;&#125;]"</span>,m);</span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                logger.info(<span class="string">"更新发货单失败：[&#123;&#125;]"</span>,m);</span><br><span class="line">                                <span class="module-access"><span class="module"><span class="identifier">TransactionAspectSupport</span>.</span></span>current<span class="constructor">TransactionStatus()</span>.set<span class="constructor">RollbackOnly()</span>;</span><br><span class="line">                                throw <span class="keyword">new</span> <span class="constructor">BizException(<span class="string">"更新发货单失败"</span>)</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">REFUNDED_STATUS</span>.</span></span>equals<span class="constructor">IgnoreCase(<span class="params">paymentStatus</span>)</span>) &#123;</span><br><span class="line">                    <span class="comment">//paypalService.updateOrderStatus(shopOrderPayment.getOrderId(), com.sunvalley.shop.order.constants.Constants.OrderStatus.STATUS_COMPLETE);</span></span><br><span class="line">                    <span class="comment">//暂时不处理，退款状态</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    logger.error(<span class="string">"父支付交易号："</span> + parentTxnId + <span class="string">" 在支付表中不存在"</span>);</span><br><span class="line">                    logger.error(<span class="string">"Class: "</span>+this.get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span>+<span class="string">" method: "</span>+</span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">StackTrace()</span><span class="literal">[<span class="number">1</span>]</span>.get<span class="constructor">MethodName()</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 第一次回调通知,根据 txnId 查询。如果存在则表示支付实时返回结果已经记录了，不存在则表示实时返回结果没有记录到</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                TPaypalTrans tPaypalTrans=<span class="keyword">new</span> <span class="constructor">TPaypalTrans()</span>;</span><br><span class="line">                tPaypalTrans.set<span class="constructor">TxnId(<span class="params">txnId</span>)</span>;</span><br><span class="line">                tPaypalTrans=tPaypalTransService.find<span class="constructor">OneForUpdate(<span class="params">tPaypalTrans</span>)</span>;</span><br><span class="line">                <span class="keyword">if</span> (null != tPaypalTrans ) &#123;<span class="comment">//存在记录  &amp;&amp; paymentList.size() &gt; 0</span></span><br><span class="line">                    TPaypalTrans orderPaymentTmp = tPaypalTrans;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">COMPLETED_STATUS</span>.</span></span>equals<span class="constructor">IgnoreCase(<span class="params">orderPaymentTmp</span>.<span class="params">getPaymentStatus</span>()</span>)) &#123;</span><br><span class="line">                        logger.info(<span class="string">"================ 支付表数据已经是complete了，不需要更新 ================"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果回传的状态不是complete则更新我们的支付数据</span></span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 更新支付状态</span></span><br><span class="line"><span class="comment">                         * 保存支付历史记录数据</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        TPaypalTrans updateTPaypalTrans=<span class="keyword">new</span> <span class="constructor">TPaypalTrans()</span>;</span><br><span class="line">                        updateTPaypalTrans.set<span class="constructor">PaymentStatus(<span class="params">paymentStatus</span>)</span>;<span class="comment">//更新交易状态</span></span><br><span class="line">                        updateTPaypalTrans.set<span class="constructor">PaymentDate(<span class="params">paymentDate</span>)</span>;<span class="comment">//更新交易时间</span></span><br><span class="line">                        Condition updatePaypalCondition=<span class="keyword">new</span> <span class="constructor">Condition(TPaypalTrans.<span class="params">class</span>)</span>;</span><br><span class="line">                        updatePaypalCondition.create<span class="constructor">Criteria()</span>.<span class="keyword">and</span><span class="constructor">EqualTo(<span class="string">"txn_id"</span>,<span class="params">txnId</span>)</span>;</span><br><span class="line">                        <span class="built_in">int</span> n=tPaypalTransService.update(updateTPaypalTrans,updatePaypalCondition);</span><br><span class="line">                        <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                            logger.info(<span class="string">"更新paypal记录成功：[&#123;&#125;]"</span>,n);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            logger.info(<span class="string">"更新paypal记录失败：[&#123;&#125;]"</span>,n);</span><br><span class="line">                            throw <span class="keyword">new</span> <span class="constructor">BizException(<span class="string">"更新paypal记录失败"</span>)</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">COMPLETED_STATUS</span>.</span></span>equals<span class="constructor">IgnoreCase(<span class="params">paymentStatus</span>)</span><span class="operator"> &amp;&amp; </span><span class="module-access"><span class="module"><span class="identifier">StringUtils</span>.</span></span>is<span class="constructor">NotEmpty(<span class="params">custom</span>)</span>) &#123;</span><br><span class="line">                            <span class="comment">//进行更新发货单的状态为支付成功</span></span><br><span class="line">                            TOutRepoOrder tOutRepoOrder=<span class="keyword">new</span> <span class="constructor">TOutRepoOrder()</span>;</span><br><span class="line">                            tOutRepoOrder.set<span class="constructor">TakeDeliveryId(<span class="params">custom</span>)</span>;</span><br><span class="line">                            tOutRepoOrder=tOutRepoOrderService.find<span class="constructor">OneForUpdate(<span class="params">tOutRepoOrder</span>)</span>;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="number">3</span>==tOutRepoOrder.get<span class="constructor">FinanceStatus()</span>)&#123;</span><br><span class="line">                                <span class="comment">//已经更新为已支付无需再次更新下============================================</span></span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                <span class="comment">//进行更新为已支付</span></span><br><span class="line">                                TOutRepoOrder updateTOutRepoOrder=<span class="keyword">new</span> <span class="constructor">TOutRepoOrder()</span>;</span><br><span class="line">                                updateTOutRepoOrder.set<span class="constructor">FinanceStatus(1)</span>;<span class="comment">// 财务状态0-未支付，1-已支付</span></span><br><span class="line">                                updateTOutRepoOrder.set<span class="constructor">Status(2)</span>;<span class="comment">//0 :待发送账单/1:待放货/2:待投入渠道/3:已投入渠道/4：已完成 / 5：已取消*/</span></span><br><span class="line">                                updateTOutRepoOrder.set<span class="constructor">LastUpdateDate((System.<span class="params">currentTimeMillis</span>()</span>/<span class="number">1000L</span>));</span><br><span class="line">                                updateTOutRepoOrder.set<span class="constructor">ConfirmPaymentDate((System.<span class="params">currentTimeMillis</span>()</span>/<span class="number">1000L</span>));<span class="comment">//确认支付时间</span></span><br><span class="line">                                Condition updateOutRepoCondition=<span class="keyword">new</span> <span class="constructor">Condition(TOutRepoOrder.<span class="params">class</span>)</span>;</span><br><span class="line">                                updateOutRepoCondition.create<span class="constructor">Criteria()</span>.<span class="keyword">and</span><span class="constructor">EqualTo(<span class="string">"takeDeliveryId"</span>,<span class="params">custom</span>)</span>;</span><br><span class="line">                                <span class="built_in">int</span> m=tOutRepoOrderService.update(updateTOutRepoOrder,updateOutRepoCondition);</span><br><span class="line">                                <span class="keyword">if</span>(m&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                                    logger.info(<span class="string">"更新发货单成功：[&#123;&#125;]"</span>,m);</span><br><span class="line">                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                    logger.info(<span class="string">"更新发货单失败：[&#123;&#125;]"</span>,m);</span><br><span class="line">                                    <span class="module-access"><span class="module"><span class="identifier">TransactionAspectSupport</span>.</span></span>current<span class="constructor">TransactionStatus()</span>.set<span class="constructor">RollbackOnly()</span>;</span><br><span class="line">                                    throw <span class="keyword">new</span> <span class="constructor">BizException(<span class="string">"更新发货单失败"</span>)</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 保存支付信息   不存在记录</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">StringUtil</span>.</span></span>is<span class="constructor">NotEmpty(<span class="params">custom</span>)</span><span class="operator"> &amp;&amp; </span><span class="module-access"><span class="module"><span class="identifier">COMPLETED_STATUS</span>.</span></span>equals<span class="constructor">IgnoreCase(<span class="params">paymentStatus</span>)</span>) &#123; <span class="comment">//订单号为空则无法进行更新发货单状态</span></span><br><span class="line">                        <span class="comment">//进行判断如果paymentStatus为completed则进行更新</span></span><br><span class="line">                        TOutRepoOrder tOutRepoOrder=<span class="keyword">new</span> <span class="constructor">TOutRepoOrder()</span>;</span><br><span class="line">                        tOutRepoOrder.set<span class="constructor">TakeDeliveryId(<span class="params">custom</span>)</span>;</span><br><span class="line">                        tOutRepoOrder=tOutRepoOrderService.find<span class="constructor">OneForUpdate(<span class="params">tOutRepoOrder</span>)</span>;</span><br><span class="line">                        <span class="keyword">if</span>(tOutRepoOrder!=null)&#123;</span><br><span class="line">                            TOutRepoOrder updateTOutRepoOrder=<span class="keyword">new</span> <span class="constructor">TOutRepoOrder()</span>;</span><br><span class="line">                            updateTOutRepoOrder.set<span class="constructor">FinanceStatus(1)</span>;<span class="comment">////财务状态0-待确认账单，1-等待支付，2-已支付/3-无需支付</span></span><br><span class="line">                            updateTOutRepoOrder.set<span class="constructor">Status(2)</span>;<span class="comment">//0 :待发送账单/1:待放货/2:待投入渠道/3:已投入渠道/4：已完成 / 5：已取消*/</span></span><br><span class="line">                            updateTOutRepoOrder.set<span class="constructor">LastUpdateDate((System.<span class="params">currentTimeMillis</span>()</span>/<span class="number">1000L</span>));</span><br><span class="line">                            updateTOutRepoOrder.set<span class="constructor">ConfirmPaymentDate((System.<span class="params">currentTimeMillis</span>()</span>/<span class="number">1000L</span>));<span class="comment">//确认支付时间</span></span><br><span class="line">                            Condition updateOutRepoCondition=<span class="keyword">new</span> <span class="constructor">Condition(TOutRepoOrder.<span class="params">class</span>)</span>;</span><br><span class="line">                            updateOutRepoCondition.create<span class="constructor">Criteria()</span>.<span class="keyword">and</span><span class="constructor">EqualTo(<span class="string">"takeDeliveryId"</span>,<span class="params">custom</span>)</span>;</span><br><span class="line">                            <span class="built_in">int</span> m=tOutRepoOrderService.update(updateTOutRepoOrder,updateOutRepoCondition);</span><br><span class="line">                            <span class="keyword">if</span>(m&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                                logger.info(<span class="string">"更新发货单成功：[&#123;&#125;]"</span>,m);</span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                logger.info(<span class="string">"更新发货单失败：[&#123;&#125;]"</span>,m);</span><br><span class="line">                                <span class="module-access"><span class="module"><span class="identifier">TransactionAspectSupport</span>.</span></span>current<span class="constructor">TransactionStatus()</span>.set<span class="constructor">RollbackOnly()</span>;</span><br><span class="line">                                throw <span class="keyword">new</span> <span class="constructor">BizException(<span class="string">"更新发货单失败"</span>)</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="comment">//通过custom商户订单号在发货单当中查找不到</span></span><br><span class="line">                            logger.info(<span class="string">"商户订单号custom在发货单中不存在"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        logger.info(<span class="string">"***************** paypal回传的订单ID为空 **************"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    logger.info(<span class="string">"新增paypalTrans"</span>);</span><br><span class="line">                    TPaypalTrans insertTPaypalTrans= get<span class="constructor">Value(<span class="params">params</span>)</span>;<span class="comment">//调用赋值</span></span><br><span class="line">                    <span class="built_in">int</span> n=tPaypalTransMapper.add(insertTPaypalTrans);</span><br><span class="line">                    <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        logger.info(<span class="string">"新增paypal记录成功：[&#123;&#125;]"</span>,n);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        logger.info(<span class="string">"新增paypal记录失败：[&#123;&#125;]"</span>,n);</span><br><span class="line">                        throw <span class="keyword">new</span> <span class="constructor">BizException(<span class="string">"新增paypal记录失败"</span>)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    logger.info(<span class="string">"================= 支付信息保存成功，订单状态更新成待发货成功 ===================="</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"INVALID"</span>.equals<span class="constructor">IgnoreCase(<span class="params">res</span>)</span>) &#123;</span><br><span class="line">            <span class="comment">//非法信息，可以将此记录到您的日志文件中以备调查</span></span><br><span class="line">            logger.error(<span class="string">"paypal完成支付发送IPN通知返回状态非法，请联系管理员，请求参数："</span> + str);</span><br><span class="line">            logger.error(<span class="string">"Class: "</span>+this.get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span>+<span class="string">" method: "</span>+</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">StackTrace()</span><span class="literal">[<span class="number">1</span>]</span>.get<span class="constructor">MethodName()</span>);</span><br><span class="line">            out.println(<span class="string">"confirmError"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//处理其他错误</span></span><br><span class="line">            logger.error(<span class="string">"paypal完成支付发送IPN通知发生其他异常，请联系管理员，请求参数："</span> + str);</span><br><span class="line">            logger.error(<span class="string">"Class: "</span>+this.get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span>+<span class="string">" method: "</span>+</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">StackTrace()</span><span class="literal">[<span class="number">1</span>]</span>.get<span class="constructor">MethodName()</span>);</span><br><span class="line">            out.println(<span class="string">"confirmError"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"确认付款信息发生IO异常"</span> + e.get<span class="constructor">Message()</span>);</span><br><span class="line">        logger.error(<span class="string">"Class: "</span>+this.get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span>+<span class="string">" method: "</span>+</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">StackTrace()</span><span class="literal">[<span class="number">1</span>]</span>.get<span class="constructor">MethodName()</span>);</span><br><span class="line">        out.println(<span class="string">"confirmError"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        out.flush<span class="literal">()</span>;</span><br><span class="line">        out.close<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>反射</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过参数获取paypaltrans</span></span><br><span class="line"><span class="comment">     * @param params</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public TPaypalTrans get<span class="constructor">Value(Map <span class="params">params</span>)</span> throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        Class&lt;?&gt; c =<span class="module-access"><span class="module"><span class="identifier">TPaypalTrans</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line">        Object obj = c.<span class="keyword">new</span><span class="constructor">Instance()</span>; <span class="comment">//使用字段（使用之前我们需要一个该类对象）</span></span><br><span class="line">        logger.info(<span class="string">"getValue - 获取实例"</span>);</span><br><span class="line">        Set&lt;Map.Entry&gt; set=params.entry<span class="constructor">Set()</span>;</span><br><span class="line">        for (Map.Entry entry:set)&#123;</span><br><span class="line">            String keyName=entry.get<span class="constructor">Key()</span>.<span class="keyword">to</span><span class="constructor">String()</span>;</span><br><span class="line"></span><br><span class="line">            StringBuffer stringBuffer=<span class="keyword">new</span> <span class="constructor">StringBuffer(<span class="string">""</span>)</span>;</span><br><span class="line">            String<span class="literal">[]</span> strings=keyName.split(<span class="string">"_"</span>);</span><br><span class="line">            for (<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;strings.length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                    stringBuffer.append(strings<span class="literal">[<span class="identifier">i</span>]</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    String start=strings<span class="literal">[<span class="identifier">i</span>]</span>.substring(<span class="number">0</span>,<span class="number">1</span>).<span class="keyword">to</span><span class="constructor">UpperCase()</span>;<span class="comment">//大写首位</span></span><br><span class="line">                    String <span class="keyword">end</span>=strings<span class="literal">[<span class="identifier">i</span>]</span>.substring(<span class="number">1</span>);<span class="comment">//截取后面的字符串</span></span><br><span class="line">                    stringBuffer.append(start).append(<span class="keyword">end</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(<span class="string">"keyName: "</span>+keyName+<span class="string">"     property: "</span>+stringBuffer.<span class="keyword">to</span><span class="constructor">String()</span>);</span><br><span class="line">            String valueStr=((String<span class="literal">[]</span>)entry.get<span class="constructor">Value()</span>)<span class="literal">[<span class="number">0</span>]</span>;</span><br><span class="line">            logger.info(<span class="string">"valueStr: "</span>+valueStr);</span><br><span class="line"></span><br><span class="line">            Field field = c.get<span class="constructor">DeclaredField(<span class="params">stringBuffer</span>.<span class="params">toString</span>()</span>);<span class="comment">//获取私有字段</span></span><br><span class="line"></span><br><span class="line">            field.set<span class="constructor">Accessible(<span class="params">true</span>)</span>;<span class="comment">//暴力访问  //使用set()方法设置字段值</span></span><br><span class="line">            field.set(obj, valueStr);</span><br><span class="line">        &#125;</span><br><span class="line">        TPaypalTrans tPaypalTrans =(TPaypalTrans)obj;</span><br><span class="line">        logger.info(<span class="string">"getValue - tPaypalTrans: "</span>+<span class="module-access"><span class="module"><span class="identifier">JSONObject</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">tPaypalTrans</span>)</span>);</span><br><span class="line">        return tPaypalTrans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>paypal的Ipn回调的响应内容</p></blockquote><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">       /*</span><br><span class="line">       Paypal回调的响应内容：</span><br><span class="line">20200221 11:23:19.734 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[mc_gross]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[500.00]</span></span><br><span class="line">20200221 11:23:19.734 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[protection_eligibility]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[Ineligible]</span></span><br><span class="line">20200221 11:23:19.734 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[address_status]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[confirmed]</span></span><br><span class="line">20200221 11:23:19.734 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[payer_id]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[ZEA54X9BSHDWQ]</span></span><br><span class="line">20200221 11:23:19.735 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[address_street]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[NO 1 Nan Jin Road]</span></span><br><span class="line">20200221 11:23:19.735 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[payment_date]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[19:23:08 Feb 20, 2020 PST]</span></span><br><span class="line">20200221 11:23:19.735 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[payment_status]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[Pending]</span></span><br><span class="line">20200221 11:23:19.735 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[charset]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[gb2312]</span></span><br><span class="line">20200221 11:23:19.735 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[address_zip]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[200000]</span></span><br><span class="line">20200221 11:23:19.735 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[first_name]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[sn]</span></span><br><span class="line">20200221 11:23:19.735 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[mc_fee]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[17.30]</span></span><br><span class="line">20200221 11:23:19.736 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[address_country_code]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[CN]</span></span><br><span class="line">20200221 11:23:19.736 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[address_name]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[F sn]</span></span><br><span class="line">20200221 11:23:19.736 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[notify_version]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[3.9]</span></span><br><span class="line">20200221 11:23:19.736 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[custom]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[OUB20200221112152]</span></span><br><span class="line">20200221 11:23:19.736 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[payer_status]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[verified]</span></span><br><span class="line">20200221 11:23:19.736 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[business]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[sb2@business.example.com]</span></span><br><span class="line">20200221 11:23:19.737 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[address_country]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[China]</span></span><br><span class="line">20200221 11:23:19.737 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[address_city]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[Shanghai]</span></span><br><span class="line">20200221 11:23:19.737 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[quantity]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[1]</span></span><br><span class="line">20200221 11:23:19.737 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[verify_sign]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[A739FTSMk8kYJ.miuYv3SfmM-AuZAiAh8kw3F81AGspKHFru4lpfnZ02]</span></span><br><span class="line">20200221 11:23:19.737 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[payer_email]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[sb1@personal.example.com]</span></span><br><span class="line">20200221 11:23:19.737 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[txn_id]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[67Y54097JV355643W]</span></span><br><span class="line">20200221 11:23:19.737 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[payment_type]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[instant]</span></span><br><span class="line">20200221 11:23:19.737 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[last_name]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[F]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[address_state]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[Shanghai]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[receiver_email]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[sb2@business.example.com]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[payment_fee]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[17.30]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[shipping_discount]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[0.00]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[insurance_amount]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[0.00]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[receiver_id]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[3L9GARBGYFZVS]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[pending_reason]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[paymentreview]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[txn_type]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[express_checkout]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[item_name]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[payment description]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[discount]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[0.00]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[mc_currency]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[USD]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[item_number]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[residence_country]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[CN]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[test_ipn]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[1]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[shipping_method]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[Default]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[transaction_subject]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[payment description]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[payment_gross]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[500.00]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[ipn_track_id]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[95332aa3b4c2f]</span></span><br><span class="line">        */</span><br></pre></td></tr></table></figure><h2 id="与Paypal小哥的聊天记录"><a href="#与Paypal小哥的聊天记录" class="headerlink" title="与Paypal小哥的聊天记录"></a>与Paypal小哥的聊天记录</h2><p>为了对接这个paypal支付也是花了不少时间搞。<br>也不是说难点多，就是API文档是英文，所以我又不像david对着英文就可以搞，我还借助了谷歌的翻译，左看看右看看。<br>好了话不多说，看下我跟paypal小哥聊了些啥。<br>其实我怀疑这个Castle小哥是被我搞烦了。  </p><p>Castle：老是问老是问，不知道看API文档？官方文档干什么吃的，你老是问我，让官方文档一点尊严都没有。<br>我：o(╥﹏╥)o，对不起API文档。  </p><p>最终的一个paypal的一个token老是失效问题，Castle小哥让我换给jar包：<br>之前的jar包当中token没有自动更新需要自己去手动更新，然而我之前的想法就是还想着自己去更新下，我真是个傻逼。<br>从此Castle用血的教训告诉我要看官方文档。害，是我不争气，对不住了老哥。  </p><ol><li>这个是处理ipn回调的聊天，主要是ipn回调没调过来。</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">尊敬的商户</span> <span class="string">您好，</span></span><br><span class="line"></span><br><span class="line"><span class="attr">感谢您联系PayPal商家技术支持，我是技术工程师Castle，很高兴能有机会帮助您。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">我这边查看了一下您的sandbox账号fsn2915324940@163.com，发现IPN发送记录是正常的且发送地址为：http</span>:<span class="string">//y22711s118.iask.in/api/v1/pay/paypalCallBack</span></span><br><span class="line"></span><br><span class="line"><span class="meta">并且收到了来自您系统返回的200</span> <span class="string">response，以下是一条发送成功的IPN记录范例：</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Message</span> <span class="string">ID</span></span><br><span class="line"><span class="attr">30P16273JX693701F</span></span><br><span class="line"><span class="attr">Unencrypted</span> <span class="string">Message ID</span></span><br><span class="line"><span class="attr">249249217</span></span><br><span class="line"><span class="attr">Time</span> <span class="string">Created</span></span><br><span class="line"><span class="attr">Feb</span> <span class="string">5, 2020 06:25:36 PST</span></span><br><span class="line"><span class="attr">PayPal</span> <span class="string">Account</span></span><br><span class="line"><span class="attr">John</span> <span class="string">Doe's Test Store</span></span><br><span class="line"><span class="attr">Transaction</span> <span class="string">ID</span></span><br><span class="line"><span class="attr">6YS701801F562190A</span></span><br><span class="line"><span class="attr">Delivery</span> <span class="string">Status</span></span><br><span class="line"><span class="attr">Sent</span></span><br><span class="line"><span class="attr">HTTP</span> <span class="string">Response</span></span><br><span class="line"><span class="attr">200</span></span><br><span class="line"><span class="attr">Last</span> <span class="string">IPN send Attempt</span></span><br><span class="line"><span class="attr">Feb</span> <span class="string">5, 2020 06:43:16 PST</span></span><br><span class="line"><span class="attr">Destination</span> <span class="string">URL</span></span><br><span class="line"><span class="attr">http</span>:<span class="string">//y22711s118.iask.in/api/v1/pay/paypalCallBack</span></span><br><span class="line"><span class="attr">Number</span> <span class="string">of Retries</span></span><br><span class="line"><span class="attr">0</span></span><br><span class="line"><span class="attr">Type</span></span><br><span class="line"><span class="attr">Transaction</span> <span class="string">made</span></span><br><span class="line"></span><br><span class="line"><span class="attr">IPN</span> <span class="string">Text</span></span><br><span class="line"><span class="attr">mc_gross</span>=<span class="string">500.00&amp;protection_eligibility=Eligible&amp;address_status=confirmed&amp;</span></span><br><span class="line"><span class="attr">payer_id</span>=<span class="string">A2YKGTAGML7V4&amp;address_street=NO 1 Nan Jin Road&amp;</span></span><br><span class="line"><span class="attr">payment_date</span>=<span class="string">19:46:23 Feb 03, 2020 PST&amp;payment_status=Refunded&amp;charset=gb2312&amp;</span></span><br><span class="line"><span class="attr">address_zip</span>=<span class="string">200000&amp;first_name=莎娜&amp;mc_fee=17.30&amp;address_country_code=CN&amp;</span></span><br><span class="line"><span class="attr">address_name</span>=<span class="string">冯 莎娜&amp;notify_version=3.9&amp;custom=&amp;payer_status=verified&amp;</span></span><br><span class="line"><span class="attr">business</span>=<span class="string">fsn2915324940@163.com&amp;address_country=China&amp;address_city=Shanghai&amp;quantity=1&amp;</span></span><br><span class="line"><span class="attr">verify_sign</span>=<span class="string">AveljTgX9XcE.t0NAN3EYVNEITeVADrLxwEBMAJMMvQqLXMKbbzDQEck&amp;</span></span><br><span class="line"><span class="attr">payer_email</span>=<span class="string">198866436@qq.com&amp;txn_id=6YS701801F562190A&amp;payment_type=instant&amp;last_name=冯&amp;</span></span><br><span class="line"><span class="attr">address_state</span>=<span class="string">Shanghai&amp;receiver_email=fsn2915324940@163.com&amp;payment_fee=17.30&amp;</span></span><br><span class="line"><span class="attr">shipping_discount</span>=<span class="string">0.00&amp;insurance_amount=0.00&amp;receiver_id=DH7T6UAAXRMHQ&amp;</span></span><br><span class="line"><span class="attr">txn_type</span>=<span class="string">express_checkout&amp;item_name=payment description&amp;discount=0.00&amp;mc_currency=USD&amp;</span></span><br><span class="line"><span class="attr">item_number</span>=<span class="string">&amp;residence_country=CN&amp;test_ipn=1&amp;shipping_method=Default&amp;</span></span><br><span class="line"><span class="attr">transaction_subject</span>=<span class="string">payment description&amp;payment_gross=500.00&amp;ipn_track_id=ad78e05c1c28d</span></span><br><span class="line"></span><br><span class="line"><span class="attr">但由于前几天我们在sandbox环境有出现过IPN发送异常的系统错误，您遇到的问题可能与那个有关。那个问题目前已经修复了，请您再尝试一下，看现在能不能顺利收到IPN通知？</span></span><br><span class="line"></span><br><span class="line"><span class="attr">期待您的回复，如果您还有其他产品集成或者交易方面的问题，欢迎随时来信与我们联系。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">友情提醒，请注意如果您没有在该事件发起后的7天之内回复我们，那么该事件将会被自动关闭。届时如果您还有其他问题也可以重新提交一个Case。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">感谢您的耐心和理解，祝您工作顺利生活愉快。</span></span><br><span class="line"><span class="attr">谢谢</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Castle</span></span><br><span class="line"><span class="attr">PayPal</span> <span class="string">商家技术支持部</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ref</span>:<span class="string">_00D30LaY._5002E1WyRdd:ref</span></span><br></pre></td></tr></table></figure><ol start="2"><li>还是ipn回调问题</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">尊敬的商户 您好，</span><br><span class="line"></span><br><span class="line">感谢您联系PayPal商家技术支持，我是技术工程师Castle，很高兴能有机会帮助您。</span><br><span class="line"></span><br><span class="line">我查看了一下您的这个sandbox账号，确实目前最新的IPN消息也显示queue状态。这个可能是由于sandbox环境的一些内部错误所导致的。</span><br><span class="line">正常情况下IPN通知应该会在交易状态发生改变（如支付成功，或者退款成功等）时立即发出，有时由于网络原因或服务器负荷等因素，可能会有几秒钟到几分钟的延迟，但超过一小时的话一般都是有一些系统错误导致的。</span><br><span class="line"></span><br><span class="line">目前该问题已经上报给相关的产品研发部门，并且正在紧急修复中了。</span><br><span class="line">给您造成的不便我们非常抱歉，如果有任何进展我们会第一时间通知您，感谢您的耐心和理解。</span><br><span class="line"></span><br><span class="line">期待您的回复，如果您还有其他产品集成或者交易方面的问题，欢迎随时来信与我们联系。</span><br><span class="line"></span><br><span class="line">友情提醒，请注意如果您没有在该事件发起后的<span class="number">7</span>天之内回复我们，那么该事件将会被自动关闭。届时如果您还有其他问题也可以重新提交一个Case。</span><br><span class="line"></span><br><span class="line">感谢您的耐心和理解，祝您工作顺利生活愉快。</span><br><span class="line">谢谢</span><br><span class="line"></span><br><span class="line">Castle</span><br><span class="line">PayPal 商家技术支持部</span><br><span class="line"></span><br><span class="line"><span class="built_in">ref</span>:<span class="module-access"><span class="module"><span class="identifier">_00D30LaY</span>.</span><span class="module"><span class="identifier">_5002E1XCagT</span>:</span></span><span class="built_in">ref</span></span><br></pre></td></tr></table></figure><ol start="3"><li>关于订单查询</li></ol><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">您好， </span><br><span class="line">感谢您联系<span class="string">PayPal商</span>家技术支持中心，我是技术工程师<span class="string">Kevin，</span>很高兴能为您提供技术服务。</span><br><span class="line"></span><br><span class="line">关于查询订单以及订单详情的<span class="string">API，</span> 请参照以下<span class="string">URL。</span></span><br><span class="line"></span><br><span class="line">交易订单查询：</span><br><span class="line"><span class="string">https:</span>//<span class="string">developer.</span><span class="string">paypal.</span><span class="string">com/</span><span class="string">docs/</span><span class="string">archive/</span><span class="string">nvp-soap-</span><span class="string">api/</span><span class="string">merchant/</span><span class="string">transaction-search-</span><span class="string">nvp/</span></span><br><span class="line"></span><br><span class="line">交易订单详细：</span><br><span class="line"><span class="string">https:</span>//<span class="string">developer.</span><span class="string">paypal.</span><span class="string">com/</span><span class="string">docs/</span><span class="string">archive/</span><span class="string">nvp-soap-</span><span class="string">api/</span><span class="string">merchant/</span><span class="built_in">get-transaction-details-nvp/</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">以上，谢谢。</span></span><br><span class="line"><span class="built_in">祝您生活愉快。</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">Kevin</span></span><br><span class="line"><span class="built_in">PayPal商家技术支持</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">ref:_00D30LaY._5002E1XDl2l:ref</span></span><br></pre></td></tr></table></figure><ol start="4"><li>paypal支付链接是否能够失效</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">您好， </span><br><span class="line">感谢您联系PayPal商家技术支持中心。</span><br><span class="line"></span><br><span class="line">&gt;&gt;有能够是paypal支付链接失效的api文档吗，能发下吗 就是通过该paypal支付链接使客户端用户无法付款</span><br><span class="line">很抱歉，PayPal并没有相关的API让支付链接失效。</span><br><span class="line"></span><br><span class="line">感谢您的理解与支持。</span><br><span class="line"></span><br><span class="line">以上， 谢谢。</span><br><span class="line">祝您生活愉快！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PayPal商家技术支持</span><br><span class="line"></span><br><span class="line"><span class="built_in">ref</span>:<span class="module-access"><span class="module"><span class="identifier">_00D30LaY</span>.</span><span class="module"><span class="identifier">_5002E1XRqWK</span>:</span></span><span class="built_in">ref</span></span><br></pre></td></tr></table></figure><ol start="5"><li>ipn回调</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">尊敬的商户 您好，</span><br><span class="line"></span><br><span class="line">感谢您联系PayPal商家技术支持，我是技术工程师Castle，很高兴能有机会帮助您。</span><br><span class="line"></span><br><span class="line">根据您的描述，如果输入英文信息都能验证成功，但有中文信息就失败的话，应该是由于<span class="keyword">encoding</span>设置的原因导致验证无法成功。并且由于我们的商户设置页面更新的缘故，原来的入口发生了变化，所以找不到。</span><br><span class="line">请尝试通过以下步骤在您测试的商户账号中将<span class="keyword">encoding</span>设置改为UTF<span class="number">-8</span>应该就能解决：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>）登录您的PayPal账号后打开这个链接进入设置页面：https://www.paypal.com/cgi-bin/customerprofileweb?cmd=_profile-<span class="keyword">language</span>-<span class="keyword">encoding</span>，如果是sandbox账号的话请打开这个链接：https://www.sandbox.paypal.com/cgi-bin/customerprofileweb?cmd=_profile-<span class="keyword">language</span>-<span class="keyword">encoding</span></span><br><span class="line"><span class="number">2</span>）然后选择More <span class="keyword">Options</span>进入<span class="keyword">encoding</span>选择页面，一般选择UTF8</span><br><span class="line"><span class="number">3</span>）确保您的网站页面也是采用相同的字符编码（UTF8）就不会出错了。</span><br><span class="line"></span><br><span class="line">期待您的回复，如果您还有其他产品集成或者交易方面的问题，欢迎随时来信与我们联系。</span><br><span class="line"></span><br><span class="line">友情提醒，请注意如果您没有在该事件发起后的<span class="number">7</span>天之内回复我们，那么该事件将会被自动关闭。届时如果您还有其他问题也可以重新提交一个<span class="keyword">Case</span>。</span><br><span class="line"></span><br><span class="line">感谢您的耐心和理解，祝您工作顺利生活愉快。</span><br><span class="line">谢谢</span><br><span class="line"></span><br><span class="line">Castle</span><br><span class="line">PayPal 商家技术支持部</span><br><span class="line"></span><br><span class="line"><span class="keyword">ref</span>:_00D30LaY._5002E1XRp4f:<span class="keyword">ref</span></span><br></pre></td></tr></table></figure><ol start="6"><li>paypal token方面的执着</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">尊敬的商户 您好，</span><br><span class="line"></span><br><span class="line">感谢您联系PayPal商家技术支持，我是技术工程师Castle，很高兴能有机会帮助您。</span><br><span class="line"></span><br><span class="line">请问您是在调用REST API时遇到了<span class="keyword">access</span>-token过期的错误是么？</span><br><span class="line"></span><br><span class="line">需要注意的是，<span class="keyword">access</span>-token本身是有有效期的，大概是<span class="number">10</span>个小时左右，过期之后请重新使用client ID 和 Secret调用同样的方法再获取一下就可以了。具体方案可以参考文档：https://developer.paypal.com/docs/api/overview/#<span class="keyword">get</span>-an-<span class="keyword">access</span>-token</span><br><span class="line"></span><br><span class="line">期待您的回复，如果您还有其他产品集成或者交易方面的问题，欢迎随时来信与我们联系。</span><br><span class="line"></span><br><span class="line">友情提醒，请注意如果您没有在该事件发起后的<span class="number">7</span>天之内回复我们，那么该事件将会被自动关闭。届时如果您还有其他问题也可以重新提交一个<span class="keyword">Case</span>。</span><br><span class="line"></span><br><span class="line">感谢您的耐心和理解，祝您工作顺利生活愉快。</span><br><span class="line">谢谢</span><br><span class="line"></span><br><span class="line">Castle</span><br><span class="line">PayPal 商家技术支持部</span><br><span class="line"></span><br><span class="line"><span class="keyword">ref</span>:_00D30LaY._5002E1Xq5G0:<span class="keyword">ref</span></span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">尊敬的商户 您好，</span><br><span class="line">感谢您的回复。</span><br><span class="line"></span><br><span class="line">是的，您只要是使用SDK集成并且按照示例的方法调用来创建支付，应该是不需要额外去处理token过期这个情况的，SDK内部封装的方法会自动判断，如果过期的话重新获取，所以请不用担心。</span><br><span class="line"></span><br><span class="line">期待您的回复，如果您还有其他产品集成或者交易方面的问题，欢迎随时来信与我们联系。</span><br><span class="line">祝您周末愉快~</span><br><span class="line">谢谢</span><br><span class="line"></span><br><span class="line">Castle</span><br><span class="line">PayPal 商家技术支持部</span><br><span class="line"></span><br><span class="line"><span class="built_in">ref</span>:<span class="module-access"><span class="module"><span class="identifier">_00D30LaY</span>.</span><span class="module"><span class="identifier">_5002E1Z2WX6</span>:</span></span><span class="built_in">ref</span></span><br></pre></td></tr></table></figure><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">尊敬的商户 您好，</span><br><span class="line">感谢您的回复。</span><br><span class="line"></span><br><span class="line">不好意思前面有些事回复晚了，这个<span class="string">apiContext对</span>象确实只会<span class="string">new一</span>次，但内部封装了一套逻辑是会自动调用在<span class="string">token过</span>期的时候调用<span class="string">API来</span>获取新的<span class="string">token的</span>，应该不需要您这边额外进行处理。</span><br><span class="line"></span><br><span class="line">如果您想要手动获取<span class="string">access-token的</span>话，可以直接按照这个乏力，直接调用<span class="string">v1/</span><span class="string">oauth2/</span><span class="string">token接</span>口：<span class="string">https:</span>//<span class="string">developer.</span><span class="string">paypal.</span><span class="string">com/</span><span class="string">docs/</span><span class="string">api/</span><span class="built_in">get-an-access-token-curl/</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">请问您现在遇到关于token的具体问题是什么呢？</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">期待您的回复，如果您还有其他产品集成或者交易方面的问题，欢迎随时来信与我们联系。</span></span><br><span class="line"><span class="built_in">谢谢</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">Castle</span></span><br><span class="line"><span class="built_in">PayPal</span> 商家技术支持部</span><br><span class="line"></span><br><span class="line"><span class="string">ref:_00D30LaY.</span><span class="string">_5002E1Z2WX6:ref</span></span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">尊敬的商户 您好，</span><br><span class="line">感谢您的回复。</span><br><span class="line"></span><br><span class="line">由于相关的SDK各个版本比较多，麻烦请确认一下您使用的是这个SDK：https://github.com/paypal/PayPal-Java-SDK 么？</span><br><span class="line"></span><br><span class="line">如果是的话，您可以参考这里：https://github.com/paypal/PayPal-Java-SDK/wiki/Making-First-<span class="keyword">Call</span>#instructions，第三步：</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="keyword">Create</span> an APIContext <span class="keyword">object</span> <span class="keyword">with</span> proper configurations. Make sure <span class="keyword">to</span> <span class="keyword">create</span> one <span class="keyword">for</span> <span class="keyword">each</span> request. Make a <span class="keyword">create</span> <span class="keyword">call</span> <span class="keyword">and</span> use the createdPayment <span class="keyword">object</span> <span class="keyword">to</span> <span class="keyword">get</span> the approval URL.</span><br><span class="line">try &#123;</span><br><span class="line">    APIContext apiContext = <span class="built_in">new</span> APIContext(clientId, clientSecret, "sandbox");</span><br><span class="line">    Payment createdPayment = payment.<span class="keyword">create</span>(apiContext);</span><br><span class="line">    // <span class="keyword">For</span> <span class="keyword">debug</span> purposes <span class="keyword">only</span>: <span class="keyword">System</span>.<span class="keyword">out</span>.println(createdPayment.toString());</span><br><span class="line">&#125; catch (PayPalRESTException e) &#123;</span><br><span class="line">    // Handle errors</span><br><span class="line">&#125; catch (<span class="keyword">Exception</span> ex) &#123;</span><br><span class="line">    // Handle errors</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">这里获取的apiContext 对象应该就是包含<span class="keyword">access</span>-token的，您可以试一下。</span><br><span class="line"></span><br><span class="line">期待您的回复，如果您还有其他产品集成或者交易方面的问题，欢迎随时来信与我们联系。</span><br><span class="line">谢谢</span><br><span class="line"></span><br><span class="line">Castle</span><br><span class="line">PayPal 商家技术支持部</span><br><span class="line"></span><br><span class="line"><span class="keyword">ref</span>:_00D30LaY._5002E1Z2WX6:<span class="keyword">ref</span></span><br></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">尊敬的商户 您好，</span><br><span class="line"></span><br><span class="line">感谢您联系PayPal商家技术支持，我是技术工程师Castle，很高兴能有机会帮助您。</span><br><span class="line"></span><br><span class="line">一般PayPal这边的REST API SDK都是有封装了获取token的方法的，但仅凭您提供的这个信息：</span><br><span class="line"></span><br><span class="line"><span class="params">&lt;dependency&gt;</span> <span class="params">&lt;groupId&gt;</span>com.paypal.sdk<span class="params">&lt;/groupId&gt;</span> <span class="params">&lt;artifactId&gt;</span>rest-api-sdk<span class="params">&lt;/artifactId&gt;</span> <span class="params">&lt;version&gt;</span><span class="number">1.4</span><span class="number">.2</span><span class="params">&lt;/version&gt;</span> <span class="params">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">我这边无法确定具体是哪个SDK，能否请您提供一下您使用的这个SDK的github地址，以便我确认一下源码？</span><br><span class="line"></span><br><span class="line">另外请求token的接口建议不要调用太过频繁，因为一个token的有效期至少有几个小时，在过期之前即使重复调用该接口获取到的也是同一个token，并且过于频繁的调用（比如一分钟内调用十几次）可能会导致PayPal的系统暂时block您的IP地址，所以建议等到一个token过期之后再调用接口获取新的，一般几个小时调用一次是没什么问题的。</span><br><span class="line"></span><br><span class="line">期待您的回复，如果您还有其他产品集成或者交易方面的问题，欢迎随时来信与我们联系。</span><br><span class="line"></span><br><span class="line">友情提醒，请注意如果您没有在该事件发起后的<span class="number">7</span>天之内回复我们，那么该事件将会被自动关闭。届时如果您还有其他问题也可以重新提交一个Case。</span><br><span class="line"></span><br><span class="line">感谢您的耐心和理解，祝您工作顺利生活愉快。</span><br><span class="line">谢谢</span><br><span class="line"></span><br><span class="line">Castle</span><br><span class="line">PayPal 商家技术支持部</span><br><span class="line"></span><br><span class="line"><span class="symbol">ref:</span>_00D30LaY._5002E1Z2WX6:ref</span><br></pre></td></tr></table></figure><h2 id="记录步骤"><a href="#记录步骤" class="headerlink" title="记录步骤"></a>记录步骤</h2><ul><li>浏览器【回车】：<a href="https://www.paypal.com/；就到了：https://www.paypal.com/c2/home界面" target="_blank" rel="noopener">https://www.paypal.com/；就到了：https://www.paypal.com/c2/home界面</a></li><li>点击右上方的【注册】按钮，就到了此界面：<a href="https://www.paypal.com/c2/webapps/mpp/account-selection" target="_blank" rel="noopener">https://www.paypal.com/c2/webapps/mpp/account-selection</a></li><li>选择【个人账户】，然后点击【下一步】</li><li>然后呢就还是该界面浏览器地址不变，标题栏（PayPal–安全快捷的收付款工具）个人账户，他要你选择一个类似身份选择的一个下拉框【选项有：1、线上购物者 2、个体卖家/自由职业者 3、以上都是 4、我不确定】，好我此处选择的是3以上都是，因为我只是想测试下而已。好此处选择好了点击【下一步】</li><li>然后跳到了这个界面：<a href="https://www.paypal.com/welcome/signup/#/name_address" target="_blank" rel="noopener">https://www.paypal.com/welcome/signup/#/name_address</a> 额就是让你填写下你的基本的个人信息，比如说身份证号码啊，姓甚名谁啊，联系方式啊，家住何方啊，年龄几何啊…. 然后呢把那个[激活One Touch]以及那个[我已阅读并同意PayPal的《用户协议》、《隐私政策》和《合理使用规则》。我有权添加以上输入的联系信息并了解PayPal可以通过电子邮件或邮寄信件与我联系]这两个单选框勾选上，最后点击按钮【同意并创建账户】，OK</li><li>然后我们就来到了此界面：<a href="https://www.paypal.com/welcome/signup/#/intent_selection" target="_blank" rel="noopener">https://www.paypal.com/welcome/signup/#/intent_selection</a> 他提示我们的账户已经创建了。他要我们添加信用卡，可惜啊可惜我没有信用卡，当然啦我是个小测试员也用不着用信用卡的地步啦，所以【开始购物】和【付款】我就都不选择啦，拉到底部，选择【不确定？添加卡以便日后使用】即可啦。点击它即可。</li><li>然后我们就来到了该界面：<a href="https://www.paypal.com/welcome/signup/#/add_card" target="_blank" rel="noopener">https://www.paypal.com/welcome/signup/#/add_card</a> 他还是十分强烈的希望我添加一下信用卡，可是我真的没有信用卡呗。我要是有我肯定为你服务几块钱，我数学不太好啊。当然啦，信用卡你不知道你可以【编辑】下账单地址也是OK的。好啦我们就不去关联这个信用卡啦，点击【我以后再执行此操作】即可。</li><li>我们就来到了已激活界面：<a href="https://www.paypal.com/welcome/signup/#/activation" target="_blank" rel="noopener">https://www.paypal.com/welcome/signup/#/activation</a>  activation这个不就是激活的意思吗？不过已经激活不是用那个actived?<br>activated 这个单词。标题【开始使用PayPal购物。】好啦，我们就不去购物啦，直奔主题而去，点击【前往您的账户】</li><li>到达账户界面：<a href="https://www.paypal.com/myaccount" target="_blank" rel="noopener">https://www.paypal.com/myaccount</a></li><li>此处建议，有钱的没钱的把蓝灯开一下：<a href="https://github.com/getlantern/lantern，因为paypal是国外的网站跨境，额反正就是需要翻墙，不要问再问就是不知道。你可以去站长之家看下这个paypal服务器分布在哪里，反正就是网速特慢，尤其是像我这种住乡下的人。" target="_blank" rel="noopener">https://github.com/getlantern/lantern，因为paypal是国外的网站跨境，额反正就是需要翻墙，不要问再问就是不知道。你可以去站长之家看下这个paypal服务器分布在哪里，反正就是网速特慢，尤其是像我这种住乡下的人。</a></li><li>打开子页面：<a href="https://developer.paypal.com/" target="_blank" rel="noopener">https://developer.paypal.com/</a> 开发者，点击右上角的【Log into Dashboard】登录进入控制台</li><li>登录好了的话，就会进入到 <a href="https://developer.paypal.com/developer/applications" target="_blank" rel="noopener">https://developer.paypal.com/developer/applications</a> 该页面，我已经受不了这垃圾网了。</li><li>每当网好了，我就宛如鸡犬升天了。</li><li>好，到了登录界面：<a href="https://www.paypal.com/signin?returnUri=https%3A%2F%2Fdeveloper.paypal.com%2Fdeveloper%2Fapplications" target="_blank" rel="noopener">https://www.paypal.com/signin?returnUri=https%3A%2F%2Fdeveloper.paypal.com%2Fdeveloper%2Fapplications</a></li><li>输入你的账号密码进行登录：<a href="mailto:198866436@qq.com">198866436@qq.com</a>/xxxxxxxxx</li><li>好啦登录成功之后，就又会跳转到：<a href="https://developer.paypal.com/developer/applications" target="_blank" rel="noopener">https://developer.paypal.com/developer/applications</a> 该界面来啦！</li><li>【My Apps &amp; Credentials】这个是标题，就跟支付宝一样，需要建一个属于自己的application</li><li>骚等，莫急慢慢来。sandbox即沙箱环境，live即生产环境，默认为sandbox环境，你要切换也可以的。我选择的是【sandbox】沙箱环境然后点击【Create App】,也就是创建一个application。他有一个默认的default app，我是用自己创建的。然后呢输入您的APP Name以及沙箱的卖家账号输入进去。随便搞一个邮箱即可的。这个邮箱就是用于在沙箱环境充当一个卖家的一个身份，就是别人付款你收钱的这样一个身份，明白了吧。好下面你会发现这个【Sandbox Business Account】没办法填写，而是只能够选择，所以呢我们现在再去返回回去，创建一下沙箱的卖家以及买家的账号，稍等。</li><li>你现在看到左侧有导航栏对吧，BASHBOARD就额你就认为他是控制台的意思好了。然后第二个菜单栏SANDBOX即沙箱，好那么我们就点击【SANDBOX】下面的第一个子菜单【Accounts】账号，点击这个【Accounts】</li><li>今天没时间，之后有时间再来完成这个流程的文档，我今天得先去测试回调流程发货，过几天就要测试了byebye</li></ul><p>今天遇到了一个问题<br>No tracked branch configured for branch developing or the branch doesn’t exist. To make your branch track a remote branch call, for example, git branch –set-upstream-to=origin/developing developing</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">oft Windows [版本 <span class="number">10.0</span>.<span class="number">17763.1039</span>]</span><br><span class="line">(<span class="keyword">c</span>) <span class="number">2018</span> Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;</span><br><span class="line">                       git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=origin/developing developing</span><br><span class="line">error: the requested upstream branch <span class="string">'origin/developing'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=origin/developing developing</span><br><span class="line">error: the requested upstream branch <span class="string">'origin/developing'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span> origin</span><br><span class="line">error: the requested upstream branch <span class="string">'origin'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span> origin</span><br><span class="line">error: the requested upstream branch <span class="string">'origin'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span> origin/developing</span><br><span class="line">error: the requested upstream branch <span class="string">'origin/developing'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=origin/developing developing</span><br><span class="line">error: the requested upstream branch <span class="string">'origin/developing'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git fetch</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git push -<span class="keyword">u</span></span><br><span class="line">fata<span class="variable">l:</span> No configured push destination.</span><br><span class="line">Either specify the URL from the <span class="keyword">command</span>-<span class="built_in">line</span> <span class="built_in">or</span> configure <span class="keyword">a</span> remote repository using</span><br><span class="line"></span><br><span class="line">    git remote <span class="built_in">add</span> <span class="symbol">&lt;name&gt;</span> <span class="symbol">&lt;url&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">and</span> then push using the remote name</span><br><span class="line"></span><br><span class="line">    git push <span class="symbol">&lt;name&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line"><span class="string">'hint:'</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line"><span class="string">'hint:'</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line"><span class="string">'hint:'</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=origin/developing developing</span><br><span class="line">error: the requested upstream branch <span class="string">'origin/developing'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span></span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span></span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git fetch</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git fetch</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span> origin/developing developing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;</span><br><span class="line">F:\Project\Lingo\lingo&gt;</span><br><span class="line">F:\Project\Lingo\lingo&gt;</span><br><span class="line">F:\Project\Lingo\lingo&gt;</span><br><span class="line">F:\Project\Lingo\lingo&gt;</span><br><span class="line">F:\Project\Lingo\lingo&gt;</span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=origin/developing developing</span><br><span class="line">error: the requested upstream branch <span class="string">'origin/developing'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git fetch</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git push -<span class="keyword">u</span> developing</span><br><span class="line">fata<span class="variable">l:</span> The current branch developing <span class="built_in">has</span> <span class="keyword">no</span> upstream branch.</span><br><span class="line">To push the current branch <span class="built_in">and</span> <span class="keyword">set</span> the remote <span class="keyword">as</span> upstream, use</span><br><span class="line"></span><br><span class="line">    git push --<span class="keyword">set</span>-upstream developing developing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git push --<span class="keyword">set</span>-upstream developing developing</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'/c/Users/ASUS/.ssh/id_rsa'</span>:</span><br><span class="line">Everything <span class="keyword">up</span>-<span class="keyword">to</span>-date</span><br><span class="line">Branch <span class="string">'developing'</span> <span class="keyword">set</span> <span class="keyword">up</span> <span class="keyword">to</span> track remote branch <span class="string">'developing'</span> from <span class="string">'developing'</span>.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=origin/developing developing</span><br><span class="line">error: the requested upstream branch <span class="string">'origin/developing'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;^A</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 领赫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领赫 </tag>
            
            <tag> 支付 </tag>
            
            <tag> PayPal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自我梳理一下成品仓库存发货</title>
      <link href="/2020/02/18/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E8%87%AA%E6%88%91%E6%A2%B3%E7%90%86%E4%B8%80%E4%B8%8B%E6%88%90%E5%93%81%E4%BB%93%E5%BA%93%E5%AD%98%E5%8F%91%E8%B4%A7/"/>
      <url>/2020/02/18/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E8%87%AA%E6%88%91%E6%A2%B3%E7%90%86%E4%B8%80%E4%B8%8B%E6%88%90%E5%93%81%E4%BB%93%E5%BA%93%E5%AD%98%E5%8F%91%E8%B4%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="梳理过程"><a href="#梳理过程" class="headerlink" title="梳理过程"></a>梳理过程</h2><p>我就觉得自己是个沙雕，没有原因。</p><p>新增了之后下面我们 来减一下库存然后呢新增下库存的出库记录<br>david说一个一个先进先出发货…….我的妈怎么一个先进先出<br>现在已知的是 产品的箱数也就是发货箱数，通过productAttr的packingNum*这个发货箱数=发货产品数<br>好，那么现在从t_stock_product当中取出该产品 按道理，其实应该上送他取自的是成品库存当中的哪个产品的，不然我不好搞呗<br>现在请注意是从成品仓库存当中进行发货，我这个傻逼我在做什么。。。。本来就是从成品仓库存当中取货出来，我还在想去哪里获得这个产品id????卧槽<br>我要疯了</p><p>好通过看原型图，我明白了，成品仓库存发货</p><ol><li>首先，因为是成品仓库存发货，我可以直接拿到t_stock_product主键</li><li>现在前端上送了发货单bean参数上来了，那么我的妈，现在是每一个t_stock_product记录都可以进行发货，那么里面的那个产品的选择意思是可以选择其他的产品还是说只能是该库存产品嘞。我觉得，管他嘞，就，按照不同的处理，反正他要给我上送，我觉得这个地方额，我等会问下david</li><li>前端上送该t_stock_product当中也就是这个产品的box_num发货箱数，然后我在后台嘞就可以得到他的发货产品数，t_product_attr.packing_num*box_num=quantity</li><li>好得到这个发货箱数以及发货的产品数量之后，那么这个t_stock_product对应的需要减去一下box_num箱数，嗯，还有就是产品数量，完美，就是不知道对不对</li><li>好现在t_stock_product处理并更新了，然后我们要处理下，先进先出的这样一个逻辑，那么就是t_stock_box_number,就是这个产品的库存有多少数量那么，他在t_stock_box_number当中就有多少数量，那么我们现在要做的就是额，stock_no为当前该库存id的并且status!=1,然后order by id asc，升序排列下，就这样。更新t_stock_box_number当中的数量为前端发货的产品数量，也就是，box_num*packing_num=quantity,也就是quantity这个数量。ok，又被我知道了。</li><li>好接近尾声，我们来处理下出入库记录。也就是t_out_put_repo_recored，状态肯定是出库啦，然后吧稍等我看下原型图。这个出库箱数也就是box_num,入库箱数为空，入库产品数量为空，结余箱数，额也就是原来的t_stock_product当中的box_num减去前端上送的这个box_num，这里要做下数据有效性处理。以及结余产品数量，也就是原来的t_stock_product当中的quantity减去前端上送的box_num*product_attr.packing_num=quantity这个数，也需要做下数据有效性处理。好啦就这样。</li></ol><p>日常看原型图自闭。香菇。。。<br>今天让何玉洁日常催我更新接口。我实在太懒了，就是吧我已经把闹钟调好就放在那里了，然后吧我，我真是个人才，我起床了，然后关了闹钟把其他的闹钟也给关了，然后吧，我倒头就继续睡去了。我本来壮志满满打算好看虚拟机。一想到这个虚拟机我就脑壳痛。<br>噫吁嚱，危乎难哉！我想好了，每天起床要是还这样就给自己两巴掌。就这样。</p><p>最后还有件事情，就是千万记得加锁，千事万事都要记得要事加把锁。</p><p>今天发现了两首新歌，还可以；<br>推荐下，骚等莫急我发下163的链接：</p><ul><li><a href="http://music.163.com/song/media/outer/url?id=503426999.mp3" target="_blank" rel="noopener">http://music.163.com/song/media/outer/url?id=503426999.mp3</a></li><li><a href="http://music.163.com/song/media/outer/url?id=1386737147.mp3" target="_blank" rel="noopener">http://music.163.com/song/media/outer/url?id=1386737147.mp3</a></li></ul><p>刚刚呼唤他人，估计是掉线了。</p><p>要不我再看下其他的逻辑。看下原型图。<br>我家的这个网我真的很想吐槽。<br>哦哦对了这个账单发送啊，对这个逻辑我得再去看看。<br>找个时间贴下paypal以及sendgrid</p>]]></content>
      
      
      <categories>
          
          <category> 领赫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领赫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信666工作交接</title>
      <link href="/2020/02/17/%E3%80%90%E4%BF%A1666%E3%80%91/%E5%B7%A5%E4%BD%9C%E4%BA%A4%E6%8E%A5/"/>
      <url>/2020/02/17/%E3%80%90%E4%BF%A1666%E3%80%91/%E5%B7%A5%E4%BD%9C%E4%BA%A4%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="情况"><a href="#情况" class="headerlink" title="情况"></a>情况</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">二进哥：</span><br><span class="line">你们进件有问题，渠道费率不对</span><br><span class="line">这个问题你们不解决还会陆续出现</span><br><span class="line">就是费率的问题</span><br><span class="line">商户是<span class="number">0.65</span>，后面又有个进件是<span class="number">0.75</span></span><br><span class="line">商户本来是<span class="number">0.65</span>，但是后面用另一张卡在同一个渠道号进件了<span class="number">0.75</span>，渠道就会按照最后一次进件时的费率扣费</span><br><span class="line">商户在系统上是<span class="number">0.65</span>，但是渠道是<span class="number">0.75</span>，已经是扣了<span class="number">0.75</span>额手续费</span><br></pre></td></tr></table></figure><blockquote><p>用户消费成功的交易记录</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12069588</span>iOS202002162051153743cps202002165904242<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span> <span class="number">20</span>:<span class="number">51</span>:<span class="number">15</span><span class="number">2020</span><span class="number">-02</span><span class="number">-16</span> <span class="number">20</span>:<span class="number">51</span>:<span class="number">18</span><span class="number">20200216</span><span class="number">78</span> - 极速收款张海<span class="number">-10006384</span>P0000002-卡帮<span class="number">70930010</span>-畅捷新无卡(<span class="number">7093</span>)C<span class="number">3</span>,<span class="number">116.00</span><span class="number">22.26</span><span class="number">3090.63</span>交易成功<span class="number">15273677367</span>交易成功</span><br></pre></td></tr></table></figure><blockquote><p>渠道记录</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cps202002165904242<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span> <span class="number">20</span>:<span class="number">51</span>:<span class="number">16</span><span class="number">20200216</span>银联快捷<span class="number">000001001845896</span>-张海P0000001- 平安汇-信管家<span class="number">3</span>,<span class="number">116.00</span><span class="number">20.26</span><span class="number">3095.74</span>交易成功交易成功补单 明细</span><br></pre></td></tr></table></figure><p>这个是消费记录，从中看得到用户在该渠道上送的费率是3116<em>0.0065=20.254；好，那么易支付渠道系统这么计算费率的，也就是第三位小数，不管数额大小，直接进位。也就是20.26.这个也就是单独的交易金额</em>费率；还没有加每笔的这个手续费的钱；因为这个用户的费率是0.65+2，所以呢也就是（交易金额*费率0.0065）+2=22.26；这个也就是自己系统当中算出来的这个手续费，第三位不关乎数额大小直接进位；那么这个22.26也就是算出来的手续费，然后（交易金额-手续费）=商户结算金额。这个是本系统记录。</p><p>渠道系统的记录；3116*0.0065=20.254,由于进位方式即第三位小数不管数额大小直接进位的处理方式，手续费=20.26；那么交易金额（3116）-手续费（20.26）=商户结算金额（3095.74），此时的消费是按照0.65+2进行处理的。</p><p>也就是这两块的手续费在渠道手里。</p><p>此时是正常的。</p><p>怪就怪在消费结算的时候，爆粗口，另外一张卡也在这个渠道进件了。然后吧我们这个奇葩系统吧就在这个渠道修改了费率。应该是高费率的银行（比如光大、交通、浦发、招商这种高级银行）然后费率就变成了高费率进行上送到该渠道。<br>然后呢这个渠道，这个渠道叫做畅捷。他的规则是这个样子的，也就是二进哥所说：渠道就会按照最后一次进件时的费率扣费。这下好了。原本一个低费率的消费，变成了要高费率的还款。亏了。也就是说，畅捷该渠道，不是以每一次的消费费率来进行计算他的，不是还款，是结算的费率，而是以最新修改的费率为基准进行计算他的结算费率。<br>二进哥的意思是，以最后一次修改的费率为准进行计算所有的这个结算费率，也就是说，我在本系统进行上送交易的时候，交易金额，需要是我能够代付出来的金额，也就是真正商户能够结算出来的金额，因为这个费率重新上送了，此时在渠道真正的结算金额就变成了，交易金额（3116）<em>费率（0.0075）=手续费（23.37）+每笔（2元）=手续费（25.37）；<br>也就是交易金额（3116）</em>手续费（25.37）=商户结算金额（3090.63），这个金额也就是我们本系统在该用户进行消费的交易记录时，修改他的商户结算金额为3090.63即可。<br>然后发起结算，结算的交易记录即为交易金额为消费交易记录的商户结算金额，商户结算金额也为消费时的商户结算金额。</p><blockquote><p>本系统结算记录</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12070999</span>O202002171810078DsQdf202002172108952<span class="number">2020</span><span class="number">-02</span><span class="number">-17</span> <span class="number">18</span>:<span class="number">10</span>:<span class="number">09</span><span class="number">2020</span><span class="number">-02</span><span class="number">-17</span> <span class="number">18</span>:<span class="number">10</span>:<span class="number">30</span><span class="number">20200217</span><span class="number">79</span> - 极速收款结算张海<span class="number">-10006384</span>P0000002-卡帮<span class="number">70930010</span>-畅捷新无卡(<span class="number">7093</span>)C<span class="number">3</span>,<span class="number">090.63</span><span class="number">0.00</span><span class="number">3090.63</span>交易成功<span class="number">15273677367</span>交易成功补单 明细</span><br></pre></td></tr></table></figure><blockquote><p>渠道结算记录</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df202002172108952<span class="number">2020</span><span class="number">-02</span><span class="number">-17</span> <span class="number">18</span>:<span class="number">10</span>:<span class="number">10</span><span class="number">20200217</span>银联快捷T1结算<span class="number">000001001845896</span>-张海P0000001- 平安汇-信管家<span class="number">3</span>,<span class="number">090.63</span><span class="number">2.00</span><span class="number">3092.63</span><span class="number">1</span>交易成功<span class="number">0000</span>交易成功明细</span><br></pre></td></tr></table></figure><p>然后此时七哥又说了，每次消费前呢，都进行修改一次费率。<br>我的妈。</p><p>希望以后的每天的状态</p><ul><li>windows+r</li><li>cmd</li><li>f:</li><li>cd Hexo</li><li>cd fsnBlog</li><li>hexo clean</li><li>hexo generate</li><li>hexo deploy</li></ul>]]></content>
      
      
      <categories>
          
          <category> 信666工作交接 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信666工作交接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心情</title>
      <link href="/2020/02/15/%E3%80%90%E5%BF%83%E6%83%85%E3%80%91/%E5%BF%83%E6%83%852/"/>
      <url>/2020/02/15/%E3%80%90%E5%BF%83%E6%83%85%E3%80%91/%E5%BF%83%E6%83%852/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Hey, password is required here." /><label>Hey, password is required here.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="e15458c1413da596b068016b7dad64a34c20a8ff50737245763ac9d4b7826401">c34c053c9e71f6d22ae7e6ea020ea24784845fffaef239a17a9104d59d5c62e55921fd655acc35e4cc1509a36b159febd6dc3f7b1e59633e97162e4f585d53a1310b65a4bb61520a4e806566fbc81caca217b0b878e442d699710205367c7d63a97a7bcdad224f1ce431175fb3f44f49c705728eb113c5409a1f703727858b8ec6ba563f65c4f7889c70c7bf6e5cbf7d1b070f16ce4e5791af310bd94a7eefaa2c5903e315fe1aee12d8486c6594b65a59d47722c5adcaa2882f09f557dd21f474d2b1fcb3237c8a2f4d9eec6adcf8dc1b44309683263cb15380bbc7ca82fadec1a6633eb71783c9f0ec7d389c66aff585536fe34e4dc6346887a8642727517b055d9da2bb0809f1fec9c8b5273393b96a8388c72192885cdd5a7309abe69b4f787e9d3d841e0984716f532c3212bb9439d2af1029fdf83d2ddfa38a73d2a6b12ff84c227686cda9f543054e53a71443725a4e4da493a304a13b6a6cc668830312f2bf4185bbc5673b93b21a1f27ebacc81d5d5a65469e4ef704fa3559fe36f990e5064f8a863e3337d9e14d6948ba245d6e0b8f6e19d5419500c6af49a2bfe60d6144bf5f21aacabcfdd56528e9ee1214f945b6d11faad842420d52ac0f49919382de8d4572d5b9da0279b622eaee3b9f48cc35071b652f458995c731fbe1c89a45c5a4cb4087ea041a80b304cbd3cb1efa1fd8861f0fa45dd772f510e784ef2e7ad58ac9bd8f1d4d0307536f9a388e9e7973a550fa9ff1ee69ca38ba2f8f9db37724d1dea207bcf6780bac024a03ef306ca75c794f60d902d954ee9da59ce1a0f0be1f971f13a3ccc9a2442ed6d890758fb769386188a235d10bf5e157ce158479e558a64c354af1d879423855d0fce5ed0ff4d8366a3e702871f98b33544060f92c8bbadce16f73645e72f34bc976dc3ec7a64fb618180f492c7bd77fcd616b4b13ea2f8f5a506a51c73f7109714793b5b6c5fe63dbea4f691d86af839c6998582700a65181e11902a3c2300a720fcb9b67531abc545c3461c04ebf18f037bb3fa02abcb32c3adc84fdfe112102bab798fe46813ed01dae319611d56c58327e60394eb80d04c11abb7c643b98ea02137bb105686e447a24a9f7bedd4a06afc2a4b94b4e4b6fb0cd2be638b6a436553e1b3b1ef902d0c517937dc538764753</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 心情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心情</title>
      <link href="/2020/02/15/%E3%80%90%E5%BF%83%E6%83%85%E3%80%91/%E5%BF%83%E6%83%853/"/>
      <url>/2020/02/15/%E3%80%90%E5%BF%83%E6%83%85%E3%80%91/%E5%BF%83%E6%83%853/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Hey, password is required here." /><label>Hey, password is required here.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="9d0ac9e505d5d520847f0adfb84a4d86e037728f972eaea6c3ddf06f109487f7">f3a30fa1650751270770a2daf627a562e879711d975c1492d9865c05f15414b1</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 心情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心情</title>
      <link href="/2020/02/12/%E3%80%90%E5%BF%83%E6%83%85%E3%80%91/%E5%BF%83%E6%83%85/"/>
      <url>/2020/02/12/%E3%80%90%E5%BF%83%E6%83%85%E3%80%91/%E5%BF%83%E6%83%85/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please.[哦，这是无效的密码。请检查并重试。]" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.[哦，这些解密的内容无法验证，但是您仍然可以看一下。]"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Hey, password is required here.[嘿，这里需要密码。]" /><label>Hey, password is required here.[嘿，这里需要密码。]</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="0df9f7458118c74b98d27a8f00b7fa9d7314de2f8dd04bfd5ebb35e83673e839">d29c7427e79f166bdd9a2eecd30126a4afbb659fffca77667544da19048a6f0fcdfd1131e3b3f6a318e9aeb0ae17491aa014fcc31fca74bb1e321e9453490b52b5ce358f8a90cae5103bb008bed208f4d5037a9ba8621e83535341e6f22d19c8eb27a24caec0b5dcd9fb9ed96e067861220382dcfc688f5bb10b80ba93d9a3cd2efbe4eb619124cc075d49c05901af10642a433634245475e98a09141fd1381c390e688f48661f25d4c6d8b055bd5302004ff1bb7bcfc7af12031fa479a0c0643770425c8719fbc0e5c8f8d940cb04cf2c17d259524f24156578e5e02d32cd59a271e880b7029860c15004e3cfc836cb682f6ce26039c94e1788b32d420d588ba2bb835f77b0ce2b73e8094b52363e05f31a0f70ad100820a067a36fb8b4951dac0d9d8f142c47f8fcc0edca5e1c696243fdcb5355aa0b4faf83e28e42312ff72d5412c4df0990b95b7e5f1b29f564b0b72aa6d8c3352e4990514657c5f3711f8923d335a445544e73c2947dbe0164a664ded0b28e0446de83b295fa5ac47991c9814363cc40c16ee9b1a15bb902eb6a421779e750c667aa76a324442dd6a778c67b2465dea20d7685bf53cf3c2755d70164575c7826f264be965f42185ca8639c412426bc4716e69e794eca0d827b8c3bac956a38323c8f3174dacc91f62a35733e8b8e39f9f3cc7213efe9b42e40a09a2363444381d19a58f00d53362d8b329d4a8c4eb92b60189d8ddb0f2d9c244d45c6fb8a2249d8fbaf342dce19eab97f2b8ff333274af0dc6985835dfd9d5b5a64a3a05e3ca04156876225ffb909a333a2e09866398fed36a799f65989f67d2971d1f28571d5f881d39fff2dab2ee5a4b3e856136e2cbffa94f7636c63744ad7d05f5468ab6ddd629fed0a6556d2f37be066ef156c72d674790ec346153d96638dfe2c8355cabb6a552fbf43974773a99ddd1bac3ac33299b110b34be679d88249a9aad4a3b79571577caf6eabc6f322c8cc449a6cd4271c90cc20e7012ba64b11d26d7a522316cfa400ab9960245887a86f708742ebf98a6fa8e08c5be65e64e06db8f5fde3a723326cfdbe2ae8a613cbabc3b16c37716640859877975c5237c8f94b80a1ed4bb82454f1329e42f213e891d085234429d2851cffcddd55cadb941be892d108a8ff5f17118638c91840525ccb954253a158019330531ab467900165e427dc4f3be6ed12c33109e17ac2638cffc966d7a629ac2bf448b6a63ea7a955c9dc39a94045e0705d8db0829bbaf0b28aac4ffc8f4c23b27b4f5c78ec3a80f31c1326db92a6ca0d0d5cd4a75c9a6ab6b47858e34084b3a2847b5d0548f0fe6b659c415be33264ec129b3a3be818</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 心情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号</title>
      <link href="/2020/02/11/%E3%80%90%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E3%80%91/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/02/11/%E3%80%90%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E3%80%91/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>有道： <a href="http://note.youdao.com/noteshare?id=808f14124df9ed7797ac983b8a794f2b" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=808f14124df9ed7797ac983b8a794f2b</a><br>微信公众平台-测试号<br>沙箱环境登录管理平台：<br>配置信息：<br><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index</a><br>appID ： wx7b787880dd748935<br>appsecret :    31a353cb37d7d700b64439b5f514ff95</p><p>该url当中的域名使用的是natapp软件</p><p>电脑-属性-配置natapp.exe的环境变量<br>Win+R调起cmd–输入命令：natapp -authtoken 秘钥<br>参考博客进行配置内网穿透：<a href="https://blog.csdn.net/weixin_39927967/article/details/80552535" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39927967/article/details/80552535</a><br>该url当中除去域名为 springboot当中的接口<br>URL  ：  <a href="http://fainuk.natappfree.cc/apiservice/weChat/get/gzh/openid" target="_blank" rel="noopener">http://fainuk.natappfree.cc/apiservice/weChat/get/gzh/openid</a><br>接口内容具体如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"apiservice/weChat"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"get/gzh/openid"</span>)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String GetGZHOpenid(HttpServletRequest request,</span><br><span class="line">                           <span class="meta">@RequestParam(required = false)</span> String echostr,</span><br><span class="line">                           <span class="meta">@RequestParam(required = false)</span> String signature,</span><br><span class="line">                           <span class="meta">@RequestParam(required = false)</span> String timestamp,</span><br><span class="line">                           <span class="meta">@RequestParam(required =false)</span> String nonce) throws IOException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//只需要把微信请求的 echostr, 返回给微信就可以了</span></span><br><span class="line">        logger.info(<span class="string">"测试来过==================="</span> + echostr);</span><br><span class="line">        logger.info(<span class="string">"测试来过==================="</span> + signature);</span><br><span class="line">        logger.info(<span class="string">"测试来过==================="</span> + timestamp);</span><br><span class="line">        logger.info(<span class="string">"测试来过==================="</span> + nonce);</span><br><span class="line">        <span class="keyword">return</span> echostr;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.info(<span class="string">"测试微信公众号的接口配置信息发生异常："</span>, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"错误！！！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如需要获取openId，则访问路径<br>测试公众号静默授权地址更换参数<br>APPID进行相对应参数的替换<br>redirectUrl为回调地址，需要进行urlEncode编码<br>具体参考博客：<a href="https://blog.csdn.net/baidu_28997655/article/details/81459134" target="_blank" rel="noopener">https://blog.csdn.net/baidu_28997655/article/details/81459134</a><br>http%3a%2f%2ffainuk.natappfree.cc%2fapiservice%2fweChat%2fget%2fgzh%2ftest<br>springboot当中的接口，即获取openId的接口，以下url不仅可以获取openi还可获取access_token；但是需要注意的是此access_token无法用于获取用户信息<br><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx7b787880dd748935&amp;redirect_uri=http%3a%2f%2ffainuk.natappfree.cc%2fapiservice%2fweChat%2fget%2fgzh%2ftest&amp;response_type=code&amp;scope=snsapi_base&amp;state=STATE#wechat_redirect" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx7b787880dd748935&amp;redirect_uri=http%3a%2f%2ffainuk.natappfree.cc%2fapiservice%2fweChat%2fget%2fgzh%2ftest&amp;response_type=code&amp;scope=snsapi_base&amp;state=STATE#wechat_redirect</a><br>访问地址进行urlEncode:<a href="http://tool.chinaz.com/tools/urlencode.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/tools/urlencode.aspx</a><br>接口代码（此处拿该access_token来获取用户信息显然是无法获取得到的）：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping("get/gzh/test")</span><br><span class="line">@ResponseBody</span><br><span class="line"><span class="built_in">public</span> String test(HttpServletRequest request) throws IOException &#123;</span><br><span class="line">    logger.<span class="keyword">info</span>("test-------------");</span><br><span class="line">    try &#123;</span><br><span class="line">        String code =  request.getParameter("code");//request.getParameter("code");</span><br><span class="line">        logger.<span class="keyword">info</span>("code打印："+code);</span><br><span class="line">        <span class="keyword">if</span> (code != <span class="keyword">null</span>) &#123;</span><br><span class="line">            //获取openid和access_token的连接</span><br><span class="line">            String getOpenIdUrl = "https://api.weixin.qq.com/sns/oauth2/access_token?appid="+"wx7b787880dd748935"+"&amp;secret="+"31a353cb37d7d700b64439b5f514ff95"+"&amp;code=CODE&amp;grant_type=authorization_code";</span><br><span class="line">            //获取返回的code</span><br><span class="line">            String requestUrl = getOpenIdUrl.replace("CODE", code);</span><br><span class="line">            HttpClient httpClient = <span class="built_in">new</span> DefaultHttpClient();</span><br><span class="line">            HttpGet httpGet = <span class="built_in">new</span> HttpGet(requestUrl);</span><br><span class="line">            ResponseHandler&lt;String&gt; responseHandler = <span class="built_in">new</span> BasicResponseHandler();</span><br><span class="line">            //向微信发送请求并获取response</span><br><span class="line">            String response = httpClient.<span class="keyword">execute</span>(httpGet,responseHandler);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("=========================获取token===================");</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(response);</span><br><span class="line">            JsonParser parser = <span class="built_in">new</span> JsonParser();</span><br><span class="line">            JsonObject jsonObject = (JsonObject) <span class="keyword">parser</span>.parse(response);</span><br><span class="line">            String access_token = jsonObject.<span class="keyword">get</span>("access_token").getAsString();</span><br><span class="line">            String openId = jsonObject.<span class="keyword">get</span>("openid").getAsString();</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("=======================用户access_token==============");</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(access_token);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(openId);</span><br><span class="line">            //获取用户基本信息的连接</span><br><span class="line">            String getUserInfo = "https://api.weixin.qq.com/cgi-bin/user/info?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN";</span><br><span class="line">            String userInfoUrl = getUserInfo.replace("ACCESS_TOKEN", access_token).replace("OPENID", openId);</span><br><span class="line">            HttpGet httpGetUserInfo = <span class="built_in">new</span> HttpGet(userInfoUrl);</span><br><span class="line">            String userInfo = httpClient.<span class="keyword">execute</span>(httpGetUserInfo,responseHandler);</span><br><span class="line">            //微信那边采用的编码方式为ISO8859<span class="number">-1</span>所以需要转化</span><br><span class="line">            String <span class="type">json</span> = <span class="built_in">new</span> String(userInfo.getBytes("ISO-8859-1"),"UTF-8");</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("====================userInfo==============================");</span><br><span class="line">            JsonObject jsonObject1 = (JsonObject) <span class="keyword">parser</span>.parse(<span class="type">json</span>);</span><br><span class="line">            String nickname = jsonObject1.<span class="keyword">get</span>("nickname").getAsString();</span><br><span class="line">            String city = jsonObject1.<span class="keyword">get</span>("city").getAsString();</span><br><span class="line">            String province = jsonObject1.<span class="keyword">get</span>("province").getAsString();</span><br><span class="line">            String country = jsonObject1.<span class="keyword">get</span>("country").getAsString();</span><br><span class="line">            String headimgurl = jsonObject1.<span class="keyword">get</span>("headimgurl").getAsString();</span><br><span class="line">            //性别  <span class="number">1</span> 男  <span class="number">2</span> 女  <span class="number">0</span> 未知</span><br><span class="line">            <span class="type">Integer</span> sex = jsonObject1.<span class="keyword">get</span>("sex").getAsInt();</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("昵称"+nickname);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("城市"+city);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("省"+province);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("国家"+country);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("头像"+headimgurl);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("性别"+sex);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(userInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> "ok";</span><br><span class="line">    &#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">        logger.<span class="keyword">info</span>("测试微信公众号的接口配置信息发生异常：", e);</span><br><span class="line">        <span class="keyword">return</span> "错误！！！";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要获取用户信息接口则可以看文档或者百度<br>测试接口开发工具也有<br>测试接口开发工具链接：<a href="https://mp.weixin.qq.com/debug/" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/</a><br>当中的<br><a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx7b787880dd748935&amp;secret=31a353cb37d7d700b64439b5f514ff95" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx7b787880dd748935&amp;secret=31a353cb37d7d700b64439b5f514ff95</a><br>所返回的access_token才能用于获取用户信息</p><ul><li>请一定要仔细：<a href="https://blog.csdn.net/mmd1234520/article/details/80798344" target="_blank" rel="noopener">https://blog.csdn.net/mmd1234520/article/details/80798344</a></li></ul><p>API文档：<a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html</a><br>要么就百度</p><p>要注意一下微信的接口，不同的接口不同的用处</p><p>通过在测试的微信公众号当中进行访问静默授权地址<br>然后redirectUrl当中该接口就会有反应，微信服务器就会给以你一个附带的CODE给你<br>然后你就可以 用这个CODE来进行访问链接<br>“<a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;+&quot;wx7b787880dd748935&quot;+&quot;&amp;secret=&quot;+&quot;31a353cb37d7d700b64439b5f514ff95&quot;+&quot;&amp;code=CODE&amp;grant_type=authorization_code&quot;" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;+&quot;wx7b787880dd748935&quot;+&quot;&amp;secret=&quot;+&quot;31a353cb37d7d700b64439b5f514ff95&quot;+&quot;&amp;code=CODE&amp;grant_type=authorization_code&quot;</a>;</p><p>替换一下当中的参数<br>进行访问该链接静默授权，就可以获取得到用户的openId了</p><p>如果想要获取用户的信息，则需要访问接口，替换一下参数，拿取得到此链接返回的access_token<br><a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx7b787880dd748935&amp;secret=31a353cb37d7d700b64439b5f514ff95" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx7b787880dd748935&amp;secret=31a353cb37d7d700b64439b5f514ff95</a></p><p>然后通过此链接返回的access_token以及链接<br>String getOpenIdUrl = “<a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;+&quot;wx7b787880dd748935&quot;+&quot;&amp;secret=&quot;+&quot;31a353cb37d7d700b64439b5f514ff95&quot;+&quot;&amp;code=CODE&amp;grant_type=authorization_code&quot;" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;+&quot;wx7b787880dd748935&quot;+&quot;&amp;secret=&quot;+&quot;31a353cb37d7d700b64439b5f514ff95&quot;+&quot;&amp;code=CODE&amp;grant_type=authorization_code&quot;</a>;</p><p>返回的openid一起访问<br>该链接<br><a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx7b787880dd748935&amp;secret=31a353cb37d7d700b64439b5f514ff95" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx7b787880dd748935&amp;secret=31a353cb37d7d700b64439b5f514ff95</a></p><p>就可以获取得到用户基本信息了</p><p>还是得多学着看官方API文档，以及百度<br>API文档会看也是很厉害</p><p>测试微信付款到零钱<br>替换一下参数即可上路<br>参考博客链接：<br><a href="https://www.cnblogs.com/angryjj/p/11252254.html" target="_blank" rel="noopener">https://www.cnblogs.com/angryjj/p/11252254.html</a><br>API文档：<br><a href="https://pay.weixin.qq.com/wiki/doc/api/tools/mch_pay.php?chapter=24_1&amp;index=1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/tools/mch_pay.php?chapter=24_1&amp;index=1</a></p><p>还有就是.nb3数据库文件恢复数据库，这个不会…<br>于是我就发个navicat了<br>参考博客：<a href="https://blog.csdn.net/wqq1027/article/details/100769763" target="_blank" rel="noopener">https://blog.csdn.net/wqq1027/article/details/100769763</a><br>于是知道了Schema就是数据库的意思</p><p><a href="https://mail.qq.com/cgi-bin/frame_html?sid=w8_vGU3Hyw-ngi9y&amp;t=newwin_frame&amp;url=%2fcgi-bin%2freadmail%3fmailid%3dZC3205-xcmTiNxWJuIKvhNOedPoT9c%26need_textcontent%3dtrue%26s%3dnotify%26newwin%3Dtrue%26t%3dreadmail&amp;r=42de175966e02fd718fee32c16caa2b1" target="_blank" rel="noopener">https://mail.qq.com/cgi-bin/frame_html?sid=w8_vGU3Hyw-ngi9y&amp;t=newwin_frame&amp;url=%2fcgi-bin%2freadmail%3fmailid%3dZC3205-xcmTiNxWJuIKvhNOedPoT9c%26need_textcontent%3dtrue%26s%3dnotify%26newwin%3Dtrue%26t%3dreadmail&amp;r=42de175966e02fd718fee32c16caa2b1</a></p>]]></content>
      
      
      <categories>
          
          <category> 微信公众号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型图-发货</title>
      <link href="/2020/02/09/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E5%8E%9F%E5%9E%8B%E5%9B%BE-%E5%8F%91%E8%B4%A7/"/>
      <url>/2020/02/09/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E5%8E%9F%E5%9E%8B%E5%9B%BE-%E5%8F%91%E8%B4%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="捋一捋生成发货单流程业务逻辑"><a href="#捋一捋生成发货单流程业务逻辑" class="headerlink" title="捋一捋生成发货单流程业务逻辑"></a>捋一捋生成发货单流程业务逻辑</h2><p>努力看下原型图</p><p>客户操作通知发货，自动生成发货单<br>这个流程的业务逻辑</p><ul><li><p>中台 — 直发提货列表/直发提货详情页/通知发货</p><pre><code>操作：状态：操作待接受报价更新---&gt;接收报价待通知发货---&gt;通知发货取消提货操作在安排提货（等待到货状态）之前存在，之后就不能取消提货了</code></pre></li><li><p>中台 — 我的库存-成品仓库存/批量发货、发货</p></li><li><p>中台 — 我的库存-Prep仓库存/无发货功能<br>（直发提货-&gt;直发库存/Prep提货-&gt;Prep库存/Prep单-&gt;成品库存）</p></li></ul><p>david:</p><blockquote><p>前端发货有两种方式</p></blockquote><ul><li><p>1、直接给你直发提货单ID， 你根据这个ID查询直发提货管理的库存，去库存拿内部子单号发货。</p></li><li><p>2、告诉你成品库存号，已经发货的数量，后台去成品仓库，根据入库的时间先入先出，获取箱子（也就内部子单号）进行发货</p></li><li><p>t_stock_box_number这里里面记录了箱子信息，一个提货单入库一个箱子商品之后，会在这个里面添加一条记录，出库的时候出一个商品，除了减掉t_stock_box_number中的箱子t_stock_prudoct中记录的数量和箱子数也要减掉</p></li><li><p>还是我昨天说的，出库有2种方式。这个t_stock_box_number里面记录了每个提货单最终入库之后生产了哪些箱子，然后对应这发出去就可以了。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 领赫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领赫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>david-prep单新增编辑逻辑</title>
      <link href="/2020/02/09/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/david-prep%E5%8D%95%E6%96%B0%E5%A2%9E%E7%BC%96%E8%BE%91%E9%80%BB%E8%BE%91/"/>
      <url>/2020/02/09/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/david-prep%E5%8D%95%E6%96%B0%E5%A2%9E%E7%BC%96%E8%BE%91%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><h3 id="david"><a href="#david" class="headerlink" title="david"></a>david</h3><p>昨天说，提货 生产入库单的时候根据箱子数量要拆成一个个箱入库<br>也就是说后面出入库会一箱子为单位<br>这里主要针对直发提货和成品仓库的产品。 对于Prep仓库的产品出入库只考虑数量。<br>为了简单 入库单商品变成库存的时候可以统一处理，或者Prep单的商品入库的时候只需要改库存商品，不要管箱子数量。<br>也就是说Prep库存的出入库是数量，直发和成品是以箱子为单位出入库。<br>直发和成品仓库，才考虑 箱数<br>注意直发,Prep提货和Prep入库，的时候，先都统一拆成一箱一箱入库。只是箱子对Prep提货库存没什么用</p><blockquote><p>重点提醒：麻烦多看原型图以及数据库表字段设计</p></blockquote><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>通过临时表传递两个存储过程之间的数据不是很好的方式。临时表最好在一个存储过程中使用，不要跨多个存储过程。</p>]]></content>
      
      
      <categories>
          
          <category> 领赫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领赫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渠道跟进单以及发货相关理解</title>
      <link href="/2020/02/07/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E6%B8%A0%E9%81%93%E8%B7%9F%E8%BF%9B%E5%8D%95%E5%8F%91%E8%B4%A7%E7%9B%B8%E5%85%B3%E7%90%86%E8%A7%A3/"/>
      <url>/2020/02/07/%E3%80%90%E9%A2%86%E8%B5%AB%E3%80%91/%E6%B8%A0%E9%81%93%E8%B7%9F%E8%BF%9B%E5%8D%95%E5%8F%91%E8%B4%A7%E7%9B%B8%E5%85%B3%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>发货  渠道跟进单 业务<br>生成订单发给客户<br>生成支付连接 发给客户<br>注意<br>我们原来入库的时候 有个地方有问题<br>提货单提货有很多商品<br>比如商品<br>我们从提货单生成入库单 要把每一个箱子都要生成一个单号 内部子单号<br>同一个商品有10箱，生成10个箱子序号，也就是内部子单号，箱子序号<br>入库单–前端这里有问题</p><p>库存虽然显示的是商品，<br>库存有两箱，内部子单号就有两条<br>发货也是一个先入先出的一个规则，客户中台不需要知道这个规则<br>优先入库的先发<br>prep不存在发货<br>直发提货发货的时候以一个提货单为单位发货<br>prep的商品通过prep单转变成成品的时候<br>10箱商品对应了<br>成品仓库发10箱<br>入库单搞错了<br>加了一个表 t_stock_box_number<br>库存有10箱，该表就有10条记录，<br>t_repo_order_product<br>box_number 箱数没什么意义<br>入库单生成提货单的时候，根据箱子数拆成一条一条记录<br>库存<br>发货的时候，发货的过程 用户在直发提货假如说已经入库了，点击发货<br>直发提货对应入库单，入库单是直发货来的<br>直发提货点击入库，根据直发提货根据内部子单号去发货<br>箱子里面有产品<br>成品仓库里面发货<br>选择对应的商品去发货</p><p>直发提货 当中有固定的商品<br>成品仓库里面是选择商品，并且多少个去发，<br>商品prep提货，prep提货商品也会放到库存，prep商品需要加工，加工好了，prep仓库会生成prep单，转变成成品仓库当中的商品</p><p>prep提货<br>内部子单号需要贴标签，线下需要做仓库管理的<br>发货完以后就会做一些操作，比如说把这些，付款以后，就会生成投入到渠道，开始运输，有个地方需要注意，关联发货单中的商品，渠道跟进单，主要是哪个渠道，<br>渠道拆分，渠道单的时候，发个渠道单，里面是很多的发货单<br>生成两个发货单，投入一个渠道<br>而渠道，<br>多个发货单，投入一个渠道<br>某个发货单的商品<br>生成两个一模一样的单，把一些单放到另外一些渠道里面<br>发货发两批货，刀和鞋子同一批运输，分批运输，拆分渠道跟进单，刀扣留海关，沟通过再发货。<br>卸货清点，跟进单当中的商品，是否已提货</p><p>david:<br>Prep单，很简单。就是客户下一个订单，加一些商品，然后把商品入库到库存。<br>开始 待Prep状态，这个时候可以做3个动作，【编辑】【查看】【标记完成】—-&gt;标记完成之后，变成待入库，这个时候可以操作的动作有【编辑】【查看】【入库】—–&gt;入库之后编号才能了待确认入库，这个时候只能【查看】<br>入库之后就会在【入库单】生成一条记录，然后去入库单去确认入库<br>如果超过三个动作就显示【查看】和【更多】，更多里面包括编辑和标记完成，参照直发提货。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p>t_out_repo_order表为发货表主表，原型图当中发货单，点击投入渠道当中，单据状态处于待投入渠道状态，这个待投入渠道状态==确认放货状态==无款放货状态？ 确认放货状态以及无款放货状态是读物的哪个字段的取值？发货表主表当中的status无此取值，还有就是这个无款放货是什么意思，是类似支付宝，先收货再付款吗？</p></li><li><p>投入渠道需要注意点，勾选的单据，也就是t_out_repo_order记录的状态需要是等于状态2待投入渠道状态，符合条件一（ 0 :待发送账单/1:待放货/2:待投入渠道/3:已投入渠道/4：已完成）；</p></li><li><p>选择的单据与投入的渠道需要目的地国家是一致的，也就是t_out_repo_order记录当中的des_country；</p></li><li><p>运输方式是否一致，也就是t_out_repo_order记录当中的transport_type_id是否与选择的渠道的运输方式是一致的；<br>这个投入渠道，跟选择费用模板，差不多，也是一个路由是吧？</p></li><li><p>这三点条件无法满足则相当于路由失败，无渠道可走，就跟我们系统的交易所走渠道一样，满足交易金额区间，交易时间，所支持银行，所支持收款/代还业务一样。</p></li><li><p>产品类型为成品（报关件）时，才出现报关件的标签；这个标签的出现，不是，这个产品的类型这个字段 t_out_repo_order_product表当中无status字段，显然也不是产品管理当中的类型；当产品成为成品，那就意味着该产品可能从prep仓库加工到了成品仓库当中了，有什么标记吗？哦哦哦哦哦，发货单当中任意单据当中的产品，都是出自库存，也就是t_repo_product，无论是其当中的产品都做了仓库标记，即type(库存类型 0：直发仓库存/1: Prep仓库存/2: 成品仓库存)，所以，额，要么t_out_repo_order_product就直接有标记是什么仓库，要么就是，当查询发货单列表的时候，我还得去查询一下，该发货单记录当中的该产品出自哪个仓库?也就是查询一下t_repo_product?他的类型是0？1？2？然后前端对产品的仓库类型做判断如果为2则前端样式进行显示？<br>为什么(产品类型为成品（报关件）时，出现此标签) 这样做有什么用意？当我的产品是出自直发仓库存，以及prep仓库存的时候，可能还要加工？只有出自成品仓库存才能够真正发货？</p></li><li><p>存在linked_taker_delivery_id/linked_put_repo_order/linked_put_repo_inner_order三个字段的原因在于，发货单当中的产品可能不完全出自于库存 t_repo_product类型为2的产品，规范一点，叫做，不完全出自于成品库存？也有可能产品出自于put_repo_order prep单入库产品</p></li><li><p>发货单当中的产品，出自库存，记录在发货单，对一条发货单记录进行编辑的时候，（成品仓库存发货时，按照先入先出的原则，取先入库的箱子进行发货。） 添加了发货单产品1，以及他对应的箱数10，那么就会在t_out_repo_product发货产品表当中box_num记录箱数，以及对应产品信息，以及还有一个inner_order字段内部子单号，该内部子单号来自于对应库存，这个地方与上面就有点撞，不完全就是发货产品全出自于库存，则该t_out_repo_order_product当中的inner_order字段</p></li><li><p>捋一捋稍等稍等</p></li><li><p>直发提货相关表<br>  t_delivery_order直发提货单<br>  t_delivery_arrived_info直发提货到货信息<br>  t_delivery_arrived_product直发提货到货产品<br>  t_delivery_order_expense直发提货费用信息<br>  t_delivery_order_file直发提货单相关文件<br>  t_delivery_order_plan直发提货规划<br>  t_delivery_order_product直发提货产品</p></li></ul><h3 id="三种不同流程的发货流程"><a href="#三种不同流程的发货流程" class="headerlink" title="三种不同流程的发货流程"></a>三种不同流程的发货流程</h3><p>直发提货的流程根据status状态<br> 0 :待联系工厂/1:待核准报价/2:待接受报价更新/3:待安排提货/4:等待到货/5:待入库/6:待确认入库/7待通知发货/8发货准备/9:已发货/10:已取消/11:已终止<br>prep提货单相关表prep提货流程根据status状态<br>prep状态 0-待安排提货/1-等待到货/2-待入库/3-待确认入库/4-已入库/5-已取消/6-已终止/7-已删除<br>prep单相关表prep单流程根据status状态<br>状态 0：待Prep/1：待入库/2：待确认入库/3已入库</p><p>都有一个相同的步骤，即待确认入库，则该待确认入库，录入需要入库的来自各个不同发货流程的入库信息到t_put_repo_order根据不同的发货流程入不同的仓库，即真正入库到t_stock_product表中</p><p>额，简单点，也就是<br>t_delivery_order/t_prep_delivery_order/t_prep_order（准备产品）—-&gt;t_put_repo_order（录入入库信息）—–&gt;t_stock_product（仓库）表当中；<br>有一个新建的表，t_stock_box_number表，该表为跟随t_stock_product表，两张表当中有重复字段repo_order_id即入库单号重复。<br>t_stock_box_number当中的inner_sub_no理解，即t_put_repo_order_product表入库产品当中的inner_sub_no，t_put_repo_order入库表当中的内部单号即产品种类，t_put_repo_order_product当中的内部子单号即，对该种产品种类做了细化，即产品不同规格的区分。<br>而t_stock_box_number做的即为，t_stock_product当中box_num字段箱数取值多少，对应t_stock_box_number当中生成多少条记录，并做序号区分以便做到发货时（成品仓库存发货时，按照先入先出的原则，取先入库的箱子进行发货。）。<br>这个应该是入库的一个流程；</p><h3 id="接下来就是发货的一个流程"><a href="#接下来就是发货的一个流程" class="headerlink" title="接下来就是发货的一个流程"></a>接下来就是发货的一个流程</h3><p>现在再来看 linked_take_delivery_id/linked_put_repo_order/linked_put_repo_inner_order 这三个字段。发货单当中的产品应当取自于t_stock_product表，也就是从0：直发库存/1：Prep库存/2:成品库存；<br>直发提货所入的库存为0：直发库存<br>prep提货所入的库存为1：prep库存<br>prep单所入的库存为1：prep库存<br>（通过Prep提货入库的产品，入的是Prep仓库）<br>那么成品库存，是通过哪个操作入的成品库存？<br>还有就是，之前说过，prep等通过加工后会转变为成品，也就是会入成品仓库？那么相关原型图的操作界面在哪里？</p><p>先不管这个。<br>现在发货单当中的产品有从库存当中t_stock_product type:0/1/2当中来取产品，实质应该是从t_stock_box_number这个来取产品？ 因为是通过箱数，一箱一箱的来进行发货的；<br>也可以从t_put_repo_order当中来取，也就是从入库单中来取产品，该产品还未入库，也就是还可以从还未入库当中的产品中来进行取？<br>linked_take_delivery_id/linked_put_repo_order/linked_put_repo_inner_order</p><p>好，现在我通过各个条件过滤下，选择了渠道，现在需要发货的产品我也选择了，填写了发货相关的账单信息、文件….信息，我开始发送账单给相关对应的客户，通过邮件服务，我将该账单发送到客户的邮箱当中，此时该发货单order,他的finance_status 财务状态是待确认账单，当回调成功的时候，会有一个payment_id即相当于渠道订单号，这个订单号，我想这个可能需要一张表来记录一下，即我们系统的订单号，也就是发货单order号所对应的渠道订单号，相关信息…或许不用吧…  额当支付成功成功回调之后，进行更新发货单即t_out_repo_order的财务状态为已支付，此时支付成功了之后，也就意味着可以进行真正意义上的发货了。</p><p>也就有了渠道跟进单。<br>渠道跟进单的生成应该是，回调支付成功后或者是额手工确认支付成功后，也就是线下支付成功后，然后主动触发去生成这个渠道跟进单？</p><p>也就是 prep提货—&gt;prep单—-&gt;成品<br>所以在新建prep单的时候去减了相对应prep仓库当中的产品数量<br>也就是prep单当中编辑的时候，参与prep的产品为【选择库存管理-prep仓库里该客户的库存产品】的原因。</p><p>david:<br>发送账单之后，就变成了待放货的状态<br>这个时候，实际上客户有两种选择，一种线上付款，另一种线下付款。而无款放货，就是后台人员直接操作，就是客户不要线上支付了<br>这个时候考虑一下财务状态，财务状态开始是带确认账单，发送了账号之后变成了，待支付<br>待支付变成已支付有两种可能，1、客户线上支付，paypal回调，然后我们改状态。 2、无款放货，改这个状态<br>这个财务状态，再加个状态吧， 如果是线上支付就是，已支付。如果是无款放货，状态就变成 ，无需支付吧，数据库字段说明我改一下。<br>这个待确认账单，是指在发送账单之前，也就是说，生成发货单时，财务状态即待确认账单状态 ，这个理解没毛病<br>这个支付信息，我t_out_rep_order表加了一些字段包括，说明时间支付的。你看要不要结合paypal，再加一张表记录具体的财务新，比如谁，什么邮箱，什么时间点支付了多少钱。其实这些财务信息paypal也有，当然我们系统也可以考虑记录<br>这个你可以考虑，虽然现在系统没有财务这个，但是完善的系统可以记录的，这个你可以把握一下。</p><p>投入渠道的订单，首先要判断文件状态，财务状态，和出货单状态<br>所有的出货单，如果一起投入渠道，文件必须是已确认， 财务必须是已支付，或者无需支付，订单状态必须是待投入渠道。<br>当然，目的国家，运输渠道也的一样，参照原型<br>选择的单据与投入的渠道需要目的地国家是一致的，也就是t_out_repo_order记录当中的des_country； 这个就是你的理解<br>(运输方式是否一致，也就是t_out_repo_order记录当中的transport_type_id是否与选择的渠道的运输方式是一致的；)</p><p>这里首先<br>1、需要提供一个接口，根据运输方式，和目的地国家，查询出来可以用的渠道<br>2、选择的所有出货单的运输方式，和目的地国家必须相同<br>前端会控制，后台接口应该也要控制</p><p>成品-这个是产品的属性，添加产品的时候应该有这个<br>嗯，我们现在订单的产品表只保存了product_attr_id，可能得根据这个去查询管理的产品表，把产品类型的查出来<br>我们现在订单的产品表只保存了product_attr_id，可能得根据这个关联t_product_attr表，然后根据t_product_attr表中的product_id关联t_product表把产品类型的查出来<br>prep单入的是成品仓库<br>prep单就是减少prep仓库的数量，增加成品仓库的数量<br>直发提货，去发货的时候实际上减少的是直发仓库的产品。到时接口要根据直发提货单，找到这个单对应入库的商品，然后参与发货就可以了<br>找到参与发货的商品后和成品仓库发货是一样额，只是选择发货的商品方式不一样而已。<br>直发提货，发货的时候，前端只会告诉你哪个直发提货单要发货<br>成品仓库发货的时候，会告诉你发货多少个数量等等<br>客户手动去主动发起通知发货<br>通知发货，实际上后台就是去创建发货订单<br>发货的的生成，是通知发货这个动作产生的<br>通知发货之后，生成发货订单，生成发货订单，后台才会给客户发送支付账单。。<br>只有入库了，客户就可以通知发货了。然后就是走发货流程<br>支付是在发货流程中</p>]]></content>
      
      
      <categories>
          
          <category> 领赫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领赫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Choosing a Gift</title>
      <link href="/2020/02/01/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91/lesson2/"/>
      <url>/2020/02/01/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91/lesson2/</url>
      
        <content type="html"><![CDATA[<h2 id="Learn-amp-Talk-I"><a href="#Learn-amp-Talk-I" class="headerlink" title="Learn &amp; Talk I"></a>Learn &amp; Talk I</h2><h3 id="Chapter-1-Shopping"><a href="#Chapter-1-Shopping" class="headerlink" title="Chapter 1 Shopping"></a>Chapter 1 Shopping</h3><h4 id="Lesson-2-Choosing-a-Gift"><a href="#Lesson-2-Choosing-a-Gift" class="headerlink" title="Lesson 2 Choosing a Gift"></a>Lesson 2 Choosing a Gift</h4><blockquote><p>at the bottom of the following pages:T1=teaching instructions;T=teacher;S=student</p></blockquote><h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul><li><p>part <big>A</big>. Let’s Learn (12 mins)</p></li><li><p>part <big>B</big>. Let’s Talk (12 mins)</p></li><li><p>part <big>C</big>. Review (1 min)</p></li></ul><blockquote><p>Learning Objectives</p></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">学习目标：</span><br><span class="line"><span class="number">4</span> <span class="built_in">words</span> <span class="keyword">about</span> <span class="string">"choosing a gift"</span> | <span class="number">4</span>个和<span class="string">"挑礼物"</span>相关的单词</span><br><span class="line">Expressions <span class="keyword">for</span> <span class="string">"choosing a gift"</span> | <span class="string">"挑礼物"</span>常用表达</span><br><span class="line">How <span class="keyword">to</span> talk <span class="keyword">about</span> topics related <span class="keyword">to</span> <span class="string">"choosing a gift"</span> | 谈论和<span class="string">"挑礼物"</span>相关的话题</span><br></pre></td></tr></table></figure><h2 id="part-A-Let’s-Learn"><a href="#part-A-Let’s-Learn" class="headerlink" title="part A. Let’s Learn"></a>part A. Let’s Learn</h2><h3 id="Vocabulary-4-mins"><a href="#Vocabulary-4-mins" class="headerlink" title="Vocabulary (4 mins)"></a>Vocabulary (4 mins)</h3><table><thead><tr><th>vocabulary</th><th>means</th><th>sentense</th><th>etc</th></tr></thead><tbody><tr><td>look for</td><td>to try to find something or someone 寻找（某物/某人）</td><td>e.g. They’re <u><strong>looking for</strong></u> insects in the field.</td><td></td></tr><tr><td>have something in mind</td><td>to think of (想起，有…想法)</td><td>e.g. What do you <u><strong>have in mind</strong></u> ?</td><td></td></tr><tr><td>how about (doing) something</td><td>used to introduce a new subject which you think is relevant to the conversation …怎么样</td><td>e.g. 1.<u><strong><em>How about</em></strong></u> a cup of coffee ? 2.<u><strong><em>How about</em></strong></u> going to the cinema ?</td><td></td></tr><tr><td>gift-wrap</td><td>to wrap as a gift,with decorative pape,ribbon,etc（used as verb）</td><td>e.g. She’s <u><strong><em>gift-wrapping</em></strong></u> the chocolate.</td><td>gift wrapping 礼品的包装（动名词） 、 wrapping paper 礼品包装纸</td></tr></tbody></table><h3 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h3><h4 id="Role-play-the-dialog-with-your-teacher-twice-and-learn-the-highlighted-expressions-by-heart-和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达"><a href="#Role-play-the-dialog-with-your-teacher-twice-and-learn-the-highlighted-expressions-by-heart-和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达" class="headerlink" title="Role-play the dialog with your teacher twice,and learn the highlighted expressions by heart.和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达"></a>Role-play the dialog with your teacher twice,and learn the highlighted expressions by heart.和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达</h4><h5 id="（Mark-is-choosing-a-gift-for-His-girlfriend-in-a-jewelry-珠宝-store-）"><a href="#（Mark-is-choosing-a-gift-for-His-girlfriend-in-a-jewelry-珠宝-store-）" class="headerlink" title="（Mark is choosing a gift for His girlfriend in a jewelry(珠宝) store.）"></a>（Mark is choosing a gift for His girlfriend in a jewelry(珠宝) store.）</h5><ul><li><strong><em>Salesman:</em></strong> Good evening, sir, can i help you ?</li><li><strong><em>Mark:</em></strong> Yeah! I’m looking for a gift for my girlfriend.</li><li><strong><em>Salesman:</em></strong> Do you have something in mind ?</li><li><strong><em>Mark:</em></strong> I think a necklace(项链) would be perfect.</li><li><strong><em>Salesman:</em></strong> How about this one ? It sells very well.</li><li><strong><em>Mark:</em></strong> Sounds good, but could you gift-wrap this,please ?</li><li><strong><em>Salesman:</em></strong> Sure.</li></ul><h2 id="part-B-Let’s-Talk"><a href="#part-B-Let’s-Talk" class="headerlink" title="part B. Let’s Talk"></a>part B. Let’s Talk</h2><h3 id="Conversation"><a href="#Conversation" class="headerlink" title="Conversation"></a>Conversation</h3><h4 id="Suppose-you’re-choosing-a-gift-in-a-jewelry-store-Use-th-vocabulary-and-expressions-you’ve-learned-in-part-A-to-complete-the-following-conversation-假设你在商店里挑礼物。运用在第一部分学到的词汇和表达将一下情境对话补充完整"><a href="#Suppose-you’re-choosing-a-gift-in-a-jewelry-store-Use-th-vocabulary-and-expressions-you’ve-learned-in-part-A-to-complete-the-following-conversation-假设你在商店里挑礼物。运用在第一部分学到的词汇和表达将一下情境对话补充完整" class="headerlink" title="Suppose you’re choosing a gift in a jewelry store. Use th vocabulary and expressions you’ve learned in part A to complete the following conversation. 假设你在商店里挑礼物。运用在第一部分学到的词汇和表达将一下情境对话补充完整"></a>Suppose you’re choosing a gift in a jewelry store. Use th vocabulary and expressions you’ve learned in part A to complete the following conversation. 假设你在商店里挑礼物。运用在第一部分学到的词汇和表达将一下情境对话补充完整</h4><blockquote><p>Hints<br><strong><em>Could you gift-wrap this?</em></strong><br><strong><em>How about this necklace?</em></strong><br><strong><em>look for</em></strong><br><strong><em>(not)have anything in mind</em></strong></p></blockquote><ul><li><strong><em>A:</em></strong> Can I help you, sir/madam?</li><li><strong><em>B:</em></strong> Yes,I’m look for a gift for my mother, but i don’t have anything in mind.</li><li><strong><em>A:</em></strong> How about this necklace? It;s beautiful and perfect as a gift.</li><li><strong><em>B:</em></strong> Could you gift-wrap this?</li><li><strong><em>A:</em></strong> Sure. We offer free gift wrapping.</li><li><strong><em>B:</em></strong> Fine. I’ll take it.</li></ul><h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><h4 id="Talk-with-your-teacher-about-the-following-question-Refer-to-the-hints-if-necessary-和老师一起讨论一下问题。可以参考方框中的提示。"><a href="#Talk-with-your-teacher-about-the-following-question-Refer-to-the-hints-if-necessary-和老师一起讨论一下问题。可以参考方框中的提示。" class="headerlink" title="Talk with your teacher about the following question. Refer to the hints if necessary.和老师一起讨论一下问题。可以参考方框中的提示。"></a>Talk with your teacher about the following question. Refer to the hints if necessary.和老师一起讨论一下问题。可以参考方框中的提示。</h4><ul><li>1.Describe a gift that you sent to someone recently(最近) or in the past.</li></ul><blockquote><p>Hints:<br><strong><em>What was the gift?</em></strong><br><strong><em>Who did you send th gift to?</em></strong><br><strong><em>When did you send th gift?</em></strong></p></blockquote><ul><li>2.Describe a gift that you ever received.</li></ul><blockquote><p>Hints:<br><strong><em>What was the gift?</em></strong><br><strong><em>Who gave it to you?</em></strong><br><strong><em>When did he/she send you the gift?</em></strong><br><strong><em>Do you like it? Why or why not?</em></strong></p></blockquote><ul><li>Do you think gifts should be wrapped? Why or why not?</li></ul><blockquote><p>Hints:<br><strong><em>yes-&gt;more beautiful / give somebody a surprice…</em></strong><br><strong><em>no-&gt;useless(没用的)/a waste of papre…</em></strong></p></blockquote><h2 id="part-c-Review"><a href="#part-c-Review" class="headerlink" title="part c. Review"></a>part c. Review</h2><p>In this lesson,you’ve learned</p><ul><li>5 phrases about “choosing a gift”</li></ul><blockquote><p>look for<br>have something in mind<br>how about(doing) something<br>gift-wrap</p></blockquote><ul><li>commonly used expressions for buying gifts</li></ul><blockquote><p>How about this one?<br>Could you gift-wrap this,please?</p></blockquote><ul><li>how to talk about topics related to “choosing a gift”</li></ul><h2 id="Further-Study"><a href="#Further-Study" class="headerlink" title="Further Study"></a>Further Study</h2><h3 id="Listen-and-Learn"><a href="#Listen-and-Learn" class="headerlink" title="Listen and Learn"></a>Listen and Learn</h3><blockquote><p>loacl handcrafts 当地的手工艺品<br>handmade candles 手工蜡烛<br>handmade pillow 手工枕头<br>jewelry box 珠宝盒<br>wood carving 木雕刻品</p></blockquote><ul><li>These words are all countable!</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hello,teacher</span><br><span class="line">ok ,i am introducing myself <span class="keyword">to</span> you.</span><br><span class="line"><span class="keyword">first</span>,<span class="keyword">my</span> chinese <span class="built_in">name</span> <span class="keyword">is</span> fengshana,i am <span class="keyword">not</span> have englishname,so,you can call <span class="keyword">me</span> shana.</span><br><span class="line">i am twenty yeas old.</span><br><span class="line">i am a girl. i like reading <span class="keyword">some</span> books.  </span><br><span class="line">now, i am working. i am occuping programing.</span><br><span class="line"><span class="keyword">but</span>,i am look <span class="keyword">for</span> a new job.beacuse ,this <span class="built_in">year</span>,<span class="keyword">in</span> february,i have leaved office. because, i think <span class="keyword">that</span> i am unhappy <span class="keyword">in</span> work <span class="built_in">time</span> ,i fear <span class="keyword">my</span> state <span class="keyword">that</span>  will impact others.so , i leave <span class="keyword">my</span> office.</span><br><span class="line">now, i live <span class="keyword">in</span> china - country,Guangdong province,shenzhen city,longgang distinguish,i <span class="keyword">with</span> <span class="keyword">my</span> friend,she names <span class="keyword">is</span> xielihong ,you can call her lihong,li <span class="keyword">is</span> beautiful mean,hong <span class="keyword">is</span> red. i think her <span class="built_in">name</span> like a beauty.lihong <span class="keyword">with</span> her boyfriend <span class="keyword">in</span> five floors,i like <span class="keyword">in</span> four floors. i live <span class="keyword">on</span> <span class="keyword">my</span> own <span class="keyword">in</span> a studio flat.<span class="keyword">my</span> room <span class="keyword">with</span> a balcony,<span class="keyword">and</span> <span class="keyword">the</span> balcony look out ,have red ,pink,orange colors flower,so beautiful,because ,now <span class="keyword">the</span> season <span class="keyword">is</span> spring.all grass <span class="keyword">is</span> green.<span class="keyword">the</span> wind blowing,sky <span class="keyword">is</span> bule,flowers <span class="keyword">and</span> grass,<span class="keyword">and</span> other grass <span class="keyword">that</span> i can't call these names.<span class="keyword">and</span> <span class="keyword">in</span> <span class="keyword">the</span> morning,<span class="keyword">or</span> now, outside <span class="keyword">of</span> a window,have <span class="keyword">some</span> birds <span class="keyword">that</span> are twittering,peeping. could you imagine <span class="keyword">the</span> picture <span class="keyword">in</span> your mind?</span><br><span class="line"></span><br><span class="line">long ago,<span class="keyword">in</span> <span class="keyword">last</span> <span class="built_in">year</span>, <span class="keyword">in</span> fact, i haved a <span class="built_in">class</span>.later,i haven't a <span class="built_in">class</span>, i think <span class="keyword">that</span> i have more reason,<span class="keyword">but</span>,all reasons <span class="keyword">is</span> used <span class="keyword">as</span> an excuse;so i feel so sorry. teacher.</span><br><span class="line">recently, i have seven  classes. there are classes <span class="keyword">about</span> self-confidence <span class="keyword">and</span>  feelings manager.<span class="keyword">that</span>'s sounds good. <span class="keyword">the</span> teacher <span class="keyword">is</span> chinese.i think these classes are good <span class="keyword">for</span> <span class="keyword">me</span>. i am thanks <span class="keyword">to</span> him.</span><br><span class="line">ok,introducing ,now <span class="keyword">is</span> ending.</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recently,long long age, like <span class="keyword">last</span> <span class="built_in">year</span>.i send <span class="keyword">the</span> gift <span class="keyword">to</span> <span class="keyword">my</span> friend. <span class="keyword">my</span> friend, just,<span class="keyword">in</span> introducing, referred lihong. <span class="keyword">the</span> gift <span class="keyword">is</span> a cloth. <span class="keyword">the</span> cloth <span class="keyword">that</span> <span class="keyword">it</span>'s <span class="keyword">back</span> have <span class="keyword">some</span> flowers.these flowers <span class="keyword">is</span> pink, <span class="keyword">the</span> cloth <span class="keyword">is</span> a cappa ,similar <span class="keyword">to</span> a cloak,<span class="keyword">but</span> <span class="keyword">it</span> <span class="keyword">is</span> usually long <span class="keyword">and</span> too thin. just <span class="keyword">as</span> lihong' <span class="built_in">name</span>, <span class="keyword">the</span> cloth <span class="keyword">that</span> i think <span class="keyword">is</span> add a beautiful thing <span class="keyword">to</span> a contrasting beautiful girl .<span class="keyword">but</span> ,i hear <span class="keyword">that</span> her <span class="keyword">try</span> <span class="keyword">on</span> <span class="keyword">the</span> cloth looks like long. so ,advice her can take <span class="keyword">in</span> <span class="keyword">that</span> cloth.</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">last</span> <span class="built_in">year</span>,i received a gift <span class="keyword">is</span> a bracelet. <span class="keyword">the</span> bracelet have a rabbit <span class="keyword">that</span> <span class="keyword">is</span> small <span class="keyword">and</span> white.<span class="keyword">it</span> <span class="keyword">is</span> very delicate.<span class="keyword">but</span> <span class="keyword">it</span> <span class="keyword">is</span> <span class="keyword">not</span> expensive.<span class="keyword">in</span> price field,<span class="keyword">it</span> <span class="keyword">is</span> just so so. <span class="keyword">the</span> bracelet <span class="keyword">with</span> <span class="keyword">some</span> flowers <span class="keyword">and</span> twining vines,branches <span class="keyword">and</span> green leaves. i think <span class="keyword">that</span> <span class="keyword">is</span> beautiful.</span><br><span class="line"></span><br><span class="line"><span class="keyword">isn't</span> someone gave <span class="keyword">it</span> <span class="keyword">to</span> <span class="keyword">me</span>.contrary,<span class="keyword">is</span> one ,two ,three ,four,group <span class="keyword">of</span> people <span class="keyword">that</span> <span class="keyword">is</span> <span class="keyword">my</span> sister <span class="keyword">and</span> her classmates.</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">last</span> <span class="built_in">year</span> ,they send <span class="keyword">me</span> <span class="keyword">the</span> gift.i like <span class="keyword">it</span>.<span class="keyword">but</span> i don't like <span class="keyword">some</span> ,<span class="keyword">for</span> example,necklace,jewelry,ornaments.i don't like wearing jewelry. so ,<span class="keyword">the</span> gift was collected <span class="keyword">by</span> <span class="keyword">me</span>.</span><br><span class="line"><span class="keyword">the</span> gift,<span class="keyword">not</span> <span class="keyword">in</span> <span class="keyword">my</span> birthday send <span class="keyword">to</span> <span class="keyword">me</span>,neither <span class="keyword">in</span> <span class="keyword">some</span> festival send <span class="keyword">to</span> <span class="keyword">me</span>.</span><br><span class="line">because,<span class="keyword">my</span> sister <span class="keyword">and</span> her classmates <span class="keyword">in</span> senior <span class="keyword">middle</span> school have a dancing show.<span class="keyword">my</span> sister <span class="keyword">is</span> one <span class="keyword">of</span> them <span class="keyword">as</span> a leader dancer.she request <span class="keyword">me</span> <span class="keyword">that</span> whether <span class="keyword">or</span> <span class="keyword">not</span> have <span class="keyword">some</span> free <span class="built_in">time</span> help them make a background video.them shows <span class="keyword">that</span> <span class="keyword">the</span> dancing content <span class="keyword">is</span> ,<span class="keyword">in</span> english, <span class="keyword">is</span> beauty walk. <span class="keyword">in</span> chinese, call show's <span class="built_in">name</span> <span class="keyword">is</span> lirenxing. <span class="keyword">the</span> show model <span class="keyword">from</span> tang dynasty <span class="keyword">in</span> china. when i make <span class="keyword">the</span> video later,i  am very expect <span class="keyword">the</span> show. <span class="keyword">my</span> sister think <span class="keyword">that</span> her afraid audience will prefer <span class="keyword">the</span> video than  them shows. <span class="keyword">the</span> show, i also invite <span class="keyword">my</span> parents <span class="keyword">to</span> <span class="keyword">my</span> sister school <span class="keyword">as</span> audience.<span class="keyword">that</span> point <span class="keyword">of</span> <span class="built_in">time</span> <span class="keyword">is</span> <span class="keyword">my</span> sister school's art festival. <span class="keyword">the</span> show <span class="keyword">is</span> finished successfully.<span class="keyword">my</span> sister <span class="keyword">and</span> her classmates are very thankful <span class="keyword">to</span> <span class="keyword">me</span>,so ,them together discusses an idea <span class="keyword">that</span> send <span class="keyword">me</span> a bracelet.<span class="keyword">it</span> <span class="keyword">is</span> a surprise <span class="keyword">to</span> <span class="keyword">me</span>. <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">time</span>, i even feel <span class="keyword">that</span> i like <span class="keyword">the</span> gift far exceed <span class="keyword">my</span> twenty years birthday. i like <span class="keyword">the</span> gift ,<span class="keyword">but</span> <span class="keyword">not</span> just <span class="keyword">the</span> gift.contrary,i prefer <span class="keyword">to</span> them kindly feelings.<span class="keyword">the</span> point <span class="keyword">is</span> very important.</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">the</span> <span class="keyword">above</span>-mentioned bracelet <span class="keyword">that</span> was wrapped.</span><br><span class="line">i think <span class="keyword">the</span> gifts whether <span class="keyword">or</span> <span class="keyword">not</span> should be wrapped need observe <span class="keyword">the</span> gift itself.because <span class="keyword">some</span> gift <span class="keyword">is</span> easy broken <span class="keyword">or</span> need <span class="keyword">to</span> take lightly.so, <span class="keyword">in</span> this  situation, <span class="keyword">the</span> gift should be wrapped. others, have <span class="keyword">some</span> big gift,itself haven been wrapped , <span class="keyword">in</span> this condition,so,we needn't <span class="keyword">to</span> wrap <span class="keyword">it</span>.</span><br><span class="line"><span class="keyword">last</span> <span class="keyword">but</span> <span class="keyword">not</span> least,i think <span class="keyword">the</span> gift should be wrapped ,this topic,<span class="keyword">it</span> would <span class="keyword">by</span> best <span class="keyword">not</span> wrapped. because this way <span class="keyword">that</span> i think <span class="keyword">is</span> protect <span class="keyword">the</span> environment. shouldn't wrapped <span class="keyword">the</span> gift <span class="keyword">not</span> <span class="keyword">is</span> useless,contrary,<span class="keyword">if</span> <span class="keyword">the</span> gift have been wrapped,<span class="keyword">it</span> <span class="keyword">is</span> will bring receiver a good impression.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教案 LT1 Glossary 单词表</title>
      <link href="/2020/01/31/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91/%E6%95%99%E6%A1%88LT1Clossary%E5%8D%95%E8%AF%8D%E8%A1%A8/"/>
      <url>/2020/01/31/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91/%E6%95%99%E6%A1%88LT1Clossary%E5%8D%95%E8%AF%8D%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="GLOSSARY"><a href="#GLOSSARY" class="headerlink" title="GLOSSARY"></a>GLOSSARY</h1><h2 id="Chapter-1-Shopping-购物"><a href="#Chapter-1-Shopping-购物" class="headerlink" title="Chapter 1 Shopping 购物"></a>Chapter 1 Shopping 购物</h2><h3 id="L1-Buying-Clothes-买衣服"><a href="#L1-Buying-Clothes-买衣服" class="headerlink" title="L1 Buying Clothes 买衣服"></a>L1 Buying Clothes 买衣服</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>on sale</td><td>减价的，降价出售的</td></tr><tr><td>try on</td><td>试穿</td></tr><tr><td>out of stock</td><td>缺货的，售罄的</td></tr><tr><td>take in</td><td>将（衣物）改小</td></tr></tbody></table><h3 id="L2-Choosing-a-Gift-挑选礼物"><a href="#L2-Choosing-a-Gift-挑选礼物" class="headerlink" title="L2 Choosing a Gift 挑选礼物"></a>L2 Choosing a Gift 挑选礼物</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>look for</td><td>寻找（某人/某物）</td></tr><tr><td>have something in mind</td><td>想起，有…的想法</td></tr><tr><td>how about (doing) something</td><td>…怎么样</td></tr><tr><td>gift wrap</td><td>礼品包装</td></tr></tbody></table><h3 id="L3-In-the-supermarket-在超市"><a href="#L3-In-the-supermarket-在超市" class="headerlink" title="L3 In the supermarket 在超市"></a>L3 In the supermarket 在超市</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>toothbrush</td><td>n.牙刷</td></tr><tr><td>promote</td><td>v.促销</td></tr></tbody></table><h3 id="L4-Shopping-for-a-TV-买台电视"><a href="#L4-Shopping-for-a-TV-买台电视" class="headerlink" title="L4 Shopping for a TV 买台电视"></a>L4 Shopping for a TV 买台电视</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>warranty</td><td>n.保修单，保修卡</td></tr><tr><td>best-seller</td><td>n.热卖品，畅销品</td></tr><tr><td>offer</td><td>v.提供</td></tr><tr><td>delivery</td><td>n.运送，递送</td></tr></tbody></table><h3 id="L5-Buying-a-Smartphone-买部手机"><a href="#L5-Buying-a-Smartphone-买部手机" class="headerlink" title="L5 Buying a Smartphone 买部手机"></a>L5 Buying a Smartphone 买部手机</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>top-of-the-line</td><td>adj.最具水准的，顶级的</td></tr><tr><td>have access to</td><td>可以使用，可以访问</td></tr><tr><td>out of credit</td><td>（手机）没话费，（银行）没存款</td></tr><tr><td>top up</td><td>给…加满，充值</td></tr></tbody></table><h3 id="L6-Bargaining-讨价还价"><a href="#L6-Bargaining-讨价还价" class="headerlink" title="L6 Bargaining 讨价还价"></a>L6 Bargaining 讨价还价</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>bargain</td><td>n.便宜货，交易 v.讨价还价</td></tr><tr><td>windfall</td><td>n.被风吹落的过时，意外之财</td></tr><tr><td>set somebody back</td><td>使花费</td></tr><tr><td>make an exception</td><td>破例，作为例外</td></tr></tbody></table><h3 id="L7-Checking-Out-结账"><a href="#L7-Checking-Out-结账" class="headerlink" title="L7 Checking Out 结账"></a>L7 Checking Out 结账</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>check out</td><td>结账离开</td></tr><tr><td>error</td><td>n.错误</td></tr><tr><td>credit card</td><td>信用卡</td></tr><tr><td>password</td><td>n.口令；密码</td></tr><tr><td>change</td><td>n.找头，找给的零钱</td></tr><tr><td>receipt</td><td>n.发票，收据</td></tr></tbody></table><h3 id="L8-Return-amp-Refund-归还-and-退款"><a href="#L8-Return-amp-Refund-归还-and-退款" class="headerlink" title="L8 Return &amp; Refund 归还 and 退款"></a>L8 Return &amp; Refund 归还 and 退款</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>return</td><td>v.归还</td></tr><tr><td>refund</td><td>v.退款</td></tr><tr><td>turn off</td><td>关闭，关掉</td></tr><tr><td>take care of</td><td>处理；照顾；注意</td></tr><tr><td>on one’s own</td><td>独自</td></tr></tbody></table><h3 id="L9-Online-Shopping-网上购物"><a href="#L9-Online-Shopping-网上购物" class="headerlink" title="L9 Online Shopping 网上购物"></a>L9 Online Shopping 网上购物</h3><table><thead><tr><th>word</th><th>shopping</th></tr></thead><tbody><tr><td>order</td><td>v.订购</td></tr><tr><td>deal</td><td>n.交易</td></tr><tr><td>discount</td><td>n.折扣</td></tr><tr><td>original</td><td>adj.原始的，最初的，独创的</td></tr></tbody></table><h2 id="Chapter-2-Dining-吃饭"><a href="#Chapter-2-Dining-吃饭" class="headerlink" title="Chapter 2 Dining 吃饭"></a>Chapter 2 Dining 吃饭</h2><h3 id="L12-In-a-Restaurant-在旅馆"><a href="#L12-In-a-Restaurant-在旅馆" class="headerlink" title="L12 In a Restaurant 在旅馆"></a>L12 In a Restaurant 在旅馆</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>free of charge</td><td>免费</td></tr><tr><td>main course</td><td>主菜，大菜</td></tr><tr><td>special</td><td>n.特色菜</td></tr><tr><td>offer</td><td>v.提供，供应</td></tr></tbody></table><h3 id="L13-In-the-Food-Court"><a href="#L13-In-the-Food-Court" class="headerlink" title="L13 In the Food Court"></a>L13 In the Food Court</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>be in the mood(for something…/to do something)</td><td>想要做</td></tr><tr><td>department store</td><td>百货公司，商场</td></tr><tr><td>enormous</td><td>adj.（尺寸，数量）巨大的，庞大的</td></tr><tr><td>food court</td><td>(商场内)饮食区，美食街</td></tr><tr><td>review</td><td>v.评论，复习</td></tr><tr><td>appetite</td><td>n.食欲，胃口，喜爱</td></tr></tbody></table><h3 id="L14-At-the-Cafe-在咖啡厅"><a href="#L14-At-the-Cafe-在咖啡厅" class="headerlink" title="L14 At the Cafe 在咖啡厅"></a>L14 At the Cafe 在咖啡厅</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>mocha</td><td>n.摩卡咖啡，摩卡</td></tr><tr><td>cappuccino</td><td>n.卡布奇诺咖啡</td></tr><tr><td>espresso</td><td>n.浓咖啡</td></tr><tr><td>brownie</td><td>n.布朗尼</td></tr></tbody></table><h3 id="L15-Eating-Junk-Food-吃垃圾食品"><a href="#L15-Eating-Junk-Food-吃垃圾食品" class="headerlink" title="L15 Eating Junk Food 吃垃圾食品"></a>L15 Eating Junk Food 吃垃圾食品</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>on a diet</td><td>节食减肥</td></tr><tr><td>junk food</td><td>垃圾食品</td></tr><tr><td>lolly</td><td>n.棒棒糖</td></tr><tr><td>addictive</td><td>adj.上瘾的</td></tr><tr><td>moderation</td><td>n.适度</td></tr></tbody></table><h3 id="L16-Chinese-Food"><a href="#L16-Chinese-Food" class="headerlink" title="L16 Chinese Food"></a>L16 Chinese Food</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>divide</td><td>v.把…分成</td></tr><tr><td>cuisine</td><td>n.烹调</td></tr><tr><td>Mapo Bean Curd</td><td>麻婆豆腐</td></tr><tr><td>Yuxiang Shredded Pork</td><td>鱼香肉丝</td></tr><tr><td>recommendation</td><td>n.建议，推荐</td></tr><tr><td>light</td><td>adj.淡的</td></tr></tbody></table><h3 id="L17-Ordering-Food-by-Phone"><a href="#L17-Ordering-Food-by-Phone" class="headerlink" title="L17 Ordering Food by Phone"></a>L17 Ordering Food by Phone</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>grocery</td><td>n.食品杂货</td></tr><tr><td>vanilla</td><td>n.香草（adj.香草味的）</td></tr><tr><td>syrup</td><td>n.糖浆</td></tr><tr><td>delivery boy</td><td>送货员</td></tr></tbody></table><h3 id="L18-Reserving-a-Table-at-a-Restaurant"><a href="#L18-Reserving-a-Table-at-a-Restaurant" class="headerlink" title="L18 Reserving a Table at a Restaurant"></a>L18 Reserving a Table at a Restaurant</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>assist</td><td>v.帮助</td></tr><tr><td>reservation</td><td>n.预购，预定</td></tr></tbody></table><h2 id="Chapter-3-Traveling"><a href="#Chapter-3-Traveling" class="headerlink" title="Chapter 3 Traveling"></a>Chapter 3 Traveling</h2><h3 id="L21-A-Pleasant-Journey"><a href="#L21-A-Pleasant-Journey" class="headerlink" title="L21 A Pleasant Journey"></a>L21 A Pleasant Journey</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>peaceful</td><td>adj.平静的，安静的</td></tr><tr><td>relaxing</td><td>adj.令人放松的，轻松的，有助于休息的</td></tr><tr><td>tight</td><td>adj.紧的，拮据的</td></tr><tr><td>upload</td><td>v.上传（程序或信息）</td></tr></tbody></table><h3 id="L22-Getting-a-License"><a href="#L22-Getting-a-License" class="headerlink" title="L22 Getting a License"></a>L22 Getting a License</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>driver’s license</td><td>驾照</td></tr><tr><td>gas</td><td>n.汽油，气体，瓦斯，毒气</td></tr><tr><td>maintenance</td><td>n.维修，保养</td></tr><tr><td>insurance</td><td>n.保险</td></tr><tr><td>public transport</td><td>公共交通</td></tr><tr><td>road trip</td><td>开车长途旅行</td></tr></tbody></table><h3 id="L23-Asking-for-Directions"><a href="#L23-Asking-for-Directions" class="headerlink" title="L23 Asking for Directions"></a>L23 Asking for Directions</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>distant</td><td>adj.遥远的</td></tr><tr><td>straight</td><td>adv.直地</td></tr><tr><td>intersection</td><td>n.十字路口</td></tr><tr><td>block</td><td>n.街区</td></tr></tbody></table><h3 id="L24-Applying-for-a-Passport"><a href="#L24-Applying-for-a-Passport" class="headerlink" title="L24 Applying for a Passport"></a>L24 Applying for a Passport</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>figure out</td><td>弄清楚；解决</td></tr><tr><td>document</td><td>n.文件</td></tr><tr><td>submit</td><td>v.提交，呈送</td></tr><tr><td>fill out</td><td>填写</td></tr><tr><td>apply</td><td>v.申请</td></tr></tbody></table><h3 id="L25-Checking-in"><a href="#L25-Checking-in" class="headerlink" title="L25 Checking in"></a>L25 Checking in</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>check in</td><td>(在旅馆、机场等)登记，报到</td></tr><tr><td>reservation</td><td>n.预约，预定</td></tr><tr><td>request</td><td>n.(礼貌、正式的)要求，请求</td></tr><tr><td>departure</td><td>n.(人、交通工具等)离开；启程，出发</td></tr></tbody></table><h3 id="L26-Room-Service"><a href="#L26-Room-Service" class="headerlink" title="L26 Room Service"></a>L26 Room Service</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>Department</td><td>n.部，局，处，系</td></tr><tr><td>order</td><td>v.(尤其指在饭店或者商店)点（饭菜），订购</td></tr><tr><td>a set of</td><td>套，副</td></tr><tr><td>serve</td><td>v.提供（食物或者饮料）</td></tr></tbody></table><h3 id="L27-At-the-Airport"><a href="#L27-At-the-Airport" class="headerlink" title="L27 At the Airport"></a>L27 At the Airport</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>passport</td><td>n.护照</td></tr><tr><td>visa</td><td>n.签证</td></tr><tr><td>stopover</td><td>n.中途停留</td></tr><tr><td>board</td><td>v.上船（或火车、飞机）</td></tr><tr><td>delightful</td><td>adj.令人愉快的</td></tr><tr><td>assistance</td><td>n.帮助，援助，扶持</td></tr></tbody></table><h2 id="Chapter-4-Daily-Life"><a href="#Chapter-4-Daily-Life" class="headerlink" title="Chapter 4 Daily Life"></a>Chapter 4 Daily Life</h2><h3 id="L30-Finding-a-Book-at-the-Bookstore"><a href="#L30-Finding-a-Book-at-the-Bookstore" class="headerlink" title="L30 Finding a Book at the Bookstore"></a>L30 Finding a Book at the Bookstore</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>fiction</td><td>n.小说</td></tr><tr><td>release</td><td>v.发布（新书等）</td></tr><tr><td>title</td><td>n.题目，标题，名字</td></tr><tr><td>bestseller</td><td>n.畅销书</td></tr></tbody></table><h3 id="L31-Renting-an-Apartment"><a href="#L31-Renting-an-Apartment" class="headerlink" title="L31 Renting an Apartment"></a>L31 Renting an Apartment</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>apartment</td><td>n.公寓套房</td></tr><tr><td>location</td><td>n.地点，位置</td></tr><tr><td>magnificent</td><td>adj.极好的，壮丽的，令人羡慕的</td></tr><tr><td>lease</td><td>n.租借，租约</td></tr></tbody></table><h3 id="L32-Opening-a-Bank-Account"><a href="#L32-Opening-a-Bank-Account" class="headerlink" title="L32 Opening a Bank Account"></a>L32 Opening a Bank Account</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>valid</td><td>adj.(票或其他文件)有效的，正式认可的</td></tr><tr><td>initial</td><td>adj.开始的，最初的</td></tr><tr><td>deposit</td><td>v.将（钱）存入银行，存储</td></tr><tr><td>account</td><td>n.账户，户头</td></tr></tbody></table><h3 id="L33-Making-Phone-Calls"><a href="#L33-Making-Phone-Calls" class="headerlink" title="L33 Making Phone Calls"></a>L33 Making Phone Calls</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>appointment</td><td>n.约会，预约，约定</td></tr><tr><td>be able to</td><td>能够做某事</td></tr><tr><td>available</td><td>adj.可获得的，可用的</td></tr><tr><td>pass on</td><td>将…传给，将…交给</td></tr><tr><td>apology</td><td>n.道歉，认错谢罪</td></tr></tbody></table><h3 id="L34-A-Visit-to-the-Hospital"><a href="#L34-A-Visit-to-the-Hospital" class="headerlink" title="L34 A Visit to the Hospital"></a>L34 A Visit to the Hospital</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>temperature</td><td>n.温度，体温</td></tr><tr><td>flu</td><td>n.流行性感冒，流感</td></tr><tr><td>medicine</td><td>n.药，药物，药剂</td></tr><tr><td>pharmacy</td><td>n.药店，药房，（商店的）药品部</td></tr></tbody></table><h3 id="L35-At-the-Amusement-Park"><a href="#L35-At-the-Amusement-Park" class="headerlink" title="L35 At the Amusement Park"></a>L35 At the Amusement Park</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>roller coaster</td><td>过山车</td></tr><tr><td>thrill</td><td>n.兴奋，激动，紧张感</td></tr><tr><td>adventure</td><td>n.冒险，历险，奇遇</td></tr><tr><td>confess</td><td>v.坦白，供认，招认，承认（错误或者罪行）</td></tr><tr><td>scared</td><td>adj.惊恐的，恐惧的，害怕的</td></tr></tbody></table><h2 id="Chapter5-Entertainment"><a href="#Chapter5-Entertainment" class="headerlink" title="Chapter5 Entertainment"></a>Chapter5 Entertainment</h2><h3 id="L38-Going-to-the-Movies"><a href="#L38-Going-to-the-Movies" class="headerlink" title="L38 Going to the Movies"></a>L38 Going to the Movies</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>scary</td><td>adj.令人恐怖的</td></tr><tr><td>comedy</td><td>n.喜剧，喜剧片</td></tr><tr><td>action movie</td><td>动作片</td></tr><tr><td>pick somebody up</td><td>(通常指开车)接载，取走</td></tr></tbody></table><h3 id="L39-A-Visit-to-the-Zoo"><a href="#L39-A-Visit-to-the-Zoo" class="headerlink" title="L39 A Visit to the Zoo"></a>L39 A Visit to the Zoo</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>captivity</td><td>n.关押，囚禁</td></tr><tr><td>upside</td><td>n.优点，好处，有利的一面</td></tr><tr><td>check out</td><td>看一看，瞧瞧（某物，尤其指新的事物）</td></tr><tr><td>alpaca</td><td>n.(南美的)羊驼</td></tr></tbody></table><h3 id="L40-Working-out-at-the-Gym"><a href="#L40-Working-out-at-the-Gym" class="headerlink" title="L40 Working out at the Gym"></a>L40 Working out at the Gym</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>gym</td><td>n.健身俱乐部</td></tr><tr><td>instructor</td><td>n.教练</td></tr><tr><td>wonder</td><td>v.疑惑，想知道</td></tr><tr><td>cardio</td><td>n.有氧运动</td></tr></tbody></table><h3 id="L41-Visiting-a-Museum"><a href="#L41-Visiting-a-Museum" class="headerlink" title="L41 Visiting a Museum"></a>L41 Visiting a Museum</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>audio</td><td>adj.声音的，录音的，播音的，音频的</td></tr><tr><td>permanent</td><td>adj.长久的，永久的，永恒的</td></tr><tr><td>except for</td><td>除…之外</td></tr><tr><td>photography</td><td>n.照相术，摄影</td></tr></tbody></table><h3 id="L42-The-Concert"><a href="#L42-The-Concert" class="headerlink" title="L42 The Concert"></a>L42 The Concert</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>successful</td><td>adj.成功的，达到目的的</td></tr><tr><td>concert</td><td>n.现场演出，演唱会</td></tr><tr><td>row</td><td>n.一排，一行，一列</td></tr><tr><td>sell out</td><td>卖光</td></tr></tbody></table><h3 id="L43-Going-to-a-Book-Fair"><a href="#L43-Going-to-a-Book-Fair" class="headerlink" title="L43 Going to a Book Fair"></a>L43 Going to a Book Fair</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>fair</td><td>n.商品展销会，商品交易会</td></tr><tr><td>illustrator</td><td>n.(尤其指书籍的)插图画家</td></tr><tr><td>line up</td><td>排队</td></tr><tr><td>be crowded with</td><td>充满，拥挤，挤满</td></tr><tr><td>signature</td><td>n.签名</td></tr><tr><td>dawn</td><td>n.拂晓，破晓，黎明</td></tr></tbody></table><h2 id="Chapter-6-Education"><a href="#Chapter-6-Education" class="headerlink" title="Chapter 6 Education"></a>Chapter 6 Education</h2><h3 id="L46-At-the-Library"><a href="#L46-At-the-Library" class="headerlink" title="L46 At the Library"></a>L46 At the Library</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>procedure</td><td>n.流程，手续</td></tr><tr><td>librarian</td><td>n.图书管理员，图书馆馆长</td></tr><tr><td>check out</td><td>借出（书籍等）</td></tr><tr><td>wing</td><td>n.(建筑的)侧厅，厢房</td></tr><tr><td>hand in</td><td>递交，提交</td></tr></tbody></table><h3 id="L47-In-the-Dorm"><a href="#L47-In-the-Dorm" class="headerlink" title="L47 In the Dorm"></a>L47 In the Dorm</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>roommate</td><td>n.室友</td></tr><tr><td>berth</td><td>n.床位，铺位</td></tr><tr><td>dorm</td><td>n.宿舍</td></tr><tr><td>by the way</td><td>顺带一提</td></tr><tr><td>work out</td><td>(顺利)发展，进行</td></tr></tbody></table><h3 id="L48-Taking-an-Exam"><a href="#L48-Taking-an-Exam" class="headerlink" title="L48 Taking an Exam"></a>L48 Taking an Exam</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>tough</td><td>adj.难熬的</td></tr><tr><td>paper</td><td>n.论文</td></tr><tr><td>due</td><td>adj.到期的，应上交的</td></tr><tr><td>percentage</td><td>n.百分比</td></tr><tr><td>pull an all-nighter</td><td>熬夜，开夜车（学习）</td></tr></tbody></table><h3 id="L49-University-Classes"><a href="#L49-University-Classes" class="headerlink" title="L49 University Classes"></a>L49 University Classes</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>available</td><td>adj.可选的，可用的</td></tr><tr><td>register (for…)</td><td>v.注册，选（课）</td></tr><tr><td>instructor</td><td>n.讲师，教员</td></tr><tr><td>fail</td><td>v.挂（科）</td></tr><tr><td>easy grader</td><td>给分宽的教授/老师</td></tr></tbody></table><h3 id="L50-Studying-Abroad"><a href="#L50-Studying-Abroad" class="headerlink" title="L50 Studying Abroad"></a>L50 Studying Abroad</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>abroad</td><td>adv.在国外，到国外</td></tr><tr><td>upcoming</td><td>adj.即将到来的</td></tr><tr><td>sort of</td><td>有一点，稍微</td></tr><tr><td>terribly</td><td>adv.非常，极度</td></tr><tr><td>make up one’s mind</td><td>下定决心</td></tr></tbody></table><h3 id="L51-Studying-Online"><a href="#L51-Studying-Online" class="headerlink" title="L51 Studying Online"></a>L51 Studying Online</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>face to face</td><td>adj.面对面的 adv.面对面地</td></tr><tr><td>to be frank</td><td>坦白说</td></tr><tr><td>people person</td><td>喜欢和人打交道的人</td></tr><tr><td>affordable</td><td>adj.便宜的</td></tr><tr><td>make sense</td><td>说得通，有道理</td></tr></tbody></table><h2 id="Chapter-7-Work"><a href="#Chapter-7-Work" class="headerlink" title="Chapter 7 Work"></a>Chapter 7 Work</h2><h3 id="L54-Job-hunting"><a href="#L54-Job-hunting" class="headerlink" title="L54 Job hunting"></a>L54 Job hunting</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>hunt(for…)</td><td>v.搜索，寻找</td></tr><tr><td>resume</td><td>n.简历</td></tr><tr><td>follow up</td><td>跟进</td></tr><tr><td>initiative</td><td>n.主动性，进取心</td></tr><tr><td>on a roll</td><td>好运连连</td></tr></tbody></table><h3 id="L55-Job-Interview"><a href="#L55-Job-Interview" class="headerlink" title="L55 Job Interview"></a>L55 Job Interview</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>employer</td><td>n.雇主，公司</td></tr><tr><td>tend to (do something)</td><td>倾向于，往往会做（某事）</td></tr><tr><td>strength</td><td>n.强项，长处</td></tr><tr><td>weakness</td><td>n.弱点</td></tr><tr><td>have trouble (doing something)</td><td>(做某事)有困难，有麻烦</td></tr></tbody></table><h3 id="L56-Arriving-Late"><a href="#L56-Arriving-Late" class="headerlink" title="L56 Arriving Late"></a>L56 Arriving Late</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>continual</td><td>adj.连续的，频繁的</td></tr><tr><td>hold up</td><td>阻碍，使停滞</td></tr><tr><td>anticipate</td><td>v.预测，预料</td></tr><tr><td>promise</td><td>v.承诺</td></tr><tr><td>plan on (doing something) 计划，打算（做某事）</td><td></td></tr></tbody></table><h3 id="L57-Asking-for-a-Leave"><a href="#L57-Asking-for-a-Leave" class="headerlink" title="L57 Asking for a Leave"></a>L57 Asking for a Leave</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>flu</td><td>n.流感</td></tr><tr><td>log</td><td>v.登记，记录</td></tr><tr><td>cover</td><td>v.照料，处理</td></tr><tr><td>urgent</td><td>adj.紧急的</td></tr><tr><td>sick day</td><td>病假日</td></tr></tbody></table><h3 id="L58-Working-Overtine"><a href="#L58-Working-Overtine" class="headerlink" title="L58 Working Overtine"></a>L58 Working Overtine</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>punch out</td><td>打卡（下班）</td></tr><tr><td>no way</td><td>没门儿，想得美</td></tr><tr><td>first thing</td><td>首先，一大早</td></tr><tr><td>deadline</td><td>n.截止日期，交付期限</td></tr><tr><td>have had enough of</td><td>受够了</td></tr></tbody></table><h3 id="L59-Meetings"><a href="#L59-Meetings" class="headerlink" title="L59 Meetings"></a>L59 Meetings</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>regular meeting</td><td>例会</td></tr><tr><td>brief</td><td>简短的，简洁的</td></tr><tr><td>client</td><td>n.客户</td></tr><tr><td>behind schedule</td><td>(进度)落后</td></tr><tr><td>halfway through</td><td>到一半，到中途</td></tr></tbody></table><h3 id="L60-Asking-for-a-Rise"><a href="#L60-Asking-for-a-Rise" class="headerlink" title="L60 Asking for a Rise"></a>L60 Asking for a Rise</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>salary</td><td>n.薪水，工资</td></tr><tr><td>raise</td><td>n.加薪</td></tr><tr><td>lay off</td><td>解雇，开除</td></tr><tr><td>exception</td><td>n.例外</td></tr><tr><td>take on</td><td>承担</td></tr></tbody></table><h3 id="L61-Promotion"><a href="#L61-Promotion" class="headerlink" title="L61 Promotion"></a>L61 Promotion</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>replacement</td><td>n.替代，替补</td></tr><tr><td>post</td><td>v.张贴，公布</td></tr><tr><td>internal</td><td>adj.内部的</td></tr><tr><td>let (someone) down</td><td>使（某人）失望</td></tr><tr><td>apply (for…)</td><td>v.申请</td></tr></tbody></table><h3 id="L63-Starting-a-Business"><a href="#L63-Starting-a-Business" class="headerlink" title="L63 Starting a Business"></a>L63 Starting a Business</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>abandon</td><td>v.放弃，抛弃</td></tr><tr><td>regulation</td><td>n.规章，制度</td></tr><tr><td>themed</td><td>adj.(以…为)主题的</td></tr><tr><td>start-up</td><td>adj.初创的，启动的</td></tr><tr><td>one of a kind</td><td>独一无二的</td></tr></tbody></table><h2 id="Chapter-8-Health"><a href="#Chapter-8-Health" class="headerlink" title="Chapter 8 Health"></a>Chapter 8 Health</h2><h3 id="L65-Sports"><a href="#L65-Sports" class="headerlink" title="L65 Sports"></a>L65 Sports</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>cycling</td><td>n.骑行</td></tr><tr><td>cyclist</td><td>n.骑自行车的人</td></tr><tr><td>court</td><td>n.球场</td></tr><tr><td>pavement</td><td>n.人行道</td></tr><tr><td>running track</td><td>跑道</td></tr></tbody></table><h3 id="L66-Weight-Control"><a href="#L66-Weight-Control" class="headerlink" title="L66 Weight Control"></a>L66 Weight Control</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>diet</td><td>n.规定饮食，节食</td></tr><tr><td>fat</td><td>n.脂肪</td></tr><tr><td>metabolism</td><td>n.新陈代谢</td></tr><tr><td>speed up</td><td>加速，使…加速</td></tr><tr><td>incorporate</td><td>v.融入，结合</td></tr></tbody></table><h3 id="L67-Aches-and-Pains"><a href="#L67-Aches-and-Pains" class="headerlink" title="L67 Aches and Pains"></a>L67 Aches and Pains</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>limp</td><td>v.跛行，一瘸一拐</td></tr><tr><td>ache</td><td>n./v. 疼，痛</td></tr><tr><td>sore</td><td>adj.酸痛的</td></tr><tr><td>butt</td><td>n.臀部，屁股</td></tr><tr><td>cramp</td><td>n.痉挛，抽筋，绞痛</td></tr></tbody></table><h3 id="L68-Medical-Check-up"><a href="#L68-Medical-Check-up" class="headerlink" title="L68 Medical Check-up"></a>L68 Medical Check-up</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>check-up</td><td>n.体检，健康检查</td></tr><tr><td>at least</td><td>至少</td></tr><tr><td>cause</td><td>n.(尤其指不好的事情发生)原因，起因</td></tr><tr><td>medicine</td><td>n.药，药物，药剂</td></tr><tr><td>quit</td><td>v.停止，放弃</td></tr></tbody></table><h3 id="L69-Seeing-a-Doctor"><a href="#L69-Seeing-a-Doctor" class="headerlink" title="L69 Seeing a Doctor"></a>L69 Seeing a Doctor</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>nauseous</td><td>adj.感到恶心的，想呕吐的</td></tr><tr><td>discomfort</td><td>n.不适，不安，不舒服</td></tr><tr><td>on and off</td><td>时断时续地，间歇的</td></tr><tr><td>recover</td><td>v.(在疾病或受伤之后)完全恢复健康</td></tr><tr><td>allergic</td><td>adj.过敏的</td></tr></tbody></table><h3 id="L70-At-the-Drugstore"><a href="#L70-At-the-Drugstore" class="headerlink" title="L70 At the Drugstore"></a>L70 At the Drugstore</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>pill</td><td>n.药片</td></tr><tr><td>treatment</td><td>n.治疗手段，疗法</td></tr><tr><td>symptom</td><td>n.症状</td></tr><tr><td>prescription</td><td>n.处方</td></tr><tr><td>suffer (from…)</td><td>v.饱受…之苦</td></tr></tbody></table><h3 id="L71-Chinese-Medicine"><a href="#L71-Chinese-Medicine" class="headerlink" title="L71 Chinese Medicine"></a>L71 Chinese Medicine</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>acupuncture</td><td>n.针灸</td></tr><tr><td>traditional</td><td>adj.传统的</td></tr><tr><td>occurrence</td><td>n.发生</td></tr><tr><td>herb</td><td>n.药草</td></tr><tr><td>mineral</td><td>n.矿物，矿物质</td></tr></tbody></table><h3 id="L72-Plastic-Surgery"><a href="#L72-Plastic-Surgery" class="headerlink" title="L72 Plastic Surgery"></a>L72 Plastic Surgery</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>plastic surgery</td><td>整容手术</td></tr><tr><td>wrinkle</td><td>n.皱纹</td></tr><tr><td>ridiculous</td><td>adj.荒唐的，胡闹的</td></tr><tr><td>weird</td><td>adj.古怪的</td></tr><tr><td>black and blue</td><td>青一块紫一块，遍体鳞伤</td></tr></tbody></table><h3 id="L73-Staying-Up-Late"><a href="#L73-Staying-Up-Late" class="headerlink" title="L73 Staying Up Late"></a>L73 Staying Up Late</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>average</td><td>adj.平均的</td></tr><tr><td>stay up</td><td>熬夜</td></tr><tr><td>nervous</td><td>adj.紧张的</td></tr><tr><td>fall asleep</td><td>睡着，进入梦乡</td></tr><tr><td>condition</td><td>n.条件，环境</td></tr></tbody></table><h2 id="Chapter-9-Social"><a href="#Chapter-9-Social" class="headerlink" title="Chapter 9 Social"></a>Chapter 9 Social</h2><h3 id="L76-The-Only-Child"><a href="#L76-The-Only-Child" class="headerlink" title="L76 The Only Child"></a>L76 The Only Child</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>dedicate</td><td>v. 努力，奉献</td></tr><tr><td>attention</td><td>n.关注</td></tr><tr><td>deserve</td><td>v.应得</td></tr><tr><td>sibling</td><td>n.兄弟姐妹</td></tr><tr><td>share</td><td>v.分享</td></tr></tbody></table><h3 id="L77-Arguing-with-Your-Friend"><a href="#L77-Arguing-with-Your-Friend" class="headerlink" title="L77 Arguing with Your Friend"></a>L77 Arguing with Your Friend</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>argument</td><td>n.争吵</td></tr><tr><td>disagreemet</td><td>n.不一致，争论，意见不同</td></tr><tr><td>patch up</td><td>修补</td></tr><tr><td>ruin</td><td>v.毁灭</td></tr></tbody></table><h3 id="L78-Taking-Part-in-a-Party"><a href="#L78-Taking-Part-in-a-Party" class="headerlink" title="L78 Taking Part in a Party"></a>L78 Taking Part in a Party</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>turn up</td><td>出现</td></tr><tr><td>squeeze</td><td>n.拥挤</td></tr><tr><td>look forward to</td><td>期待</td></tr><tr><td>blast</td><td>n.热闹的聚会</td></tr></tbody></table><h3 id="L79-Talking-about-Weather"><a href="#L79-Talking-about-Weather" class="headerlink" title="L79 Talking about Weather"></a>L79 Talking about Weather</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>be raining cats and dogs</td><td>倾盆大雨</td></tr><tr><td>miserable</td><td>adj.令人痛苦的</td></tr><tr><td>drought</td><td>n.干旱</td></tr><tr><td>forecaster</td><td>n.预报员</td></tr><tr><td>predict</td><td>v.预报</td></tr></tbody></table><h3 id="L80-Talking-about-Hobbies"><a href="#L80-Talking-about-Hobbies" class="headerlink" title="L80 Talking about Hobbies"></a>L80 Talking about Hobbies</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>in one’s spare time</td><td>空闲时间</td></tr><tr><td>get into</td><td>开始对…感兴趣</td></tr><tr><td>leisure</td><td>n.空闲</td></tr><tr><td>be occupied with doing</td><td>忙于</td></tr><tr><td>take up</td><td>开始从事</td></tr></tbody></table><h3 id="L81-Talking-about-Future-Plans"><a href="#L81-Talking-about-Future-Plans" class="headerlink" title="L81 Talking about Future Plans"></a>L81 Talking about Future Plans</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>graduate</td><td>v.毕业</td></tr><tr><td>overcome</td><td>v.克服</td></tr><tr><td>ambition</td><td>n.抱负，志向</td></tr><tr><td>realistic</td><td>adj.实事求是的</td></tr></tbody></table><h3 id="L82-Chatting-with-the-Neighbor"><a href="#L82-Chatting-with-the-Neighbor" class="headerlink" title="L82 Chatting with the Neighbor"></a>L82 Chatting with the Neighbor</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>community</td><td>社区</td></tr><tr><td>stop by</td><td>顺便拜访</td></tr><tr><td>make one’s acquanintance</td><td>初次相识</td></tr><tr><td>convenient</td><td>adj.方便的</td></tr><tr><td>show sb. around</td><td>带（某人）参观</td></tr></tbody></table><h3 id="L83-Giving-Suggestions"><a href="#L83-Giving-Suggestions" class="headerlink" title="L83 Giving Suggestions"></a>L83 Giving Suggestions</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>give ab. a hand</td><td>帮助</td></tr><tr><td>essential</td><td>adj.必要的</td></tr><tr><td>definitely</td><td>adv.肯定，当然</td></tr><tr><td>eye-catching</td><td>adj.引人注目的</td></tr><tr><td>work on</td><td>改善</td></tr></tbody></table><h3 id="L84-Body-Language"><a href="#L84-Body-Language" class="headerlink" title="L84 Body Language"></a>L84 Body Language</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>impressive</td><td>adj.给人留下深刻印象的</td></tr><tr><td>make eye contact with</td><td>眼神接触</td></tr><tr><td>slouch</td><td>v.低头垂肩地站（或者坐、走）</td></tr><tr><td>posture</td><td>n.姿态</td></tr><tr><td>body language</td><td>肢体语言</td></tr></tbody></table><h2 id="Chapter-10-Holidays"><a href="#Chapter-10-Holidays" class="headerlink" title="Chapter 10 Holidays"></a>Chapter 10 Holidays</h2><h3 id="L87-April-Fool’s-Day"><a href="#L87-April-Fool’s-Day" class="headerlink" title="L87 April Fool’s Day"></a>L87 April Fool’s Day</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>prank</td><td>n.恶作剧</td></tr><tr><td>gullible</td><td>adj.容易上当的</td></tr><tr><td>hoax</td><td>n.恶作剧，骗局</td></tr><tr><td>make fool of</td><td>愚弄</td></tr><tr><td>lighten up</td><td>使…放松，使…缓和</td></tr></tbody></table><h3 id="L88-Thanksgiving-Day"><a href="#L88-Thanksgiving-Day" class="headerlink" title="L88 Thanksgiving Day"></a>L88 Thanksgiving Day</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>harvest</td><td>n.收货，收成</td></tr><tr><td>gratitude</td><td>n.感谢</td></tr><tr><td>tasty</td><td>adj.美味的</td></tr><tr><td>turkey</td><td>n.火鸡</td></tr></tbody></table><h3 id="L89-Halloween"><a href="#L89-Halloween" class="headerlink" title="L89 Halloween"></a>L89 Halloween</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>dress up</td><td>装扮</td></tr><tr><td>costume</td><td>n.化妆服</td></tr><tr><td>decorate</td><td>v.装饰</td></tr><tr><td>spooky</td><td>adj.怪异的，诡异的</td></tr><tr><td>get under sb’s skin</td><td>激怒某人</td></tr></tbody></table><h3 id="L90-Christmas"><a href="#L90-Christmas" class="headerlink" title="L90 Christmas"></a>L90 Christmas</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>date back to</td><td>追溯</td></tr><tr><td>ornament</td><td>n.装饰品</td></tr><tr><td>chimney</td><td>n.烟囱</td></tr><tr><td>Santa Claus</td><td>圣诞老人</td></tr><tr><td>prominent</td><td>adj.显眼的</td></tr></tbody></table><h3 id="L91-Mother’s-Day"><a href="#L91-Mother’s-Day" class="headerlink" title="L91 Mother’s Day"></a>L91 Mother’s Day</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>carnation</td><td>n.康乃馨</td></tr><tr><td>put up with</td><td>忍受，忍耐</td></tr><tr><td>give birth to</td><td>分娩</td></tr><tr><td>pregnancy</td><td>n.分娩</td></tr><tr><td>contribute…to…</td><td>奉献</td></tr></tbody></table><h3 id="L92-New-Year"><a href="#L92-New-Year" class="headerlink" title="L92 New Year"></a>L92 New Year</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>be about to</td><td>即将，刚要，正打算</td></tr><tr><td>clean slate</td><td>空白</td></tr><tr><td>resolution</td><td>n.决心</td></tr><tr><td>spectacular</td><td>adj.壮观的，壮丽的，令人惊叹的</td></tr><tr><td>countdown</td><td>n.倒计时</td></tr></tbody></table><h3 id="L93-Spring-Festival"><a href="#L93-Spring-Festival" class="headerlink" title="L93 Spring Festival"></a>L93 Spring Festival</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>couplet</td><td>n.对句</td></tr><tr><td>sweep away</td><td>一扫而空</td></tr><tr><td>gala</td><td>n.庆典，盛会</td></tr><tr><td>set off</td><td>使爆炸</td></tr><tr><td>firecracker</td><td>n.爆竹</td></tr></tbody></table><h3 id="L94-Mid-Autumn-Festival"><a href="#L94-Mid-Autumn-Festival" class="headerlink" title="L94 Mid-Autumn Festival"></a>L94 Mid-Autumn Festival</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>lunar calendar</td><td>阴历</td></tr><tr><td>reunion</td><td>n.团聚</td></tr><tr><td>riddle</td><td>n.谜语</td></tr><tr><td>lantern</td><td>n.灯笼</td></tr><tr><td>mooncake</td><td>n.月饼</td></tr></tbody></table><h3 id="L95-Dragon-Boat-Festival"><a href="#L95-Dragon-Boat-Festival" class="headerlink" title="L95 Dragon Boat Festival"></a>L95 Dragon Boat Festival</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>commemorate</td><td>v.纪念，缅怀</td></tr><tr><td>glutinous rice</td><td>糯米</td></tr><tr><td>participate in</td><td>参与</td></tr><tr><td>take the lead</td><td>领先</td></tr><tr><td>fervent</td><td>adj.热情的</td></tr></tbody></table><h2 id="Chapter-11-Emotions-and-Attitudes"><a href="#Chapter-11-Emotions-and-Attitudes" class="headerlink" title="Chapter 11 Emotions and Attitudes"></a>Chapter 11 Emotions and Attitudes</h2><h3 id="L98-Delight"><a href="#L98-Delight" class="headerlink" title="L98 Delight"></a>L98 Delight</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>on cloud nine</td><td>非常高兴</td></tr><tr><td>can’t help doing</td><td>不禁</td></tr><tr><td>over the moon</td><td>欣喜若狂</td></tr><tr><td>terrific</td><td>adj.极好的</td></tr><tr><td>rejoice</td><td>v.高兴</td></tr></tbody></table><h3 id="L99-Sadness"><a href="#L99-Sadness" class="headerlink" title="L99 Sadness"></a>L99 Sadness</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>out of sorts</td><td>心情不佳，身体不适</td></tr><tr><td>discouraged</td><td>adj.心灰意冷的</td></tr><tr><td>bummer</td><td>n.令人不快的事</td></tr><tr><td>gloomy</td><td>adj.忧郁的</td></tr><tr><td>grief</td><td>n.悲伤</td></tr></tbody></table><h3 id="L100-Anger"><a href="#L100-Anger" class="headerlink" title="L100 Anger"></a>L100 Anger</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>flare up</td><td>突然发怒</td></tr><tr><td>enrage</td><td>v.激怒</td></tr><tr><td>short-tempered</td><td>adj.易怒的</td></tr><tr><td>piss somebody off</td><td>使恼火</td></tr><tr><td>blow a fuse</td><td>勃然大怒</td></tr></tbody></table><h3 id="L101-Complaint"><a href="#L101-Complaint" class="headerlink" title="L101 Complaint"></a>L101 Complaint</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>complaint</td><td>n.抱怨</td></tr><tr><td>make a fuss</td><td>大惊小怪</td></tr><tr><td>pass the buck</td><td>推卸责任</td></tr><tr><td>negligence</td><td>n.疏漏</td></tr><tr><td>lose heart</td><td>失望</td></tr></tbody></table><h3 id="L102-Compliment"><a href="#L102-Compliment" class="headerlink" title="L102 Compliment"></a>L102 Compliment</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>gifted</td><td>adj.有天赋的</td></tr><tr><td>compliment</td><td>n.赞美</td></tr><tr><td>flatter</td><td>v.奉承</td></tr><tr><td>diligent</td><td>adj.认真刻苦</td></tr><tr><td>pay off</td><td>取得成功</td></tr></tbody></table><h3 id="L103-Apology"><a href="#L103-Apology" class="headerlink" title="L103 Apology"></a>L103 Apology</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>yell at</td><td>吼叫</td></tr><tr><td>apologize</td><td>v.道歉</td></tr><tr><td>after all</td><td>毕竟</td></tr><tr><td>slip somebody’s mind</td><td>忘记</td></tr><tr><td>make up for</td><td>补偿</td></tr></tbody></table><h2 id="Chapter-12-Enviroment"><a href="#Chapter-12-Enviroment" class="headerlink" title="Chapter 12 Enviroment"></a>Chapter 12 Enviroment</h2><h3 id="L106-Air-Pollution"><a href="#L106-Air-Pollution" class="headerlink" title="L106 Air Pollution"></a>L106 Air Pollution</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>smog</td><td>n.雾霾</td></tr><tr><td>emission</td><td>n.排放</td></tr><tr><td>exhaust fume</td><td>尾气</td></tr><tr><td>bacteria</td><td>n.细菌</td></tr><tr><td>suburb</td><td>n.郊区</td></tr></tbody></table><h3 id="L107-Global-Warming"><a href="#L107-Global-Warming" class="headerlink" title="L107 Global Warming"></a>L107 Global Warming</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>carbon dioxide</td><td>二氧化碳</td></tr><tr><td>global warming</td><td>全球变暖</td></tr><tr><td>greenhouse effect</td><td>温室效应</td></tr><tr><td>glacier</td><td>n.冰川</td></tr><tr><td>in jeopardy</td><td>处于危险之中</td></tr></tbody></table><h3 id="L108-Desertification"><a href="#L108-Desertification" class="headerlink" title="L108 Desertification"></a>L108 Desertification</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>desertification</td><td>n.荒漠化</td></tr><tr><td>expansion</td><td>n.扩大，增加，扩展</td></tr><tr><td>fertile</td><td>adj.肥沃的</td></tr><tr><td>soil</td><td>n.土壤</td></tr><tr><td>delicate</td><td>adj.脆弱的</td></tr></tbody></table><h3 id="L109-Energy"><a href="#L109-Energy" class="headerlink" title="L109 Energy"></a>L109 Energy</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>sustainable</td><td>adj.可持续的</td></tr><tr><td>alternative</td><td>adj.可替代的</td></tr><tr><td>recycle</td><td>v.回收再用</td></tr><tr><td>pervade</td><td>v.渗透</td></tr><tr><td>properly</td><td>adv.正确地，合适地</td></tr></tbody></table><h3 id="L110-Extinction"><a href="#L110-Extinction" class="headerlink" title="L110 Extinction"></a>L110 Extinction</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>extinction</td><td>n.灭绝</td></tr><tr><td>trafficking</td><td>n.非法交易</td></tr><tr><td>conservation</td><td>n.(对动植物、自然地区、历史建筑等的)保护</td></tr><tr><td>species</td><td>n.种，物种</td></tr><tr><td>habitat</td><td>n.栖息地</td></tr></tbody></table><h3 id="L111-Green-Living"><a href="#L111-Green-Living" class="headerlink" title="L111 Green Living"></a>L111 Green Living</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>devastation</td><td>n.毁灭</td></tr><tr><td>green living</td><td>绿色生活</td></tr><tr><td>unleaded petrol</td><td>无铅汽油</td></tr><tr><td>renewable energy</td><td>可再生能源</td></tr><tr><td>devoid</td><td>adj.缺乏的</td></tr></tbody></table><h2 id="Chapter-13-Society"><a href="#Chapter-13-Society" class="headerlink" title="Chapter 13 Society"></a>Chapter 13 Society</h2><h3 id="L114-Food-Safety"><a href="#L114-Food-Safety" class="headerlink" title="L114 Food Safety"></a>L114 Food Safety</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>scandal</td><td>n.丑闻</td></tr><tr><td>expose</td><td>v.使曝光</td></tr><tr><td>supervision</td><td>n.监督，管理</td></tr><tr><td>expired</td><td>adj.过期的</td></tr><tr><td>additive</td><td>n.添加剂</td></tr></tbody></table><h3 id="L115-Social-Security"><a href="#L115-Social-Security" class="headerlink" title="L115 Social Security"></a>L115 Social Security</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>social security</td><td>社保</td></tr><tr><td>put away</td><td>存钱</td></tr><tr><td>retirement</td><td>n.退休</td></tr><tr><td>deduct</td><td>v.减去</td></tr><tr><td>nest egg</td><td>备用的钱，备用金</td></tr></tbody></table><h3 id="L116-Aging-Population"><a href="#L116-Aging-Population" class="headerlink" title="L116 Aging Population"></a>L116 Aging Population</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>proportion</td><td>n.比率，比例</td></tr><tr><td>fertility</td><td>n.(动植物的)生殖力</td></tr><tr><td>longevity</td><td>n.长寿</td></tr><tr><td>adequate</td><td>adj.足够的，合格的</td></tr><tr><td>demographic</td><td>adj.人口的</td></tr></tbody></table><h3 id="L117-Artificial-Intelligence"><a href="#L117-Artificial-Intelligence" class="headerlink" title="L117 Artificial Intelligence"></a>L117 Artificial Intelligence</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>artificial intelligence</td><td>人工智能</td></tr><tr><td>sophisticated</td><td>adj.精密的，复杂的，高级的</td></tr><tr><td>advanced</td><td>adj.先进的</td></tr><tr><td>complex</td><td>adj.复杂的</td></tr><tr><td>unmanned</td><td>adj.无人的</td></tr></tbody></table><h3 id="L118-Sharing-Economy"><a href="#L118-Sharing-Economy" class="headerlink" title="L118 Sharing Economy"></a>L118 Sharing Economy</h3><table><thead><tr><th>word</th><th>chinese</th></tr></thead><tbody><tr><td>scan the QR code</td><td>扫二维码</td></tr><tr><td>sharing economy</td><td>共享经济</td></tr><tr><td>thumb a nose</td><td>对…嗤之以鼻，蔑视</td></tr><tr><td>circulation</td><td>n.流通</td></tr><tr><td>comply with</td><td>服从，遵守，依从</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 口语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教案 Contents</title>
      <link href="/2020/01/31/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91/%E6%95%99%E6%A1%88/"/>
      <url>/2020/01/31/%E3%80%90%E8%8B%B1%E8%AF%AD%E3%80%91/%E6%95%99%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><table><thead><tr><th>chapter</th><th>Lesson</th><th>title</th></tr></thead><tbody><tr><td>chapter 1 Shopping 购物</td><td>Lesson1</td><td>Buying Clothes</td></tr><tr><td></td><td>Lesson2</td><td>Choosing A Gift</td></tr><tr><td></td><td>Lesson3</td><td>Daily Supplies</td></tr><tr><td></td><td>Lesson4</td><td>Shopping for Appliances</td></tr><tr><td></td><td>Lesson5</td><td>Buying a Smartphone</td></tr><tr><td></td><td>Lesson6</td><td>Bargaining</td></tr><tr><td></td><td>Lesson7</td><td>Checking out</td></tr><tr><td></td><td>Lesson8</td><td>Return &amp; Refund</td></tr><tr><td></td><td>Lesson9</td><td>Online Shopping</td></tr><tr><td></td><td>Lesson10</td><td>Revision One</td></tr><tr><td></td><td>Lesson11</td><td>Achievement Test One</td></tr><tr><td>chapter 2 Dining 吃饭</td><td>Lesson12</td><td>In A Restaurant</td></tr><tr><td></td><td>Lesson13</td><td>In the Food Court</td></tr><tr><td></td><td>Lesson14</td><td>At the Cafe</td></tr><tr><td></td><td>Lesson15</td><td>Eating Junk Food</td></tr><tr><td></td><td>Lesson16</td><td>Chinese Food</td></tr><tr><td></td><td>Lesson17</td><td>Ordering Food By Phone</td></tr><tr><td></td><td>Lesson18</td><td>Reserving a Table at a Restaurant</td></tr><tr><td></td><td>Lesson19</td><td>Revision Two</td></tr><tr><td></td><td>Lesson20</td><td>Achievement Test Two</td></tr><tr><td>chapter 3 Traveling 旅行</td><td>Lesson21</td><td>A Pleasant Journey</td></tr><tr><td></td><td>Lesson22</td><td>Getting A License</td></tr><tr><td></td><td>Lesson23</td><td>Asking for Directions</td></tr><tr><td></td><td>Lesson24</td><td>Applying for A Passport</td></tr><tr><td></td><td>Lesson25</td><td>Checking In</td></tr><tr><td></td><td>Lesson26</td><td>Room Service</td></tr><tr><td></td><td>Lesson27</td><td>At the Airport</td></tr><tr><td></td><td>Lesson28</td><td>Revision Three</td></tr><tr><td></td><td>Lesson29</td><td>Achievement Test Three</td></tr><tr><td>chapter 4 Daily Life 每日生活</td><td>Lesson30</td><td>Finding a Book at the Bookstore</td></tr><tr><td></td><td>Lesson31</td><td>Renting An Apartment</td></tr><tr><td></td><td>Lesson32</td><td>Opening A Bank Account</td></tr><tr><td></td><td>Lesson33</td><td>Making Phone Calls</td></tr><tr><td></td><td>Lesson34</td><td>A Visit to the Hospital</td></tr><tr><td></td><td>Lesson35</td><td>At the Amusement Park</td></tr><tr><td></td><td>Lesson36</td><td>Revision Four</td></tr><tr><td></td><td>Lesson37</td><td>Achievement Test Four</td></tr><tr><td>chapter 5 Entertainment 娱乐</td><td>Lesson38</td><td>Going to the Movies</td></tr><tr><td></td><td>Lesson39</td><td>A Visit to the Zoo</td></tr><tr><td></td><td>Lesson40</td><td>Working out at the Gym</td></tr><tr><td></td><td>Lesson41</td><td>Visiting a Museum</td></tr><tr><td></td><td>Lesson42</td><td>The Concerts</td></tr><tr><td></td><td>Lesson43</td><td>Going to a Book Fair</td></tr><tr><td></td><td>Lesson44</td><td>Revision Five</td></tr><tr><td></td><td>Lesson45</td><td>Achievement Test Five</td></tr><tr><td>chapter 6 Education 教育</td><td>Lesson46</td><td>At the Library</td></tr><tr><td></td><td>Lesson47</td><td>In the Dorm</td></tr><tr><td></td><td>Lesson48</td><td>Taking An Exam</td></tr><tr><td></td><td>Lesson49</td><td>University Classes</td></tr><tr><td></td><td>Lesson50</td><td>Studying Abroad</td></tr><tr><td></td><td>Lesson51</td><td>Studying Online</td></tr><tr><td></td><td>Lesson52</td><td>Revision Six</td></tr><tr><td></td><td>Lesson53</td><td>Achievement Test Six</td></tr><tr><td>chapter 7 Work 工作</td><td>Lesson54</td><td>Job Hunting</td></tr><tr><td></td><td>Lesson55</td><td>Job Interview</td></tr><tr><td></td><td>Lesson56</td><td>Arriving Late</td></tr><tr><td></td><td>Lesson57</td><td>Asking for a Leave</td></tr><tr><td></td><td>Lesson58</td><td>Working Overtime</td></tr><tr><td></td><td>Lesson59</td><td>Meetings</td></tr><tr><td></td><td>Lesson60</td><td>Asking for a Raise</td></tr><tr><td></td><td>Lesson61</td><td>Promotion</td></tr><tr><td></td><td>Lesson62</td><td>Starting a Business</td></tr><tr><td></td><td>Lesson63</td><td>Revision Seven</td></tr><tr><td></td><td>Lesson64</td><td>Achievement Test Seven</td></tr><tr><td>chapter 8 Health 健康</td><td>Lesson65</td><td>Sports</td></tr><tr><td></td><td>Lesson66</td><td>Weight Control</td></tr><tr><td></td><td>Lesson67</td><td>Aches and Pains</td></tr><tr><td></td><td>Lesson68</td><td>Medical Check-Up</td></tr><tr><td></td><td>Lesson69</td><td>Seeing A Doctor</td></tr><tr><td></td><td>Lesson70</td><td>At the Drugstore</td></tr><tr><td></td><td>Lesson71</td><td>Chinese Medicine</td></tr><tr><td></td><td>Lesson72</td><td>Plastic Surgery</td></tr><tr><td></td><td>Lesson73</td><td>Staying Up Late</td></tr><tr><td></td><td>Lesson74</td><td>Revision Eight</td></tr><tr><td></td><td>Lesson75</td><td>Achievement Test Eight</td></tr><tr><td>chapter 9 Social 社交</td><td>Lesson76</td><td>The Only Child</td></tr><tr><td></td><td>Lesson77</td><td>Arguing with Your Friend</td></tr><tr><td></td><td>Lesson78</td><td>Taking Part in a Party</td></tr><tr><td></td><td>Lesson79</td><td>Talking about Weather</td></tr><tr><td></td><td>Lesson80</td><td>Talking about Hobbies</td></tr><tr><td></td><td>Lesson81</td><td>Talking about Future Plans</td></tr><tr><td></td><td>Lesson82</td><td>Chatting with the Neighbor</td></tr><tr><td></td><td>Lesson83</td><td>Giving Suggestions</td></tr><tr><td></td><td>Lesson84</td><td>Body Language</td></tr><tr><td></td><td>Lesson85</td><td>Revision Nine</td></tr><tr><td></td><td>Lesson86</td><td>Achievement Test Nine</td></tr><tr><td>chapter 10 Holidays 节假日</td><td>Lesson87</td><td>April Fool’s Day</td></tr><tr><td></td><td>Lesson88</td><td>Thanksgiving Day</td></tr><tr><td></td><td>Lesson89</td><td>Halloween</td></tr><tr><td></td><td>Lesson90</td><td>Christmas Day</td></tr><tr><td></td><td>Lesson91</td><td>Mother’s Day</td></tr><tr><td></td><td>Lesson92</td><td>New Year’s</td></tr><tr><td></td><td>Lesson93</td><td>Spring Festival</td></tr><tr><td></td><td>Lesson94</td><td>Mid-Autumn Festival</td></tr><tr><td></td><td>Lesson95</td><td>Dragon Boat Festival</td></tr><tr><td></td><td>Lesson96</td><td>Revision Ten</td></tr><tr><td></td><td>Lesson97</td><td>Achievement Test Ten</td></tr><tr><td>chapter 11 Emotions and Attitudes 情感和态度</td><td>Lesson98</td><td>Delight</td></tr><tr><td></td><td>Lesson99</td><td>Sadness</td></tr><tr><td></td><td>Lesson100</td><td>Anger</td></tr><tr><td></td><td>Lesson101</td><td>Complaint</td></tr><tr><td></td><td>Lesson102</td><td>Compliment</td></tr><tr><td></td><td>Lesson103</td><td>Apology</td></tr><tr><td></td><td>Lesson104</td><td>Revision Eleven</td></tr><tr><td></td><td>Lesson105</td><td>Achievement Test Eleven</td></tr><tr><td>chapter 12 Environment 环境</td><td>Lesson106</td><td>Air Pollution</td></tr><tr><td></td><td>Lesson107</td><td>Global Warming</td></tr><tr><td></td><td>Lesson108</td><td>Desertification</td></tr><tr><td></td><td>Lesson109</td><td>Energy</td></tr><tr><td></td><td>Lesson110</td><td>Animal Extinction</td></tr><tr><td></td><td>Lesson111</td><td>Green Living</td></tr><tr><td></td><td>Lesson112</td><td>Revision Twelve</td></tr><tr><td></td><td>Lesson113</td><td>Achievement Test Twelve</td></tr><tr><td>chapter 13 Society 社会</td><td>Lesson114</td><td>Food Safety</td></tr><tr><td></td><td>Lesson115</td><td>Social Security</td></tr><tr><td></td><td>Lesson116</td><td>Aging Population</td></tr><tr><td></td><td>Lesson117</td><td>Artificial Intelligence</td></tr><tr><td></td><td>Lesson118</td><td>Sharing Economy</td></tr><tr><td></td><td>Lesson119</td><td>Revision Thirteen</td></tr><tr><td></td><td>Lesson120</td><td>Achievement Test Thirteen</td></tr><tr><td></td><td>Lesson121</td><td>Final Test</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 口语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ocp学习</title>
      <link href="/2020/01/30/%E3%80%90OCPOCA%E8%AE%A4%E8%AF%81%E8%80%83%E8%AF%95%E6%8C%87%E5%8D%97%E3%80%91/OCPOCA%E8%AE%A4%E8%AF%81%E8%80%83%E8%AF%95%E6%8C%87%E5%8D%9701/"/>
      <url>/2020/01/30/%E3%80%90OCPOCA%E8%AE%A4%E8%AF%81%E8%80%83%E8%AF%95%E6%8C%87%E5%8D%97%E3%80%91/OCPOCA%E8%AE%A4%E8%AF%81%E8%80%83%E8%AF%95%E6%8C%87%E5%8D%9701/</url>
      
        <content type="html"><![CDATA[<h1 id="OCP-OCA认证考试指南全册-Oracle-Database11g-1Z0-051、1Z0-052-和OCP-1Z0-053"><a href="#OCP-OCA认证考试指南全册-Oracle-Database11g-1Z0-051、1Z0-052-和OCP-1Z0-053" class="headerlink" title="OCP/OCA认证考试指南全册 Oracle Database11g(1Z0-051、1Z0-052)和OCP(1Z0-053)"></a>OCP/OCA认证考试指南全册 Oracle Database11g(1Z0-051、1Z0-052)和OCP(1Z0-053)</h1><h2 id="权威、完备的OCA（1Z0-051、1Z0-052）和OCP-1Z0-053-考试指南"><a href="#权威、完备的OCA（1Z0-051、1Z0-052）和OCP-1Z0-053-考试指南" class="headerlink" title="权威、完备的OCA（1Z0-051、1Z0-052）和OCP(1Z0-053)考试指南"></a>权威、完备的OCA（1Z0-051、1Z0-052）和OCP(1Z0-053)考试指南</h2><p>《OCP/OCA认证考试指南全册：Oracle Database 11g(1Z0-051,1Z0-052,1Z0-053)》是为OCA和OCP考试准备的独家权威指南。</p><p>本书的每一章都提供吸引人的练习题、实践问题和本章知识点回顾以强化所学的知识。</p><p>本书既是帮助读者轻松地通过OCA/OCP认证考试的好帮手，也是Oracle从业人员必备的参考书。</p><p>本书全面覆盖了1Z0-051、1Z0-052和1Z0-053考试的所有要点：</p><ul><li>实例管理</li><li>Oracle网络和存储结构</li><li>安全性</li><li>SQL</li><li>Oracle恢复管理器和Oracle闪回技术</li><li>资源管理器</li><li>Oracle自动存储管理</li><li>Oracle调度程序</li><li>自动工作负荷知识库</li><li>性能调整</li></ul><h6 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h6><p>John Watson就职于BPLC Management Consultants,负责公司欧洲和非洲的教学和咨询工作。他拥有数据库和应用服务器管理方面的OCP资格，以及长达25年的IT从业经验，曾撰著过多本技术书籍并发表了大量的技术论文。</p><p>Roopesh Ramklass是一名熟悉多种环境的Oracle专家。他创办了自己的咨询公司，作为一名独立的顾问，他围绕大量的Oracle技术设计并开发了软件和培训课程，内容涉及数据库、应用服务器和商业智能产品，并拥有12年的IT从业经验。</p><p>Bob Bryla是Oracle 9i和10g的认证专家，他在数据库设计、数据库应用程序开发、培训和Oracle数据库管理等方面拥有20多年的工作经验，他也是Dodgeville的Land’End 公司的首席Internet数据库设计师和Oracle DBA。  </p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当今社会需要越来越多具有IT行业认证资格的员工。<br>    对于雇主来说，认证的好处是显著的：<br>        雇主能够确信自己的员工具备一定的竞争力。<br>        个人同样能够凭借认证资格享受到巨大的好处。<br>        目前，许多雇主更希望雇佣具有认证资格的技术人员，而且许多IT产品买主不愿购买未聘用相关认证人员的公司的产品。<br>        在众多的IT行业认证中，Oracle认证最受青睐。<br>        除了商业报酬的因素外，具备Oracle认证资格就意味着成为相对紧俏的Oracle专业人员中的一份子，也拥有了赢得可观收入的重要筹码。<br>    从这里将开始您的Oracle数据库管理学习之旅，在职业生涯余下的岁月里，可以沿着这条路不如更美妙的人生境界。请尽情品味和享受学习的乐趣吧！</p><h2 id="Oracle认证"><a href="#Oracle认证" class="headerlink" title="Oracle认证"></a>Oracle认证</h2><p>Oracle认证具有多个类别。<br>    本书主要针对Orale Database 11g版本的Oracle Database Administation认证。DBA认证级别有以下三种：<br>        Certified Associate(OCA)<br>        Certified Professional(OCP)<br>        Certified Master(OCM)<br>    取得OCA资格需要通过两门考试。<br>    取得OCP资格需要通过第三门考试。<br>    这些考试在任一Prometric考试中心都可以进行，要求在90分钟内解答60或者70个问题，通过考试需要达到60%~70%的正确率。<br>    取得OCM资格则还需要在Oracle测试中心完成为期两天的评估，其中涉及复杂环境的模拟以及高级技术的应用（本书中未涉及）。</p><p>在准备OCA/OCP考试时，可以参加Oracle大学举办的培训课程，可以学习Oracle大学的在线辅导资料，也可以阅读本书。<br>    无论采取哪种方式，应试者都应当参考Oracle Documentation Library 来了解语法的详细信息。<br>    仅凭本书就足以帮助应试者通过认证，但如果选择了其它方式，本书也是一本珍贵的参考资料。<br>    本书围绕考试目标展开讨论，还涵盖了DBA在工作中使用到的大量信息。</p><p>当然，也不要一厢情愿地认为，只要购得本书，将其藏于枕下，书中的只是便可源源不断地传入脑海中。<br>    必须通读本书、完成所有联系、解决示例问题以及实验各种命令。<br>    在进一步熟悉Oracle环境后，会悟出一句金箴：在实践中求真知。</p><p>在众多场合您会发现，一个几分钟便完成的简单测试能省下数小时的思考和手册查阅时间。若有不明之处，则可以构造一个示例并查看发生的情况。</p><p>本书基于Windows或Linux操作系统讨论数据库，但是可以在支持Oracle的任何平台上完成练习并做更深入的研究。</p><h2 id="本书内容"><a href="#本书内容" class="headerlink" title="本书内容"></a>本书内容</h2><p>本书是为 Oracle Database 11g OCA/OCP 考试而准备的。<br>    所有官方认证目标在本书中都有涉及。<br>    本书分为三个部分，这实际构成了一个说明从无到有（即一个功能完全的系统）配置数据库应用程序的案例。<br>    第I部分假定读者未掌握任何预备知识，也没有安装软件，介绍了安装Oracle软件和创建数据库的基本知识。<br>    然后，第II部分介绍了SQL语言，通过他在第I部分创建的数据库中创建并使用应用程序。<br>    第III部分介绍了运行数据库应用程序时的维护工作（如备份和调整等内容）和一些更高级的数据库功能。</p><h2 id="备考清单"><a href="#备考清单" class="headerlink" title="备考清单"></a>备考清单</h2><p>前言最后有一份备考清单。<br>    通过这个清单，可以前后对照官方考试目标与本书呈献和涵盖的认证目标。<br>    备考清单中体积的每个官方目标和Oracle贵公司提出的目标完全相同，还列出了涵盖对应目标的章节。<br>    不需要按顺序参加这三门考试。<br>    您可以在任何时候参加考试，但是如果学习完本书后再参加考试，可能会获得高分。<br>    因为考试的内容是逐渐积累的，考试的目标之间有重叠。<br>    在讲述后面的主题时会回顾并巩固之前提到的主题。</p><h2 id="编排方式"><a href="#编排方式" class="headerlink" title="编排方式"></a>编排方式</h2><p>每章包含多个组成部分，以便突出显示重要条目、强化学习要点，并提供具有帮助作用的应试提示。<br>每章的组成部分如下：</p><ul><li><p>“考试目标” 在每章开头部分，列出了该章涵盖的官方考试目标。</p><pre><code>因为各门考试有重叠的目标，因此每章可能涉及多门考试的目标。</code></pre></li><li><p>“考点” 突出显示考试信息和可能布设的陷阱。</p></li><li><p>“练习” 分布于各个章节，是帮助您成功通过考试的实用练习，能帮您熟练掌握很可能成为考试要点的技能。</p><pre><code>不要只是泛泛地读一读，而应该能熟练地完成这些实用练习。&quot;从做中学&quot;是有效提高产品理解能力的途径。</code></pre></li><li><p>“提示” 描述实际工作中最常遇到的问题，是有关认证主题和产品主题的真知灼见。它们指出了常见错误，并解决工作中谈及和遇到的问题。</p></li><li><p>“本章知识点回顾” 简单总结了相应章节中涉及的考试目标，被安排在每章的最后。在考试前，可供读者进行快捷的总结性复习。</p></li><li><p>“自测题” 模拟认证考试中的问题。可以在章末找到这些问题的答案和解释。<br>在阅读完每章后做一做”自测题”，可以巩固所学的内容，并熟悉考题的结构。</p></li></ul><h2 id="学习指导"><a href="#学习指导" class="headerlink" title="学习指导"></a>学习指导</h2><p>读完本书后，留出时间认真地复习一遍。<br>在参试前，可能需要多次复习本书，并利用他所提供的方法来复习本书。</p><ul><li><p>温习所有”本章知识点回顾”或请别人考考自己——可以使用此练习方法来临阵磨枪。</p><pre><code>不妨试试3*5的索引卡制作一些列出了&quot;本章知识点回顾&quot;材料的练习卡。</code></pre></li><li><p>温习所有考点——-请注意，这些考点都是根据考试总结出来的。</p><pre><code>利用他们，可以集中精力应对考试。</code></pre></li><li><p>重温自测题——好的做法是每读完一章就立即完成自测题来巩固所学内容。</p></li><li><p>完成练习——-在阅读每章时都需要做练习题吗？答案是十分肯定的。这些练习题涵盖了考试主题，没有什么方法比通过做练习来了解材料的效果更好。<br>一定要弄清楚每个练习中每个步骤的来龙去脉。<br>如对其中一些内容不甚明了，请重新阅读正文中的对应内容。</p></li></ul><h2 id="备考清单-1"><a href="#备考清单-1" class="headerlink" title="备考清单"></a>备考清单</h2><h3 id="1Z0-051考试"><a href="#1Z0-051考试" class="headerlink" title="1Z0-051考试"></a>1Z0-051考试</h3><p>表格示例：<br>name | 价格 |  数量<br>-|-|-<br>香蕉 | $1 | 5 |<br>苹果 | $1 | 6 |<br>草莓 | $1 | 7 |</p><table><thead><tr><th>ID</th><th>考试目标</th><th>所在章节</th></tr></thead><tbody><tr><td>051</td><td>Oracle Database 11g:SQL Fundamentsals</td><td></td></tr><tr><td>051.1</td><td>使用SQL SELECT语句检索数据</td><td></td></tr><tr><td>051.1.1</td><td>列出SQL SELECT语句的能力</td><td>9</td></tr><tr><td>051.1.2</td><td>执行基本的SELECT语句</td><td>9</td></tr><tr><td>051.2</td><td>限制和排序数据</td><td></td></tr><tr><td>051.2.1</td><td>限制查询检索的行</td><td>9</td></tr><tr><td>051.2.2</td><td>排序查询检索的行</td><td>9</td></tr><tr><td>051.2.3</td><td>在运行时使用&amp;符号替换限制和排序输出</td><td>9</td></tr><tr><td>051.3</td><td>使用单行函数定制输出</td><td></td></tr></tbody></table><h1 id="第I部分"><a href="#第I部分" class="headerlink" title="第I部分"></a>第I部分</h1><h2 id="Oracle-Database-11g-管理"><a href="#Oracle-Database-11g-管理" class="headerlink" title="Oracle Database 11g 管理"></a>Oracle Database 11g 管理</h2><ul><li>第一章 Oracle Database 11g体系结构概述</li><li>第二章 安装和创建数据库</li><li>第三章 实例管理</li><li>第四章 配置Oracle网络环境</li><li>第五章 Oracle存储结构</li><li>第六章 Oracle安全性</li></ul><h1 id="第一章-OracleDatabase-11g体系结构概述"><a href="#第一章-OracleDatabase-11g体系结构概述" class="headerlink" title="第一章 OracleDatabase 11g体系结构概述"></a>第一章 OracleDatabase 11g体系结构概述</h1><h2 id="考试目标"><a href="#考试目标" class="headerlink" title="考试目标"></a>考试目标</h2><p>本章学习内容：</p><ul><li>052.1.1 解释内存结构</li><li>052.1.2 描述进程结构</li><li>052.1.3 讲述存储结构</li></ul><p>本指南所做的逻辑结构安排旨在使读者全面理解Oracle服务器产品和SQL（Structure Query Language，读作sequel）的基本知识。<br>    作者通过引入一个假设的场景（随着本书的学习，可对其进行系统的扩展），力图将知识点与实际工作相结合，使一些抽象概念具体化而变得易于掌握。<br>    这涉及要求您以DBA的身份负责建立一个在线商店。<br>    您将从中认识到DBA要承担的各种角色，以及DBA需要熟悉的一些技术领域。<br>    在对Oracle产品系列做了非考查性讨论后，我们介绍了一些全面理解建立Oracle 11g数据库系统的任务所需的预备知识。<br>    这就引入了本章的一些考查性目标，包括单实例体系结构、内存结构、进程结构和存储结构。</p><h3 id="1-1-Oracle产品系列"><a href="#1-1-Oracle产品系列" class="headerlink" title="1.1 Oracle产品系列"></a>1.1 Oracle产品系列</h3><p>不对产品进行上下文研究的Oracle指南是不完整的。</p><p>本节讨论Oracle公司当前提供的三个核心产品系列。<br>    Oracle技术的最终用户通常使用一部分已群集到服务器、开发工具或者应用程序产品系列中的可用产品。</p><h4 id="1-1-1-Oracle服务器系列"><a href="#1-1-1-Oracle服务器系列" class="headerlink" title="1.1.1 Oracle服务器系列"></a>1.1.1 Oracle服务器系列</h4><p>服务器技术系列中三个主要的产品组合是数据库服务器、应用服务器和企业管理器。这些产品组合共同为Oracle的网格计算体系提供组件。<br>    网格底层的概念就是”虚拟化”：最终用户虽然请求服务（一般通过基于Web的应用程序），但他们不了解，也不必了解服务从何而来。<br>    简单地来说，数据服务器用于存储数据，应用服务器提供最终用户请求的服务的基础设施。<br>    企业管理器产品给管理员提供管理界面。<br>    提供服务器时涉及的平台或物理服务器对最终用户来说是透明的。<br>    虚拟化可以使资源得到最优利用，以对最终用户透明的方式将服务器提供给最需要的区域。</p>]]></content>
      
      
      <categories>
          
          <category> OCP/OCA认证考试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>baidu_verify_oveVSDl85R</title>
      <link href="/2020/01/29/baidu_verify_oveVSDl85R/"/>
      <url>/2020/01/29/baidu_verify_oveVSDl85R/</url>
      
        <content type="html"><![CDATA[oveVSDl85R]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>😃motto😄</title>
      <link href="/2020/01/29/%E3%80%90%E5%BF%83%E6%83%85%E3%80%91/%E5%8B%BF%E5%BF%98%E5%88%9D%E5%BF%83%E6%96%B9%E5%BE%97%E5%A7%8B%E7%BB%88/"/>
      <url>/2020/01/29/%E3%80%90%E5%BF%83%E6%83%85%E3%80%91/%E5%8B%BF%E5%BF%98%E5%88%9D%E5%BF%83%E6%96%B9%E5%BE%97%E5%A7%8B%E7%BB%88/</url>
      
        <content type="html"><![CDATA[<center><b>勿忘初心，方得始终。</b></center><br><br><blockquote><p>小窗观看，清晰度更佳哦~</p></blockquote><p><strong>妹妹的舞蹈</strong>，嘿嘿；</p><iframe src="//player.bilibili.com/player.html?aid=84781279&bvid=BV1F7411Y7iK&cid=144987095&page=1&pic=http://r.photo.store.qq.com/psb?/V11rBmNJ2vy9o4/eolM380DWLl3XFoC0d9OsT4iIkw4XR.IGzdlMUwleCE!/r/dFQBAAAAAAAA" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p><strong>background</strong>:</p><iframe src="//player.bilibili.com/player.html?aid=84781176&bvid=BV1F7411Y7BD&cid=144986931&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> about </category>
          
      </categories>
      
      
        <tags>
            
            <tag> motto </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
