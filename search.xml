<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MicroservicesGuide-走近微服务词汇</title>
    <url>/2020/05/16/%E9%9D%A2%E8%AF%95/MicroservicesGuide-%E8%B5%B0%E8%BF%91%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AF%8D%E6%B1%87/</url>
    <content><![CDATA[<h2 id="Microservices-Guide-微服务指南词汇导读"><a href="#Microservices-Guide-微服务指南词汇导读" class="headerlink" title="Microservices Guide 微服务指南词汇导读"></a>Microservices Guide 微服务指南词汇导读</h2><p>我觉得我对有道词典的翻译有点迷…..<br>感觉怪怪的；  </p>
<p><strong>software</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">so : f : t : wa : re ( 英 /ˈsɒftweə(r)/  )</span><br><span class="line">n. 软件</span><br><span class="line">网络释义 软件；软件；软件；软设备</span><br><span class="line">Software 软件；软件；软件；软设备</span><br><span class="line">free software 自由软件；自由软体；免费软件；自在软件</span><br><span class="line">software framework 软件框架；软体框架；软件架构</span><br><span class="line">software development 软件开发</span><br><span class="line">software design 软件设计；软件开发</span><br><span class="line">software<span class="built_in"> system </span>软件系统</span><br></pre></td></tr></table></figure>

<p><strong>development</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">de</span> : <span class="string">ve : lo : p : men : t ( 英 /dɪˈveləpmənt/  )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">发展；开发；发育；住宅小区（专指由同一开发商开发的）；[摄]显影</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">developments</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">开发；发展；发育；进化；</span></span><br><span class="line"><span class="attr">Development</span> <span class="string">开发；发展；发育；进化</span></span><br><span class="line"><span class="attr">Software</span> <span class="string">Development 软件开发；软体开发；软件发展；软件研发</span></span><br><span class="line"><span class="attr">Career</span> <span class="string">Development 生涯规划；职业规划；生涯发展；事业发展</span></span><br><span class="line"><span class="attr">sustainable</span> <span class="string">development 可持续发展</span></span><br><span class="line"><span class="attr">economic</span> <span class="string">development 经济发展；经济开发</span></span><br><span class="line"><span class="attr">with</span> <span class="string">the development of 随着 ... 发展</span></span><br></pre></td></tr></table></figure>

<p><strong>young</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">young</span> <span class="string">( 英 /jʌŋ/ )</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">年轻的；初期的；没有经验的</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">年轻人；（动物的）崽，仔</span></span><br><span class="line"><span class="meta">比较级</span> <span class="string">younger</span></span><br><span class="line"><span class="meta">最高级</span> <span class="string">youngest</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">youngs</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">年轻人；青年版；杨格</span></span><br><span class="line"><span class="attr">Young</span> <span class="string">年轻人；青年版；杨格</span></span><br><span class="line"><span class="attr">Neil</span> <span class="string">Young 尼尔 杨；尼尔杨</span></span><br><span class="line"><span class="attr">Brigham</span> <span class="string">Young 杨百翰；杨百翰大学；</span></span><br></pre></td></tr></table></figure>

<p><strong>profession</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">p</span> : <span class="string">ro : fe : ssion ( 英 /prəˈfeʃn/ )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">职业；专业；声明；宣布；表白</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">professions</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">职业；专业；专业；行业</span></span><br><span class="line"><span class="attr">profession</span> <span class="string">职业；专业；专业；行业</span></span><br><span class="line"><span class="attr">caring</span> <span class="string">profession 护理行业；照顾他人的职业</span></span><br><span class="line"><span class="attr">Profession</span> <span class="string">informationization 行业信息化</span></span><br><span class="line"><span class="attr">profession</span> <span class="string">of 宣称（感情、信念等）；表白</span></span><br><span class="line"><span class="attr">legal</span> <span class="string">profession 法律界；法律专业</span></span><br><span class="line"><span class="attr">medical</span> <span class="string">profession 医疗职业</span></span><br></pre></td></tr></table></figure>

<p><strong>still</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">s</span> : <span class="string">t : ill ( 英 /stɪl/  )</span></span><br><span class="line"><span class="meta">adv.</span> <span class="string">仍然；更；静止地</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">静止的；不动的；寂静的；平静的；不起泡的</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">寂静；剧照；蒸馏室</span></span><br><span class="line"><span class="meta">conj.</span> <span class="string">仍然；但是；尽管如此</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">蒸馏；使...静止；使....平静下来</span></span><br><span class="line"><span class="meta">vi.</span> <span class="string">静止；平静；蒸馏</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">静止；仍然；蒸馏釜；依然</span></span><br><span class="line"><span class="attr">still</span> <span class="string">静止；仍然；蒸馏釜；依然</span></span><br><span class="line"><span class="attr">still</span> <span class="string">camera 静物照相机；静物摄影集；拍照机</span></span><br><span class="line"><span class="attr">Still</span> <span class="string">wine 静止葡萄酒；静态葡萄酒；无气葡萄酒；平静葡萄酒</span></span><br><span class="line"><span class="attr">still</span> <span class="string">on 仍在进行</span></span><br><span class="line"><span class="attr">still</span> <span class="string">remains 仍然是</span></span><br><span class="line"><span class="attr">sit</span> <span class="string">still 安静地坐着</span></span><br></pre></td></tr></table></figure>

<p><strong>learning</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">lear</span> : <span class="string">ning ( 英 /ˈlɜːnɪŋ/  )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">学习；学问</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">学习（learn的现在分词）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">学习；学习；学问；知识</span></span><br><span class="line"><span class="attr">learning</span> <span class="string">学习；学习；学问；知识</span></span><br><span class="line"><span class="attr">ensemble</span> <span class="string">learning 集成学习；围绕中心点的划分；组合算法</span></span><br><span class="line"><span class="attr">Blended</span> <span class="string">Learning 混合式学习；混合学习；混合式教学</span></span><br><span class="line"><span class="attr">learning</span> <span class="string">English 学习英语</span></span><br><span class="line"><span class="attr">higher</span> <span class="string">learning n. 高等教育；高深学问；（电影名称）校园大冲突</span></span><br><span class="line"><span class="attr">language</span> <span class="string">learning 语言学习</span></span><br></pre></td></tr></table></figure>

<p><strong>techniques</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">te</span> : <span class="string">chi : ni : qu : es ( chi 读 k 的音；qu 读 k 的音； 英 /tekˈni:ks/ )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">技术（technique的复数）；方法；技巧</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">技法；技术；技巧；网站架构</span></span><br><span class="line"><span class="attr">Techniques</span> <span class="string">技法；技术；技巧；网站架构</span></span><br><span class="line"><span class="attr">Sampling</span> <span class="string">techniques 采样技术；抽样技术；取样技术；采样妙技</span></span><br><span class="line"><span class="attr">Metallographic</span> <span class="string">Techniques 金相技术</span></span><br><span class="line"><span class="attr">application</span> <span class="string">Techniques 涂装技术</span></span><br><span class="line"><span class="attr">selling</span> <span class="string">techniques 推销技术</span></span><br><span class="line"><span class="attr">motivational</span> <span class="string">techniques 激励技能；激励方法（motivational technique 的复数）</span></span><br></pre></td></tr></table></figure>

<p><strong>building</strong></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bu </span>: il : ding ( 英 /ˈ<span class="keyword">bɪldɪŋ/ </span> )</span><br><span class="line"><span class="symbol">n.</span> 建筑；建筑物</span><br><span class="line"><span class="symbol">v.</span> 建筑；建立；增加（<span class="keyword">build的ing形式）</span></span><br><span class="line"><span class="keyword">复数 </span><span class="keyword">buildings</span></span><br><span class="line"><span class="keyword">网络释义 </span>建筑物；大楼；号楼；房屋</span><br><span class="line"><span class="keyword">building </span>建筑物；大楼；号楼；房屋</span><br><span class="line"><span class="symbol">green</span> <span class="keyword">building </span>绿色建筑；绿色生态建筑；绿色修建</span><br><span class="line"><span class="symbol">Chrysler</span> <span class="keyword">Building </span>克莱斯勒大厦；克莱斯勒大楼；美国克莱斯勒大厦；克莱斯勒</span><br><span class="line"><span class="keyword">building </span>up 建造；装配；堆焊；建立增长</span><br><span class="line"><span class="symbol">office</span> <span class="keyword">building </span>办公大楼（等于office <span class="keyword">block）</span></span><br><span class="line"><span class="keyword">building </span>material 建筑材料</span><br></pre></td></tr></table></figure>

<p><strong>tools</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">too : l : s ( 英 /tuːlz/  )</span><br><span class="line">n. [计]工具，工具菜单；工具箱（tool的复数形式）</span><br><span class="line">v. 用工具加工<span class="built_in">..</span>. (tool的第三人称单数形式)</span><br><span class="line">网络释义 工具；刀具；面板；工具栏</span><br><span class="line">Tools 工具；刀具；面板；工具栏</span><br><span class="line">Game Tools 游戏常用工具；游戏常用支持工具集合；游戏开发工具；游戏工具</span><br><span class="line">Debugging Tools 调试工具；翟工具；排错工具；除错工具；</span><br><span class="line">hardware tools 五金工具；日用五金</span><br><span class="line">new tools 新工具</span><br><span class="line">machines <span class="keyword">and</span> tools 机具</span><br></pre></td></tr></table></figure>

<p><strong>effectively</strong></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">e : <span class="type">ffe</span> : <span class="type">c</span> : <span class="type">ti</span> : <span class="type">ve</span> : <span class="type">ly</span> ( 英 /ɪˈfektɪvli/ )</span><br><span class="line">adv. 有效地；生效地；有力地；实际上</span><br><span class="line">网络释义 有效地；起作用地；实际上；有用地</span><br><span class="line">effectively 有效地；起作用地；实际上；有用地</span><br><span class="line">effectively grounded 直接接地；有效被接地；有效接地；有效接地的</span><br><span class="line"><span class="keyword">use</span> effectively 有效利用；有效地利用</span><br></pre></td></tr></table></figure>

<p><strong>involved</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">in</span> : <span class="string">vol : ve : d (ve 读 v 的音 英 /ɪnˈvɒlvd/  )</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">有关的；卷入的；复杂的</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">涉及；使参与；包含（involve的过去时和过去分词）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">卷入；涉案；涉足；所涉及</span></span><br><span class="line"><span class="attr">Involved</span> <span class="string">卷入；涉案；涉足；所涉及</span></span><br><span class="line"><span class="attr">parties</span> <span class="string">involved 交换中的各方；当事人；当事者；互换中的各方</span></span><br><span class="line"><span class="attr">get</span> <span class="string">involved 介入；加入我们；项目介绍；参与</span></span><br><span class="line"><span class="attr">involved</span> <span class="string">in 涉及；包含；牵涉进...</span></span><br><span class="line"><span class="attr">involved</span> <span class="string">with 涉及；与...有关联</span></span><br><span class="line"><span class="attr">get</span> <span class="string">involved in 涉及；卷入</span></span><br></pre></td></tr></table></figure>

<p><strong>activity</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">a</span> : <span class="string">c : ti : vi : ty ( 英 /ækˈtɪvəti/ )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">活动；行动；活跃</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">activities</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">活动；活性；活度；活动</span></span><br><span class="line"><span class="attr">Activity</span> <span class="string">活动；活性；活度；活动</span></span><br><span class="line"><span class="attr">logistics</span> <span class="string">activity 物流活动；物流</span></span><br><span class="line"><span class="attr">physical</span> <span class="string">activity 体力活动；体育活动；体能活动</span></span><br><span class="line"><span class="attr">economic</span> <span class="string">activity 经济活动</span></span><br><span class="line"><span class="attr">catalytic</span> <span class="string">activity 催化活性</span></span><br><span class="line"><span class="attr">physical</span> <span class="string">activity 身体活动；体育活动；体力活动</span></span><br></pre></td></tr></table></figure>

<p><strong>over</strong></p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">o : v : er ( 英 /ˈəʊvə(r)/  )</span><br><span class="line">adv. 倒下；翻转；穿过；完全覆盖；以上；大于；再；结束；改变；完毕；仔细地</span><br><span class="line">prep. 在<span class="params">...</span>上面；从<span class="params">...</span>上方；穿越；在<span class="params">...</span>的另一边；在<span class="params">...</span>的远端；从<span class="params">...</span>落下；遍及；多于；在<span class="params">...</span>期间；渡过；由于；关于；利用；通过；声音大于；高于；级别在<span class="params">...</span>之上；优先于；超过</span><br><span class="line">n. （板球）一轮投球</span><br><span class="line">adj. 倒下的；折起来的；结束的；剩下的</span><br><span class="line">v. 越过</span><br><span class="line">网络释义 结束；越过；超过</span><br><span class="line">over 结束；越过；超过</span><br><span class="line">hand over 移交；交出；让与</span><br><span class="line">Over There 那时那地；在那边；在那里；那边</span><br><span class="line"><span class="literal">all</span> over 到处；遍及；浑身；全部结束</span><br><span class="line">over there adv. 在那里</span><br><span class="line">over <span class="literal">and</span> over 反复；再三</span><br></pre></td></tr></table></figure>

<p><strong>decades</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">n.</span> <span class="string">数十年（decade的复数）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">十年；几十年；几十年来；台阶</span></span><br><span class="line"><span class="attr">decades</span> <span class="string">十年；几十年；几十年来；台阶</span></span><br><span class="line"><span class="attr">Mixed</span> <span class="string">Decades 某某年代风</span></span><br><span class="line"><span class="attr">Frogger</span> <span class="string">Decades 青蛙过河纪念版</span></span><br><span class="line"><span class="attr">over</span> <span class="string">the past decade 在过去的十年里</span></span><br></pre></td></tr></table></figure>

<p><strong>writing</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">wri</span> : <span class="string">ting ( 英 /ˈraɪtɪŋ/  )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">书写；写作技能；著书立说；写作的职业；作品；著作；文字；笔迹</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">书写；写作（write的现在分词）</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">writings</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">写作；书写；文字</span></span><br><span class="line"><span class="attr">Writing</span> <span class="string">写作；书写；文字</span></span><br><span class="line"><span class="attr">Nature</span> <span class="string">Writing 自然写作；自然书写；自然文学</span></span><br><span class="line"><span class="attr">English</span> <span class="string">Writing 英语写作；英文写作；英文书面表达；写作</span></span><br><span class="line"><span class="attr">in</span> <span class="string">writing 书面；书面的；用书面写</span></span><br><span class="line"><span class="attr">writing</span> <span class="string">ability 写作能力；书写能力</span></span><br><span class="line"><span class="attr">writing</span> <span class="string">skill 写作技巧；书写技能；笔头</span></span><br></pre></td></tr></table></figure>

<p><strong>in the last two</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">在最后两个</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">last</span> <span class="literal">two</span> months 在过去的两个月；在最后两个月</span><br><span class="line">In <span class="keyword">the</span> <span class="keyword">last</span> <span class="literal">two</span> years 在最后两年中</span><br><span class="line">In <span class="keyword">the</span> <span class="keyword">last</span> <span class="literal">two</span> decades 在最近二十年</span><br></pre></td></tr></table></figure>

<p><strong>website</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">we</span> : <span class="string">b : si : te ( 英 /ˈwebsaɪt/ )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">网站（全球资讯网的主机站）</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">websites</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">网站；网址；网站建设；站点</span></span><br><span class="line"><span class="attr">Website</span> <span class="string">网站；网址；网站建设；站点</span></span><br><span class="line"><span class="attr">Website</span> <span class="string">Design 网站设计；网页设计；网站建设；品牌网站形象设计</span></span><br><span class="line"><span class="attr">Website</span> <span class="string">Promotion 网站推广；网站推广常识；网站推广知识；企业网站网络推广；</span></span><br><span class="line"><span class="attr">website</span> <span class="string">design 网站设计</span></span><br><span class="line"><span class="attr">website</span> <span class="string">promotion 网站推广</span></span><br><span class="line"><span class="attr">website</span> <span class="string">development 网站开发；网页设计</span></span><br></pre></td></tr></table></figure>

<p><strong>patterns</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">pa</span> : <span class="string">tter : n : s</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">模式（pattern的复数形式）</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">摹制；用图案装饰；复写（pattern的第三人称单数形式）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">花样；模型；木模；形态</span></span><br><span class="line"><span class="attr">patterns</span> <span class="string">花样；模型；木模；形态</span></span><br><span class="line"><span class="attr">fashionable</span> <span class="string">patterns 花色入时；花样进时；时尚模式；花样入时</span></span><br><span class="line"><span class="attr">Corrective</span> <span class="string">Patterns 调整浪形态；调剂浪形态</span></span><br><span class="line"><span class="attr">development</span> <span class="string">patterns 发展模式</span></span><br></pre></td></tr></table></figure>

<p><strong>practices</strong></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">p :</span> <span class="string">ra :</span> <span class="string">c :</span> <span class="string">ti :</span> <span class="string">ce :</span> s ( 英 <span class="regexp">/ˈpræktɪsɪs/</span>  )</span><br><span class="line">n. 实践（practice 的复数）；练习</span><br><span class="line">v. 练习（practice的第三人称单数形式）</span><br><span class="line">网络释义 客户专区；业务中心</span><br><span class="line">Practices 客户专区；业务中心</span><br><span class="line">Disciplinazy Practices 惩戒性措施；性措施</span><br><span class="line">Agricultural practices 农业方式；耕作方法；农业方法</span><br><span class="line">cultural practices 文化实践；栽培技术</span><br><span class="line">foreign corrupt practices act 反国外行贿法规</span><br></pre></td></tr></table></figure>

<p><strong>easier</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">ea</span> : <span class="string">si : er ( 英 /'iːzɪə/  )</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">更简单；容易些（easy 的比较级形式）；较早的</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">知易行难；更简单；更容易的；更便捷</span></span><br><span class="line"><span class="attr">Easier</span> <span class="string">知易行难；更简单；更容易的；更便捷</span></span><br><span class="line"><span class="attr">EASIER</span> <span class="string">RIDER 更逍遥的骑士</span></span><br><span class="line"><span class="attr">Work</span> <span class="string">easier 工作比较轻松</span></span><br><span class="line"><span class="attr">easier</span> <span class="string">said than done 说来容易做起来难</span></span><br><span class="line"><span class="attr">make</span> <span class="string">life easier 日子会过得更潇洒；生活变得更加舒适</span></span><br></pre></td></tr></table></figure>

<p><strong>useful</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">u</span> : <span class="string">se : ful ( 英 /ˈjuːsfl/  )</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">有用的；有益的；有帮助的</span></span><br><span class="line"><span class="meta">比较级</span> <span class="string">more useful；</span></span><br><span class="line"><span class="meta">最高级</span> <span class="string">most useful</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">有用的；有益；软碟通软件；有效的</span></span><br><span class="line"><span class="attr">useful</span> <span class="string">有用的；有益；软碟通软件；有效的</span></span><br><span class="line"><span class="attr">Useful</span> <span class="string">numbers 常用电话号码；常用电话；常用德律风号码；经常使用电话号头</span></span><br><span class="line"><span class="attr">useful</span> <span class="string">resistance 有益阻力</span></span><br><span class="line"><span class="attr">be</span> <span class="string">useful to 对...有用；具有...用途</span></span><br><span class="line"><span class="attr">useful</span> <span class="string">life 使用寿命；有效期</span></span><br><span class="line"><span class="attr">useful</span> <span class="string">data 有用数据和资料</span></span><br></pre></td></tr></table></figure>

<p><strong>began</strong></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">be </span>: gan ( 英 /<span class="keyword">bɪˈɡæn/ </span>)</span><br><span class="line"><span class="symbol">v.</span> 开始；创建；着手于（<span class="keyword">begin的过去式）</span></span><br><span class="line"><span class="keyword">网络释义 </span>开始；贝加；开始了；才开始；</span><br><span class="line"><span class="keyword">began </span>开始；贝加；开始了；才开始</span><br><span class="line"><span class="keyword">Began </span>menopause 开始更年期</span><br><span class="line"><span class="symbol">Passion</span> <span class="keyword">began </span>翻译公司开始</span><br><span class="line"><span class="keyword">begin </span>with 以...开始；开始于...</span><br><span class="line"><span class="keyword">begin </span>at 几点开始；从..开始</span><br><span class="line"><span class="keyword">begin </span>again 重新开始；重做</span><br></pre></td></tr></table></figure>

<p><strong>place</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">p</span> : <span class="string">la : ce ( 英 /pleɪs/  )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">地方；住所；座位</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">放置；任命；寄予</span></span><br><span class="line"><span class="meta">vi.</span> <span class="string">名列前茅；取得名次</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">placed</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">placed</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">placing</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">places</span></span><br><span class="line"><span class="meta">第三人称单数</span> <span class="string">places</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">渠道；地方；放置；地点</span></span><br><span class="line"><span class="attr">Place</span> <span class="string">渠道；地方；放置；地点</span></span><br><span class="line"><span class="attr">Lanham</span> <span class="string">Place 朗豪坊；朗豪酒店；朗豪坊商场；朗豪酒店</span></span><br><span class="line"><span class="attr">Martin</span> <span class="string">Place 马丁广场；牛；火车站</span></span><br><span class="line"><span class="attr">in</span> <span class="string">place 适当；适当的；在适当的地方；在适当的位置</span></span><br><span class="line"><span class="attr">place</span> <span class="string">in 安排；放置</span></span><br><span class="line"><span class="attr">take</span> <span class="string">place 发生；举行</span></span><br></pre></td></tr></table></figure>

<p><strong>publish</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">pub</span> : <span class="string">li : sh ( 英 /ˈpʌblɪʃ/  )</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">出版；发表；公布</span></span><br><span class="line"><span class="meta">vi.</span> <span class="string">出版；发行；刊印</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">published</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">published</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">publishing</span></span><br><span class="line"><span class="meta">第三人称单数</span> <span class="string">publishes</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">出版；公布；发布</span></span><br><span class="line"><span class="attr">publish</span> <span class="string">出版；公布；发布</span></span><br><span class="line"><span class="attr">publish</span> <span class="string">connections 发布连接</span></span><br><span class="line"><span class="attr">Publish</span> <span class="string">Entry 发布项；宣布项</span></span><br></pre></td></tr></table></figure>

<p><strong>articles</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">ar</span> : <span class="string">ti : cle : s</span></span><br><span class="line"><span class="attr">n.[语]文章；物品；[法]条款（article的复数）；[语]冠词</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">使受协议条款的约束；指控（article的三单形式）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">冠词；文章；各条；本刊</span></span><br><span class="line"><span class="attr">Articles</span> <span class="string">冠词；文章；各条；本刊</span></span><br><span class="line"><span class="attr">Instant</span> <span class="string">Articles 即时文章；新闻快读；即时文汇；文章快手</span></span><br><span class="line"><span class="attr">Plastic</span> <span class="string">Articles 塑料制品；塑料件；整形篇；主要进口商品英文</span></span><br><span class="line"><span class="attr">articles</span> <span class="string">of association 公司章程；组织章程</span></span><br><span class="line"><span class="attr">articles</span> <span class="string">for daily use 生活用品</span></span><br><span class="line"><span class="attr">original</span> <span class="string">articles 原作；研究文章</span></span><br></pre></td></tr></table></figure>

<p><strong>colleagues</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">co</span> : <span class="string">lle : gu : es</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">同事；同行（colleague的复数）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">同仁；同人；同事；同事之间</span></span><br><span class="line"><span class="attr">Colleagues</span> <span class="string">同仁；同人；同事；同事之间</span></span><br><span class="line"><span class="attr">Visiting</span> <span class="string">Colleagues 拜访同事；造访同事</span></span><br><span class="line"><span class="attr">Complimenting</span> <span class="string">Colleagues 赞美同事；赞誉同事</span></span><br></pre></td></tr></table></figure>

<p><strong>joined</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jo</span> : <span class="string">in : ed ( 英 /dʒɔind/  )</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">加入；参加（join的过去式；过去分词）；[计]连接</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">加入；客户留言；连接；招生简章</span></span><br><span class="line"><span class="attr">joined</span> <span class="string">加入；客户留言；连接；招生简章</span></span><br><span class="line"><span class="attr">JOINED</span> <span class="string">Strategy 连接策略</span></span><br><span class="line"><span class="attr">joined</span> <span class="string">field 将两个表中连接字段</span></span><br><span class="line"><span class="attr">join</span> <span class="string">hands 携手；联手；齐心协力</span></span><br><span class="line"><span class="attr">join</span> <span class="string">in 加入；参加</span></span><br><span class="line"><span class="attr">join</span> <span class="string">hands with 握手；同...联合</span></span><br></pre></td></tr></table></figure>

<p><strong>ThoughtWorks</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>role</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">ro : le ( 英 /rəʊl/  )</span><br><span class="line">n. 角色；任务</span><br><span class="line">网络释义 角色；作用；社会角色；任务</span><br><span class="line"><span class="keyword">Role</span> <span class="title">角色；作用；社会角色；任务</span></span><br><span class="line"><span class="title">role</span> playing 角色扮演；角色扮演法；职能演习；角色表演</span><br><span class="line"><span class="keyword">role</span> <span class="title">model</span> 行为榜样；角色模型；榜样；模范</span><br><span class="line"><span class="keyword">role</span> <span class="title">of</span> ....的角色</span><br><span class="line">play an important <span class="keyword">role</span> <span class="title">起到重要作用</span></span><br><span class="line"><span class="title">leading</span> <span class="keyword">role</span> <span class="title">主导作用；主导地位</span></span><br></pre></td></tr></table></figure>

<p><strong>learn</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">lear</span> : <span class="string">n ( 英 /lɜːn/  )</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">学习；得知；认识到</span></span><br><span class="line"><span class="meta">vi.</span> <span class="string">学习；获悉</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">learned 或 learnt</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">learned 或 learnt</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">learning</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">学会；得知</span></span><br><span class="line"><span class="attr">Learn</span> <span class="string">学会；得知</span></span><br><span class="line"><span class="attr">learn</span> <span class="string">about 了解；得知；获悉；听到</span></span><br><span class="line"><span class="attr">learn</span> <span class="string">of 听到；获悉；获悉的事；听说</span></span><br><span class="line"><span class="attr">learn</span> <span class="string">from 向...学习</span></span><br><span class="line"><span class="attr">learn</span> <span class="string">English 学习英语</span></span><br><span class="line"><span class="attr">learn</span> <span class="string">about 了解；学习</span></span><br></pre></td></tr></table></figure>

<p><strong>deliver</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">de</span> : <span class="string">li : ver ( 英 /dɪˈlɪvə(r)/  )</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">交付；发表；递送；释放；给予（打击）；给...接生</span></span><br><span class="line"><span class="meta">vi.</span> <span class="string">实现；传送；履行；投递</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">投球</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">delivered</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">delivered</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">delivering</span></span><br><span class="line"><span class="meta">第三人称单数</span> <span class="string">delivers</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">投递；交付；发出；发表</span></span><br><span class="line"><span class="attr">deliver</span> <span class="string">投递；交付；发出；发表</span></span><br><span class="line"><span class="attr">deliver</span> <span class="string">value 价值传递；传递价值</span></span><br><span class="line"><span class="attr">Deliver</span> <span class="string">Hope 传递希望；递送希望</span></span><br><span class="line"><span class="attr">deliver</span> <span class="string">the goods 交货；履行诺言</span></span><br><span class="line"><span class="attr">deliver</span> <span class="string">a speech 发表演讲；发表讲话</span></span><br></pre></td></tr></table></figure>

<p><strong>clients</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">c : lien : ts</span><br><span class="line">n. 顾客；客户端；委托方（client的复数）；救济对象；应受账款</span><br><span class="line">网络释义 客户；客户端；案例；合作客户</span><br><span class="line">Clients 客户；客户端；案例；合作客户</span><br><span class="line">major clients 大客户；主要客户；客户</span><br><span class="line">Entertaining Clients 招待客户；款待客户；宴请客户；接待客户</span><br><span class="line">client<span class="built_in"> service </span>客户服务；向委托部门提供服务</span><br><span class="line">client base 客户群；基本顾客</span><br><span class="line">client side 客户端；使用端</span><br></pre></td></tr></table></figure>

<p><strong>pass</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">pa</span> : <span class="string">ss ( 英 /pɑːs/  )</span></span><br><span class="line"><span class="meta">v.</span> <span class="string">通过；经过；沿某方向前进；使达到（某位置）；传递；传球；遗留给；超过；变化；推移；度过；终止；几个；经表决通过（法律等）；允许；宣布；过；排泄；流通；放弃</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">及格；经过；通行证；道路，山口；传球；飞跃；阶段；鱼道；（桥牌）不叫；（击剑中的）戳刺；变戏法；（计算机）一次浏览</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">passed</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">passed</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">passing</span></span><br><span class="line"><span class="meta">第三人称单数</span> <span class="string">passes</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">传球；通过；经过；传递</span></span><br><span class="line"><span class="attr">Pass</span> <span class="string">传球；通过；经过；传递</span></span><br><span class="line"><span class="attr">scissor</span> <span class="string">pass 交叉传球；交织传球；穿插传球；传球</span></span><br><span class="line"><span class="attr">Khyber</span> <span class="string">Pass 开伯尔山口；开伯尔通道；咖喱王</span></span><br><span class="line"><span class="attr">pass</span> <span class="string">through 穿过....；通过...</span></span><br><span class="line"><span class="attr">come</span> <span class="string">to pass 实现；发生</span></span><br><span class="line"><span class="attr">pass</span> <span class="string">on 传递；继续；去世</span></span><br></pre></td></tr></table></figure>

<p><strong>wider</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">wi</span> : <span class="string">d : er ( 英 /waɪdə(r)/  )</span></span><br><span class="line"><span class="meta">adj.</span> <span class="string">宽的；广阔的（wide的比较级形式）</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">快尔达；世界发展经济研究所；宽的</span></span><br><span class="line"><span class="attr">WIDER</span> <span class="string">快尔达；世界发展经济研究所；宽的</span></span><br><span class="line"><span class="attr">wider</span> <span class="string">margin 较大差幅；俏利</span></span><br><span class="line"><span class="attr">wider</span> <span class="string">spreading 更大的穿电</span></span><br></pre></td></tr></table></figure>

<p><strong>industry</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">in</span> : <span class="string">du : s : try ( 英 /ˈɪndəstri/  )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">产业；工业；勤勉</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">industries</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">产业；工业；职业；行业</span></span><br><span class="line"><span class="attr">industry</span> <span class="string">产业；工业；职业；行业</span></span><br><span class="line"><span class="attr">water</span> <span class="string">industry 水利产业；水产业；水工业</span></span><br><span class="line"><span class="attr">automobile</span> <span class="string">industry 汽车工业；汽车产业；汽车业；汽车制造业</span></span><br><span class="line"><span class="attr">industry</span> <span class="string">and commerce 工商业</span></span><br><span class="line"><span class="attr">chemical</span> <span class="string">industry 化学工业</span></span><br><span class="line"><span class="attr">manufacturing</span> <span class="string">industry 制造业；制造工业</span></span><br></pre></td></tr></table></figure>

<p><strong>site</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">si</span> : <span class="string">te ( 英 /saɪt/ )</span></span><br><span class="line"><span class="meta">n.</span> <span class="string">地点；位置；场所</span></span><br><span class="line"><span class="meta">vt.</span> <span class="string">设置；为...选址</span></span><br><span class="line"><span class="meta">过去式</span> <span class="string">sited</span></span><br><span class="line"><span class="meta">过去分词</span> <span class="string">sited</span></span><br><span class="line"><span class="meta">现在分词</span> <span class="string">siting</span></span><br><span class="line"><span class="meta">复数</span> <span class="string">sites</span></span><br><span class="line"><span class="meta">第三人称单数</span> <span class="string">sites</span></span><br><span class="line"><span class="meta">网络释义</span> <span class="string">站点；场地；现场；场所</span></span><br><span class="line"><span class="attr">Site</span> <span class="string">站点；场地；现场；场所</span></span><br><span class="line"><span class="attr">Site</span> <span class="string">planning 敷地计划；总平面设计；场地规划</span></span><br><span class="line"><span class="attr">Site</span> <span class="string">Selection 选址；基地选择；场地选择</span></span><br><span class="line"><span class="attr">web</span> <span class="string">site 网页；网址</span></span><br><span class="line"><span class="attr">on</span> <span class="string">site 现场；原地；原位</span></span><br><span class="line"><span class="attr">construction</span> <span class="string">site 建筑工地；施工场地</span></span><br></pre></td></tr></table></figure>

<p><strong>developed</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">de : ve : lo : p : ed ( 英 /dɪˈveləpt/ )</span><br><span class="line">adj. 发达的（国家或地区）；成熟的</span><br><span class="line">网络释义 发达；自主开发；研制出；成熟的</span><br><span class="line">Developed 发达；自主开发；研制出；成熟的</span><br><span class="line">developed countries 发达国家；已开发国家；已发展国家；发达国家或工业化国家</span><br><span class="line">developed dimension 展开尺寸</span><br><span class="line">developed country n.发达国家</span><br><span class="line">developed<span class="built_in"> area </span>[计]展开面积</span><br><span class="line">less developed 欠发达地区；不发达的</span><br></pre></td></tr></table></figure>

<p><strong>respected</strong></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">re :</span> <span class="string">s :</span> <span class="string">pe :</span> <span class="string">c :</span> <span class="string">te :</span> d ( 英 <span class="regexp">/ri'spektid/</span>  )</span><br><span class="line">adj. 受尊敬的</span><br><span class="line">v. 尊敬；重视（respect的过去式和过去分词）</span><br><span class="line">网络释义 推崇；受尊敬的；德高望重；受人尊敬</span><br><span class="line">Respected 推崇；受尊敬的；德高望重；受人尊敬</span><br><span class="line">Are respected 很受尊敬</span><br><span class="line">Respected person 德高望重的人</span><br><span class="line">respected ideas 公认理论；权威理论</span><br><span class="line">be respected <span class="keyword">as</span> 被尊为...</span><br></pre></td></tr></table></figure>

<p><strong>platform</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">p : la : t : <span class="keyword">for</span> : m ( 英 /ˈplætfɔːm/  )</span><br><span class="line">n. 平台；月台；站台；坛；讲台；厚底松糕鞋</span><br><span class="line">网络释义 平台；站台；台；平台</span><br><span class="line">platform 平台；站台；台；平台</span><br><span class="line">side platform 侧式站台；侧式月台；侧向式站台；侧向收割台</span><br><span class="line">fixed platform 固定平台；固定式平台；固定式钻井平台</span><br><span class="line">service platform 工作台；操作平台</span><br><span class="line">offshore platform 海上平台；近海平台</span><br><span class="line">open platform 开放平台</span><br></pre></td></tr></table></figure>

<p><strong>edited</strong></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">e</span> : <span class="keyword">di</span> :<span class="keyword">te</span> : <span class="keyword">d</span> ( 英 /'<span class="keyword">ed</span>ɪtɪ<span class="keyword">d</span>/  )</span><br><span class="line">adj. 编辑过的</span><br><span class="line">v. 编辑；校订；剪接；主编（<span class="keyword">edit</span>的过去式和过去分词）</span><br><span class="line">网络释义 编辑过的；编辑；分钟；已编辑</span><br><span class="line">Edited 编辑过的；编辑；分钟；已编辑</span><br><span class="line">Edited Books 编辑书籍</span><br><span class="line">SpinnBox Edited 旋转方块</span><br><span class="line"><span class="keyword">edit</span> box [计]编辑框</span><br><span class="line"><span class="keyword">edit</span> mode [计]编辑方式</span><br><span class="line"><span class="keyword">edit</span> <span class="keyword">window</span> 编辑窗口</span><br></pre></td></tr></table></figure>

<p><strong>published</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">adj. 已发布的</span><br><span class="line">v. 出版；发行（publish的过去式）</span><br><span class="line">网络释义 刊登；刊出；刊发；刊载</span><br><span class="line">Published 刊登；刊出；刊发；刊载</span><br><span class="line">published<span class="built_in"> interface </span>已发布接口；发布接口</span><br><span class="line">published angle 预定</span><br><span class="line">published price 图书零售价；定价；公布价格</span><br></pre></td></tr></table></figure>

<p><strong>ThoughtWorkers</strong></p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">**others**</span><br></pre></td></tr></table></figure>
<p>  o : ther : s ( 英 /ˈʌðə(r)z/   )<br>  pron. 其他人<br>  网络释义 其它；其他；全部信息；其他组件保养<br>  Others 其他；其它；全部信息；其他组件保养<br>  the others 小岛惊魂；神鬼第六感；其它<br>  Introduce Others 先容别人<br>  each other 彼此；互相<br>  on the other 另一方面<br>  on the other hand 另一方面</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*reach*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  rea : ch (  英 /riːtʃ/ )<br>  vi. 达到；延伸；伸出手；传开<br>  vt. 达到；影响；抵达；伸出<br>  n. 范围；延伸；河段；横风行驶<br>  第三人称单数 reaches<br>  过去式 reached<br>  过去分词 reached<br>  现在分词 reaching<br>  网络释义 到达；达到；到达率；化学品注册<br>  Reach 到达；达到；到达率；化学品注册<br>  Reach Me 书缘寻踪；抓住我；请与我联系；联系我<br>  reach out 伸出；提供援助；接纳我<br>  reach out vt. 伸出<br>  reach for 伸手去拿<br>  reach an agreement 达成协议；取得一致意见；达成共识</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*audience*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  au : di : en : ce ( 英 /ˈɔːdiəns/  )<br>  n. 观众；听众；读者；接见；正式会见；拜会<br>  网络释义 观众；听众；受众；阅听人<br>  Audience 观众；听众；受众；阅听人<br>  target audience 目标观众；目标消费者；目标大众；目标受众<br>  Audience area 听众区；看台区；观众区<br>  target audience 目标受众；目标观众；目标客户<br>  audience rating n. 收视率；试听率<br>  mass audience 大众受众</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*material*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  ma : te : ri : al ( 英 /məˈtɪəriəl/  )<br>  n. 材料；用具；（有指明特征的）人才；素材；曲目；布料<br>  adj. 物质的；身体需要的；和推理内容相关的；重要的；（证据或事实）决定性的；客观存在的；物欲的<br>  n. (Material)(意、美)妈特力娅丽（人名）<br>  复数 materials<br>  网络释义 材质；材料；物料；资料<br>  Material 材质；材料；物料；资料<br>  Material Girl 物质女孩；拜金女孩；物质女郎；拜金女郎<br>  insulating material 隔热材料；绝热材料；绝缘物<br>  raw material 原料<br>  teaching material 教学内容；教学资料<br>  new material 新材料</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*MicroServices*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  Mi: cro : Ser : vi : ce : s<br>  微服务；<br>  微服务架构<br>  网络释义 微服务；微服务架构<br>  Microservices 微服务；微服务架构<br>  cognitive microservices 认知微服务；认证微服务<br>  Microservices Architecture 微服务架构</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*Guide*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  gui : de  ( 英 /ɡaɪd/ )<br>  n. 指南；向导；入门书；<br>  vt. 引导；带领；操纵；<br>  vi. 担任向导；<br>  n.(Guide)人名；（法、葡）吉德<br>  过去式 guided；<br>  过去分词 guided；<br>  现在分词 guiding；<br>  复数 guides；<br>  第三人称单数 guides；<br>  网络释义 导游、指导、指南、领队<br>  Guide 导游；指导；指南；领队；<br>  guide post 路标；引导柱；导柱；导杆<br>  User Guide 说明书；用户指南；用户操作手册</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*In short*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  总之；<br>  简言之；<br>  网络释义 简言之；总之；简而言之；简单地说<br>  in short 简言之；总之；简而言之；简单地说<br>  in the short term 从短期来看<br>  in a short time 不久；在短时间内</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*architectural*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  ar : chi : te : c : tur : al（chi读ki的音，英 /ˌɑːkɪˈtektʃərəl/  ）<br>  adj. 建筑学的；建筑上的；符合建筑法的<br>  网络释义 建筑；建筑设计；建筑材质；建筑学的<br>  architectural 建筑；建筑设计；建筑材质；建筑学的<br>  architectural style 建筑风格；建筑形式；架构风格<br>  Architectural acoustics 建筑声学；建筑音响；构筑声学；建筑音响学</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*style*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  s : ty : le  （ 英 /staɪl/ ）<br>  n. 风格；时尚；类型；字体<br>  vt. 设计；称呼；使合潮流<br>  vi. 设计式样；用刻刀作装饰画<br>  n. (Style)人名；（英）斯泰尔<br>  过去式 styled；<br>  过去分词 styled；<br>  现在分词 styling；<br>  复数 styles；<br>  第三人称单数 styles；<br>  网络释义 风格；样式；款式；作风<br>  style 风格；样式；款式；作风<br>  Style 作风<br>  Text Style 字体样式；字布局；文字样式；文字布局</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="number">*a</span>pproach <span class="keyword">to</span>**</span><br></pre></td></tr></table></figure>
<p>  a : pp : roa : ch  （ 英 /əˈprəʊtʃ/  ）<br>  接近；约等于；通往…的方法<br>  网络释义 约等于；接近；类似；办法；<br>  approach to 约等于；接近；类似；办法<br>  approach h to criticality 接近临界<br>  approach h to 做某事的方法；约等于；接近；对…的态度</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*developing*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  de : ve : lo : ping  （ 英 /dɪˈveləpɪŋ/  ）<br>  adj. 发展中的；生长的；变化的<br>  n. 发展<br>  v. 发展；成长；产生；感受；使（摄影胶片）显影（develop的现在分词）<br>  网络释义 发展；发展中的；显影；开发<br>  Developing 发展；发展中的；显影；开发<br>  developing trend 发展趋势；发展走向；趋势<br>  developing machine 洗片机；显影机；头影机（这个头？我抄的有道词典上的）；显色机</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*single*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  sin : gle （ 英 /ˈsɪŋɡl/ ）<br>  adj. 单一的；单身的；单程的<br>  n. 一个；单打；单程票<br>  vt. 选出<br>  vi. 击出一垒安打<br>  过去式 singled<br>  过去分词 singled<br>  现在分词 singling<br>  复数 singles<br>  第三人称单数 singles<br>  网络释义 未婚；一垒安打；单曲；单一的；<br>  single 未婚；一垒安打；单曲；单一的<br>  single market 统一市场；北京市场；单一市场；同一市场<br>  single parent 单亲家庭；单亲；单父协同；单亲母亲</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="built_in">application</span>**</span><br></pre></td></tr></table></figure>
<p>  a : pp : li : ca : tion （ 英 /ˌæplɪˈkeɪʃn/  ）<br>  n. 应用；申请；应用程序；敷用；（对事物、学习等）投入<br>  网络释义 用途；应用软件；应用<br>  APPLICATION 用途；应用软件；应用<br>  application fee 申请费；报名费；申请费用；登记费<br>  patent application 专利申请；专利申请书；专利声请；专利申请说明书</p>
<p>  patent<br>  pa : ten : t  （英 /‘pæt(ə)nt; ‘peɪt(ə)nt/）<br>  n. 专利权；专利证；专利品；<br>  adj. 专利的；特许生产或销售的；显著的；公开的；（脉管等）开放的<br>  v. 取得…的专利权；授予专利<br>  复数 patents<br>  过去式 patented<br>  过去分词 patented<br>  现在分词 patenting<br>  第三人称单数 patents<br>  网络释义 专利权；专利；专利品；科技玩具<br>  patent 专利权；专利；专利品；科技玩具<br>  patent family 专利族；同族专利<br>  patent attorney 专利律师；专利代理人；称为专利法务人员</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">**a suite of**</span></span><br></pre></td></tr></table></figure>
<p>  s : ui : te（ui读wi的音， 英 /swiːt/ ）<br>  一系列<br>  网络释义 一套；一整组；详细翻译（详细翻译&gt;&gt;a suite of 一系列；一套…）<br>  a suite of 一套；一整组；详细翻译<br>  a suite of racks 一套机架<br>  a suite of paintings 一组从不同角度和层次反映同一中心思想和题材的绘画</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*small*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  s : ma : ll  （ 英 /smɔːl/  ）<br>  adj. 少的，小的；微弱的；几乎没有的；不重要的；幼小的<br>  adv. 小小地；卑鄙地<br>  n. 小件物品；矮小的人<br>  n. （Small）人名；（英）斯莫尔<br>  网络释义 小的；小型的；小码；卡片纸英国标准<br>  small 小的；小型的；小码；卡片纸英国标准<br>  small intestine 小肠<br>  small incision 小切口；隧道切口；微创；微小切口</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*services*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  s : er : vi : ce : s  （ 英 /‘sə:visis/ ）<br>  n. 服务；服务项目（service复数形式）<br>  v. 服务（service的第三人称单数）<br>  网络释义 服务；服务项目；服务范围；服务业<br>  Services 服务；服务项目；服务范围；服务业<br>  Services 服务<br>  Web Services 网络服务；Web服务；应用</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="keyword">each</span>**</span><br></pre></td></tr></table></figure>
<p>  ea : ch  （ 英 /iːtʃ/  ）<br>  det. （两个或两个以上的人或物中）各自<br>  pron. （两个或两个以上的人或物中）每个<br>  adv. 每个地<br>  adj. 各自的<br>  网络释义 每个；各自；每次；每一<br>  Each 每个；各自；每次；每一<br>  each other 互相；彼此；相互；取长补短<br>  Each line 每行</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="built_in">running</span>**</span><br></pre></td></tr></table></figure>
<p>  run : ning  （ 英 /ˈrʌnɪŋ/  ）<br>  n. 运转；赛跑；流出<br>  adj. 连续的；流动的；跑者的，运转着的<br>  v. 跑；运转（run的ing形式）；行驶<br>  n. (Running)人名；（英）朗宁<br>  网络释义 跑步；跑；磨合；运行<br>  running 跑步；跑；磨合；运行<br>  Running Man 过关斩将；奔跑吧兄弟；落跑老爸；奔跑的男人<br>  running shoes 跑步鞋；慢跑鞋；竞走鞋</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*own*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  o : wn （ 英 /əʊn/  ）<br>  vt. 拥有；承认<br>  vi. 承认<br>  adj. 自己的；特有的<br>  n. 自己的<br>  n.（Own）人名；（阿拉伯）奥恩（我就服这些人名，不会读是吧，读这个中文式译音人名就会读了）</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="built_in">process</span>**</span><br></pre></td></tr></table></figure>
<p>  p : ro : ce : ss  (  英 /prəˈses; (for n.) ˈprəʊses/ )<br>  n. （为达到某一目标的）过程；（自然变化的）工程；工艺流程；诉讼程序；传票；突起；进展；（发型）直发式<br>  v. 加工；审核；处理（数据）；队列行进；冲印（照片）；把（头发）弄成直发<br>  adj. 经过特殊加工的；照相板的；染印法的<br>  第三人称单数 processes<br>  过去式 processed<br>  过去分词 processed<br>  现在分词 processing<br>  复数 processes<br>  网络释义 进程；流程；过程<br>  process 进程；流程；过程<br>  Process Management 进程管理；过程管理；流程管理；进程管理<br>  Background Process 后台进程；背景程序；背景处理程序</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*communicating*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  com : mu : ni : ca : ting ( 英 /kə’mjʊnə,keɪtɪŋ/ )<br>  adj. （房间）相同的，相连的<br>  v. 交流；传递；传播（communicate的现在分词）<br>  网络释义 沟通；交流；通信的互通的；交流与通讯<br>  Communicating 沟通；交流；通信的互通的；交流与通讯<br>  communicating vessels 连通器；连通管<br>  Communicating junctions 通讯连接</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*lightweight*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  li : ght : wei : ght ( 英 /ˈlaɪtweɪt/ )<br>  n. 轻量级（拳击手）；比通常重量轻的人或东西；无足轻重的人（或事）<br>  adj. 轻量的；给人印象不深的；无足轻重的；比通常重量轻的；浅薄的；<br>  网络释义 轻量级；轻身的；轻量；轻量化；<br>  lightweight 轻量级；轻身的；轻量；轻量化<br>  lightweight 轻填料；轻质搀和料<br>  lightweight cover 轻型上盖；避雷保护</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*mechanisms*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  me : cha : ni : sm : s（cha 读 ke 的音，英 /‘mekənɪzəmz/ ）<br>  n. 机制；[计]机构（mechanism的复数）；机械；[机]机构学<br>  网络释义 发病机制；发生机制；机制；机构<br>  Mechanisms 发病机制；发生机制；机制；机构<br>  interaction mechanisms 互动机制；作用机制<br>  resistant mechanisms 耐药机制；抗病机制</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*often*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  o : f : ten ( 英 /ˈɒfn; ˈɒftən/  )<br>  adv. 常常；时常；往往，大多<br>  比较级 more often 或 oftener；<br>  最高级 most often 或 oftenest<br>  网络释义 经常；常常；时常；常有<br>  Often 进场；常常；时常；常有<br>  more often 更经常；经常；更多的时候；更多<br>  OFT OFTen 常常；再三</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*HTTP*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  H : T : T : P ( 英 /ˌeɪtʃ tiː tiː ˈpiː/  )<br>  abbr. 超文本传输协议（Hyper Text Transfer Protocol）<br>  网络释义 超文本传输协议（Hyper Text Transfer Protocol）；网站；平台；超文本传送协议</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*resource*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  re : sou : r : ce ( 英 /rɪˈsɔːs; rɪˈzɔːs/  )<br>  n. 资源，财力；办法；智谋<br>  vi. 向…提供资金<br>  网络释义 资源；资源类型；财力；办法<br>  Resource 资源；资源类型；财力；办法<br>  human resource 人力资源；激励；人事部<br>  computational resource 计算资源</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*API*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  A : P : I ( /ˌeɪ piː ˈaɪ/  )<br>  abbr. 空气污染指数（Air Pollution Index）；应用程序界面（Application Program Interface）；精确位置指示器（Accurate Position Indicator）；美国石油学会（American Petroleum Institute）；自动发音教学机（Automated Pronunciation Instructor）<br>  网络释义 美国石油协会；应用程序接口；美国石油学会；应用编程接口<br>  API 美国石油协会；应用程序接口；美国石油学会；应用编程接口<br>  Windows API 使用；调用；关于进程操作的；关于线程操作的<br>  Google API 谷歌应用界面；应用程序编程接口；网址二维码生成函数；应用程序接口</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*these*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  th : e : se ( 英 /ðiːz/  )<br>  det. 这些（this的复数）<br>  pron. 这些（this的复数）<br>  adj. 这些的（this的复数）<br>  网络释义 这些，此等；复数；这些个<br>  These 这些；此等；复数；这些个<br>  Know these 知其然；到知其然<br>  These payments 营养费</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*built*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  bu : il : t ( 英 /bɪlt/ )<br>  v. 建造，建立；逐步增强；把…嵌入（墙壁、物体等）（build的过去式和过去分词）<br>  adj. 有…体格的；身段优美的；….建成的<br>  网络释义 建起；比优丽；建有；建好<br>  Built 建起；比优丽；建有；建好<br>  Built NY 比优丽<br>  BLT Built 建造；制作<br>  built in 安装在里面的；装入的；机内的<br>  built up 组合<br>  built on 以…作基础</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="keyword">around</span>**</span><br></pre></td></tr></table></figure>
<p>  a : roun : d ( 英 /əˈraʊnd/  )<br>  adv. 在四周；朝对立面；到处；漫无目的的；在附近；大约；围绕；以圆周计算；现有；转弯<br>  prep. 围绕；在那边；绕着；同…一致；到处；以（已提及物）为中心；迂回<br>  网络释义 围绕；四处；在周围；大约<br>  Around 围绕；四处；在周围；大约；<br>  come around 苏醒；顺便来访；来访；复原<br>  stick around 在附近逗留或等待；在附近等着；在邻近勾留或等候；逗留<br>  all round 周围；到处，四处<br>  around here 附近；在这周围<br>  go around 四处走动；供应；（消息）流传</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*business*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  bu : si : ne : ss ( 英 /ˈbɪznəs/ )<br>  n. 商业，交易；生意；事务，业务；职业，行业；<br>  网络释义 商业；生意；企业；业务<br>  Business 商业；生意；企业；业务<br>  Business 业务<br>  business cycle 商业周期；经济周期；商业周期；景气循环<br>  business card 名片；商务名片<br>  in business 经商；在经营；在商界<br>  business philosophy 经营理念，经营哲学</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*capabilities*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  ca : pa : bi : li : ti : es ( 英 /ˌkeɪpəˈbɪlətɪs/  )<br>  n. 能力（capability的复数）；功能；性能<br>  网络释义 能力；功能；权限；责任<br>  capabilities 能力；功能；权限；责任<br>  economic capabilities 经济实力；经济能力<br>  defense capabilities 防卫作战能力；防务能力；防卫功能；<br>  process capability 加工能力；工序能力<br>  design capability 设计能力</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*independently*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  in : de : pen : den : t : ly ( 英 /ˌɪndɪˈpendəntli/  )<br>  adv. 独立地；自立地<br>  网络释义 各自地；独立地；独自地；自立地<br>  independently 各自地；独立地；独自地；自立地<br>  think independently 独立思考；独立的思考<br>  living independently 独立生活<br>  independently of 独立于…之外；与…无关</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*deployable*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  de : p : lo : y : a : ble<br>  adj. 可开展的<br>  网络释义 可开展的；散播性<br>  deployable 可开展性的；散播性<br>  Deployable Structures 折叠结构；可展结构<br>  deployable joint 运动关节</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*fully*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  fu : lly ( 英 /ˈfʊli/  )<br>  adv. 充分地；完全地；彻底地<br>  n. (Fully)人名；（法）菲利<br>  网络释义 完全地；彻底地；充分地；十分地<br>  fully 完全地；彻底地；充分地；十分地<br>  FULLY OPENING 全开口；全启齿；齐闭口<br>  fully  secured 足额担保；全额担保<br>  fully automatic 全自动的<br>  fully integrated 完全整合<br>  fully loaded 满载</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="built_in">auto</span>mated**</span><br></pre></td></tr></table></figure>
<p>  au : to : ma : te : d ( 英 /ˈɔːtəˌmeɪtɪd/  )<br>  adj. 自动化的；机械化的<br>  v. 自动化（automate的过去分词）；自动操作<br>  网络释义 自动化的；自动的；机械化的；自动化<br>  automated 自动化的；自动的；机械化的；自动化<br>  automated design 自动设计；自动化设计；自动想象<br>  Automated inspection 自动化检验；自动检验<br>  automated machine 自动化机械；自动化的机器<br>  automated teller machine 自动柜员机<br>  automated welding 自动焊接</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*deployment*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  de : p : lo : y : men : t ( 英 /dɪˈplɔɪmənt/ )<br>  n. 调度，部署<br>  复数 deployments<br>  网络释义 部署；展开；发布；布防<br>  Deployment 部署，展开；发布；布防<br>  Deployment Editors 部署编辑器；安排编纂器<br>  Resources deployment 资源配置<br>  disposition n.调度，部署</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*machinery*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  ma  chi : ne : ry ( 英 /məˈʃiːnəri/  )<br>  n. 机械；机器；机构；机械装置<br>  网络释义 机械；机器；机具<br>  machinery 机械；机器；机具<br>  packaging machinery 包装机械；包装设备；包装机器；放大器<br>  Electrical Machinery 电机学；电力机械；电机；电机驱动<br>  machinery and equipment 机器及设备<br>  construction machinery 建筑机械；施工机械<br>  agricultural machinery 农业机械</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*there*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  the : re ( 英 /ðeə(r)/  )<br>  adv. 在那里；在那边；在那点上；<br>  int. 你瞧<br>  n. 那个地方<br>  网络释义 那里；在那里；那儿；那<br>  There 那里；在那里；那儿；那<br>  Always There 永驻；守候一生；到约定的那时；总在我身旁<br>  There be 句型；的句子结构；存在句；结构<br>  out there 到战场；在那里<br>  over there adv. 在那里<br>  go there 去那里</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*bare*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  b : are ( 英 /beə(r)/ )<br>  adj. 空的；赤裸的；无遮蔽的<br>  vt. 露出；使赤裸<br>  n. (Bare)人名；（英）贝尔<br>  比较级 barer<br>  最高级 barest<br>  过去式 bared<br>  过去分词 bared<br>  现在分词 baring<br>  网络释义 赤裸的；光光；赤裸；仅仅的<br>  bare 赤裸的；光光；裸露；仅仅的<br>  bare mass 裸质量<br>  bare machine 裸机；硬件计算机；裸机<br>  bare of vt. 几乎没有，缺乏<br>  lay bare 揭发，暴露；公开<br>  bare feet 赤脚；光脚；光着脚</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*minimum*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  mi : ni : mum ( 英 /ˈmɪnɪməm/ )<br>  n. 最小值；最低限度；最小化；最小量<br>  adj.最小的；最低的<br>  复数 minimums 或 minima<br>  网络释义 最小的；最低；起码；最小量<br>  minimum 最小的；最低；起码；最小量<br>  minimum charge 最低费用；最低运费；最低收费<br>  minimum balance 最小库存余量；最低余额；存款限制；把费用减到最低限度</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="keyword">bare </span>minimum of**</span><br></pre></td></tr></table></figure>
<p>  最低限度的<br>  网络释义 Bare Minimum Of Expense 最低支出</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*centralized*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  cen : tra : li : ze : d ( 英 /‘sentrəlaɪzd/  )<br>  adj. 集中的；中央集权的<br>  v. 集中（centralize的过去分词）<br>  网络释义 集中的，中央集权的；一致<br>  Centralized 集中的；中央集权的；一致<br>  centralized control 集中控制；中央控制；集中控制方式；中心控制<br>  Centralized Monitoring 集中监控；中化监查<br>  centralized management 集中式管理；集权管理<br>  centralized control 集中控制<br>  centralized processing 集中式处理</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*management*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  ma : na : ge : men : t ( 英 /ˈmænɪdʒmənt/  )<br>  n. 管理；管理人员；管理部门；操纵；经营手段<br>  复数 managements<br>  网络释义 管理；经营；管理学；管理层；<br>  Management 管理；经营；管理学；管理层<br>  Management Accounting 管理会计；管理会计学；治理会计；会计管理<br>  performance management 绩效管理；业绩管理；性能管理<br>  management system 管理系统；经营责任制<br>  quality management 质量管理<br>  project management 项目管理；专案管理</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*written*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  wri : tten ( 英 /ˈrɪtn/  )<br>  adj. 书面的，成文的，文字的<br>  v. 写（writen的过去分词）<br>  网络释义 写成；写给；书面；成文<br>  Written 写成；写给；书面；成文<br>  written English 书面英语；书面语；书面表达；英语书面语<br>  written notice 书面通知；面通知；书面通知<br>  written by 由…所写<br>  written english 书面英语<br>  written consent 书面同意；同意书</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*different*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  di : ffe : ren : t ( 英 /ˈdɪfrənt/  )<br>  adj. 不同的；个别的；与众不同的<br>  网络释义 不同；差异；两样<br>  Different 不同；差异；两样<br>  different from 不同于；两回事；不同；区别于<br>  Different Seasons 四季奇谭；不同的季节；肖申克的救赎；不同季节<br>  different from 与…不同，不同于<br>  different kinds 不同的种类<br>  in different ways 以不同方式；用不同方法；通过不同的方式</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*programming*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  pro : g : ram : ming ( 英 /ˈprəʊɡræmɪŋ/  )<br>  n. 设计；规划；编制程序；[计]程序编制<br>  网络释义 编程；程序设计；编程；程序编制<br>  programming 编程；程序设计；编程；程序编制<br>  Linear Programming 线性规划；第二十九章；线性程序编制；线性规划法<br>  generic programming 泛型；泛型编程；程序设计；类属编程<br>  linear programming n. 线性规划<br>  programming language 编程语言；程序设计语言<br>  dynamic programming 动态规划；动态程序设计</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*languages*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  lan : g : ua : ge : s ( 美 /‘læŋgwɪdʒ/ )<br>  n. 语系，语种；语言文字（language复数）<br>  网络释义 语文；语言；语言能力；语言学<br>  Languages 语文；语言；语言能力；语言学<br>  altaic languages 阿尔泰语系；阿尔泰语言<br>  Uralic languages 乌拉尔语系<br>  modern languages 现代语言（modern language的复数）<br>  foreign languages school 外语学校<br>  romance languages 罗曼斯语（由拉丁语演变而成的语言）</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="keyword">use</span>**</span><br></pre></td></tr></table></figure>
<p>  u : se ( 英 /juːz/  )<br>  n. 使用；用途；发挥<br>  vt. 利用；耗费<br>  vi. 使用，运用<br>  n.(Use)人名；（德）乌泽<br>  过去式 used<br>  过去分词 used<br>  现在分词 using<br>  复数 uses<br>  第三人称单数 using<br>  网络释义 使用；用途；利用；应用<br>  use 使用；用途；利用；应用<br>  use up 用完；用光；耗尽<br>  Use Case 用例；用例图<br>  make use of 使用；利用<br>  in use 在使用中<br>  of use 有用</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**<span class="class"><span class="keyword">data</span>**</span></span><br></pre></td></tr></table></figure>
<p>  da : ta ( 英 /ˈdeɪtə; ˈdɑːtə/  )<br>  n. 数据（datum的复数）；资料<br>  n. (Data)人名；(日)驮太 (姓)；(印、葡)达塔<br>  网络释义 数据；资料；数据区；参考数据<br>  data 数据；资料；数据区；参考数据<br>  Data Center 数据中心；资料中心；数据交互中心<br>  data collection 数据收集；数据采集；数据搜集；搜集资料<br>  data processing 数据处理<br>  experimental data 实验数据；试验数据<br>  data mining 数据挖掘技术（即指从资料中发掘咨询或知识）</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*storage*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  s : to : ra : ge ( 英 /ˈstɔːrɪdʒ/  )<br>  n. 存储；仓库；贮藏所<br>  复数 storages<br>  网络释义 存储；储存；保管；贮藏；<br>  Storage 存储；储存；保管；贮藏<br>  storage room 行李仓；储物室；储藏室；贮藏室<br>  cold storage 冷藏；冷藏库；冷库；冷藏公司<br>  data storage 数据存储<br>  storage system 存储系统；存储器存储系统<br>  energy storage 蓄能；能量储存；储能器</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*technologies*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure>
<p>  te : ch : no : lo : gi : es (  美 /tɛk’nɑlədʒi/  )<br>  n. 技术；科技（technology的复数）<br>  网络释义 姓；科技<br>  Technologies 姓；科技<br>  Agilent Technologies 安捷伦科技公司；安捷伦科技有限公司；安捷伦<br>  United Technologies 联合技术；联合技术公司；联合科技；联合科技公司<br>  united technologies 联合科技（财富500强公司之一，总部所在地美国，主要经营航空航天）<br>  cleaner technologies 净化技术；清洁技术<br>  lucent technologies 美国朗讯科技公司（财富500强公司之一）<br>```</p>
]]></content>
      <categories>
        <category>MICROSERVICES</category>
      </categories>
      <tags>
        <tag>MICROSERVICES</tag>
        <tag>词汇</tag>
      </tags>
  </entry>
  <entry>
    <title>这世间，唯有青春与梦想不可辜负</title>
    <url>/2020/05/16/%E5%BF%83%E6%83%85/%E8%BF%99%E4%B8%96%E9%97%B4%EF%BC%8C%E5%94%AF%E6%9C%89%E9%9D%92%E6%98%A5%E4%B8%8E%E6%A2%A6%E6%83%B3%E4%B8%8D%E5%8F%AF%E8%BE%9C%E8%B4%9F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1j4411j79x/?spm_id_from=trigger_reload" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1j4411j79x/?spm_id_from=trigger_reload</a>  </p>
<blockquote>
<p>衡水中学“学霸”励志演讲：这世间，唯有青春与梦想不可辜负</p>
</blockquote>
<p>这个是他的标题挺好的；<br>这个是我妹妹介绍我去看的，她们班上成人礼看了这个当时没看完，然后后面发烧回家把它又完整的看了一遍；我看了，然后本来是昨天看的，准备写些什么的；因为昨天一天面试了两轮，有点累；然后睡了昨天睡的很好；  </p>
<p>妹妹： 张锡锋<br>妹妹：原来我常常想，别人尊重我，是因为我很优秀；可是到了衡中才发现，别人尊重我，是因为别人很优秀，这是衡中学子独有的青春魅力。  </p>
<p>我跟我妹的关系，是一种十分平等的关系，就比如说推荐我或者说安利我看某个觉得意义非常大的一个视频什么的；或者是….总之我认为我现在和家人之间的一个相处的一个模式就是与家人都是一个平等的一个状态；我可以告诉你我现在的一个状态；你也向我倾诉你的心声；我觉得这种状态非常的好；好了不扯了；  </p>
<p>这个视频昨天看到后面其实我泪目了。<br>打动人心的地方可能在于的确有些话戳中心坎了。也有可能是我的心底还不够坚强坚硬吧。然后容易感动的缘故。  </p>
<p>总的来说我希望我，我认识我爱的人爱我的人不管年龄多少岁余生都能够朝着自己的一个目标而努力奋斗追逐着。  </p>
<p>下面是看视频的他的一个演讲的内容；我也是一边听一边写；对了其实我发现，就是在b站上面其实每天有50上下左右的人在看这个视频；其实他的这场演讲带来的力量也是很大的，能够做到一种就是正面积极向上在自己处于低糜或者是迷茫的这样一种状态下，然后给人一种就是正确的这样一个方向指引的作用是非常值得学习的；  </p>
<p>我也是其中的受益者即使我当前已经离开学校的生活步入社会了。  </p>
<p>好了不多说了，我这人就是容易比较话多有个时候自己跟自己说话都能说得睡不着觉。害，愁人。(｡•ˇ‸ˇ•｡)  </p>
<p>对了，建议请使用原速度进行播放，不要快进。（更有感觉）  </p>
<h2 id="演讲稿"><a href="#演讲稿" class="headerlink" title="演讲稿"></a>演讲稿</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">尊敬的老师，亲爱的同学们，大家好！（此时他鞠躬<span class="number">90</span>度，不错小伙子，哈哈哈哈哈~~~）</span><br><span class="line"></span><br><span class="line">我是<span class="number">838</span>班的张锡锋。</span><br><span class="line"></span><br><span class="line">相信很多同学应该认识我，在大家眼里，我扮演更多的通常是个谐星的角色。  </span><br><span class="line"></span><br><span class="line">可是大家似乎忘记了，在我这看似狂野，实则狂野的外表下（不哦老阿姨觉得你长的挺清秀的哦哈哈哈哈），也隐藏着一颗憧憬阳光的心。（很好）</span><br><span class="line"></span><br><span class="line">所以，我站在这里，与大家分享关于学习，（此处应该加个逗号，不然就变成了“学习我的看法” emm）我的看法。</span><br><span class="line"></span><br><span class="line">我演讲的主题是：青春与梦想。  </span><br><span class="line"></span><br><span class="line">话说这世间，唯有青春与梦想不可辜负。  </span><br><span class="line"></span><br><span class="line">花开正好，微风不燥，（我那句阳光正好微风不燥也是取自这里哈哈哈哈）我们扬帆，起航。  </span><br><span class="line"></span><br><span class="line">首先，青春，青春是什么颜色的？  </span><br><span class="line"></span><br><span class="line">是五月的花海，灿烂无比；是海边的浪花，永不停息；是仲夏的骄阳，激情四射。  </span><br><span class="line"></span><br><span class="line">青春在衡中，是绚丽多彩的；  </span><br><span class="line"></span><br><span class="line">原来啊，我常常想，别人尊重我，是因为，我很优秀。  </span><br><span class="line"></span><br><span class="line">可是，到了衡中才发现，别人尊重我，是因为，别人很优秀。  </span><br><span class="line"></span><br><span class="line">这，是衡中学子，独有的，青春魅力！  </span><br><span class="line"></span><br><span class="line">同样，正值青春，我们有犯错的权利。  </span><br><span class="line"></span><br><span class="line">记得第一次交改错本，我问老师要改多少？（好了，他在讲述他的二货经历了，跟我有的一比）</span><br><span class="line"></span><br><span class="line">老师说，根据个人情况，在精不在多。  </span><br><span class="line"></span><br><span class="line">哦呜？  </span><br><span class="line"></span><br><span class="line">是吗？</span><br><span class="line"></span><br><span class="line">这可是您说的。</span><br><span class="line"></span><br><span class="line">说时迟那时快，我顿时绽放了一个耀眼的笑容。（这个笑容可以想象）</span><br><span class="line"></span><br><span class="line">我心不在焉，草草了事。</span><br><span class="line"></span><br><span class="line">可是，改错发下来时却是，一片万紫千红的样子。  </span><br><span class="line"></span><br><span class="line">上面，有详细的批注，评语是这样的：这个改错改的不错，有些题改着改着就错了。（唉哟这个老师很皮哦）</span><br><span class="line"></span><br><span class="line">我们老师青春活泼的力量，就这样让学习生活妙趣横生。  </span><br><span class="line"></span><br><span class="line">其次，是这里青春的学习氛围（其实他这里停顿了一定时间，就是等着下面的同学渐渐静下来然后再说话，嗯，挺好的），当你满眼，都是追求卓越的字样时，便也，没理由落后了。  </span><br><span class="line"></span><br><span class="line">（好了，二货的自黑开始了）连我这个，被同学们誉为：古娜拉黑暗之神的人，也，早已经，在前往卓越的路上。</span><br><span class="line"></span><br><span class="line">我喜欢，在某个课间琢磨那些，优雅的，美丽的数学题。（的确，如果真的觉得诶这个的确十分有趣，其实是会慢慢的沉下去真正喜欢上这些以前觉得枯燥乏味的东西。比如说数据结构）</span><br><span class="line"></span><br><span class="line">（好了，二货长吸一口气，哈哈）小东西，真别致。（他这里又在等下面的声音静下来一点然后才开始说话，不错）</span><br><span class="line"></span><br><span class="line">我喜欢，在某天清晨头昏脑胀时，回想刚刚学过的，系统命名法。  </span><br><span class="line"></span><br><span class="line">哇，这一瞬间有一百万个可能。  </span><br><span class="line"></span><br><span class="line">我喜欢，某天晚上躺在床上，回想曾经背过的老子，“知人者智，自知者明。圣人者有力，自胜者强。” 我好困啊……</span><br><span class="line"></span><br><span class="line">第二，梦想。</span><br><span class="line"></span><br><span class="line">有一条路，人烟稀少寸步难行，但是，却不得不坚持前进，因为它的尽头，种着梦想。（这个时候我想到了一首纯音乐可以停下就是叫啥来着 the right path；然后通过这首纯音乐，我也发现了一首意义非常对于我而言非常好的一首小诗；黄色的树林里分出两条路 我选择了人迹更少的一条 从此决定了我一生的道路；同样也送给你们；有个时候听纯音乐，其实也是在听自己内心的声音。）</span><br><span class="line"></span><br><span class="line">同学们，你的梦想是什么？（我以前可能不知道，但是我现在知道了，也知道我前进的方向是什么了。）</span><br><span class="line"></span><br><span class="line">相信，很多人的回答都会是清北这样的顶尖名校。</span><br><span class="line"></span><br><span class="line">我们选择它们不仅仅因为它们是名校，还因为它们坐落的城市，它们美丽的传说。  </span><br><span class="line"></span><br><span class="line">对于痴迷于地理学科的我来说，外面的世界，外面的城市就是我的梦想。  </span><br><span class="line"></span><br><span class="line">这里，广东，对外开放的前沿，我把它做成卡贴随身携带；</span><br><span class="line"></span><br><span class="line">这里，上海，全中国最大的城市，我把它拍成照片贴在课桌上；  </span><br><span class="line"></span><br><span class="line">这里，西安，大唐不夜城，我做梦都会想起它。</span><br><span class="line"></span><br><span class="line">看完这些，不知道同学们心里有什么感触；（感触嘛，也有的，我也想去外面的世界多看看多走走多经历）</span><br><span class="line"></span><br><span class="line">此刻，你的心里是否充满了对未来的渴望？</span><br><span class="line"></span><br><span class="line">我问同学们一个问题，请大家伸出右手。</span><br><span class="line"></span><br><span class="line">看，它像什么？（他举起了右手，说实话吗？像手）</span><br><span class="line"></span><br><span class="line">像右手？</span><br><span class="line"></span><br><span class="line">这都被你发现了吗？（不错啊，都很皮，哈哈哈哈）</span><br><span class="line"></span><br><span class="line">同学们，果然见多识广啊！（那是那是，谦虚一点，自己人知道就行）</span><br><span class="line"></span><br><span class="line">请大家，五指并拢，放于腰间，慢慢高举，举过头顶，张开。</span><br><span class="line"></span><br><span class="line">成功了吗？那恭喜你！你给自己，放了个烟花。（不错的小伙子，哈哈哈哈）</span><br><span class="line"></span><br><span class="line">可是，烟花虽美，转瞬即逝。（我这个烟花不太美，五指太短了看不出来烟花的样子）</span><br><span class="line"></span><br><span class="line">现在，请同学们伸出你的烟花，把它攥成拳。</span><br><span class="line"></span><br><span class="line">大家看，它又像什么？（像石头）</span><br><span class="line"></span><br><span class="line">好，我们不要再来了。。</span><br><span class="line"></span><br><span class="line">请大家把你的右拳置于你的耳边，如果你能清楚地听到脉搏的律动，那么我告诉你：这，是生命。  </span><br><span class="line"></span><br><span class="line">我们梦想很美，很远大；</span><br><span class="line"></span><br><span class="line">但是只有把掌握成拳，用尽全力，挥向生活，这样，才是青春路上，该有的姿态。（不错，好样的，我怎么感觉我在，，创建我自己的弹幕。。。。）</span><br><span class="line"></span><br><span class="line">同学们，你，有没有感到一种震撼？</span><br><span class="line"></span><br><span class="line">相信，很多人都会跟我一样，因为这是一种念想。</span><br><span class="line"></span><br><span class="line">一种发自内心，由内而外的，对城市，对未来的渴望。</span><br><span class="line"></span><br><span class="line">少年们早已不想拘泥于这里，只能在所谓，抖音、电影里，去观望别人的生活。（是的，所以，我们要做的是过好自己的生活，而不是去羡慕别人，其实自己也可以）</span><br><span class="line"></span><br><span class="line">可是，为什么我们就只能做那个躲在阴暗的角落里，新鲜的舞台之上，光鲜亮丽的别人的那个，卑微的人。</span><br><span class="line"></span><br><span class="line">这样不行。</span><br><span class="line"></span><br><span class="line">一点儿都不好玩。（我也觉得，因为你不觉得干巴巴的看着别人的生活，只会让自己emm觉得自己的生活并没有，怎么说呢如果自己的三观并不是摆的很正的话，就会产生一种攀比的这样一种心理情绪，这样是非常不好的。）</span><br><span class="line"></span><br><span class="line">我们，会走出去，顺境也好逆境也好，人生，本就是一场与种种困难无休无尽的斗争，一场，敌众我寡的斗争。（卧槽，他这里好像念错了，念成了敌寡敌众的斗争，但是当前他并没有就是因为这个点的失误而后面演讲的不好，这一点很好其实，面对失误并不慌张而是顺利的接入下一句话这样子，不错小伙子）</span><br><span class="line"></span><br><span class="line">我曾把自己向往的大学热爱的城市，拍成照片贴在课桌上，每当我精疲力竭时，都要看一下它（方便找回自己当初的信念不会感到迷茫的这样一种方式，其实也是引导自己走出低落的这样一种情绪或者说避免低落；其实我也有，就是写一些话然后经常去看，鼓励自己的这样一种方式），然后质问自己，就这样啦，你就这点东西？（是的，我也这样傻逼式自嘲）你真的真的到了最后歇斯底里不能坚持的地步了吗？</span><br><span class="line"></span><br><span class="line">你的理想是诗，理想是梦，理想是远方的田野，是穿越世界的旅行！</span><br><span class="line"></span><br><span class="line">但现在你能做的所有，只是，把手握紧！（嗯）</span><br><span class="line"></span><br><span class="line">厚积薄发！（嗯）</span><br><span class="line"></span><br><span class="line">你，只有付出！（嗯）</span><br><span class="line"></span><br><span class="line">付出你的时间，赌上你的尊严，拿出你的全部！你的everything!（嗯，是的，努力了才有收获，不努力什么也没有）</span><br><span class="line"></span><br><span class="line">当别人打游戏时你在学习，当别人睡懒觉时你在学习，你含着泪在深夜里舞蹈，在回忆里奔跑！（其实这句话好像才是打动我的点，就是听了这些话很容易就联想到以前自己努力坚持的一些画面这样子）</span><br><span class="line"></span><br><span class="line">没有人，在年少时想成为一个普通人。</span><br><span class="line"></span><br><span class="line">尽管生活，它会剥夺你的所爱践踏你的尊严，把你踩在脚下遍体鳞伤。</span><br><span class="line"></span><br><span class="line">但你，怎能，倒下！（但我，怎能，倒下！）</span><br><span class="line"></span><br><span class="line">你的身后，是挚爱的人；</span><br><span class="line"></span><br><span class="line">那些受过的伤都将成为你的勋章，都是你，送给未来的自己最好的礼物！（是的，就像是我之前说，emm，希望自己能够成为未来的自己的一块垫脚石/踏脚石）</span><br><span class="line"></span><br><span class="line">我，也有梦想啊！（我的梦想是，在java开发这一行当中慢慢的沉淀自己，遇见更多更好的人）</span><br><span class="line"></span><br><span class="line">我告诉自己，总有一天，我会站在金色的舞台上，聚光灯打向我，摄像机对准我，所有人的目光注视着我，我能站在台上侃侃而谈。此刻，世界只有我一人！（emm不错）</span><br><span class="line"></span><br><span class="line">我要让平日里轻蔑我的对手知道，我要让他们亲口说出那三个字：（我爱你？对不起？我恨你？我可能平时emm肥皂去看多了？）</span><br><span class="line"></span><br><span class="line">你，赢了！（厉害）</span><br><span class="line"></span><br><span class="line">如果说，青春，是足迹，那梦想，一定，叫做远方。</span><br><span class="line"></span><br><span class="line">请同学们相信，生活明朗，万物可爱；（是的，我确实相信着这句话）</span><br><span class="line"></span><br><span class="line">人间值得，未来可期。（是的，人间值得，未来可期！）</span><br><span class="line"></span><br><span class="line">（加油，诶我刚把网页给叉掉了，他结尾其实好像也同样是鞠躬了<span class="number">90</span>度，不错。小伙子。）</span><br></pre></td></tr></table></figure>

<h2 id="未选择的路"><a href="#未选择的路" class="headerlink" title="未选择的路"></a>未选择的路</h2><p>从前可能觉得名人名言只会发生在名人身上，其实名人也只是将自己的所感表达了出来；来纾解自己的某一种情绪而已；其实很多的时候去读某一首小诗某一句经典名句再联想一下自己的生活，很多的时候是的确有很大的一个共同之处的。<br>这就是共鸣吧。<br>将自己的表达通过文字的形式温柔的表达了出来。  </p>
<p>好了不说了，今天面试问了微服务，我直接说我不会。现在挨打的时候到了。去看书去了。  </p>
<p>对了，读这首小诗的时候，bgm切换成 <strong>the right path</strong>跟配哦~（the right path其实有段时间，在去年吧，我循环了很久，因为本身去年是一个害怕成长但又渴望成长，迷茫的一个状态，挺丧的，所以说，这个时候要么找朋友倾诉要么，听纯音乐静下心来听听自己心底的声音。建议一定要将这种情绪排解出来，不要压抑自己，不好，因为经历过，所以知道，去学会坦诚学会怎么样去接受容纳自己。希望看文的道友们也能像演讲人一样，或许是此刻或许是未来的某一个时间点能够慢慢绽放属于自己的那一星光亮。）  </p>
<p>诶诶诶我突然发现，我拍的这个照片跟我这个选择的路，有点睛的这样一个作用，哈哈哈哈哈，你看，这时候我今天拍的云，很漂亮，不像一条道路吗？哈哈哈可能是我想多了哈哈哈哈。  </p>
<p>好了话不多说我撤了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">《未选择的路》</span><br><span class="line"></span><br><span class="line">罗伯特 弗罗斯特</span><br><span class="line"></span><br><span class="line">黄色的树林里分出两条路，</span><br><span class="line"></span><br><span class="line">可惜我不能同时去涉足，</span><br><span class="line"></span><br><span class="line">我在那路口久久伫立，</span><br><span class="line"></span><br><span class="line">我向着一条路极目望去，</span><br><span class="line"></span><br><span class="line">直到它消失在丛林深处。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">但我却选择了另外一条路，</span><br><span class="line"></span><br><span class="line">它荒草凄凄，十分幽寂，</span><br><span class="line"></span><br><span class="line">显得更诱人，更美丽；</span><br><span class="line"></span><br><span class="line">虽然在这两条小路上，</span><br><span class="line"></span><br><span class="line">都很少留下旅人的足迹；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">虽然那天清晨落叶满地，</span><br><span class="line"></span><br><span class="line">两条路都未经脚印污染。</span><br><span class="line"></span><br><span class="line">啊，留下一条路等改日再见！</span><br><span class="line"></span><br><span class="line">但我知道路径延绵无尽头，</span><br><span class="line"></span><br><span class="line">恐怕我难以再返回。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">也许多少年后在某个地方，</span><br><span class="line"></span><br><span class="line">我将轻声叹息把往事回顾：</span><br><span class="line"></span><br><span class="line">一片树林里分出两条路，</span><br><span class="line"></span><br><span class="line">而我选择了人迹更少的一条，</span><br><span class="line"></span><br><span class="line">从此决定了我一生的道路。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-尚硅谷redis视频教程-尚硅谷-周阳</title>
    <url>/2020/05/13/%E9%9D%A2%E8%AF%95/Redis-%E5%B0%9A%E7%A1%85%E8%B0%B7redis%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B-%E5%B0%9A%E7%A1%85%E8%B0%B7-%E5%91%A8%E9%98%B3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1J4411x7U1?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1J4411x7U1?p=1</a>  </p>
<p>中途换视频：<a href="https://www.bilibili.com/video/BV1Cb411j7RA?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Cb411j7RA?p=1</a>  </p>
<h2 id="NoSQL入门概述-上"><a href="#NoSQL入门概述-上" class="headerlink" title="NoSQL入门概述-上"></a>NoSQL入门概述-上</h2><ul>
<li>NoSQL入门和概述</li>
<li>Redis入门介绍</li>
<li>Redis数据类型</li>
<li>解析配置文件redis.conf</li>
<li>Redis的持久化</li>
<li>Redis的事务</li>
<li>Redis的发布订阅</li>
<li>Redis的复制（Master/Slave）</li>
<li>Redis的Java客户端Jedis</li>
</ul>
<p>所有天上飞的理念都需要落地的实现。  </p>
<p>Redis和MongoDB都是NoSQL的思想典型产品构建；  </p>
<p>NoSQL是什么？  </p>
<ul>
<li>入门概述<ul>
<li>1.互联网时代背景下大机遇，为什么用NoSQL<ul>
<li>1）单机MySQL的美好年代</li>
<li>2）Memcached(缓存)+MySQL+垂直拆分</li>
<li>3）MySQL主从读写分离</li>
<li>4）分表分库+水平拆分+mysql集群</li>
<li>5）MySQL的扩展性瓶颈</li>
<li>6）今天是什么样子？</li>
<li>7）为什么用NoSQL</li>
</ul>
</li>
<li>2.NoSQL<strong>是什么</strong></li>
<li>3.NoSQL<strong>能干嘛</strong></li>
<li>4.Redis<strong>去哪</strong>里<strong>下</strong>载</li>
<li>5.Redis<strong>怎么玩</strong></li>
</ul>
</li>
<li>3V+3高</li>
<li>当下的NoSQL经典应用</li>
<li>NoSQL数据模型简介</li>
<li>NoSQL数据库的四大分类</li>
<li>在分布式数据库中CAP原理CAP+BASE</li>
</ul>
<ol>
<li>单机MySQL的美好年代</li>
</ol>
<p>在90年代，一个网站的访问量一般都不大，用单个数据库完全可以轻松应付。<br>在那个时候，更多的都是静态网页，动态交互类型的网站不多。  </p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">-----------        -------------       ---------------</span><br><span class="line">|<span class="string">         </span>|<span class="string">         </span>|<span class="string">         </span>|<span class="string">         </span>|<span class="string">           </span>|</span><br><span class="line">|<span class="string">   APP   </span>|<span class="string"> -------&gt;</span>|<span class="string">   DAL   </span>|<span class="string"> -------&gt;</span>|<span class="string">   MySQL   </span>|</span><br><span class="line">|<span class="string">         </span>|<span class="string">         </span>|<span class="string">         </span>|<span class="string">         </span>|<span class="string"> Instance  </span>|</span><br><span class="line">------------       -------------       ---------------</span><br></pre></td></tr></table></figure>

<p>上述架构下，来看看数据存储的瓶颈是什么？  </p>
<ol>
<li>数据量的总大小      —-》一个机器放不下时</li>
<li>数据的索引（B+Tree）—-》一个机器的内存放不下时</li>
<li>访问量（读写混合）  —-》一个实例不能承受时</li>
</ol>
<h2 id="NoSQL入门概述-下"><a href="#NoSQL入门概述-下" class="headerlink" title="NoSQL入门概述-下"></a>NoSQL入门概述-下</h2><h2 id="当下NoSQL应用场景简介"><a href="#当下NoSQL应用场景简介" class="headerlink" title="当下NoSQL应用场景简介"></a>当下NoSQL应用场景简介</h2><h2 id="NoSQL数据模型简介"><a href="#NoSQL数据模型简介" class="headerlink" title="NoSQL数据模型简介"></a>NoSQL数据模型简介</h2><h2 id="NoSQL数据库的四大分类"><a href="#NoSQL数据库的四大分类" class="headerlink" title="NoSQL数据库的四大分类"></a>NoSQL数据库的四大分类</h2><h2 id="分布式数据库CAP原理"><a href="#分布式数据库CAP原理" class="headerlink" title="分布式数据库CAP原理"></a>分布式数据库CAP原理</h2><h2 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h2><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h2 id="启动后杂项基础知识"><a href="#启动后杂项基础知识" class="headerlink" title="启动后杂项基础知识"></a>启动后杂项基础知识</h2><h2 id="常用五大数据类型简介"><a href="#常用五大数据类型简介" class="headerlink" title="常用五大数据类型简介"></a>常用五大数据类型简介</h2><h2 id="key关键字"><a href="#key关键字" class="headerlink" title="key关键字"></a>key关键字</h2><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><h2 id="ZSet"><a href="#ZSet" class="headerlink" title="ZSet"></a>ZSet</h2><h2 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h2><h2 id="持久化之RDB"><a href="#持久化之RDB" class="headerlink" title="持久化之RDB"></a>持久化之RDB</h2><h2 id="持久化之AOF"><a href="#持久化之AOF" class="headerlink" title="持久化之AOF"></a>持久化之AOF</h2><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h2 id="消息订阅发布简介"><a href="#消息订阅发布简介" class="headerlink" title="消息订阅发布简介"></a>消息订阅发布简介</h2><h2 id="主从复制上"><a href="#主从复制上" class="headerlink" title="主从复制上"></a>主从复制上</h2><h2 id="主从复制下"><a href="#主从复制下" class="headerlink" title="主从复制下"></a>主从复制下</h2><h2 id="Jedis测试连通"><a href="#Jedis测试连通" class="headerlink" title="Jedis测试连通"></a>Jedis测试连通</h2><h2 id="Jedis常用API"><a href="#Jedis常用API" class="headerlink" title="Jedis常用API"></a>Jedis常用API</h2><h2 id="Jedis事务"><a href="#Jedis事务" class="headerlink" title="Jedis事务"></a>Jedis事务</h2><h2 id="Jedis主从复制"><a href="#Jedis主从复制" class="headerlink" title="Jedis主从复制"></a>Jedis主从复制</h2><h2 id="JedisPool"><a href="#JedisPool" class="headerlink" title="JedisPool"></a>JedisPool</h2><h2 id="Redis之技术的分类"><a href="#Redis之技术的分类" class="headerlink" title="Redis之技术的分类"></a>Redis之技术的分类</h2><h2 id="解决session的存储问题"><a href="#解决session的存储问题" class="headerlink" title="解决session的存储问题"></a>解决session的存储问题</h2><h2 id="NoSQL简介"><a href="#NoSQL简介" class="headerlink" title="NoSQL简介"></a>NoSQL简介</h2><h2 id="常用的NoSQL数据库-1"><a href="#常用的NoSQL数据库-1" class="headerlink" title="常用的NoSQL数据库(1)"></a>常用的NoSQL数据库(1)</h2><h2 id="常用的NoSQL数据库-2"><a href="#常用的NoSQL数据库-2" class="headerlink" title="常用的NoSQL数据库(2)"></a>常用的NoSQL数据库(2)</h2><h2 id="Redis的安装"><a href="#Redis的安装" class="headerlink" title="Redis的安装"></a>Redis的安装</h2><h2 id="Redis启动服务端和客户端"><a href="#Redis启动服务端和客户端" class="headerlink" title="Redis启动服务端和客户端"></a>Redis启动服务端和客户端</h2><h2 id="Redis单线程-多路IO复用"><a href="#Redis单线程-多路IO复用" class="headerlink" title="Redis单线程+多路IO复用"></a>Redis单线程+多路IO复用</h2><h2 id="Redis基本指令"><a href="#Redis基本指令" class="headerlink" title="Redis基本指令"></a>Redis基本指令</h2><h2 id="redis之string"><a href="#redis之string" class="headerlink" title="redis之string"></a>redis之string</h2><h2 id="redis之list"><a href="#redis之list" class="headerlink" title="redis之list"></a>redis之list</h2><h2 id="redis之set-1"><a href="#redis之set-1" class="headerlink" title="redis之set(1)"></a>redis之set(1)</h2><h2 id="redis之set-2"><a href="#redis之set-2" class="headerlink" title="redis之set(2)"></a>redis之set(2)</h2><h2 id="redis之hash"><a href="#redis之hash" class="headerlink" title="redis之hash"></a>redis之hash</h2><h2 id="redis之zset"><a href="#redis之zset" class="headerlink" title="redis之zset"></a>redis之zset</h2><h2 id="redis实现文章访问量的排序"><a href="#redis实现文章访问量的排序" class="headerlink" title="redis实现文章访问量的排序"></a>redis实现文章访问量的排序</h2><h2 id="redis之配置文件"><a href="#redis之配置文件" class="headerlink" title="redis之配置文件"></a>redis之配置文件</h2><h2 id="java连接redis"><a href="#java连接redis" class="headerlink" title="java连接redis"></a>java连接redis</h2><h2 id="Jedis实现手机号验证码"><a href="#Jedis实现手机号验证码" class="headerlink" title="Jedis实现手机号验证码"></a>Jedis实现手机号验证码</h2><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h2 id="redis之事务"><a href="#redis之事务" class="headerlink" title="redis之事务"></a>redis之事务</h2><h2 id="秒杀案例"><a href="#秒杀案例" class="headerlink" title="秒杀案例"></a>秒杀案例</h2><h2 id="ab工具模拟并发"><a href="#ab工具模拟并发" class="headerlink" title="ab工具模拟并发"></a>ab工具模拟并发</h2><h2 id="解决超卖和库存遗留问题"><a href="#解决超卖和库存遗留问题" class="headerlink" title="解决超卖和库存遗留问题"></a>解决超卖和库存遗留问题</h2><h2 id="redis持久化之RDB"><a href="#redis持久化之RDB" class="headerlink" title="redis持久化之RDB"></a>redis持久化之RDB</h2><h2 id="redis持久化之AOF"><a href="#redis持久化之AOF" class="headerlink" title="redis持久化之AOF"></a>redis持久化之AOF</h2><h2 id="redis主从复制演示"><a href="#redis主从复制演示" class="headerlink" title="redis主从复制演示"></a>redis主从复制演示</h2><h2 id="redis主从复制之薪火相传"><a href="#redis主从复制之薪火相传" class="headerlink" title="redis主从复制之薪火相传"></a>redis主从复制之薪火相传</h2><h2 id="redis主从复制之哨兵模式"><a href="#redis主从复制之哨兵模式" class="headerlink" title="redis主从复制之哨兵模式"></a>redis主从复制之哨兵模式</h2><h2 id="redis集群"><a href="#redis集群" class="headerlink" title="redis集群"></a>redis集群</h2><h2 id="redis之JedisCluster"><a href="#redis之JedisCluster" class="headerlink" title="redis之JedisCluster"></a>redis之JedisCluster</h2>]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存四大问题</title>
    <url>/2020/05/12/%E9%9D%A2%E8%AF%95/redis%E7%BC%93%E5%AD%984%E5%A4%A7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1gZ4y1s7Aw" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1gZ4y1s7Aw</a></p>
<p>之前这个的视频下架了，我就没办法再回过头去再看一遍；现在知道了，一边看一定得一定得做笔记。不然下次悄悄地没有了。想哭都没地方。  </p>
<h2 id="缓存穿透详解及实战"><a href="#缓存穿透详解及实战" class="headerlink" title="缓存穿透详解及实战"></a>缓存穿透详解及实战</h2><ol>
<li><strong>如何使用缓存？</strong></li>
</ol>
<p>（思路十分简单）</p>
<p>controller层(对于数据的访问)：  </p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">OrderService orderService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function">Integer <span class="title">insertOrder</span><span class="params">(Order order)</span></span>&#123; <span class="function"><span class="keyword">return</span> orderService.<span class="title">insertOrder</span><span class="params">(order)</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/updateOrder"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function">Integer <span class="title">updateOrder</span><span class="params">(Order order)</span></span>&#123; <span class="function"><span class="keyword">return</span> orderService.<span class="title">updateOrder</span><span class="params">(order)</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于一条数据的访问；通过id进行查询数据；</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/selectid"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function">R <span class="title">selectOrderById</span><span class="params">(Integer id)</span></span>&#123; <span class="function"><span class="keyword">return</span> orderService.<span class="title">selectOrderById</span><span class="params">(id)</span></span>;&#125;</span><br></pre></td></tr></table></figure>

<p>service层：  </p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">package com.xxx.testcache.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="params">...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> interface OrderService&#123;</span><br><span class="line">  <span class="built_in">Integer</span> insertOrder(<span class="keyword">Order</span> <span class="keyword">order</span>);</span><br><span class="line"></span><br><span class="line">  R selectOrderById(<span class="built_in">Integer</span> id);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="keyword">Order</span>&gt; selectOrderAll();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Integer</span> updateOrder(<span class="keyword">Order</span> <span class="keyword">order</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service impl（实现）层：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//查询缓存；</span></span><br><span class="line">  <span class="comment">//第一次查询缓存，即查询redis；</span></span><br><span class="line">  <span class="comment">//valueOperations这个对象专门针对于redis当中String类型的一个操作；</span></span><br><span class="line">  <span class="comment">//valueOperations是与SpringBoot整合之后的一个对象；valueOperations的上级即为redis；</span></span><br><span class="line">  <span class="comment">//valueOperations专用于操作字符串String类型；</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="comment">//如果缓存当中存在该对象则直接返回；</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//否则如果缓存当中不存在该对象则查询数据库；</span></span><br><span class="line">  <span class="comment">//查询数据库之后，再将该数据加入到缓存当中；</span></span><br><span class="line">  <span class="comment">//方便下一次查询的时候更够查询得到该记录，该对象；</span></span><br><span class="line">  <span class="comment">//然后返回给前端</span></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;finally&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果数据库也查询不到；则返回前端：无此数据</span></span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//思路简单：缓存当中有则返回该记录给前端；缓存当中没有则再查询数据库；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mapper层：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">package com.xxx.testcache.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="params">...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> interface OrderMapper&#123;</span><br><span class="line">  </span><br><span class="line">    @<span class="keyword">Select</span>(<span class="string">"insert into t_order (id,name) values (#&#123;id&#125;, #&#123;name&#125;)"</span>)</span><br><span class="line">    <span class="built_in">Integer</span> insertOrder(<span class="keyword">Order</span> <span class="keyword">order</span>);</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Select</span>(<span class="string">"select * from t_order where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="keyword">Order</span> selectOrderById(<span class="built_in">Integer</span> id);</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Select</span>(<span class="string">"select * from t_order"</span>)</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="keyword">Order</span>&gt; selectOrderAll();</span><br><span class="line"></span><br><span class="line">    @Update(<span class="string">"update t_order set  `name`=#&#123;name&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="built_in">Integer</span> updateOrder(<span class="keyword">Order</span> <span class="keyword">order</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>为什么要使用缓存？</strong></li>
</ol>
<p>（1）<strong>提高性能</strong>；  </p>
<p><strong>查询redis比查询数据库快</strong>；<br>现在的nosql数据库一般多用为redis；<br>那么关系型数据库一般多用为mysql；<br>所以当前举例关系型数据库以mysql为主；<br>非关系型数据库以redis为主进行讲解；  </p>
<p>（2）<strong>保护数据库</strong>；  </p>
<p>如果没有缓存redis，则每一次请求都将要去访问数据库；<br>那么由此也就造成了<strong>数据库的访问压力</strong>；<br>特别是在一些大公司当中，其访问量特别特别多的；<br>那么如果此时所有的查询请求都去往数据库的话，那么服务器数据库的压力也是非常大的；<br>所以当使用缓存之后；可以看到使用了缓存则，大部分请求都将会在[ <strong>命中缓存</strong> ]该步骤时进行返回给前端（就不再去访问数据库了）；<br>第一次查询将查询数据库；第二次查询就不再会去查询数据库了而是会去查询缓存；  </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="comment">//查询缓存</span></span><br><span class="line">Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//命中缓存</span></span><br><span class="line"><span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">  <span class="comment">//正常返回数据</span></span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">···</span><br></pre></td></tr></table></figure>

<p>一般对于加入到缓存当中的数据，会加一个过期时间；<br>比如当前有一个促销活动，需要卖出商品；<br>且该商品的促销时间只做三天；<br>那么就可以给该商品数据的缓存数据设置一个三天的过期时间；<br><strong>一般会给缓存当中的数据设置一个过期时间</strong>；  </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br></pre></td></tr></table></figure>

<p>此段代码即普通程序员所写代码；<br>如果该段代码在中小型公司存在问题不大；<br>但是如果该段代码放在大公司当中，该段代码就不能够这样写了；  </p>
<p>因为大公司当中要求特别高（╮(╯▽╰)╭）；  </p>
<p>且该段代码当中存在缓存三大问题中的两大问题没有解决：第一个问题是<strong>缓存穿透</strong>；第二个问题就是<strong>缓存击穿</strong>；</p>
<ol start="3">
<li><strong>缓存有三个问题？</strong>  </li>
</ol>
<p>（1） <strong>缓存穿透</strong></p>
<p>指的是 <strong>查询数据库和缓存当中都没有的数据</strong>（<strong>查询的为空数据</strong>）</p>
<p>（当前测试库当中的数据仅仅只有8条数据；但是现在查询数据id为2000的数据记录）</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">//id</span>为2000的该数据在测试库当中并不存在</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:500</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"查询无果"</span>&#125;</span><br><span class="line"><span class="string">//</span>尽管查询无果；但是该操作，即查询id为2000的该操作依然查询了数据库；</span><br><span class="line"><span class="string">//</span>前面说查询缓存，是为了保护数据库；</span><br><span class="line"><span class="string">//</span>但是现在一个不存在的数据，进行查询的时候每一次都进行查询了数据库；</span><br><span class="line"><span class="string">//</span>由于数据库当中不存在该数据记录行，那么缓存当中也肯定不会存在有该数据记录行</span><br><span class="line"></span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1001</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1001</span>, <span class="string">"name"</span>:<span class="string">"王昭君"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br></pre></td></tr></table></figure>

<p>问题代码分析：<br>1、第一次查询缓存，查询无果之后，查询数据库；<br>2、数据库也查询不到则查询无果；<br>3、在数据记录行在数据库当中记录为空该情况下，该段代码每一次都将会去查询数据库；  </p>
<p>当前市面上有<strong>两种解决缓存穿透问题的方案</strong>：</p>
<p>（1）<strong>缓存空对象</strong>：代码简单，效果不好<br>（2）<strong>布隆过滤器</strong>：代码复杂，效果很好（一般用<strong>布隆过滤器</strong>）</p>
<p><strong>缓存空对象</strong>的实现思路：</p>
<p>当去查询一条在数据库当中不存在的数据记录行的时候；<br>不管该数据记录行在数据库当中查询得到或者查询不到，都将该信息交给缓存；  </p>
<p>service impl（实现）层：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//查询缓存；</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="comment">//查询出来的对象进行判断是否其实例属于空对象</span></span><br><span class="line">    <span class="keyword">if</span>( redisObj instanceOf NullValueResultDO)&#123;</span><br><span class="line">      <span class="comment">//如果属于空对象则直接返回查询无果该响应结果</span></span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//此处添加else判断，当该数据记录行在数据库当中查询不到的时候的处理操作</span></span><br><span class="line">        <span class="comment">//如果数据库当中查询不到，那么此时使用一个空对象加入到缓存当中去；</span></span><br><span class="line">        <span class="comment">//当加入的内容为空对象的时候，那么每次查询开头的时候也就同样需要判断；是否为空对象，如果为空对象则直接返回前端查询无果；就将不再去进行查询数据库这一操作了；</span></span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, <span class="keyword">new</span> <span class="constructor">NullValueResultDO()</span>, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">//加入缓存</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;finally&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>空对象</strong> NullValueResultDO(无属性):</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.testcache.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NullValueResultDO</span>&#123;</span></span><br><span class="line">  <span class="comment">//private String name;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询数据记录行在数据库当中为空的情况分析：<br><strong>1、</strong> 第一次查询缓存，缓存当中没有命中，即缓存当中不存在该数据记录；</p>
<p><strong>2、</strong> 此时查询数据库，查询数据库中发现该数据行为空；则将该一个空对象加入到缓存当中，其id为查询的内容，其值为空对象；则此时进行返回</p>
<p><strong>3、</strong> 第二次进行查询缓存，同样查询的数据在数据库当中数据记录行为空；<br>则此时先进行查询缓存，缓存当中存在该数据记录行，也就是存在id为查询id的记录值；<br>则此时当缓存命中之后进行判断缓存的该实例是否为空对象;<br>如果为空对象则直接返回查询无果否则返回查询数据；</p>
<p><strong>缓存穿透</strong>该第一种解决方案（<strong>缓存空对象</strong>）的<strong>效果为什么不好</strong>？<br>原因：</p>
<ul>
<li>每一次换<strong>不同的查询</strong>，且每一次不同的查询（即id不同）明知该数据在数据库当中查询不到；但是<strong>都还是会去查询一次</strong>；</li>
<li>缓存空对象解决的问题是<strong>一个key</strong>（即一个id）<strong>对其进行多次访问</strong>的这样一个问题（当过期时间失效则又将会去查询一遍数据库）；</li>
<li>如果存在查询数据为大量空数据则将会导致redis当中<strong>存在有大量的空对象</strong>（空数据）（恶意大规模查询明知道数据库当中为记录行为空的数据（空数据）；）弊端就在于<strong>占用redis的内存</strong>；</li>
</ul>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">//id</span>为2000的该数据在测试库当中并不存在</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:500</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"查询无果"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>此时响应的内容是查询的缓存当中的数据；</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>此时响应的内容是查询的缓存当中的数据；</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>此时响应的内容是查询的缓存当中的数据；</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2000  </span><br><span class="line"><span class="string">//</span>此时响应的内容是查询的缓存当中的数据；</span><br><span class="line"></span><br><span class="line"><span class="params">---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2002</span><br><span class="line"><span class="string">//</span>第一次查询缓存当中不存在的内容就将会去查询一遍数据库；</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:500</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"查询无果"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2003</span><br><span class="line"><span class="string">//</span>第一次查询缓存当中不存在的内容就将会去查询一遍数据库；</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:500</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"查询无果"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2004</span><br><span class="line"><span class="string">//</span>第一次查询缓存当中不存在的内容就将会去查询一遍数据库；</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:500</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"查询无果"</span>&#125;</span><br></pre></td></tr></table></figure>

<p>谷歌有一个框架叫做 <strong>Guava</strong>；在这个 <strong>Guava</strong> 框架当中已经写好了<strong>布隆过滤器</strong>；即已经提供了<strong>布隆过滤器</strong>；缺陷在于 <strong>Guava</strong> 框架当中的该<strong>布隆过滤器</strong>不支持分布式；</p>
<p><strong>布隆过滤器应用</strong></p>
<p>maven安装依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>27.0.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>安装依赖之后就可以直接使用；<br>调用其静态方法就可以直接创建出一个布隆过滤器；<br>如果对布隆过滤器没有认识的道友，可以将布隆过滤器理解为一个ArrayList集合，就理解为java当中的一个集合即可；  </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBloomFilter</span>&#123;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="built_in">size</span> = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//size         预计要插入多少条数据</span></span><br><span class="line"><span class="comment">//fpp          容错率--&gt;出现误判的概率是多少</span></span><br><span class="line"><span class="comment">//bloomFilter  位数组</span></span><br><span class="line"><span class="comment">//list         创建的是object数组</span></span><br><span class="line"><span class="comment">//bit          数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//位数组  21亿  JVM内存     数据不会进行持久化  256M</span></span><br><span class="line"><span class="comment">//redis   42亿  redis内存   redis的持久化数据   512M==42亿位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//bit[]</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), <span class="built_in">size</span>, <span class="number">0.001</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//List list = new ArrayList();</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Integer[] integers = new Integer[Integer.MAX_VALUE];</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//当前该循环会生成1~100,0000 当中所有的数值；</span></span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; = <span class="built_in">size</span> ; i++ )&#123;</span><br><span class="line">    <span class="comment">//将这些1~100,0000的数值全部添加到布隆过滤器bloomFilter(集合)当中</span></span><br><span class="line">    bloomFilter.<span class="built_in">put</span>(i);</span><br><span class="line">    <span class="comment">//bloomFilter.put("老王");</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  List&lt;Integer&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10000</span>);</span><br><span class="line">  <span class="comment">//故意取10000个不在过滤器里的值，看看有多少个会被认为在过滤器里</span></span><br><span class="line">  <span class="comment">//size + 10000 = 100,0000+1000;</span></span><br><span class="line">  <span class="comment">//size + 20000 = 100,0000+2000;</span></span><br><span class="line">  <span class="comment">//该数值肯定大于100,0000；肯定与第一次循环当中的数值相同；</span></span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="built_in">size</span> + <span class="number">10000</span> ; i &lt; <span class="built_in">size</span> + <span class="number">20000</span> ; i++ )&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用该数值i在布隆过滤器当中是否存在的方法；如果存在则加入布隆过滤器；否则不加入布隆过滤器；</span></span><br><span class="line">    <span class="comment">//之前将布隆过滤器比喻为java当中的ArrayList集合；</span></span><br><span class="line">    <span class="comment">//则当前期望的是：此时当前该循环当中是不会任何一个数值加入到该布隆过滤器bloomFilter当中去的，也就是该ArrayList集合当中去；</span></span><br><span class="line">    <span class="keyword">if</span>(bloomFiilter.mightContain(i))&#123;<span class="comment">//误判</span></span><br><span class="line">      <span class="built_in">list</span>.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  System.out.<span class="built_in">println</span>(<span class="string">"误判的数量："</span>+<span class="built_in">list</span>.<span class="built_in">size</span>);</span><br><span class="line">  <span class="comment">//响应为：10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>布隆过滤器确确实实是一个集合对象</li>
<li>布隆过滤器当中仅存在两个方法，<ul>
<li>第一个方法是put(Object obj);（将数据取值加入到布隆过滤器当中）；</li>
<li>第二个方法是mightContain(Object obj);（判断数据取值是否在布隆过滤器当中存在）</li>
</ul>
</li>
<li>加入到布隆过滤器当中的数据无法被修改(update)被删除(delete)被取出来(get)；只能够进行添加(put)以及判断是否存在(mightContain);</li>
<li>mightContain 该方法有可能判断失误；</li>
<li>此时理解布隆过滤器可以理解为一个特殊的集合对象；</li>
</ul>
<p>定义布隆过滤器仅需要做（定义）：<br>(1) size 预计要插入多少数据（预计插入量）<br>(2) fpp  容错率（<strong>False positive probability</strong>）—&gt;出现误判的概率是多少（即上述当中误判的次数是可以由自己定义的；容错率是百分之百会有的；不能定义为0；如果定义为0就将会抱错）</p>
<p>误判：传一个key到该布隆过滤器（“ArrayList”）当中进行判断；该数据是否存在（mightContain）在该布隆过滤器当中；而该方法mightContain有可能会判断失误；而导致不存在在布隆过滤器当中的key也被判断出存在在该布隆过滤器当中了；（明明不存在，有可能会被判断为存在）  </p>
<p>判断的该<strong>容错率</strong>取值<strong>越低</strong>；其底层的<strong>内存消耗</strong>则将<strong>越大</strong>；<br>而<strong>容错率</strong>取值<strong>越高</strong>；则<strong>内存开销</strong>则<strong>小</strong>；</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> static <span class="built_in">int</span> size = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> static BloomFilter&lt;Integer&gt; bloomFilter=<span class="module-access"><span class="module"><span class="identifier">BloomFilter</span>.</span></span>create(<span class="module-access"><span class="module"><span class="identifier">Funnels</span>.</span></span>integer<span class="constructor">Funnel()</span>,size, <span class="number">0.001</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//此时第一次打印出现的误判次数为10次；</span></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">  <span class="keyword">private</span> static <span class="built_in">int</span> size = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> static BloomFilter&lt;Integer&gt; bloomFilter=<span class="module-access"><span class="module"><span class="identifier">BloomFilter</span>.</span></span>create(<span class="module-access"><span class="module"><span class="identifier">Funnels</span>.</span></span>integer<span class="constructor">Funnel()</span>,size, <span class="number">0.1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//此时第二次打印出现的误判次数为1033次；</span></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">  <span class="keyword">private</span> static <span class="built_in">int</span> size = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> static BloomFilter&lt;Integer&gt; bloomFilter=<span class="module-access"><span class="module"><span class="identifier">BloomFilter</span>.</span></span>create(<span class="module-access"><span class="module"><span class="identifier">Funnels</span>.</span></span>integer<span class="constructor">Funnel()</span>,size, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//此时第二次打印出现的抛出异常，报错；</span></span><br><span class="line">  <span class="comment">//即布隆过滤器的容错率不能为0</span></span><br><span class="line">  <span class="comment">//java.lang.ExceptionInInitializerError</span></span><br><span class="line">  <span class="comment">//Caused by: java.lang.IllegalArgumentException:False positive probability(0.0) must be &gt; 0.0</span></span><br></pre></td></tr></table></figure>

<p><strong>布隆过滤器原理</strong><br>布隆过滤器的底层实现依赖于bit数组；<br>1个字节byte为8位；<br>1024个字节为1M；<br>所以其单位是很小；<br>512M=524288byte</p>
<p>由于位数组，即byte只有一位；所以其取值就只能够是0和1；<br>默认该数组当中的白色格子取值value全部为0；而蓝色格子取值value为1；</p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXy93sfkaGWRUBapr9y3pHbtQ6yRyawhbsd7*AS4G1K*c*Gb56IM9A4pA41f7IAo4fIom1PvvFF11WuEdaLRX51c!/r" alt="布隆过滤器"></p>
<p>左边即为往布隆过滤器当中进行put方法操作的结果（把数据加入到布隆过滤器）；</p>
<p>那么其位数组就会发生变化；<br>变化的表现有：</p>
<ul>
<li>该布隆过滤器其数组当中所有的key取值value默认都为0</li>
<li>当添加完一条数据（“老王”）之后，就会出现三个格子，变成黄色；也就代表着，该三个格子所处index位置（可以不为3个，只是说该图经过计算得为3个（举个例子不要当真）；<ul>
<li>为什么被计算出来为3个index位置的格子被改成了1；</li>
<li>其实也可以改下，将其改成10个index位置被改颜色为黄色，即将默认取值0改成1），其value值被改变称为1了；默认为0；</li>
</ul>
</li>
<li>如何修改的呢？<ul>
<li>上述为3个index位置被改变颜色为黄色，即将默认取值改变为1；</li>
<li>那么此时可以认为是3个hash函数对该加入到布隆过滤器当中的该取值“老王”进行了hash；</li>
<li>那么3个hash函数对“老王”该取值进行了hash之后，就会得到有一个数字；</li>
<li>打个比方：hash(“老王”)=1212121；hash某一字符串都将得到一个数值；</li>
<li>通过hash获取的到一个数值之后，在对该布隆过滤器该数组的长度进行<strong>取余</strong>；</li>
<li>比如说该布隆过滤器该数组的长度是40；</li>
<li>那么就会将对“老王”进行hash得到的数值 对 该布隆过滤器数组的长度进行 取余；即1212121%40=3；（该3是随意捏造的；不要当真；只是一个例子）</li>
<li>那么此时布隆过滤器就将会将index取值为3的该位置的默认取值0改为1；</li>
<li>步骤：首先对加入到布隆过滤器的数值进行hash，经过hash之后就会得到一个数值；将该数值进行取余该布隆过滤器数组的长度得到的数值就是在该布隆过滤器数组当中的一个下标；则将该下标的默认取值0进行修改为1；</li>
<li>当前为什么会有3个不同的位置被改变颜色为黄色呢（即改变默认取值为1）?原因就在于有3个不同的hash函数，存在有不同的hash函数则将有3个不同位置的数组index被改变默认取值0为1；（通过hash函数对加入到布隆过滤器当中的取值进行hash得到下标位置再进行取余数组长度得到在该数组当中的下标index位置）</li>
<li>使用了3个不同的hash函数对该put(Object obj) obj对象进行了hash</li>
<li>hash算法存在有多个，比如说hash32，hash16…(都是进行hash，只是hash的函数不一样；为什么是三个不同的hash呢？可以是10个100个n个不同的hash；自己设定；自己喜欢就好；喜欢多少个就多少个)</li>
<li>hash函数多并不一定导致容错率低，只能说是一种因素；</li>
</ul>
</li>
</ul>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX1IOvYMzL*IGr4hMfNmq0SLpSUjWiYQqv*cQR*MK3kZarTxU*24HFj0FaxTXP9dLIO.fiVY2eH4cPYFmojOxc8M!/r" alt="布隆过滤器mightContain判断是否存在"></p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX1nwjJZCSD2X9riQotNbwt9nUD*060h1sSAaCk5hI9WOQJEcFG3tGpPrepg4ztfFPKkDeVMefdqHGj9ns7B99jw!/r" alt="布隆过滤器put方法"></p>
<p>位数组（布隆过滤器）当中默认全部为0，当时当插入的数据量过大，即位数组当中将有大部分原本默认取值为0的index将被改变取值为1；</p>
<p>当前插入到布隆过滤器当中的数据有21条数据记录行：<br>1、2、3、4、5、6、7、8、9、10、11、12、13、14、15、16、17、18、19、20、老王</p>
<p><strong>可能存在（误判的原因）</strong><br>（1）当进行查找“老王”时，是可以查找得到的；<br>（2）当进行查找 1 时，是可以查找得到的；  </p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXw6xgVJROJh3BJY6xFr9VJp6l4Zz7Pw*B3XR97Ym8Flrt07pQJDvc4W*10SFkqDBy5AkMwUaqHzOjviy6g9514Q!/r" alt="bloomFilter插入数据量大进行数据判断时"></p>
<p>（3）当进行查找 111 时，也是可以查找得到的；此时就出现了<strong>误判</strong>；<br>该取值111并不是加入到布隆过滤器当中的数值；<br>而是21条数据添加通过3个不同的hash取余数组长度得到各个不同的在数组当中的下标位置index；<br>恰巧就将 111 该取值进行3个不同的hash函数得出的3个不同的数值取余数组长度得到的3个不同位置下标index的默认取值0进行了改值为1；<br>而111该数值的三个在布隆过滤器数组当中index下标位置取值默认为0被修改为1；<br>并非是111进行mightContain时进行修改的；<br>而是当添加21条数据记录时进行修改的；<br>也就是当[<strong>因素1</strong>]添加到布隆过滤器当中的数据量过大时，如果[<strong>因素2</strong>]有多个hash函数（<strong>hash冲突</strong>），那么布隆过滤器当中就可能存在多个下标位置index的取值由0改变为1的这种情况；  </p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX6G6Nkh9oP4j1AI.xWFqKAqs9pJ6hpqT9bcebJgsD1MnDW3AU*HyNTcnfjGcwoSGm1Y5nNUuczxo97CBCFXTZsA!/r" alt="bloomFilter插入数据量大误判情况的产生"></p>
<p>1、为什么布隆过滤器没有取出的方法即get方法；—&gt;因为其布隆过滤器底层没有进行保存其加入到布隆顾虑器当中真实的取值；只有位数组；<br>2、布隆过滤器也没有delete方法；—&gt;由于在布隆过滤器当中该位数组当中其下标位置index要删除的位置其位置，同一个位置也有可能是其他数值所占的下标位；（<strong>hash冲突</strong>）；如果将该下标位置index的取值改为0；那么也将会影响其他的数值的下标取值；也就是说；当其他的数据进行判断是否存在时，原本其他数据的下标位置index取值为1；当前因为有需要要进行删除的数据所以对该布隆过滤器的下标位置index取值进行更改为从1变为0；其他数据的下标位置与当前要删除的数据的下标位置相撞相同了（<strong>hash冲突</strong>）；如果当前要删除的数据将该布隆过滤器数组当中下标位置的取值改为了0；则其他数据下次进行mightContain判断的时候将会被判断为不存在；所以布隆过滤器没有删除delete该方法；<br>3、布隆过滤器为什么会出现误判？—&gt;<strong>误判</strong>的缘故就在于存在<strong>hash冲突</strong>  </p>
<p><strong>出现误判的概率，即容错率与什么因素有关？</strong>  </p>
<ul>
<li><strong>数组长度</strong></li>
<li><strong>hash算法的个数</strong></li>
</ul>
<p><strong>（1）</strong>首先，数组的长度是肯定会影响容错率的；如果数组的长度是100,0000；同样是添加21条数据；那么误判的概率就不会又这么高了（即111不存在的数据也能够判断mightContain为存在）；所以数组的长度是一个影响误判的因素；<br><strong>（2）</strong>第二，hash算法的个数；如果数组的长度是100,0000；且该布隆过滤器当中存在有10个hash算法<br>(不同hash函数越多，则误判的概率越小，即不同hash函数个数越多，即算的在布隆过滤器当中的下标位置越多，而只有当满足算出来的所有的下标位置的取自为1，才将返回可能存在；否则只要满足有一个算出来的index其下标取值不为1，即为0的这种情况则返回绝对不存在；)，</p>
<p>（不同hash个数函数取余数组长度所得出的位置必须是全部为1才能够判断其值<br>[即判断值是否存在在布隆过滤当中]存在于布隆过滤器当中；<br>即存在有3个不同的hash函数，查询数值117；<br>布隆过滤器数组当中仅只有2个位置可证明该117存在于布隆过滤器当中，即这两个下标位置取值value为1，还有一个index value为0；<br>而hash个数有3个，此时能够证明的只有2个，所以判断为绝对不存在；<br>即只有当查询的数值通过n个不同的hash算法在布隆过滤器数组当中需要有n个不同下标地址的index其取值value必须全部为1；<br>才能够判断为可能存在在该布隆过滤器数组当中；否则判断为绝对不存在；）</p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX1loeM8HGC*c1AuLK0zUPiHTgZ1ljiSnfjWcgvZCtpiFflSI8eyoV.J9xxKSa2wiJDTtvnfmwuqphXXn4wPQ7B4!/r" alt="bloomFilter数据量判断mightContain绝对不存在的情况"></p>
<p>即如果数组长度越小；而不同的hash函数个数越多；<br>则容错率就将会增大<br>（即误判的几率增大，也就是说在数组长度小的情况下，而hash函数多，即算出来的在布隆过滤器数组当中的下标位置越多，即这些算出来的下标位置的取值就都将会被改为1，到时候布隆过滤器数组当中的下标位置index就将会有大量取值变动由0变为1；这样就会增大误判的几率，也就是说容错率也就增大了；）</p>
<p>所以说；跟数组的长度以及hash函数的个数必须要配合使用才能够达到布隆过滤器最好的效果；（hash函数的个数必须要与数组长度相匹配；）</p>
<p>numBits 即Google Guava框架中创建出来的位数组的长度；<br>size：100,0000（预计插入数值记录行），fpp：0.001（容错率）===(创建出来)===&gt;numBits：14377587（位数组长度），numHashFunction：10（hash函数的个数）</p>
<p>size：100,0000（预计插入数值记录行），fpp：0.1（容错率）===(创建出来)===&gt;numBits：4792539（位数组长度），numHashFunction：3（hash函数的个数）</p>
<ul>
<li>hash个数越多（容错率越高），运算开销越大；（性能和容错率之间取一个）；  </li>
<li>要性能高则hash个数少点；要准确率越高则hash个数越多则容错率越高；<br>容错率低好还是高好?看具体业务需求；</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Preconditions</span>.</span></span>check<span class="constructor">NotNull(<span class="params">strategy</span>)</span>;</span><br><span class="line"><span class="keyword">if</span>(expectedInsertions<span class="operator"> == </span><span class="number">0L</span>)&#123;</span><br><span class="line">  expectedInsertions = <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//numBits 位数组长度</span></span><br><span class="line"><span class="comment">//expectInsertions 预计插入布隆过滤器数组的数据量</span></span><br><span class="line"><span class="comment">//fpp 容错率（判断出错的概率）</span></span><br><span class="line">long numBits = optimal<span class="constructor">NumOfBits(<span class="params">expectedInsertions</span>, <span class="params">fpp</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hash函数个数</span></span><br><span class="line"><span class="built_in">int</span> numHashFunctions = optimal<span class="constructor">NumOfHashFunctions(<span class="params">expectedInsertions</span>, <span class="params">numBits</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//numBits与numHashFunctions 需要进行配合使用，一起使用更佳哦~</span></span><br><span class="line"><span class="comment">//只需要关注预计插入布隆过滤器数据记录行与容错率即可；位数组长度与hash函数个数不需要进行关心；因为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">BloomFilter(<span class="params">new</span> LockFreeBitArray(<span class="params">numBits</span>)</span>, numHashFunctions, funnel, strategy);</span><br><span class="line">&#125;catch(IllegalArgumentException var10)&#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * long n   预计插入数据量</span></span><br><span class="line"><span class="comment">  * double m 容错率</span></span><br><span class="line"><span class="comment">  * description 算出hash函数个数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">@VisibleForTesting</span><br><span class="line">static <span class="built_in">int</span> optimal<span class="constructor">NumOfHashFunctions(<span class="params">long</span> <span class="params">n</span>,<span class="params">double</span> <span class="params">m</span>)</span>&#123;</span><br><span class="line">  return <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(<span class="number">1</span>, (<span class="built_in">int</span>)<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>round( double(m)<span class="operator"> / </span>(double)n<span class="operator"> * </span><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>log(<span class="number">2.0</span>D) ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * long n   预计插入数据量</span></span><br><span class="line"><span class="comment">  * double p 容错率</span></span><br><span class="line"><span class="comment">  * description 算出位数组长度</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">@VisibleForTesting</span><br><span class="line">static long optimal<span class="constructor">NumOfBits(<span class="params">long</span> <span class="params">n</span>,<span class="params">double</span> <span class="params">p</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p<span class="operator"> == </span><span class="number">0.0</span>D)&#123;</span><br><span class="line">    p = <span class="number">4.9E-324</span>D;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (long)((double)(-n)<span class="operator"> * </span><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>log(p)<span class="operator"> / </span>(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>log(<span class="number">2.0</span>D)<span class="operator"> * </span><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>log(<span class="number">2.0</span>D) ) );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自己手写<strong>分布式的布隆过滤器</strong></p>
<p>手写布隆过滤器之前；怎么来实现；</p>
<ul>
<li>需要有一个位数组<ul>
<li>该位数组如何来的呢?</li>
<li>其实redis当中也存在有布隆过滤器；redis当中的位数组；redis当中的位数组哪里来；即首先redis当中需要存在这样一个数据结构；</li>
</ul>
</li>
</ul>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">FLUSHALL</span><br><span class="line"></span><br><span class="line"><span class="built_in">keys</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> laowang abc #<span class="built_in">key</span>:laowang；<span class="built_in">value</span>:abc</span><br><span class="line"></span><br><span class="line"># <span class="built_in">set</span> api底层如何如何存储<span class="built_in">value</span>的取值（redis底层如何来存储该<span class="built_in">key</span>：laowang的取值<span class="built_in">value</span> abc的？）</span><br><span class="line"># redis底层进行存储<span class="built_in">key</span>的取值<span class="built_in">value</span>是通过位数组来进行存储的；</span><br></pre></td></tr></table></figure>

<p>首先将 abc 该字符串转换为二进制取值；</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">/**</span></span><br><span class="line">  <span class="string">*</span>  <span class="string">a</span> <span class="string">~</span> <span class="string">z</span> <span class="number">97</span> <span class="string">~</span> <span class="number">122</span></span><br><span class="line">  <span class="string">*</span>  <span class="string">第</span> <span class="number">33</span> <span class="string">~</span> <span class="number">126</span> <span class="string">号（共</span> <span class="number">94</span> <span class="string">个）是字符，其中第</span> <span class="number">48</span> <span class="string">~</span> <span class="number">57</span> <span class="string">号为</span> <span class="number">0</span> <span class="string">~</span> <span class="number">9</span> <span class="string">这十个阿拉伯数字</span></span><br><span class="line">  <span class="string">*/</span></span><br><span class="line"><span class="string">public</span> <span class="string">static</span> <span class="string">void</span> <span class="string">main(String[]</span> <span class="string">args)&#123;</span></span><br><span class="line">  <span class="string">toBinary("abc");//</span> <span class="number">24</span><span class="string">---999</span>   <span class="number">0</span>   <span class="number">1000</span>  <span class="number">1</span></span><br><span class="line">  <span class="string">//打印结果为</span> <span class="number">1100001</span> <span class="number">1100010</span> <span class="number">1100011</span></span><br><span class="line">  <span class="string">//1100001和1100010类似，其实在二进制当中a和b只需要将第六位和第七位调换一下顺序即可；</span></span><br><span class="line">  <span class="string">//redis用位数组，二进制的方式来进行保存set</span> <span class="string">key所对应的value取值</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>验证redis使用位数组（二进制）进行保存key的取值value;</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">setbit laowang <span class="number">6</span> <span class="number">1</span> # 设置key为laowang其value值的二进制位；设置其value值的二进制位的第<span class="number">6</span>位取值为<span class="number">1</span>；</span><br><span class="line"></span><br><span class="line">setbit laowang <span class="number">7</span> <span class="number">0</span> # 设置key为laowang其value值的二进制位；设置其value值的二进制位的第<span class="number">7</span>位取值为<span class="number">0</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> laowang # 获取redis当中key为laowang的取值value</span><br><span class="line">#当前响应为 “bbc”</span><br><span class="line"></span><br><span class="line"># 原本key:laowang存储的value取值为：abc</span><br><span class="line"># abc 在redis底层存储结构为位数组，即二进制数值；即为<span class="number">1100001</span> <span class="number">1100010</span> <span class="number">1100011</span></span><br><span class="line"># 当前setbit这两个操作即将 <span class="number">1100001</span> <span class="number">1100010</span> 这两个进行了修改为 <span class="number">11000011</span> <span class="number">1100011</span></span><br><span class="line"># 所以redis再次查询的时候其取值变为了 “bbc”</span><br></pre></td></tr></table></figure>

<p>在redis当中，String类型的value值其在redis底层，就是通过位数组来进行保存存储的；<br>在底层当中，当前“abc” or “bbc” 其在redis底层当中位数长度为 3 * 8 = 24 位；<br>底层的位数组的长度只有这么长；</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">setbit laowang <span class="number">1000</span> <span class="number">0</span> # 设置进行修改key为laowang 其value值在redis底层的位数组（二进制）的第<span class="number">1000</span>个位置，即下标为<span class="number">999</span>的这个位置index修改取值为<span class="number">0</span>；</span><br><span class="line"># 当时当前 key:laowang 该value值在redis底层的其位数组长度是没有<span class="number">1000</span>的；</span><br><span class="line"># 在java当中，执行setbit laowang <span class="number">1000</span> <span class="number">0</span> 就将会造成数组越界</span><br><span class="line"># 那么在redis当中，当进行设置第<span class="number">1000</span>个位置上取值为<span class="number">0</span>时，abc 该value字符串在redis底层的位数组（二进制）是如何保存的就依然是如何保存，即依然保存为<span class="number">1100001</span> <span class="number">1100010</span> <span class="number">1100011</span>；</span><br><span class="line"># redis底层会自动进行扩容的操作；即abc的位数组长度为<span class="number">24</span>；所占据的index为<span class="number">0</span> ~ <span class="number">23</span>，即前面index为 <span class="number">0</span> ~ <span class="number">23</span>时，存储二进制值依然为 <span class="number">1100001</span> <span class="number">1100010</span> <span class="number">1100011</span> ； 那么即从index为<span class="number">24</span>开始到<span class="number">999</span>，这之间则全部用<span class="number">0</span>进行代替；（index为<span class="number">999</span>即为第<span class="number">1000</span>个位置的index）</span><br><span class="line">#setbit laowang <span class="number">1000</span> <span class="number">1</span> #即index为<span class="number">24</span>到<span class="number">998</span>全部为<span class="number">0</span>，而下标为<span class="number">999</span>（即第<span class="number">1000</span>个位置）的取值为<span class="number">1</span>；</span><br><span class="line"># 中间扩容的取值全部使用 <span class="number">0</span> 这一默认取值来进行代替；</span><br><span class="line"></span><br><span class="line">get laowang<span class="comment">;</span></span><br><span class="line"><span class="comment">#此时响应为“bbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\\x00\x00\x00\x00\x00\x00\x00\x00\x00....”</span></span><br><span class="line"><span class="comment">#redis底层进行扩容，扩容其默认取值为0；即扩容时是扩容的位数组，因为其二进制全部是0；而转化出来之后就是该结果</span></span><br></pre></td></tr></table></figure>

<p>现在位数组已经找到了，且还能够进行自动扩容；也就是redis底层对String类型操作set key value这一api，底层所使用的的数据结构（位数组）；</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">setbit laowang666 <span class="number">10000</span> <span class="number">0</span></span><br><span class="line"><span class="meta"># key:laowang666 ; value: 相当于创建了一个length为 10000 的位数组；并且其底层的value值为 0(二进制取自)；即到第10000位置之前二进制数值全部是0；</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 在redis当中称之为 位图；本质还是属于String类型；</span></span><br><span class="line"><span class="meta"># redis版本5.0.5</span></span><br><span class="line">keys *</span><br><span class="line"><span class="meta"># laowang666</span></span><br><span class="line"><span class="meta"># laowang</span></span><br></pre></td></tr></table></figure>

<p>实现</p>
<p>application.yml  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line"><span class="attr">bloom:</span></span><br><span class="line">  <span class="attr">filter:</span></span><br><span class="line">    <span class="attr">expectedInsertions:</span> <span class="number">1000</span></span><br><span class="line">    <span class="attr">fpp:</span> <span class="number">0.</span><span class="string">001F</span></span><br></pre></td></tr></table></figure>

<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.testcache.<span class="built_in">filter</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line">#ConfigurationProperties 自动装配属性</span><br><span class="line">@ConfigurationProperties(<span class="string">"bloom.filter"</span>)</span><br><span class="line">@Component</span><br><span class="line"><span class="keyword">public</span> class RedisBloomFilter&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//预计插入量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> expectedInsertions;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//误判率</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> fpp;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//bit数组长度</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> numBits;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//hash函数数量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">int</span> numHashFunctions;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">long</span> getExpectedInsertions()&#123;<span class="keyword">return</span> expectedInsertions;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> setExpectedInsertions(<span class="keyword">long</span> expectedInsertions)&#123;<span class="keyword">this</span>.expectedInsertions = expectedInsertions;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">double</span> getFpp()&#123;<span class="keyword">return</span> fpp;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> setFpp(<span class="keyword">double</span> fpp)&#123;<span class="keyword">this</span>.fpp = fpp;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//@PostConstruct</span></span><br><span class="line">  <span class="comment">//即Spring容器初始化的时候</span></span><br><span class="line">  <span class="comment">//在该类进行初始化的时候，就将会回调该方法init；对numBits以及numHashFunctions进行初始化值</span></span><br><span class="line">  @PostConstruct</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> init()&#123;</span><br><span class="line">    <span class="keyword">this</span>.numBits = optimalNumOfBits(expectedInsertions, fpp);</span><br><span class="line">    <span class="keyword">this</span>.numHashFunctions = optimalNumOfHashFunctions(expectedInsertions, fpp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算hash函数个数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * long n   预计插入数据量</span></span><br><span class="line"><span class="comment">  * double m 容错率</span></span><br><span class="line"><span class="comment">  * description 算出hash函数个数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">//@VisibleForTesting</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">int</span> optimalNumOfHashFunctions(<span class="keyword">long</span> n,<span class="keyword">double</span> m)&#123;</span><br><span class="line">  <span class="keyword">return</span> Math.<span class="built_in">max</span>(<span class="number">1</span>, (<span class="built_in">int</span>)Math.<span class="built_in">round</span>( <span class="keyword">double</span>(m) / (<span class="keyword">double</span>)n * Math.<span class="built_in">log</span>(<span class="number">2.0</span>D) ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算bit数组长度</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * long n   预计插入数据量</span></span><br><span class="line"><span class="comment">  * double p 容错率</span></span><br><span class="line"><span class="comment">  * description 算出位数组长度</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">//@VisibleForTesting</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">long</span> optimalNumOfBits(<span class="keyword">long</span> n,<span class="keyword">double</span> p)&#123;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="number">0.0</span>D)&#123;</span><br><span class="line">    p = <span class="number">4.9E-324</span>D;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">long</span>)((<span class="keyword">double</span>)(-n) * Math.<span class="built_in">log</span>(p) / (Math.<span class="built_in">log</span>(<span class="number">2.0</span>D) * Math.<span class="built_in">log</span>(<span class="number">2.0</span>D) ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 判断 keys 是否存在于集合，</span></span><br><span class="line"><span class="comment">  * 是 则返回 true</span></span><br><span class="line"><span class="comment">  * 否 则返回 false</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">boolean</span> isExists(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">    <span class="keyword">long</span>[] indexs = getIndexs(<span class="built_in">key</span>);</span><br><span class="line">    List list = redisTemplate.executePipelined(<span class="keyword">new</span> RedisCallback&lt;<span class="keyword">Object</span>&gt;()&#123;</span><br><span class="line"></span><br><span class="line">      @Nullable</span><br><span class="line">      @Override</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">Object</span> doInRedis(RedisConnection redisConnection) <span class="keyword">throws</span> DataAccessException&#123;</span><br><span class="line">        redisConnection.openPipeline();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> index : indexs)&#123;</span><br><span class="line">          redisConnection.getBit(<span class="string">"bf:laowang"</span>.getBytes(),index);</span><br><span class="line">        &#125;</span><br><span class="line">        redisConnection.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> !list.contains(<span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 将 key 存入 redis bitmap 位图</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> put(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;<span class="comment">// 老王laowang</span></span><br><span class="line">  <span class="keyword">long</span>[] indexs = getIndexs(<span class="built_in">key</span>);</span><br><span class="line">  redisTemplate.executePipeline(<span class="keyword">new</span> RedisCallback&lt;<span class="keyword">Object</span>&gt;()&#123;</span><br><span class="line"></span><br><span class="line">    @Nullable</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> doInRedis(RedisConnection redisConnection) <span class="keyword">throws</span> DataAccessException&#123;</span><br><span class="line">      redisConnection.openPipeline();<span class="comment">//打开管道，提高效率</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">long</span> index:indexs)&#123;</span><br><span class="line">        redisConnection.setBit(<span class="string">"bf:laowang"</span>.getBytes(), index, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//setbit laowang 7262 1</span></span><br><span class="line">        <span class="comment">//此时key写死；</span></span><br><span class="line">        <span class="comment">//index将修改的动态的index下标位置；</span></span><br><span class="line">        <span class="comment">//0代表false；1代表true；即与扩容默认为0修改取值为1做法一致；在redis当中0是位数组进行扩容时的默认值；1则为put进来的数据其位置下标index就需要改变该index上的取值0变成1；在java当中true即代表1；false即代表0</span></span><br><span class="line">      &#125;</span><br><span class="line">      redisConnection.close();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据 key 获取 bitmap 下标； 一个hash函数对 20+1  20+2 3个不同的hash函数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span>[] getIndexs(<span class="keyword">String</span> <span class="built_in">key</span>)&#123; <span class="comment">//laowang 老王</span></span><br><span class="line">    <span class="keyword">long</span> hash1 = hash(<span class="built_in">key</span>);</span><br><span class="line">    <span class="keyword">long</span> hash2 = hash1 &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">long</span>[] result = <span class="keyword">new</span> <span class="keyword">long</span>[numHashFunctions]; <span class="comment">// 10</span></span><br><span class="line">    <span class="keyword">for</span>( <span class="built_in">int</span> i = <span class="number">0</span> ; i &lt; numHashFunctions ; i++ )&#123; <span class="comment">//numHashFunctions hash函数的数量</span></span><br><span class="line">    <span class="keyword">long</span> combinedHash = hash1 + i * hash2;</span><br><span class="line">    <span class="comment">//i 动态值，所以2个不同的hash再加上该一个带有动态值i则将会有三个不同的取值</span></span><br><span class="line">    <span class="comment">//引用三个不同的hash算法对同一个字符串key进行运算也可以的；</span></span><br><span class="line">    <span class="keyword">if</span>(combinedHash &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        combinedHash = ^combinedHash;</span><br><span class="line">    &#125;</span><br><span class="line">    result[i] = combinedHash % numBits;<span class="comment">//对数组的长度numBits进行取余</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">expectedInsertions</span> = <span class="number">1000</span></span><br><span class="line"><span class="attr">fpp</span> = <span class="number">0.001</span></span><br><span class="line"><span class="attr">numBits</span> = <span class="number">14377</span></span><br><span class="line"><span class="attr">numHashFunctions</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">key</span> = <span class="string">"1001"</span></span><br><span class="line"><span class="attr">indexs</span> = &#123;long[<span class="number">10</span>]@<span class="number">7667</span>&#125;</span><br><span class="line"><span class="attr">0</span> = <span class="number">7262</span></span><br><span class="line"><span class="attr">1</span> = <span class="number">6438</span></span><br><span class="line"><span class="attr">2</span> = <span class="number">5614</span></span><br><span class="line"><span class="attr">3</span> = <span class="number">4790</span></span><br><span class="line"><span class="attr">4</span> = <span class="number">3966</span></span><br><span class="line"><span class="attr">5</span> = <span class="number">3142</span></span><br><span class="line"><span class="attr">6</span> = <span class="number">2318</span></span><br><span class="line"><span class="attr">7</span> = <span class="number">1494</span></span><br><span class="line"><span class="attr">8</span> = <span class="number">670</span></span><br><span class="line"><span class="attr">9</span> = <span class="number">14223</span></span><br><span class="line"><span class="comment"># 0 ~ 9 ：10个下标</span></span><br></pre></td></tr></table></figure>

<p>RedisDataInit</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.testcache.datainit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisDataInit</span>&#123;</span></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  OrderService orderService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  RedisBloomFilter redisBloomFilter;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostConstruct</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> init()&#123;</span><br><span class="line">    List&lt;Order&gt; orders = orderService.selectOrderAll();</span><br><span class="line">    <span class="keyword">for</span>(Order <span class="string">order:</span>orders)&#123;</span><br><span class="line">      redisBloomFilter.put(String.valueOf(order.getId));<span class="comment">//订单表的id</span></span><br><span class="line">      <span class="comment">//将订单表中的id添加到布隆过滤器当中在容器启动的时候</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进行查询</p>
<p>service impl（实现）层：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//解决缓存穿透</span></span><br><span class="line">  <span class="comment">//如果布隆过滤器当中存在id则说明数据库当中存在该条记录；则可以继续往下走</span></span><br><span class="line">  <span class="comment">//返回false说明布隆过滤器当中并不存在该id也就说明数据库以及缓存当中都不会有该条数据id</span></span><br><span class="line">  <span class="comment">//此处布隆过滤器由于存在误判的情况也就是容错率；但是现在应用的场景是缓存穿透也就是避免去进行查询数据库；而布隆过滤器误判的结果也就是仅仅让数据库多查一次而已；所以设想下如果有100000个恶意查询空对象请求；那么相比于100000个恶意查询空对象请求而言，布隆过滤器则要显得十分优越了；即便是存在有误判也比100000好；也需要看容错率的概率是多少；</span></span><br><span class="line">  <span class="keyword">if</span> (!bloomFilter.is<span class="constructor">Exist(String.<span class="params">valueOf</span>(<span class="params">id</span>)</span>))&#123;</span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"非法访问"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//查询缓存；</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;finally&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">localhost<span class="function">:8080</span>/selectid?id=2002</span><br><span class="line"><span class="string">//</span>由于有布隆过滤器的存在将不会去进行查询redis缓存也不会去查询数据库</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:600</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"非法访问"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2003</span><br><span class="line"><span class="string">//</span>由于有布隆过滤器的存在将不会去进行查询redis缓存也不会去查询数据库</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:600</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"非法访问"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=2004</span><br><span class="line"><span class="string">//</span>由于有布隆过滤器的存在将不会去进行查询redis缓存也不会去查询数据库</span><br><span class="line"><span class="string">//</span>该数据在数据库当中不存在；</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:600</span> , <span class="string">"data"</span>:&#123;&#125;, <span class="string">"msg"</span>:<span class="string">"非法访问"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="params">------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1001</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1001</span>, <span class="string">"name"</span>:<span class="string">"老王1"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1002</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1002</span>, <span class="string">"name"</span>:<span class="string">"老王2"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1003</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1003</span>, <span class="string">"name"</span>:<span class="string">"老王3"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1004</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1004</span>, <span class="string">"name"</span>:<span class="string">"老王4"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br><span class="line">localhost<span class="function">:8080</span>/selectid?id=1005</span><br><span class="line"><span class="string">//</span>响应：&#123;<span class="string">"code"</span><span class="function">:200</span> , <span class="string">"data"</span>:&#123;<span class="string">"id"</span><span class="function">:1005</span>, <span class="string">"name"</span>:<span class="string">"老王5"</span>&#125;, <span class="string">"msg"</span>:<span class="string">"OK"</span>&#125;</span><br></pre></td></tr></table></figure>

<p>复杂：</p>
<ul>
<li>维护麻烦</li>
<li>往数据库当中进行添加数据时，同时也需要往布隆过滤器当中进行添加put；不然的就就会被布隆过滤器当做是非法请求被拦截下来；</li>
<li>如果订单表当中存在10万的数据；删除了8万的数据量；现在仅剩下2万的数据量；但是布隆过滤器没有办法进行删除；这个时候就需要进行考虑重建布隆过滤器即重新初始化该布隆过滤器；即从头到尾的再去跑一边put方法，即又重新将订单表当中的记录进行查询出来将其order id重新put入布隆过滤器当中</li>
<li>这个重建布隆过滤器得使用定时任务来进行；定时任务多少合适需要看删除的数据量大小多不多；</li>
</ul>
<h2 id="缓存击穿详解及实战"><a href="#缓存击穿详解及实战" class="headerlink" title="缓存击穿详解及实战"></a>缓存击穿详解及实战</h2><p>上述代码存在两大问题，一是缓存穿透；二是缓存击穿；<br>缓存击穿问题也就是对于热点数据访问的问题；</p>
<p><strong>缓存击穿</strong>：在查询时，数据库有数据，缓存当中没有（数据刚好失效）；</p>
<p>情况分析：</p>
<p>（1）这条数据没有人访问过；说明该数据并非为热点数据；<br>（2）一般为数据刚好失效（由于将数据加入到缓存当中时，会加入一个过期时间；比如该数据当好面临过期时间失效，即理解为redis自动将该数据进行删除了[“自动删除”需要加双引号；涉及到redis当中的一个删除特点；可以先这么认为redis现在自动将该数据进行了删除]，但是来了<strong>并发访问</strong>，由于该数据又是一个热点数据）；</p>
<p>缓存击穿和缓存穿透是两个不同的问题；</p>
<p>模拟热点数据失效访问情形：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">keys *</span><br><span class="line"><span class="meta">#laowang666</span></span><br><span class="line"><span class="meta">#laowang</span></span><br><span class="line"><span class="meta">#bf:laowang</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.testcache.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@org</span>.junit.Test</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">    TicketsRunBle ticketsRunBle = <span class="keyword">new</span> TicketsRunBle();</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">99</span> ; i++)&#123;</span><br><span class="line">      Thread thread = <span class="keyword">new</span> Thread(ticketsRunBle, <span class="string">"窗口"</span>);</span><br><span class="line">      thread.start();</span><br><span class="line">      countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">    Thread.currentThread.join();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketsRunBle</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      countDownLatch.await();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    try&#123;</span></span><br><span class="line"><span class="comment">//        Socket socket = new Socket("127.0.0.1", 1333);</span></span><br><span class="line"><span class="comment">//    &#125;catch(IOException e)&#123;</span></span><br><span class="line"><span class="comment">//      e.printStackTrace();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    List&lt;HttpMessageConverter&lt;?&gt;&gt; fastJsonHttpMessageConverters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    fastJsonHttpMessageConverters.add(<span class="keyword">new</span> FastJsonHttpMessageConverters);</span><br><span class="line">    restTemplate.setMessageConverters(fastJsonHttpMessageConverters);</span><br><span class="line">    R forObject = restTemplate.getForObject(<span class="string">"http://localhost:8080/selectid?id=1001"</span>,R<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(forObject);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即可以认为该段代码被99个人（线程）同时执行；</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//99个线程同时进行布隆过滤器的判断</span></span><br><span class="line"><span class="keyword">if</span> (!bloomFilter.is<span class="constructor">Exist(String.<span class="params">valueOf</span>(<span class="params">id</span>)</span>))&#123;</span><br><span class="line">     return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"非法访问"</span>)</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//99个线程同时查询缓存；</span></span><br><span class="line"> Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//当热点数据失效时，则此时redisObj则为空</span></span><br><span class="line"> <span class="comment">//命中缓存</span></span><br><span class="line"> <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">   <span class="comment">//正常返回数据</span></span><br><span class="line">   return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//所以此时就会有99个线程同时去查询数据库；</span></span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line">     Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">     <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">       valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;finally&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>即上述代码将会有99次进行查询数据库的记录；</p>
<p>解决方案<br>使用分布式锁，即查询数据库之前进行加锁；<br>OrderServiceImpl</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">valueOperations valueOperations;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">CacheTemplate cacheTemplate;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">RedisBloomFilter RedisBloomFilter;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line"><span class="keyword">private</span> RedisLock redisLock;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">SendMessageUtil sendMessageUtil;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Integer insert<span class="constructor">Order(Order <span class="params">order</span>)</span>&#123;</span><br><span class="line">  Integer integer = orderMapper.insert<span class="constructor">Order(<span class="params">order</span>)</span>;</span><br><span class="line">  return integer;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//解决缓存穿透</span></span><br><span class="line">  <span class="keyword">if</span> (!bloomFilter.is<span class="constructor">Exist(String.<span class="params">valueOf</span>(<span class="params">id</span>)</span>))&#123;</span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"非法访问"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//查询缓存；</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="keyword">if</span>( redisObj instanceOf NullValueResultDO)&#123;</span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//在查询数据库之前进行加锁</span></span><br><span class="line">  redisLock.lock(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询缓存；</span></span><br><span class="line">    redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line">    <span class="comment">//命中缓存</span></span><br><span class="line">    <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">      <span class="keyword">if</span>( redisObj instanceOf NullValueResultDO)&#123;</span><br><span class="line">        return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//正常返回数据</span></span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//查询数据库</span></span><br><span class="line">      Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;finally&#123;</span><br><span class="line">        <span class="comment">//解锁</span></span><br><span class="line">        redisLock.unlock(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大并发访问数据库最容易导致数据库崩掉；</p>
<p>测试并模拟；</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">keys</span> <span class="string">*</span></span><br><span class="line"><span class="attr">del</span> <span class="string">1001</span></span><br></pre></td></tr></table></figure>

<p>上述代码仅会有1次访问数据库的机会；<br>分析：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//提高性能</span></span><br><span class="line"><span class="comment">//保护数据库</span></span><br><span class="line">public R select<span class="constructor">OrderById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//99个线程同时访问布隆过滤器判断该id是否非法访问</span></span><br><span class="line">  <span class="keyword">if</span> (!bloomFilter.is<span class="constructor">Exist(String.<span class="params">valueOf</span>(<span class="params">id</span>)</span>))&#123;</span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"非法访问"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//99个线程同时查询缓存；</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//由于热点数据的失效；所以导致99个线程同时都没有命中缓存</span></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="keyword">if</span>( redisObj instanceOf NullValueResultDO)&#123;</span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//由于在查询数据库之前进行加锁，所以此时99个线程将会依次进行查询数据库操作；（并发）</span></span><br><span class="line">  <span class="comment">//即此时有一个线程拿着锁进入了代码块；还有98个线程在外面等着；</span></span><br><span class="line">  redisLock.lock(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//相当于99个线程中第一个进入代码块的那一个线程会查询两次redis缓存；查询一次数据库；查询完成之后将数据加入到缓存当中去；finally最后进行解锁；紧接着98个线程第二个线程又会拿着锁进来；.....</span></span><br><span class="line">      <span class="comment">//转折点就在这里；当第一个进来的线程将数据查询完成并加入到缓存之后；后面的98个线程再次到redis缓存当中进行取值的时候那么这个时候就能够有值获取出来了；由于第一个线程已经查询过数据库并将取值加入到了缓存当中去了；</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//虽然有锁阻塞，但是却只有一次操作数据库此处；98个线程都去进行操作缓存；所以说这个效率是十分明显的；非常快；</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询缓存；</span></span><br><span class="line">    redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line">    <span class="comment">//命中缓存</span></span><br><span class="line">    <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">      <span class="keyword">if</span>( redisObj instanceOf NullValueResultDO)&#123;</span><br><span class="line">        return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//正常返回数据</span></span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//查询数据库</span></span><br><span class="line">      Order order = orderMapper.select<span class="constructor">OrderById(<span class="params">id</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span>(order != null)&#123;</span><br><span class="line">        valueOperations.set(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>, order, <span class="number">10</span>, TimeUnit.MINUTES);<span class="comment">// 加入缓存</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;finally&#123;</span><br><span class="line">        <span class="comment">//解锁</span></span><br><span class="line">        redisLock.unlock(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果此处没有使用分布式锁而是使用的synchronized则；selectOrderById查询数据为1001、1002、1003、1004、1005查询id不同，查询数据并不相同，但是却还是会被阻塞；这个效率就很低了；<br>而刚刚那种处理方式是：redisLock.lock(String.valueOf(id));是对查询id相同；即该这一类都是查询相同同一个id的并发请求的锁；<br>针对的是对于同一个查询内容的多个线程进行阻塞；<br>而对于不同查询内容的多个线程是进行分别阻塞的；<br>也就是说假设有99*2个线程，该99个线程都是进行查询id为1001的查询请求；则redisLock则对该98个线程进行阻塞，其中一个线程拿着id为1001的锁先进入代码块进行查询；（此时id为1001的数据过期失效）<br>而另外99个线程都是进行查询id为1002的查询请求所以此时这另外的这99个线程（查询id为1002的这99个线程），也会存在有一个线程拿着id为1002的锁先进入代码块，而其余的98个线程在外等候，阻塞；（此时id为1001的数据过期失效）</p>
<p>synchronized与redisLock这两者锁的粒度不一样；  </p>
<p>RedisLock</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ThreadLock用于保存某个线程共享变量</span></span><br><span class="line"><span class="comment">//对于同一个static ThreadLocl，不同线程只能从中get，set，remove自己的变量，而不会影响其他的线程</span></span><br><span class="line"><span class="keyword">private</span> ThreadLocal&lt;<span class="keyword">String</span>&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> lock(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">  <span class="built_in">boolean</span> b = tryLock(<span class="built_in">key</span>);</span><br><span class="line">  <span class="keyword">if</span>(b)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      Thread.sleep(<span class="number">50</span>);</span><br><span class="line">  &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  lock(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> tryLock(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">  <span class="keyword">String</span> uuid = UUID.randomUUID().toString();</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码封装<br>OrderServiceImpl</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> R selectOrderById(<span class="built_in">Integer</span> id)&#123;</span><br><span class="line">  <span class="keyword">return</span> cacheTemplate.redisFindCache(<span class="built_in">String</span>.valueOf(id), <span class="number">10</span>, TimeUnit.MINUTES, <span class="literal">new</span> CacheLoadble&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Order</span> load()&#123;</span><br><span class="line">      <span class="keyword">return</span> orderMapper.selectOrderById(id);<span class="comment">//此处仅需要写自己的业务逻辑即可</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="params">...</span></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">List</span>&lt;<span class="keyword">Order</span>&gt; selectOrderAll()&#123; <span class="keyword">return</span> orderMapper.selectOrderAll();&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">Integer</span> updateOrder(<span class="keyword">Order</span> <span class="keyword">order</span>)&#123;</span><br><span class="line">  redisTemplate.delete(<span class="built_in">String</span>.value(<span class="keyword">order</span>.getId()));</span><br><span class="line">  <span class="built_in">Integer</span> <span class="built_in">integer</span> = orderMapper.updateOrder(<span class="keyword">order</span>);</span><br><span class="line">  <span class="keyword">order</span>.setName(<span class="string">"0"</span>);</span><br><span class="line">  sendMessageUtil.placeOrderMessage(<span class="keyword">order</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">integer</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CacheTemplate</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package com.xxx.testcache.template;</span><br><span class="line"></span><br><span class="line">import ...</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public <span class="keyword">class</span> CacheTemplate&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line"><span class="keyword">private</span> ValueOperations valueOperations;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">RedisBloomFilter redisBloomFilter;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line"><span class="keyword">private</span> Redisson redisson;</span><br><span class="line"></span><br><span class="line"><span class="comment">//private Lock lock = new ReentrantLock();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询缓存  有     直接返回前端</span></span><br><span class="line"><span class="comment">//          没有   查询数据库，加入缓存放回</span></span><br><span class="line"><span class="comment">//为什么要使用缓存：保护数据库；提高性能</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * key 键</span></span><br><span class="line"><span class="comment">  * expire 过期时间</span></span><br><span class="line"><span class="comment">  * unit 过期时间单位</span></span><br><span class="line"><span class="comment">  * cacheLoadble 回调接口方法</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">public R redis<span class="constructor">FindCache(String <span class="params">key</span>, <span class="params">long</span> <span class="params">expire</span>, TimeUnit <span class="params">unit</span>, CacheLoadble&lt;T&gt; <span class="params">cacheLoadble</span>, <span class="params">boolean</span> <span class="params">b</span>)</span>&#123;</span><br><span class="line"> <span class="comment">//--------------------- 缓存穿透-------------------------------------</span></span><br><span class="line">  <span class="comment">//解决缓存穿透</span></span><br><span class="line">  <span class="keyword">if</span>(!bloomFilter.is<span class="constructor">Exist(<span class="params">key</span>)</span>)&#123;</span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(600)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"非法访问"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//查询缓存</span></span><br><span class="line">  Object redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------缓存击穿--------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//命中缓存</span></span><br><span class="line">  <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">    <span class="comment">//正常返回数据</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  redisLock.lock(key);</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//查询缓存；</span></span><br><span class="line">      redisObj = valueOperations.get(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//命中缓存</span></span><br><span class="line">      <span class="keyword">if</span>(redisObj != null)&#123;</span><br><span class="line">          <span class="comment">//正常返回数据</span></span><br><span class="line">          return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">     T load = cacheLoadble.load<span class="literal">()</span>;<span class="comment">//查询数据库</span></span><br><span class="line">    <span class="keyword">if</span>(load != null)&#123;</span><br><span class="line">      valueOperations.set(key, load, expire, <span class="built_in">unit</span>);<span class="comment">//加入缓存</span></span><br><span class="line">      return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(200)</span>.set<span class="constructor">Data(<span class="params">redisObj</span>)</span>.set<span class="constructor">Msg(<span class="string">"OK"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;finally&#123;</span><br><span class="line">      <span class="comment">//解锁</span></span><br><span class="line">      redisLock.unlock(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">key</span>)</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="keyword">new</span> <span class="constructor">R()</span>.set<span class="constructor">Code(500)</span>.set<span class="constructor">Data(<span class="params">new</span> NullValueResultDO()</span>).set<span class="constructor">Msg(<span class="string">"查询无果"</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="缓存雪崩及解决方案"><a href="#缓存雪崩及解决方案" class="headerlink" title="缓存雪崩及解决方案"></a>缓存雪崩及解决方案</h2><p>缓存雪崩问题：</p>
<ol>
<li>redis服务器挂了</li>
<li>大部分数据失效</li>
</ol>
<p>比如有100W的商品数据，设置的过期时间统一是10天；则10天后大部分数据统一失效；而查询请求不断；这个时候也就容易导致数据库崩掉；即引发雪崩问题；</p>
<p>(redis缓存击穿指的是热点数据失效解决的是并发请求)</p>
<p>针对这种情况的处理方式：</p>
<p>[<strong>规避</strong>]<br>（1）redis搭建高可用集群（cluster）<br>（2）错开数据过期时间</p>
<p>如果已经出现了缓存雪崩问题；则处理方式为降级 熔断；</p>
<h2 id="数据一致性及解决方案"><a href="#数据一致性及解决方案" class="headerlink" title="数据一致性及解决方案"></a>数据一致性及解决方案</h2><p><strong>什么时候出现数据不一致的情况</strong></p>
<ul>
<li>更新数据的时候；<ul>
<li>先更新数据库，再更新缓存<ul>
<li>（步骤1）先更新数据库（步骤2）再更新缓存；<ul>
<li>如果此时更新缓存失败；则会导致数据库中是新数据，缓存中是旧数据，数据就出现了不一致</li>
</ul>
</li>
<li>1.线程A更新数据库；2.线程B更新数据库；4.线程A更新缓存；3.线程B更新缓存；<ul>
<li>更新数据库如果因为网络等原因，B却比A更早更新了缓存，这就导致了脏数据（不一致）</li>
<li>解决方案：先删除缓存；再修改数据库。如果数据库修改失败了，那么数据库中是旧数据，缓存中是空的，那么数据不会不一致；因为读的时候缓存没有，则读数据库中旧数据，然后更新到缓存中。</li>
</ul>
</li>
<li>解决方案一[<strong>延时双删</strong>]：1.线程A删除缓存 2.线程B查询缓存，发现为空 3.线程B查询数据库并加入缓存 4.线程A更新数据库 5.线程A删除缓存（第五步一定要执行成功）</li>
<li>解决方案二[<strong>串行化</strong>]</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX4pgLmAu8VahKl7KcdIHB0TUz5G4e7vKThDgFA4qONmduoQbaGmQQkOcSL4ZRToJCp.Uf19bAH3AwkYd90x7O1U!/r" alt="数据一致性问题1"></p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX.XryE.7uV.ikOi43KtZHMMeFc5xE9CdpCZxb813hOndwi1w1ZBWEexHrxFZIBZfelNT79b7aY12qTQp7NauUZ8!/r" alt="数据一致性问题2"></p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX3mOzKCW7tUhJUWL8ztU7xPj*Pe*Joo30G7me5QGmt7Sxi5j5klGAArIsMW*y8bO.byfXwfDCTDh.6x5I.sLatg!/r" alt="数据一致性问题3"></p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX*S1qKXmK2eYWqUYxPcUsgsF6L*V72VsmLXrkJ.UnQ7ePKGiWhTZhWMp1b6T2ekmO6bUvjPP2Xe6sCMSxuyCrPc!/r" alt="数据一致性解决方案一"></p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX*S1qKXmK2eYWqUYxPcUsgsF6L*V72VsmLXrkJ.UnQ7ePKGiWhTZhWMp1b6T2ekmO6bUvjPP2Xe6sCMSxuyCrPc!/r" alt="数据一致性解决方案一"></p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXzQqwZMYfv*FkdsRt6pLKtRDNNQ8Pv2ce3feyq1.6u.ytk1wClBaFMU15A2dvCGK8aMDt0c6XmLkiGohBxyNLTo!/r" alt="数据一致性方案二串行化1"></p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX2CGSzajo.b8bZBcqLFBQeGmscwTpI*sRf3EyyWT3nGZ8bOZlQ82XlsrsHCkd*Z7RoJHLOsDtirE785Nk*g.jaA!/r" alt="数据一致性方案二串行化2"></p>
<p>第五步一定要执行成功，实现：<br>StockListener采用了延时队列；</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">SendMessageUtil sendMessageUtil;</span><br><span class="line"></span><br><span class="line">@<span class="constructor">RabbitListener(<span class="params">queue</span> = <span class="string">"stock_queue"</span>, <span class="params">containerFactory</span>=<span class="string">"simpleRabbitListenerContainerFactory"</span>)</span></span><br><span class="line">public void get<span class="constructor">StockMessage(Message <span class="params">message</span>, Channel <span class="params">channel</span>)</span> throws Exception&#123;</span><br><span class="line">  <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"接收到了消息"</span>+<span class="keyword">new</span> <span class="constructor">String(<span class="params">message</span>.<span class="params">getBody</span>()</span>,<span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">  Order order = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse<span class="constructor">Object(<span class="params">new</span> String(<span class="params">message</span>.<span class="params">getBody</span>()</span>,<span class="string">"UTF-8"</span>), <span class="module-access"><span class="module"><span class="identifier">Order</span>.</span></span><span class="keyword">class</span>);</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">      redisTemplate.delete(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(Order.<span class="params">getId</span>()</span>));</span><br><span class="line">      channel.basic<span class="constructor">Ack(<span class="params">message</span>.<span class="params">getMessageProperties</span>()</span>.getDeliveryTag,<span class="literal">false</span>);</span><br><span class="line">  &#125;catch(Exception e)&#123;</span><br><span class="line">      <span class="built_in">int</span> count = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">order</span>.<span class="params">getName</span>()</span>);</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(order.get<span class="constructor">Name()</span>);</span><br><span class="line">      channel.basic<span class="constructor">Ack(<span class="params">message</span>.<span class="params">getMessageProperties</span>()</span>.get<span class="constructor">DeliveryTag()</span>, <span class="literal">false</span>);</span><br><span class="line">      <span class="comment">//重试5次；如果5次仍然不成功则记录到日志；到时候人为进行处理（人为干预）；</span></span><br><span class="line">      <span class="keyword">if</span>(count!=<span class="number">5</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        order.set<span class="constructor">Name(String.<span class="params">valueOf</span>(<span class="params">count</span>)</span>);</span><br><span class="line">        sendMessageUtil.place<span class="constructor">OrderMessage(<span class="params">order</span>)</span>;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      loggerFactory.error(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">order</span>.<span class="params">getId</span>)</span>);</span><br><span class="line">      e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>redis 版本6.0之后即为多线程；</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>redis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ实战指南</title>
    <url>/2020/05/12/RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%9704/</url>
    <content><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>《RabbitMQ实战指南》 - 朱忠华  </p>
<h2 id="第4章-RabbitMQ进阶"><a href="#第4章-RabbitMQ进阶" class="headerlink" title="第4章 RabbitMQ进阶"></a>第4章 RabbitMQ进阶</h2><p>前一章所讲述的是一些基础的概念及使用方法，比如 <font style="color:red;font-weight:bolder">创建交换器</font>、<font style="color:red;font-weight:bolder">队列</font>和<font style="color:red;font-weight:bolder">绑定关系</font> 等。  </p>
<p>但是其中有许多细节并未陈述，对使用过程中的一些“坑”也并未提及，一些高级用法也并未展现，所以本章的内容就是要弥补这些缺憾。  </p>
<p>本章以 <font style="color:red;font-weight:bolder">RabbitMQ</font> 基础使用知识为前提，阐述一些根据特色的细节及功能，为读者更进一步地掌握 <font style="color:red;font-weight:bolder">RabbitMQ</font> 提供基准。</p>
<h2 id="消息何去何从"><a href="#消息何去何从" class="headerlink" title="消息何去何从"></a>消息何去何从</h2><p>mandatory 和immediate 是channel.basicPublish 方法中的两个参数，他们都有 当消息传递过程中不可达目的地时将消息返回给生产者的功能。  </p>
<p>RabbitMQ 提供的 备份交换器（Alternate Exchange） 可以 将未能被交换器路由的消息（没有绑定队列或者没有匹配的绑定）存储起来， 而不用返回给客户端。  </p>
<p>对于初学者来说，特别容易将 mandatory 和immediate 这两个参数混淆，而对于备份交换器更是一筹莫展，本章对此一一展开探讨。  </p>
<blockquote>
<p>mandatory</p>
</blockquote>
<p>[<br>  adj. 强制的；托管的；命令的<br>  n. 受托者（等于 mandatary）<br>  复数 mandatories<br>  网络释义 强制的；强制性；命令的；义务的；<br>  mandatory 强制的；强制性；命令的；义务的；<br>  mandatory plan 指令性计划；强制性计划；指令性打算；指令性规划；<br>  mandatory offer 强制要约；强制性要约；强制性收购建议；强制性收购；<br>]</p>
<blockquote>
<p>immediate</p>
</blockquote>
<p>[<br>  adj. 立即的；直接的；最接近的；<br>  网络释义 立刻；立即的；即时；直接的<br>  immediate 立刻；立即的；即时；直接的<br>  immediate employer 直接雇主<br>  immediate mode 直接模式；立即模式；即时模式<br>]</p>
<h3 id="mandatory-参数"><a href="#mandatory-参数" class="headerlink" title="mandatory 参数"></a>mandatory 参数</h3><p>当 mandatory 参数 设为 true 时，交换器无法根据自身的类型和路由键找到一个符合条件的队列，那么 RabbitMQ 会调用 Basic.Return 命令将消息返回给生产者。  </p>
<p>当 mandatory 参数 设置为 false 时，出现上述情形（交换器无法根据自身的类型和路由键找到一个符合条件的队列），则消息直接被丢弃。  </p>
<p>那么生产者如何获取到 没有被正确路由到合适队列的消息 呢？<br>这时候可以通过调用 channel.addReturnListener 来添加 ReturnListener 监听器实现。  </p>
<p>使用 mandatory 参数的关键代码清单如下所示：  </p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">channel.basicPublish(</span><br><span class="line">  EXCHANGE_NAME,</span><br><span class="line">  <span class="string">""</span>,</span><br><span class="line">  <span class="keyword">true</span>,</span><br><span class="line">  MessageProperties.PERSISTENT_TEXT_PLAIN,</span><br><span class="line">  <span class="string">"mandatory test"</span>.getBytes()</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  channel.addReturnListener(</span><br><span class="line">    <span class="keyword">new</span> ReturnListener()&#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> handleReturn(</span><br><span class="line">        <span class="built_in">int</span> replyCode,</span><br><span class="line">        <span class="keyword">String</span> replyText,</span><br><span class="line">        <span class="keyword">String</span> exchange,</span><br><span class="line">        <span class="keyword">String</span> routingKey,</span><br><span class="line">        AMQP.BasicProperties basicProperties,</span><br><span class="line">        <span class="built_in">byte</span>[] body</span><br><span class="line">      ) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="keyword">String</span> message = <span class="keyword">new</span> <span class="keyword">String</span>(body);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Basic.Return 返回的结果是："</span>+message);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p>上面代码中 生产者 没有成功地将消息路由到队列，此时 RabbitMQ 会通过 Basic.Return 返回 “mandatory test” 这条消息，之后生产者客户端通过 ReturnListener 监听到了这个时间，上面代码的最后输出应该是 “Basic.Return 返回的结果是：mandatory test”。  </p>
<p>从 AMQP 协议层面来说，其对应的流转过程如图：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string">----------</span>|<span class="string">                              </span>|<span class="string">----------</span>|</span><br><span class="line">|<span class="string"> Producer </span>|<span class="string">                              </span>|<span class="string">  Broker  </span>|</span><br><span class="line">|<span class="string">----------</span>|<span class="string">                              </span>|<span class="string">----------</span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">     |<span class="string">  此处省略 Connection 和 Channel的开启     </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">     |<span class="string">  Basic.Publish--------------------------&gt;</span>|</span><br><span class="line">     |<span class="string">                                          </span>|<span class="string">&lt;-----没有路由到队列</span></span><br><span class="line"><span class="string">     </span>|<span class="string">&lt;-----------------------------Basic.Return</span>|</span><br><span class="line">     |<span class="string">                  (Basic.Return会携带消息) </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">     |<span class="string">    此处省略Connection和Channel的关闭      </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br><span class="line">     |<span class="string">                                          </span>|</span><br></pre></td></tr></table></figure>

<h3 id="immediate-参数"><a href="#immediate-参数" class="headerlink" title="immediate 参数"></a>immediate 参数</h3><p>当 immediate 参数设为 true时，如果交换器在消息</p>
]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>笔记</tag>
        <tag>RabbitMQ实战指南</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis设计与实现</title>
    <url>/2020/05/11/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B001/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>查阅了很多的如何学习Redis；发现很多人推荐了这本书《Redis设计与实现》（黄健宏著）  </p>
<p>于是，我想看了；<br>一口气吃不成一个胖子；我觉得多看书还挺好的；<br>对技术充满敬畏。突然有一种肃然起敬的感觉。不知道为什么。<br>我不想再这么浅显的过着，平庸乏味，单薄，好像仔细一想就能看透我这一生的轨迹。<br>我不想这么活着。我得有自己的信念，得有自己所坚持所热爱所为之奋斗一生的东西。<br>我不想，到一定年龄结婚生子，到一定年龄，成为了自己不想成为的人；  </p>
<p>redis github: <a href="https://github.com/antirez/redis" target="_blank" rel="noopener">https://github.com/antirez/redis</a>  </p>
<h2 id="The-Design-and-Implementation-of-Redis（Redis设计与实现）"><a href="#The-Design-and-Implementation-of-Redis（Redis设计与实现）" class="headerlink" title="The Design and Implementation of Redis（Redis设计与实现）"></a>The Design and Implementation of Redis（Redis设计与实现）</h2><p><strong>Redis设计与实现</strong><br>黄健宏 著  </p>
<p>The Design and Implementation of Redis.  </p>
<ul>
<li>由资深 Redis 技术专家撰写，深入了解 Redis 技术聂牧的必读之作。</li>
<li>从源码角度解析 Redis 的架构设计、实现原理和工作机制，为高效使用 Redis 提供原理性指导。  </li>
</ul>
<blockquote>
<p>design</p>
</blockquote>
<p>[<br>  n. 设计；构思；设计图样；装饰图案；打算<br>  v. 设计；构思；计划；制造；意欲<br>  n.(Design) (巴、印、俄)迪赛（人名）<br>  复数 designs；<br>  过去式 designed；<br>  过去分词 designed；<br>  现在分词 designing；<br>  第三人称单数 designs；<br>  网络释义 设计、外观设计、图案、工艺特色<br>  design 设计；外观设计；图案；工艺特色<br>  Fashion Design 时装设计；时尚设计；服装设计；服装设计专业<br>  urban design 城市设计；城区设计；都市设计；城市化规划<br>]</p>
<blockquote>
<p>implementation</p>
</blockquote>
<p>[<br>  n.[ 计] 实现；履行；安装启用<br>  网络释义 实现；实施；实现；执行<br>  implementation 实现；实施；实现；执行<br>  base implementation 基实现<br>  policy implementation 政策实施；政策执行；政策的实施；政策执行<br>]</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本书全面而完整的讲解了 Redis 的 内部机制 与 实现方式。  </p>
<p>对 Redis 的大多数单机功能以及所有多机功能的实现原理进行了介绍。  </p>
<p>展示了这些功能的 核心数据结构 以及 关键的算法思想 ， 图示丰富，描述清晰，并给出大量参考信息。  </p>
<p>通过阅读本书，读者可以快速、有效地了解 Redis 的 内部构造 以及 运作机制，更好、更高效地使用 Redis。  </p>
<p>本书主要分为四大部分。  </p>
<ol>
<li><strong>第一部分</strong>：“数据结构与对象”</li>
</ol>
<p>介绍了 Redis 中的各种 对象及其数据结构，并说明这些 数据结构 如何影响 对象的功能和性能。</p>
<ol start="2">
<li><strong>第二部分</strong>：“单机数据库的实现”</li>
</ol>
<p>对 Redis 实现单机数据库的方法 进行了介绍，包括 数据库、RDB持久化、AOF持久化、事件等；</p>
<ol start="3">
<li><strong>第三部分</strong>：”多机数据库的实现“</li>
</ol>
<p>对 Redis 的 Sentinel、复制、集群 三个多机功能进行了介绍。</p>
<ol start="4">
<li><strong>第四部分</strong>：”独立功能的实现“</li>
</ol>
<p>对 Redis 中各个相对独立的功能模块进行了介绍，涉及 发布与订阅、事务、Lua脚本、排序、二进制位数组、慢查询日志、监视器等。  </p>
<p>本书作者专门维护了 <a href="http://www.redisbook.com" target="_blank" rel="noopener">www.redisbook.com</a> 网站，提供带有详细注释的 Redis源码，以及本书相关的更新内容。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Redis</tag>
        <tag>Redis设计与实现</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔试面试-Spring核心</title>
    <url>/2020/05/11/Java%E7%AC%94%E8%AF%95%E9%9D%A2%E8%AF%95-Spring%E6%A0%B8%E5%BF%83/</url>
    <content><![CDATA[<p>笔记：<a href="https://blog.csdn.net/huanglei305/article/details/101195116?utm_source=app" target="_blank" rel="noopener">https://blog.csdn.net/huanglei305/article/details/101195116?utm_source=app</a></p>
<p><font style="color:red;font-weight:bolder;">Spring framework</font> 简称 <font style="color:red;font-weight:bolder;">Spring</font> , 是Java开发中最常用的框架，地位仅次于<font style="color:red;font-weight:bolder;">Java API</font> ;  </p>
<p>就连近几年比较流行的微服务框架 <font style="color:red;font-weight:bolder;">SpringBoot</font> ， 也是基于  <font style="color:red;font-weight:bolder;">Spring</font> 实现的， <font style="color:red;font-weight:bolder;">SpringBoot</font> 的诞生是为了让开发者更方便的使用 <font style="color:red;font-weight:bolder;">Spring</font> ， 因此 <font style="color:red;font-weight:bolder;">Spring</font> 在java体系中的地位可谓首屈一指。</p>
<h2 id="Spring-介绍"><a href="#Spring-介绍" class="headerlink" title="Spring 介绍"></a>Spring 介绍</h2><p><font style="color:red;font-weight:bolder;">Spring</font> 是一个 <font style="color:red;font-weight:bolder;">开源框架</font> ， 为了  <font style="color:red;font-weight:bolder;">解决企业应用程序开发复杂性</font>  而创建的， <font style="color:red;font-weight:bolder;">Spring</font> 的概念诞生于 2002年，于2003年正式发布第一个版本 Spring Framework 0.9。</p>
<p><strong>Spring 1.x</strong><br>此版本主要是为了  <font style="color:red;font-weight:bolder;">解决企业应用程序开发复杂性</font>  而创建的，当时 <font style="color:red;font-weight:bolder;">J2EE</font> 应用的经典架构是  <font style="color:red;font-weight:bolder;">分层架构</font>： <font style="color:red;font-weight:bolder;">表现层、业务层、持久层</font>，最流行的组合就是 <font style="color:red;font-weight:bolder;">SSH（Struts、Spring、Hibernate）</font>。</p>
<p><font style="color:red;font-weight:bolder;">Spring1.x</font> 仅支持 <font style="color:red;font-weight:bolder;">基于XML的配置</font> ， 确保用户 <font style="color:red;font-weight:bolder;">代码不依赖Spring</font>，它主要包含了以下功能模块： <font style="color:red;font-weight:bolder;">aop、 beans、ejb、jdbc、jndi、orm、transation、validation、web</font>等。</p>
<p><strong>Spring 2.x</strong><br><font style="color:red;font-weight:bolder;">Spring 2.x</font> 的改动并不是很大， 主要是在 <font style="color:red;font-weight:bolder;">Spring 1.x</font>的基础上增加了几个新模块，如 <font style="color:red;font-weight:bolder;">ehcache、jms、jmx、scripting、stereotype</font> 等。</p>
<p><strong>Spring 3.x</strong><br><font style="color:red;font-weight:bolder;">Spring 3.x</font> 开始不止支持 <font style="color:red;font-weight:bolder;">XML的配置</font> ， 还扩展了 <font style="color:red;font-weight:bolder;">基于Java类的配置</font>， 还增加了 <font style="color:red;font-weight:bolder;">Expression、Instructment、Tomcat、oxm</font>等组件， 同时将原来的 <font style="color:red;font-weight:bolder;">Web</font> 细分为：<font style="color:red;font-weight:bolder;">Portlet、Servlet</font>。</p>
<p><strong>Spring 4.x</strong><br><font style="color:red;font-weight:bolder;">Spring 4.x</font> 扩充了 <font style="color:red;font-weight:bolder;">Groovy、Messaging、WebMvc、Tiles2、WebSocket</font>等功能组件，同时 <font style="color:red;font-weight:bolder;">Spring</font> 还适配了 <font style="color:red;font-weight:bolder;">Java版本</font>，全面支持 <font style="color:red;font-weight:bolder;">Java 8.0、Lambda表达式</font>等。 随着 <font style="color:red;font-weight:bolder;">RESTful 架构风格</font>被越来越多的用户所采用， <font style="color:red;font-weight:bolder;">Spring 4.x</font> 也提供了<font style="color:red;font-weight:bolder;">ResultController 等注解</font> 新特性。  </p>
<p><strong>Spring 5.x</strong><br><font style="color:red;font-weight:bolder;">Spring 5.x</font> 紧跟 Java 相关技术的更新迭代，不断适配 <font style="color:red;font-weight:bolder;">Java 的新版本</font>，同时不断重构优化自身核心框架代码，支持 <font style="color:red;font-weight:bolder;">函数式、响应式编程模型</font> 等。  </p>
<h2 id="Spring-核心"><a href="#Spring-核心" class="headerlink" title="Spring 核心"></a>Spring 核心</h2><p><font style="color:red;font-weight:bolder;">Spring 核心</font>  包括以下三个方面：</p>
<ul>
<li><font style="color:red;font-weight:bolder;">控制反转（IOC，Inversion of Control）</font></li>
<li><font style="color:red;font-weight:bolder;">依赖注入（DI，Dependency Injection）</font></li>
<li><font style="color:red;font-weight:bolder;">面向切面编程（AOP，Aspect Oriented Programming）</font></li>
</ul>
<p><strong>控制反转（IOC）</strong><br><font style="color:red;font-weight:bolder;">控制反转（Inversion of Control, IOC）</font> ,顾名思义所谓的 <font style="color:red;font-weight:bolder;">控制反转</font> 就是 <font style="color:red;font-weight:bolder;">把创建对象的权利交给框架去控制， 而不需要人为的去创建</font>， 这样就实现了 <font style="color:red;font-weight:bolder;">可插拔式的接口编程</font> ， 有效的 <font style="color:red;font-weight:bolder;">降低代码的耦合度，降低了扩展和维护的成本</font>。<br>比如，去某地旅游不再用自己亲自为订购A酒店还是B酒店而发愁了，只需要把住店的这个需求告诉给某个 托管平台， 这个托管平台就会帮您订购一个既便宜又舒适的酒店，而这个帮你订购酒店的行为就可以称之为 <font style="color:red;font-weight:bolder;">控制反转</font>。</p>
<p><strong>依赖注入（DI）</strong><br><font style="color:red;font-weight:bolder;">依赖注入 （Dependency Injection，DI）</font>，是 <font style="color:red;font-weight:bolder;">组件之间依赖关系</font> 由 <font style="color:red;font-weight:bolder;">容器在运行期</font> 决定，即由 <font style="color:red;font-weight:bolder;">容器动态的将某个依赖关系注入到组件之中</font>。<br><font style="color:red;font-weight:bolder;">依赖注入</font> 的目的 并非为 软件系统带来更多功能，而是为了 <font style="color:red;font-weight:bolder;">提高组件重用的频率，并为系统搭建一个灵活、可扩展的平台</font>。<br>通过 <font style="color:red;font-weight:bolder;">依赖注入机制</font>，只需要通过简单的配置，而无需任何代码就可以指定目标需要的资源， 完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p>
<p><strong>IOC和DI的关系</strong><br><font style="color:red;font-weight:bolder;">IOC</font> 是 <font style="color:red;font-weight:bolder;">Spring</font> 中一个极为重要的<font style="color:red;font-weight:bolder;">概念</font>， 而 <font style="color:red;font-weight:bolder;">DI </font>则是 <font style="color:red;font-weight:bolder;">实现IOC</font> 的 <font style="color:red;font-weight:bolder;">方法和手段</font>。  </p>
<p><strong>依赖注入的常见实现方式</strong></p>
<ul>
<li><font style="color:red;font-weight:bolder;">setter</font> 注入</li>
<li><font style="color:red;font-weight:bolder;">构造方法</font> 注入</li>
<li><font style="color:red;font-weight:bolder;">注解</font> 注入</li>
</ul>
<ol>
<li><strong>setter 注入</strong></li>
</ol>
<p>Java代码：  </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">UserController</span>&#123;</span><br><span class="line">  <span class="comment">//注入 UserService 对象</span></span><br><span class="line">  <span class="keyword">private</span> UserService userService;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">void</span> setUserService(UserService userService)&#123;</span><br><span class="line">    <span class="keyword">this</span>.userService = userService;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>XML 配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userController"</span> <span class="attr">class</span>=<span class="string">"com.learning.controller.UserController"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 依赖注入 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.learning.dao.impl.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Bean标签的常用属性说明：</strong></p>
<ul>
<li><strong>id</strong>: 为实例化对象 起名称， 根据id值 可以得到配置的实例化对象，id属性的名称原则上可以任意命名，但是不能包含任何特殊符号；</li>
<li><strong>class</strong>: 创建对象所在类的全路径。</li>
<li><strong>name</strong>: 功能和id属性一样，但是现在一般不用；与id的区别在于：name属性值里可以包含特殊符号，但是id不可以；</li>
<li><strong>scope</strong>： 一般最常用的有两个值：<br><font style="color:red;font-weight:bolder;">Singleton（单例模式）</font>，整个应用程序，只创建bean这一个示例；<br><font style="color:red;font-weight:bolder;">Prototype（原型模式）</font>，每次注入都会创建一个新的bean实例，<font style="color:red;font-weight:bolder;">Spring默认的是单例模式</font>。</li>
</ul>
<ol start="2">
<li><strong>构造方法注入</strong></li>
</ol>
<p>Java代码：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">UserController</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> UserService userService;</span><br><span class="line">  <span class="keyword">public</span> UserController(UserService userService)&#123;</span><br><span class="line">    <span class="keyword">this</span>.userService = userService;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>XML配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userController"</span> <span class="attr">class</span>=<span class="string">"com.learning.controller.UserController"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 依赖注入 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"userService"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.learning.dao.impl.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>注解注入：</strong></li>
</ol>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Controller</span></span><br><span class="line">public class UserController&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//使用注解自动注入</span></span><br><span class="line">  <span class="variable">@Autowired</span></span><br><span class="line">  private UserService userService;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建依赖对象</span></span><br><span class="line"><span class="variable">@Service</span></span><br><span class="line">public class UserService&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font style="color:red;font-weight:bolder;">创建依赖对象</font>的常见注解：<br><font style="color:red;font-weight:bolder;">@Component</font>、<br><font style="color:red;font-weight:bolder;">@Controller</font>、<br><font style="color:red;font-weight:bolder;">@Service</font>、<br><font style="color:red;font-weight:bolder;">@Repository</font></p>
<p>总结： 可以看出 <font style="color:red;font-weight:bolder;">注解的方式</font> 要比 <font style="color:red;font-weight:bolder;">传统的XML（setter和构造器注入）</font> 是实现注入更为方便，同时注解方式 也是官方力推的依赖注入最佳使用方式。</p>
<p><strong>面向切面编程（AOP，Aspect Oriented Programming）</strong><br><font style="color:red;font-weight:bolder;">面向切面编程（Aspect Oriented Programming，AOP）</font>；<br>它就好比 将系统按照功能分类，每一个类别就是一个“切面”，再针对不同的切面制定相应的规则，类似开发模式被称为<font style="color:red;font-weight:bolder;">面向切面编程</font>。</p>
<p><strong>AOP使用场景</strong></p>
<ul>
<li><font style="color:red;font-weight:bolder;">日志系统</font></li>
<li><font style="color:red;font-weight:bolder;">安全统一校验</font></li>
</ul>
<p><strong>AOP优点</strong></p>
<ul>
<li><font style="color:red;font-weight:bolder;">集中处理某一类问题，方便维护</font></li>
<li><font style="color:red;font-weight:bolder;">逻辑更加清晰</font></li>
<li><font style="color:red;font-weight:bolder;">降低模块间的耦合度</font></li>
</ul>
<p><strong>AOP相关概念</strong></p>
<ul>
<li><strong>Join point</strong>: <font style="color:red;font-weight:bolder;">连接点</font>，程序执行期间的某一个点，例如执行方法或处理异常时候的点，在Spring AOP中，连接点总是表示方法的执行。</li>
<li><strong>Advice</strong>: <font style="color:red;font-weight:bolder;">通知</font>，通知分为方法执行前通知、方法执行后通知、环绕通知等。许多AOP框架（包括Spring）都将通知建模为拦截器，在连接点周围维护一系列拦截器（形成拦截器链），对连接点的方法进行增强。</li>
<li><strong>PointCut</strong>：<font style="color:red;font-weight:bolder;">切点</font>，匹配连接点（Join point）的表达式，是AOP的核心，并且Spring默认使用AspectJ作为切入点表达式语言；</li>
<li><strong>Aspect</strong>：<font style="color:red;font-weight:bolder;">切面</font>，是一个跨越多个类的模块化的关注点，它是通知（Advice）和切点（Pointcut）合起来的抽象，它定义了一个切点（Pointcut）用来匹配连接点（Join point）,也就是需要对需要拦截的那些方法进行定义；</li>
<li><strong>Target object</strong>：<font style="color:red;font-weight:bolder;">目标对象</font>，对一个或者多个切面（Aspect）通知的对象，也就是需要被AOP进行拦截对方法进行增强（使用通知）的对象，也称为被通知的对象。由于在AOP里面使用运行时代理，因而目标对象一直是被代理的对象。</li>
<li><strong>AOP Proxy</strong>：<font style="color:red;font-weight:bolder;">AOP代理</font>，为了是实现切面（Aspect）功能使用AOP框架创建一个对象，在Spring框架里面一个AOP代理指的是JDK自身的动态代理或者是CGLIB实现的动态代理；</li>
<li><strong>Weaving</strong>：<font style="color:red;font-weight:bolder;">把切面加入到对象，并创建出代理对象的过程</font>；</li>
<li><strong>Advisor</strong>：一个Advisor相当于一个<font style="color:red;font-weight:bolder;">小型的切面</font>，不同的是它只有一个通知（Advice），Advisor在事务管理里面会经常遇到。</li>
</ul>
<p><strong>AOP代码实现</strong><br>AOP的示例就以开车为例；<br>开车的完成流程是这样的：<br>巡视车体以及周围情况—》发动—》开车—》熄火—》锁车。<br>当然，主要的目的是“开车”，但是在开车之前和开完车之后，要做一些其他的工作，这些“其他”的工作，可以理解为AOP编程。  </p>
<p>1）<strong>创建类和方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learning.aop;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">driver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"开车"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）<strong>创建AOP拦截</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">package com.learning.aop;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.<span class="keyword">annotation</span>.<span class="title">After</span>;</span><br><span class="line">import org.aspectj.lang.<span class="keyword">annotation</span>.<span class="title">Aspect</span>;</span><br><span class="line">import org.aspectj.lang.<span class="keyword">annotation</span>.<span class="title">Before</span>;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CarAop</span>&#123;</span></span><br><span class="line">  @Before(<span class="string">"execution(* com.learning.aop.Person.driver())"</span>)</span><br><span class="line">  public void before()&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"巡视车体以及周围情况"</span>);</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"发动"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  @After(<span class="string">"execution(* com.learning.aop.Person.driver())"</span>)</span><br><span class="line">  public void before()&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"熄火"</span>);</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"锁车"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3）<strong>XML配置注入扫描包路径</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.learning"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4）<strong>创建测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learning.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    Person landlord=context.getBean(<span class="string">"person"</span>,Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    landlord.driver();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行测试代码，执行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">巡视车体以及周围情况</span><br><span class="line"></span><br><span class="line">发动</span><br><span class="line"></span><br><span class="line">开车</span><br><span class="line"></span><br><span class="line">熄火</span><br><span class="line"></span><br><span class="line">锁车</span><br></pre></td></tr></table></figure>

<p><strong>AspectJ 注解</strong> 说明：  </p>
<ul>
<li><strong>@Before</strong> <font style="color:red;font-weight:bolder;">前置通知</font>，在连接点方法前调用；</li>
<li><strong>@Around</strong> <font style="color:red;font-weight:bolder;">环绕通知</font>，它将覆盖原有方法，但是允许通过反射调用原有方法</li>
<li><strong>@After</strong> <font style="color:red;font-weight:bolder;">后置通知</font>，在连接点方法后调用；</li>
<li><strong>@AfterReturning</strong> <font style="color:red;font-weight:bolder;">返回通知</font>，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生任何异常。</li>
<li><strong>@AfterThrowing</strong> <font style="color:red;font-weight:bolder;">异常通知</font>，当连接点方法异常时调用；</li>
</ul>
<h2 id="笔试面试题"><a href="#笔试面试题" class="headerlink" title="笔试面试题"></a>笔试面试题</h2><ol>
<li><strong>@Value 注解的作用是什么？</strong></li>
</ol>
<p>答： 基于 <font style="color:red;font-weight:bolder;">@Value</font> 的注解可以 <font style="color:red;font-weight:bolder;">读取 properties 配置文件</font>，使用如下：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">@Value(<span class="string">"<span class="subst">#&#123;configProperties[<span class="string">'jdbc.username'</span>]&#125;</span>"</span>)</span><br><span class="line">private String userName;</span><br></pre></td></tr></table></figure>
<p>以上为读取configProperties下的jdbc.username 配置</p>
<ol start="2">
<li><strong>Spring通知类型有哪些？</strong></li>
</ol>
<p>答：<br><font style="color:red;font-weight:bolder;">Spring 通知类型</font> 总共有5种：<br><font style="color:red;font-weight:bolder;">前置通知</font>、<br><font style="color:red;font-weight:bolder;">环绕通知</font>、<br><font style="color:red;font-weight:bolder;">后置通知</font>、<br><font style="color:red;font-weight:bolder;">异常通知</font>、<br><font style="color:red;font-weight:bolder;">最终通知</font>。</p>
<ul>
<li><strong>前置通知（Before Advice）</strong>：在目标方法执行之前执行的通知。在某连接点（join point）之前执行的通知，但这个通知不能阻止连接点前的执行（除非它抛出一个异常）。</li>
<li><strong>环绕通知（Around Advice）</strong>：在目标方法执行之前和之后都可以执行额外代码的通知，也可以选择是否继续执行连接点或者直接返回他们自己的返回值或抛出异常来结束执行。</li>
<li><strong>后置通知（After（finally）Advice）</strong>：目标方法执行之后（某连接点退出的时候）执行的通知（不论是正常返回还是异常退出）</li>
<li><strong>异常后通知（After throwing Advice）</strong>：在方法抛出异常退出时执行通知</li>
<li><strong>最终通知（After returning Advice）</strong>：在某连接点（join point）正常完成后执行的通知，例如，一个方法没有抛出任何异常，正常返回。</li>
</ul>
<ol start="3">
<li><strong>怎么理解Spring中的IOC容器？</strong></li>
</ol>
<p>答： <font style="color:red;font-weight:bolder;">Spring IOC</font> 就是 <font style="color:red;font-weight:bolder;">把创建对象的权利交给框架去控制，而不需要人为的去创建</font>，这样就实现了 <font style="color:red;font-weight:bolder;">可插拔式的接口编程</font>，<font style="color:red;font-weight:bolder;">有效的降低代码的耦合度，降低了扩展和维护的成本</font>。</p>
<p>比如，去某地旅游不再用自己亲自为订购A酒店还是B酒店而发愁了，只需要把住店的需求告诉给某个托管平台，这个托管平台就会帮您订购一个既便宜又舒适的酒店，而这个帮你订购酒店的行为就可以称之为 控制反转。</p>
<ol start="4">
<li><strong>怎么理解 Spring 中的依赖注入？</strong></li>
</ol>
<p>答：<font style="color:red;font-weight:bolder;">依赖注入</font> 是指 <font style="color:red;font-weight:bolder;">组件之间的依赖关系</font> 由  <font style="color:red;font-weight:bolder;">容器在运行期决定</font>，即由 <font style="color:red;font-weight:bolder;">容器动态的将某个依赖关系注入到组件之中</font>。依赖注入的目的并非为软件系统带来更多功能，而是 <font style="color:red;font-weight:bolder;">为了提升组件重用的频率， 并为系统搭建一个灵活、可扩展的平台</font>。 通过 <font style="color:red;font-weight:bolder;">依赖注入机制</font>，只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。  </p>
<ol start="5">
<li><strong>IOC和DI有什么关系？</strong></li>
</ol>
<p>答：<font style="color:red;font-weight:bolder;">IOC(Inversion of Control)</font> 是 <font style="color:red;font-weight:bolder;">Spring</font> 中一个极为重要的 <font style="color:red;font-weight:bolder;">概念</font>，提供了<font style="color:red;font-weight:bolder;">对象管理</font> 的功能，从而省去了人为创建麻烦，而 <font style="color:red;font-weight:bolder;">DI(Dependency Injection)</font> 正是实现 <font style="color:red;font-weight:bolder;">IOC(Inversion of Control)</font> 的 <font style="color:red;font-weight:bolder;">方法和手段</font>。  </p>
<ol start="6">
<li><strong>@Component和@Bean有什么区别？</strong></li>
</ol>
<p>答：<font style="color:red;font-weight:bolder;">@Component</font> 和 <font style="color:red;font-weight:bolder;">@Bean</font> 的 <font style="color:red;font-weight:bolder;">作用对象</font> 不同；</p>
<ul>
<li><font style="color:red;font-weight:bolder;">@Component</font>作用于<font style="color:red;font-weight:bolder;">类</font></li>
<li><font style="color:red;font-weight:bolder;">@Bean</font>直接作用于<font style="color:red;font-weight:bolder;">方法</font></li>
</ul>
<p><font style="color:red;font-weight:bolder;">@Component</font> 通常是通过 <font style="color:red;font-weight:bolder;">类路径扫描</font> 来自动 侦测和 装配 对象到Spring容器中；<br>比如<font style="color:red;font-weight:bolder;">@ComponentScan</font> 注解就是定义 扫描路径中的类 装配 到Spring的Bean容器中；</p>
<p><font style="color:red;font-weight:bolder;">@Bean</font> 注解是告诉Spring这是某个类的实例，当调用者需要用它的时候把它给调用者；<br>@Bean 注解比 @Component注解 <font style="color:red;font-weight:bolder;">自定义性</font> 更强，很多地方只能通过@Bean注解来注册Bean，比如当引用第三方库中的类需要 装配 到Spring容器时，则只能通过 @Bean 来实现，比如以下示例，只能通过@Bean注解来实现：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WireThirdLibClass</span></span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ThirdLibClass <span class="title">getThirdLibClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThirdLibClass();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong>Spring中Bean的作用域有几种类型？</strong></li>
</ol>
<p>答：<font style="color:red;font-weight:bolder;">Spring中bean的作用域有四种类型</font>，如下列表：</p>
<ul>
<li><font style="color:red;font-weight:bolder;">单例（Singleton）</font>: 整个应用程序，只创建bean的一个实例；</li>
<li><font style="color:red;font-weight:bolder;">原型（Prototype）：</font> 每次注入都会创建一个新的bean实例；</li>
<li><font style="color:red;font-weight:bolder;">会话（Session）：</font> 每个会话创建一个bean实例，只在Web系统中有效；</li>
<li><font style="color:red;font-weight:bolder;">请求（Request）：</font> 每个请求创建一个bean实例，只在Web系统中有效；</li>
<li><font style="color:red;font-weight:bolder;">Spring默认的是单例模式。</font></li>
</ul>
<ol start="8">
<li><strong>什么是Spring的内部Bean？</strong></li>
</ol>
<p>答：当一个bean仅被用作另一个bean的属性时，它能被声明为一个内部bean，为了定义innerBean，在Spring的基于XML的配置元数据中，可以在&lt; property/&gt; 或者&lt; constructor-arg/&gt;元素内使用&lt; bean/&gt;元素，内部bean通常是匿名的，它们的Scope一般是prototype。  </p>
<ol start="9">
<li><strong>Spring注入方式有哪些？</strong></li>
</ol>
<p>答：<font style="color:red;font-weight:bolder;">Spring的注入方式包含以下五种</font>：  </p>
<ul>
<li><font style="color:red;font-weight:bolder;">setter</font> 注入</li>
<li><font style="color:red;font-weight:bolder;">构造方法</font> 注入</li>
<li><font style="color:red;font-weight:bolder;">注解</font> 注入</li>
<li><font style="color:red;font-weight:bolder;">静态工厂</font> 注入</li>
<li><font style="color:red;font-weight:bolder;">实例工厂</font> 注入</li>
</ul>
<p>其中最常用的是前三种，官方推荐使用的是 <font style="color:red;font-weight:bolder;">注解</font> 注入，相对使用更简单，维护成本更低，更直观。  </p>
<ol start="10">
<li><strong>在Spring中如何操作数据库？</strong></li>
</ol>
<p>答：在Spring中操作数据库，可以使用Spring提供的JDBC Template对象；<br>JDBC Template类提供了很多便利的方法；<br>比如把数据库数据转变成基本数据类型或对象；<br>执行自定义SQL语句；<br>提供了自定义的数据错误处理等；</p>
<p>jdbc template 使用示例如下：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增</span></span><br><span class="line">@GetMapping(<span class="string">"save"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> save()&#123;</span><br><span class="line">  <span class="built_in">String</span> sql=<span class="string">"INSERT INTO USER(USER_NAME,PASS_WORD) VALUES ('LAOWANG','ADMIN')"</span>;</span><br><span class="line">  int <span class="keyword">rows</span>=jdbcTemplate.update(sql);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"执行成功，影响"</span>+<span class="keyword">rows</span>+<span class="string">"行"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">@GetMapping(<span class="string">"del"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> del(int id)&#123;</span><br><span class="line">  int <span class="keyword">rows</span>=jdbcTemplate.update(<span class="string">"DELETE FROM USER WHERE ID=?"</span>,id);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"执行成功，影响"</span>+<span class="keyword">rows</span>+<span class="string">"行"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">@GetMapping(<span class="string">"getMapById"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">Map</span> getMapById(<span class="built_in">Integer</span> id)&#123;</span><br><span class="line">  <span class="built_in">String</span> sql=<span class="string">"SELECT * FROM USER WHERE ID=?"</span>;</span><br><span class="line">  <span class="built_in">Map</span> <span class="built_in">map</span>=jdbcTemplate.queryForMap(sql,id);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="11">
<li><strong>Spring的 JdbcTemplate 对象和 JDBC 有什么区别？</strong></li>
</ol>
<p>答：<font style="color:red;font-weight:bolder;">Spring</font>的 <font style="color:red;font-weight:bolder;">JdbcTemplate</font>是对<font style="color:red;font-weight:bolder;">JDBC API的封装</font>，提供更多的功能和更便利的操作，比如<font style="color:red;font-weight:bolder;">JDBC Template </font>拥有：</p>
<ul>
<li><font style="color:red;font-weight:bolder;">JDBC Template</font>是<font style="color:red;font-weight:bolder;">线程安全</font>的；</li>
<li><font style="color:red;font-weight:bolder;">实例化</font>操作比较<font style="color:red;font-weight:bolder;">简单</font>，仅需要传递<font style="color:red;font-weight:bolder;">DataSource</font></li>
<li><font style="color:red;font-weight:bolder;">自动完成资源的创建和释放</font>工作；</li>
<li>创建一次JDBCTemplate，到处可用，<font style="color:red;font-weight:bolder;">避免重复开发</font>。</li>
</ul>
<ol start="12">
<li><strong>Spring有几种实现事务的方式？</strong></li>
</ol>
<p>答：Spring实现事务的方式有两种方式：</p>
<ul>
<li><font style="color:red;font-weight:bolder;">编程式</font> 事务；</li>
<li><font style="color:red;font-weight:bolder;">声明式</font> 事务；</li>
</ul>
<p><font style="color:red;font-weight:bolder;">编程式</font> 事务：<br>使用<font style="color:red;font-weight:bolder;">TransactionTemplate</font>或<font style="color:red;font-weight:bolder;">Platform TransactionManager</font>实现，<br>示例代码如下：  </p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TransactionTemplate transactionTemplate;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  <span class="comment">//Spring编程式事务，回调机制</span></span><br><span class="line">  transactionTemplate.execute(<span class="keyword">new</span> TransactionCallback&lt;Object&gt;)&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">doInTransaction</span><span class="params">(TransactionStatus status)</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        <span class="comment">//异常，设置为回滚</span></span><br><span class="line">        status.setRollbackOnly();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果有<font style="color:red;font-weight:bolder;">异常</font>，调用<font style="color:red;font-weight:bolder;">status.setRollbackOnly()</font>，<font style="color:red;font-weight:bolder;">回滚事务</font>；<br>否则<font style="color:red;font-weight:bolder;">正常</font>，执行<font style="color:red;font-weight:bolder;">doInTransaction()</font>方法，正常<font style="color:red;font-weight:bolder;">提交事务</font>。  </p>
<p>如果<font style="color:red;font-weight:bolder;">事务控制的方法不需要返回值</font>：<br>就可以使用<font style="color:red;font-weight:bolder;">TransactionCallbackWithoutResult(TransactionCallback接口的抽象实现类)</font><br>示例代码如下:  </p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  <span class="comment">//Spring编程式事务，回调机制</span></span><br><span class="line">  transactionTemplate.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus status)</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        <span class="comment">//异常，设置为回滚</span></span><br><span class="line">        status.setRollbackOnly();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font style="color:red;font-weight:bolder;">声明式</font> 事务：<br>底层是建立在<font style="color:red;font-weight:bolder;">SpringAOP的基础</font>上；<br>在方法执行前后进行拦截；<br>并在目标方法开始执行前创建新事物或加入一个已存在事务；<br>最后在目标方法执行完毕后根据情况进行提交或者回滚事务；  </p>
<p><font style="color:red;font-weight:bolder;">声明式</font> 事务的优点:<br>不需要编程，<font style="color:red;font-weight:bolder;">减少了代码的耦合</font> ，<br>在配置文件中配置并在目标方法上添加 <font style="color:red;font-weight:bolder;">@Transactional 注解</font>来实现；</p>
<p>示例代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Transactional</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line">  <span class="keyword">User</span> <span class="keyword">user</span>=<span class="built_in">new</span> <span class="keyword">User</span>("laowang");</span><br><span class="line">  userMapper.insertSelective(<span class="keyword">user</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    throw <span class="built_in">new</span> RuntimeException("异常");</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抛出异常，事务回自动回滚；<br>如果方法正常执行，则会自动提交事务。</p>
<ol start="13">
<li><strong>Spring中的AOP的底层实现原理是什么？</strong></li>
</ol>
<p>答：<font style="color:red;font-weight:bolder;">Spring AOP</font>的底层实现原理就是 <font style="color:red;font-weight:bolder;">动态代理</font>。</p>
<p><font style="color:red;font-weight:bolder;">Spring AOP的动态代理有两种实现方式</font>：<br>对于<font style="color:red;font-weight:bolder;">接口</font>使用的是<font style="color:red;font-weight:bolder;">JDK自带的动态代理</font>来实现的；<br>而对比<font style="color:red;font-weight:bolder;">非接口</font>使用的是<font style="color:red;font-weight:bolder;">CGLIB来实现</font>的；</p>
<ol start="14">
<li><strong>Spring声明式事务无效可能的原因有哪些?</strong></li>
</ol>
<p>答：<font style="color:red;font-weight:bolder;">Spring声明式事务无效可能的原因</font>如下：</p>
<ul>
<li><font style="color:red;font-weight:bolder;">MySQL使用的是MyISAM存储引擎</font>，而<font style="color:red;font-weight:bolder;">MyISAM是不支持事务</font>的；</li>
<li><font style="color:red;font-weight:bolder;">@Transactional使用在非public方法上</font>，<font style="color:red;font-weight:bolder;">@Transactional注解只能支持public级别</font>，其他类型声明的事务不会生效；</li>
<li><font style="color:red;font-weight:bolder;">@Transactional 在同一个类中无事务方法 A() 内部调用 有事务方法B()，那么此时B() 事务不会生效</font>。</li>
</ul>
<ol start="15">
<li><strong>Spring中的Bean是线程安全的吗？</strong></li>
</ol>
<p>答：<font style="color:red;font-weight:bolder;">Spring中的Bean默认是单例模式</font>;<br>Spring框架并没有对单例Bean进行多线程的封装处理;<br>因此<font style="color:red;font-weight:bolder;">默认的情况Bean并非是安全</font>的;<br>最简单保证Bean安全的举措就是<font style="color:red;font-weight:bolder;">设置Bean的作用域为Prototype（原型）模式</font>，这样每次请求都会新建一个Bean。</p>
<ol start="16">
<li><strong>说一下Spring中Bean的生命周期？</strong></li>
</ol>
<p>答：<font style="color:red;font-weight:bolder;">Spring中Bean的生命周期</font>如下：</p>
<p>1）<font style="color:red;font-weight:bolder;">实例化Bean</font>：<br>对于BeanFactory容器，当客户想容器请求一个尚未初始化的Bean时，或初始化Bean的时候需要注入另一个尚未初始化的依赖时，<br>容器就会调用createBean进行实例化。<br>对于ApplicationContext容器，当容器启动结束后，通过获取BeanDefinition对象中的信息，实例化所有的Bean。</p>
<p>2）<font style="color:red;font-weight:bolder;">设置对象属性（依赖注入）</font>：<br>实例化后的对象被封装在BeanWrapper对象中，紧接着Spring根据BeanDefinition中的信息以及通过BeanWrapper提供的设置属性的接口完成依赖注入；</p>
<p>3）<font style="color:red;font-weight:bolder;">处理Aware接口</font>：<br>Spring会检测该对象是否实现了  xxxAware 接口，并将相关 xxxAware实例注入给Bean；</p>
<p>如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName（String BeanId）方法，此处传递的就是Spring配置文件中Bean的id值；</p>
<p>如果这个Bean已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory（）方法，传递的是Spring工厂自身；</p>
<p>如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext（ApplicationContext）方法，传入Spring上下文；</p>
<p>4）<font style="color:red;font-weight:bolder;">BeanPostProcessor</font>：如果想对Bean进行一些自定义的处理，那么可以让Bean实现BeanPostProcessor接口，那将会调用 postProcessBeforeInitialization(Object obj，String s)方法；</p>
<p>5）<font style="color:red;font-weight:bolder;">InitialiingBean与init-method</font>：如果Bean在Spring配置文件中配置了init-method属性，则会自动调用其配置的初始化方法；</p>
<p>6）如果这个Bean实现了BeanPostProcessor接口，将会调用 postProcessAfterInitialization（Object obj，String s）方法；由于这个方法是在Bean初始化结束时调用的，因而可以被应用于内存或者缓存技术；</p>
<p>以上几个步骤完成后，Bean 就已经被正确创建了，之后就可以使用这个Bean了。</p>
<p>7）<font style="color:red;font-weight:bolder;">DisposableBean</font>：当Bean不再需要时，会经过清理阶段；如果Bean实现了DisposableBean这个接口，会调用其实现的 destroy()方法；</p>
<p>8）<font style="color:red;font-weight:bolder;">destroy-mothod</font>：最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法。</p>
<ol start="17">
<li><strong>Spring 有哪些优点？</strong></li>
</ol>
<p>答：<font style="color:red;font-weight:bolder;">Spring 优点</font>如下：</p>
<ul>
<li><font style="color:red;font-weight:bolder;">开源</font>、<font style="color:red;font-weight:bolder;">免费</font>的热门框架，<font style="color:red;font-weight:bolder;">稳定性高</font>、<font style="color:red;font-weight:bolder;">解决问题成本低</font>；</li>
<li><font style="color:red;font-weight:bolder;">方便集成</font>各种优秀的框架；</li>
<li><font style="color:red;font-weight:bolder;">降低了代码耦合性</font>：通过Spring提供的<font style="color:red;font-weight:bolder;">IOC(Inversion of Control)</font>容器，可以将对象之间的依赖关系交由Spring进行控制，避免硬编码所造成的过渡程序耦合；</li>
<li><font style="color:red;font-weight:bolder;">方便程序测试</font>：在Spring里，测试变得非常简单；例如：Spring对Junit的支持，可以通过注解方便的测试Spring程序；</li>
<li><font style="color:red;font-weight:bolder;">降低Java EE API 的使用难度</font>：Spring对很多难用的Java EE API（如JDBC、JavaMail、远程调用等）提供了一层封装，通过Spring的简易封装，让这些Java EE API的使用难度大为降低；</li>
</ul>
<ol start="18">
<li><strong>Spring和Struts的区别？</strong></li>
</ol>
<p>答： <font style="color:red;font-weight:bolder;">Spring和Struts的区别</font>如下：</p>
<p><font style="color:red;font-weight:bolder;">Spring 特性</font>如下：</p>
<ul>
<li>具备<font style="color:red;font-weight:bolder;">IOC(Inversion of Control)/DI(Dependency Injection)、AOP(Aspect oriented Programming)</font>等通用能力，提高研发效率</li>
<li>除了支持Web层建设以外，还提供了了J2EE整体服务</li>
<li>方便与其他不同技术结合使用，如Hibernate、Mybatis等</li>
<li><font style="color:red;font-weight:bolder;">Spring拦截机制是方法级别</font></li>
</ul>
<p><font style="color:red;font-weight:bolder;">Struts特性</font>如下：</p>
<ul>
<li>是一个基于MVC模式的一个Web层的处理</li>
<li><font style="color:red;font-weight:bolder;">Struts拦截机制是类级别</font></li>
</ul>
<ol start="19">
<li><strong>Spring、SpringBoot、SpringCloud的区别是什么？</strong></li>
</ol>
<p>答： <font style="color:red;font-weight:bolder;">Spring、SpringBoot、SpringCloud的区别</font>如下：</p>
<ul>
<li><font style="color:red;font-weight:bolder;">Spring Framework</font> 简称 Spring，是整个Spring生态的基础；</li>
<li><font style="color:red;font-weight:bolder;">Spring Boot</font>是一个快速开发框架；<br>让开发者可以迅速搭建一套基于Spring的应用程序；<br>并且将<font style="color:red;font-weight:bolder;">常用的Spring模块以及第三方模块</font>，如Mybatis、Hibernate等都做了很好的<font style="color:red;font-weight:bolder;">集成</font>，只需要简单的配置即可使用；<br><font style="color:red;font-weight:bolder;">不需要任何的XML配置文件</font>，真正做到了<font style="color:red;font-weight:bolder;">开箱即用</font>；<br>同时<font style="color:red;font-weight:bolder;">默认支持JSON格式的数据</font>；<br>使用Spring Boot进行<font style="color:red;font-weight:bolder;">前后端分离开发</font>也非常<font style="color:red;font-weight:bolder;">便捷</font>。</li>
<li><font style="color:red;font-weight:bolder;">Spring Cloud</font>是一套整合了<font style="color:red;font-weight:bolder;">分布式应用</font> 常用模块的框架；<br>使得开发者可以快速实现<font style="color:red;font-weight:bolder;">微服务应用</font>。<br>作为目前非常热门的技术，有关微服务的话题总是在各种场景下被大家讨论；<br>企业的招聘信息中也越来越多的出现对于微服务架构能力的要求。</li>
</ul>
<ol start="20">
<li><strong>Spring中都是用了哪些设计模式？</strong></li>
</ol>
<p>答： <font style="color:red;font-weight:bolder;">Spring中使用的设计模式</font>如下：</p>
<ul>
<li><strong>工厂模式</strong>： 通过BeanFactory、ApplicationContext 来创建bean 都是属于工厂模式；</li>
<li><strong>单例、原型模式</strong>： 创建bean对象 设置作用域时，就可以声明Singleton（单例模式）、Prototype（原型模式）；</li>
<li><strong>观察者模式</strong>：Spring可以定义一下监听，如ApplicationListener 当某个动作触发时就会发出通知；</li>
<li><strong>责任链模式</strong>：AOP拦截器的执行；</li>
<li><strong>策略模式</strong>：在创建代理类时，如果代理的接口使用的是JDK自身的动态代理，如果不是，则接口使用的是CGLIB实现动态代理；</li>
</ul>
<ol start="22">
<li><strong>Spring事务隔离级别有哪些？</strong></li>
</ol>
<p>答：<font style="color:red;font-weight:bolder;">Spring的事务隔离级别包含以下五种</font>：</p>
<ul>
<li><strong>ISOLATION_DEFAULT（isolation default）</strong>: 用底层数据库的设置隔离级别，数据库设置的是什么就用什么；</li>
<li><strong>ISOLATION_READ_UNCOMMITTED（isolation read uncommitted）</strong>:<font style="color:red;font-weight:bolder;">未提交读</font>，最低隔离级别、事务未提交前，就可以被其他事务读取（会出现幻读、脏读、不可重复读）；</li>
<li><strong>ISOLATION_READ_COMMITTED（isolation read committed）</strong>: <font style="color:red;font-weight:bolder;">提交读</font>，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读），SQL Server的默认级别；</li>
<li><strong>ISOLATION_REPEATABLE_READ( isolation repeatable read)</strong>: <font style="color:red;font-weight:bolder;">可重复度</font>，保证多次读取同一个数据时，其值都和事务开始时候的内容是一样的，禁止读取到别的事务未提交的数据（会造成幻读），MySQL的默认级别；</li>
<li><strong>ISOLATION_SERIALIZABLE（isolation serializable）</strong>:<font style="color:red;font-weight:bolder;">序列化</font>，代价最高最可靠的隔离级别，该隔离界别能防止脏读、不可重复读、幻读。</li>
</ul>
<p>默认值是 <strong>ISOLATION_DEFAULT</strong> 遵循数据库的事务隔离级别设置；</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>MicroservicesGuide-走近微服务</title>
    <url>/2020/05/10/%E9%9D%A2%E8%AF%95/MicroservicesGuide-%E8%B5%B0%E8%BF%91%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>Nothing better than a buzy Saturday morning.</p>
</blockquote>
<p>为什么想要翻译这篇博客呢，因为也是看了b站上的一个学习springboot的一个视频，而且我今天面试的时候人家问了微服务是什么，然后由此可得我万分后悔没有当时通篇翻译这篇博客。<br>好了现在后悔也挽救不了我的愚不可及了。<br>观看笔记：<a href="https://www.bilibili.com/video/BV1Eg4y187XT" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Eg4y187XT</a><br>就是这个视频告诉了我：推荐看哦~<br>为了不后悔，以后每件事情，能做笔记就一定要压着自己做，不然会后悔的；  </p>
<h2 id="Microservices-Guide-微服务指南（翻译）"><a href="#Microservices-Guide-微服务指南（翻译）" class="headerlink" title="Microservices Guide 微服务指南（翻译）"></a>Microservices Guide 微服务指南（翻译）</h2><p>链接：<a href="https://www.martinfowler.com/microservices/" target="_blank" rel="noopener">https://www.martinfowler.com/microservices/</a>  </p>
<blockquote>
<p>A guide to material on martinfowler.com about microservices.<br><strong>Matin Fowler</strong><br>21 Aug 2019  </p>
</blockquote>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">martinfowler.com网站关于微服务的一个材料指南</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">--------------------------------------------------------</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">有道词典翻译：</span></span><br><span class="line"><span class="keyword">martinfowler.com </span>上关于微服务的材料指南。</span><br></pre></td></tr></table></figure>

<h3 id="Microservices-Guide"><a href="#Microservices-Guide" class="headerlink" title="Microservices Guide"></a>Microservices Guide</h3><h4 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h4><blockquote>
<p>In short , the microservice architectural style is an approach to developing a single application as a <strong>suite of small services</strong> , each <strong>running in its own process</strong>  and communicating with lightweight mechanisms , often an HTTP resource API .<br>These services are <strong>built around business capabilities</strong> and <strong>independently deployable</strong> by fully automated deployment machinery .<br>There is a bare minimum of centralized management of these services , which may be written in different programming languages and use different data storage technologies .<br>– <strong>James Lewis</strong> and <strong>Martin Fowler</strong>（2014）  </p>
</blockquote>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">简而言之，</span><br><span class="line">微服务架构风格 是一种近似于 将一个单体应用程序作为一个小型服务套件来进行开发的风格，</span><br><span class="line">每一个小型服务都运行在它自身的进程当中，</span><br><span class="line">并且通过轻量级机制进行相互间的交流，</span><br><span class="line">通常是以一种超文本传输协议资源应用编程接口的方式进行交互。</span><br><span class="line">这些服务都是围绕业务逻辑来进行构建的并且通过全自动化部署机制来进行独立部署。</span><br><span class="line">最低限度的集中式管理着这些服务（这些服务的集中管理非常少），</span><br><span class="line">通过这种方式，</span><br><span class="line">或许可以使用不同的程序语言进行编写以及使用不同的数据存储技术。</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------</span><br><span class="line"></span><br><span class="line">有道词典翻译：</span><br><span class="line"></span><br><span class="line">简而言之，</span><br><span class="line">微服务体系结构风格是一种将单个应用程序作为一组小服务进行开发的方法，</span><br><span class="line">每个小服务都在自己的进程中运行，并与轻量级机制<span class="params">(通常是HTTP资源API)</span>进行通信。</span><br><span class="line">这些服务是围绕业务功能构建的，</span><br><span class="line">并且可以通过完全自动化的部署机制独立部署。</span><br><span class="line">这些服务的集中管理非常少，</span><br><span class="line">它们可以用不同的编程语言编写，</span><br><span class="line">并使用不同的数据存储技术。</span><br><span class="line">——詹姆斯·刘易斯和马丁·福勒<span class="params">(<span class="number">2014</span>)</span></span><br></pre></td></tr></table></figure>

<h3 id="Introduce-Martin-Fowler"><a href="#Introduce-Martin-Fowler" class="headerlink" title="Introduce - Martin Fowler"></a>Introduce - Martin Fowler</h3><p>了解微服务之前首先来看看<strong>Martin Fowler</strong>老爷子的自我介绍；<br>Fowler刚被我打成了Flower；  </p>
<p>简介链接：<a href="https://www.martinfowler.com" target="_blank" rel="noopener">https://www.martinfowler.com</a>  </p>
<h4 id="Contents-1"><a href="#Contents-1" class="headerlink" title="Contents"></a>Contents</h4><blockquote>
<p>Software development is a young profession , and we are still learning the techniques and building the tools to do it effectively .<br>I’ve been involved in this activity for over three decades and in the last two I’ve been writing on this website about patterns and practives that make it easier to build userful software .<br>The site began as a place to put my own writing , but I also use it to publish articles by my colleagues .  </p>
</blockquote>
<blockquote>
<p>In 2000 , I joined ThoughtWorkds , where my role is to learn about the techniques that we’ve learned to deliver software for our clients , and pass these techniques on to the wider software industry .<br>As this site has developed into a respected platform on software development , I’ve edited and published articles by me colleagues , both ThoughtWorkers and others , to help useful writing reach a wider audience .  </p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">软件发展是一个年轻的专业技术，</span><br><span class="line">并且我们是仍然在学习这门技术 和 构建一些工具去有效的完成它。</span><br><span class="line">我已经参与到这一项活动（工作）当中已经超过三十年了，</span><br><span class="line">并且在最近两年内，</span><br><span class="line">我在这个网站站点上已经编写了关于如何更容易的去构建有用的软件的一些思想模式以及练习方法；</span><br><span class="line">这个站点开始时作为来存放我自己的一个写作的一个地方，</span><br><span class="line">但是我也使用这个地方来进行发布一些通过我同事们写的文章；</span><br><span class="line"></span><br><span class="line">在<span class="number">2000</span>年，我加入到了ThoughtWorks，</span><br><span class="line">在这个地方我扮演的角色是去学习这一项技术，</span><br><span class="line">我们已经学习到去为我们的客户实现软件，</span><br><span class="line">以及通过这些技术在更广阔的软件产业当中；</span><br><span class="line">这个站点已经逐渐发展成为一个受人尊敬的平台在软件发展史当中，</span><br><span class="line">我已经写了很多以及发布了很多我同事写的文章，同时还有ThoughtWorkers的员工以及其他人；</span><br><span class="line">来帮助有用的写作，即逐渐成为一个有深度的受众；</span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line"></span><br><span class="line">有道词典翻译：</span><br><span class="line">软件开发是一个年轻的职业，</span><br><span class="line">我们仍然在学习技术和构建工具来有效地完成它。</span><br><span class="line">我已经参与这项活动超过<span class="number">30</span>年了，</span><br><span class="line">在过去的两年中，</span><br><span class="line">我一直在这个网站上撰写关于使构建有用软件变得更容易的模式和实践的文章。</span><br><span class="line">这个网站一开始是一个放置我自己的文章的地方，</span><br><span class="line">但我也用它来发表我同事的文章。</span><br><span class="line"><span class="number">2000</span>年，我加入了ThoughtWorks，</span><br><span class="line">在这里，我的职责是学习我们为客户交付软件的技术，</span><br><span class="line">并将这些技术传递给更广泛的软件行业。</span><br><span class="line">随着这个网站发展成为一个受人尊敬的软件开发平台，</span><br><span class="line">我已经编辑并发表了我的同事们的文章，</span><br><span class="line">包括ThoughtWorkers和其他人，</span><br><span class="line">以帮助更广泛的读者阅读有用的文章。</span><br></pre></td></tr></table></figure>

<h3 id="A-website-on-building-software-effectively"><a href="#A-website-on-building-software-effectively" class="headerlink" title="A website on building software effectively"></a>A website on building software effectively</h3><p>A website on building software effectively</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">在一个网站上有效地构建软件</span><br><span class="line"></span><br><span class="line"><span class="comment">-------------------------</span></span><br><span class="line"></span><br><span class="line">一个有效开发软件的网站</span><br></pre></td></tr></table></figure>

<h4 id="Contents-2"><a href="#Contents-2" class="headerlink" title="Contents"></a>Contents</h4><blockquote>
<p>If there’s a theme that runs through my work and writing on this site , it’s the interplay between the shift towards agile thinking and the technical patterns and practices that make agile software development practical .<br>While specifics of technology change rapidly in our profession , fundamental practices and patterns are more stable .<br>So writing about these allows me to have articles on this site that are several years old but still as relevant as when they were written .  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>As software becomes more critical to modern business , software needs t be able to react quickly to changes ,  allowing new features to be be conceived , developed and put into production rapidly .<br>The techniques of <font style="color:red;font-weight:bolder">agile software development</font> began in the 1990s and became steadily more popular in the last decade .<br>The focus on a flexible approach to planning , which allows software products to change direction as the user’s needs change and as product managers learn more about how to make their users effective .<br>While widely accepted now , agile approaches are not easy , requiring significant skills for a team , but more importantly a culture of open collaboration both within the team and with a team’s partners .  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>This need to respond fluently to changes hash an important impact upon the <font style="color:red;font-weight:bolder">architecture</font> of a software system.<br>The software needs to be built in such a way that it is able to adapt to unexpected changes in features .<br>One of the most important ways to do this is to write clear code , making it easy to understant what the program is supposed to do .<br>This code should be devided into modules which allow developers to understand only the parts of the system they need to make a change .<br>This production code should be supported with automated tests that can detect any errors made when making a change while providing examples of how internal structures are used .<br>Large and complex software efforts may find the <font style="color:red;font-weight:bolder">microservices</font> architectural style helps teams deploy software with less entangling dependencies .  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Creating software that has a good architecture isn’t something that can be done first time .<br>Like good prose , it needs regular revisions and programmers learn more about what the product needs to do and how best to design the product to achieve its goals .<br><font style="color:red;font-weight:bolder">Refactoring</font> is an essential technique to allow a program to be changed safety .<br>It consists of making small changes that don’t alter the observable behavior of the software .<br>Bt combining lots of small changes , developers can revise the software’s structure supporting significant modifications that weren’t planned when the system was first conceived .  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Software that runs only on a developer’s machine isn’t providing value to the customers of the software .<br>Traditionally releasing software has been a long and complicated process , one that hinders the need to evolve software quickly .<br><font style="color:red;font-weight:bolder">Continuous Delivery</font> uses automation and collaborative workflows to remove this bottleneck , allowing teams to release software as often as the customers demand .<br>For Continuous Delivery to be possible , we need to build in a solid foundation of <font style="color:red;font-weight:bolder">Testing</font> , with a range of automated tests that can give us confidence taht our changes haven’t introduced any bugs .<br>This leads us to integrate testing into programming , which can act to improve our architectural .  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Photostream"><a href="#Photostream" class="headerlink" title="Photostream"></a>Photostream</h3><h3 id="Data-Management"><a href="#Data-Management" class="headerlink" title="Data Management"></a>Data Management</h3><h4 id="Contents-3"><a href="#Contents-3" class="headerlink" title="Contents"></a>Contents</h4><blockquote>
<p>There are many kinds of softeare out there , the kind I’m primarily engaged is Enterprise Applications .<br>One of the enduring problems we need to tackle in this world is <font style="color:red;font-weight:bolder">data management</font> .<br>The aspectes of data management I’ve focused on here are how to migrate data stores as their applications respond to changing needs , coping with different contexts across a large enterprice , the role of NoSQL databases , and the broader issues of coping with data that is both Big and Messy .  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Domain-Specific-Languages"><a href="#Domain-Specific-Languages" class="headerlink" title="Domain-Specific Languages"></a>Domain-Specific Languages</h3><h3 id="Contents-4"><a href="#Contents-4" class="headerlink" title="Contents"></a>Contents</h3><blockquote>
<p>A common problem in complex software systems is how to capture complicated domain logic in a way that programmers can both easily manipulate and also easily communicate to domain experts .<br><font style="color:red;font-weight:bolder">Domain-Specific Languages</font>(DSLs) create a custom language for a particular problem , either with custom parsers or by conventions within a host language .  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h3><h4 id="Contents-5"><a href="#Contents-5" class="headerlink" title="Contents"></a>Contents</h4><blockquote>
<p>I’ve written seven books on software development , including Refactoring , Patterns of Enterprise Application Architectural , and UML Distilled .<br>I’m also the editor of a signature series for Addison-Wesley that includes five jolt award winners .<br><font style="color:red;font-weight:bolder">My Books Page…</font>  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Conference-Talks"><a href="#Conference-Talks" class="headerlink" title="Conference Talks"></a>Conference Talks</h3><h4 id="Contents-6"><a href="#Contents-6" class="headerlink" title="Contents"></a>Contents</h4><blockquote>
<p>I’m often asked to give talks at conferences , from which I’ve inferred that I’m a pretty good speaker - which is ironic since I really hate giving talks .<br>You can form your own opinion of my talks by watching videos of some my conference talks .<br><font style="color:red;font-weight:bolder"> My Videos Page…</font>  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Board-Games"><a href="#Board-Games" class="headerlink" title="Board Games"></a>Board Games</h3><h4 id="Contents-7"><a href="#Contents-7" class="headerlink" title="Contents"></a>Contents</h4><blockquote>
<p>I’ve long been a fan of board games , I enjoy a game that fully occupies my mind , clearing out all the serious thoughts for a bit , while enjoying the company of good friends .<br>Modern board games saw dramatic improvement in the 1990’s with the rise of Eurogames , and I expect many people would be surprised if they haven’t tried any of this new generation .<br>I also appear regularly on <font style="color:red;font-weight:bolder">Heavy Cardboard</font> .<br><font style="color:red;font-weight:bolder">My Board Games page…</font>  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MICROSERVICES</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>MICROSERVICES</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot知识点</title>
    <url>/2020/05/10/%E9%9D%A2%E8%AF%95/SpringBoot/</url>
    <content><![CDATA[<p>观看笔记：<a href="https://www.bilibili.com/video/BV1Eg4y187XT" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Eg4y187XT</a>  </p>
<h2 id="学习方法谈心"><a href="#学习方法谈心" class="headerlink" title="学习方法谈心"></a>学习方法谈心</h2><p>SpringBoot与SpringCloud这两个框架，说框架有点小，特别是SpringCloud整个的体系是非常庞大的；可以认为是一整套技术栈或者是说生态圈。</p>
<p>方法论；宏观意义上去了解；从问题的本源来进行剖析；有问题就去查官方文档；但是对于SpringCloud来说，官方文档就过于庞杂了；效果并不是特别的好。<br>一种好的学习方式：针对性的去学习。<br>像SpringCloud，每次去学习其当中的一个子项目的时候，则需要带着问题，带着心中的疑虑这样子去学习，就属于一种比较好的一种学习方式。  </p>
<p>在学习框架式，如何很好的切入进去，挖掘出来，形成自己的一整套技术体系：从宏观/方法论的层面上来讲：<br>前端框架更迭快。<br>如何保持自己的竞争力（持续的保持自己的竞争力）这是每一个开发人员都需要面临的问题。<br>职业追求奋斗目标；心中需要有一种紧迫感；对自己所从事的技术领域需要有一个很好的把握和理解。那么这个很好的把握和理解体现在什么地方呢？<br>首先对于使用的编程语言应当比较熟练的程度。第二，对于你所觉得重要的框架，一定要达到一种原理级别的理解和把控。这一点十分重要。<br>写了很多代码，也做了很多的项目，但是就是觉得自己的技术没有能得到提高，明显的长进，就感觉自己在原地踏步日复一日年复一年的工作而已。<br>反映出来了一个问题：在工作当中，工作技能对于自己的技能要求其实并没有那么高；对于中国大部分公司来说都不是纯技术公司；<br>纯技术公司指的是：其技术就是自己公司的一个成品；最典型的例子，比如说TiDBit（这是一个新型的国产数据库），类似于这些厂商它们的成品其实就是技术，它们的技术就是它们的成品。在这种情况下，其技术就是其核心竞争力核心生产力。<br>但是对于其他很多的互联网公司来说，却不是这样的情况，因为有其成品，有其自己的商业模式，而技术是为了实现这个成品，实现这个商业模式而必须要有的一种手段；换句话来说，在这样的互联网公司下，技术并不是其最为核心最为重要的一种生产力。但是技术又不可或缺，这是绝大互联网公司所面临的一个问题。<br>在工作当中，一方面很好的完成工作，另一方面能在日复一日的工作当中提高自己的水准，不断的提高自己；其实这是摆在每一个人面前很重要且离不开的话题。<br>在这样的情况下，作为一名软件从业者该如何去提升自己？<br>首先，一定要具备有的认识：在工作当中用技术去完成每一天自己工作当中的任务，这是本职工作需要自己去完成的；这毫无疑问；公司赋予自己薪水，而自己为了这份薪水去完成这些自己的本职工作，付诸自己的劳动力，把相应的工作去完成，这是自己应该去做的事情。<br>公司付给自己工资，而自己很好的完成这份本职工作；这样是远远不够的；而且会差距越来越大；<br>首先，现在的软件从业者越来越多；如何能够从这么多的软件从业者当中形成自己的核心竞争力从而脱颖而出呢？其实这是很考验一个人的内力以及一个人其认知水平和思维水准的这样一件事情。</p>
<p>掌握最为底层后者是一些核心的技能；最立竿见影的方式；<br>第二这也是能让自己以后在学习新的技术时能够越来越快；越来越扎实的一个必要的<br>保证；归根结底还是那句话；要掌握底层掌握原理性的东西；<br>日常做项目，换句话又叫做赶项目；因为项目有个截止日期。<br>在时间很紧迫的情况下，其实每天的工作就是在赶这个项目而已；每天也只是完成了这个功能而已。很多的时候其实自己并不能理解自己所写的每一行代码的原理是什么？为什么要这样子去写，其底层发生了什么的事情，产生了一种啥样的调用关系。光去做项目是远远不够的；<br>做项目是学习框架一种最为行之有效的一种手段；<br>那对于这种结论，但是对于这点还是远远不够，还会差很多。在做项目的过程中，关注点在于如何能够在短期内将项目做完做好；另外一个关注点，如何将项目当中使用到的框架理解的深入且扎实。这其实是在项目之外所需要思考的事情。<br>需要提高自己的认知；并不是做完项目了代表一切都完结了；</p>
<p>如何让自己的技术处于一种高位的一个这样的状态：掌握原理性的东西，必须要掌握底层的一些内容，这样才能够让自己立于不败之地。</p>
<p>面试的时候往往会问一些比较基础原理性的内容；这些内容可能用过，但是却投入很少的时间去思考他。所以就有了需要面试去花时间准备的缘故。</p>
<h2 id="Spring-Boot与Cloud整体介绍"><a href="#Spring-Boot与Cloud整体介绍" class="headerlink" title="Spring Boot与Cloud整体介绍"></a>Spring Boot与Cloud整体介绍</h2><h2 id="课程大纲深入解读与剖析"><a href="#课程大纲深入解读与剖析" class="headerlink" title="课程大纲深入解读与剖析"></a>课程大纲深入解读与剖析</h2><h2 id="微服务重要概念与权威解读"><a href="#微服务重要概念与权威解读" class="headerlink" title="微服务重要概念与权威解读"></a>微服务重要概念与权威解读</h2>]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解JVM虚拟机</title>
    <url>/2020/05/09/%E9%9D%A2%E8%AF%95/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<blockquote>
<p>观看笔记</p>
</blockquote>
<p><a href="https://www.bilibili.com/video/BV1qE411Y7FQ?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1qE411Y7FQ?p=1</a>  </p>
<h2 id="学习方法论与高效学习方式演进"><a href="#学习方法论与高效学习方式演进" class="headerlink" title="学习方法论与高效学习方式演进"></a>学习方法论与高效学习方式演进</h2><p>JVM：Java virtual Machine  </p>
<ul>
<li>从人去学习</li>
<li>从事务去学习</li>
</ul>
<p>懂得很多道理，却依然过不好这一生。《后会无期》  </p>
<p>持久化：最终落到一个存储上面。有输入InputStream一定要有输出OutputStream；  </p>
<p>刻意联系。  </p>
<h2 id="JVM学习曲线与疑难点剖析"><a href="#JVM学习曲线与疑难点剖析" class="headerlink" title="JVM学习曲线与疑难点剖析"></a>JVM学习曲线与疑难点剖析</h2><p>应用框架：Spring、Spring Boot、Spring Cloud、Dubbo etc.  </p>
<p>JVM：枯燥，理论。  </p>
<p>基于java8；讲解；  </p>
<p>抱有敬畏的心态学习JVM。  </p>
<p>任重而道远；  </p>
<h2 id="深入理解JVM课程大纲分析与工具使用"><a href="#深入理解JVM课程大纲分析与工具使用" class="headerlink" title="深入理解JVM课程大纲分析与工具使用"></a>深入理解JVM课程大纲分析与工具使用</h2><h2 id="类加载器深入解析与阶段分析"><a href="#类加载器深入解析与阶段分析" class="headerlink" title="类加载器深入解析与阶段分析"></a>类加载器深入解析与阶段分析</h2><h2 id="类的加载连接与初始化过程详解"><a href="#类的加载连接与初始化过程详解" class="headerlink" title="类的加载连接与初始化过程详解"></a>类的加载连接与初始化过程详解</h2><h2 id="常量的本质含义与反编译及助记符详解"><a href="#常量的本质含义与反编译及助记符详解" class="headerlink" title="常量的本质含义与反编译及助记符详解"></a>常量的本质含义与反编译及助记符详解</h2><h2 id="编译器常量与运行期常量的区别以及数组创建本质分析"><a href="#编译器常量与运行期常量的区别以及数组创建本质分析" class="headerlink" title="编译器常量与运行期常量的区别以及数组创建本质分析"></a>编译器常量与运行期常量的区别以及数组创建本质分析</h2><h2 id="接口初始化规则与类加载器准备节点和初始化阶段的重要意义"><a href="#接口初始化规则与类加载器准备节点和初始化阶段的重要意义" class="headerlink" title="接口初始化规则与类加载器准备节点和初始化阶段的重要意义"></a>接口初始化规则与类加载器准备节点和初始化阶段的重要意义</h2><h2 id="类加载器深入解析以及重要特性剖析"><a href="#类加载器深入解析以及重要特性剖析" class="headerlink" title="类加载器深入解析以及重要特性剖析"></a>类加载器深入解析以及重要特性剖析</h2><h2 id="初始化对于类与接口的异同点深入解析"><a href="#初始化对于类与接口的异同点深入解析" class="headerlink" title="初始化对于类与接口的异同点深入解析"></a>初始化对于类与接口的异同点深入解析</h2>]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>JVM虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>Shopping for a TV</title>
    <url>/2020/05/09/%E8%8B%B1%E8%AF%AD/lesson4/</url>
    <content><![CDATA[<h2 id="Learn-amp-Talk-I"><a href="#Learn-amp-Talk-I" class="headerlink" title="Learn &amp; Talk I"></a>Learn &amp; Talk I</h2><h3 id="Chapter-1-Shopping"><a href="#Chapter-1-Shopping" class="headerlink" title="Chapter 1 Shopping"></a>Chapter 1 Shopping</h3><h4 id="Lesson-4-Shopping-for-a-TV"><a href="#Lesson-4-Shopping-for-a-TV" class="headerlink" title="Lesson 4 Shopping for a TV"></a>Lesson 4 Shopping for a TV</h4><blockquote>
<p>at the bottom of the following pages:T1=teaching instructions;T=teacher;S=student</p>
</blockquote>
<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul>
<li><p>part <big>A</big>. Let’s Learn (12 mins)</p>
</li>
<li><p>part <big>B</big>. Let’s Talk (12 mins)</p>
</li>
<li><p>part <big>C</big>. Review (1 min)</p>
</li>
</ul>
<blockquote>
<p>Learning Objectives</p>
</blockquote>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">学习目标：</span><br><span class="line"><span class="number">4</span> <span class="built_in">words</span> <span class="keyword">about</span> <span class="string">"shopping for a TV"</span> | <span class="number">4</span>个和<span class="string">"买电视"</span>相关的单词</span><br><span class="line">Expressions <span class="keyword">for</span> <span class="string">"shopping for a TV"</span> | <span class="string">"买电视"</span>常用表达</span><br><span class="line">How <span class="keyword">to</span> talk <span class="keyword">about</span> topics related <span class="keyword">to</span> <span class="string">"shopping for a TV"</span> | 谈论和<span class="string">"买电视"</span>相关的话题</span><br></pre></td></tr></table></figure>

<h2 id="part-A-Let’s-Learn"><a href="#part-A-Let’s-Learn" class="headerlink" title="part A. Let’s Learn"></a>part A. Let’s Learn</h2><h3 id="Vocabulary-4-mins"><a href="#Vocabulary-4-mins" class="headerlink" title="Vocabulary (4 mins)"></a>Vocabulary (4 mins)</h3><table>
  <tr>
    <td style="font-weight:bolder;color:red;">warranty</td>
    <td>a written promise from a company to repair or replace a product that develops a fault within a particular period of time</td>
    <td>保修单，保修卡，保修服务</td>
    <td>e.g. The TV has a 3-year <span style="font-weight:bolder;color:red;text-decoration:underline;">warranty</span>.</td>
    <td></td>
  </tr>
   <tr>
    <td style="font-weight:bolder;color:red;">best-seller</td>
    <td>a new bool or other product that has sold a great number of copies.</td>
    <td>热卖品，畅销品</td>
    <td>e.g. As a writer, he wants to write a <span style="font-weight:bolder;color:red;text-decoration:underline;">best-seller</span>.</td>
    <td></td>
  </tr>
     <tr>
    <td style="font-weight:bolder;color:red;">offer</td>
    <td>to provide or supply something.</td>
    <td>提供</td>
    <td>e.g. He <span style="font-weight:bolder;color:red;text-decoration:underline;">offered</span> me a glass of water.</td>
    <td></td>
  </tr>
     <tr>
    <td style="font-weight:bolder;color:red;">delivery</td>
    <td>the act of taking goods,letters,parcels,etc. to people's houses or places of work</td>
    <td>运送，递送</td>
    <td>e.g. They offer free <span style="font-weight:bolder;color:red;text-decoration:underline;">delivery,</span> so it's a good deal.</td>
    <td>deliver(v.) The letter was delivered yesterday,</td>
  </tr>
</table>

<h3 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h3><h4 id="Role-play-the-dialog-with-your-teacher-twice-and-learn-the-highlighted-expressions-by-heart-和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达"><a href="#Role-play-the-dialog-with-your-teacher-twice-and-learn-the-highlighted-expressions-by-heart-和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达" class="headerlink" title="Role-play the dialog with your teacher twice,and learn the highlighted expressions by heart.和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达"></a>Role-play the dialog with your teacher twice,and learn the highlighted expressions by heart.和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达</h4><p>（John and Anne are shopping for a TV.）  </p>
<p><strong><em>Anne:</em></strong> How about this one?<br><strong><em>John:</em></strong> I like this brand ,and the price isn’t too high.<br>（They start to ask the salesperson for information.）<br><strong><em>John:</em></strong> <span style="background-color:yellow;font-weight:bolder;">How long is the warranty for this TV?</span><br><strong><em>Salesperson:</em></strong> It comes with a 2-year parts(零件)<span style="background-color:yellow;font-weight:bolder;">warranty</span>. It’s also the <span style="background-color:yellow;font-weight:bolder;">best-seller</span> now.<br><strong><em>Anne:</em></strong> <span style="background-color:yellow;font-weight:bolder;">Do you offer free delivery?</span><br><strong><em>Anne:</em></strong> Yes, we do.</p>
<h2 id="part-B-Let’s-Talk"><a href="#part-B-Let’s-Talk" class="headerlink" title="part B. Let’s Talk"></a>part B. Let’s Talk</h2><h3 id="Conversation"><a href="#Conversation" class="headerlink" title="Conversation"></a>Conversation</h3><h4 id="Suppose-you’re-shopping-for-appliances-Use-th-vocabulary-and-expressions-you’ve-learned-in-part-A-to-complete-the-following-conversation-假设你正在选购电器。运用在第一部分学到的词汇和表达将一下情境对话补充完整"><a href="#Suppose-you’re-shopping-for-appliances-Use-th-vocabulary-and-expressions-you’ve-learned-in-part-A-to-complete-the-following-conversation-假设你正在选购电器。运用在第一部分学到的词汇和表达将一下情境对话补充完整" class="headerlink" title="Suppose you’re shopping for appliances. Use th vocabulary and expressions you’ve learned in part A to complete the following conversation. 假设你正在选购电器。运用在第一部分学到的词汇和表达将一下情境对话补充完整"></a>Suppose you’re shopping for appliances. Use th vocabulary and expressions you’ve learned in part A to complete the following conversation. 假设你正在选购电器。运用在第一部分学到的词汇和表达将一下情境对话补充完整</h4><blockquote>
<p>Hints<br><strong><em>delivery</em></strong><br><strong><em>warranty</em></strong><br><strong><em>How long is the warranty for …?</em></strong><br><strong><em>best-seller</em></strong><br><strong><em>offer</em></strong></p>
</blockquote>
<p><strong><em>A:</em></strong> Excuse me. <span style="text-decoration:underline;">How along is warranty for</span> this air conditioner(空调) ?<br><strong><em>B:</em></strong> Three years. It’s the <span style="text-decoration:underline;">best-seller</span> now. We also <span style="text-decoration:underline;">offer</span> free <span style="text-decoration:underline;">delivery</span>.<br><strong><em>A:</em></strong> But there’s an air conditioner of this brand in the living room of my house,and it doesn’t work very well recently.<br><strong><em>B:</em></strong> We’ll <span style="text-decoration:underline;">offer</span> free repair(维修) if it’s still under <span style="text-decoration:underline;">warranty</span>.<br><strong><em>A:</em></strong> Fine.</p>
<h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><h4 id="Talk-with-your-teacher-about-the-following-question-Refer-to-the-hints-if-necessary-和老师一起讨论一下问题。可以参考方框中的提示"><a href="#Talk-with-your-teacher-about-the-following-question-Refer-to-the-hints-if-necessary-和老师一起讨论一下问题。可以参考方框中的提示" class="headerlink" title="Talk with your teacher about the following question. Refer to the hints if necessary.和老师一起讨论一下问题。可以参考方框中的提示"></a>Talk with your teacher about the following question. Refer to the hints if necessary.和老师一起讨论一下问题。可以参考方框中的提示</h4><ol>
<li>How often do you watch TV? When do you usually watch TV?</li>
</ol>
<blockquote>
<p>Hints:</p>
</blockquote>
<p><strong><em>every day / usually / from time to time(偶尔) / never …</em></strong><br><strong><em>in the evening(morning ,afternoon) / at the noon / on weekends …</em></strong></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">I often watch TV <span class="keyword">is</span> irregularly scheduled.  </span><br><span class="line">recently, because I watch TV <span class="keyword">with</span> <span class="keyword">my</span> friends when <span class="keyword">my</span> friends <span class="keyword">after</span> their works,we will eat dinner <span class="keyword">and</span> watch TV <span class="keyword">at</span> <span class="keyword">the</span> evening.</span><br><span class="line">I usually watch TV <span class="keyword">at</span> <span class="keyword">the</span> evening <span class="keyword">with</span> <span class="keyword">my</span> friends.</span><br><span class="line">when i am alone,i don't want <span class="keyword">to</span> watch TV.</span><br><span class="line">maybe ,when only myself,i think <span class="keyword">that</span> watching TV don't bring <span class="keyword">me</span> <span class="keyword">some</span> original happy.</span><br><span class="line">i think <span class="keyword">that</span> watching TV <span class="keyword">is</span> seeing <span class="keyword">some</span> famous actors <span class="keyword">and</span> <span class="keyword">some</span> humorous actors acts happy shows.</span><br><span class="line">so i am <span class="keyword">not</span> <span class="keyword">every</span> <span class="built_in">day</span>  <span class="keyword">or</span> usually <span class="keyword">or</span> <span class="keyword">from</span> <span class="built_in">time</span> <span class="keyword">to</span> <span class="built_in">time</span> <span class="keyword">or</span> never ,no ,also ,i am <span class="keyword">not</span> <span class="keyword">in</span> <span class="keyword">the</span> evening ,<span class="keyword">in</span> <span class="keyword">the</span> morning <span class="keyword">or</span> <span class="keyword">in</span> <span class="keyword">the</span> afternoon,<span class="keyword">or</span> <span class="keyword">on</span> weekends, <span class="keyword">and</span> so <span class="keyword">on</span>.</span><br><span class="line">long long ago ,when i was a child,</span><br><span class="line">i like watching TV.</span><br><span class="line">may be ,<span class="keyword">at</span> <span class="keyword">the</span> childhood,<span class="keyword">in</span> <span class="keyword">the</span> tv <span class="keyword">that</span>'s world, have many imagine <span class="keyword">and</span> interesting something <span class="keyword">or</span> someone fascinated <span class="keyword">my</span> eyes.</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>What kind of TV programs(节目) do you like ? Why?</li>
</ol>
<blockquote>
<p>Hints:</p>
</blockquote>
<p><strong><em>news -&gt; learn what’s happening around the world …</em></strong><br><strong><em>talk shows(访谈节目) -&gt; know more about the life of famous people …</em></strong><br><strong><em>variety shows (综艺节目) -&gt; funny,interesting ,relaxing(令人放松的)  …</em></strong></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">i like variety shows, <span class="keyword">because </span><span class="keyword">it's </span>funny ,interesting <span class="keyword">and </span>relaxing.</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>What will you consider(考虑) when buying an appliance(电器)？</li>
</ol>
<blockquote>
<p>Hints:</p>
</blockquote>
<p><strong><em>brands (what brands?) / prices (how much?) / warranty(how long?) 、 delivery (free or not?) ….</em></strong></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">i have <span class="keyword">not</span> enough money.</span><br><span class="line">due <span class="keyword">to</span> i have <span class="keyword">not</span> work.</span><br><span class="line">recently,i interviews four <span class="keyword">times</span>.</span><br><span class="line">when <span class="keyword">the</span> interviews process ending, i feel <span class="keyword">my</span> heart <span class="keyword">as</span> <span class="keyword">if</span> <span class="keyword">it</span> <span class="keyword">is</span> slowly sinking.</span><br><span class="line">even though,i look like a child, <span class="keyword">but</span> now,i am <span class="number">21</span> years old.</span><br><span class="line">i work <span class="keyword">from</span> programing. <span class="keyword">in</span> short programing <span class="keyword">is</span> <span class="keyword">it</span>.</span><br><span class="line">so ,<span class="keyword">in</span> <span class="keyword">the</span> short term ,i will <span class="keyword">not</span> consider buy <span class="keyword">some</span> expensive appliance.</span><br><span class="line">except <span class="keyword">for</span> example, a small oscillating fan ,because ,<span class="keyword">the</span> season <span class="keyword">is</span> summer,<span class="keyword">the</span> <span class="built_in">day</span> <span class="keyword">and</span> <span class="keyword">the</span> evening <span class="keyword">is</span> hot. when i have a small oscillating,i feel <span class="keyword">my</span> hand ,foot,hair,leg <span class="keyword">and</span> so <span class="keyword">on</span>,<span class="keyword">is</span> ,emm,<span class="keyword">as</span> <span class="keyword">if</span> a fish live <span class="keyword">the</span> water,especially,when <span class="keyword">after</span> bath shower <span class="keyword">and</span> wash <span class="keyword">my</span> clothes <span class="keyword">and</span> open <span class="keyword">my</span> small oscillating fan,<span class="keyword">the</span> oscillating fan bring <span class="keyword">me</span> <span class="keyword">is</span> this feeling.</span><br></pre></td></tr></table></figure>

<p>In this lesson,you’ve learned</p>
<ol start="4">
<li>words about “buying appliances”</li>
</ol>
<blockquote>
<p>warranty<br>best-seller<br>offer<br>delivery</p>
</blockquote>
<ul>
<li>commonly used expressions for buying appliances</li>
</ul>
<blockquote>
<p>How long is the warranty for this TV?<br>Do you offer free delivery?</p>
</blockquote>
<ul>
<li>how to talk about TV and other appliances</li>
</ul>
<h2 id="Further-Study"><a href="#Further-Study" class="headerlink" title="Further Study"></a>Further Study</h2><h3 id="Listen-and-Learn"><a href="#Listen-and-Learn" class="headerlink" title="Listen and Learn"></a>Listen and Learn</h3><blockquote>
<p>range hood 抽油烟机<br>electric oven 电烤箱<br>dishwasher 洗碗机</p>
</blockquote>
<ul>
<li>The soybean milk machine(豆浆机)/ juicer(果汁机) has excellent features such as low cost, complete function,convenient to use and so on.</li>
</ul>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>Synchronized和ReentrantLock</title>
    <url>/2020/05/06/%E9%9D%A2%E8%AF%95/Synchronized%E5%92%8CReentrantLock/</url>
    <content><![CDATA[<p>观看笔记: <a href="https://www.bilibili.com/video/BV1dE411r7iy?from=search&amp;seid=2860602863323633916" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1dE411r7iy?from=search&amp;seid=2860602863323633916</a>  </p>
<p>java当中的锁，比如说ReentrantLock，还有Synchronized关键字；  </p>
<p>重点：sync(synchronized关键字原理)  </p>
<p>java体系最难的技术点之一：sync；（涉及到JVM，C++源码等）  </p>
<ul>
<li>java的对象布局</li>
<li>sync底层工作的原理</li>
<li>sync优化原理</li>
<li>学习方法-学习的深度</li>
</ul>
<h2 id="java头的信息分析"><a href="#java头的信息分析" class="headerlink" title="java头的信息分析"></a>java头的信息分析</h2><p><font style="color:orange;font-weight:bold;">首先为什么要去研究java的对象头？</font>  </p>
<p><font style="color:orange;font-weight:bold;">这里截取一张Hotspot的源码当中的注释</font></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> 64 bits;</span><br><span class="line"><span class="string">//</span> <span class="params">--------</span></span><br><span class="line"><span class="string">//</span> unused: 25 hash<span class="function">:31</span> <span class="params">---</span>&gt;| unused<span class="function">:1</span>   age<span class="function">:4</span>   biased_lock<span class="function">:1</span> lock<span class="function">:2</span> <span class="params">(normal object)</span></span><br><span class="line"><span class="string">//JavaThread</span>*<span class="function">:54</span> epoch<span class="function">:2</span> unused<span class="function">:1</span> age<span class="function">:4</span> biased_lock<span class="function">:1</span> lock<span class="function">:2</span> <span class="params">(biased object)</span></span><br><span class="line"><span class="string">//</span> PromotedObject*<span class="function">:61</span> <span class="params">-----------------</span>&gt;| promo_bits<span class="function">:3</span> <span class="params">-----</span>&gt; <span class="params">(CMS promoted object)</span></span><br><span class="line"><span class="string">.//</span> size<span class="function">:64-------------------------------------------------</span>&gt;| <span class="params">(CMS free block)</span></span><br><span class="line"><span class="string">//</span></span><br></pre></td></tr></table></figure>

<p>这张图换成人可读的表格如下：  </p>
<table>
    <tr>
        <td colspan="3">Object Header(128 bits)</td>
    </tr>
    <tr>
        <td>Mark Word(64 bits)</td>
        <td>Klass Word(64 bits)</td>
        <td></td>
    </tr>
        <tr>
        <td>unused:25 | identity_hashcode:31 | unused:1 | age:4 | biased_lock:1 | lock:2 </td>
        <td>OOP to metadata object</td>
        <td style="color:red;font-weight:bolder;">无锁</td>
    </tr>
    <tr>
        <td>thread:54 |       epoch:2        | unused:1 | age:4 | biased_lock:1 | lock:2 </td>
        <td>OOP to metadata object</td>
        <td style="color:red;font-weight:bolder;">偏向锁</td>
    </tr>
      <tr>
        <td>ptr_to_lock_record:62                                                    | lock:2 </td>
        <td>OOP to metadata object</td>
        <td style="color:red;font-weight:bolder;">轻量锁</td>
    </tr>
    <tr>
        <td>ptr_to_heavyweight_monitor:62                                                    | lock:2 </td>
        <td>OOP to metadata object</td>
        <td style="color:red;font-weight:bolder;">重量锁</td>
    </tr>
    <tr>
        <td>                                                    | lock:2 </td>
        <td>OOP to metadata object</td>
        <td style="color:red;font-weight:bolder;">gc</td>
    </tr>
</table>

<p>意思是：<font style="color:orange;font-weight:bold;">java的对象头在对象的不同状态下会有不同的表现形式。</font>  </p>
<p>主要有三种状态：<br><font style="color:orange;font-weight:bold;">无锁状态、加锁状态、gc标记状态。</font>  </p>
<p>那么可以理解 <font style="color:orange;font-weight:bold;">java当中的取锁</font>  其实可以理解为是：<font style="color:orange;font-weight:bold;">给对象上锁，也就是改变对象头的状态。</font>  </p>
<p><font style="color:orange;font-weight:bold;">如果上锁成功则进入同步代码块。</font>  </p>
<p>但是java当中的锁有分为很多种，从上图可以看出大体分为：<font style="color:orange;font-weight:bold;">偏向锁、轻量锁、重量锁</font>三种锁状态。  </p>
<p><font style="color:orange;font-weight:bold;">这三种锁的效率完全不同。</font>  </p>
<p>关于效率的分析会在下文分析，只有合理的设计代码，才能合理的利用锁</p>
<p>那么这三种锁的原理是什么？所以，需要先研究这个 <font style="color:orange;font-weight:bold;">对象头</font>  </p>
<h2 id="java对象的布局以及对象头的布局"><a href="#java对象的布局以及对象头的布局" class="headerlink" title="java对象的布局以及对象头的布局"></a>java对象的布局以及对象头的布局</h2><ol>
<li><strong>JOL来分析java的对象布局</strong></li>
</ol>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        lockTest();<span class="comment">//问题：现在当前想要对该lockTest方法做同步处理</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设此时lockTest存在线程安全问题；如何用最简单的方式来进行处理lockTest方法的同步</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lockTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"xxxx"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>处理方式一：（加synchronized关键字）  </p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="title">com.lock;</span></span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line"></span><br><span class="line">    static L l=<span class="keyword">new</span> L();//为lock新建的专门的一个类；由于lockTest方法是静态的；该静态方法当中需要使用到该l 对象，所以将其置为static</span><br><span class="line"></span><br><span class="line">    static ReentrantLock reentrantLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">        lockTest();//问题：现在当前想要对该lockTest方法做同步处理</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //假设此时lockTest存在线程安全同步问题；如何处理</span><br><span class="line">    public static void lockTest()&#123;</span><br><span class="line">        //<span class="keyword">synchronized</span>()当中需要一个对象；可以传很多；</span><br><span class="line">        //比如说在非静态方法当中可以传this；</span><br><span class="line">        //如果是静态方法则可以传Test.class；也可以进行对对象加锁；</span><br><span class="line">        //更多的时候是建一个专门用来的lock类L,传入该类的对象l，给该l上锁；</span><br><span class="line">        //valatile不能实现同步；valatile只能用来保证访问时的可见性以及不乱去执行，与同步没有很大的关系；</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">        java 并发编程入门级别的问题：  </span><br><span class="line">        <span class="number">1</span>. java当中有哪些锁？</span><br><span class="line">        <span class="number">2</span>. <span class="keyword">synchronized</span>(l)&#123;System.<span class="keyword">out</span>.println(<span class="string">"xxxx"</span>);&#125; 当前该代码锁的是什么？锁的是代码块？还是锁l对象？</span><br><span class="line"></span><br><span class="line">        java当中的锁：比如说公平锁、非公平锁、读写锁、共享锁、互斥锁、自旋锁、偏向锁、轻量级锁、重量级锁....</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span>(l)&#123;System.<span class="keyword">out</span>.println(<span class="string">"xxxx"</span>);&#125; 这段代码本质上的语义是什么?<span class="keyword">synchronized</span>关键字锁住的是代码块还是l该对象？<span class="keyword">synchronized</span>此时锁的是该l 对象；</span><br><span class="line">        给该l 对象进行上锁；</span><br><span class="line">        该<span class="keyword">synchronized</span>是如何给该 l 对象进行上锁的？</span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">        reentrantLock与<span class="keyword">synchronized</span>都是锁，但是这两把锁是有区别的；</span><br><span class="line">        <span class="keyword">synchronized</span>是java的内置锁；</span><br><span class="line">        而reentrantLock是JUC并发包下提供的锁；</span><br><span class="line">        这两个锁都能完成同样的功能：让锁之间的代码块进行同步执行，只有一个线程去访问；</span><br><span class="line">        当前问题在于：如果采用ReentrantLock调用lock()方法的时候，很容易理解为：就是给这个<span class="keyword">new</span>出来的reentrantLock对象去上锁；</span><br><span class="line">        那么从代码当中如何来理解呢？</span><br><span class="line">        因为在reentrantLock这个对象当中，有一个变量:</span><br><span class="line">        public void lock()&#123;</span><br><span class="line">            sync.lock();</span><br><span class="line">            /**</span><br><span class="line">            sync.lock();<span class="comment">--&gt;</span></span><br><span class="line">            <span class="keyword">abstract</span> static class Sync extends AbstractQueueSynchronizer&#123;</span><br><span class="line">                <span class="keyword">abstract</span> void lock();</span><br><span class="line">            &#125;<span class="comment">---&gt;</span></span><br><span class="line">            static final class FairSync extends Sync&#123;</span><br><span class="line">                final void lock()&#123;</span><br><span class="line">                    acquire(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">-----&gt;</span></span><br><span class="line">            public final void acquire(int arg)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!tryAcquire(arg)&amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE),arg))</span><br><span class="line">                selfInterrupt();</span><br><span class="line">            &#125;<span class="comment">----&gt;</span></span><br><span class="line">            //<span class="keyword">protected</span> boolean tryAcquire(int arg)&#123;</span><br><span class="line">            //    throw <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">            //&#125;</span><br><span class="line">            <span class="keyword">protected</span> final boolean tryAcquire(int acquires)&#123;</span><br><span class="line">                final Thread current = Thread.currentThread();</span><br><span class="line">                int c = getState();</span><br><span class="line">                <span class="keyword">if</span>(c==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">                        //compareAndSetState CAS操作</span><br><span class="line">                        //即将getState()<span class="comment">---&gt;private volatile int state;当中的state变量，如果取值为0则改为1；</span></span><br><span class="line">                        compareAndSetState(<span class="number">0</span>,acquires))&#123;</span><br><span class="line">                            setExclusiveOwnerThread(current);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(current == getExclusiveOwnerThread())&#123;</span><br><span class="line">                    int nextc = c+ acquires;</span><br><span class="line">                    <span class="keyword">if</span>(nextc &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                        throw <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">                    setState(nextc);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            */</span><br><span class="line">        &#125;</span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        //整个reentrantLock代码reentrantLock.lock()该行代码的本质意义即为去改变reentrantLock对象当中的一个属性叫做state；将其改成<span class="number">1</span>；如果能够修改属性取值为<span class="number">1</span>成功说明上锁成功；如果没有修改属性取值为<span class="number">1</span>成功则上锁失败</span><br><span class="line">        //所以说给该对象reentrantLock加锁，那么该对象reentrantLock当中就需要有一个标识，标识存在的含义即是否加锁成功；</span><br><span class="line">        reentrantLock.lock();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"zzzzzz"</span>);</span><br><span class="line">        reentrantLock.unlock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span>(l)&#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"xxxx"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






























































































































]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>全面深入讲解MySQL数据库优化</title>
    <url>/2020/04/24/%E9%9D%A2%E8%AF%95/%E5%85%A8%E9%9D%A2%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;seid=13531213796559959972" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1fJ41127Rj?from=search&amp;seid=13531213796559959972</a>  </p>
<p>本课程作为MySQL高级课程，主要讲解了：  </p>
<ul>
<li>MySQL中的视图/存储过程/触发器/索引等对象的使用</li>
<li>常见的SQL语句优化的技巧</li>
<li>应用优化</li>
<li>数据库优化</li>
<li>数据库日志</li>
</ul>
<p>等方面的知识，并通过综合案例，对课程中的知识进行一个整合应用。  </p>
<p>本课程旨在通过MySQl高级部分内容，可以在满足现有业务需求基础上，对MySQL底层的体系结构，及底层的优化有一个深入的理解，对系统的整体性能进行提升。  </p>
<h2 id="课程内容介绍"><a href="#课程内容介绍" class="headerlink" title="课程内容介绍"></a>课程内容介绍</h2><blockquote>
<p>Mysql高级-day01</p>
</blockquote>
<p>MySQL高级课程简介</p>
<ol>
<li>Linux系统安装MySQL</li>
<li>索引</li>
<li>视图</li>
<li>存储过程和函数</li>
<li>触发器</li>
</ol>
<h3 id="MySQL高级课程简介"><a href="#MySQL高级课程简介" class="headerlink" title="MySQL高级课程简介"></a>MySQL高级课程简介</h3><table>
    <tr>
      <th>序号</th>
      <th>Day01</th>
      <th>Day02</th>
      <th>Day03</th>
      <th>Day04</th>
    </tr>
    <tr>
      <td>1</td>
      <td>Linux系统安装MySQL</td>
      <td>体系结构</td>
      <td>应用优化</td>
      <td>MySQL常用工具</td>
    </tr>
    <tr>
      <td>2</td>
      <td>索引</td>
      <td>存储引擎</td>
      <td>查询缓存优化</td>
      <td>MySQL日志</td>
    </tr>
    <tr>
      <td>3</td>
      <td>视图</td>
      <td>优化SQL步骤</td>
      <td>内存管理及优化</td>
      <td>MySQl主从复制</td>
    </tr>
    <tr>
      <td>4</td>
      <td>存储过程和函数</td>
      <td>索引使用</td>
      <td>MySQL锁问题</td>
      <td>综合案例</td>
    </tr>
    <tr>
      <td>5</td>
      <td>触发器</td>
      <td>SQL优化</td>
      <td>常用SQL技巧</td>
      <td></td>
    </tr>
</table>

<h2 id="Linux上安装MySQL"><a href="#Linux上安装MySQL" class="headerlink" title="Linux上安装MySQL"></a>Linux上安装MySQL</h2><h3 id="下载Linux安装包"><a href="#下载Linux安装包" class="headerlink" title="下载Linux安装包"></a>下载Linux安装包</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span>/<span class="regexp">/dev.mysql.com/downloads</span><span class="regexp">/mysql/</span><span class="number">5.7</span>.html<span class="comment">#downloads</span></span><br></pre></td></tr></table></figure>

<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><ol>
<li>卸载centos中预安装的mysql</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep -i mysql # 查询服务器当中mysql的安装包是否存在，存在则显示出存在安装包的名称</span><br><span class="line"></span><br><span class="line">rpm -e mysql-libs<span class="number">-5.1</span><span class="number">.71</span><span class="number">-1.e16</span>.x86_64 --nodeps # 对已存在的安装包(mysql-libs<span class="number">-5.1</span><span class="number">.71</span><span class="number">-1.e16</span>.x86_64)进行卸载</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>上传mysql的安装包</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">alt + p -------&gt;put E:/tset/MySQL<span class="number">-5.6</span><span class="number">.22</span><span class="number">-1.e16</span>.i686.rpm-bundle.tar（MySQL安装包的目录）</span><br><span class="line"></span><br><span class="line"># 使用SecureCRT远程连接服务器工具，alt+p命令进入sftp模式；再执行put （MySQL安装包的目录）[ 上传 ]</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>解压mysql的安装包</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mkdir mysql</span><br><span class="line"></span><br><span class="line">tar -xvf MySQL-<span class="number">5.6</span>.<span class="number">22</span>-<span class="number">1</span><span class="selector-class">.e16</span><span class="selector-class">.i686</span><span class="selector-class">.rpm-bundle</span><span class="selector-class">.tar</span> -c /root/mysql</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>安装依赖包</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># 安装第三方的依赖库；yum -y 在线安装需连接网络</span><br><span class="line">yum -y install libaio.so<span class="number">.1</span> libgc_s.so<span class="number">.1</span> libstdc++.so<span class="number">.6</span> libncurses.so<span class="number">.5</span> --setopt=protected_multilib=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">yum update listdc++<span class="number">-4.4</span><span class="number">.7</span><span class="number">-4.e16</span>.x86_64 # 更新第三方类包</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>安装mysql-client</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">MySQL-client-5</span><span class="selector-class">.6</span><span class="selector-class">.22-1</span><span class="selector-class">.e16</span><span class="selector-class">.i686</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>安装mysql-server</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">MySQL-server-5</span><span class="selector-class">.6</span><span class="selector-class">.22-1</span><span class="selector-class">.e16</span><span class="selector-class">.i686</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Linux</p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ipconfig</span> <span class="comment"># 查看本机ip地址，内网地址</span></span><br></pre></td></tr></table></figure>

<h2 id="启动及登录MySQL"><a href="#启动及登录MySQL" class="headerlink" title="启动及登录MySQL"></a>启动及登录MySQL</h2><blockquote>
<p>启动mysql命令</p>
</blockquote>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">service mysql status # 查看mysql服务状态</span><br><span class="line">service mysql start # 启动mysql服务</span><br><span class="line">service mysql stop # 停止mysql服务</span><br></pre></td></tr></table></figure>

<blockquote>
<p>登录mysql</p>
</blockquote>
<p>mysql 安装完成之后，会自动生成一个随机密码，并且保存在一个密码文件中：/root/.mysql_secret；  </p>
<blockquote>
<p>查看随机密码</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/root/</span>.mysql_secret</span><br></pre></td></tr></table></figure>

<blockquote>
<p>登录命令</p>
</blockquote>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta"># -u 指的是用户</span></span><br><span class="line"><span class="meta"># -p 指的是该用户所对应的密码</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>登录之后，修改密码命令</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> = <span class="keyword">password</span>(<span class="string">'itcast'</span>);</span><br><span class="line"><span class="comment"># itcast即明文密码</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>授权远程访问</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'itcast'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>防火墙</p>
</blockquote>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">service iptables status # 查看防火墙状态</span><br><span class="line">service iptables stop # 关闭防火墙</span><br></pre></td></tr></table></figure>

<h2 id="索引-概述"><a href="#索引-概述" class="headerlink" title="索引 - 概述"></a>索引 - 概述</h2><p>MySQL官方对索引的定义为：  </p>
<p>索引（index）是帮助MySQL高效获取数据的数据结构（有序）。<br>在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。<br>如下面的示意图所示：  </p>
<p>左边是数据库，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也不是一定物理相邻的）。  </p>
<p>为了加快Col2的查找，可以维护右边所示的二叉查找树，每个结点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找快速后去到相应数据。  </p>
<p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上，索引是数据库中用来提供性能的最常用的工具。  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mspaint</span> <span class="comment"># windows打开画板</span></span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <td>物理地址</td>
    <td>Col1</td>
    <td>Col2</td>
  </tr>
  <tr>
    <td>0x07</td>
    <td>1</td>
    <td>34</td>
  </tr>
  <tr>
    <td>0x56</td>
    <td>2</td>
    <td>77</td>
  </tr>
  <tr>
    <td>0x6A</td>
    <td>3</td>
    <td>5</td>
  </tr>
  <tr>
    <td>0xF3</td>
    <td>4</td>
    <td>91</td>
  </tr>
  <tr>
    <td>0x90</td>
    <td>5</td>
    <td>22</td>
  </tr>
  <tr>
    <td>0x77</td>
    <td>6</td>
    <td>59</td>
  </tr>
  <tr>
    <td>0xD1</td>
    <td>7</td>
    <td>3</td>
  </tr>
</table>

<p>当前该为一张数据库表；在数据库表的左侧展示的是每一条记录的一个物理地址；右侧则是两列；一列字段Col1是序号；Col2字段数据可以认为就是主键数据；数据库表结构有了，接下来查询数据；  </p>
<p>（1）第一种情况：查询主键Col2为34的数据；因为这个时候只存在表，没有设置索引这些方便查询的数据结构；所以这个时候就会在表当中自上而下的进行遍历；这个时候就会去遍历到第一个，发现第一个的主键id，Col2的值就是34；此时即拿到数据；这样的话只需要查询一条记录；而且查询第一条记录就是，那么这样的话查询速度是很快的；这只是第一种情况；  </p>
<p>（2）第二种情况：查询主键Col2 id为91的记录行数据；那么还是需要自上而下从id为34的记录行数据开始遍历；那么第一条记录不是；第二条记录不是；第三条记录也不是；直到第四条记录的时候发现数据行id是91；那么这个时候也就是需要去遍历列表4次，查询4次才能够得到结果；  </p>
<p>（3）第三种情况：查询主键Col2 id为3的记录行数据；这个时候再来看，如果说遍历查询的元素id是3；那么这个时候依然是从上往下进行遍历，一直遍历到列表的最底部；才能将3查找出来；那么这个时候就相当于需要进行一个全表扫描的这样一个操作；对于当前该表当中只有6、7条数据；但是如果在实际开发当中数据量比较大；一张表当中存储了几百万上千万的记录；那么这个时候如果只有表中的记录，而没有索引的话；这个时候就会造成一种现象，在查找的时候从上往下进行整表扫描，所以这种查询效率是非常慢的；  </p>
<p>以上就是第一种情况，即没有建立索引的情况；查询效率很慢；  </p>
<p>下面分析有了索引之后，又是如何进行查找的；<br>此时有了表结构还需要对表结构当中的字段进行建立索引；索引就是一种数据结构；那么此时就可以使用数据结构来表示这种表当中的索引；这里使用一种数据结构二叉树；  </p>
<p>既然是二叉树；那么二叉树当中的第一个结点，也就是34；即根节点；34即作为当前该树状结构的根结点；<br>接下来第二行记录是77；对于二叉树来说，二叉树有一个特点；即当根结点已经存在的时候，再插入下一个结点；则需要将下一个结点的数值与根结点的数值进行比较大小；如果比根结点小则放在左边，称之为生成一个左子树；如果比根结点大则放在右边，称之为生成一个右子树，作为右子树存在；这个时候77是比34要大的，所以放在34的右边，即77为34根结点的一个子节点；<br>接下来第三行是5，需要对5也要进行插入到二叉树该数据结构当中，那么此时也是需要进行与34根结点进行比较的；此时5比34要小；那么则放在根结点34的左边，所以此时34根结点又有一个子节点5；<br>当5插入到二叉树结构当中之后，接着下一行记录91；则首先将91与34根结点进行比较大小；显然91比34要大，则处于根结点34的右边；当前使用的是二叉树的这种数据结构，也就意味着每一个结点最多都只能有2个分支；所以称之为二叉树；所以当此时34根结点已经有了两个分支之后，那么此时91比34大，但是34的右边已经有元素77了，所以这个时候91就需要去和77去进行比较；77与91进行比较，91显然要大，所以放在77的右侧，作为77的一个右子节点存在；<br>接下来是第5行记录数据集22；22比34小，显然要放在根结点的左侧；但是根结点的左侧已经有左子节点也就是5；那么此时22就去与5进行比较，显然22比5大；也就放在5的右边；称为5的右子结点；<br>最后还剩下最后两条记录，一个是59一个是3；快速过一下；59首先和34这个元素进行比较；显然59比34大需要放在34的右侧；然34已经有右子结点77了，那么这个时候59和77进行比较；显然77大于59，那么这个时候就将59放置在77的左侧，叶子结点91的左边，成为77的左子节点；同理最后一个元素，3也是同样的方式；3与34进行比较；显然3比34要小；然此时34是存在有左子节点5的；那么这个时候就将3与5进行比较；显然3比5要小；那么这个时候；就把3放在5的左侧；成为5的左子节点，叶子结点22的左侧；<br>此时到此为止二叉树已经构建完毕；二叉树构建完毕之后再来进行分析；构建了一棵二叉树之后就能够提高查询效率吗？<br>（我认为；在二叉树一定的深度下，二叉树依然会存在查询效率慢的情况；）<br>二叉树构建好了之后，再来进行搜索；如果按照刚才的查询情况；先进行搜索34这一数值；搜索二叉树；那么就需要到索引的结构二叉树的数据结构当中来进行搜索；在进行二叉树搜索的时候，是从根结点处开始进行查询匹配数值；即树状结构当中最顶层的这一节点即为根结点；最底层的结点，即3、22、59、91这四个结点称之为叶子结点；那么二叉树的搜索是从根节点开始进行搜索的；走根结点34；这个时候就已经将34查询到了，那么这个时候就可以直接进行返回即可；但是如果这一块当中查询的并不是34而是3；那么此时仍然先会去搜索根结点34，将要查询搜索的值3去与根节点34进行比较；发现3比根结点要小；所以此时就会去根结点的左侧，即左子树当中去进行查找3；二叉树当中根结点的左边的称之为左子树；右边则称之为右子树；那么在左子树当中通过3去跟根结点的左子节点5进行比较，那么此时5比3要大；所以紧接着，让3去跟结点5的左子节点3去进行比较；所以在这个时候就找到了3这个元素；<br>而找到了3之后，二叉树的这种数据结构是如何关联到表当中具体行数当中的具体数据的呢？<br>这个时候就需要看笔记当中提到的一句话：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</span><br></pre></td></tr></table></figure>

<p>那也就意味着，二叉树这种数据结构当中的每一个结点都是需要指向具体表当中具体行数的具体数据；<br>那么从刚才的查询规律当中从上而下进行查找3，则从根结点34到左子节点5，再从5到5的左子节点3查找到了3这一元素的指向/引用即可找到在具体某表当中的具体某一行的数据；那么这样的话就查找到了数据；  </p>
<table>
  <tr>
    <td>物理地址</td>
    <td>Col1</td>
    <td>Col2</td>
  </tr>
  <tr>
    <td>0x07</td>
    <td>1</td>
    <td>34</td>
  </tr>
  <tr>
    <td>0x56</td>
    <td>2</td>
    <td>77</td>
  </tr>
  <tr>
    <td>0x6A</td>
    <td>3</td>
    <td>5</td>
  </tr>
  <tr>
    <td>0xF3</td>
    <td>4</td>
    <td>91</td>
  </tr>
  <tr>
    <td>0x90</td>
    <td>5</td>
    <td>22</td>
  </tr>
  <tr>
    <td>0x77</td>
    <td>6</td>
    <td>59</td>
  </tr>
  <tr>
    <td>0xD1</td>
    <td>7</td>
    <td>3</td>
  </tr>
</table>

<blockquote>
<p>分析：没有建立索引的表与建立了索引的表当中，建立了索引之后性能的一个提升；</p>
</blockquote>
<ul>
<li><p>没有建立索引的表：在没有建立索引的情况下，如果是要进行查询数据元素3；那么则需要把整张表当中所有的数据都需要进行遍历一遍即全表扫描，直到找到3这个id数据；  </p>
</li>
<li><p>建立了索引的表：如果是在建立了索引的这种情况之下；那么同样还是查找元素3；只需要查找第一次34；第二次5；第三次3即可；三次即可；那么这样的话这个时候通过索引由二叉树这种数据结构实现的话就不再需要去遍历整张表的数据了；通过二叉树这种数据结构就可以快速的定位到3这个查询的数据元素；那么这就是索引；索引的目的即在于快速的来查找数据；  </p>
</li>
</ul>
<h2 id="索引-优势和劣势"><a href="#索引-优势和劣势" class="headerlink" title="索引 - 优势和劣势"></a>索引 - 优势和劣势</h2><blockquote>
<p>优势<br>1） 类似于书籍的目录索引，提高数据检索的效率，降低数据库的IO成本；<br>2） 通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗；  </p>
</blockquote>
<blockquote>
<p>劣势<br>1）实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，索引列也是要占用空间的；（并不放在内存当中而是放在磁盘当中，索引占用磁盘空间）<br>2）虽然索引大大提高了查询效率，同时却也降低了更新表的速度，如对表进行INSERT、UPDATE、DELETE（都需要对索引进行维护，也就是相关实现该索引的数据结构当中存储的数据也要进行变动）。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会因为更新所带来的的键值变化后的索引信息。（所以索引的字段并不是越多越好也会影响到性能）  </p>
</blockquote>
<h2 id="索引-索引结构"><a href="#索引-索引结构" class="headerlink" title="索引 - 索引结构"></a>索引 - 索引结构</h2><p>索引是在MySQL的存储引擎层中实现的，而不是在服务器层实现的。  </p>
<p>所以每种存储引擎的索引都不一定完全相同；也不是所有的存储引擎都支持所有的索引类型。  </p>
<p>MySQL目前提供了以下4中索引：  </p>
<ul>
<li>BTREE索引：最常见的索引类型，大部分索引都支持B树索引；</li>
<li>HASH索引：只有Memory引擎支持，使用场景简单（刚刚看了下我当前MySQL数据库现在InnoDB也支持HASH哦）；</li>
<li>R-tree索引（空间索引）：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少，不做特别介绍；</li>
<li>Full-text（全文索引）：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从MySQL5.6版本开始支持全文索引；  </li>
</ul>
<p>这个统计应该也有些时候了；不是一定正确的哦；需要结合当前不同版本的MySQL来说明；我还是贴一下吧；  </p>
<h3 id="MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持"><a href="#MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持" class="headerlink" title="MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持"></a>MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持</h3><table>
  <tr>
    <th>索引</th>
    <th>InnoDB引擎</th>
    <th>MyISAM引擎</th>
    <th>Memory引擎</th>
  </tr>
  <tr>
    <td>BTREE索引</td>
    <td>支持</td>
    <td>支持</td>
    <td>支持</td>
  </tr>
  <tr>
    <td>HASH索引</td>
    <td>不支持</td>
    <td>不支持</td>
    <td>支持</td>
  </tr>
  <tr>
    <td>R-tree索引</td>
    <td>不支持</td>
    <td>支持</td>
    <td>不支持</td>
  </tr>
  <tr>
    <td>Full-text索引</td>
    <td>5.6版本之后支持</td>
    <td>支持</td>
    <td>不支持</td>
  </tr>
</table>

<p>平常所说的索引，如果没有特别指明，都是指B+树（多路搜索树，并不一定是二叉的）结构组织的索引。<br>其中聚集索引、复合索引、前缀索引、唯一索引默认都是使用B+tree树索引，统称为索引。  </p>
<h2 id="索引-索引结构-BTREE"><a href="#索引-索引结构-BTREE" class="headerlink" title="索引 - 索引结构 - BTREE"></a>索引 - 索引结构 - BTREE</h2><p>BTree又叫做多路平衡搜索树，一棵 m 叉的 BTree 特性如下：  </p>
<ul>
<li>树中每个结点最多包含 m 个孩子；</li>
<li>除根结点与叶子结点外，每个结点至少有[ cell ( m / 2 ) ]（cell向上取整）个孩子；</li>
<li>若根结点不是叶子结点，则至少有两个孩子；</li>
<li>所有的叶子结点都在同一层；</li>
<li>每个非叶子结点由 n 个 key 与 n + 1 个指针组成，其中[ cell ( m / 2 ) -1 ] &lt; = n &lt; =  m - 1</li>
</ul>
<p>（对于二叉树来说，树中的每个结点最多有2个分支）  </p>
<p>以5叉BTree为例（当前根结点下最多有5个分支，即每个结点下最多包含5个孩子），key的数量：公式推导[ cell ( m / 2 ) - 1 ] &lt; = n &lt; = m-1 ；所以 2 &lt; = n &lt; = 4。<br>当n&gt;4时，中间节点分裂到父节点，两边结点分裂。<br>插入 C N G A H E K Q M F W L T Z D P R X Y S 数据为例；<br>1）插入前4个字母C N G A；  </p>
<table border="1">
  <tr>
    <td>A</td>
    <td>C</td>
    <td>G</td>
    <td>N</td>
  </tr>
</table>

<p>（按照26个字母排队顺序，字母A在C前，C排在G前，G排在N前的顺序进行排列）  </p>
<p>2）插入H ，n &gt; 4，中间元素G字母向上分裂到新的结点；  </p>
<table border="1">
  <tr>
    <td>A</td>
    <td>C</td>
    <td>G</td>
    <td>H</td>
    <td>N</td>
  </tr>
</table>

<p>所以演变成中间元素G字母向上分裂到新的结点，即G分裂到父节点；</p>
<table border="1">
<tr>
     <td colspan="5" style="text-align:center">G</td>
  </tr>
  <tr>
    <td>A</td>
    <td>C</td>
    <td></td>
    <td>H</td>
    <td>N</td>
  </tr>
</table>

<br>

<table border="1">
  <tr>
     <td></td>
    <td></td>
      <td></td>
     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">G</td>
     <td></td>
     <td></td>
    <td></td>
  </tr>
  <tr>
     <td></td>
    <td></td>
     <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
    <td></td>
     <td></td>
    <td></td>
  </tr>
  <tr>
    <td colspan="8"></td>
  </tr>
  <tr>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C</td>
    <td></td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span> N</td>
  </tr>
  <tr>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
  </tr>
</table>

<p>新插入的H结点会在元素G之后，那么排序也就是 A C G H N 这个样子的一个排序；那么此时的中间的结点就是G元素了；那么按照规则，当n&gt;4时，中间节点分裂到父节点；此时的G元素结点就将会进行一次分裂；分裂至父节点（H插入至BTree则G分裂至父节点）；而此时两边结点进行一次分裂；也就是原本的中间元素中间节点G左边的A、C以及右边的（新插入的）H、N就将会被分裂成父节点G的两边结点；左边的A、C分裂至父节点G的左子节点；右边的H、N分裂至父节点G的右子结点；  </p>
<p>接下来继续进行插入操作；插入元素E；<br>插入的E首先进行跟根结点G进行比较前后顺序；比较完成之后，E应该是在根结点G的排位在前的；所以应该被放在根结点G的左侧；也就是结点A、C该侧，A、C、E这三个元素也是需要进行排出一个顺序来的，那么也就是A、C、E这样的一个顺序排列放置；插入的是左边；由于左边元素未构成5个，所以不做任何的（分裂）变化等；  </p>
<p>接下来再继续插入元素K；<br>在K插入元素的时候就需要拿G与K元素的前后排位顺序进行比较，K的排位顺序比G大，所以插入到根结点G的右侧，也就是H、N所在该侧；插入的是右边，即插入时也需要与H、N这两个元素相进行比较排位顺序，也就是K元素插入到H、N这两个元素的中间；那么此时右侧的元素未构成5个所以不作任何变化；  </p>
<p>接下来继续插入Q；<br>插入Q也是需要与根节点G相进行比较排位顺序的；得出Q是在G之后，那么就将Q放在G根节点的右侧，然后将Q进行与节点元素H、K、N相进行比较；得到排列顺序H、K、N、Q这样一个排列顺序，当然此时仍然不需要做出（分裂）变化；因为此时n并没有超过4；只有当n超过4的时候才会发生分裂的变化；分叉小于等于4的情况下并不做任何的分裂改变只进行结点元素间的大小排位；  </p>
<p>在此之前一直在说分裂；当前已经分裂过一次；也就是A、C、G、H、N的时候进行将G分裂至父节点；A、C结点与H、N结点进行两边结点的分裂；并且插入了三个新的元素E、K、Q；  </p>
<p>此时需要说明的是：  </p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">每个非叶子结点由 n 个 <span class="type">key</span> 与 n + <span class="number">1</span> 个指针组成，其中[ cell( m / <span class="number">2</span>) <span class="number">-1</span> ] &lt; = n &lt; = m<span class="number">-1</span></span><br></pre></td></tr></table></figure>

<p>n+1个指针值的就是每个结点下都有两个方块，这两个方块都是指针存储区域；<br>指针的含义：当进行插入一个元素的时候，比如说插入元素E；当插入E元素的时候会进行与根节点G进行一个前后顺序排位的一个对比；如果E比G要小；那么E元素就需要放在G的左侧，指向左侧；成为根结点当中的左子节点当中的一个；那么这个时候就由G结点的左指针指向左子节点的方向；通过左边的这个指针指向左边的这个数据块；小于G那么这个指针就指向的是小于G的这个数据块（也就是左侧的左子结点）；大于G那么指向的就是大于G的这个数据块（也就是右侧的右子结点）；  </p>
<p>即</p>
<table border="1">
  <tr>
    <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">G</td>
     <td></td>
    <td></td>
     <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
  </tr>
  <tr>
    <td colspan="11"></td>
  </tr>
  <tr>
    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C<span style="margin-left:5px;margin-right:5px;"></span> E</td>
    <td></td>
    <td></td>
    <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> N <span style="margin-left:5px;margin-right:5px;"></span> Q</td>
  </tr>
  <tr>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
  </tr>
</table>

<p>接下来继续插入M元素；M与G根结点相进行比较，应该是属于在G的后面的；所以应该排放在G的右侧；通过G的右指针指向右边的数据块；M插入进来之后，应该要介于K和N之间；也就是说此时G的右子结点当中的排列顺序为H、K、M、N、Q这样一个排列顺序；这个时候就需要将M插入到K和N之间；但是当M插入到K和N之间之后，此时右子结点当中的元素已经超过了4个，即5个了；超过4个元素那么此时就要发生分裂变化，M结点刚好是中间节点；即会要发生中间节点（新插入的元素）M结点元素最终需要向上分裂到G父节点当中去，以及同时左右两边的元素H、K以及H、Q需要分裂变化成两块；  </p>
<p>问题：明白没有？小朋友？<br>答：明白了！(ಥ_ಥ)  </p>
<p>经过分裂之后再来看其指针；那么根结点当中的三个指针分别指的是；第一个指针指的是小于根节点当中的G元素则指针指向左侧第一个数据元素块A、C、E；第二个指针，则因为根节点当中存在两个元素；所以中间这个第二个指针用于大于根节点当中的G元素而小于根节点当中的M元素则指向中间的H、K的这个数据块；最后根节点当中的第三个指针用于大于根节点当中M元素的指向第三个数据元素块即N、Q；  </p>
<p>问题：明白？小朋友？<br>答：明白了！o(ﾟДﾟ)っ！  </p>
<p>当前为插入M的数据结构；  </p>
<table border="1">
  <tr>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">G<span style="margin-left:5px;margin-right:5px;"></span> M</td>
     <td></td>
    <td></td>
     <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
  </tr>
  <tr>
    <td colspan="14"></td>
  </tr>
  <tr>
    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C<span style="margin-left:5px;margin-right:5px;"></span> E</td>
    <td></td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K
    </td>
    <td></td>
    <td></td>
      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">
    N <span style="margin-left:5px;margin-right:5px;"></span> Q</td>
    
  </tr>
  <tr>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
    <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
  </tr>
</table>

<p>当前M插入完成之后，继续插入F、W、L、T这四个数据元素；<br>那么此时插入F、W、L、T这四个数据元素时是不需要进行分裂变化的；因为当这四个元素插入进来之后，各个数据块当中的key 结点都没有超过4；所以是不需要进行分裂变化处理的；  </p>
<table border="1">
  <tr>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">G<span style="margin-left:5px;margin-right:5px;"></span> M</td>
     <td></td>
    <td></td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
  </tr>
  <tr>
    <td colspan="18"></td>
  </tr>
  <tr>
    <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C<span style="margin-left:5px;margin-right:5px;"></span> E<span style="margin-left:5px;margin-right:5px;"></span> F</td>
    <td></td>
    <td></td>
    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L
    </td>
    <td></td>
    <td></td>
      <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">
    N <span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span> T<span style="margin-left:5px;margin-right:5px;"></span> W</td>
    
  </tr>
  <tr>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
    <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
  </tr>
</table>

<p>上述F、W、L、T这四个元素插入完成之后，接着插入元素Z；<br>插入Z的时候，首先会进行与根节点的G和M相进行比较；Z元素比G、M都要大；所以就由根结点的第三个指针指向第三个数据块，也就是N、Q、T、W；走向第三个数据块时又会与第三个数据块当中的元素相进行比较得到其元素排列顺序N、Q、T、W、Z这样一个排列摆放位置；所以此时将Z插入第三个数据块当中的最后一个位置，当Z元素出现在W元素之后的时候，此时观察第三个数据库块当中的元素个数已经超过了4，即已经成为5个了，那么此时这5个元素当中中间元素需要进行向上分裂，分裂至父节点，然后其左右两边需要分裂成两个数据块；该第三个数据块当中的中间元素为T；T元素此时应当符合条件需要分裂至上一节点父节点当中去；以及T元素在分裂至父节点之前原来两边的结点需要进行分裂成两块也就是N、Q结点以及W、Z结点这两大块进行分裂开来称为单独的结点；</p>
<table border="1">
  <tr>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">G<span style="margin-left:5px;margin-right:5px;"></span> M<span style="margin-left:5px;margin-right:5px;"></span> T</td>
     <td></td>
    <td></td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
  </tr>
  <tr>
    <td colspan="20"></td>
  </tr>
  <tr>
    <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C<span style="margin-left:5px;margin-right:5px;"></span> E<span style="margin-left:5px;margin-right:5px;"></span> F</td>
    <td></td>
    <td></td>
    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L
    </td>
    <td></td>
    <td></td>
      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">
    N <span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span> 
    </td>
    <td></td>
<td colspan="3" style="text-align:center;background-color:lightblue;color:black;">
    W<span style="margin-left:5px;margin-right:5px;"></span> Z</td>
    
  </tr>
  <tr>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
    <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
  </tr>
</table>

<p>当元素Z插入完成之后，接下来进行插入元素D；<br>元素D和根结点当中的G、M、T相比，显然是都小于这三者的；所以由根结点当中的第一个指针进行指向第一个数据块，也就是A、C、E、F这个数据块当中来；并且D元素需要进行与数据块元素当中的A、C、E、F这四个元素需要进行比较排序顺序大小；即通过排序顺序可得A、C、D、E、F；插入进来之后，此时该数据块当中的key元素大于4个了，即出现了5个；那么此时就需要将该数据块元素当中的那个中间元素（D作为该数据块当中的中间元素存在），也就是刚刚新插入的元素D进行向上分裂至父节点G、M、T当中去，且分裂至父节点的元素D也需要与G、M、T进行一个排序，排序得到D、G、M、T这样一个排列顺序；那么此时分裂至父节点的元素D的两边的元素同样也需要进行分裂成两个结点；即A、C与E、F进行分裂开来；<br>最终出现的数据结构：  </p>
<table border="1">
  <tr>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span> G<span style="margin-left:5px;margin-right:5px;"></span> M<span style="margin-left:5px;margin-right:5px;"></span> T</td>
     <td></td>
    <td></td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
  </tr>
  <tr>
    <td colspan="22"></td>
  </tr>
  <tr>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C
    </td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>
    <td></td>
    <td></td>
    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L
    </td>
    <td></td>
    <td></td>
      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">
    N <span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span> 
    </td>
    <td></td>
<td colspan="3" style="text-align:center;background-color:lightblue;color:black;">
    W<span style="margin-left:5px;margin-right:5px;"></span> Z</td>
    
  </tr>
  <tr>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
    <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
  </tr>
</table>

<p>当元素D插入完成之后，接着进行插入元素P、R、X、Y；<br>插入P、R、X、Y时并不需要进行相应的变化分裂；因为插入到数据块当中元素key并没有满足 &gt; 4 的这样一个条件；所以并不需要做出分裂；  </p>
<table border="1">
  <tr>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span> G<span style="margin-left:5px;margin-right:5px;"></span> M<span style="margin-left:5px;margin-right:5px;"></span> T</td>
     <td></td>
    <td></td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
  </tr>
  <tr>
    <td colspan="26"></td>
  </tr>
  <tr>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C
    </td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>
    <td></td>
    <td></td>
    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L
    </td>
    <td></td>
    <td></td>
      <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">
    N<span style="margin-left:5px;margin-right:5px;"></span> P<span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span> R</td>
    <td></td>
<td colspan="5" style="text-align:center;background-color:lightblue;color:black;">
    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>
    
  </tr>
  <tr>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
    <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
  </tr>
</table>

<p>当插入元素P、R、X、Y这四个元素之后，接下来进行插入最后一个元素S；<br>S首先和根结点当中的是个元素D、G、M、T进行比较；显然介于M与T之间；即大于M而小于T这样一个范围；从而使得根结点的第四个指针指向第四个数据块，即N、P、Q、R这一个数据块当中；而当S插入到第四个数据块当中首先也是需要进行比较排序顺序大小的；有顺序可得；得到顺序为N、P、Q、R、S这样一个顺序排列；将S插入到该数据块当中来；此时第四个数据块当中的元素个数已经达到了5个，也就是超过了4个就需要进行分裂了；那么此时；该数据块当中的中间元素为Q；也就是Q元素需要进行向上分裂至父节点D、G、M、T该数据块当中去；以及Q元素两边的元素需要进行分裂，也就是N、P与R、S这两块分裂开来；<br>但是Q如果此时向上进行分裂，而此时父节点当中的元素对向上分裂来的Q元素进行排序得到D、G、M、Q、T；父节点插入元素Q；父节点当中的元素也达到了了5个；也需要进行分裂；其父节点当中的中间元素为M元素，则此时M元素继续向上进行分裂，则M更新称为该BTree的根节点；而M两边的元素，即D、G两元素与Q、T两元素则这两块进行分裂开来，D、G块称为根结点M的左子节点，Q、T块称为M根结点的右子结点；这就是所提到的五叉BTree结构的一个演变过程；</p>
<table border="1">
  <tr>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">M</td>
     <td></td>
    <td></td>
     <td></td>
    <td></td>
    <td></td><td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td><td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
  </tr>
  <tr>
    <td colspan="28"></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span>  G
    </td>
    <td></td>
    <td></td>
      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">
    Q <span style="margin-left:5px;margin-right:5px;"></span> T</td>
    
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td><td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
      <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
    <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
      <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td><td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td colspan="28"></td>
  </tr>
  <tr>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C
    </td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>
    <td></td>
    <td></td>
    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L
    </td>
    <td></td>
    <td></td>
      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">
    N<span style="margin-left:5px;margin-right:5px;"></span> P</td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">R<span style="margin-left:5px;margin-right:5px;"></span> S</td>
    <td></td>
<td colspan="5" style="text-align:center;background-color:lightblue;color:black;">
    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>
    
  </tr>
  <tr>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
    <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
      <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
  </tr>
</table>

<p>了解了五叉BTree数据结构的一个演变过程之后回过头来再看；一棵m叉的BTree特性；<br>如果是一个五叉的BTree；<br>则：  </p>
<ul>
<li>树中每个结点最多包含m个孩子；即树中每个结点最多包含5个孩子；不能多于5个，即不能多于m个；  </li>
</ul>
<blockquote>
<p>举例</p>
</blockquote>
<table border="1">
  <tr>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span> G<span style="margin-left:5px;margin-right:5px;"></span> M<span style="margin-left:5px;margin-right:5px;"></span> T</td>
     <td></td>
    <td></td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
  </tr>
  <tr>
    <td colspan="26"></td>
  </tr>
  <tr>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C
    </td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>
    <td></td>
    <td></td>
    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L
    </td>
    <td></td>
    <td></td>
      <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">
    N<span style="margin-left:5px;margin-right:5px;"></span> P<span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span> R</td>
    <td></td>
<td colspan="5" style="text-align:center;background-color:lightblue;color:black;">
    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>
    
  </tr>
  <tr>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
    <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
  </tr>
</table>


<ul>
<li>除根结点与叶子结点外，每个结点至少有 [ cell( m / 2 )]个孩子；即每个结点至少有5/2=3（向上取整）个孩子；M为根节点；AC块、EF块、HKL块、NP块、RS块、WXYZ块为叶子结点；所以仅剩DG块与QT块非叶子结点也非根节点；这两块分别有三个字节点，DG块的孩子即AC块、EF块、HKL块；QT块的孩子即NP块、RS块、WXYZ块；  </li>
</ul>
<blockquote>
<p>举例</p>
</blockquote>
<table border="1">
  <tr>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">M</td>
     <td></td>
    <td></td>
     <td></td>
    <td></td>
    <td></td><td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td><td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
  </tr>
  <tr>
    <td colspan="28"></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span>  G
    </td>
    <td></td>
    <td></td>
      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">
    Q <span style="margin-left:5px;margin-right:5px;"></span> T</td>
    
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td><td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
      <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
    <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
      <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td><td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td colspan="28"></td>
  </tr>
  <tr>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C
    </td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>
    <td></td>
    <td></td>
    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L
    </td>
    <td></td>
    <td></td>
      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">
    N<span style="margin-left:5px;margin-right:5px;"></span> P</td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">R<span style="margin-left:5px;margin-right:5px;"></span> S</td>
    <td></td>
<td colspan="5" style="text-align:center;background-color:lightblue;color:black;">
    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>
    
  </tr>
  <tr>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
    <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
      <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
  </tr>
</table>


<ul>
<li>若根结点不是叶子结点，则至少有两个孩子；</li>
</ul>
<blockquote>
<p>举例</p>
</blockquote>
<table border="1">
  <tr>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">M</td>
     <td></td>
    <td></td>
     <td></td>
    <td></td>
    <td></td><td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td><td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
  </tr>
  <tr>
    <td colspan="28"></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span>  G
    </td>
    <td></td>
    <td></td>
      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">
    Q <span style="margin-left:5px;margin-right:5px;"></span> T</td>
    
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td><td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
      <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
    <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
      <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td><td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td colspan="28"></td>
  </tr>
  <tr>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C
    </td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>
    <td></td>
    <td></td>
    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L
    </td>
    <td></td>
    <td></td>
      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">
    N<span style="margin-left:5px;margin-right:5px;"></span> P</td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">R<span style="margin-left:5px;margin-right:5px;"></span> S</td>
    <td></td>
<td colspan="5" style="text-align:center;background-color:lightblue;color:black;">
    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>
    
  </tr>
  <tr>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
    <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
      <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
  </tr>
</table>

<ul>
<li>所有的叶子结点都在同一层；</li>
</ul>
<blockquote>
<p>举例</p>
</blockquote>
<table border="1">
  <tr>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td colspan="2" style="text-align:center;background-color:lightblue;color:black;">M</td>
     <td></td>
    <td></td>
     <td></td>
    <td></td>
    <td></td><td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td><td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
  </tr>
  <tr>
    <td colspan="28"></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">D<span style="margin-left:5px;margin-right:5px;"></span>  G
    </td>
    <td></td>
    <td></td>
      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">
    Q <span style="margin-left:5px;margin-right:5px;"></span> T</td>
    
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td><td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
      <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
    <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
      <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td><td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td colspan="28"></td>
  </tr>
  <tr>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C
    </td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">E<span style="margin-left:5px;margin-right:5px;"></span> F</td>
    <td></td>
    <td></td>
    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L
    </td>
    <td></td>
    <td></td>
      <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">
    N<span style="margin-left:5px;margin-right:5px;"></span> P</td>
    <td></td>
    <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">R<span style="margin-left:5px;margin-right:5px;"></span> S</td>
    <td></td>
<td colspan="5" style="text-align:center;background-color:lightblue;color:black;">
    W<span style="margin-left:5px;margin-right:5px;"></span> X<span style="margin-left:5px;margin-right:5px;"></span> Y<span style="margin-left:5px;margin-right:5px;"></span> Z</td>
    
  </tr>
  <tr>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
    <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
      <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
  </tr>
</table>


<ul>
<li>每个非叶子结点由n个key与n+1个指针组成；其中[ cell( m / 2)-1] &lt; = n &lt; = m - 1；即</li>
</ul>
<p>key即指的每一个结点当中的元素；指针即用来指向数据块</p>
<table border="1">
  <tr>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td colspan="3" style="text-align:center;background-color:lightblue;color:black;">G<span style="margin-left:5px;margin-right:5px;"></span> M</td>
     <td></td>
    <td></td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td></td>
    <td></td>
     <td></td>
     <td></td>
     <td></td>
  </tr>
  <tr>
    <td colspan="18"></td>
  </tr>
  <tr>
    <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">A<span style="margin-left:5px;margin-right:5px;"></span> C<span style="margin-left:5px;margin-right:5px;"></span> E<span style="margin-left:5px;margin-right:5px;"></span> F</td>
    <td></td>
    <td></td>
    <td colspan="4" style="text-align:center;background-color:lightblue;color:black;">H<span style="margin-left:5px;margin-right:5px;"></span>  K<span style="margin-left:5px;margin-right:5px;"></span> L
    </td>
    <td></td>
    <td></td>
      <td colspan="5" style="text-align:center;background-color:lightblue;color:black;">
    N <span style="margin-left:5px;margin-right:5px;"></span> Q<span style="margin-left:5px;margin-right:5px;"></span> T<span style="margin-left:5px;margin-right:5px;"></span> W</td>
    
  </tr>
  <tr>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td></td>
    <td></td>
    <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
    <td></td>
    <td></td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
     <td style="background-color:lightgreen;color:black;">指针</td>
  </tr>
</table>

<p>到此已经提到了两种数据结构，一种是二叉树；一种是BTree；这两个数据结构可以拿过来相互比较一下优劣；  </p>
<p>BTree数据结构相对于二叉树相比；存在有多个分支；而二叉树一个结点仅仅只存在有两个结点；那么对于相同数据量来说，二叉树的数据层次，也就是二叉树的深度要更高一些；一旦层次更深也就意味着查找数据的时候；磁盘的IO的次数也就更多；从而导致查询的效率也就比较低；<br>到此，该BTree树就已经构建完成了，BTREE树和二叉树相比，查询数据的效率更高，因为对于相同的数据量来说，BTREE的层次结构相比二叉树小，因此搜索速度更快；  </p>
<h2 id="索引-索引结构-B-TREE"><a href="#索引-索引结构-B-TREE" class="headerlink" title="索引 - 索引结构 - B+TREE"></a>索引 - 索引结构 - B+TREE</h2><p>B+Tree为BTree的变种，B+Tree与BTree的区别为：<br>1） n叉B+Tree最多含有n个key，而BTree最多含有n-1个key；<br>2） B+Tree的叶子结点保存所有的key信息，依照key大小顺序排列；<br>3） 所有的非叶子结点都可以看做是key的索引部分；  </p>
<p>没有子节点的结点称之为叶子结点；叶子结点当中包含了所有key的信息；叶子结点当中的key才是完整的包含了所有的key的信息；包含了所有的数据信息；根结点当中以及非叶子结点当中的key起到的是一个索引的作用；索引就是为了查找到叶子结点当中的key；而且对于B+树来说所有的数据都是存储在叶子结点上面了；非叶子结点是不存在数据信息的；B树当中的所有数据是跟结点挂钩的；B+树当中所有的key存储在叶子结点所有的数据也都存储在叶子结点上了；<br>这也是B+树与B树的一个区别；  </p>
<p>B+Tree相对于BTree的一个优势：<br>由于B+Tree只有叶子结点保存key信息，查询任何key都要从root走到叶子（非叶子结点上的key都是起到一个索引的作用并没有数据，叶子结点上的key才关联着相关的数据信息），所以B+Tree的查询效率更加稳定；  </p>
<h2 id="索引-索引结构-MySQL中的B-Tree"><a href="#索引-索引结构-MySQL中的B-Tree" class="headerlink" title="索引 - 索引结构 - MySQL中的B+Tree"></a>索引 - 索引结构 - MySQL中的B+Tree</h2><p>MySQL索引数据结构对经典的B+Tree进行了优化。<br>在原B+Tree的基础上，增加一个指向相邻叶子结点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能；<br>问题：为什么要增加这样一个指针？<br>答：方便进行查询；  </p>
<blockquote>
<p>增加该指针的原因在于：方便进行范围搜索；  </p>
</blockquote>
<p>举例：如果想要进行搜索id为9~15的数据；由于有该指针相连所以从9一直查询链表下一结点到15即可；<br>所以该链表指针的作用主要是用来提高区间访问的性能；  </p>
<h2 id="索引-索引分类"><a href="#索引-索引分类" class="headerlink" title="索引 - 索引分类"></a>索引 - 索引分类</h2><p>1） 单值索引：即一个索引值包含单个列，一个表可以有多个单列索引(一个索引当中只包含一个列；比如现在需要对某一张表当中建立索引；该表当中有多个字段name、gender、age、help_category_id等字段，但是只针对name该字段该列进行建立索引；help_category_id也可以建立个索引；则当前存在两个索引，但是每个索引只对应了相对应的一列；这个叫做单列索引或者是单值索引；一个表当中可以包含有多个单列索引)<br>2） 唯一索引：索引列的值必须唯一，但允许有空值；（当前表当中某一个字段或者是某一列当中其值都是唯一的；也就是说如果存在有列当中的值都是唯一的；那么必要情况下就可以针对该列建立一个唯一索引，在唯一索引的该列当中允许包括有多个NULL值；）<br>3） 复合索引：即一个索引包含多个列（比如：经常在查询当中需要对name字段以及parent_category_id或者是说age字段进行联合查询，那么此时可以将name字段以及age字段组合起来建立一个复合索引，即一个索引当中包含了两个列或者说多个列；那么这种索引称之为复合索引）；  </p>
<h2 id="索引-索引语法"><a href="#索引-索引语法" class="headerlink" title="索引 - 索引语法"></a>索引 - 索引语法</h2><p>索引在创建表的时候，可以同时创建，也可以随时增加新的索引；<br>准备环境：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> demo_01 <span class="keyword">default</span> charset=utf8mb4;</span><br><span class="line"></span><br><span class="line">use demo_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">'city'</span>(</span><br><span class="line">    <span class="string">'city_id'</span> <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT;</span><br><span class="line">    <span class="string">'city_name'</span> <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">    <span class="string">'country_id'</span> <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (<span class="string">'city_id'</span>)</span><br><span class="line">)ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">'country'</span>(</span><br><span class="line">    <span class="string">'country_id'</span> <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT;</span><br><span class="line">    <span class="string">'country_name'</span> <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (<span class="string">'country_id'</span>)</span><br><span class="line">)ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'city'</span>(<span class="string">'city_id'</span>,<span class="string">'city_name'</span>,<span class="string">'country_id'</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'西安'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'city'</span>(<span class="string">'city_id'</span>,<span class="string">'city_name'</span>,<span class="string">'country_id'</span>) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'NewYork'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'city'</span>(<span class="string">'city_id'</span>,<span class="string">'city_name'</span>,<span class="string">'country_id'</span>) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'北京'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'city'</span>(<span class="string">'city_id'</span>,<span class="string">'city_name'</span>,<span class="string">'country_id'</span>) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'上海'</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'country'</span>(<span class="string">'country_id'</span>,<span class="string">'country_name'</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'China'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'country'</span>(<span class="string">'country_id'</span>,<span class="string">'country_name'</span>) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'America'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'country'</span>(<span class="string">'country_id'</span>,<span class="string">'country_name'</span>) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Japan'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">'country'</span>(<span class="string">'country_id'</span>,<span class="string">'country_name'</span>) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'UK'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>语法：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">UNIQUE</span> | <span class="keyword">FULL</span> <span class="built_in">TEXT</span> |SPATIAL] <span class="keyword">INDEX</span> index_name</span><br><span class="line">[ <span class="keyword">using</span> index_type ]</span><br><span class="line"><span class="keyword">ON</span> tb1_name(index_col_name, .... )</span><br><span class="line"></span><br><span class="line">index_col_name : column_name[ ( <span class="keyword">length</span> ) ] [ <span class="keyword">ASC</span> | <span class="keyword">DESC</span> ]</span><br></pre></td></tr></table></figure>

<p>索引的类型：UNIQUE唯一索引、FULLTEXT全文索引、SPATIAL；索引类型可选；可以不进行指定；<br>index_name：索引的名称；<br>using index_type：索引所使用的哪一个类型；如果不指定；则使用，默认的索引类型即B+树索引类型；<br>ON tb1_name(index_col_name, ….)：进行指定对哪一张表的哪几个字段创建索引；  </p>
<p>在MySQL当中，如果当前该字段是主键的话；则默认该字段默认有一个索引叫做主键索引；  </p>
<p>所以此时在city表当中对city_id字段的索引不必再进行创建；可以在city_name字段上创建索引；  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_city_name <span class="keyword">on</span> city(city_name);<span class="comment">#此时在city_name字段上创建的该索引为普通索引；</span></span><br></pre></td></tr></table></figure>

<p>示例：为city表中的city_name 字段创建索引：  </p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_city_name <span class="keyword">on</span> city(city_name);</span><br></pre></td></tr></table></figure>

<h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><p>语法：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> <span class="built_in">table_name</span>; #<span class="built_in">table_name</span>，索引所建立在该字段，该字段所处的表的名称</span><br></pre></td></tr></table></figure>

<p>示例：查看city表中的索引信息：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> city\G; <span class="comment">#\G格式化</span></span><br></pre></td></tr></table></figure>

<p>在MySQL当中会默认对主键city_id字段创建一个索引就称作是主键索引key_name：primary；<br>而刚刚对city_name创建的索引则为key_name：idx_city_name；<br>主键索引primary以及刚刚没有指定索引类型的idx_city_name的索引类型都是BTREE类型；即B+Tree索引，BTree索引；</p>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>语法：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> tb1_name;</span><br><span class="line"><span class="comment"># index_name索引的名称</span></span><br><span class="line"><span class="comment"># 该index_name索引所具体在的表的名称</span></span><br></pre></td></tr></table></figure>

<p>示例：想要删除city表上的索引[ idx_city_name ]，可以操作如下：  </p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_city_name <span class="keyword">on</span> city;</span><br></pre></td></tr></table></figure>

<p>删除之后可以通过以下命令来进行查看删除的索引是否仍然存在；</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> <span class="built_in">table_name</span>\G;</span><br></pre></td></tr></table></figure>

<h3 id="ALTER指令"><a href="#ALTER指令" class="headerlink" title="ALTER指令"></a>ALTER指令</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># alter 修改</span></span><br><span class="line"><span class="comment"># 该语句添加一个主键，这意味着索引值必须唯一，且不能为NULL；</span></span><br><span class="line">1. <span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> primary <span class="keyword">key</span>(column_list);</span><br><span class="line"></span><br><span class="line"><span class="comment"># unique 唯一的</span></span><br><span class="line"><span class="comment"># 这条语句创建索引的值必须是唯一的（除了NULL意外，NULL可能会出现多次）</span></span><br><span class="line"><span class="comment"># Non_unique:0 #Non不，unique唯一；0：否定；双重否定等于肯定；即唯一</span></span><br><span class="line"><span class="comment"># 当创建普通索引时其Non_unique:1；即不唯一；  </span></span><br><span class="line">2. <span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> <span class="keyword">unique</span> index_name(column_list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加普通索引，索引值可以出现多次</span></span><br><span class="line">3. <span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> <span class="keyword">index</span> index_name(column_list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该语句指定了索引为FULLTEXT，用于全文索引</span></span><br><span class="line">4. <span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> fulltext index_name(column_list);</span><br></pre></td></tr></table></figure>

<p>示例：添加唯一索引  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> city <span class="keyword">add</span>  <span class="keyword">unique</span>  idx_city_name(city_name);</span><br></pre></td></tr></table></figure>

<h2 id="索引-索引设计原则"><a href="#索引-索引设计原则" class="headerlink" title="索引 - 索引设计原则"></a>索引 - 索引设计原则</h2><p>索引的设计可以遵循一些已有的原则，创建索引的时候请尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引；  </p>
<ul>
<li>对查询频次较高，且数据量比较大的表建立索引；</li>
<li>索引字段的选择，最佳候选列应当从where子句的条件中提取（即查询条件当中的字段），如果where子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合。</li>
<li>使用唯一索引，区分度越高，使用索引的效率越高；</li>
<li>索引可以有效的提升查询数据的效率，但是索引数量不是多多益善；索引越多，维护索引的代价自然也就水涨船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价（维护索引的数据结构），降低DML操作的效率，增加响应操作的时间消耗；另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但是无疑提高了选择的代价；</li>
<li>使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I/O效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，乡音的可以有效地提升MySQL访问索引的I/O效率。</li>
<li>利用最左前缀，N个列组合而成的组合索引，那么相当于是创建了N个索引，如果查询时where子句中使用了组成该索引的前几个字段，那么这条查询SQL可以利用组合索引来提升性能；  </li>
</ul>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">创建复合索引：</span><br><span class="line"></span><br><span class="line">CREATE <span class="built_in">INDEX</span> idx_name_email_status ON tb_seller(<span class="keyword">NAME</span>,email,<span class="keyword">STATUS</span>);</span><br><span class="line"></span><br><span class="line">就相当于</span><br><span class="line">      对<span class="keyword">name</span> 创建了索引；</span><br><span class="line">      对<span class="keyword">name</span> , email 创建了索引；</span><br><span class="line">      对<span class="keyword">name</span> , email , <span class="keyword">status</span> 创建了索引；</span><br><span class="line">只需要创建这么一个索引，在查询<span class="keyword">name</span>单个字段的时候就将会走索引；在查询<span class="keyword">name</span>，email这两个字段的时候也会走索引；在查询<span class="keyword">name</span>,email,<span class="keyword">status</span>这三个字段的时候也会走索引；  </span><br><span class="line">最左索引：最左指的是复合索引当中的第一个字段，只要查询的时候包含第一个字段，那么这个时候就会走索引；</span><br></pre></td></tr></table></figure>

<h2 id="视图-创建及修改视图"><a href="#视图-创建及修改视图" class="headerlink" title="视图 - 创建及修改视图"></a>视图 - 创建及修改视图</h2><p>视图（View）是一种虚拟存在的表。<br>视图并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。<br>通俗的讲，视图就是一条SELECT语句执行后返回的结果集。<br>所以在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。  </p>
<p>视图相对于普通表的又是主要包括以下几项：  </p>
<ul>
<li>简单：使用视图的用户完全不需要关心后面对应表的结构、关联条件和筛选条件，对用户来说已经是过滤好的符合条件的结果集。  </li>
<li>安全：使用视图的用户只能访问他们被允许查询的结果喜，对表的权限管理并不能先知道某个行某个列，但是通过视图就可以简单的实现；</li>
<li>数据独立：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响；</li>
</ul>
<h3 id="创建或者修改视图"><a href="#创建或者修改视图" class="headerlink" title="创建或者修改视图"></a>创建或者修改视图</h3><blockquote>
<p>创建视图的语法为</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">OR</span> <span class="keyword">REPLACE</span>] [ ALGORITHM = &#123; UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE &#125; ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">VIEW</span> view_name [ (column_list) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line"></span><br><span class="line">[ <span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span> ] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span> ]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改视图的语法</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> [ ALGORITHM = &#123; UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE &#125; ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">VIEW</span> view_name [ (column_list) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line"></span><br><span class="line">[ WITE [ <span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span> ] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span> ]</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">选项：</span><br><span class="line">    <span class="keyword">WITH</span> [ <span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span> 决定了是否允许更新数据使记录不在满足视图的条件；</span><br><span class="line">    <span class="keyword">LOCAL</span> 只要满足本视图的条件就可以更新</span><br><span class="line">    <span class="keyword">CASCADED</span> 必须满足所有针对该视图的所有视图的条件才可以更新（默认值）</span><br><span class="line"></span><br><span class="line">    <span class="keyword">CREATE</span> [ <span class="keyword">OR</span> <span class="keyword">REPLACE</span>] 创建或者是替换</span><br><span class="line">    <span class="keyword">AS</span> select_statement select_statement即<span class="keyword">select</span>语句</span><br></pre></td></tr></table></figure>

<p>示例：在视图当中展示国家以及其相关城市的信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>; <span class="comment"># 显示在该数据库下所有的表</span></span><br><span class="line">desc table_name; <span class="comment"># 显示该table_name当中的表结构</span></span><br><span class="line">desc city;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city c,country t <span class="keyword">where</span> c.country_id=t.country_id;</span><br><span class="line"><span class="keyword">select</span> c.*,t.country_name <span class="keyword">from</span> city c,country t <span class="keyword">where</span> c.country_id=t.country_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> view_city_country <span class="keyword">as</span> <span class="keyword">select</span> c.*,t.country_name <span class="keyword">from</span> city c,country t <span class="keyword">where</span> c.country_id=t.country_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> view_city_country;<span class="comment"># 查询视图与表操作一致</span></span><br><span class="line"><span class="keyword">update</span> view_city_country <span class="keyword">set</span> city_name=<span class="string">'西安市'</span> <span class="keyword">where</span> city_id=<span class="number">1</span>;<span class="comment">#修改视图与表操作一致</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city; <span class="comment"># 这个时候基础表当中的数据也会被更新掉；也就是说此时的视图修改操作是会影响到基础表当中的数据；  </span></span><br><span class="line">虽然视图能够做到更新，但是并不建议去更新数据；因为视图就是用来简化查询操作的，不建议更新视图；</span><br></pre></td></tr></table></figure>

<h2 id="视图-查看及删除视图"><a href="#视图-查看及删除视图" class="headerlink" title="视图 - 查看及删除视图"></a>视图 - 查看及删除视图</h2><h3 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h3><p>从MySQL5.1版本开始，使用SHOW TABLES命令的时候不仅会显示表的名字，同时也会显示视图的名字，而不存在单独显示视图的SHOW VIEWS命令。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;<span class="comment"># 显示表以及视图的名称</span></span><br></pre></td></tr></table></figure>

<p>同样，在使用SHOW TABLE STATUS命令的时候，不但可以显示表的信息，同时也可以显示视图的信息；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span>; <span class="comment"># 显示表以及视图的信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'city_country_view'</span>\G; <span class="comment"># 示例查看视图city_country_view</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span> view_city_country; <span class="comment"># 查看创建视图时所使用的的SQL语句是什么</span></span><br></pre></td></tr></table></figure>

<h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><p>语法：  </p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"><span class="meta">DROP</span> <span class="meta">VIEW</span> [ <span class="meta">IF</span> EXISTS ] view_name [, view_name ] ... [ <span class="meta">RESTRICT</span> | <span class="meta">CASCADE</span> ]</span><br></pre></td></tr></table></figure>

<p>示例，删除视图city_country_view:  </p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> city_country_view;# or <span class="keyword">DROP</span> <span class="keyword">VIEW</span> <span class="keyword">if</span> <span class="keyword">exists</span> city_country_view;</span><br></pre></td></tr></table></figure>

<h2 id="存储过程-概述"><a href="#存储过程-概述" class="headerlink" title="存储过程 - 概述"></a>存储过程 - 概述</h2><p>存储过程和函数是实现经过编译并存储在数据库中的一段SQL语句的集合，调用存储过程和函数可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率时有好处的。<br>存储过程和函数的区别在于函数必须有返回值，而存储过程没有；<br>函数：是一个有返回值的过程；<br>存储过程：是一个没有返回值的函数；</p>
<h2 id="存储过程-创建调用查询删除语法"><a href="#存储过程-创建调用查询删除语法" class="headerlink" title="存储过程 - 创建调用查询删除语法"></a>存储过程 - 创建调用查询删除语法</h2><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">procedure_name</span> <span class="params">( [proc_parameter[,.....]])</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    -- <span class="title">SQL</span>语句</span></span><br><span class="line"><span class="function"><span class="title">end</span>;</span></span><br></pre></td></tr></table></figure>

<p>示例：  </p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">select</span> '<span class="title">Hello</span> <span class="title">MySQL</span>';</span></span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h4 id="知识小贴士"><a href="#知识小贴士" class="headerlink" title="知识小贴士"></a>知识小贴士</h4><p>DELEMITER<br>    该关键字用来声明SQL语句的分隔符，告诉MySQL解释器，改短命令是否已经结束了，mysql是否可以执行了，默认情况下，delimiter是分号;<br>    在命令行客户端中，如果一行命令以分号结束，那么回车后，mysql将会执行该命令；</p>
<h3 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> procedure_name();</span><br></pre></td></tr></table></figure>

<h3 id="查看存储过程"><a href="#查看存储过程" class="headerlink" title="查看存储过程"></a>查看存储过程</h3><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">-- 查询db_name 数据库中的所有的存储过程</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> mysql.proc <span class="keyword">where</span> db=<span class="string">'db_name'</span>;</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> mysql.proc <span class="keyword">where</span> db=<span class="string">'demo_01'</span>$ #示例</span><br><span class="line"></span><br><span class="line">-- 查询存储过程的状态信息</span><br><span class="line">show <span class="function"><span class="keyword">procedure</span> <span class="title">status</span>;</span></span><br><span class="line">show <span class="function"><span class="keyword">procedure</span> <span class="title">status</span>$ # 示例</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">-- 查询某个存储过程的定义</span></span><br><span class="line"><span class="function"><span class="title">show</span> <span class="title">create</span> <span class="title">procedure</span> <span class="title">test</span>.<span class="title">pro_test1</span> \<span class="title">G</span>;</span></span><br><span class="line">show <span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test</span>\<span class="title">G</span>$ #示例</span></span><br></pre></td></tr></table></figure>

<h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><figure class="highlight cal"><table><tr><td class="code"><pre><span class="line">DROP <span class="function"><span class="keyword">PROCEDURE</span> [ <span class="title">IF</span> <span class="title">EXISTS</span> ] <span class="title">sp_name</span>;</span></span><br><span class="line"></span><br><span class="line">drop <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test1</span>$ # 示例</span></span><br></pre></td></tr></table></figure>

<h2 id="存储过程-语法-变量"><a href="#存储过程-语法-变量" class="headerlink" title="存储过程 - 语法 - 变量"></a>存储过程 - 语法 - 变量</h2><p>存储过程是可以编程的，意味着可以使用变量，表达式，控制结构，来完成比较复杂的功能。(使得SQL具有过程化语言的处理能力)  </p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul>
<li>DECLARE</li>
</ul>
<p>通过DECLARE可以定义一个局部变量，该变量的作用返回只能在BEGIN…END块中。  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">DECLARE var_name[ <span class="built_in">..</span>. ]<span class="built_in"> type </span>[DEFAULT value]</span><br></pre></td></tr></table></figure>

<p>示例：  </p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">num</span> <span class="title">int</span> <span class="title">default</span> 5;</span></span><br><span class="line">    <span class="keyword">select</span> num+ <span class="number">10</span>;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">num</span> <span class="title">int</span> <span class="title">default</span> 10;</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'num的值为'</span>,num);</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test1()$</span><br><span class="line">call pro_test2()$</span><br><span class="line"></span><br><span class="line">delimiter $</span><br></pre></td></tr></table></figure>

<ul>
<li>SET</li>
</ul>
<p>直接赋值使用SET，可以赋常量或者赋表达式，具体语法如下：  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">SET</span> var_name = expr [ , <span class="attribute">var_name</span>=expr ] <span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure>

<p>示例：  </p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">pro_test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">BEGIN</span></span></span><br><span class="line"><span class="function">    <span class="title">DECLARE</span> <span class="title">NAME</span> <span class="title">VARCHAR</span><span class="params">(20)</span>;</span></span><br><span class="line">    <span class="keyword">SET</span> NAME = <span class="string">'MYSQL'</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> NAME ;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">pro_demo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">num</span> <span class="title">int</span> <span class="title">default</span> 0;</span></span><br><span class="line">    <span class="keyword">set</span> num = num +<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">select</span> num;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test3()$</span><br><span class="line">call pro_demo()$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>也可以通过 select….into 方式进行赋值操作；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_test5()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> countnum <span class="built_in">int</span>;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> countnum <span class="keyword">from</span> city;</span><br><span class="line">    <span class="keyword">select</span> countnum;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> PPROCEDURE pro_demo()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> <span class="keyword">num</span> <span class="built_in">int</span>;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> <span class="keyword">num</span> <span class="keyword">from</span> city;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'city表中的记录数为'</span>,<span class="keyword">num</span>);</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> pro_test5()$</span><br><span class="line"><span class="keyword">call</span> pro_demo()$</span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br></pre></td></tr></table></figure>

<h2 id="存储过程-语法-if判断"><a href="#存储过程-语法-if判断" class="headerlink" title="存储过程 - 语法 - if判断"></a>存储过程 - 语法 - if判断</h2><h3 id="if条件判断"><a href="#if条件判断" class="headerlink" title="if条件判断"></a>if条件判断</h3><p>语法结构：  </p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> search_condition then statement_list</span><br><span class="line">      [ <span class="keyword">elseif</span> search_condition then statement_list ] ...</span><br><span class="line">      [ <span class="keyword">else</span> statementlist ]</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br></pre></td></tr></table></figure>

<p>需求：  </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">根据定义的身高变量，判定当前身高的所属的身材类型</span><br><span class="line"></span><br><span class="line"><span class="number">180</span>及以上----------》身材高挑</span><br><span class="line"><span class="number">170</span> ~ <span class="number">180</span>----------》标准身材</span><br><span class="line"><span class="number">170</span>一下------------》一般身材</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">delimiter &amp;</span><br><span class="line">create procedure pro_test4()</span><br><span class="line">begin</span><br><span class="line">    declare height int<span class="built_in"> default </span>175;</span><br><span class="line">    declare description varchar(50)<span class="built_in"> default </span><span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> hegith &gt;= 180 then</span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'身材高挑'</span>;</span><br><span class="line">    elseif height &gt;=170 <span class="keyword">and</span> height &lt; 180 then</span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'标准身材'</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'一般身材'</span>;</span><br><span class="line">    end <span class="keyword">if</span>;</span><br><span class="line">    select concat(<span class="string">'身高'</span>,height,<span class="string">'对应的身材类型为'</span>,description);</span><br><span class="line">end$</span><br><span class="line"></span><br><span class="line">call pro_test()$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h2 id="存储过程-语法-输入参数"><a href="#存储过程-语法-输入参数" class="headerlink" title="存储过程 - 语法 - 输入参数"></a>存储过程 - 语法 - 输入参数</h2><p><strong>传递参数</strong></p>
<p>语法格式：  </p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">procedure_name</span><span class="params">([ <span class="keyword">in</span> / <span class="keyword">out</span> / inout ]参数名称 参数类型)</span></span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># <span class="title">IN</span> 该参数可以作为输入，也就是需要调用方传入值，默认</span></span><br><span class="line"><span class="function"># <span class="title">OUT</span> 该参数作为输出，也就是该参数可以作为返回值</span></span><br><span class="line"><span class="function"># <span class="title">INOUT</span> 既可以作为输入参数，也可以作为输出参数</span></span><br></pre></td></tr></table></figure>

<p><strong>IN - 输入</strong></p>
<p>需求：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">根据定义的身高变量，判定当前身高的所属的身材类型</span><br></pre></td></tr></table></figure>

<p>示例：  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line">create procedure pro_test5(<span class="keyword">in</span> height int)</span><br><span class="line">begin</span><br><span class="line">    declare description varchar(50)<span class="built_in"> default </span><span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> hegith &gt;= 180 then</span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'身材高挑'</span>;</span><br><span class="line">    elseif height &gt;=170 <span class="keyword">and</span> height &lt; 180 then</span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'标准身材'</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="builtin-name">set</span> <span class="attribute">description</span>=<span class="string">'一般身材'</span>;</span><br><span class="line">    end <span class="keyword">if</span>;</span><br><span class="line">    select concat(<span class="string">'身高'</span>,height,<span class="string">'对应的身材类型为'</span>,description);</span><br><span class="line">end$</span><br><span class="line"></span><br><span class="line">call pro_test5(198)$</span><br><span class="line">call pro_test5(178)$</span><br><span class="line">call pro_test5(158)$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h2 id="存储过程-语法-输出参数"><a href="#存储过程-语法-输出参数" class="headerlink" title="存储过程 - 语法 - 输出参数"></a>存储过程 - 语法 - 输出参数</h2><p>需求：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">根据传入的身高变量，获取当前身高的所属的身材类型</span><br></pre></td></tr></table></figure>

<p>示例：  </p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test5</span><span class="params">(<span class="keyword">in</span> height int ,<span class="keyword">out</span> description varchar(10)</span>)</span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="title">height</span> &gt;=180 <span class="title">then</span></span></span><br><span class="line"><span class="function">        <span class="title">set</span> <span class="title">description</span>='身材高挑';</span></span><br><span class="line">    elseif height &gt;= <span class="number">170</span> <span class="keyword">and</span> height &lt; <span class="number">180</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> description=<span class="string">'身材标准'</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">set</span> description=<span class="string">'一般身材'</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test5(<span class="number">188</span>,@description)$</span><br><span class="line"># @description 代表用户的变量；用户的会话变量</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> @description$ # 查询用户会话变量取值</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<p><strong>小知识</strong><br>@description：这种变量要在变量名称前面加上“@”符号，叫做用户会话变量，代表整个会话过程它都是有作用的，这个类似于全局变量一样。<br>@@global.sort_buffer_size:这种在变量前加上“@@”，叫做系统变量；  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">set</span> <span class="variable">@name</span>=<span class="string">'itcast'</span>$</span><br><span class="line"></span><br><span class="line"><span class="literal">select</span> <span class="variable">@name</span>$</span><br></pre></td></tr></table></figure>

<h2 id="存储过程-语法-case结构"><a href="#存储过程-语法-case结构" class="headerlink" title="存储过程 - 语法 - case结构"></a>存储过程 - 语法 - case结构</h2><p>语法结构：  </p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">方式一：  </span><br><span class="line"><span class="keyword">CASE</span> case_value <span class="meta"># case_value 条件</span></span><br><span class="line">    <span class="keyword">WHEN</span> when_value <span class="keyword">THEN</span> statement_list <span class="meta"># statement_list SQL语句</span></span><br><span class="line">    [ <span class="keyword">WHEN</span> when_value <span class="keyword">THEN</span> statement_list ] ...</span><br><span class="line">    [ <span class="keyword">ELSE</span> statement_list ]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方拾二：  </span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">WHEN</span> search_condition <span class="keyword">THEN</span> statement_list <span class="meta"># search_condition 条件表达式；如果该表达式为真只执行THEN后的statement_list SQL语句</span></span><br><span class="line">    [ <span class="keyword">WHEN</span> search_condition <span class="keyword">THEN</span> statement_list ] ...</span><br><span class="line">    [ <span class="keyword">ELSE</span> statement_list ]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure>

<p>需求：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个月份，然后计算出所在的季度</span><br></pre></td></tr></table></figure>

<p>示例：  </p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test7</span><span class="params">( mon int)</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">result</span> <span class="title">varchar</span><span class="params">(10)</span>;</span></span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">      when mou&gt;=<span class="number">1</span> <span class="keyword">and</span> mon &lt;=<span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> <span class="keyword">result</span>=<span class="string">'第一季度'</span>;</span><br><span class="line">      when mou&gt;=<span class="number">4</span> <span class="keyword">and</span> mon &lt;=<span class="number">6</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> <span class="keyword">result</span>=<span class="string">'第二季度'</span>;</span><br><span class="line">      when mou&gt;=<span class="number">7</span> <span class="keyword">and</span> mon &lt;=<span class="number">9</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> <span class="keyword">result</span>=<span class="string">'第三季度'</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">set</span> <span class="keyword">result</span>=<span class="string">'第四季度'</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'传递的月份为'</span>,mon,<span class="string">'， 计算出的结果为：'</span>,<span class="keyword">result</span>) <span class="keyword">as</span> content;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test7(<span class="number">7</span>)$</span><br><span class="line">call pro_test7(<span class="number">2</span>)$</span><br><span class="line">call pro_test7(<span class="number">11</span>)$</span><br><span class="line">call pro_test7(<span class="number">9</span>)$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h2 id="存储过程-语法-while循环"><a href="#存储过程-语法-while循环" class="headerlink" title="存储过程 - 语法 - while循环"></a>存储过程 - 语法 - while循环</h2><p>语法结构：  </p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> search_condition <span class="keyword">do</span> <span class="comment"># search_condition 条件成立执行循环；条件不成立则跳出循环</span></span><br><span class="line">    statement_list</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">while</span>;</span><br></pre></td></tr></table></figure>

<p>需求：  </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">计算从<span class="number">1</span>加到n的值</span><br></pre></td></tr></table></figure>

<p>示例:  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test8(n <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> total <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">declare</span> <span class="keyword">start</span> <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    while <span class="keyword">start</span> &lt;= n <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">set</span> total=total+<span class="keyword">start</span>;</span><br><span class="line">        <span class="keyword">start</span>=<span class="keyword">start</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> pro_test8(<span class="number">3</span>)$</span><br><span class="line"><span class="keyword">call</span> pro_test8(<span class="number">6</span>)$</span><br><span class="line"><span class="keyword">call</span> pro_test8(<span class="number">100</span>)$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h2 id="存储过程-语法-repeat循环"><a href="#存储过程-语法-repeat循环" class="headerlink" title="存储过程 - 语法 - repeat循环"></a>存储过程 - 语法 - repeat循环</h2><p>有条件的循环控制语句，当满足条件的时候退出循环。<br>while是满足条件才执行，repeat是满足条件就退出循环。  </p>
<p>语法结构：  </p>
<figure class="highlight cal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REPEAT</span></span><br><span class="line">    statement_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">UNTIL</span> search_condition</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">REPEAT</span>;</span><br></pre></td></tr></table></figure>

<p>需求：  </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">计算从<span class="number">1</span>加到n的值</span><br></pre></td></tr></table></figure>

<p>示例：  </p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test9</span><span class="params">(n int)</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">total</span> <span class="title">int</span> <span class="title">default</span> 0;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">repeat</span></span><br><span class="line">        <span class="keyword">set</span> total=total+n;</span><br><span class="line">        <span class="keyword">set</span> n=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">until</span> n=<span class="number">0</span> # 此处不加分号；加分号报错；满足当前条件则跳出循环</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test10(<span class="number">50</span>)$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h2 id="存储过程-语法-loop循环"><a href="#存储过程-语法-loop循环" class="headerlink" title="存储过程 - 语法 - loop循环"></a>存储过程 - 语法 - loop循环</h2><h3 id="loop语句"><a href="#loop语句" class="headerlink" title="loop语句"></a>loop语句</h3><p>LOOP实现简单的循环，退出循环的条件需要使用其他的语句定义，通常可以使用LEAVE语句实现，具体语法如下：  </p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">[ begin_label: ] <span class="keyword">LOOP</span></span><br><span class="line">    statement_list</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span> [ end_label ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>如果不在 statement_list 中增加退出循环的语句，那么LOOP语句可以用来实现简单的死循环</p>
<h3 id="leave语句"><a href="#leave语句" class="headerlink" title="leave语句"></a>leave语句</h3><p>用来从标注的流程构造中退出，通常和BEGIN….END或者循环一起使用。<br>下面是一个使用LOOP和LEAVE的简单例子，退出循环；</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">pro_test10</span><span class="params">(n int)</span></span></span><br><span class="line"><span class="function"><span class="title">BEGIN</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">total</span> <span class="title">int</span> <span class="title">default</span> 0;</span></span><br><span class="line"></span><br><span class="line">    ins:<span class="keyword">LOOP</span></span><br><span class="line">        <span class="keyword">IF</span> n &lt;= <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">          leave ins;</span><br><span class="line">        <span class="keyword">ELSE</span></span><br><span class="line">          <span class="keyword">SET</span> total=total+n;</span><br><span class="line">          <span class="keyword">SET</span> n=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">LOOP</span> ins;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">pro_test10</span><span class="params">(n int)</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">declare</span> <span class="title">total</span> <span class="title">int</span> <span class="title">default</span> 0;</span></span><br><span class="line"></span><br><span class="line">    c:<span class="keyword">loop</span></span><br><span class="line">        <span class="keyword">set</span> total=total+n;</span><br><span class="line">        <span class="keyword">set</span> n=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> n&lt;<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">            leave c; # 满足条件跳出循环</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">loop</span> c;</span><br><span class="line">    <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">call pro_test10(<span class="number">100</span>)$</span><br><span class="line">call pro_test10(<span class="number">99</span>)$</span><br><span class="line">call pro_test10(<span class="number">3</span>)$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h2 id="存储过程-语法-游标介绍"><a href="#存储过程-语法-游标介绍" class="headerlink" title="存储过程 - 语法 - 游标介绍"></a>存储过程 - 语法 - 游标介绍</h2><p>游标是用来存储查询结果集的数据类型，唉存储过程和函数中可以使用光标对结果集进行循环的处理。<br>光标的使用包括光标的声明、OPEN、FETCH和CLOSE。  </p>
<h2 id="存储过程-语法-游标基本操作"><a href="#存储过程-语法-游标基本操作" class="headerlink" title="存储过程 - 语法 - 游标基本操作"></a>存储过程 - 语法 - 游标基本操作</h2><p>其语法分别如下：  </p>
<p>声明光标：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span> <span class="keyword">for</span> select_statement;</span><br></pre></td></tr></table></figure>

<p>OPEN光标：  </p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">OPEN cursor_name<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>FETCH光标：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">FETCH cursor_name INTO var_name [ , var_name ] <span class="string">...</span> <span class="comment"># 每抓取一次，即获取结果集当中每一行数据；调用一次指针往下指向一次；调用一次指针往下指向一次；当指针指到最后没有数据的那一行时，即此时就应该退出游标了；</span></span><br></pre></td></tr></table></figure>

<p>CLOSE光标：  </p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">CLOSE cursor_name<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>示例：<br>初始化脚本:  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'姓名'</span>,</span><br><span class="line">  age <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">comment</span> <span class="string">'年龄'</span>,</span><br><span class="line">  salary <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">comment</span> <span class="string">'薪水'</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="string">'id'</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">id</span>,<span class="keyword">name</span>,age,salary) <span class="keyword">values</span> (<span class="literal">null</span>,<span class="string">'金毛狮王'</span>,<span class="number">55</span>,<span class="number">3800</span>),(<span class="literal">null</span>,<span class="string">'白眉鹰王'</span>,<span class="number">60</span>,<span class="number">4400</span>),(<span class="literal">null</span>,<span class="string">'青翼蝠王'</span>,<span class="number">38</span>,<span class="number">2800</span>),(<span class="literal">null</span>,<span class="string">'素衫龙王'</span>,<span class="number">42</span>,<span class="number">1800</span>);</span><br></pre></td></tr></table></figure>

<p>需求：  </p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询emp表中数据，并逐行获取进行显示</span></span><br></pre></td></tr></table></figure>

<p>示例：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delimiter</span> $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test11()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> e_id <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">declare</span> e_name <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line">    decalre e_age <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">declare</span> e_salary <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">declare</span> emp_result <span class="keyword">cursor</span> fro <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> emp_result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_naem,e_age,e_salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_naem,e_age,e_salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_naem,e_age,e_salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_naem,e_age,e_salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_naem,e_age,e_salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">close</span> emp_result;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"># emp表当中只有四条数据，如果<span class="keyword">fetch</span>的次数大于表当中的数据，那么<span class="keyword">fetch</span>表中总行数依然可以打印出来，一旦<span class="keyword">fetch</span>大于表中的总行数则进行报错；</span><br><span class="line"></span><br><span class="line"># 通过<span class="keyword">fetch</span>一行一行进行抓取记录编写的效率十分低；</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> pro_test11();</span><br><span class="line"><span class="keyword">delimiter</span> ;</span><br></pre></td></tr></table></figure>

<h2 id="存储过程-语法-循环获取游标"><a href="#存储过程-语法-循环获取游标" class="headerlink" title="存储过程 - 语法 - 循环获取游标"></a>存储过程 - 语法 - 循环获取游标</h2><blockquote>
<p>循环当中，游标的fetch退出判断</p>
</blockquote>
<p>1） count(*) into num;  num –<br>2） mysql存在机制，变量，通过改变该变量取值状态及退出fetch  </p>
<p>示例：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delimiter</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test12()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> e_id <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    decalre e_name <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line">    decalre e_age <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    decalre e_salary <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">declare</span> has_data <span class="type">int</span> <span class="keyword">default</span> <span class="number">1</span>;#当has_data为<span class="number">1</span>时表示还有数据；当has_data为<span class="number">0</span>时表示没有数据</span><br><span class="line"></span><br><span class="line">    <span class="keyword">declare</span> emp_result <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line">    <span class="keyword">DECLARE</span> <span class="keyword">EXIT</span> <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">NOT</span> <span class="built_in">FOUND</span> <span class="keyword">set</span> has_data=<span class="number">0</span>;#退出当前游标指向程序并设置has_data为<span class="number">0</span>；此为mysql提供的一种机制；同时该句话需要声明在声明游标的下方；当游标进行<span class="keyword">fetch</span>获取不到数据的时候，此时会进行触发；</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> emp_reuslt;</span><br><span class="line"></span><br><span class="line">    repeat</span><br><span class="line">        <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_name,e_age,e_salary;</span><br><span class="line">        <span class="keyword">select</span> concat(<span class="string">'id为：'</span> , e_id,<span class="string">', 名字为: '</span> , e_name , <span class="string">', 年龄为：'</span> , e_age , <span class="string">', 薪资为：'</span> , e_salary);</span><br><span class="line">        <span class="keyword">until</span> has_data=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span> repeat;</span><br><span class="line">    <span class="keyword">close</span> emp_result;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> pro_test12()$</span><br><span class="line"></span><br><span class="line"><span class="keyword">delimiter</span> ;</span><br></pre></td></tr></table></figure>

<h2 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h2><p>语法结构：  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CREATE FUNCTION function_name([ param<span class="built_in"> type </span><span class="built_in">..</span>. ])</span><br><span class="line">RETURNS type</span><br><span class="line">BEGIN</span><br><span class="line">    <span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">END;</span><br></pre></td></tr></table></figure>

<p>案例：<br>定义一个存储过程，请求满足条件的总记录数：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delimiter</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> count_city(countryId <span class="type">int</span>)</span><br><span class="line"><span class="keyword">returns</span> <span class="type">int</span> # 此处不需要分号</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> cnum <span class="type">int</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> count(*) <span class="keyword">into</span> cnum <span class="keyword">from</span> city <span class="keyword">where</span> country_id = countryId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cnum;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">delimiter</span> ;</span><br><span class="line"></span><br><span class="line"># 存储过程虽然没有返回值；但是依然可以返回结果；因为其参数列表当中有<span class="keyword">in</span>、<span class="keyword">out</span>（返回值）、<span class="keyword">inout</span>；存储函数能做的事情；存储过程也可以做；</span><br></pre></td></tr></table></figure>

<blockquote>
<p>调用存储函数命令</p>
</blockquote>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> count_city(<span class="number">1</span>)$</span><br><span class="line"><span class="keyword">select</span> count_city(<span class="number">2</span>)$</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除存储函数命令</p>
</blockquote>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">drop <span class="keyword">function</span> <span class="title">count_city$</span></span><br></pre></td></tr></table></figure>

<h2 id="触发器-介绍"><a href="#触发器-介绍" class="headerlink" title="触发器 - 介绍"></a>触发器 - 介绍</h2><p>触发器是与表有关的数据库对象，指的是在insert、update、delete之前或者之后，触发并执行触发器中定义的SQL语句集合，触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作；  </p>
<p>使用别名OLD和NEW来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。<br>现在触发器还只支持行级触发，不支持语句级触发。  </p>
<table>
  <tr>
    <th>触发器类型</th>
    <th>NEW和OLD的使用</th>
  </tr>
  <tr>
    <td>INSERT型触发器</td>
    <td>NEW表示将要或者已经新增的数据</td>
  </tr>
  <tr>
    <td>UPDATE型触发器</td>
    <td>OLD表示修改之前的数据，NEW表示将要或者已经修改后的数据</td>
  </tr>
  <tr>
    <td>DELETE型触发器</td>
    <td>OLD表示将要或者已经删除的数据</td>
  </tr>
</table>

<h2 id="触发器-创建及应用"><a href="#触发器-创建及应用" class="headerlink" title="触发器 - 创建及应用"></a>触发器 - 创建及应用</h2><h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h3><p>语法结构：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trigger_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">before</span>/<span class="keyword">after</span> <span class="keyword">insert</span>/<span class="keyword">update</span>/<span class="keyword">delete</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># before 在...之前/after 在...之后</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">on</span> tb1_name</span><br><span class="line"></span><br><span class="line">[ <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> ] <span class="comment">-- 当前操作的是一个行级触发器;oracle数据库当中既有行级触发器也有语句级的触发器；而mysql数据库当中只支持行级触发器现还不支持语句级触发器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  trigger_stmt;<span class="comment">--触发的内容</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>需求：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过触发器记录 emp表的数据变更日志，包含新增、修改、删除；</span><br></pre></td></tr></table></figure>

<p>示例：  </p>
<p>首先创建一张日志表:  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_logs(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">    operation <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'操作类型，insert/update/delete'</span>,</span><br><span class="line">    operate_time datatime <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'操作时间'</span>,</span><br><span class="line">    operate_id <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'操作表的id'</span>,</span><br><span class="line">    operate_params <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">comment</span> <span class="string">'操作参数'</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="string">'id'</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>$</span><br></pre></td></tr></table></figure>

<p>创建insert性触发器，完成插入数据时的日志记录；  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELIMITER</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">trigger</span> emp_logs_insert_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">on</span> emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs(id,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(</span><br><span class="line">      <span class="keyword">null</span>,<span class="string">'insert'</span>,now(),<span class="built_in">new</span>.id,concat( <span class="string">'插入后 ( id：'</span>, <span class="built_in">new</span>.id , <span class="string">', name: '</span> , <span class="built_in">new</span>.name , <span class="string">' ,  age: '</span> ,  <span class="built_in">new</span>.age , <span class="string">' , salary: '</span> , <span class="built_in">new</span>.salary , <span class="string">')'</span>)</span><br><span class="line">    );</span><br><span class="line">    # 此处的<span class="built_in">new</span>.id即新插入emp表中数据的记录的id，即emp当中的id字段；</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(id,<span class="type">name</span>,age,salary) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">'光明左使'</span>,<span class="number">30</span>,<span class="number">3500</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp$</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp_logs$</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(id,<span class="type">name</span>,age,salary) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">'光明右使'</span>,<span class="number">35</span>,<span class="number">3800</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">trigger</span> emp_logs_update_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">update</span></span><br><span class="line"><span class="keyword">on</span> emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs(id,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(</span><br><span class="line">      <span class="keyword">null</span>,<span class="string">'update'</span>,now(),<span class="built_in">new</span>.id,</span><br><span class="line">      concat( </span><br><span class="line">        <span class="string">'修改前 ( id：'</span>, <span class="built_in">old</span>.id ,</span><br><span class="line">        <span class="string">',name: '</span> , <span class="built_in">old</span>.name ,</span><br><span class="line">        <span class="string">',age: '</span> ,  <span class="built_in">old</span>.age ,</span><br><span class="line">        <span class="string">',salary: '</span> , <span class="built_in">old</span>.salary ,</span><br><span class="line">        <span class="string">') 修改后( id：'</span>, <span class="built_in">new</span>.id ,</span><br><span class="line">        <span class="string">',name: '</span> , <span class="built_in">new</span>.name ,</span><br><span class="line">        <span class="string">',age: '</span> ,  <span class="built_in">new</span>.age ,</span><br><span class="line">        <span class="string">',salary: '</span> , <span class="built_in">new</span>.salary ,</span><br><span class="line">        <span class="string">')'</span>  </span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">    # 此处的<span class="built_in">new</span>.id即新插入emp表中数据的记录的id，即emp当中的id字段；</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> age=<span class="number">39</span> <span class="keyword">where</span> id=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp$</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp_logs$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">trigger</span> emp_logs_delete_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span> emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs(id,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(</span><br><span class="line">      <span class="keyword">null</span>,<span class="string">'delete'</span>,now(),<span class="built_in">old</span>.id,</span><br><span class="line">      concat(</span><br><span class="line">        <span class="string">'删除前( id：'</span>, <span class="built_in">old</span>.id ,</span><br><span class="line">        <span class="string">',name: '</span> , <span class="built_in">old</span>.name ,</span><br><span class="line">        <span class="string">',age: '</span> ,  <span class="built_in">old</span>.age ,</span><br><span class="line">        <span class="string">',salary: '</span> , <span class="built_in">old</span>.salary ,</span><br><span class="line">        <span class="string">')'</span>  </span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp$</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp_logs$</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp$</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp_logs$</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELIMITER</span> ;</span><br></pre></td></tr></table></figure>

<h2 id="触发器-查看及删除"><a href="#触发器-查看及删除" class="headerlink" title="触发器 - 查看及删除"></a>触发器 - 查看及删除</h2><h3 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h3><p>语法结构：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> [ <span class="built_in">schema_name</span>.] trigger_name</span><br></pre></td></tr></table></figure>
<p>如果没有指定schema_name，默认为当前数据库。</p>
<h3 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h3><p>可以通过执行SHOW TRIGGERS 命令查看触发器的状态、语法等信息。<br>语法结构：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> triggers;</span><br><span class="line"></span><br><span class="line"># Event 触发器监听的事件 <span class="keyword">INSERT</span>/<span class="keyword">UPDATE</span>/<span class="keyword">DELETE</span></span><br><span class="line"># <span class="keyword">Table</span> 对于哪一张表监听的触发器</span><br><span class="line"># <span class="keyword">Timing</span> 触发器是前置触发<span class="keyword">BEFORE</span>还是后置触发<span class="keyword">AFTER</span></span><br><span class="line"># <span class="keyword">Statement</span> 触发器定义</span><br></pre></td></tr></table></figure>

<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><blockquote>
<p>Mysql高级-day02</p>
</blockquote>
<p>1） MySql的体系结构概览（MySQL内部原理，内部执行流程有一个认识）<br>2） 存储引擎（InnoDB以及MyISAM）<br>3） 优化SQL步骤（从哪些方面以及参考指标）<br>4） 索引的使用（在SQL优化中如何使用）<br>5） SQL优化  </p>
<h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><h3 id="MySQL的体系结构概览"><a href="#MySQL的体系结构概览" class="headerlink" title="MySQL的体系结构概览"></a>MySQL的体系结构概览</h3><p>MySQL的体系结构图和在进行Web开发的三层架构是相类似的；  </p>
<p>Web开发时的三层架构：<br>（1）前端发起请求先到达controller；<br>（2）controller调service；service调用dao;<br>（3）dao再去访问数据库；  </p>
<p>mysql的体系结构当中，首先最上面的部分Connectors实际上代表的就相当于是客户端；<br>在客户端连接当中Natice C API，JDBC，ODBC,.NET，PHP,Perl，Python，Ruby，Cobol这些个；<br>JDBC就很熟悉了；在Java程序当中可以通过JDBC来进行操作mysql；<br>所以最上面部分即mysql连接的客户端通过JDBC来进行操作；<br>然后紧接着中层即MySQL Server；  </p>
<p>MySQL Server当中最上面一层即Connection Pool连接池；在连接池当中有很多的组件模块Authentication、Thread Reuse、Connection Limits、Check Memory、Caches；<br>也就是客户端发起一个连接；<br>这个连接就会到MySQL Server的这个Connection Pool连接池当中来进行获取一个连接来执行对应的请求；<br>当然，在MySQL Server的Connection Pool进行获取连接的时候还需要进行认证、连接最大数、缓存等相关操作；<br>此为MySQL Server的第一层连接层；<br>连接层主要负责的就是客户端发起一个请求，<br>MySQL Server接收到这个请求之后，开启一段线程进行与客户端请求相关的操作；<br>这是连接层；  </p>
<p>MySQL Server当中的第二层即Management Services &amp; Utillties、SQL Interface、Parser、Optimizer、Caches &amp; Buffers 这一部分；<br>MySQL Server第二层当中有很多的组件；<br>其中第一个（第一个模块）即MySQL的管理服务以及一些工具；管理层Management Services当中可以进行数据的备份与恢复以及集群安全以及系统配置相关的内容（Backup &amp; Recovery，Security，Replication，Cluster，Administrator，Configuration，Migration &amp; Metadata）<br>第二层的第二个模块：SQL Interface即SQL的一个接口，在此当中可以去进行执行或者是去封装DML、DDL语句以及存储过程、存储函数、视图、触发器等等相关数据库对象（DML、DDL、Stored Procedures，Views ，Triggers ，etc.）</p>
<p>第二层的第三个模块即：Parser，Parser就是一个解析器，这个解析器解析的是客户端发起的一个请求，客户端发起的这个请求就是SQL语句，SQL语句需要经过这个解析器Parser的解析，解析之后并且在这一块进行相关的过滤（Query Translation,Object Privilege）  </p>
<p>解析完成之后，在MySQL的内部还需要几个过程；<br>第二层的第四个模块：Optimizer，这个过程实际上称作优化器；即在解析完成了前端请求过来的SQL语句并进行相关的过滤之后，MySQL内部还须要通过其内部的一个优化器，对前端请求来的SQL语句解析并过滤后进行一个优化处理；MySQL内部会按照其内部自己的一个优化体系来进行优化（Access Paths，Statistics）  </p>
<p>当优化完成之后，接下来还需要进行缓存的一个操作：<br>第二程的第五个模块：Caches &amp; Buffers，即查询在缓存当中有没有要查询的数据；如果存在有对应的树据信息，那么这个时候可能就直接返回给前端客户端了；（Global and Engine ，Specific Caches &amp; Buffers）  </p>
<p>所以第二层当中的这五个模块就是MySQL的服务层操作；即将前端请求的SQL语句进行封装起来并且进行解析以及相关过滤，以及对其进行优化，最终还需要操作MySQL当中的缓存区的信息；  </p>
<p>MySQL Server的第三层：Pluggable Storage Engines(Memory，Index &amp; Storage Management)，此处实际指的是存储引擎；<br>Pluggable插件式的存储引擎；<br>以下是MySQL当中的存储引擎:<br>（MyISAM、InnoDB、NDB、Archive、Federated、Memory、Merge、Partner、Community、Custom ….）<br>MySQL版本5.5之后默认的存储引擎即为InnoDB；<br>引擎：发动机；<br>存储引擎是什么？（与飞机上的引擎比较类似，比如客机则有客机的引擎，客机即运送乘客、旅客；但是还有对应的货机，那么货机即对应的即运输货物的；还有直升机等等；不同的飞机有不同的飞机引擎；不同的飞机引擎在相对应的机型当中都发挥着不同的作用；在操作的时候需要考虑到，用户是什么，然后去考虑更适合哪一种引擎，对应的发动机；同样对于mysql的存储引擎是一个道理；存储引擎则需要根据存储的数据不同或者是需求不同而选择不同的存储引擎来进行存储不同的数据；）<br>MySQL Server的第三层为存储引擎层；  </p>
<p>MySQL Server的第四层即存储层：File system（NTFS，ufs，ext2/3，NFS，SAN，NAS）<br>Files &amp; Logs（Redo，Undo，Data，Index，Binary，Error，Query and Slow）<br>在操作MySQL数据库中表当中的数据的时候，不管是插入还是查询或者修改删除等操作；实际上最终都是操作的File system即文件系统；最终操作的都是文件系统当中的文件；而这个文件系统即就处于磁盘当中；所以最下面一层就文件系统；最重要操作的也就是文件系统；除了在表结构当中的数据，还有对应的索引信息、二进制错误、查询、慢查询日志等；  </p>
<p>此为MySQL体系结构当中的四层；  </p>
<p>第一层连接层；负责接收客户端的发送的请求；然后MySQL Server开启一段线程进行相关的认证授权之后再来进行请求的处理；<br>第二层服务层：服务层在主要起到备份恢复、SQL封装、解析过滤、SQL语句优化、缓存查询等相关操作；<br>第三层存储引擎层，选择合适的存储引擎对相关数据进行相关的处理；<br>第四层文件系统：当第三层的数据进行相关的处理完成之后，则需要将数据最终写入文件系统当中，即实际的物理磁盘当中；</p>
<p>整个MySQL由以下组成：  </p>
<ul>
<li>Connection Pool：连接池组件</li>
<li>Management Service &amp; Utillties: 管理服务和工具组件</li>
<li>SQL Interface: SQL接口组件</li>
<li>Parser: 查询分析器组件</li>
<li>Optimizer: 优化器组件</li>
<li>Caches &amp; Buffers: 缓冲池组件</li>
<li>Pluggable Storage Engines: 存储引擎</li>
<li>File System: 文件系统</li>
</ul>
<ol>
<li>连接层<br>最上层是一些客户和连接服务，包含本地socket通信和大多数基于客户端/服务端工具实现的类似于TCP/IP的通信。<br>主要完成一些类似于连接处理、授权认证、以及相关的安全方案。<br>在该层上引入了线程池的概念，未通过认证安全接入的客户端提供线程。<br>同样在该层上可以实现基于SSL的安全连接，服务器也会为安全接入的每个客户端验证它所具有的的操作权限；  </li>
<li>服务层<br>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。<br>所有跨存储引擎的功能也在这一层实现，如过程、函数等。<br>在该层，服务器会解析查询并创建相应的内部解析树，并对其完成响应的优化如确定表的查询顺序，是否利用索引等，最后生成响应的执行操作。<br>如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。  </li>
<li>引擎层<br>存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。<br>不同的存储引擎具有不同的功能，这样可以根据自己的需要，来选取合适的存储引擎；  </li>
<li>存储层<br>数据存储层，主要是将数据存储在文件系统之上，并完成与存储引擎的交互；  </li>
</ol>
<p>和其它数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。<br>主要体现在存储引擎上，插件式的存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离。<br>这种架构可以根据业务的需求和实际需要选择合适的存储引擎；  </p>
<h2 id="存储引擎-概述"><a href="#存储引擎-概述" class="headerlink" title="存储引擎 - 概述"></a>存储引擎 - 概述</h2><p>和大多数的数据库不同，MySQL中有一个存储引擎的概念，针对不同的存储需求可以选择最优的存储引擎；<br>存储引擎就是存储数据，建立索引，更新查询数据等等技术的实现方式。<br>存储引擎是基于表的，而不是基于库的。<br>索引存储引擎也可被称为表类型。<br>Oracle、SQLServer等数据库只有一种存储引擎。<br>MySQL提供了插件式的存储引擎架构。<br>索引MySQl存在多种存储引擎，可以根据需要使用相应引擎，或者编写存储引擎。<br>MySQL5.0支持的存储引擎包含：InnoDB、MyISAM、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED等，其中InnoDB和BDB提供食物安全表，其他存储引擎是非事务安全表；<br>可以通过指定 show engines，来进行查询当前数据库支持的存储引擎；  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">engines</span>;</span><br></pre></td></tr></table></figure>

<p>创建新表时，如果不指定存储引擎，那么系统就会使用默认的存储引擎。<br>MySQL5.5之前的默认存储引擎是MyISAM，5.5之后就改为InnoDB；  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -u root -p <span class="comment">#连接mysql</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">engines</span>;</span><br><span class="line"><span class="comment"># Engine 存储引擎的名字</span></span><br><span class="line"><span class="comment"># Support 是否支持该存储引擎，YES/NO/DEFAULT，DEFAULT默认，默认支持的存储引擎InnoDB</span></span><br><span class="line"><span class="comment"># comment 注释</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Comment注释</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MyISAM : MyISAM <span class="keyword">storage</span> engines</span><br><span class="line">MRG_MYISAM : COLLECTION <span class="keyword">OF</span> IDENTICAL MyISAM <span class="keyword">tables</span></span><br><span class="line">MEMORY : Hash based,stored <span class="keyword">in</span> memory,useful <span class="keyword">for</span> <span class="keyword">temporary</span> <span class="keyword">tables</span></span><br><span class="line">BLACKHOLE : /dev/<span class="keyword">null</span> <span class="keyword">storage</span> engine (anything you wirte <span class="keyword">to</span> it disappears)</span><br><span class="line">CSV : CSV <span class="keyword">storage</span> engine</span><br><span class="line">PERFIRMANCE_SCHEMA : Performance <span class="keyword">Schema</span></span><br><span class="line">ARCHIVE : Archive <span class="keyword">storage</span> engine</span><br><span class="line">FEDERATED ： Federated MySQL <span class="keyword">storage</span> engine</span><br><span class="line">InnoDB ： Support <span class="keyword">transaction</span>,<span class="keyword">row</span>-<span class="keyword">level</span> locking, <span class="keyword">and</span> <span class="keyword">foreign</span> keys # 支持事务，支持行级锁并且支持外键</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看数据库当中的词汇？</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%storage_engine%'</span>;</span><br><span class="line"></span><br><span class="line">default_storage_engine InnoDB</span><br><span class="line">default_tmp_storage_engine InnoDB</span><br><span class="line">storage_engine InnoDB</span><br></pre></td></tr></table></figure>

<h2 id="存储引擎-特性"><a href="#存储引擎-特性" class="headerlink" title="存储引擎 - 特性"></a>存储引擎 - 特性</h2><p>下面重点介绍几种常用的存储引擎，并对比各个存储引擎之间的区别，如下表所示：  </p>
<table>
    <tr>
      <th>特点</th>
      <th style="background-color:lightblue;color:red;font-weight:bolder;">InnoDB</th>
      <th style="background-color:lightblue;color:red;font-weight:bolder;">MyISAM</th>
      <th>MEMORY</th>
      <th>MERGE</th>
      <th>NDB</th>
    </tr>
    <tr>
      <td>存储限制</td>
      <td>64TB</td>
      <td>有</td>
      <td>有</td>
      <td>没有</td>
      <td>有</td>
    </tr>
    <tr>
      <td style="background-color:lightblue;color:red;font-weight:bolder;">事务安全</td>
      <td>支持</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td style="background-color:lightblue;color:red;font-weight:bolder;">锁机制</td>
      <td style="background-color:lightgreen;color:red;font-weight:bolder;">行锁（适合高并发）</td>
      <td style="background-color:lightgreen;color:red;font-weight:bolder;">表锁</td>
      <td>表锁</td>
      <td>表锁</td>
      <td>行锁</td>
    </tr>
    <tr>
      <td>B树索引</td>
      <td>支持</td>
      <td>支持</td>
      <td>支持</td>
      <td>支持</td>
      <td>支持</td>
    </tr>
    <tr>
      <td>哈希索引</td>
      <td>（当前我看到的是支持的）</td>
      <td></td>
      <td>支持</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td>全文索引</td>
      <td>支持（5.6版本之后）</td>
      <td>支持</td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td>集群索引</td>
      <td>支持</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td>数据索引</td>
      <td>支持</td>
      <td></td>
      <td>支持</td>
      <td></td>
      <td>支持</td>
    </tr>
     <tr>
      <td>索引缓存</td>
      <td>支持</td>
      <td>支持</td>
      <td>支持</td>
      <td>支持</td>
      <td>支持</td>
    </tr>
 <tr>
      <td>数据可压缩</td>
      <td></td>
      <td>支持</td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
 <tr>
      <td>空间使用</td>
      <td>高</td>
      <td>低</td>
      <td>N/A</td>
      <td>低</td>
      <td>低</td>
    </tr>
 <tr>
      <td>内存使用</td>
      <td>高</td>
      <td>低</td>
      <td>中等</td>
      <td>低</td>
      <td>高</td>
    </tr>
     <tr>
      <td>批量插入速度</td>
      <td>低</td>
      <td>高</td>
      <td>高</td>
      <td>高</td>
      <td>高</td>
    </tr>
     <tr>
      <td style="background-color:lightblue;color:red;font-weight:bolder;">支持外键</td>
      <td style="background-color:lightgreen;color:red;font-weight:bolder;">支持</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
</table>

<p>下面将重点介绍最常使用的两种存储引擎：InnoDB、MyISAM，另外两种MEMORY、MERGE，了解即可；  </p>
<h2 id="存储引擎-InnoDB特性"><a href="#存储引擎-InnoDB特性" class="headerlink" title="存储引擎 - InnoDB特性"></a>存储引擎 - InnoDB特性</h2><p>InnoDB存储引擎是MySQL的默认存储引擎。<br>InnoDB存储引擎提供了具有提交、回滚、崩溃恢复能力的事务安全。<br>但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些，并且会占用更多的磁盘空间以保留数据和索引；  </p>
<p>InnoDB存储引擎不同于其他存储引擎的特点：  </p>
<p><strong>事务控制</strong></p>
<p>MySQL 当中事务默认自动提交；  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">create database demo_02<span class="built_in"> default </span><span class="attribute">charset</span>=utf8mb4;  </span><br><span class="line">use demo_01;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table goods_innodb(</span><br><span class="line">  id int(11) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  name varchar(20) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  primary key(id)</span><br><span class="line">)<span class="attribute">ENGINE</span>=innodb<span class="built_in"> default </span><span class="attribute">charset</span>=utf8;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> goods_innodb(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Meta20'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>;<span class="comment"># 如不提交，则其他客户端无法查看得到插入的数据；</span></span><br><span class="line"><span class="comment"># MySQL默认的隔离级别为可重复读</span></span><br></pre></td></tr></table></figure>

<p><strong>外键约束</strong></p>
<p>MySQL支持外键的存储引擎只有InnoDB，在创建外键的时候，要求父表必须有对应的索引，子表在创建索引的时候，也会自动的创建对应的索引；<br>下面两张表中，<br>1） country_innodb是父表，country_id为主键索引；<br>2） city_innodb是子表，country_id字段为外键，对应于country_innodb表中的主键country_id；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> country_innodb(</span><br><span class="line">  country_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  counry_name <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> ,</span><br><span class="line">  primary <span class="keyword">key</span> (country_id)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> city_innodb(</span><br><span class="line">  city_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  city_name <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  country_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  primary <span class="keyword">key</span> (city_id),</span><br><span class="line">  <span class="keyword">key</span> idx_fk_country_id(country_id),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">'fk_city_contry'</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(country_id) <span class="keyword">REFERENCES</span> country_innodb(country_id) <span class="keyword">ON</span> DFLETE RESTRICT <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ON DELETE RESTRICT 在删除主表数据时，如果有关联记录则不删除</span></span><br><span class="line"><span class="comment"># ON UPDATE CASCADE 更新主表时，如果子表有关联记录，则更新子表记录  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> country_innodb <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'China'</span>),(<span class="literal">null</span>,<span class="string">'America'</span>),(<span class="literal">null</span>,<span class="string">'Japan'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> city_innodb <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Xian'</span>,<span class="number">1</span>),(<span class="literal">null</span>,<span class="string">'NewYork'</span>,<span class="number">2</span>),(<span class="literal">null</span>,<span class="string">'BeiJing'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>在创建索引时，可以指定在删除、更新父表时，对子表进行的相应操作，包括RESTRICT、CASCADE、SET NULL和NO ACTION。<br>RESTRICT和NO ACTION相同，是指限制在子表有关联记录的情况下，父表不能更新；<br>CASCADE表示父表在更新或者删除时，更新或者删除子表对应的记录；<br>SET NULL则表示父表在更新或者删除的时候，子表对应字段被SET NULL。<br>针对上面创建的两个表，子表在外键指定是ON DELETE RESTRICT ON UPDATE CASCADE方式的，那么在主表删除记录的时候，如果子表有对应记录，则不允许删除。主表在更新记录的时候，如果子表有对应记录，则子表也会对应更新；  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> country_innodb;<span class="comment">#主表</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city_innodb;<span class="comment">#子表；子表当中的外键country_id指向主表country_innodb当中的主键country_id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> country_innodb <span class="keyword">where</span> country_id=<span class="number">2</span>;</span><br><span class="line"><span class="comment">#此处由于外键关联，所以导致删除报错，无法更新；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> country_innodb <span class="keyword">set</span> country_id=<span class="number">100</span> <span class="keyword">where</span> country_id=<span class="number">1</span>;</span><br><span class="line"><span class="comment">#此时子表当中关联有1；那么说则刚才的子表当中对应country_id也为1 的记录将会进行相应的更新；  </span></span><br><span class="line">查看主表以及子表：  </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> country_innodb;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city_innodb;</span><br></pre></td></tr></table></figure>

<p><strong>存储方式</strong></p>
<p>存储方式实际上指的是InnoDB这个存储引擎对应的表在数据库当中以数据文件的存储方式；<br>InnoDB存储表和索引有以下两种方式：  </p>
<ol>
<li>使用共享表空间存储，这种方式创建的表的表结构保存在.frm文件中，数据和索引保存在 innodb_data_home_dir和innodb_data_file_path定义的表空间中，可以是多个文件；  </li>
<li>使用多表空间存储，这种方式存储的表的表结构仍然存在.frm文件中，但是每个表的数据和索引单独保存在.ibd中；</li>
</ol>
<h2 id="存储引擎-MyISAM特性"><a href="#存储引擎-MyISAM特性" class="headerlink" title="存储引擎 - MyISAM特性"></a>存储引擎 - MyISAM特性</h2><p>MyISAM不支持事务，也不支持外键，其优势是访问的速度快，对事务的完整性没有要求或者以SELECT、INSERT为主的应用基本上都可以使用这个引擎来创建表，有以下两个比较重要的特点：  </p>
<p><strong>不支持事务</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods_myisam(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">engine</span>=myisam <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> goods_myisam <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'电脑3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>
<p>通过测试可以发现，在MyISAM存储引擎中，是没有事务控制的；  </p>
<p><strong>文件存储方式</strong></p>
<p>每个MyISAM在磁盘上存储成3个文件，其文件名都和表明相同，但拓展名称分别是：</p>
<ul>
<li>.frm (存储表定义)</li>
<li>.MYD (MYData，存储数据)</li>
<li>.MYI (MYIndex，存储索引)</li>
</ul>
<h2 id="存储引擎-Memory与Merge特性"><a href="#存储引擎-Memory与Merge特性" class="headerlink" title="存储引擎 - Memory与Merge特性"></a>存储引擎 - Memory与Merge特性</h2><p>Memory（内存）存储引擎将表的数据放在内存中。<br>每个MEMORY表实际对应一个磁盘文件，格式是.frm，改文件中只存储表的数据结构，而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表达效率。<br>MEMORY类型的表访问非常的快，因为他的数据是存放在内存中的，并且默认使用HASH索引，但是服务一旦关闭，表中的数据就会丢失；  </p>
<p>MERGE（合并）存储引擎是一组MyISAM表的组合，这些MyISAM表必须结构完全相同，MERGE表本身并没有存储数据，对MERGE类型的表可以进行查询、更新、删除操作，这些操作实际上是对内部的MyISAM表进行的；  </p>
<p>对于MERGE类型表的插入操作是通过INSERT_METHOD子句定义插入的表，可以有三个不同的值，使用FIRST或者LAST值使得插入操作被相应的作用在第一或者是最后一个表上，不定义这个子句或者定义为NO，表示不能对这个MERGE表执行插入操作；  </p>
<p>可以对MERGE表进行DROP操作，但是这个操作知识删除MERGE表的定义，对内部的表是没有任何影响的；  </p>
<p>MERGE存储引擎与view视图有些类似；  </p>
<p>下面是一个创建和使用MERGE表的示例：<br>1）创建三个测试表 payment_2006、payment_2007、payment_all，其中payment_all是前两个表的MERGE表；</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">create table order_1990(</span><br><span class="line">  order_id int,</span><br><span class="line">  order_money double(10,2),</span><br><span class="line">  order_address varchar(50),</span><br><span class="line">  primary key (order_id)</span><br><span class="line">)<span class="attribute">engine</span>=myisam<span class="built_in"> default </span><span class="attribute">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line">create table order_1991(</span><br><span class="line">  order_id int,</span><br><span class="line">  order_money double(10,2),</span><br><span class="line">  order_address varchar(50),</span><br><span class="line">  primary key (order_id)</span><br><span class="line">)<span class="attribute">engine</span>=myisam<span class="built_in"> default </span><span class="attribute">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line">create table order_all(</span><br><span class="line">  order_id int,</span><br><span class="line">  order_money double(10,2),</span><br><span class="line">  order_address varchar(50),</span><br><span class="line">  primary key (order_id)</span><br><span class="line">)<span class="attribute">engine</span>=merge  </span><br><span class="line">union = ( order_1990, order_1991 )  </span><br><span class="line"><span class="attribute">INSERT_METHOD</span>=LAST  </span><br><span class="line">default <span class="attribute">charset</span>=utf8;</span><br></pre></td></tr></table></figure>

<p>2） 分别向两张表中插入记录  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1990 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">100.0</span>,<span class="string">'上海'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1990 <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">100.0</span>,<span class="string">'北京'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1991 <span class="keyword">values</span>(<span class="number">10</span>,<span class="number">100.0</span>,<span class="string">'北京'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1991 <span class="keyword">values</span>(<span class="number">11</span>,<span class="number">100.0</span>,<span class="string">'上海'</span>);</span><br></pre></td></tr></table></figure>

<p>3） 查询三张表当中的数据：<br>order_1990表中的数据：  </p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> order_1990;</span><br></pre></td></tr></table></figure>

<p>order_1991表中的数据：  </p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> order_1991;</span><br></pre></td></tr></table></figure>

<p>order_all表中的数据：  </p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> order_all;</span><br></pre></td></tr></table></figure>

<h2 id="存储引擎-选择原则"><a href="#存储引擎-选择原则" class="headerlink" title="存储引擎 - 选择原则"></a>存储引擎 - 选择原则</h2><p>在选择存储引擎时，应该选择根据应用系统的特点选择合适的存储引擎。<br>对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合；<br>以下是几种常用的存储引擎的使用环境：  </p>
<ul>
<li>InnoDB<ul>
<li>是MySQL的默认存储引擎，用于事务处理应用程序，支持外键。</li>
<li>如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询以外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。  </li>
<li>InnoDB存储引擎除了有效的降低由于删除和更新导致的锁定，还可以确保事务的完整提交和回滚，对于类似于计费系统或者是财务系统等对数据准确性要求比较高的系统，InnoDB是最合适的选择；  </li>
</ul>
</li>
<li>MyISAM<ul>
<li>如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的；  </li>
</ul>
</li>
<li>MEMORY<ul>
<li>将所有的数据保存在内存当中RAM，在需要快速定位记录和其他类似数据环境下，可以提供几块的访问。</li>
<li>MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。  </li>
<li>MEMORY表通常用于更新不太频繁的小表，用以快速得到访问结果。  </li>
</ul>
</li>
<li>MERGE<ul>
<li>用于将一些列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用他们。</li>
<li>MERGE表的优点在于可以突破对单个MyISAM表的大小限制，并且通过将不同的表分布在多个磁盘上，可以有效的改善MERGE表的访问效率，这对于存储诸如数据仓库等VLDB环境十分合适。  </li>
</ul>
</li>
</ul>
<p>有一个点：就是有没有类似emm，MERGE然后内部基层的表的存储引擎是InnoDB这种的；如果是这种的话；不是有那个什么分库分表什么的？（我不太了解分库分表，乱说的）  </p>
<h2 id="优化SQL步骤-SQL执行频率"><a href="#优化SQL步骤-SQL执行频率" class="headerlink" title="优化SQL步骤 - SQL执行频率"></a>优化SQL步骤 - SQL执行频率</h2><p>在应用的开发过程中，由于初期数据量小，开发人员写SQL语句时更重视功能上的实现，但是当应用系统正式上线后，随着生产数据的急剧增长，很多SQL语句开始逐渐显露出性能问题，对生产的影响也越来越大，此时这些有问题的SQL语句就成为整个系统性能的瓶颈，因此必须要对它们进行优化，本章将详细介绍MySQL中优化SQL语句的方法。  </p>
<p>当面对一个有SQL性能问题的数据库时，应该从何处入手来进行系统的分析，使得能够尽快定位问题SQL并尽快解决问题。  </p>
<h3 id="查看SQL执行频率"><a href="#查看SQL执行频率" class="headerlink" title="查看SQL执行频率"></a>查看SQL执行频率</h3><p>MySQL客户端连接成功后，通过 show [ session | global ] status 命令可以提供服务器状态信息。<br>show [ session | global ]status 可以根据需要加上参数 “session”或者“global”来显示session级（当前连接）的统计结果和global级（自数据库上次启动至今）的统计结果。<br>如果不写，默认使用参数是“session”。  </p>
<p>下面的命令显示了当前session中所有统计参数的值：</p>
<blockquote>
<p>针对数据库</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Com_______'</span>; <span class="comment"># _ 占位字符，匹配的模糊字符 查询级别为session会话级别</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Com_______'</span>; <span class="comment"># _ 匹配的模糊字符 查询级别为global全局级别</span></span><br><span class="line"></span><br><span class="line">Com_binlog</span><br><span class="line">Com_commit</span><br><span class="line">Com_delete <span class="comment">#删除的次数</span></span><br><span class="line">Com_insert <span class="comment">#插入的次数</span></span><br><span class="line">Com_repair</span><br><span class="line">Com_select <span class="comment">#查询的次数</span></span><br><span class="line">Com_revoke</span><br><span class="line">Com_signal</span><br><span class="line">Com_update <span class="comment">#修改的次数</span></span><br><span class="line">Com_xa_end</span><br><span class="line"></span><br><span class="line"><span class="comment">#此时查询的为当前连接session的信息，并非为整个数据库全局的统计参数</span></span><br><span class="line"><span class="comment">#如果需要查询全局则：show global status like 'Com_______';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过知道当前数据库当中是以查询为主还是增删改为主；为SQL优化提供借鉴性指标</span></span><br></pre></td></tr></table></figure>

<p>Com_xxx表示每个xxx语句执行的次数，通常比较关心的是以下几个统计参数</p>
<table>
  <tr>
    <th>参数</th>
    <th>含义</th>
  </tr>
  <tr>
    <td>Com_select</td>
    <td>执行select操作的次数，一次查询只累加1</td>
  </tr>
  <tr>
    <td>Com_insert</td>
    <td>执行INSERT操作的次数，对于批量插入的INSERT操作，只累加一次</td>
  </tr>
  <tr>
    <td>Com_update</td>
    <td>执行UPDATE操作的次数</td>
  </tr>
  <tr>
    <td>Com_delete</td>
    <td>执行DELETE操作的次数</td>
  </tr>
  <tr>
    <td>Innodb_rows_read</td>
    <td>select查询返回的行数</td>
  </tr>
  <tr>
    <td>Innodb_rows_inserted</td>
    <td>执行INSERT操作插入的行数</td>
  </tr>
  <tr>
    <td>Innodb_rows_updated</td>
    <td>执行UPDATE操作更新的行数</td>
  </tr>
  <tr>
    <td>Innodb_rows_deleted</td>
    <td>执行DELETE操作删除的行数</td>
  </tr>
  <tr>
    <td>Connections</td>
    <td>视图连接MySQL服务器的次数</td>
  </tr>
  <tr>
    <td>Uptime</td>
    <td>服务器工作时间</td>
  </tr>
  <tr>
    <td>Slow_queries</td>
    <td>慢查询的次数</td>
  </tr>
</table>

<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Com_*** : 这些参数对于所有存储引擎的表操作都会进行累计</span><br><span class="line">Innodb_** : 这几个参数只是针对<span class="type">Innodb</span>存储引擎的，累加的算法也略有不同。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>针对InnoDB存储引擎</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">针对于InnoDB：  </span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Innodb_rows_%'</span>;<span class="comment"># 此时查询出来的为InnoDB的各个操作所影响的行，数量</span></span><br><span class="line"></span><br><span class="line">Innodb_rows_deleted 2 <span class="comment"># 该存储引擎中删去的行数</span></span><br><span class="line">Innodb_rows_inserted 49<span class="comment"># 该存储引擎中插入的行数</span></span><br><span class="line">Innodb_rows_read 380<span class="comment"># 该存储引擎中读取的行数</span></span><br><span class="line">Innodb_rows_updated 15<span class="comment"># 更新的行数</span></span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="keyword">use</span> demo_01l</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> goods_innodb; <span class="comment"># Innodb_rows_read此时会增加，查询出来的结果集有n条记录，则Innodb_rows_read增加n</span></span><br><span class="line"></span><br><span class="line">Innodb_rows_deleted 2 <span class="comment"># 该存储引擎中删去的行数</span></span><br><span class="line">Innodb_rows_inserted 49<span class="comment"># 该存储引擎中插入的行数</span></span><br><span class="line">Innodb_rows_read 382<span class="comment"># 该存储引擎中读取的行数</span></span><br><span class="line">Innodb_rows_updated 15<span class="comment"># 更新的行数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> goods_innodb <span class="keyword">set</span> <span class="keyword">name</span> =<span class="string">'Meta30'</span>; <span class="comment"># Innodb_rows_update此时会增加；修改影响n条记录，则Innodb_rows_update增加n;</span></span><br><span class="line"></span><br><span class="line">Innodb_rows_deleted 2 <span class="comment"># 该存储引擎中删去的行数</span></span><br><span class="line">Innodb_rows_inserted 49<span class="comment"># 该存储引擎中插入的行数</span></span><br><span class="line">Innodb_rows_read 382<span class="comment"># 该存储引擎中读取的行数</span></span><br><span class="line">Innodb_rows_updated 17<span class="comment"># 更新的行数</span></span><br></pre></td></tr></table></figure>

<h2 id="优化SQL步骤-定位低效SQL"><a href="#优化SQL步骤-定位低效SQL" class="headerlink" title="优化SQL步骤 - 定位低效SQL"></a>优化SQL步骤 - 定位低效SQL</h2><p>可以通过以下两种方式定位执行效率较低的SQL语句。  </p>
<ul>
<li>慢查询日志：通过慢查询日志定位那些执行效率较低的SQL语句，用–log-slow-queries[ =file_name ]选项启动时，mysqld写一个包含所有执行时间超过long_query_time秒的SQL语句的日志文件。</li>
<li>show processlist：慢查询日志在查询结束以后才记录，所以在应该用反映执行效率出现问题的时候查询慢日志并不能定位问题，可以使用show processlist命令查看当前MySQL在进行的线程，包括线程的状态、是否锁表等，可以实时地查看SQL的执行情况，同时对一些锁表操作进行优化。(实时)  </li>
</ul>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">show processlist;</span><br><span class="line"></span><br><span class="line"><span class="meta">#（1）id列：用户登录mysql时，系统分配的“connection_id”，可以使用函数connection_id()查看；</span></span><br><span class="line"><span class="meta">#（2）user列：显示当前用户，如果不是root，这个命令就只显示用户权限范围的sql语句；</span></span><br><span class="line"><span class="meta">#（3）host列：显示这个语句是从哪个ip的哪个端口上发的，可以用来跟踪出现问题语句的用户；</span></span><br><span class="line"><span class="meta">#（4）db列：显示这个进程目前连接的是哪个数据库；</span></span><br><span class="line"><span class="meta">#（5）command列：显示当前连接的执行命令，一般取值为休眠（sleep）、查询（query）、连接（connect）等；</span></span><br><span class="line"><span class="meta">#（6）time列，显示这个状态持续的时间，单位是秒；</span></span><br><span class="line"><span class="meta">#（7）state列，显示使用当前连接的sql语句的状态，很重要的列。state描述的是语句执行中的某个状态。一个sql语句，以查询为例，可能需要经过copying to tmp table， sorting result， sending data等状态才可以完成。  </span></span><br><span class="line"><span class="meta">#（8）info列，显示这个sql语句，是判断问题语句的一个重要依据。</span></span><br></pre></td></tr></table></figure>

<h2 id="优化SQL步骤-explain指令介绍"><a href="#优化SQL步骤-explain指令介绍" class="headerlink" title="优化SQL步骤 - explain指令介绍"></a>优化SQL步骤 - explain指令介绍</h2><p>通过以上步骤查询到效率低的SQL语句后，可以通过EXPLAIN或者DESC命令获取MySQL如何执行SELECT语句的信息，包括SELECT语句执行过程中表如何连接和连接的顺序。  </p>
<p>查询SQL语句的执行计划：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_keys</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>tb_item</td>
    <td>const</td>
    <td>PRIMARY</td>
    <td>PRIMARY</td>
    <td>4</td>
    <td>const</td>
    <td>1</td>
    <td>NULL</td>
  </tr>
</table>

<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="built_in">title</span>=<span class="string">'阿尔卡特（OT-979）冰川白 联通3G手机3'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_keys</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>tb_item</td>
    <td>ALL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>9816098</td>
    <td>Using where</td>
  </tr>
</table>

<table>
  <tr>
    <th>字段</th>
    <th>含义</th>
  </tr>
  <tr>
    <td>id</td>
    <td>select查询的序列号，是一组数字，表示的是查询中select子句或者是操作表的顺序。（与表结构执行的顺序有关系）</td>
  </tr>
  <tr>
    <td>select_type</td>
    <td>表示SELECT的类型，常见的取值有SIMPLE（简单表，即不使用表连接或者是子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个SELECT）等</td>
  </tr>
  <tr>
    <td>table</td>
    <td>输出结果集的表（当前输出的数据与哪一张表有关）</td>
  </tr>
  <tr>
    <td>type</td>
    <td>表示表的连接类型，性能由好到差的连接类型为（system---->const---->eq_ref------>ref------->ref_or_null------>index_merge------>index_subquery------->range------>index------>all）</td>
  </tr>
  <tr>
    <td>possible_keys</td>
    <td>表示查询时，可能使用的索引。</td>
  </tr>
  <tr>
    <td>key</td>
    <td>表示实际使用的索引</td>
  </tr>
  <tr>
    <td>key_len</td>
    <td>索引字段的长度</td>
  </tr>
  <tr>
    <td>ref</td>
    <td>引用</td>
  </tr>
  <tr>
    <td>rows</td>
    <td>扫描行的数量</td>
  </tr>
  <tr>
    <td>extra</td>
    <td>执行情况的说明和描述，额外的内容，前面几个字段当中没有表述清楚的，在这个字段当中表述出来</td>
  </tr>
</table>

<blockquote>
<p>explain 用来查看SQL语句的执行计划。</p>
</blockquote>
<h2 id="优化SQL步骤-explain之id"><a href="#优化SQL步骤-explain之id" class="headerlink" title="优化SQL步骤 - explain之id"></a>优化SQL步骤 - explain之id</h2><p><strong>环境准备</strong></p>
<p>用户表、角色表、用户角色表（多对多关系）  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CREATE TABLE <span class="string">'t_role'</span>(</span><br><span class="line">  <span class="string">'id'</span> varchar(32) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'role_name'</span> varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'role_code'</span> varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'description'</span> varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (<span class="string">'id'</span>),</span><br><span class="line">  UNIQUE KEY <span class="string">'union_role_name'</span> (<span class="string">'role_name'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">'t_user'</span>(</span><br><span class="line">  <span class="string">'id'</span> varchar(32) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'username'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'name'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'password'</span> varchar(96)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (<span class="string">'id'</span>),</span><br><span class="line">  UNIQUE KEY <span class="string">'union_user_username'</span> (<span class="string">'user_name'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">'user_role'</span>(</span><br><span class="line">  <span class="string">'id'</span> int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> autoincrement,</span><br><span class="line">  <span class="string">'user_id'</span> varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'role_id'</span> varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (<span class="string">'id'</span>),</span><br><span class="line">  KEY <span class="string">'fk_ur_user_id'</span>(<span class="string">'user_id'</span>),</span><br><span class="line">  KEY <span class="string">'fk_ur_role_id'</span>(<span class="string">'role_id'</span>),</span><br><span class="line">  CONSTRAINT <span class="string">'fk_ur_role_id'</span> FOREIGN KEY (<span class="string">'role_id'</span>) REFERENCES <span class="string">'t_role'</span> (<span class="string">'id'</span>) ON DELETE <span class="literal">NO</span> ACTION ON UPDATE <span class="literal">NO</span> ACTION,</span><br><span class="line">  CONSTRAINT <span class="string">'fk_ur_user_id'</span> FOREIGN KEY (<span class="string">'user_id'</span>) REFERENCES <span class="string">'t_user'</span> (<span class="string">'id'</span>) ON DELETE <span class="literal">NO</span> ACTION ON UPDATE <span class="literal">NO</span> ACTION</span><br><span class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入用戶数据</span></span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'1'</span>,<span class="string">'老王'</span>,<span class="string">'xxxxxyyyyyyy'</span>,<span class="string">'超级管理员'</span>);</span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'2'</span>,<span class="string">'老李'</span>,<span class="string">'xxxxxyyyyyyyzzzzz'</span>,<span class="string">'系统管理员'</span>);</span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'3'</span>,<span class="string">'老头子'</span>,<span class="string">'xxxxxyyyytyyyzzzzz'</span>,<span class="string">'学生1'</span>);</span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'4'</span>,<span class="string">'老婆子'</span>,<span class="string">'xxxxxyywyyyyyzzzzz'</span>,<span class="string">'学生2'</span>);</span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'5'</span>,<span class="string">'super'</span>,<span class="string">'xxxxxyyfyyyyyzzzzz'</span>,<span class="string">'学生3'</span>);</span><br><span class="line">insert into <span class="string">'t_user'</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'password'</span>,<span class="string">'name'</span>) values(<span class="string">'6'</span>,<span class="string">'admin'</span>,<span class="string">'xxxxxyyyyyyyzzzzze'</span>,<span class="string">'学生4'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入角色数据</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="comment"># 插入用户角色数据</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure>

<p><strong>explain当中的id字段</strong></p>
<p>id字段是select查询的序号(并不是自增，控制表结构的执行顺序)，是一组数字，表示是的是处查询中执行select子句或者是操作表的顺序，id情况有三种：<br>（1）<strong>id相同表示加载表的顺序是从上到下</strong>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_role r,t_user u,user_role ur <span class="keyword">where</span> r.id=ur.role_id <span class="keyword">and</span> u.id=ur.user_id;<span class="comment"># 多表联查</span></span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_keys</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>r</td>
    <td>PRIMARY</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>5</td>
    <td>NULL</td>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>ur</td>
    <td>ref</td>
    <td>fk_ur_user_id,fk_ur_role_id</td>
    <td>fk_ur_role_id</td>
    <td>99</td>
    <td>db03.r.id</td>
    <td>1</td>
    <td>Using where</td>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>u</td>
    <td>eq_ref</td>
    <td>PRIMARY</td>
    <td>PRIMARY</td>
    <td>98</td>
    <td>db.ur.user_id</td>
    <td>1</td>
    <td>NULL</td>
  </tr>
</table>

<p>（2）<strong>id不同id值越大，优先级越高，越先被执行</strong>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_role <span class="keyword">WHERE</span> <span class="keyword">id</span>=</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> role_id <span class="keyword">FROM</span> user_role <span class="keyword">WHERE</span> user_id=</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> t_user <span class="keyword">WHERE</span> username=<span class="string">'stu1'</span></span><br><span class="line">  )</span><br><span class="line">)<span class="comment"># 嵌套子查询</span></span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_keys</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>PRIMARY</td>
    <td>t_role</td>
    <td>const</td>
    <td>PRIMARY</td>
    <td>PRIMARY</td>
    <td>98</td>
    <td>const</td>
    <td>1</td>
    <td>NULL</td>
  </tr>
  <tr>
    <td>2</td>
    <td>SUBQUERY</td>
    <td>user_role</td>
    <td>ref</td>
    <td>fk_ur_user_id</td>
    <td>fk_ur_user_id</td>
    <td>99</td>
    <td>const</td>
    <td>1</td>
    <td>Using where</td>
  </tr>
  <tr>
    <td>3</td>
    <td>SUBQUERY</td>
    <td>t_user</td>
    <td>const</td>
    <td>unique_user_username</td>
    <td>unique_user_username</td>
    <td>137</td>
    <td>const</td>
    <td>1</td>
    <td>Using index</td>
  </tr>
</table>

<p>（3）<strong>id有相同，也有不同，同时存在。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。</strong>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_role r,</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> user_role ur <span class="keyword">WHERE</span> ur.<span class="string">'user_id'</span>=<span class="string">'2'</span></span><br><span class="line">) a  </span><br><span class="line"><span class="keyword">WHERE</span> r.id=a.role_id;  </span><br><span class="line"><span class="comment">#三表查询又连接了一个子查询</span></span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_keys</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>PRIMARY</td>
    <td>< derived2></td>
    <td>ALL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>2</td>
    <td>Using where</td>
  </tr>
  <tr>
    <td>1</td>
    <td>PRIMARY</td>
    <td>r</td>
    <td>eq_ref</td>
    <td>PRIMARY</td>
    <td>PRIMARY</td>
    <td>98</td>
    <td>a.role_id</td>
    <td>1</td>
    <td>NULL</td>
  </tr>
  <tr>
    <td>2</td>
    <td>DERIVED</td>
    <td>ur</td>
    <td>ref</td>
    <td>fk_ur_user_id</td>
    <td>fk_ur_user_id</td>
    <td>99</td>
    <td>const</td>
    <td>1</td>
    <td>Using index condition</td>
  </tr>
</table>

<h2 id="优化SQL步骤-explain之select-type"><a href="#优化SQL步骤-explain之select-type" class="headerlink" title="优化SQL步骤 - explain之select_type"></a>优化SQL步骤 - explain之select_type</h2><p><strong>explain之select_type</strong><br>表示SELECT的类型，常见的取值，如下表所示（从上往下，效率越来越低）：  </p>
<table>
  <tr>
    <th>select_type</th>
    <th>含义</th>
  </tr>
  <tr>
    <td>SIMPLE</td>
    <td>简单的select查询，查询中不包含子查询或者UNION。</td>
  </tr>
  <tr>
    <td>PRIMARY</td>
    <td>查询中若包含任何复杂的子查询，最外层查询标记为该标识。</td>
  </tr>
  <tr>
    <td>SUBQUERY</td>
    <td>在SELECT或者WHERE列表中包含了子查询。</td>
  </tr>
  <tr>
    <td>DERIVED</td>
    <td>在FROM列表中包含的子查询，被标记为DERIVED（衍生）MYSQL或递归执行这些子查询，把结果放在临时表中。</td>
  </tr>
  <tr>
    <td>UNION</td>
    <td>若第二个SELECT出现在UNION之后，则标记为UNION；若UNION包含在FROM子句的子查询中，外层SELECT将标记为：DERIVED</td>
  </tr>
  <tr>
    <td>UNION RESULT</td>
    <td>从UNION表获取结果的SELECT</td>
  </tr>
</table>

<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item;</span><br><span class="line"># SIMPLE  </span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=(<span class="keyword">select</span> id <span class="keyword">from</span> user_role <span class="keyword">where</span> role_id=<span class="string">'9'</span>);  </span><br><span class="line"># <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id： <span class="keyword">PRIMARY</span> ；  </span><br><span class="line">#(<span class="keyword">select</span> id <span class="keyword">from</span> user_role <span class="keyword">where</span> role_id=<span class="string">'9'</span>)：SUBQUERY  </span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> a.* <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="string">'1'</span>,<span class="string">'2'</span>)) a;</span><br><span class="line"># <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="string">'1'</span>,<span class="string">'2'</span>): <span class="keyword">DERIVED</span>；存储至衍生的临时表</span><br><span class="line"># <span class="keyword">select</span> a.* <span class="keyword">from</span> ： <span class="keyword">PRIMARY</span>  derived2指的是<span class="keyword">derived</span>指的是衍生的表a，<span class="number">2</span>则指的是id，执行操作表顺序字段；</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'1'</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'2'</span>;</span><br><span class="line">#<span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'1'</span>: <span class="keyword">PRIMARY</span></span><br><span class="line">#<span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'2'</span> ： <span class="keyword">UNION</span></span><br><span class="line"># <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'1'</span>的结果  &amp;&amp;  <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'2'</span>的结果联合起来： <span class="keyword">UNION</span> RESULT</span><br></pre></td></tr></table></figure>

<h2 id="优化SQL步骤-explain之table-、type"><a href="#优化SQL步骤-explain之table-、type" class="headerlink" title="优化SQL步骤 - explain之table 、type"></a>优化SQL步骤 - explain之table 、type</h2><p><strong>explain之table</strong><br>展示这一行的数据是关于哪一张表的；  </p>
<p><strong>explain之type</strong><br>type显示的是访问类型，是较为重要的一个指标，可取值为：  </p>
<table>
  <tr>
    <th>type</th>
    <th>含义</th>
  </tr>
  <tr>
    <td>NULL</td>
    <td>MySQL不访问任何表，索引，直接返回结果</td>
  </tr>
  <tr>
    <td>system</td>
    <td>表只有一行记录（等同于系统表），这是const类型的特例，一般不会出现</td>
  </tr>
  <tr>
    <td>const</td>
    <td>表示通过索引一次就找到了，const用于比较primary key或者unique索引。因为只匹配一行数据，索引很快。如将主键置于where列表中，MySQL就能将该查询转换成一个常量。(根据主键或者唯一索引进行查询)</td>
  </tr>
  <tr>
    <td>eq_ref</td>
    <td>类似ref，区别在于使用的是唯一索引，使用主键的关联查询，关联查询出的记录只有一条。常见于主键或唯一索引扫描</td>
  </tr>
  <tr>
    <td>ref</td>
    <td>非唯一性索引扫描，返回皮诶某个单独值的所有行。本质上也是野种索引访问，返回所有匹配某个单独值的所有行（多个）</td>
  </tr>
  <tr>
    <td>range</td>
    <td>只检索给定返回的行，使用一个索引来选择行。where之后出现between，<，>，in等操作</，></td>
  </tr>
  <tr>
    <td>index</td>
    <td>index与ALL的区别为index类型只是遍历了索引树，通常比ALL快，ALL是遍历数据文件。</td>
  </tr>
  <tr>
    <td>all</td>
    <td>将遍历全表以找到匹配的行</td>
  </tr>
</table>

<p><strong>type为NULL</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> now(); # 查询当前时间(查询效率非常高) ： <span class="keyword">type</span>-&gt;<span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例：</p>
</blockquote>
<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_keys</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>No tables used</td>
  </tr>
</table>

<p><strong>type为system</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> id=<span class="string">'1'</span>) a;： <span class="keyword">type</span>-&gt;<span class="keyword">system</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例：</p>
</blockquote>
<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_keys</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>PRIMARY</td>
    <td>< derived2></td>
    <td>system</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>1</td>
    <td>NULL</td>
  </tr>
  <tr>
    <td>2</td>
    <td>DERIVED</td>
    <td>t_user</td>
    <td>const</td>
    <td>PRIMARY</td>
    <td>PRIMARY</td>
    <td>98</td>
    <td>const</td>
    <td>1</td>
    <td>NULL</td>
  </tr>
</table>

<p><strong>type为const</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">id</span>=<span class="string">'1'</span>;<span class="comment"># 根据主键查询返回一条记录：type-&gt;const</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例：</p>
</blockquote>
<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_keys</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>t_user</td>
    <td>const</td>
    <td>PRIMARY</td>
    <td>PRIMARY</td>
    <td>98</td>
    <td>const</td>
    <td>1</td>
    <td>NULL</td>
  </tr>
</table>

<p><strong>type为const</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> username=<span class="string">'stu1'</span>;<span class="comment">#根据唯一索引查询返回一条记录：type-&gt;const</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例：</p>
</blockquote>
<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_keys</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>t_user</td>
    <td>const</td>
    <td>unique_user_username</td>
    <td>unique_user_username</td>
    <td>137</td>
    <td>const</td>
    <td>1</td>
    <td>NULL</td>
  </tr>
</table>

<p><strong>type为eq_ref</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_user;//id有1、2、3、4、5、6</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_role;//id有10、5、7、8、9</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user u ,t_role r <span class="keyword">where</span> u.id=r.id;<span class="comment">#业务逻辑层面不符合，只是数据库硬性查询（强行关联）出一个type为eq_ref的示例而已</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例：</p>
</blockquote>
<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_keys</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>r</td>
    <td>ALL</td>
    <td>PRIMARY</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>5</td>
    <td>NULL</td>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>u</td>
    <td>eq_ref</td>
    <td>PRIMARY</td>
    <td>PRIMARY</td>
    <td>98</td>
    <td>demo_02.r.id</td>
    <td>1</td>
    <td>NULL</td>
  </tr>
</table>

<p><strong>type为ref</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> t_user;<span class="comment">#查询t_user表当中的索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_user_name <span class="keyword">on</span> t_user(<span class="string">'name'</span>);</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'a'</span>;<span class="comment">#根据非唯一性索引进行查询，返回的记录只有一条</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例：</p>
</blockquote>
<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_keys</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>t_user</td>
    <td>ref</td>
    <td>idx_user_name</td>
    <td>idx_user_name</td>
    <td>137</td>
    <td>const</td>
    <td>1</td>
    <td>Using index condition</td>
  </tr>
</table>

<p><strong>type为range(范围查询)</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">explain <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.（between <span class="keyword">and</span>）、（&gt;、&lt;、&gt;=、&lt;=）<span class="built_in">..</span>.</span><br></pre></td></tr></table></figure>

<p><strong>type为index(指的即索引)</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user;//查询所有数据，进行全表扫描，即到数据文件当中进行读取；<span class="keyword">type</span>为<span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id <span class="keyword">from</span> t_user;//此时<span class="keyword">type</span>为<span class="keyword">index</span>；因为id为主键，主键则走主键索引；</span><br></pre></td></tr></table></figure>

<p>结果值从最好到最坏依次是：  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="literal">NULL</span> &gt;<span class="built_in"> system </span>&gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; all</span><br></pre></td></tr></table></figure>

<h2 id="优化SQL步骤-explain之key-rows-extra"><a href="#优化SQL步骤-explain之key-rows-extra" class="headerlink" title="优化SQL步骤 - explain之key rows extra"></a>优化SQL步骤 - explain之key rows extra</h2><p><strong>explain之key</strong>  </p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">possible_keys:</span>显示可能应用在这张表的索引，一个或者多个；</span><br><span class="line"><span class="symbol">key:</span>实际使用的索引，如果为NULL，则没有使用索引；</span><br><span class="line">key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好（越短执行效率越高）；</span><br></pre></td></tr></table></figure>

<p><strong>explain之rows</strong>  </p>
<p>扫描行的数量。  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="type">name</span> =<span class="string">'a'</span>;#<span class="type">name</span>建了索引，所以查询<span class="keyword">rows</span>为<span class="number">1</span>行</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">password</span>=<span class="string">'aaa'</span>;# <span class="keyword">password</span>没有建立索引，整表扫描；<span class="keyword">rows</span>即<span class="keyword">SQL</span>语句查询时所查询的行数；</span><br></pre></td></tr></table></figure>

<p><strong>explain之extra</strong>  </p>
<p>其他的额外的执行计划信息，在该列展示。<br>（using_filesort以及using_temporary非常耗性能；需要优化using_filesort以及using_temporary；保持using_index）</p>
<table>
  <tr>
    <th>extra</th>
    <th>含义</th>
  </tr>
  <tr>
    <td>using_filesort</td>
    <td>说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取，称为“文件排序”</td>
  </tr>
  <tr>
    <td>using_temporary</td>
    <td>使用了临时表保存中间结果，MySQL对查询结果排序时使用临时表。常见于order by 和group by</td>
  </tr>
  <tr>
    <td>using_index</td>
    <td>表示相应的select操作使用了覆盖索引，避免访问表的数据行，效率不错。</td>
  </tr>
</table>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>;<span class="comment">#按照id进行排序</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">password</span>;<span class="comment">#根据文件进行排序；即需要扫描文件当中的内容，然后再去进行排序；效率非常低；这个时候如果需要进行优化的话，可以在password字段上与name一样建立索引；</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span>; <span class="comment">#此时依然是using_filesort根据文件排序</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> t_user <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span>;<span class="comment">#此时则使用的是using_index根据索引排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span>;<span class="comment">#此时extra为null，原因是根据name字段建立了索引</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">password</span>;<span class="comment">#此时password字段没有建立索引；extra为using temporary；using filesort效率低；</span></span><br></pre></td></tr></table></figure>

<h2 id="优化SQL步骤-show-profile"><a href="#优化SQL步骤-show-profile" class="headerlink" title="优化SQL步骤 - show profile"></a>优化SQL步骤 - show profile</h2><p>MySQL从5.0.37版本开始增加了对 show profiles 和show profile语句的支持。  </p>
<p>show profiles能够在做SQL优化时帮助了解事件都耗费到哪里去了；  </p>
<p>通过 have_profiling 参数，能够看到当前MySQL是否支持profile；  </p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">select</span> <span class="comment">@@</span>have_profiling;<span class="meta">#系统变量；YES/NO</span></span><br></pre></td></tr></table></figure>

<p>默认 profiling 是关闭的，可以通过set语句在Session级别开启profiling：  </p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="symbol">@profiling</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">set</span> <span class="attribute">profiling</span>=1;# 开启profiling开关；0:未开启；1：开启</span><br></pre></td></tr></table></figure>

<p>通过profile，能够更清楚的了解SQL执行的过程；<br>首先，可以执行一系列的操作，如下图所示：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> db01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title=<span class="string">'abc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">profiles</span>;<span class="comment">#查看之前每一个操作的耗时情况 query_id(当前查询的id)、duration（执行的耗时时间）、query（查询的sql）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use db01;其实底层即select database();</span></span><br></pre></td></tr></table></figure>

<p>执行完上述命令之后，再执行show profiles指令，来查看SQL语句执行的耗时：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">profiles</span>;<span class="comment"># query_id、duration、query</span></span><br></pre></td></tr></table></figure>

<p>通过 show profile for query query_id 语句可以查看到该SQL执行过程中每个线程的状态和消耗的时间；  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">show<span class="built_in"> profile </span><span class="keyword">for</span> query 6;#6即通过show profiles查询出来的query_id;  status、duration</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>status（经历的每一个阶段）</th>
    <th>duration（每一个阶段的耗时情况）</th>
  </tr>
  <tr>
    <td>starting（开启）</td>
    <td>0.000046</td>
  </tr>
  <tr>
    <td>checking permissions（校验权限）</td>    <td>...</td>
  </tr>
  <tr>
    <td>opening tables（打开表）</td>    <td>...</td>
  </tr>
    <tr>
    <td>init（初始化）</td>    <td>...</td>
  </tr>
    <tr>
    <td>system lock（系统锁）</td>    <td>...</td>
  </tr>
    <tr>
    <td>optimizing（优化器）</td>    <td>...</td>
  </tr>
    <tr>
    <td>statistics（统计）</td>    <td>...</td>
  </tr>
    <tr>
    <td>perparing（准备）</td>    <td>...</td>
  </tr>
    <tr>
    <td>executing（执行）</td>    <td>...</td>
  </tr>
    <tr>
    <td>sending data（发送数据）</td>    <td>...</td>
  </tr>
    <tr>
    <td>end（结束）</td>    <td>...</td>
  </tr>
    <tr>
    <td>query end（查询结束）</td>    <td>...</td>
  </tr>
    <tr>
    <td>closing tabls（关闭表）</td>    <td>...</td>
  </tr>
    <tr>
    <td>freeing itmes（释放其他项）</td>    <td>...</td>
  </tr>
    <tr>
    <td>cleaning up（清除）</td>
    <td>...</td>
  </tr>
</table>

<p>（select count(*) from tb_item；该sql语句的时间都耗费在sending data上了；）  </p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="symbol">TIP:  </span></span><br><span class="line"><span class="code">    Sending data 状态表示MySQL线程开始访问数据行并把结果放回给客户端，而不仅仅是返回给客户端。  </span></span><br><span class="line"><span class="code">    由于Sending data 状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整个查询中耗时最长的状态。</span></span><br></pre></td></tr></table></figure>

<p>在获取到最耗时时间的线程状态后，MySQL支持进一步选择all、cpu、block io、context switch、page faults 等明细类型等查看MySQL在使用什么资源上耗费了过高的时间。<br>例如，选择查看CPU的耗费时间：  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select<span class="built_in"> profile </span>cpu <span class="keyword">for</span> query 6;# status、duration、CPU_user、CPU_System查询到的是id为6的该条sql语句在各个阶段当中cpu的耗费情况；</span><br><span class="line"></span><br><span class="line">select<span class="built_in"> profile </span>all <span class="keyword">for</span> query 6;# status、duration、CPU_user、CPU_system、context_voluntary、context_involuntary、block_ops_in、block_ops_out、<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过show profile可以分析SQL语句各个阶段的耗时情况</p>
</blockquote>
<h2 id="优化SQL步骤-trace工具"><a href="#优化SQL步骤-trace工具" class="headerlink" title="优化SQL步骤 - trace工具"></a>优化SQL步骤 - trace工具</h2><p>mysql的服务端server有一个步骤就是optimizer，优化sql部分；按照mysql当中具体对应的规则对SQL进行优化处理；trace即分析优化器</p>
<p><strong>trace分析优化器执行计划</strong><br>MySQL5.6提供了对SQL的跟踪 trace，通过trace文件能够进一步了解为什么优化器选择A计划，而不是B计划。  </p>
<p>打开trace，设置格式为JSON，并设置trace最大能够使用的内存大小，避免解析过程中因为默认内存过小而不能够完整展示。  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">SET</span> optimizer_trace =<span class="string">'enabled=on'</span>, <span class="attribute">end_markers_in_json</span>=on;# optimizer_trace =<span class="string">'enabled=on'</span>进行开启；<span class="attribute">end_markers_in_json</span>=on 设置格式为JSON</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">optimizer_trace_max_mem_size</span>=1000000;# 日志文件占用内存大小</span><br></pre></td></tr></table></figure>

<p>执行SQL语句：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">4</span>;</span><br></pre></td></tr></table></figure>

<p>最后，检查information_schema.optimizer_trace就可以知道MySQL是如何执行SQL的：  </p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> infomation_schema.optimizer_trace\G;# infomation_schema系统库；optimizer_trace系统库当中的日志表</span><br><span class="line"></span><br><span class="line"># QUERY 查询的SQL语句；<span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> id&lt;<span class="number">4</span>;</span><br><span class="line"># TRACE 跟踪信息；在跟踪信息当中最终<span class="keyword">select</span> * 当中的* 最终解析为tb_item表当中的每一个具体的字段</span><br></pre></td></tr></table></figure>

<h2 id="索引的使用-验证索引提升查询效率"><a href="#索引的使用-验证索引提升查询效率" class="headerlink" title="索引的使用 - 验证索引提升查询效率"></a>索引的使用 - 验证索引提升查询效率</h2><p><strong>索引的使用</strong><br>索引时候数据库优化最常用也是最重要的手段之一，通过索引通常可以帮助用户解决大多数的MySQL的性能优化问题；  </p>
<p><strong>验证索引提升查询效率</strong><br>在准备的表结构tb_item中，一共存储了300万条记录；  </p>
<p><strong>A.</strong> 根据ID查询  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_items;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1888</span>;<span class="comment">#id字段具有主键索引</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1999</span>\G;</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据title进行精确查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title=<span class="string">'阿尔卡特'</span>;<span class="comment">#查询速度慢，因为title字段没有索引，查询效率低，创建主键即自动生成主键索引；</span></span><br><span class="line"><span class="comment">#查看SQL语句的执行计划：  </span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title=<span class="string">'阿尔卡特'</span>\G;</span><br></pre></td></tr></table></figure>

<p>处理方案，针对title字段，创建索引：  </p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_item_title <span class="keyword">on</span> tb_item(<span class="built_in">title</span>);</span><br></pre></td></tr></table></figure>

<p>索引创建完成之后，再次查询：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title=<span class="string">'阿尔卡特'</span>\G;</span><br><span class="line"><span class="comment"># 创建索引的过程中，mysql在做什么？表tb_item中有300万条记录，那么在创建索引的时候就会对这300万条记录重建索引；所以此时即数据库底层在重建索引；创建完索引之后再进行查询效率则变快；索引是优化查询最有效的方式之一；</span></span><br></pre></td></tr></table></figure>

<p>查询速度很快，接近0s，主要的原因是因为id为主键，有索引；  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1999</span>\G;</span><br></pre></td></tr></table></figure>

<p><strong>准备环境</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">'tb_seller'</span>(</span><br><span class="line">  <span class="string">'sellerid'</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="string">'name'</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="string">'nickname'</span> <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  <span class="string">'password'</span> <span class="built_in">varchar</span>(<span class="number">60</span>),</span><br><span class="line">  <span class="string">'status'</span> <span class="built_in">varchar</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="string">'address'</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="string">'createtime'</span> datetime,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="string">'sellerid'</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入记录 导入基本数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_seller <span class="keyword">values</span> ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建联合索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name_sta_addr <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>,<span class="keyword">status</span>,address);</span><br></pre></td></tr></table></figure>

<p>创建了索引并不是一定会提高效率；创建了索引并且需要合理运用索引才能够提高查询效率；  </p>
<h2 id="索引的使用-全值匹配"><a href="#索引的使用-全值匹配" class="headerlink" title="索引的使用 - 全值匹配"></a>索引的使用 - 全值匹配</h2><p><strong>避免索引失效</strong>  </p>
<p>(1) 全值匹配，对索引中所有列都指定具体值。<br>该情况下，索引生效，执行效率提高。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>\G;</span><br></pre></td></tr></table></figure>

<h2 id="索引的使用-最左前缀法则"><a href="#索引的使用-最左前缀法则" class="headerlink" title="索引的使用 - 最左前缀法则"></a>索引的使用 - 最左前缀法则</h2><p><strong>避免索引失效</strong>  </p>
<p>(2)最左前缀法则<br>tb_seller创建了一个复合索引即name、status、address这三个字段；<br>如果索引了多列，要遵守最左前缀法则。<br>指的是查询从索引的最左前列开始，并且不跳过索引中的列。<br>匹配最左前缀法则，走索引：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">'小米科技'</span>;<span class="comment"># key:idx_name_sta_addr； key_len：403</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'1'</span>;<span class="comment"># key:idx_name_sta_addr； key_len：410</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>;<span class="comment"># key:idx_name_sta_addr； key_len：813</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>;<span class="comment"># key:NULL key_len：NULL 此时则不再走索引；因为不再符合最左前缀法则，没有以最左边的列开始；  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span> <span class="keyword">and</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;<span class="comment"># key:idx_name_sta_addr； key_len：813 此时是走索引的；与where列表当中字段的先后顺序无关；会检查where条件列表中包不包含最左列；而是与复合索引当中的是否存在有复合索引当中的最左字段；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span> ;<span class="comment">#跳过索引列不走索引; key:idx_sellter_name_sta_addr；key_len: 403；此时索引的长度是403；也就是这是执行 explain select * from tb_seller where name ='小米科技'; 时所走的索引；即后面的 and address='北京市' 并未走索引；</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>违反最左前缀法则，索引失效；<br>需要包含复合索引当中的最左列，并且不能跳过复合索引当中的某一列进行查询否则复合索引失效；</p>
</blockquote>
<h2 id="索引的使用-索引失效情况（范围查询、字段运算）"><a href="#索引的使用-索引失效情况（范围查询、字段运算）" class="headerlink" title="索引的使用 - 索引失效情况（范围查询、字段运算）"></a>索引的使用 - 索引失效情况（范围查询、字段运算）</h2><p><strong>避免索引失效</strong>  </p>
<p>（3）范围查询右边的列，不能使用索引；<br>根据前面的两个字段name、status查询是走索引的，但是最后一个条件address没有用到索引。  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">explain select * <span class="keyword">from</span> tb_seller where <span class="attribute">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="attribute">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> <span class="attribute">address</span>=<span class="string">'北京市'</span>;# key:idx_name_sta_addr； key_len：813；此时三个字段name、status、address三个字段都走了索引；  </span><br><span class="line"></span><br><span class="line">explain select * <span class="keyword">from</span> tb_seller where name =<span class="string">'小米科技'</span> <span class="keyword">and</span> status &gt;<span class="string">'1'</span> <span class="keyword">and</span><span class="built_in"> address </span>=<span class="string">'北京市'</span>;# key:idx_name_sta_addr； key_len：410;此时走的索引是name和status字段的索引；而范围查询status&gt;<span class="string">'1'</span>之后的address并没有走索引；  </span><br><span class="line"><span class="comment"># 范围查询之后的索引字段将失效</span></span><br></pre></td></tr></table></figure>

<p>（4）不要在索引列上进行运算操作，索引将失效；  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller  <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;<span class="comment">#此时走索引</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">substring</span>(<span class="keyword">name</span>,<span class="number">3</span>,<span class="number">2</span>)=<span class="string">'科技'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">substring</span>(<span class="keyword">name</span>,<span class="number">3</span>,<span class="number">2</span>)=<span class="string">'科技'</span>;<span class="comment">#此时key为null以及key_len为null；而type为ALL则说明了进行了全表扫描；没有走索引</span></span><br></pre></td></tr></table></figure>

<p>（5）字符串不加单引号，会造成索引失效；  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'0'</span>;<span class="comment"># 此时key:idx_name_sta_addr；key_len：410；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="number">0</span>;<span class="comment"># 此时key：idx_name_sta_addr；key_len：403；索引长度为403；则说明走的索引为name字段的索引；而status字段的索引并没有走；造成了status=0 该索引字段的失效；当status字段取值没有加单引号时，mysql底层检测到status字段为varchar类型所以会对其没有加单引号的取值进行隐式类型转换；隐式类型转换了之后该status索引字段就失效了；因为底层对该字段进行了运算操作；</span></span><br></pre></td></tr></table></figure>

<h2 id="索引的使用-覆盖索引"><a href="#索引的使用-覆盖索引" class="headerlink" title="索引的使用 - 覆盖索引"></a>索引的使用 - 覆盖索引</h2><p><strong>避免索引失效</strong>  </p>
<p>（6）尽量使用覆盖索引，避免使用 select *  </p>
<p>尽量使用覆盖索引（只访问索引的查询（索引列完全包含查询列）），减少select * ；  </p>
<p>如果查询列，超出索引列，也会降低性能；  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> =<span class="string">'小米科技'</span>;# extra为<span class="keyword">using</span> <span class="keyword">index</span> condition指的是：在查询的时候确实用到了<span class="type">name</span>这个字段的索引；但是用到了<span class="type">name</span>这个字段的索引信息之后，在返回数据的时候还需要进行索引回调查询；  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="type">name</span> , status ,address <span class="keyword">where</span> <span class="type">name</span>=<span class="string">'小米科技'</span>; # 此时extra为<span class="keyword">using</span> <span class="keyword">where</span> ;<span class="keyword">using</span> <span class="keyword">index</span>；此时表示的是：可以通过索引进行查询；但是此时并不需要进行回调查询了；原因就在于查询的字段在索引结构当中已经被记录了；所以并不需要去进行回调查询；  </span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="type">name</span> , status  <span class="keyword">where</span> <span class="type">name</span>=<span class="string">'小米科技'</span>;#同上</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="type">name</span> ,  address <span class="keyword">where</span> <span class="type">name</span>=<span class="string">'小米科技'</span>;#同上</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="type">name</span> ,  address ,<span class="keyword">password</span> <span class="keyword">where</span> <span class="type">name</span>=<span class="string">'小米科技'</span>;#复合索引当中并未包括<span class="keyword">password</span>字段则此时<span class="type">name</span>索引字段以及address索引字段当中并没有包括<span class="keyword">password</span>字段的信息，则此时需要去回调查询<span class="keyword">password</span>字段的信息；即extra为<span class="keyword">using</span> index_condition</span><br></pre></td></tr></table></figure>

<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="symbol">TIP:  </span></span><br><span class="line">索引回调查询指的是：  </span><br><span class="line"><span class="code">    using index : 使用覆盖索引的时候就会出现</span></span><br><span class="line"><span class="code">    using where : 在查找使用索引的情况下，需要回表去查询所需的数据</span></span><br><span class="line"><span class="code">    using index condition ：查找使用了索引，但是需要回表查询数据（从索引当中拿到了数据，然后再到表结构当中去拿到该数据对应的一整行数据，因为该name索引字段并没有记录所有的数据，只是记录了那么字段的数据；所以需要回表查询数据；即用了索引还需要回调查询）</span></span><br><span class="line"><span class="code">    using index ; using where : 查找使用了索引，但是需要的数据都在索引列中能找到，索引不需要回表查询数据</span></span><br></pre></td></tr></table></figure>

<p>（7） in走索引，not in 索引失效</p>
<h2 id="索引的使用-or索引失效情况"><a href="#索引的使用-or索引失效情况" class="headerlink" title="索引的使用 - or索引失效情况"></a>索引的使用 - or索引失效情况</h2><p><strong>避免索引失效</strong><br>（7）用or分隔开的条件，如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到；  </p>
<p>示例：name字段是索引列，而createtime不是索引列，中间是or进行连接是不走索引的；  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> createtime=<span class="string">'2088-01-01 12:00:00'</span>\G;<span class="comment">#key:idx_name_sta_addr； key_len: 403;此时走索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">or</span> createtime=<span class="string">'2088-01-01 12:00:00'</span>\G;<span class="comment">#key:idx_name_sta_addr； key_len: NULL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> nickname=<span class="string">'小米官方旗舰店'</span>;<span class="comment">#此时走索引；key_len:403;走的是name字段的索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">or</span> nickname=<span class="string">'小米官方旗舰店'</span>;<span class="comment">#换成or之后，nickname字段非索引字段；所以此时将全表扫描；不会走索引；key_len:NULL；以及type为ALL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or之后的字段如果没有索引的话；那么整个where列表当中即便有索引字段也将都失效，不再走索引；</span></span><br></pre></td></tr></table></figure>

<h2 id="索引的使用-like模糊匹配"><a href="#索引的使用-like模糊匹配" class="headerlink" title="索引的使用 - like模糊匹配"></a>索引的使用 - like模糊匹配</h2><p><strong>避免索引失效</strong>  </p>
<p>（8）以%开头的Like模糊查询，索引失效。  </p>
<p>如果仅仅是尾部模糊查询，索引不会失效。<br>如果是头部模糊查询匹配，则索引失效。  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">like</span> <span class="string">'小米科技'</span>;#key: idx_name_sta_addr； key_len: <span class="number">403</span>; 此时走索引；索引走的是<span class="type">name</span>字段</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">like</span> <span class="string">'%小米科技'</span>;#key: <span class="keyword">NULL</span>； key_len: <span class="keyword">NULL</span>; 此时不走索引；且<span class="keyword">type</span>为<span class="keyword">ALL</span>；全表扫描</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">like</span> <span class="string">'%小米科技%'</span>;#key: <span class="keyword">NULL</span>； key_len: <span class="keyword">NULL</span>; 此时不走索引；且<span class="keyword">type</span>为<span class="keyword">ALL</span>；全表扫描</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">like</span> <span class="string">'科技%'</span>;#key: idx_name_sta_addr； key_len: <span class="number">403</span>; 此时走索引；索引走的是<span class="type">name</span>字段</span><br></pre></td></tr></table></figure>

<p>类似 “%科技%” 这种情况在业务逻辑处理当中还是比较多的；但是这样效率将十分低下；所以针对这种情况的处理方式为：<br>覆盖索引：覆盖索引指的是，尽量不要使用select * 这种方式进行查询；而是使用复合索引当中的那些索引列，即索引字段；即复合索引为idx_name_sta_addr，当中包含的索引字段为name、status、address；所以select 查询列名称的时候尽量查询的列名称为复合索引当中的索引列，或者是其他索引的字段（例如唯一索引的索引字段、主键索引的索引字段等）；<br>即通过覆盖索引就可以解决 “%科技%” like模糊查询效率低下的情况（条件是select 查询的字段都需要是索引字段，如果出现了查询非索引字段则将不再走索引）；  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> sellerid <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%科技%'</span>;<span class="comment"># 则此时是走索引的；key:idx_seller_name_sta_addr；key_len：813；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> sellerid,<span class="keyword">name</span> <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%科技%'</span>;<span class="comment"># 则此时是走索引的；key:idx_seller_name_sta_addr；key_len：813；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> sellerid,<span class="keyword">name</span>,<span class="keyword">status</span>,address <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%科技%'</span>;<span class="comment"># 则此时是走索引的；key:idx_seller_name_sta_addr；key_len：813；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> sellerid,<span class="keyword">name</span>,<span class="keyword">status</span>,address,<span class="keyword">password</span> <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%科技%'</span>;<span class="comment"># 则此时是不走索引的，由于password字段并不是索引字段，所以将造成不会走索引的局面；key:NULL；key_len：NULL；</span></span><br></pre></td></tr></table></figure>

<h2 id="索引的使用-全表扫描更快"><a href="#索引的使用-全表扫描更快" class="headerlink" title="索引的使用 - 全表扫描更快"></a>索引的使用 - 全表扫描更快</h2><p><strong>避免索引失效</strong>  </p>
<p>（9）如果MySQL评估使用索引比全表更慢，则不使用索引；  </p>
<p>如果发现走全表扫描比走索引要快，这个时候mysql就会走全表扫描；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address=<span class="string">'北京市'</span>;<span class="comment">#此时key:NULL 以及key_len: NULL；由于address是复合索引当中的索引字段但是又不满足最左前缀法则；所以不走索引；  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);<span class="comment">#在tb_seller表中的address字段上建立索引；单列索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address=<span class="string">'北京市'</span>;<span class="comment"># 但是此时仍然没有走索引；possible_key出现有idx_seller_address；但是key为NULL；以及key_len为NULL；type为ALL；即走的还是全表扫描</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address=<span class="string">'西安市'</span>;<span class="comment">#此时是走索引的，key为idx_address；key_len为403;索引走的是address字段；extra为using index condition</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#同样一条SQL语句，只是传入的参数不同；也就导致了是否走索引的不同；一个是全表扫描没有走索引；而另外一个是走了索引idx_seller_address；  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#原因就在于：这个与数据库当中的数据是存在一定的关系的；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller; <span class="comment">#该表当中一共有12条记录；这12条记录当中出现有address为“北京市”的记录行数就有11条记录；只有一条是1条是“西安市”；  </span></span><br><span class="line"><span class="comment">#如果数据量大，且精确查询的内容又在表中占比大；此时就极有可能走的是全表扫描而非走索引了；速度更快</span></span><br></pre></td></tr></table></figure>

<h2 id="索引的使用-NULL值的判定"><a href="#索引的使用-NULL值的判定" class="headerlink" title="索引的使用 - NULL值的判定"></a>索引的使用 - NULL值的判定</h2><p><strong>避免索引失效</strong>  </p>
<p>（10） is NULL，is  NOT NULL  <span style="color:red;"><strong>有时</strong></span> 索引失效；  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">explain</span>  <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address <span class="keyword">is</span> <span class="keyword">null</span>;# 此时是走索引的；key：idx_seller_address ;key_len：<span class="number">403</span> 走的索引字段为address</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span>  <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;# 此时是没有走索引的；key：<span class="keyword">null</span> ;key_len:<span class="keyword">null</span>;<span class="keyword">type</span>:<span class="keyword">all</span> 走的是全表扫描</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line">#当前该表当中每一条记录都address字段记录取值都是 <span class="keyword">not</span> <span class="keyword">null</span>; 当前<span class="keyword">explain</span> <span class="keyword">where</span> address <span class="keyword">is</span> <span class="keyword">null</span>时走了索引，即address <span class="keyword">is</span> <span class="keyword">null</span>这样的记录在表当中占比较少此时则走索引；而<span class="keyword">explain</span> <span class="keyword">where</span> address <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>时没有走索引；而此时 address <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>则在表当中占比较多；所以就不会去走索引而是全表扫描；这个与前面所说的全表扫描更快是一个道理；全表扫描与走索引的这两种方式哪一种更快就选择哪一种方式；也就是说mysql底层会去自动的判断如果走全表扫描更快就走全表扫描；如果走索引更快就走索引的这种方式；  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">null</span>;#此时走索引；key:idx_name_sta_addr；key_len：<span class="number">403</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>; # 此时不走索引；key:<span class="keyword">null</span>； key_len：<span class="keyword">null</span>; <span class="keyword">type</span>：<span class="keyword">ALL</span> 走的是全表扫描</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">null</span>;# 此时不走索引；key：<span class="keyword">null</span>；key_len: <span class="keyword">null</span> ; <span class="keyword">type</span>:<span class="keyword">all</span> 走的是全表扫描</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>; # 此时走了索引；key:idx_name; key_len:<span class="number">138</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> <span class="type">name</span> =<span class="keyword">null</span> <span class="keyword">where</span> id &lt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_user;#则此时除了id为<span class="number">1</span>的记录其余的记录的<span class="type">name</span>字段就变成了<span class="keyword">null</span>；所以如果此时查询t_user表当中<span class="type">name</span>字段为<span class="keyword">is</span> <span class="keyword">null</span>则走全表扫描；而查询<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>则走索引；</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> t_user;#此时在t_user表当中<span class="type">name</span>字段是存在索引的；</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">null</span>;# key:<span class="keyword">null</span> ; key_len:<span class="keyword">null</span>;<span class="keyword">type</span>:<span class="keyword">all</span> 走的是全表扫描（原因就在于此时在表当中记录<span class="type">name</span>字段为<span class="keyword">null</span>占比大于<span class="type">name</span>字段<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>；所以全表扫描与走索引的方式这两者相比较之下，全表扫描更快；）</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;#此时是走索引的；key:idx_user_name;key_len:<span class="number">138</span>;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 也就是说<span class="keyword">is</span> <span class="keyword">null</span>与<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>；有时是会走索引的有时又不会走索引；这要分情况而定；这个根据数据库当中的数据量来决定的；如果查询的字段在数据量当中的<span class="keyword">null</span>值占比较多,那么这个时候<span class="keyword">is</span> <span class="keyword">null</span>将会走全表扫描而<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>则走索引；如果查询的字段在数据量当中绝大部分都是存在有值的也就是说<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>占据较多；则此时<span class="keyword">is</span> <span class="keyword">null</span>就会走索引；而<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>则走全表扫描；</span><br></pre></td></tr></table></figure>

<h2 id="索引的使用-in和not-in"><a href="#索引的使用-in和not-in" class="headerlink" title="索引的使用 - in和not in"></a>索引的使用 - in和not in</h2><p><strong>避免索引失效</strong>  </p>
<p>（11）in 走索引； not in 索引失效；  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> sellerid <span class="keyword">in</span> (<span class="string">'oppo'</span>,<span class="string">'xiaomi'</span>,<span class="string">'sina'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> sellerid <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'oppo'</span>,<span class="string">'xiaomi'</span>,<span class="string">'sina'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> sellerid <span class="keyword">in</span> (<span class="string">'oppo'</span>,<span class="string">'xiaomi'</span>,<span class="string">'sina'</span>);<span class="comment">#此时使用了索引；key:PRIMARY；key_len:402;  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> sellerid <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'oppo'</span>,<span class="string">'xiaomi'</span>,<span class="string">'sina'</span>);<span class="comment">#此时未走索引；索引失效；key:NULL；key_len:NULL；type:ALL 全表扫描</span></span><br></pre></td></tr></table></figure>

<h2 id="索引的使用-单列索引与复合索引选择"><a href="#索引的使用-单列索引与复合索引选择" class="headerlink" title="索引的使用 - 单列索引与复合索引选择"></a>索引的使用 - 单列索引与复合索引选择</h2><p><strong>避免索引失效</strong>  </p>
<p>（12）单列索引和复合索引  </p>
<p>尽量使用复合索引，而少量使用单列索引；  </p>
<p>创建复合索引：  </p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">create <span class="built_in">index</span> idx_name_sta_address on tb_seller(<span class="keyword">name</span>,<span class="keyword">status</span>,address);</span><br><span class="line"></span><br><span class="line">就相当于创建了三个索引：  </span><br><span class="line">* <span class="keyword">name</span></span><br><span class="line">* <span class="keyword">name</span> + <span class="keyword">status</span></span><br><span class="line">* <span class="keyword">name</span> + <span class="keyword">status</span> + address</span><br></pre></td></tr></table></figure>

<p>创建单列索引：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_status <span class="keyword">on</span> tb_seller(<span class="keyword">status</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br></pre></td></tr></table></figure>
<p>当对name、status、address字段进行搜索的时候，数据库只会选择一个索引；所以此时在这种情况下单列索引并不占优势；  </p>
<p>数据库会选择一个最优的索引来使用，并不会使用全部索引；  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tb_seller;<span class="comment">#查看tb_seller表当中的索引</span></span><br><span class="line"><span class="comment"># PRIMARY 主键索引</span></span><br><span class="line"><span class="comment"># idx_name_sta_address name</span></span><br><span class="line"><span class="comment"># idx_name_sta_address status</span></span><br><span class="line"><span class="comment"># idx_name_sta_address address</span></span><br><span class="line"><span class="comment"># idx_seller_address address</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除单列索引</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> <span class="keyword">from</span> idx_seller_address <span class="keyword">on</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看tb_seller表的索引</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span>  <span class="keyword">status</span>=<span class="string">'0'</span> <span class="keyword">and</span> address=<span class="string">'西安市'</span>;<span class="comment">#此时使用复合索引；key:idx_name_sta_addr；key_len：813</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除复合索引</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_name_sta_address <span class="keyword">on</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建单列索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_status <span class="keyword">on</span> tb_seller(<span class="keyword">status</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看单列索引</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tb_seller;</span><br><span class="line"><span class="comment">#PRIMARY 主键索引</span></span><br><span class="line"><span class="comment"># idx_seller_name 单列索引name字段</span></span><br><span class="line"><span class="comment"># idx_seller_status 单列索引status字段</span></span><br><span class="line"><span class="comment"># idx_seller_address 单列索引address字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'0'</span> <span class="keyword">and</span> address=<span class="string">'西安市'</span>;<span class="comment">#此时走索引但是；key:idx_seller_name; key_len:403;只走了name字段的索引；而status字段以及address字段的索引未走；相当于白创建了status以及address字段的索引了；</span></span><br><span class="line"><span class="comment">#即此时possible_key：idx_seller_name、idx_seller_status、idx_seller_address；这三个索引可能都会用到；但是实际上只用到了idx_seller_name索引；即name字段的索引；</span></span><br><span class="line"><span class="comment">#为什么选择了name字段来作为该SQL的索引；原因在于：数据库会选择一个最优的索引来使用；并不会使用全部索引；也就意味着name该字段的索引在这三个索引当中最优；</span></span><br><span class="line"><span class="comment">#为什么name该字段的索引idx_seller_name最优，</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;<span class="comment"># 因为在此表当中，name查询的精确值为“小米科技”辨识度最高，记录行为1；而status字段取值为0的记录行超过1；address字段取值为“西安市”记录行也只有1；也应该是遵循了从左到右的一个判断；所以此时idx_seller_name索引最优；从而走了idx_seller_name索引；  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">status</span>=<span class="string">'0'</span> <span class="keyword">and</span> address=<span class="string">'西安市'</span>;<span class="comment">#此时没有name字段；而address在数据表当中辨识度最高；即记录行为1；所以此时走的索引自然即为idx_seller_address；</span></span><br><span class="line"><span class="comment">#key:idx_seller_address;key_len:403;possible_key:idx_seller_status,idx_seller_address;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">status</span>=<span class="string">'0'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>;<span class="comment"># 如果此时address取精确值为“北京市”；而在数据库当中address取值为“北京市”的记录行辨识度并不高；也就是取值为“北京市”的address字段其记录行有很多超过1，即总共12条记录，有11条记录当中的address都是“北京市”，从而其辨识度并不高；</span></span><br><span class="line"><span class="comment">#而此时status字段相比较之下，取值为0的记录行数，总行数12行，而status取值为0的记录行数为3行，那么此时较之address的辨识度自然是要高一些；所以将走status字段的索引，即idx_seller_status索引；</span></span><br><span class="line"><span class="comment"># possible_key:idx_seller_status,idx_seller_address；key:idx_seller_status;key_len:7；</span></span><br></pre></td></tr></table></figure>

<p>也就是说：数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部的索引；  </p>
<h2 id="索引的使用-查看索引使用情况"><a href="#索引的使用-查看索引使用情况" class="headerlink" title="索引的使用 - 查看索引使用情况"></a>索引的使用 - 查看索引使用情况</h2><p><strong>查看索引使用情况</strong>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Handler_read%'</span>;<span class="comment">#查看的是当前会话中索引的使用情况</span></span><br><span class="line"><span class="comment">#Variable_name  Value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Handler_read%'</span>;<span class="comment">#查看的是全局中索引的使用情况</span></span><br></pre></td></tr></table></figure>

<table border="1">
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Handler_read_first</td>
    <td>0</td>
  </tr>
  <tr>
    <td>Handler_read_key</td>
    <td>2</td>
  </tr>
  <tr>
    <td>Handler_read_last</td>
    <td>0</td>
  </tr>
    <tr>
    <td>Handler_read_next</td>
    <td>0</td>
  </tr>
    <tr>
    <td>Handler_read_prev</td>
    <td>0</td>
  </tr>
    <tr>
    <td>Handler_read_rnd</td>
    <td>0</td>
  </tr>
    <tr>
    <td>Handler_read_rnd_next</td>
    <td>22</td>
  </tr>
</table>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Handler_read_first</span>: 索引中第一条被读的次数。如果较高，表示服务器正在自行大量全索引扫描（这个值越低越好）；</span><br><span class="line"></span><br><span class="line"><span class="attribute">Handler_read_key</span>: 如果索引正在工作，这个值代表一个行被索引值读取的次数；如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）；</span><br><span class="line"></span><br><span class="line"><span class="attribute">Handler_read_next</span>: 按照键顺序读下一行的请求数。如果用范围约束或者如果执行索引扫描来查询索引列，该值增加；  </span><br><span class="line"></span><br><span class="line"><span class="attribute">Handler_read_prev</span>: 按照键顺序读前一行的请求数，该读方法主要用于优化ORDER BY.....DESC；</span><br><span class="line"></span><br><span class="line"><span class="attribute">Handler_read_rnd</span>: 根据固定位置读一行的请求数。如果正执行大量查询并需要对结果进行排序该值较高。可能使用了大量需要MySQL扫描整个表的查询或者连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救；  </span><br><span class="line"></span><br><span class="line"><span class="attribute">Handler_read_rnd_next</span>: 在数据文件中读下一行的请求数。如果正进行大量的表扫描，该值要求较高。通常说明表索引不正确或者是写入的查询没有利用索引；</span><br></pre></td></tr></table></figure>

<h2 id="SQL优化-大批量插入数据"><a href="#SQL优化-大批量插入数据" class="headerlink" title="SQL优化 - 大批量插入数据"></a>SQL优化 - 大批量插入数据</h2><p><strong>大批量插入数据</strong>  </p>
<p>环境准备：  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CREATE TABLE <span class="string">'tb_user_1'</span>(</span><br><span class="line">  <span class="string">'id'</span> int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">'username'</span> varchar(45) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'password'</span> varchar(96) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'name'</span> varchar(45) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'birthday'</span> datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'sex'</span> char(1)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'email'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'phone'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'qq'</span> varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'status'</span>  varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span> comment <span class="string">'用户状态'</span>,</span><br><span class="line">  <span class="string">'create_time'</span>  datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'update_time'</span> datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY(<span class="string">'id'</span>),</span><br><span class="line">  UNIQUE KEY <span class="string">'unique_user_username'</span>(<span class="string">'username'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">'tb_user_2'</span>(</span><br><span class="line">  <span class="string">'id'</span> int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">'username'</span> varchar(45) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'password'</span> varchar(96) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'name'</span> varchar(45) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'birthday'</span> datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'sex'</span> char(1)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'email'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'phone'</span> varchar(45)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'qq'</span> varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'status'</span>  varchar(32)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span> comment <span class="string">'用户状态'</span>,</span><br><span class="line">  <span class="string">'create_time'</span>  datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'update_time'</span> datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY(<span class="string">'id'</span>),</span><br><span class="line">  UNIQUE KEY <span class="string">'unique_user_username'</span>(<span class="string">'username'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>

<p>当使用load命令导入数据的时候，适当的设置可以提高导入的效率。  </p>
<p>引擎使用的是Innodb，Innodb底层使用的索引是B+树索引；而B+树索引当中的数据有顺序的；  </p>
<p>对于Innodb类型的表，有以下集中方式可以提高导入的效率：  </p>
<p>（1）<strong>主键顺序插入</strong>  </p>
<p>因为InnoDB类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。  </p>
<p>如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率。  </p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">脚本文件介绍：  </span><br><span class="line">  <span class="function"><span class="title">sql1</span>.<span class="built_in">log</span> -----&gt;</span> 主键有序</span><br><span class="line">  <span class="function"><span class="title">sql2</span>.<span class="built_in">log</span> -----&gt;</span> 主键无序</span><br></pre></td></tr></table></figure>

<p>插入ID顺序排列数据：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'/root/sql1.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_1'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment"># 耗费时长：20.58 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'/root/sql2.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_2'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">#耗费时长：1min 59.29 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_2;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sql1.log当中数据有序进行排列；sql2.log当中数据无序进行排列；</span></span><br><span class="line"><span class="comment">#而sql1.log当中的数据将插入到tb_user_1表；sql2.log当中的数据将插入到tb_user_2表当中；</span></span><br><span class="line"><span class="comment">#sql1.log与sql2.log当中数据量完全一致；只数据排列分布顺序不一致；</span></span><br><span class="line"></span><br><span class="line">head sql1.log <span class="comment">#linux 查看sql1.log前一部分的数据内容，id主键数据有序</span></span><br><span class="line">head sql2.log <span class="comment">#linux 查看sql2.log前一部分的数据内容，主键数据无序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'/root/sql1.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_1'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment"># load data 加载数据  </span></span><br><span class="line"><span class="comment">#local infile 从本地文件系统当中加载数据；</span></span><br><span class="line"><span class="comment">#'/root/sql1.log' 数据文件在linux当中的位置</span></span><br><span class="line"><span class="comment"># into table 'tb_user_1' 加载数据到具体表tb_user_1当中</span></span><br><span class="line"><span class="comment"># fields terminated by ',' 每一个域之间使用逗号,进行分隔</span></span><br><span class="line"><span class="comment"># lines terminated by '\n' 每一行之间使用\n进行分隔,也就是换行</span></span><br><span class="line"><span class="comment"># 回车之后，在导入数据的过程当中，还需要去进行维护索引，维护唯一索引；unique；</span></span><br><span class="line"><span class="comment"># sql1.log导入到tb_user_1表当中耗费时间为19.37 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_1;<span class="comment"># 1000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'/root/sql2.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_2'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">#回车之后，耗费的时间为 1min 51.42 second；和sql1.log导入tb_user_1时差距很大；  </span></span><br><span class="line"><span class="comment">#所以这样就验证了大批量导入数据时，有序数据导入表当中时耗费的时间小于无序数据导入表当中的时间；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_2;<span class="comment"># 1000000</span></span><br></pre></td></tr></table></figure>

<p>（2）<strong>关闭唯一性校验</strong>  </p>
<p>在导入数据前执行 SET UNIQUE_CHECKS=0, 关闭唯一性校验，在导入结束后执行 SET UNIQUE_CHECKS=1，恢复唯一性校验，可以提高导入的效率。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在tb_user_1表结构当中存在username字段的唯一性索引；如果存在唯一性索引则在插入数据的时候是需要对唯一性字段数据的取值进行校验的；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> UNIQUE_CHECKS=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> infiles <span class="string">'/root/sql1.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_1'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">#耗费时长为 19.39 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> UNIQUE_CHECKS=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>（3）<strong>手动提交事务</strong>  </p>
<p>如果应用使用自动提交的方式，建议在导入前执行 SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行 SET AUTOCOMMIT=1；打开自动提交，也可以提高导入的效率。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> AUTOCOMMIT=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> infiles <span class="string">'/root/sql1.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">'tb_user_1'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">#耗费时长为 19.58 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> AUTOCOMMIT=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="SQL优化-insert优化"><a href="#SQL优化-insert优化" class="headerlink" title="SQL优化 - insert优化"></a>SQL优化 - insert优化</h2><p><strong>优化insert语句</strong>  </p>
<p>当进行数据的insert操作的时候，可以考虑采用以下几种优化方案。  </p>
<ul>
<li><p>如果需要同时对一张表插入很多行数据时，应该尽量使用多个值表的insert语句，这种方式将大大的缩减客户端与数据库之间的连接、关闭等消耗。<br>使得效率比分开执行的单个insert语句块。<br>示例，原始方式为：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br></pre></td></tr></table></figure>

<p>优化后的方案为：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'tom'</span>),(<span class="number">2</span>,<span class="string">'cat'</span>),(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在事务中进行数据插入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据有序插入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'Tim'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'Rose'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br></pre></td></tr></table></figure>

<p>优化后：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'Tim'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'Rose'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'Jerry'</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="SQL优化-orderby优化"><a href="#SQL优化-orderby优化" class="headerlink" title="SQL优化 - orderby优化"></a>SQL优化 - orderby优化</h2><p><strong>优化 order by 语句</strong>  </p>
<p><strong>环境准备</strong>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">'emp'</span>(</span><br><span class="line">  <span class="string">'id'</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">'name'</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'age'</span> <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'salary'</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(<span class="string">'id'</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> DEAFULT <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">#基础数据插入</span></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp(age,salary);<span class="comment">#建立age、salary字段的复合索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">#PRIMARY 主键索引</span></span><br><span class="line"><span class="comment">#idx_emp_age_salary age 复合索引</span></span><br><span class="line"><span class="comment">#idx_emp_age_salary salary 复合索引</span></span><br></pre></td></tr></table></figure>

<p><strong>两种排序方式</strong>  </p>
<p>（1）<strong>第一种是通过对返回数据进行排序，也就是通常说的 filesort 排序，所有不是通过索引直接返回排序结果的排序都叫做 FileSort排序</strong>。  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age;#key:<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span>；Extra：<span class="keyword">Using</span> filesort;<span class="keyword">type</span>:<span class="keyword">ALL</span> 没有走索引，全表扫描（升序）</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age,salary;#key:<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span>；Extra：<span class="keyword">Using</span> filesort;<span class="keyword">type</span>:<span class="keyword">ALL</span> 没有走索引，全表扫描（升序）</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;#key:<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span>；Extra：<span class="keyword">Using</span> filesort;<span class="keyword">type</span>:<span class="keyword">ALL</span> 没有走索引，全表扫描（降序）</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>,salary <span class="keyword">desc</span>;#key:<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span>；Extra：<span class="keyword">Using</span> filesort;<span class="keyword">type</span>:<span class="keyword">ALL</span> 没有走索引，全表扫描（降序）</span><br><span class="line"></span><br><span class="line">#通过file sort 文件系统进行排序，效率较低</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;#<span class="keyword">type</span>：<span class="keyword">ALL</span>，key：<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;#<span class="keyword">type</span>：<span class="keyword">ALL</span>，key：<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>

<p>（2）<strong>第二种通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</strong>。  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;#走索引；key：idx_age_salary；key_len:<span class="number">9</span>；Extra：<span class="keyword">Using</span> <span class="keyword">index</span> 走索引</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;#走索引；key：idx_age_salary；key_len:<span class="number">9</span>；Extra：<span class="keyword">Using</span> <span class="keyword">index</span> 走索引</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;#走索引；key：idx_age_salary；key_len:<span class="number">9</span>；Extra：<span class="keyword">Using</span> <span class="keyword">index</span> 走索引</span><br><span class="line">#覆盖索引的用法；查询<span class="keyword">select</span> 的字段都是覆盖索引则这个时候使用的即为<span class="keyword">using</span> <span class="keyword">index</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age,salary,<span class="type">name</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;#走索引；key：<span class="keyword">NULL</span>；key_len:<span class="keyword">NULL</span>；<span class="keyword">type</span>:<span class="keyword">ALL</span>；Extra：<span class="keyword">Using</span> filesort 全表扫描；由于查询的字段当中包含了非索引字段；即并未覆盖索引；所以走全表扫描的方式；id、age、salary这三个字段都有索引；而<span class="type">name</span>字段没有索引；</span><br></pre></td></tr></table></figure>

<p><strong>多字段排序</strong>  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id ,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age,salary;#key:idx_age_salary;key_len:<span class="number">9</span>;Extra:<span class="keyword">Using</span> <span class="keyword">index</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id ,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>,salary <span class="keyword">asc</span>;#key:idx_age_salary;key_len:<span class="number">9</span>;Extra:<span class="keyword">Using</span> <span class="keyword">index</span>(<span class="keyword">order</span> <span class="keyword">by</span> 如不标明<span class="keyword">desc</span>或者<span class="keyword">asc</span>;默认为<span class="keyword">asc</span>升序排序)</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>,salary <span class="keyword">desc</span>;#key:idx_age_salary;key_len:<span class="number">9</span>;Extra:<span class="keyword">Using</span> <span class="keyword">index</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>,salary <span class="keyword">desc</span>;#key:idx_age_salary;key_len:<span class="number">9</span>;Extra:<span class="keyword">Using</span> <span class="keyword">index</span>;<span class="keyword">Using</span> filesort此时就会出现Filesort</span><br><span class="line"></span><br><span class="line"># 即在使用<span class="keyword">order</span> <span class="keyword">by</span>进行多字段排序的时候，如果想要效率较高；那么此时最好这些多字段统一排序方式；要么都是升序要么都是降序；如果出现一升一降那么就会出现Filesort；文件系统排序造成效率低；</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> id,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">asc</span>,age <span class="keyword">asc</span>;#key:idx_age_salary;key_len:<span class="number">9</span>;Extra:<span class="keyword">Using</span> <span class="keyword">index</span>;<span class="keyword">Using</span> filesort；此时将age <span class="keyword">asc</span>进行了调后处理；也出现了Filesort</span><br><span class="line">#原因在于：</span><br><span class="line">#按照多字段进行排序，要么统一进行升序<span class="keyword">asc</span>要么统一进行降序排序；</span><br><span class="line">#如果按照多字段进行排序，那么排序的顺序需要和复合索引当中的字段顺序要保持一致；</span><br><span class="line">#复合索引为idx_emp_age_salary（age，salary）复合索引当中age字段的索引顺序先于salary字段的顺序；</span><br><span class="line">#而此时<span class="keyword">SQL</span>当中<span class="keyword">order</span> <span class="keyword">by</span>语句多字段排序salary字段先于age字段；所以此时Extra当中就出现了<span class="keyword">using</span> <span class="keyword">index</span>；也出现了<span class="keyword">using</span> filesort;</span><br></pre></td></tr></table></figure>

<p>了解了MySQL的排序方式，优化目标就清晰了：尽量减少额外的排序，通过索引直接返回有序数据。  </p>
<p>where条件和Order by 使用相同的索引并且Order by 的顺序和索引顺序相同，并且Order by的字段都是升序，或者都是降序。  </p>
<p>否则肯定需要额外的操作，这样就会出现FileSort排序；  </p>
<h3 id="Filesort的优化"><a href="#Filesort的优化" class="headerlink" title="Filesort的优化"></a>Filesort的优化</h3><p>尽可能避免Filesort的出现，但是无法完全避免Filesort的出现；  </p>
<p>通过创建合适的索引，能够减少Filesort的出现。  </p>
<p>但是在某些情况下，条件限制不能让Filesort小时，那就需要加快Filesort的排序操作，对于Filesort，MySQL有两种排序算法：  </p>
<p>（1）两次扫描算法：MySQL4.1之前，使用该方式排序。<br>    首先，根据条件取出排序字段和行指针信息，然后在排序区 sort buffer中排序；<br>    如果sort buffer不够，则在临时表 temporary table中存储排序结果。<br>    完成排序之后，再根据航指针回表读取记录，该操作可能会导致大量随机I/O操作。  </p>
<p>（2）一次扫描算法：一次性取出满足条件的所有字段，然后在排序区sort buffer中排序后直接输出结果集。<br>    排序时内存开销较大，但是排序效率比两次扫描算法要高；  </p>
<p>MySQL 通过比较系统变量 max_length_for_sort_data 的大小和Query 语句取出的字段总大小，来判定合适哪一种排序算法，如果max_length_for_sort_data 更大，那么使用第二种优化之后的算法；否则使用第一种；  </p>
<p>可以适当提高 sort_buffer_size和 max_length_for_sort_data 系统变量，来增大排序区的大小，提高排序的效率。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'max_length_for_sort_data'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>max_length_for_sort_data</td>
    <td>1024</td>
  </tr>
</table>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'sort_buffer_size'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>sort_buffer_size</td>
    <td>262144</td>
  </tr>
</table>

<h2 id="SQL优化-group-by优化"><a href="#SQL优化-group-by优化" class="headerlink" title="SQL优化 - group by优化"></a>SQL优化 - group by优化</h2><p>由于GROUP BY 实际上也同样会进行排序操作，而且与ORDER BY相比，GROUP BY主要只是多了排序字后的分组操作。  </p>
<p>当然如果在分组的时候还是用了其他的一些聚合函数，那么还需要一些聚合函数的计算。  </p>
<p>所以，在GROUP BY的实现过程中，与ORDER BY一样也可以利用到索引。  </p>
<p>如果查询包含GROUP BY，但是用户想要避免排序结果的消耗，则可以执行order by null 禁止排序。  </p>
<p>如下：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,count(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age;#key:<span class="keyword">NULL</span>,key_len:<span class="keyword">NULL</span>;<span class="keyword">type</span>:<span class="keyword">ALL</span>;Extra:<span class="keyword">Using</span> <span class="keyword">temporary</span>;<span class="keyword">Using</span> filesort; 由此可以看出<span class="keyword">GROUP</span> <span class="keyword">BY</span> 底层进行了排序操作；<span class="keyword">Using</span> filesort</span><br><span class="line"><span class="meta">#Using temporary与Using Filesort都是比较耗时的操作；</span></span><br></pre></td></tr></table></figure>

<p>优化后：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,count(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">null</span>;#key:<span class="keyword">null</span>;key_len:<span class="keyword">null</span>;<span class="keyword">type</span>:<span class="keyword">All</span>;Extra:<span class="keyword">Using</span> <span class="keyword">temporary</span>;此时就没有<span class="keyword">Using</span> filesort了</span><br></pre></td></tr></table></figure>

<p>从上面的例子可以看出，第一个SQL语句需要进行“Filesort”，而第二个SQL语句由于order by null不需要进行“Filesort”，而上文提过FileSort往往非常耗费时间。  </p>
<p> 创建索引：  </p>
 <figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_emp_age_salary  <span class="keyword">on</span> emp(age,salary);</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,<span class="built_in">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">order</span> <span class="keyword">by</span> <span class="literal">null</span>;#key:idx_emp_age_salary;key_len:9;extra:using <span class="keyword">index</span> 此时走索引；</span><br><span class="line">#<span class="keyword">group</span> <span class="keyword">by</span>语句也是可以通过索引来提高效率的；</span><br></pre></td></tr></table></figure>

<h2 id="SQL优化-子查询优化"><a href="#SQL优化-子查询优化" class="headerlink" title="SQL优化 - 子查询优化"></a>SQL优化 - 子查询优化</h2><p><strong>优化嵌套查询</strong>  </p>
<p>MySQL4.1 版本之后，开始支持SQL的子查询。  </p>
<p>这个技术可以使用select语句来创建一个单列的查询结果，然后吧这个结果来作为过滤条件用在另一个查询当中。  </p>
<p>使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。  </p>
<p>但是，有些情况下，子查询是可以被更高效的连接（JOIN）替代。(使用多表连接查询来替换子查询)  </p>
<p>示例，查找有角色的所有用户信息：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;<span class="comment"># t_user 用户表 , t_role 角色表 , user_role 用户角色中间表 ；</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> ( <span class="keyword">select</span> user_id <span class="keyword">from</span> user_role);</span><br></pre></td></tr></table></figure>

<p>执行计划为：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="keyword">select</span> user_id <span class="keyword">from</span> user_role);</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_key</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>t_user</td>
    <td>ALL</td>
    <td>PRIMARY</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>6</td>
    <td>Using where</td>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>< subquery2></td>
    <td>eq_ref</td>
    <td>< auto_key></td>
    <td>< auto_key></td>
    <td>99</td>
    <td>demo_02.t_user.id</td>
    <td>1</td>
    <td>NULL</td>
  </tr>
  <tr>
    <td>2</td>
    <td>MATERIALIZED</td>
    <td>user_role</td>
    <td>index</td>
    <td>fk_ur_user_id</td>
    <td>fk_ur_user_id</td>
    <td>99</td>
    <td>NULL</td>
    <td>6</td>
    <td>Using index</td>
  </tr>
</table>

<p>优化后：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user u,user_role ur <span class="keyword">where</span> u.id=ur.user_id;<span class="comment">#多表联查替代子查询</span></span><br></pre></td></tr></table></figure>
<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_key</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>u</td>
    <td>ALL</td>
    <td>PRIMARY</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>6</td>
    <td>NULL</td>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>ur</td>
    <td>ref(ref的效率比index效率高)</td>
    <td>fk_ur_user_id</td>
    <td>fk_ur_user_id</td>
    <td>99</td>
    <td>demo_02.u.id</td>
    <td>1</td>
    <td>NULL</td>
  </tr>
</table>

<h2 id="SQL优化-or优化"><a href="#SQL优化-or优化" class="headerlink" title="SQL优化 - or优化"></a>SQL优化 - or优化</h2><p><strong>对于包含 OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引，而且不能使用到复合索引；如果没有索引，则应该考虑增加索引</strong>。  </p>
<p>获取emp表中的所有的索引；  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<p>示例：  </p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="built_in">show</span> index <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line">explain <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="built_in">where</span> id=<span class="number">1</span> <span class="built_in">or</span> name='Tom;#id为主键，即存在主键索引；而name字段没有设置索引；所以此时用<span class="built_in">or</span>来连接两个条件时，当中包含有一个非索引字段；所以不会走索引,索引失效，采用的是全表扫描；<span class="built_in">key</span>:NULL;key_len:NULL;<span class="built_in">type</span>:ALL;extra:Using <span class="built_in">where</span>；<span class="built_in">or</span>关键字如果想要走索引则<span class="built_in">or</span>连接的条件列字段需要是索引列；从而能够走索引否则全表扫描不走索引；</span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="built_in">where</span> age=<span class="number">20</span> <span class="built_in">or</span> salary=<span class="number">3500</span>;#<span class="built_in">key</span>:NULL,key_len:NULL;<span class="built_in">type</span>;All;extra:Using <span class="built_in">where</span>;此时未走索引；age与salary为复合索引当中的索引列；而<span class="built_in">or</span>关键字所连接的条件列当中字段的索引不能为复合索引列；可以为主键索引列、唯一索引列、单列索引等；就是不能为复合索引列其他皆可；</span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="built_in">where</span> id=<span class="number">1</span> <span class="built_in">or</span> age=<span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_key</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>t_user</td>
    <td>ALL</td>
    <td>PRIMARY</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>6</td>
    <td>Using where</td>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>emp</td>
    <td>index_merge</td>
    <td>PRIMARY,idx_emp_age_salary</td>
    <td>PRIMARY,idx_emp_age_salary</td>
    <td>4,4</td>
    <td>NULL</td>
    <td>2</td>
    <td>Using sort_union(idx_emp_age_salary,PRIMARY);Using where</td>
  </tr>
</table>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">or</span> <span class="keyword">id</span>=<span class="number">10</span> \G;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_key</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>emp</td>
    <td>range</td>
    <td>PRIMARY</td>
    <td>PRIMARY</td>
    <td>4</td>
    <td>NULL</td>
    <td>2</td>
    <td>Using where</td>
  </tr>
</table>

<p>建议使用 union 替换 or；  </p>
<p>优化：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> =<span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> =<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_key</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>PRIMARY</td>
    <td>emp</td>
    <td>const(const效率远高于range)</td>
    <td>PRIMARY</td>
    <td>PRIMARY</td>
    <td>4</td>
    <td>const</td>
    <td>1</td>
    <td>NULL</td>
  </tr>
  <tr>
    <td>2</td>
    <td>UNION</td>
    <td>emp</td>
    <td>const</td>
    <td>PRIMARY</td>
    <td>PRIMARY</td>
    <td>4</td>
    <td>const</td>
    <td>1</td>
    <td>NULL</td>
  </tr>
  <tr>
    <td>NULL</td>
    <td>UNION RESULT</td>
    <td>< union1,2></td>
    <td>ALL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>Using temporary</td>
  </tr>
</table>

<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">explain select * from emp where id=<span class="number">1</span> or age=<span class="number">20</span>;</span><br><span class="line"><span class="meta">#id 1</span></span><br><span class="line"><span class="meta">#select_type SIMPLE</span></span><br><span class="line"><span class="meta">#table emp</span></span><br><span class="line"><span class="meta">#possible_key PRIMARY,idx_emp_age_salary</span></span><br><span class="line"><span class="meta">#key idx_emp_age_salary,PRIMARY</span></span><br><span class="line"><span class="meta">#key_len 4,4</span></span><br><span class="line"><span class="meta">#ref NULL</span></span><br><span class="line"><span class="meta">#rows 2</span></span><br><span class="line"><span class="meta">#extra Using sort_union(idx_emp_age_salary,PRIMARY)</span></span><br><span class="line"><span class="meta">#type index_merge</span></span><br></pre></td></tr></table></figure>

<p>优化：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> age=<span class="number">20</span>;</span><br><span class="line"><span class="comment">#union即为一个求并集的一个操作；</span></span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_key</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>PRIMARY</td>
    <td>emp</td>
    <td>const(const效率远高于range)</td>
    <td>PRIMARY</td>
    <td>PRIMARY</td>
    <td>4</td>
    <td>const</td>
    <td>1</td>
    <td>NULL</td>
  </tr>
  <tr>
    <td>2</td>
    <td>UNION</td>
    <td>emp</td>
    <td>ref(ref比index_merge效率高)</td>
    <td>idx_emp_age_salary</td>
    <td>idx_emp_age_salary</td>
    <td>4</td>
    <td>const</td>
    <td>1</td>
    <td>NULL</td>
  </tr>
  <tr>
    <td>NULL</td>
    <td>UNION RESULT</td>
    <td>< union1,2></td>
    <td>ALL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>Using temporary</td>
  </tr>
</table>

<p>建议通过union替换or；<br>来比较下重要指标，发现主要差别是type和ref这两项；<br>type显示的是访问类型，是较为重要的一个指标，结果值从好到坏依次是：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">system</span> &gt; const &gt; eq_ref &gt; <span class="keyword">ref</span> &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; uniqe_subquery &gt; index_subquery &gt; range &gt; <span class="keyword">index</span> &gt; <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure>

<p>UNION语句的type值为ref，OR语句的type值为range，可以看到这是一个很明显的差距  </p>
<p>UNION语句的ref值为const，OR语句的type值为NULL，const表示是常量值引用，非常快  </p>
<p>这两项的差距就说明了UNION要优于OR；</p>
<h2 id="SQL优化-limit优化"><a href="#SQL优化-limit优化" class="headerlink" title="SQL优化 - limit优化"></a>SQL优化 - limit优化</h2><h3 id="优化分页查询"><a href="#优化分页查询" class="headerlink" title="优化分页查询"></a>优化分页查询</h3><p>一般分页查询时，通过创建覆盖索引能够比较好的提高性能。  </p>
<p>一个常见又非常头疼的问题就是 limit 2000000,10;   此时需要MySQL排序前2000010记录，仅仅返回 2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大。  </p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">limit</span> <span class="number">2000000</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_key</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>tb_item</td>
    <td>ALL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>9816098</td>
    <td>NULL</td>
  </tr>
</table>

<h3 id="优化思路一"><a href="#优化思路一" class="headerlink" title="优化思路一"></a>优化思路一</h3><p>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。  </p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">slect count(*) from tb_item;#3000000</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">limit</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">limit</span> <span class="number">10</span>,<span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">limit</span> <span class="number">20</span>,<span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">limit</span> <span class="number">2000000</span>,<span class="number">10</span>;#查询效率低 此时为全表扫描没有使用得到索引；</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item t, (<span class="keyword">select</span> id <span class="keyword">from</span> tb_item <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">limit</span> <span class="number">2000000</span>,<span class="number">10</span>) a <span class="keyword">where</span> t.id=a.id;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_key</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>PRIMARY</td>
    <td>< derived2></td>
    <td>ALL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>2000010</td>
    <td>NULL</td>
  </tr>
  <tr>
    <td>1</td>
    <td>PRIMARY</td>
    <td>t</td>
    <td>eq_ref</td>
    <td>PRIMARY</td>
    <td>PRIMARY</td>
    <td>4</td>
    <td>a.id</td>
    <td>1</td>
    <td>NULL</td>
  </tr>
    <tr>
    <td>2</td>
    <td>DERIVED</td>
    <td>tb_item</td>
    <td>index</td>
    <td>NULL</td>
    <td>PRIMARY</td>
    <td>4</td>
    <td>NULL</td>
    <td>2903274</td>
    <td>Using index</td>
  </tr>
</table>

<h3 id="优化思路二"><a href="#优化思路二" class="headerlink" title="优化思路二"></a>优化思路二</h3><p>该方案适用于<strong>主键自增的表(且主键自增的列不能够出现断层)</strong>，可以把limit 查询转换成某个位置的查询；  </p>
<p><strong>断层</strong>：即指的是当在查询数据时，id主键自增列当中可能会有出现修改或者删除的操作，那么这个时候数据就不一定准确了；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> &gt; <span class="number">1000000</span> <span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_key</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>tb_item</td>
    <td>range</td>
    <td>PRIMARY</td>
    <td>PRIMARY</td>
    <td>4</td>
    <td>NULL</td>
    <td>4908049</td>
    <td>Using where</td>
  </tr>
</table>

<h2 id="SQL优化-索引提示"><a href="#SQL优化-索引提示" class="headerlink" title="SQL优化 - 索引提示"></a>SQL优化 - 索引提示</h2><p><strong>使用SQL提示</strong>  </p>
<p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。  </p>
<h3 id="USE-INDEX"><a href="#USE-INDEX" class="headerlink" title="USE INDEX"></a>USE INDEX</h3><p>在查询语句中 表名称的后面 ，添加 use index 来提供希望MySQL去<strong>参考</strong>的索引列表，就可以让MySQL不再考虑其他可用的索引。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_status <span class="keyword">on</span> tb_seller(<span class="keyword">status</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name_sta_addr <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>,<span class="keyword">status</span>,address);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_key</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>tb_seller</td>
    <td>ref</td>
    <td>idx_seller_name_sta_address,idx_seller_name</td>
    <td>idx_seller_name(数据库选择使用idx_seller_name索引)</td>
    <td>403</td>
    <td>const</td>
    <td>1</td>
    <td>Using index condition</td>
  </tr>
</table>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">use</span> <span class="keyword">index</span>(idx_seller_name_sta_address) <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_key</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>tb_seller</td>
    <td>ref</td>
    <td>idx_seller_name_sta_address</td>
    <td>idx_seller_name_sta_address</td>
    <td>403</td>
    <td>const</td>
    <td>1</td>
    <td>Using index condition</td>
  </tr>
</table>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">use</span> <span class="keyword">index</span>(idx_seller_name) <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_key</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>tb_seller</td>
    <td>ref</td>
    <td>idx_seller_name</td>
    <td>idx_seller_name</td>
    <td>403</td>
    <td>const</td>
    <td>1</td>
    <td>Using index condition</td>
  </tr>
</table>

<h3 id="IGNORE-INDEX"><a href="#IGNORE-INDEX" class="headerlink" title="IGNORE INDEX"></a>IGNORE INDEX</h3><p>如果用户只是单纯的想让MySQL<strong>忽略</strong>一个或者多个索引，则可以使用 ignore index 作为 hint；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">ignore</span> <span class="keyword">index</span>(idx_seller_name) <span class="keyword">where</span> <span class="keyword">name</span> =<span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_key</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>tb_seller</td>
    <td>ref</td>
    <td>idx_seller_name_sta_address</td>
    <td>idx_seller_name_sta_address</td>
    <td>403</td>
    <td>const</td>
    <td>1</td>
    <td>Using index condition</td>
  </tr>
</table>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">ignore</span> <span class="keyword">index</span>(idx_seller_name_sta_address) <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_key</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>tb_seller</td>
    <td>ref</td>
    <td>idx_seller_name</td>
    <td>idx_seller_name</td>
    <td>403</td>
    <td>const</td>
    <td>1</td>
    <td>Using index condition</td>
  </tr>
</table>

<h3 id="FORCE-INDEX"><a href="#FORCE-INDEX" class="headerlink" title="FORCE INDEX"></a>FORCE INDEX</h3><p>为了<strong>强制</strong>MySQL使用一个特定的索引，可在查询中使用 force index 来作为 hint;</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address=<span class="string">'北京市'</span>;#实际没有使用到索引；<span class="keyword">type</span>:<span class="keyword">all</span>;key:<span class="keyword">null</span>;key_len:<span class="keyword">null</span>;extra:<span class="keyword">using</span> <span class="keyword">where</span>使用的是全表扫描；原因在于address为北京市时在表当中占比较多所以由mysql底层判断决定不走索引即全表扫描会快于走索引；所以此处没有使用得到索引；</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller use <span class="keyword">index</span>(idx_seller_address) <span class="keyword">where</span> address=<span class="string">'北京市'</span>;#此时则走索引</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>id</th>
    <th>select_type</th>
    <th>table</th>
    <th>type</th>
    <th>possible_key</th>
    <th>key</th>
    <th>key_len</th>
    <th>ref</th>
    <th>rows</th>
    <th>Extra</th>
  </tr>
  <tr>
    <td>1</td>
    <td>SIMPLE</td>
    <td>tb_seller</td>
    <td>ALL</td>
    <td>idx_seller_address</td>
    <td>idx_seller_address</td>
    <td>NULL</td>
    <td>NULL</td>
    <td>12</td>
    <td>Using where</td>
  </tr>
</table>

<h2 id="今日内容2"><a href="#今日内容2" class="headerlink" title="今日内容2"></a>今日内容2</h2><ul>
<li>应用优化</li>
<li>MySQL中查询缓存优化</li>
<li>MySQL内存管理以及优化</li>
<li>MySQL并发参数调整</li>
<li>MySQL锁问题</li>
<li>常用SQL技巧</li>
</ul>
<h2 id="应用优化"><a href="#应用优化" class="headerlink" title="应用优化"></a>应用优化</h2><p>前面章节，介绍了很多数据库的优化措施，但是在实际生产环境中，由于数据库本身的性能局限，就必须对前台的应用进行一些优化，来降低数据库的访问压力。  </p>
<h3 id="使用连接池"><a href="#使用连接池" class="headerlink" title="使用连接池"></a>使用连接池</h3><p>对于访问数据库来说，建立连接的代价是比较昂贵的，因为频繁的创建关闭连接，是比较耗费资源的，有必要建立数据库连接池，以提高访问的性能。  </p>
<h3 id="减少对MySQL的访问"><a href="#减少对MySQL的访问" class="headerlink" title="减少对MySQL的访问"></a>减少对MySQL的访问</h3><h4 id="减少对数据进行重复检索"><a href="#减少对数据进行重复检索" class="headerlink" title="减少对数据进行重复检索"></a>减少对数据进行重复检索</h4><p>在编写应用代码时，需要能够理解对数据库的访问逻辑。  </p>
<p>能够一次连接就获取得到结果的，就不用两次连接，这样可以大大减少对数据库无用的重复请求。  </p>
<p>比如，需要获取书籍的id和name字段，则查询如下：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure>

<p>之后，在业务逻辑中有需要获取得到书籍状态信息，则查询如下：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> ,<span class="keyword">status</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure>

<p>这样，就需要向数据库提交两次请求，数据库就要做两次查询操作。<br>其实完全可以用一条SQL语句得到想要的结果。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> ,<span class="keyword">status</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure>

<h4 id="增加cache层"><a href="#增加cache层" class="headerlink" title="增加cache层"></a>增加cache层</h4><p>在应用中，可以在应用中增加 缓存 层 来达到减轻数据库负担的目的。  </p>
<p>缓存层有很多种，也有很多事先方式，只要达到降低数据库的负担又能满足应用需求就可以。  </p>
<p>因此可以部分数据从数据库中抽取出来放到应用端以文本方式存储，或者使用框架（Mybatis，Hibernate）提供的一级缓存、二级缓存，或者使用redis数据库来缓存数据。  </p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡是应用中使用非常普遍的一种优化方式。  </p>
<p>负载均衡的机制就是利用某种均衡算法，将固定的负载量分不到不同的服务器上，一次来降低单台服务器的负载，达到优化的效果。  </p>
<h4 id="利用MySQL复制分流查询"><a href="#利用MySQL复制分流查询" class="headerlink" title="利用MySQL复制分流查询"></a>利用MySQL复制分流查询</h4><p>通过MySQL的主从复制，实现读写分离，使得增删改操作走主节点，查询操作走从结点，从而可以降低单台服务器的读写压力。  </p>
<h4 id="采用分布式数据库架构"><a href="#采用分布式数据库架构" class="headerlink" title="采用分布式数据库架构"></a>采用分布式数据库架构</h4><p>分布式数据库架构适合大数据量、负载高的情况，它由良好的拓展性和高可用性。<br>通过在多台服务器之间分布数据，可以实现在多台服务器之间的负载均衡，提高访问效率。  </p>
<h2 id="查询缓存-概述及流程"><a href="#查询缓存-概述及流程" class="headerlink" title="查询缓存 - 概述及流程"></a>查询缓存 - 概述及流程</h2><h3 id="Mysql中查询缓存优化-概述"><a href="#Mysql中查询缓存优化-概述" class="headerlink" title="Mysql中查询缓存优化-概述"></a>Mysql中查询缓存优化-概述</h3><p>开启mysql的查询缓存，当执行完全相同的SQL语句的时候，服务器就会直接从缓存中读取结果；当数据被修改，之前的缓存就会失效，修改比较频繁的表不适合做查询缓存。  </p>
<h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><ol>
<li>客户端发送一条查询SQL给服务器</li>
<li>服务器先会检查查询缓存，如果命中了缓存，则立即返回存储在缓存中的结果。否则进入下一阶段。</li>
<li>服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划；</li>
<li>MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询；</li>
<li>将结果缓存并返回给客户端；</li>
</ol>
<h2 id="查询缓存-配置参数"><a href="#查询缓存-配置参数" class="headerlink" title="查询缓存 - 配置参数"></a>查询缓存 - 配置参数</h2><h3 id="查询缓存配置"><a href="#查询缓存配置" class="headerlink" title="查询缓存配置"></a>查询缓存配置</h3><ol>
<li>查看当前的MySQL数据库是否支持查询缓存：  </li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -u root -p  </span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'have_query_cache'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>have_query_cache</td>
    <td>YES</td>
  </tr>
</table>

<ol start="2">
<li>查看当前MySQL是否开启了查询缓存：  </li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'query_cache_type'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>query_cache_type</td>
    <td>OFF(关闭)</td>
  </tr>
</table>

<ol start="3">
<li>查看查询缓存的占用大小（建议按照1024倍数进行增大）：  </li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'query_cache_size'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>query_cache_size</td>
    <td>1048576（单位为字节，占用内存空间约为：1048576/1024/1024约为 1M的内存空间）</td>
  </tr>
</table>

<ol start="4">
<li>查看查询缓存的状态变量</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">STATUS</span> <span class="keyword">LIKE</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Qcache_free_blocks</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_free_memory</td>
    <td>1038344</td>
  </tr>
  <tr>
    <td>Qcache_hits</td>
    <td>13</td>
  </tr>
  <tr>
    <td>Qcache_inserts</td>
    <td>6</td>
  </tr>
  <tr>
    <td>Qcache_lowmen_prunes</td>
    <td>0</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_not_cached(当前查询没有进行缓存)</td>
    <td>16</td>
  </tr>
  <tr>
    <td>Qcache_queryies_in_cache</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_total_blocks</td>
    <td>4</td>
  </tr>
</table>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> demo_02;<span class="comment">#切换数据库也算是一次查询mysql底层当中</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗费时间2.76 second</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗费时间2.53 second</span></span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Qcache_free_blocks（可用的内存块的个数）</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_free_memory（可用的内存空间）</td>
    <td>1038344</td>
  </tr>
  <tr>
    <td>Qcache_hits（查询缓存的命中次数）</td>
    <td>13</td>
  </tr>
  <tr>
    <td>Qcache_inserts（添加到缓存当中的次数）</td>
    <td>6</td>
  </tr>
  <tr>
    <td>Qcache_lowmen_prunes（如果内存空间不足，将内存中数据移出缓存空间次数）</td>
    <td>0</td>
  </tr>
  <tr>
    <td style="color:red;font-weight:bolder;">Qcache_not_cached(当前查询没有进行缓存次数)</td>
    <td style="color:red;font-weight:bolder;">19</td>
  </tr>
  <tr>
    <td>Qcache_queryies_in_cache</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_total_blocks</td>
    <td>4</td>
  </tr>
</table>

<table>
  <tr>
    <th>参数</th>
    <th>含义</th>
  </tr>
  <tr>
    <td>Qcache_free_blocks</td>
    <td>查询缓存中的可用内存块数</td>
  </tr>
  <tr>
    <td>Qcache_free_memory</td>
    <td>查询缓存的可用内存量</td>
  </tr>
<tr style="color:red;font-weight:bolder;">
    <td>Qcache_hits</td>
    <td>查询缓存命中数</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_inserts</td>
    <td>添加到查询缓存的查询数</td>
  </tr>
  <tr>
    <td>Qcache_lowmen_prunes</td>
    <td>由于内存不足而从查询缓存中删除的查询数</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_not_cached</td>
    <td>非缓存查询的数量（由于query_cache_type设置而无法缓存或者未缓存）</td>
  </tr>
  <tr>
    <td>Qcache_queries_in_cache</td>
    <td>查询缓存中注册的查询数</td>
  </tr>
  <tr>
    <td>Qcache_total_blocks</td>
    <td>查询缓存中的块总数</td>
  </tr>
</table>

<h2 id="查询缓存-开启查询缓存"><a href="#查询缓存-开启查询缓存" class="headerlink" title="查询缓存 - 开启查询缓存"></a>查询缓存 - 开启查询缓存</h2><p>MySQL的查询缓存默认是关闭的，需要手动配置参数 query_cache_type，来开启查询缓存。  </p>
<p>query_cache_type 该参数的可取值有三个：  </p>
<table>
  <tr>
    <th>值</th>
    <th>定义</th>
  </tr>
  <tr>
    <td>OFF 或 0</td>
    <td>查询缓存功能关闭</td>
  </tr>
    <tr>
    <td>ON 或 1</td>
    <td>查询缓存功能打开，SELECT的结果符合缓存条件即会缓存；否则不予缓存；显式指定SQL_NO_CACHE，则不予缓存</td>
  </tr>
    <tr>
    <td> DEMAND 或 2</td>
    <td>查询缓存功能按需进行，<span style="color:red;font-weight:bolder;">显式指定 SQL_CACHE 的SELECT语句才会缓存</span>；其他均不予缓存</td>
  </tr>
</table>

<p>在 /usr/my.cnf配置中，增加以下配置：  </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在开启mysql的查询缓存</span></span><br><span class="line"><span class="attr">query_cache_type</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>配置完毕之后，重启服务即可生效；  </p>
<p>然后就可以在命令行执行SQL语句进行验证，执行一条比较耗时的SQL语句，然后再执行多次，查看后面几次的执行时间；  </p>
<p>获取通过查看查询缓存的缓存命中数，来判定是否走了查询缓存。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">vi /usr/my.cnf</span><br><span class="line">query_cache_type:1</span><br><span class="line"></span><br><span class="line">service mysql restart<span class="comment">#重启mysql</span></span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> demo_02;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 2.58 second</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="string">'Qcache'</span>%;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Qcache_free_blocks</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_free_memory</td>
    <td>1038344</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_hits</td>
    <td>4</td>
  </tr>
  <tr>
    <td>Qcache_inserts</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_lowmen_prunes</td>
    <td>0</td>
  </tr>
  <tr>
    <td>Qcache_not_cached(当前查询没有进行缓存)</td>
    <td>2</td>
  </tr>
  <tr>
    <td>Qcache_queryies_in_cache</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_total_blocks</td>
    <td>4</td>
  </tr>
</table>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second</span></span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Qcache_free_blocks</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_free_memory</td>
    <td>1038344</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_hits</td>
    <td>5</td>
  </tr>
  <tr>
    <td>Qcache_inserts</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_lowmen_prunes</td>
    <td>0</td>
  </tr>
  <tr>
    <td>Qcache_not_cached(当前查询没有进行缓存)</td>
    <td>2</td>
  </tr>
  <tr>
    <td>Qcache_queryies_in_cache</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_total_blocks</td>
    <td>4</td>
  </tr>
</table>

<h2 id="查询缓存-SELECT选项"><a href="#查询缓存-SELECT选项" class="headerlink" title="查询缓存 - SELECT选项"></a>查询缓存 - SELECT选项</h2><p>可以在SELECT语句中指定两个与查询缓存相关的选项：  </p>
<ul>
<li>SQL_CACHE：如果查询结果是可缓存的，并且query_cache_type 系统变量的值为ON或者DEMAND，则缓存查询结果；  </li>
<li>SQL_NO_CACHE: 服务器不使用查询缓存，它既不检查查询缓存，也不检查结果是否已缓存，也不缓存查询结果。  </li>
</ul>
<p>例子：  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SELECT SQL_CACHE id, name <span class="keyword">FROM</span> customer;</span><br><span class="line">SELECT SQL_NO_CACHE id,name <span class="keyword">FROM</span> customer;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item  <span class="keyword">limit</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span>  <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Qcache_free_blocks</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_free_memory</td>
    <td>1038344</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_hits</td>
    <td>5</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_inserts</td>
    <td>3</td>
  </tr>
  <tr>
    <td>Qcache_lowmen_prunes</td>
    <td>0</td>
  </tr>
  <tr>
    <td>Qcache_not_cached(当前查询没有进行缓存)</td>
    <td>2</td>
  </tr>
  <tr>
    <td>Qcache_queryies_in_cache</td>
    <td>3</td>
  </tr>
  <tr>
    <td>Qcache_total_blocks</td>
    <td>8</td>
  </tr>
</table>

<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL_NO_CACHE <span class="built_in">title</span>, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> id=<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Qcache_free_blocks</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_free_memory</td>
    <td>1038344</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_hits</td>
    <td>6</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_inserts（添加到缓存的数量）</td>
    <td>3</td>
  </tr>
  <tr>
    <td>Qcache_lowmen_prunes</td>
    <td>0</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_not_cached(当前查询没有进行缓存)</td>
    <td>2</td>
  </tr>
  <tr>
    <td>Qcache_queryies_in_cache</td>
    <td>3</td>
  </tr>
  <tr>
    <td>Qcache_total_blocks</td>
    <td>8</td>
  </tr>
</table>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL_NO_CACHE title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Qcache_free_blocks</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_free_memory</td>
    <td>1038344</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_hits</td>
    <td>6</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_inserts（添加到缓存的数量）</td>
    <td>3</td>
  </tr>
  <tr>
    <td>Qcache_lowmen_prunes</td>
    <td>0</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_not_cached(当前查询没有进行缓存)</td>
    <td>3</td>
  </tr>
  <tr>
    <td>Qcache_queryies_in_cache</td>
    <td>3</td>
  </tr>
  <tr>
    <td>Qcache_total_blocks</td>
    <td>8</td>
  </tr>
</table>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL_NO_CACHE title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> SQL_NO_CACHE title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Qcache_free_blocks</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_free_memory</td>
    <td>1035936</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_hits</td>
    <td>6</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_inserts（添加到缓存的数量）</td>
    <td>3</td>
  </tr>
  <tr>
    <td>Qcache_lowmen_prunes</td>
    <td>0</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_not_cached(当前查询没有进行缓存)</td>
    <td>5</td>
  </tr>
  <tr>
    <td>Qcache_queryies_in_cache</td>
    <td>3</td>
  </tr>
  <tr>
    <td>Qcache_total_blocks</td>
    <td>8</td>
  </tr>
</table>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">SQL_CACHE</span> title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">SQL_CACHE</span> title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Qcache_free_blocks</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_free_memory</td>
    <td>1038344</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_hits</td>
    <td>7</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_inserts（添加到缓存的数量）</td>
    <td>4</td>
  </tr>
  <tr>
    <td>Qcache_lowmen_prunes</td>
    <td>0</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_not_cached(当前查询没有进行缓存)</td>
    <td>5</td>
  </tr>
  <tr>
    <td>Qcache_queryies_in_cache</td>
    <td>4</td>
  </tr>
  <tr>
    <td>Qcache_total_blocks</td>
    <td>10</td>
  </tr>
</table>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">SQL_CACHE</span> title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">SQL_CACHE</span> title, sellerid <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Qcache_free_blocks</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_free_memory</td>
    <td>1038344</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_hits</td>
    <td>9</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_inserts（添加到缓存的数量）</td>
    <td>4</td>
  </tr>
  <tr>
    <td>Qcache_lowmen_prunes</td>
    <td>0</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_not_cached(当前查询没有进行缓存)</td>
    <td>5</td>
  </tr>
  <tr>
    <td>Qcache_queryies_in_cache</td>
    <td>4</td>
  </tr>
  <tr>
    <td>Qcache_total_blocks</td>
    <td>10</td>
  </tr>
</table>

<h2 id="查询缓存-失效场景"><a href="#查询缓存-失效场景" class="headerlink" title="查询缓存 - 失效场景"></a>查询缓存 - 失效场景</h2><table>
  <tr>
    <th>值</th>
    <th>定义</th>
  </tr>
  <tr>
    <td>OFF 或 0</td>
    <td>查询缓存功能关闭</td>
  </tr>
    <tr>
    <td>ON 或 1</td>
    <td>查询缓存功能打开，<span style="color:red;font-weight:bolder;">SELECT的结果符合缓存条件即会缓存</span>；否则不予缓存；显式指定SQL_NO_CACHE，则不予缓存</td>
  </tr>
    <tr>
    <td> DEMAND 或 2</td>
    <td>查询缓存功能按需进行，显式指定 SQL_CACHE 的SELECT语句才会缓存；其他均不予缓存</td>
  </tr>
</table>

<p>开启mysql的查询缓存，当执行<strong>完全相同的SQL语句</strong>的时候，服务器就会直接从缓存中读取结果；当数据被修改，之前的缓存就会失效，修改比较频繁的表不适合做查询缓存。</p>
<ol>
<li>SQL语句不一致的情况，要想命中查询缓存，查询的SQL语句必须一致。  </li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SQL1：</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#3000000 耗时0.00 second</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#SQL2：</span></span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#3000000 耗时2.79 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Qcache_free_blocks</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_free_memory</td>
    <td>1033888</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_hits</td>
    <td>11</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_inserts</td>
    <td>5</td>
  </tr>
  <tr>
    <td>Qcache_lowmen_prunes</td>
    <td>0</td>
  </tr>
  <tr>
    <td>Qcache_not_cached(当前查询没有进行缓存)</td>
    <td>5</td>
  </tr>
  <tr>
    <td>Qcache_queryies_in_cache</td>
    <td>5</td>
  </tr>
  <tr>
    <td>Qcache_total_blocks</td>
    <td>12</td>
  </tr>
</table>

<ol start="2">
<li>当查询语句中有一些不确定的时候，则不会缓存。如：now()、current_date()、curdate()、curtime()、rand()、uuid()、user()、database()；  </li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>(); <span class="comment"># 耗时 0.01 second</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>(); <span class="comment"># 耗时 0.01 second；时间是发生了变化的；即不会走缓存</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Qcache_free_blocks</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_free_memory</td>
    <td>1033888</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_hits</td>
    <td>11</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_inserts</td>
    <td>5</td>
  </tr>
  <tr>
    <td>Qcache_lowmen_prunes</td>
    <td>0</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_not_cached(当前查询没有进行缓存)</td>
    <td>7</td>
  </tr>
  <tr>
    <td>Qcache_queryies_in_cache</td>
    <td>5</td>
  </tr>
  <tr>
    <td>Qcache_total_blocks</td>
    <td>12</td>
  </tr>
</table>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SQL1：</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> updatetime &lt; <span class="keyword">now</span>() <span class="keyword">limit</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#SQL2：</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#SQL3：</span></span><br><span class="line"><span class="keyword">select</span> databse();</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>不适用任何表查询语句。  </li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'Hello'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Qcache_free_blocks</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_free_memory</td>
    <td>1033888</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_hits</td>
    <td>11</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_inserts</td>
    <td>5</td>
  </tr>
  <tr>
    <td>Qcache_lowmen_prunes</td>
    <td>0</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_not_cached(当前查询没有进行缓存)</td>
    <td>8</td>
  </tr>
  <tr>
    <td>Qcache_queryies_in_cache</td>
    <td>5</td>
  </tr>
  <tr>
    <td>Qcache_total_blocks</td>
    <td>12</td>
  </tr>
</table>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'A'</span>;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查询mysql、information_schema 或者 performance_schema 数据库中的表时，不会走查询缓存。  </li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"><span class="comment">#information_schema</span></span><br><span class="line"><span class="comment">#mysql</span></span><br><span class="line"><span class="comment">#performance_schema</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.engines;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Qcache_free_blocks</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_free_memory</td>
    <td>1033888</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_hits</td>
    <td>11</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_inserts</td>
    <td>5</td>
  </tr>
  <tr>
    <td>Qcache_lowmen_prunes</td>
    <td>0</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_not_cached(当前查询没有进行缓存)</td>
    <td>9</td>
  </tr>
  <tr>
    <td>Qcache_queryies_in_cache</td>
    <td>5</td>
  </tr>
  <tr>
    <td>Qcache_total_blocks</td>
    <td>12</td>
  </tr>
</table>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.engines;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Qcache_free_blocks</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Qcache_free_memory</td>
    <td>1033888</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_hits</td>
    <td>11</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_inserts</td>
    <td>5</td>
  </tr>
  <tr>
    <td>Qcache_lowmen_prunes</td>
    <td>0</td>
  </tr>
  <tr style="color:red;font-weight:bolder;">
    <td>Qcache_not_cached(当前查询没有进行缓存)</td>
    <td>10</td>
  </tr>
  <tr>
    <td>Qcache_queryies_in_cache</td>
    <td>5</td>
  </tr>
  <tr>
    <td>Qcache_total_blocks</td>
    <td>12</td>
  </tr>
</table>

<ol start="5">
<li><p>在存储的函数，触发器或者时间的主体内执行的查询；</p>
</li>
<li><p>如果表更改，则使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除。这包括使用<strong>MERGE</strong>映射到已更改表的查询。一个表可以被许多类型的语句，如被改变INSERT、UPDATE、DELETE、TRUNCATE TABLE、ALTER TABLE、DROP TABLE 或者 DROP DATABASE。  </p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> tb_item <span class="keyword">set</span> title=<span class="string">'test1'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 2.67 second；该SQL失效；但是失效的同时又去进行了缓存；当前查询时并未缓存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;<span class="comment">#耗时 0.00 second；此时再去查询；即查询的缓存区内的内容</span></span><br></pre></td></tr></table></figure>

<h2 id="内存优化-优化原则"><a href="#内存优化-优化原则" class="headerlink" title="内存优化 - 优化原则"></a>内存优化 - 优化原则</h2><h3 id="内存优化原则"><a href="#内存优化原则" class="headerlink" title="内存优化原则"></a>内存优化原则</h3><ol>
<li>将尽量多的内存分配给MySQL做缓存(提高mysql的访问效率)，但要给操作系统和其他程序预留足够内存；</li>
<li>MyISAM存储引擎的数据文件读取依赖于操作系统自身的I/O缓存，因此，如果有MyISAM表，就要预留更多的内存给操作系统做I/O缓存。</li>
<li>排序区、连接区等缓存是分配给每个数据库会话（session）专用的，其默认值的设置要根据最大连接数合理分配，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽。</li>
</ol>
<h2 id="内存优化-MyISAM内存优化"><a href="#内存优化-MyISAM内存优化" class="headerlink" title="内存优化 - MyISAM内存优化"></a>内存优化 - MyISAM内存优化</h2><p>MyISAM的缓存机制：  </p>
<p>MyISAM存储引擎使用key_buffer缓存索引块（没有缓存数据块），加速MyISAM索引的读写速度，对于MyISAM表的数据块，mysql没有特别的缓存机制，完全依赖于操作系统的I/O缓存。  </p>
<p><strong>key_buffer_size</strong>  </p>
<p>key_buffer_size决定MyISAM索引块缓存区的大小，直接影响到MyISAM表的存取效率。  </p>
<p>可以在mysql参数文件中设置key_buffer_size的值，对于一般MyISAM数据库，建议至少将1/4可用内存分配给key_buffer_size。  </p>
<p>在/usr/my.cnf 中做如下配置：  </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">key_buffer_size</span>=<span class="number">512</span>M</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'key_buffer_size'</span>;<span class="comment">#mysql 命令行</span></span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>key_buffer_size</td>
    <td>8388608(单位为字节；默认大小)</td>
  </tr>
</table>

<p><strong>read_buffer_size</strong>  </p>
<p>如果需要经常顺序扫描MyISAM表，可以通过增大read_buffer_size的值来改善性能。  </p>
<p>但是需要注意的是read_buffer_size是每个session独占的，如果默认值设置太大，就会造成内存浪费。  </p>
<p><strong>read_rnd_buffer_size</strong>  </p>
<p>对于需要做排序的MyISAM表的查询，如带有 order by 子句的SQL，适当增加read_rnd_buffer_size的值，可以改善此类的SQL性能。  </p>
<p>但是需要注意的是read_rnd_buffer_size 是每个session独占的，如果默认值设置太大，就会造成内存浪费。  </p>
<h2 id="内存优化-InnoDB内存优化"><a href="#内存优化-InnoDB内存优化" class="headerlink" title="内存优化 - InnoDB内存优化"></a>内存优化 - InnoDB内存优化</h2><p>innodb的缓存机制：<br>InnoDB用一块内存区做IO缓存池，该缓存池不仅用来缓存InnoDB的索引块，而且也用来缓存InnoDB的数据块。  </p>
<p><strong>innodb_buffer_pool_size</strong>  </p>
<p>该变量决定了innodb存储引擎表数据和索引数据的最大缓存区大小。<br>在保证操作系统以及其他程序有足够内存可用的情况下，innodb_buffer_pool_size的值越大，缓存命中率越高，访问innodb表的需要的磁盘I/O就越少，性能也就越高。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'innodb_buffer_pool_size'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>innodb_buffer_pool_size</td>
    <td>134217728(单位为字节；默认大小128M；134217728/1024-->131072（换算成B），134217728/1024/1024-->128（换算成M）；)</td>
  </tr>
</table>

<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">vi /usr/<span class="keyword">my</span>.cnf</span><br><span class="line"><span class="comment"># innodb_buffer_pool_size=512M #修改内容</span></span><br></pre></td></tr></table></figure>

<p><strong>innodb_log_buffer_size</strong>  </p>
<p>决定了innodb重做日志缓存的大小，对于避免产生大量更新记录的大事务，增加innodb_log_buffer_size的大小，可以避免innodb在事务提交前就执行不必要的日志写入磁盘操作。  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">vi /usr/my.cnf</span><br><span class="line"><span class="comment"># innodb_log_buffer_size=10M #修改内容</span></span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>

<h2 id="并发参数调整"><a href="#并发参数调整" class="headerlink" title="并发参数调整"></a>并发参数调整</h2><h3 id="mysql并发参数调整"><a href="#mysql并发参数调整" class="headerlink" title="mysql并发参数调整"></a>mysql并发参数调整</h3><p>从实现上来说，MySQL Server是多线程结构，包括后台线程和客户服务线程。  </p>
<p>多线程可以有效利用服务器资源，提高数据库的并发性能。  </p>
<p>在mysql中，控制并发连接和线程的主要参数包括 max_connections、back_log、thread_cache_size、table_open_size；  </p>
<h4 id="max-connections（最大连接数）"><a href="#max-connections（最大连接数）" class="headerlink" title="max_connections（最大连接数）"></a>max_connections（最大连接数）</h4><p>采用max_connections 控制允许连接到MySQL数据库的最大数量，默认值是151。  </p>
<p>如果状态变量 connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已经达到允许最大值而失败，这时可以考虑增大max_connections的值。  </p>
<p>MySQL最大可支持的连接数，取决于很多因素，包括给定操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度，期望的响应时间等。  </p>
<p>在Linux平台下，性能好的服务器，支持500-1000个连接都不是难事，需要根据服务器性能进行评估设定。  </p>
<h4 id="back-log"><a href="#back-log" class="headerlink" title="back_log"></a>back_log</h4><p>back_log 参数控制MySQL监听TCP端口时设置的积压请求栈大小。  </p>
<p>如果mysql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。  </p>
<p>5.6.6版本之前默认值为50，之后的版本默认为50+（max_connections/5），但最大不超过900。  </p>
<p>如果需要数据库在较短的时间内处理大量连接请求，可以考虑适当增大back_log的值。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'back_log'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>back_log</td>
    <td>80(默认个数)</td>
  </tr>
</table>

<h4 id="table-open-cache"><a href="#table-open-cache" class="headerlink" title="table_open_cache"></a>table_open_cache</h4><p>该参数用来控制所有SQL语句执行线程可打开表缓存的数量，而在执行SQL语句时，每一个SQL执行线程至少要打开一个表缓存，该参数的值应该根据设置的最大连接数max_connections 以及每个连接执行关联查询中涉及的白鸥的最大数量来决定。  </p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">max_connections x N<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'table_open_cache'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>table_open_cache</td>
    <td>2000(默认大小)</td>
  </tr>
</table>

<h4 id="thread-cache-size（线程缓存大小）"><a href="#thread-cache-size（线程缓存大小）" class="headerlink" title="thread_cache_size（线程缓存大小）"></a>thread_cache_size（线程缓存大小）</h4><p>为了加快连接数据库的速度，MySQL会缓存一定数量的客户服务线程（线程池）以备重用，通过参数 thread_cache_size 可控制MySQL缓存客户服务线程的数量（线程池的大小）。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'thread_cache_size'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>thread_cache_size</td>
    <td>9(默认大小9个线程)</td>
  </tr>
</table>

<h4 id="innodb-lock-wait-timeout（innodb行锁的等待时间）"><a href="#innodb-lock-wait-timeout（innodb行锁的等待时间）" class="headerlink" title="innodb_lock_wait_timeout（innodb行锁的等待时间）"></a>innodb_lock_wait_timeout（innodb行锁的等待时间）</h4><p>该参数是用来设置InnoDB事务等待行锁的时间，默认值时候50ms。  </p>
<p>可以根据需要进行动态设置。  </p>
<p>对于需要快速反馈的业务系统来说，可以将行锁的等待时间调小，以避免事务长时间挂起；  </p>
<p>对于后台运行的批量处理程序来说，可以将行锁的等待时间调大，以避免发生大的回滚操作。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'innodb_lock_wait_timeout'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>innodb_lock_wait_timeout</td>
    <td>50</td>
  </tr>
</table>

<h2 id="锁-锁的概述及分类"><a href="#锁-锁的概述及分类" class="headerlink" title="锁 - 锁的概述及分类"></a>锁 - 锁的概述及分类</h2><h3 id="锁概述"><a href="#锁概述" class="headerlink" title="锁概述"></a>锁概述</h3><p>锁是计算机协调多个进程 或者 线程 并发访问某一资源的机制（避免争抢）。  </p>
<p>在数据库中，除了传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的资源。  </p>
<p>如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。  </p>
<p>从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。  </p>
<h3 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h3><p>从对数据操作的粒度分为：  </p>
<ol>
<li>表锁：操作时，会锁定整个表</li>
<li>行锁：操作时，会锁定当前操作行</li>
</ol>
<p>从对数据操作的类型分：  </p>
<ol>
<li>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响</li>
<li>写锁（排它锁）：当前操作没有完成之前，他会阻断其他写锁和读锁</li>
</ol>
<h2 id="锁-MySQL对锁的支持"><a href="#锁-MySQL对锁的支持" class="headerlink" title="锁 - MySQL对锁的支持"></a>锁 - MySQL对锁的支持</h2><p>相对其他数据库而言，MySQL的锁机制比较简单。  </p>
<p>其最显著的特点是不同的存储引擎支持不同的锁机制。  </p>
<p>下标罗列出了各个存储引擎对锁的支持情况。  </p>
<table>
  <tr>
    <th>存储引擎</th>
    <th>表级锁</th>
    <th>行级锁</th>
    <th>页面锁</th>
  </tr>
  <tr>
    <td>MyISAM</td>
    <td>支持</td>
    <td>不支持</td>
    <td>不支持</td>
  </tr>
    <tr>
    <td>InnoDB</td>
    <td>支持</td>
    <td>支持</td>
    <td>不支持</td>
  </tr>
    <tr>
    <td>MEMORY</td>
    <td>支持</td>
    <td>不支持</td>
    <td>不支持</td>
  </tr>
    <tr>
    <td>BDB</td>
    <td>支持</td>
    <td>不支持</td>
    <td>支持</td>
  </tr>
</table>

<p>MySQL这三种锁的特性可大致归纳如下：  </p>
<table>
  <tr>
    <th>锁类型</th>
    <th>特定</th>
  </tr>
  <tr>
    <td>表级锁</td>
    <td>偏向MyISAM存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</td>
  </tr>
    <tr>
    <td>行级锁</td>
    <td>偏向InnoDB存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</td>
  </tr>
    <tr>
    <td>页面锁</td>
    <td>开销和加锁时间介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发度一般。</td>
  </tr>
</table>

<p>从上述特点可见，很难笼统的说哪种锁更好，只能就具体应用的特点来说哪种锁更合适。  </p>
<p>仅从锁的角度来说：<br>  表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web应用；<br>  而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理（OLTP）系统；  </p>
<h2 id="锁-MyISAM表锁-读锁"><a href="#锁-MyISAM表锁-读锁" class="headerlink" title="锁 - MyISAM表锁 - 读锁"></a>锁 - MyISAM表锁 - 读锁</h2><p>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。</p>
<p>MyISAM存储引擎支持表锁，这也是MySQL开始几个版本中唯一支持的锁类型。  </p>
<h3 id="如何加表锁"><a href="#如何加表锁" class="headerlink" title="如何加表锁"></a>如何加表锁</h3><p>MyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等），会自动给涉及的表加写锁，这个过程并不需要用户干预。  </p>
<p>因此，用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。  </p>
<p>显示加表锁语法：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加读锁：  </span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> table_name <span class="keyword">read</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#加写锁：  </span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> table_name write;</span><br></pre></td></tr></table></figure>

<h3 id="读锁案例"><a href="#读锁案例" class="headerlink" title="读锁案例"></a>读锁案例</h3><p>准备环境  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">create database demo_03<span class="built_in"> default </span><span class="attribute">charset</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line">use demo_03;</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">'tb_book'</span>(</span><br><span class="line">  <span class="string">'id'</span> INT(11) AUTO_INCREMENT,</span><br><span class="line">  <span class="string">'name'</span> VARCHAR(50)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'publish_name'</span> DATE<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">'status'</span> CHAR(1)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (<span class="string">'id'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=myisam<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入tb_book 基础数据</span></span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">'tb_user'</span>(</span><br><span class="line">  <span class="string">'id'</span> INT(11) AUTO_INCREMENT,</span><br><span class="line">  <span class="string">'name'</span> VARCHAR(50)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY(<span class="string">'id'</span>)</span><br><span class="line">)<span class="attribute">ENGINE</span>=myisam<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入tb_user 基础数据</span></span><br><span class="line"></span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">lock table tb_book read;</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> tb_books;</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> tb_user;# Table <span class="string">'tb_user'</span> was <span class="keyword">not</span> locked with LOCK TABLES 锁定tb_book表途中无法去操作其他表；除非当前tb_book表锁释放；</span><br><span class="line"></span><br><span class="line">update tb_book <span class="builtin-name">set</span> name =<span class="string">'solr'</span> where <span class="attribute">id</span>=2;#当前对tb_book表进行的锁是读锁，而不是写锁；所以当前无法进行更新；Table <span class="string">'tb_book'</span> was locked with a READ lock <span class="keyword">and</span> can<span class="string">'t be updated.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">unlock tables;#只有当当前的tb_book表当中的读锁进行解锁，其他客户端连接mysql的该表时才能够进行写锁；否则将一直等待当前该tb_book的读锁释放；</span></span><br></pre></td></tr></table></figure>

<p>如果对MyISAM表进行操作了读锁，其不会阻塞其他线程的读操作，但是会阻塞其他线程的写操作。  </p>
<h2 id="锁-MyISAM表锁-写锁"><a href="#锁-MyISAM表锁-写锁" class="headerlink" title="锁 - MyISAM表锁 - 写锁"></a>锁 - MyISAM表锁 - 写锁</h2><p>写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当前客户端</span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> tb_book write;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> tb_book <span class="keyword">set</span> <span class="keyword">name</span> =<span class="string">'solr'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_book(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'es'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他客户端</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book;<span class="comment">#其他客户端将一直处于等待状态，除非当前客户端的写锁释放（即当前客户端的业务操作完成），否则其他客户端一直处于等待状态。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当前客户端</span></span><br><span class="line"><span class="keyword">unlock</span> <span class="keyword">tables</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他客户端</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book;<span class="comment">#当 当前客户端释放锁之后，该其他客户端即立刻能查询到数据。</span></span><br></pre></td></tr></table></figure>

<h2 id="锁-MyISAM表锁-小结"><a href="#锁-MyISAM表锁-小结" class="headerlink" title="锁 - MyISAM表锁 - 小结"></a>锁 - MyISAM表锁 - 小结</h2><p>锁模式的互相兼容性如表所示：  </p>
<table>
  <tr>
    <th>当前锁模式/请求锁模式</th>
    <th>None（理解为当前客户端获取得到的锁）</th>
    <th>读锁（其他客户端对于读操作是否可行）</th>
    <th>写锁（其他客户端对于写操作是否可行）</th>
  </tr>
  <tr>
    <th>读锁</th>
    <td>是（当前客户端获取得到的读锁）</td>
    <td>是（其他客户端可以进行读操作）</td>
    <td>否（其他客户端无法进行写操作）</td>
  </tr>
    <tr>
    <th>写锁</th>
    <td>是（当前客户端获取得到的写锁）</td>
    <td>否（其他客户端无法进行读操作）</td>
    <td>否（其他客户端无法进行写操作）</td>
  </tr>
</table>

<p>由上表可见：  </p>
<ol>
<li>对MyISAM表的读操作，不会阻塞其他用户对同一张表的读请求，但是会阻塞对同一张表的写请求。</li>
<li>对MyISAM表的写操作，则会阻塞其他用户对同一张表的读和写操作。</li>
</ol>
<p>简而言之，就是读锁会阻塞写，但是不会阻塞读；而写锁，则既会阻塞读，又会阻塞写。  </p>
<p>此外，MyISAM的读写锁调度是写操作优先，这也是MyISAM不适合做写为主的表的存储引擎的原因。<br>因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</p>
<h2 id="锁-MyISAM表锁-查看锁争用情况"><a href="#锁-MyISAM表锁-查看锁争用情况" class="headerlink" title="锁 - MyISAM表锁 - 查看锁争用情况"></a>锁 - MyISAM表锁 - 查看锁争用情况</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure>
<p>Database: 数据库  </p>
<p>Table: 数据表  </p>
<p>In_use: 表当前被查询使用的次数。如果该数为零，则表是打开的，但是当前没有被使用。  </p>
<p>Name_locked: 表名称是否被锁定。名称锁定用于取消表或者对表进行重命名等操作。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> tb_book write;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> <span class="keyword">tables</span>;<span class="comment">#database: demo_03; table: tb_book ; In_use(正在使用):1；Name_locked:0</span></span><br><span class="line"><span class="keyword">unlock</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Table_locks%'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>Table_lockes_immediate</td>
    <td>70</td>
  </tr>
    <tr>
    <td>Table_locks_waited</td>
    <td>0</td>
  </tr>
</table>

<p>Table_locks_immediate: 指的是能够立即获得表级锁的次数，每次立即获取锁，值加1；  </p>
<p>Table_locks_waited: 指的是不能立即获取表级锁而需要等待的次数，每等待一次，该值加1，此值高说明存在着较为严重的表级锁争用情况。</p>
<h2 id="锁-InnoDB行锁-介绍及背景知识"><a href="#锁-InnoDB行锁-介绍及背景知识" class="headerlink" title="锁 - InnoDB行锁 - 介绍及背景知识"></a>锁 - InnoDB行锁 - 介绍及背景知识</h2><h3 id="行锁介绍"><a href="#行锁介绍" class="headerlink" title="行锁介绍"></a>行锁介绍</h3><p>InnoDB默认支持行锁，也支持表锁；  </p>
<p>行锁特点：偏向InnoDB存储迎请，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。<br>（由于锁定粒度最小，所以发生锁冲突的概率最低，二者存在关联）  </p>
<p>InnoDB与MyISAM的最大不同有两点：一是支持事务；二是采用了行级锁；<br>(事务和行级锁之间存在关联，支持事务的原因即在于InnoDB采用的是行级锁)</p>
<h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><p><strong>事务及其ACID属性</strong>  </p>
<p>事务是由一组SQL语句组成的逻辑处理单元。<br>事务具有以下4个特性，简称为事务ACID属性。  </p>
<table>
  <tr>
    <th>ACID属性</th>
    <th>含义</th>
  </tr>
  <tr>
    <td>原子性（Atomic）</td>
    <td>事务是一个原子操作单元，其对数据的修改，要么全部成功，要么全部失败</td>
  </tr>
  <tr>
    <td>一致性（Consistent）</td>
    <td>在事务开始和完成时，数据都必须保持一致状态</td>
  </tr>
  <tr>
    <td>隔离性（Isolation）</td>
    <td>数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境下运行</td>
  </tr>
  <tr>
    <td>持久性（Durable）</td>
    <td>事务完成之后，对于数据的修改是永久的</td>
  </tr>
</table>

<p><strong>并发事务处理带来的问题</strong>  </p>
<table>
  <tr>
    <th>问题</th>
    <th>含义</th>
  </tr>
  <tr>
    <td>丢失更新（Lost Update）</td>
    <td>当两个或者多个事务选择同一行，最初的事务修改的值，会被后面的事务修改的值覆盖</td>
  </tr>
  <tr>
    <td>脏读（Dirty Reads）</td>
    <td>当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据（一个事务读取到了另外一个事务还未提交的数据）</td>
  </tr>
  <tr>
    <td>不可重复度（Non_repeatable Reads）</td>
    <td>一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现和以前独处的数据不一致</td>
  </tr>
  <tr>
    <td>幻读（Phantom Reads）</td>
    <td>一个事务按照相同的查询条件重新读取以前查询过的数据，却发现其他事务插入了满足其查询条件的新数据。</td>
  </tr>
</table>

<p><strong>事务隔离级别</strong>  </p>
<p>为了解决上述提到的事务并发问题，数据库提供一定的事务隔离机制来解决这个问题。  </p>
<p>数据库的事务隔离越严格，并发副作用越小，但付出的代价也就越大(性能越低)，因为事务隔离实质上就是使用事务在一定程度上“串行化”进行，这显然与“并发”是矛盾的。  </p>
<p>数据库的隔离级别有4个，由低到高依次为Read uncommitted、Read committed、Repeatable read、Serializable ，这四个界别可以逐个解决脏写、脏读、不可重复度、幻读这几类问题。  </p>
<table>
  <tr>
    <th>隔离级别</th>
    <th>丢失更新</th>
    <th>脏读</th>
    <th>不可重复读</th>
    <th>幻读</th>
  </tr>
  <tr>
    <td>Read uncommitted</td>
    <td>x</td>
    <td>√</td>
    <td>√</td>
    <td>√</td>
  </tr>
    <tr>
    <td>Read committed</td>
    <td>x</td>
    <td>x</td>
    <td>√</td>
    <td>√</td>
  </tr>
   <tr>
    <td>Repeatable read(默认)</td>
    <td>x</td>
    <td>x</td>
    <td>x</td>
    <td>√</td>
  </tr>
    <tr>
    <td>Serializable</td>
    <td>x</td>
    <td>x</td>
    <td>x</td>
    <td>x</td>
  </tr>
</table>

<p>备注： √ 代表可能出现， x 代表不会出现。  </p>
<p>MySQL的数据库的默认隔离级别是 Repeatable read，查看方式：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'tx_isolation'</span>;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Variable_name</th>
    <th>Value</th>
  </tr>
  <tr>
    <td>tx_isolation</td>
    <td>REPEATABLE-READ</td>
  </tr>
</table>

<h2 id="锁-InnoDB行锁-类型"><a href="#锁-InnoDB行锁-类型" class="headerlink" title="锁 - InnoDB行锁 - 类型"></a>锁 - InnoDB行锁 - 类型</h2><h3 id="InnoDB的行锁模式"><a href="#InnoDB的行锁模式" class="headerlink" title="InnoDB的行锁模式"></a>InnoDB的行锁模式</h3><p>InnoDB实现了以下两种类型的行锁：  </p>
<ul>
<li><p>共享锁（S）： 又称为读锁，简称S锁，共享锁就是多个事务对于统一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。  </p>
</li>
<li><p>排它锁（X）：又称为写锁，简称X锁，排它锁就是不能与其他锁并存。如果一个事务湖区了一个数据行的排它锁，其他事务就不能再获取该行的其他锁，包括共享锁和排它锁，但是获取排它锁的事务可以对数据进行读取和修改。  </p>
</li>
</ul>
<p>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排它锁（X）；<br>对于普通SELECT语句，InnoDB不会加任何锁；  </p>
<p>可以通过以下语句显式给记录集加共享锁或者排它锁：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#共享锁（S）</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> ...... <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#排它锁（X）</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> ....... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span></span><br></pre></td></tr></table></figure>

<h3 id="案例准备工作"><a href="#案例准备工作" class="headerlink" title="案例准备工作"></a>案例准备工作</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_innodb_lock(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>),</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">16</span>),</span><br><span class="line">  sex <span class="built_in">varchar</span>(<span class="number">1</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入基础数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建单列索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_test_innodb_lock_id <span class="keyword">on</span> test_innodb_lock(<span class="keyword">id</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_test_innodb_lock_name <span class="keyword">on</span> test_innodb_lock(<span class="keyword">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure>

<h3 id="行锁基本演示"><a href="#行锁基本演示" class="headerlink" title="行锁基本演示"></a>行锁基本演示</h3><table>
  <tr>
    <th>Session-1</th>
    <th>Session-2</th>
  </tr>
  <tr>
    <td>关闭自动提交功能（set autocommit=0;）</td>
    <td>关闭自动提交功能（set autocommit=0;）</td>
  </tr>
  <tr>
    <td>可以正常的查询出全部的数据（select * from test_innodb_lock;）</td>
    <td>可以正常的查询出全部的数据（select * from test_innodb_lock;）</td>
  </tr>
  <tr>
    <td>查询id为3的数据；（select * from test_innodb_lock where id=3;）</td>
    <td>查询id为3的数据；（select * from test_innodb_lock where id=3;）</td>
  </tr>
   <tr>
    <td>更新id为3的数据，但是不提交（update test_innodb_lock set name='AI' where id=3;）</td>
    <td>更新id为3的数据，在Session-1的更新提交完成之前一直处于等待状态；（update test_innodb_lock set name='AII' where id=3;）</td>
  </tr>
<tr>
    <td>通过commit，提交事务（commit;）</td>
    <td>接触阻塞，更新正常进行（update test_innodb_lock set name='AII' where id=3;）</td>
  </tr>
  <tr>
    <td colspan="2">以上，操作的都是同一行的数据，接下来，演示不同行的数据；</td>
  </tr>
  <tr>
    <td>更新id为3的数据，正常的获取到行锁，执行更新；(update test_innodb_lock set name='a1' where id =3;)</td>
    <td>由于与Session-1操作不是同一行，获取当前行锁，执行更新；（update test_innodb_lock set name ="C1" where id=5;）</td>
  </tr>
</table>

<h2 id="锁-InnoDB行锁-行锁升级为表锁"><a href="#锁-InnoDB行锁-行锁升级为表锁" class="headerlink" title="锁 - InnoDB行锁 - 行锁升级为表锁"></a>锁 - InnoDB行锁 - 行锁升级为表锁</h2><p>如果不通过索引条件检索数据，那么innodb将对表中的所有记录加锁，实际效果跟表锁一样。  </p>
<p>查看当前表的索引：show index from test_innodb_lock;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> test_innodb_lock\G;</span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>Session-1</th>
    <th>Session-2</th>
  </tr>
  <tr>
    <td>关闭事务的自动提交（set autocommit=0;）</td>
    <td>关闭事务的自动提交（set autocommit=0;）</td>
  </tr>
  <tr>
    <td>执行更新语句（update test_innodb_lock set sex='2' where <span style="color:red;font-weight:bolder;">name=400</span>; ）</td>
    <td>执行更新语句，但是出于阻塞状态（update test_innodb_lock set sex='2' where id=9;）</td>
  </tr>
   <tr>
    <td>提交事务（commit;）</td>
    <td>解除阻塞，执行更新成功（update test_innodb_lock set sex='2' where id=9;）</td>
  </tr>
  <tr>
    <td></td>
    <td>执行提交操作（commit;）</td>
  </tr>
</table>

<p>由于执行更新时，name字段本来为varchar类型，但是Session-1当中name作为数字类型来使用，所以存在类型转换，索引失效，最终行锁变为表锁；  </p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> test_innodb_lock;<span class="meta">#查看表结构</span></span><br></pre></td></tr></table></figure>

<p>索引失效：name字段本来的类型为varcahr类型；如果是varchar类型但是在使用的时候，没有给其name字段的取值加上单引号，那么这个时候索引就将失效；索引失效，行锁升级为表锁；</p>
<h2 id="锁-InnoDB行锁-间隙锁危害"><a href="#锁-InnoDB行锁-间隙锁危害" class="headerlink" title="锁 - InnoDB行锁 - 间隙锁危害"></a>锁 - InnoDB行锁 - 间隙锁危害</h2><p>当用范围条件，而不是使用相等条件检索数据，并请求共享或者排它锁的时候，InnoDB会给符合条件的已有数据进行加锁；<br>对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP）”，InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的 间隙锁（Next-Key锁）；  </p>
<p>ID &lt; 10 ：  </p>
<ul>
<li>1,2,3,4,5,6,7,8,9</li>
<li>1,2,3,4,6,9(此时当中的5 和 7、8 则称之为间隙)</li>
</ul>
<p>示例：  </p>
<table>
  <tr>
    <th>Session-1</th>
    <th>Session-2</th>
  </tr>
  <tr>
    <td>关闭事务自动提交（set autocommit=0;）</td>
    <td>关闭事务自动提交（set autocommit=0;）</td>
  </tr>
  <tr>
    <td>根据id范围更新数据（update test_innodb_lock set name='332423' where id < 4 ;）</td>
    <td>插入id为2的记录，处于阻塞状态（insert into test_innodb_lock values(2,'1001','1'); ）</td>
  </tr>
    <tr>
    <td>提交事务（commit;）</td>
    <td>解除阻塞，执行插入操作（insert into test_innodb_lock values(2,'1001','1'); ）</td>
  </tr>
   <tr>
    <td></td>
    <td>提交事务（commit;）</td>
  </tr>
</table>

<h2 id="锁-InnoDB行锁-争用情况查看"><a href="#锁-InnoDB行锁-争用情况查看" class="headerlink" title="锁 - InnoDB行锁 - 争用情况查看"></a>锁 - InnoDB行锁 - 争用情况查看</h2><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">show status like <span class="string">'innodb_row_lock%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#Innodb_row_lock_current_waits: 当前正在等待锁定的数量；</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#Innodb_row_lock_time： 从系统启动到现在锁定总时间长度</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#Innodb_row_lock_time_avg: 每次等待所花平均时长</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#Innodb_row_lock_time_max: 从系统启动到现在等待最长的一次所花时间</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#Innodb_row_lock_waits： 系统启动后到现在总共等待的次数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#当等待的次数很高，而且每次等待的时长也不小的时候，就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手制定优化计划。</span></span><br></pre></td></tr></table></figure>

<h2 id="锁-InnoDB行锁-总结"><a href="#锁-InnoDB行锁-总结" class="headerlink" title="锁 - InnoDB行锁 - 总结"></a>锁 - InnoDB行锁 - 总结</h2><p>Innodb存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面带来了性能损耗可能比表锁会更高一些，但是在整体并发处理能力方面姚媛媛优于MyISAM的表锁的。  </p>
<p>当系统并发量较高的时候，InnoDB的整体性能和MyISAM相比就会有比较明显的优势。  </p>
<p>但是，InnoDB的行级锁同样也有其脆弱的一面，但使用不当的时候，可能会让InnoDB的整体性能不仅不能比MyISAM高，甚至可能会更差。  </p>
<p>优化建议：  </p>
<ul>
<li>尽可能让所有数据检索都能通过索引来完成，避免无索引行锁升级为表锁</li>
<li>合理设计索引，尽量缩小锁的范围</li>
<li>尽可能减少索引条件，以及索引范围，避免间隙锁</li>
<li>尽量控制事务大小，减少锁定资源量和时间长度</li>
<li>尽可能使用低级别事务隔离（前提：但是需要业务层面满足需求）</li>
</ul>
<h2 id="SQL技巧-SQL执行顺序及正则表达式"><a href="#SQL技巧-SQL执行顺序及正则表达式" class="headerlink" title="SQL技巧 - SQL执行顺序及正则表达式"></a>SQL技巧 - SQL执行顺序及正则表达式</h2><h3 id="SQL执行顺序"><a href="#SQL执行顺序" class="headerlink" title="SQL执行顺序"></a>SQL执行顺序</h3><p>编写顺序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">  &lt;<span class="keyword">select</span> <span class="keyword">list</span>&gt;</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  &lt;left_table&gt; &lt;join_type&gt;</span><br><span class="line"><span class="keyword">JOIN</span></span><br><span class="line">  &lt;right_table&gt; <span class="keyword">ON</span> &lt;join_condition&gt;</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  &lt;where_condition&gt;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  &lt;group_by_list&gt;</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">  &lt;having_condition&gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  &lt;order_by_condition&gt;</span><br><span class="line"><span class="keyword">LIMIT</span></span><br><span class="line">  &lt;limit_params&gt;</span><br></pre></td></tr></table></figure>

<p>执行顺序  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> &lt;left_table&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ON</span> &lt;join_condition&gt;</span><br><span class="line"></span><br><span class="line">&lt;join_type&gt; <span class="keyword">JOIN</span> &lt;right_table&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> &lt;where_condition&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;group_by_list&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">HAVING</span> &lt;having_condition&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> &lt;<span class="keyword">select</span> list&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;order_by_condition&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">LIMIT</span> &lt;limit_params&gt;</span><br></pre></td></tr></table></figure>

<h3 id="正则表达式使用"><a href="#正则表达式使用" class="headerlink" title="正则表达式使用"></a>正则表达式使用</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则表达式 regexp</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'^j'</span>;<span class="comment">#查询name字段取值以 “j” 字符开头的记录行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'S$'</span>;<span class="comment">#查询name字段取值以 “S” 字符结尾的记录行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'[uvw]'</span>;<span class="comment">#查询name字段取值包含 “u”、“v”、“w” 字符的记录行</span></span><br></pre></td></tr></table></figure>

<table>
  <tr>
    <th>符号</th>
    <th>含义</th>
  </tr>
  <tr>
    <td>^</td>
    <td>在字符串开始处进行匹配</td>
  </tr>
    <tr>
    <td>$</td>
    <td>在字符串末尾处进行匹配</td>
  </tr>
    <tr>
    <td>.</td>
    <td>匹配任意单个字符，包括换行符</td>
  </tr>
  <tr>
    <td>[...]</td>
    <td>匹配出括号内的任意字符</td>
  </tr>
  <tr>
    <td>[^...]</td>
    <td>匹配不出括号内的任意字符</td>
  </tr>
  <tr>
    <td>a*</td>
    <td>匹配零个或者多个a（包括空串）</td>
  </tr>
  <tr>
    <td>a+</td>
    <td>匹配一个或者多个a（不包括空串）</td>
  </tr>
  <tr>
    <td>a?</td>
    <td>匹配零个或者一个a</td>
  </tr>
    <tr>
    <td>a1|a2</td>
    <td>匹配a1或者a2</td>
  </tr>
    <tr>
    <td>a(m)</td>
    <td>匹配m个a</td>
  </tr>
      <tr>
    <td>a(m,)</td>
    <td>至少匹配m个a</td>
  </tr>
      <tr>
    <td>a(m,n)</td>
    <td>匹配m个a 到n个a</td>
  </tr>
      <tr>
    <td>a(,n)</td>
    <td>匹配0到n个a</td>
  </tr>
      <tr>
    <td>(...)</td>
    <td>将模式元素组成单一元素</td>
  </tr>
</table>

<h2 id="SQL技巧-数字函数与字符串函数"><a href="#SQL技巧-数字函数与字符串函数" class="headerlink" title="SQL技巧 - 数字函数与字符串函数"></a>SQL技巧 - 数字函数与字符串函数</h2><h3 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h3><table>
  <tr>
    <th>函数名称</th>
    <th>作用</th>
  </tr>
  <tr>
    <td>ABS</td>
    <td>求绝对值</td>
  </tr>
    <tr>
    <td>SQRT</td>
    <td>求二次方根</td>
  </tr>
    <tr>
    <td>MOD</td>
    <td>求余数</td>
  </tr>
    <tr>
    <td>CEIL和CEILING</td>
    <td>两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</td>
  </tr>
  <tr>
    <td>FLOOR</td>
    <td>向下取整，返回值转化为一个BIGINT</td>
  </tr>
  <tr>
    <td>RAND</td>
    <td>生成一个0-1之间的随机数，传入整数参数是，用来产生重复序列</td>
  </tr>
  <tr>
    <td>ROUND</td>
    <td>对所传入参数进行四舍五入</td>
  </tr>
    <tr>
    <td>SIGN</td>
    <td>返回参数的符号</td>
  </tr>
    <tr>
    <td>POW和POWER</td>
    <td>两个函数的功能相同，都是所传参数的次方的结果值</td>
  </tr>
  <tr>
    <td>SIN</td>
    <td>求正弦值</td>
  </tr>
  <tr>
    <td>COS</td>
    <td>求余弦值</td>
  </tr>
  <tr>
    <td>ACOS</td>
    <td>求反余弦值，与函数COS互为反函数</td>
  </tr>
    <tr>
    <td>TAN</td>
    <td>求正切值</td>
  </tr>
  <tr>
    <td>ATAN</td>
    <td>求反正切值，与函数TAN互为反函数</td>
  </tr>
  <tr>
    <td>COT</td>
    <td>求余切值</td>
  </tr>
</table>

<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table>
  <tr>
    <th>函数名称</th>
    <th>作用</th>
  </tr>
  <tr>
    <td>LENGTH</td>
    <td>计算字符串长度函数，返回字符串的字节长度</td>
  </tr>
    <tr>
    <td>CONCAT</td>
    <td>合并字符串函数，返回结果为连接参数产生的字符串，参数可以使用一个或者多个</td>
  </tr>
    <tr>
    <td>INSERT</td>
    <td>替换字符串函数</td>
  </tr>
    <tr>
    <td>LOWER</td>
    <td>将字符串中的字母转换为小写</td>
  </tr>
    <tr>
    <td>UPPER</td>
    <td>将字符串中的字母转换为大写</td>
  </tr>
    <tr>
    <td>LEFT</td>
    <td>从左侧截取字符串，返回字符串左边的若干个字符</td>
  </tr>
    <tr>
    <td>RIGTH</td>
    <td>从右侧截取字符串，返回字符串右边的若干个字符</td>
  </tr>
    <tr>
    <td>TRIM</td>
    <td>删除字符串左右两侧的空格</td>
  </tr>
    <tr>
    <td>REPLACE</td>
    <td>字符串替换函数，返回替换后的新字符串</td>
  </tr>
    <tr>
    <td>SUBSTRING</td>
    <td>截取字符串，返回从指定位置开始的指定长度的字符串</td>
  </tr>
    <tr>
    <td>REVERSE</td>
    <td>字符串反转（逆序）函数，返回与原始字符串顺序相反的字符串</td>
  </tr>
</table>

<h2 id="SQL技巧-日期函数与聚合函数"><a href="#SQL技巧-日期函数与聚合函数" class="headerlink" title="SQL技巧 - 日期函数与聚合函数"></a>SQL技巧 - 日期函数与聚合函数</h2><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><table>
  <tr>
    <th>函数名称</th>
    <th>作用</th>
  </tr>
  <tr>
    <td>CURDATE和CURRENT_DATE</td>
    <td>两个函数作用相同，返回当前系统的日期值</td>
  </tr>
  <tr>
    <td>CURTIME和CURRENT_TIME</td>
    <td>两个函数作用相同，返回当前系统的时间值</td>
  </tr>
  <tr>
    <td>NOW和SYSDATE</td>
    <td>两个函数作用相同，返回当前系统的日期和时间值</td>
  </tr>
  <tr>
    <td>MONTH</td>
    <td>获取指定日期中的月份</td>
  </tr>
  <tr>
    <td>MONTHNAME</td>
    <td>获取指定日期中的月份英文名称</td>
  </tr>
  <tr>
    <td>DAYNAE</td>
    <td>获取指定日期对应的星期几的英文名称</td>
  </tr>
  <tr>
    <td>DAYOFWEEK</td>
    <td>获取指定日期对应的一周的索引位置值</td>
  </tr>
  <tr>
    <td>WEEK</td>
    <td>获取指定日期是一年中的第几周，返回值的范围是否为0~52或者1~53</td>
  </tr>
  <tr>
    <td>DAYOFYEAR</td>
    <td>获取指定日期是一年中的第几天，返回值范围是1~366</td>
  </tr>
  <tr>
    <td>DAYOFMONTH</td>
    <td>获取指定日期是一个月中的第几天，返回值是1~31</td>
  </tr>
  <tr>
    <td>YEAR</td>
    <td>获取年份，返回值范围是1970~2069</td>
  </tr>
  <tr>
    <td>TIME_TO_SEC</td>
    <td>将时间参数转换为秒数</td>
  </tr>
  <tr>
    <td>SEC_TO_TIME</td>
    <td>将秒数转换为时间，与TIME_TO_SEC互为反函数</td>
  </tr>
  <tr>
    <td>DATE_ADD和ADDDATE</td>
    <td>两个函数功能相同，都是向日期添加指定的时间间隔</td>
  </tr>
  <tr>
    <td>DATE_SUB和SUBDATE</td>
    <td>两个函数功能相同，都是向日期减去指定的时间间隔</td>
  </tr>
  <tr>
    <td>ADDTIME</td>
    <td>时间加法运算，在原始时间上添加指定的时间</td>
  </tr>
  <tr>
    <td>SUBTIME</td>
    <td>时间减法运算，在原始时间上减去指定时间</td>
  </tr>
  <tr>
    <td>DATEDIFF</td>
    <td>获取两个日期之间间隔，返回参数1减去参数2的值</td>
  </tr>
  <tr>
    <td>DATE_FORMAT</td>
    <td>格式化指定的日期，根据参数返回指定格式的值</td>
  </tr>
  <tr>
    <td>WEEKDAY</td>
    <td>获取指定日期在一周内的对应的工作日索引</td>
  </tr>
</table>

<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><table>
  <tr>
    <th>函数名称</th>
    <th>作用</th>
  </tr>
  <tr>
    <td>MAX</td>
    <td>查询指定列的最大值</td>
  </tr>
  <tr>
    <td>MIN</td>
    <td>查询指定列的最小值</td>
  </tr>
  <tr>
    <td>COUNT</td>
    <td>统计查询结果的行数</td>
  </tr>
  <tr>
    <td>SUM</td>
    <td>求和，返回指定列的总和</td>
  </tr>
  <tr>
    <td>AVG</td>
    <td>求平均值，返回指定列数据的平均值</td>
  </tr>
</table>

<h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><h2 id="常用工具-mysql"><a href="#常用工具-mysql" class="headerlink" title="常用工具 - mysql"></a>常用工具 - mysql</h2><h2 id="常用工具-mysqladmin"><a href="#常用工具-mysqladmin" class="headerlink" title="常用工具 - mysqladmin"></a>常用工具 - mysqladmin</h2><h2 id="常用工具-mysqlbinlog与mysqldump"><a href="#常用工具-mysqlbinlog与mysqldump" class="headerlink" title="常用工具 - mysqlbinlog与mysqldump"></a>常用工具 - mysqlbinlog与mysqldump</h2><h2 id="常用工具-mysqlimport与source"><a href="#常用工具-mysqlimport与source" class="headerlink" title="常用工具 - mysqlimport与source"></a>常用工具 - mysqlimport与source</h2><h2 id="常用工具-mysqlshow"><a href="#常用工具-mysqlshow" class="headerlink" title="常用工具 - mysqlshow"></a>常用工具 - mysqlshow</h2><h2 id="日志-错误日志"><a href="#日志-错误日志" class="headerlink" title="日志 - 错误日志"></a>日志 - 错误日志</h2><h2 id="日志-二进制日志（statement）"><a href="#日志-二进制日志（statement）" class="headerlink" title="日志 - 二进制日志（statement）"></a>日志 - 二进制日志（statement）</h2><h2 id="日志-二进制日志（row及日志删除）"><a href="#日志-二进制日志（row及日志删除）" class="headerlink" title="日志 - 二进制日志（row及日志删除）"></a>日志 - 二进制日志（row及日志删除）</h2><h2 id="日志-查询日志"><a href="#日志-查询日志" class="headerlink" title="日志 - 查询日志"></a>日志 - 查询日志</h2><h2 id="日志-慢查询日志"><a href="#日志-慢查询日志" class="headerlink" title="日志 - 慢查询日志"></a>日志 - 慢查询日志</h2><h2 id="复制-原理"><a href="#复制-原理" class="headerlink" title="复制 - 原理"></a>复制 - 原理</h2><h2 id="案例-需求及环境准备"><a href="#案例-需求及环境准备" class="headerlink" title="案例 - 需求及环境准备"></a>案例 - 需求及环境准备</h2><h2 id="案例-基本工程导入"><a href="#案例-基本工程导入" class="headerlink" title="案例 - 基本工程导入"></a>案例 - 基本工程导入</h2><h2 id="案例-AOP记录日志"><a href="#案例-AOP记录日志" class="headerlink" title="案例 - AOP记录日志"></a>案例 - AOP记录日志</h2><h2 id="案例-日志查询后端-mapper接口"><a href="#案例-日志查询后端-mapper接口" class="headerlink" title="案例 - 日志查询后端 - mapper接口"></a>案例 - 日志查询后端 - mapper接口</h2><h2 id="案例-日志查询后端-Service-amp-Controller"><a href="#案例-日志查询后端-Service-amp-Controller" class="headerlink" title="案例 - 日志查询后端 - Service&amp;Controller"></a>案例 - 日志查询后端 - Service&amp;Controller</h2><h2 id="案例-日志查询-前端"><a href="#案例-日志查询-前端" class="headerlink" title="案例 - 日志查询 - 前端"></a>案例 - 日志查询 - 前端</h2><h2 id="案例-系统性能优化分析"><a href="#案例-系统性能优化分析" class="headerlink" title="案例 - 系统性能优化分析"></a>案例 - 系统性能优化分析</h2><h2 id="案例-系统性能优化-分页优化"><a href="#案例-系统性能优化-分页优化" class="headerlink" title="案例 - 系统性能优化 - 分页优化"></a>案例 - 系统性能优化 - 分页优化</h2><h2 id="案例-系统性能优化-索引优化"><a href="#案例-系统性能优化-索引优化" class="headerlink" title="案例 - 系统性能优化 - 索引优化"></a>案例 - 系统性能优化 - 索引优化</h2><h2 id="案例-系统性能优化-读写分离概述"><a href="#案例-系统性能优化-读写分离概述" class="headerlink" title="案例 - 系统性能优化 - 读写分离概述"></a>案例 - 系统性能优化 - 读写分离概述</h2><h2 id="案例-系统性能优化-数据源配置"><a href="#案例-系统性能优化-数据源配置" class="headerlink" title="案例 - 系统性能优化 - 数据源配置"></a>案例 - 系统性能优化 - 数据源配置</h2><h2 id="案例-系统性能优化-AOP切换数据源"><a href="#案例-系统性能优化-AOP切换数据源" class="headerlink" title="案例 - 系统性能优化 - AOP切换数据源"></a>案例 - 系统性能优化 - AOP切换数据源</h2><h2 id="案例-系统性能优化-AOP切换数据源-测试"><a href="#案例-系统性能优化-AOP切换数据源-测试" class="headerlink" title="案例 - 系统性能优化 - AOP切换数据源 - 测试"></a>案例 - 系统性能优化 - AOP切换数据源 - 测试</h2><h2 id="案例-系统性能优化-AOP切换数据源-原理解析"><a href="#案例-系统性能优化-AOP切换数据源-原理解析" class="headerlink" title="案例 - 系统性能优化 - AOP切换数据源 - 原理解析"></a>案例 - 系统性能优化 - AOP切换数据源 - 原理解析</h2><h2 id="案例-系统性能优化-应用优化"><a href="#案例-系统性能优化-应用优化" class="headerlink" title="案例 - 系统性能优化 - 应用优化"></a>案例 - 系统性能优化 - 应用优化</h2>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>MySQL</tag>
        <tag>数据库优化</tag>
      </tags>
  </entry>
  <entry>
    <title>微信支付</title>
    <url>/2020/04/23/%E9%9D%A2%E8%AF%95/%E3%80%90%E5%8A%A8%E5%8A%9B%E8%8A%82%E7%82%B9%E3%80%91%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>重点是复习一下微信支付流程。  </p>
<p>昨天面试官问我，比如说支付验签、在支付过程中前端用户进行输入购买商品的支付金额这个时候被抓包了怎么办、接口加密、在已经是支付跳转这些时候，支付金额通过抓包被篡改怎么办等支付方面的问题。  </p>
<h2 id="微信特性"><a href="#微信特性" class="headerlink" title="微信特性"></a>微信特性</h2><ul>
<li>微信授权</li>
<li>微信支付</li>
<li>微信退款</li>
</ul>
<p>难点：需要吃透微信的官方文档；一定要按照文档的要求去做；而不是自己YY；  </p>
<h3 id="第一个关键点"><a href="#第一个关键点" class="headerlink" title="第一个关键点"></a>第一个关键点</h3><p><strong>获取OpenId的方式</strong>：  </p>
<ul>
<li><strong>手工方式</strong>（使用手工方式的原因目的在于仔细去看微信的官方文档）</li>
<li>利用<strong>第三方SDK</strong>（相较于手工方式，高级的方式）</li>
</ul>
<p>在实际开发当中使用推荐第三方SDK进行开发微信支付模块。  </p>
<p>第一步是要完成网页授权，只有通过授权才能够获取得到OpenId，而有了OpenId，才能够继续做下一系列的操作；所以获取OpenId是第一个关键点；  </p>
<p>强调：一定要单独、仔细、完整的看一遍，甚至看几遍都是可以的；</p>
<h3 id="微信网页授权"><a href="#微信网页授权" class="headerlink" title="微信网页授权"></a>微信网页授权</h3><p>注意一定要以微信官方文档为准，跟其思路进行。  </p>
<ul>
<li>官方文档<br>- <a href="http://mp.weixin.qq.com/wiki" target="_blank" rel="noopener">http://mp.weixin.qq.com/wiki</a><br>- <a href="https://pay.weixin.qq.com/wiki/doc/api/index.html" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/index.html</a></li>
<li>调试<br>- <a href="https://natapp.cn/" target="_blank" rel="noopener">https://natapp.cn/</a></li>
<li>第三方SDK<br>- <a href="https://github.com/Wechat-Group/weixin-java-tools" target="_blank" rel="noopener">https://github.com/Wechat-Group/weixin-java-tools</a></li>
</ul>
<p>微信官方文档当中，分有普通商户以及服务商版本；</p>
<p>简单介绍普通商户版本以及服务商版本(<a href="https://pay.weixin.qq.com/wiki/doc/api/index.html)：" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/index.html)：</a>  </p>
<p>普通商户即普通商家；个人身份是不能够申请微信支付的；必须有着企业的资质才能够进行申请；个人开发者如果想要进行开发调试的话可以向朋友借账号等方式；  </p>
<p>服务商版可以理解为微信的代理商；接入代理商则往往可能是微信方进行提供了技术以及一些更低费率等等；其实普通商户版本以及服务商版本差别并不太大；  </p>
<p>现在还多了一个银行服务商，我猜大概也就是银行资质的与微信进行合作；  </p>
<p>要介绍的是普通商户版本当中的公众号开发支付，即也就是选择JSAPI支付方式（用户通过微信扫码、关注公众号等方式进入商家H5页面，并在微信内调用JSSDK完成支付）；跳转至（<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1）；" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1）；</a>  </p>
<p>再次强调：仔细查阅官方API文档；其实不管任何支付也都是这样；比如说PayPal（想哭）；难点在于需要去完完整整的理清楚；  </p>
<p>往往很多时候的不成功不是由于自身开发不好，而是由于官方文档上并没有去仔细阅读；  </p>
<p>场景介绍、开发步骤、案例介绍….等等都需要仔细查阅，而不是只看一个这种；  </p>
<p>业务流程：<br> 微信客户端发起支付（展示、生成二维码等不太重要）<br> （重要的是）第四步，请求支付订单然后生成商户订单，再调用统一下单API（第五步）；<br>调用之后返回一个预付单信息；<br>注意是预付单信息；预付单信息返回之后；<br>需要去进行生成JSAPI页面；<br>即在另外一个页面上调用预支付的一些参数；并且签名然后发起支付；<br>发起支付之后，就会有一个异步通知商户支付结果（第十步，很重要）；<br>第一步下单返回的是一个预付单信息；并不是直接下单成功；<br>一般来说不仅仅是微信支付；支付宝也好，最终支付成功之后，会有一个异步的通知；支付完成之后，需要将相关的订单修改成已支付状态（成功/失败）；<br>根据异步通知来的；<br>也可以使用订单查询的API；进行查询订单支付结果；<br>如能接收到异步通知其实就可以进行修改支付结果了；</p>
<ul>
<li>文档说明<ul>
<li>阅读对象</li>
<li>版本说明</li>
</ul>
</li>
<li>术语<ul>
<li>支付模式</li>
<li>名词解释</li>
</ul>
</li>
<li>支付账户<ul>
<li>支付账户</li>
</ul>
</li>
<li>接口规则<ul>
<li>协议规则</li>
<li>参数规定</li>
<li>安全规范</li>
<li>获取OpenId</li>
</ul>
</li>
<li>JSAP支付<ul>
<li>场景介绍</li>
<li>案例介绍</li>
<li>开发步骤</li>
<li>业务流程</li>
<li>获取微信版本号</li>
<li>微信内H5调起支付</li>
<li>收货地址共享</li>
<li>支付常见问题</li>
</ul>
</li>
<li>API列表<ul>
<li>统一下单</li>
<li>查询订单</li>
<li>关闭订单</li>
<li>申请退款</li>
<li>查询退款</li>
<li>下载交易账单</li>
<li>下载资金账单</li>
<li>支付结果通知</li>
<li>退款结果通知</li>
<li>拉取订单评价数据</li>
</ul>
</li>
<li>最佳实践<ul>
<li>支付回调和查单实现指引</li>
<li>支付验收指引</li>
<li>网络排查指引</li>
<li>最佳安全实践</li>
<li>跨域冗灾方案</li>
<li>回调通知注意事项</li>
</ul>
</li>
<li>运营规范<ul>
<li>运营规范</li>
</ul>
</li>
<li>SDK与DEMO下载</li>
<li>联系我们</li>
</ul>
<h2 id="文档说明"><a href="#文档说明" class="headerlink" title="文档说明"></a>文档说明</h2><h3 id="阅读对象"><a href="#阅读对象" class="headerlink" title="阅读对象"></a>阅读对象</h3><p>链接：<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=1_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=1_1</a>  </p>
<p>本文阅读对象：商户系统（在线购物平台、人工收银系统、自动化智能收银系统或者其他）集成微信支付涉及的技术架构师、研发工程师、测试工程师、系统运维工程师等；</p>
<h3 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h3><p>链接：<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=1_2" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=1_2</a></p>
<ul>
<li>2019.05.06<ul>
<li>企业付款到银行卡接口，北京银行 银行编码从1032修改为4836；</li>
</ul>
</li>
<li>2019.03.12<ul>
<li>财付通10位海关注册编码变更为：4403169D3W（原编码440316T004不再使用）</li>
</ul>
</li>
<li>2019.03.06<ul>
<li>支付结果通知回调频率调整为15s / 15s / 30s / 3m / 10m / 20m / 30m / 30m / 30m / 30m / 60m / 3h / 3h / 3h / 6h / 6h / - 总计24h4m</li>
</ul>
</li>
<li>2019.01.10<ul>
<li>企业付款接口增加接口频率说明</li>
</ul>
</li>
<li>2019.01.03<ul>
<li>除合单支付外，字段spbill_create_ip（终端IP）支持IPV6和IPV4两种格式</li>
</ul>
</li>
<li>2019.12.24<ul>
<li>境内申请退款接口，退款原因下发条件更新</li>
<li>不超过1元的部分退款，将不会下发退款原因</li>
</ul>
</li>
<li>2018.12.12<ul>
<li>报关接口新增返回参数</li>
<li>verify_department-验核机构</li>
<li>verify_department_trade_id-验核机构交易流水号</li>
</ul>
</li>
<li>2018.12.10<ul>
<li>企业付款接口新增错误码；</li>
<li>NO_AUTH</li>
<li>企业付款备注（desc）参数中的敏感词会被转成字符*</li>
</ul>
</li>
<li>2018.12.09<ul>
<li>新增支付凭证处开放电子发票入口功能</li>
<li>统一下单、付款码支付、委托代扣接口新增电子发票开票入口开放参数</li>
</ul>
</li>
<li>2018.12.01<ul>
<li>企业付款接口新增错误码：<ul>
<li>PAY_CHANNEL_NOT_ALLOWED</li>
<li>RECV_ACCOUNT_NOT_ALLOWED</li>
<li>SENDNUM_LIMIT</li>
</ul>
</li>
</ul>
</li>
<li>2018.11.30<ul>
<li>企业付款接口规则变更：<ul>
<li>付款到零钱-商户号单日出款总额，由100万降低至10万</li>
<li>付款到零钱-商户号单人单日付款额度，由2万降低至5000</li>
<li>付款到银行卡-商户号单日出款总额，由100万降低至10万</li>
<li>付款到银行卡-商户号单人单日付款额度，由5万降低至2万</li>
<li>付款到零钱-新增两个商户资金安全相关的错误码</li>
<li>付款到银行卡-新增三个商户资金安全相关的错误码</li>
</ul>
</li>
</ul>
</li>
<li>2018.11.27<ul>
<li>付款码支付规则变更<ul>
<li>1000元以下免密支付次数从“每日5次”变更为“每日10次”</li>
</ul>
</li>
</ul>
</li>
<li>2018.11.12<ul>
<li>支付产品名字变更<ul>
<li>公众号支付-变更为-JSAPI支付</li>
<li>扫码支付-变更为-Native支付</li>
<li>刷卡支付-变更为-付款码支付</li>
</ul>
</li>
</ul>
</li>
<li>2018.07.06<ul>
<li>SDK&amp;DEMO更新</li>
</ul>
</li>
<li>2018.05.06<ul>
<li>报关API新增支付人信息校验结果返回</li>
</ul>
</li>
<li>2018.03.07<ul>
<li>新增H5支付API</li>
</ul>
</li>
<li>2018.02.15<ul>
<li>新增小程序支付API</li>
</ul>
</li>
<li>2017.10.15<ul>
<li>新增资金账单下载API</li>
</ul>
</li>
<li>2017.07.15<ul>
<li>新增退款结果通知API</li>
</ul>
</li>
<li>2017.07.13<ul>
<li>添加“场景信息 scene_info”字段</li>
<li>添加状态机图</li>
</ul>
</li>
<li>2017.06.07<ul>
<li>申请退款与查询退款接口删除参数：op_user_id</li>
<li>代金券接口删除参数：coupon_type、locked_num、used_num</li>
</ul>
</li>
<li>2017.03.20<ul>
<li>退款接口参数refund_id字段长度变更—原“28”位变更为“32”位</li>
<li>退款接口参数out_refund_no字段长度变更—原“28”位变更为“64”位</li>
</ul>
</li>
<li>2017.03.15<ul>
<li>更新单品优惠功能</li>
<li>更新银行类型列表</li>
</ul>
</li>
<li>2017.02.21<ul>
<li>下载对账单接口-新增充值退款对账单下载（bill_type=RECHARGE_REFUND）</li>
</ul>
</li>
<li>2016.10.11<ul>
<li>查询退款接口-退款状态-删除“NOTSURE”状态</li>
</ul>
</li>
<li>2016.09.09<ul>
<li>退款接口增加字段（可选）—-支持可用余额退款</li>
<li>增加退款错误码”余额不足“</li>
</ul>
</li>
<li>2016.08.24<ul>
<li>文档左侧导航栏增加“错误码”栏</li>
</ul>
</li>
<li>2015.07.29<ul>
<li>受理机构更名为：服务商</li>
<li>受理机构子商户更名为：特约商户</li>
</ul>
</li>
<li>2014.12.12<ul>
<li>更新付款码支付java版本Demo</li>
<li>企业红包更名为“代金券\立减优惠”</li>
<li>邮件中不附带证书，按照指引去商户系统下载</li>
</ul>
</li>
<li>2014.12.11<ul>
<li>发布新建版本，本文档适用于V3版本商户号接入微信支付，旧版本账号没有MCHID，需要登录商户系统升级（详细请参考升级指引）。</li>
</ul>
</li>
</ul>
<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><h3 id="支付模式"><a href="#支付模式" class="headerlink" title="支付模式"></a>支付模式</h3><blockquote>
<p>支付产品  </p>
</blockquote>
<ol>
<li>付款码支付<br>付款码支付是用户展示微信钱包内的“刷卡条码/二维码”给商户系统扫描后直接完成支付的模式。主要应用线下面对面收银的场景。</li>
<li>Native支付<br>Native支付是商户系统按照微信支付协议生成支付二维码，用户再用微信“扫一扫”完成支付的模式。该模式适用于PC网站支付、实体店单品或者订单支付、媒体广告支付等场景。</li>
<li>JSAP支付<br>JSAP支付是用户在微信中打开商户的H5页面，商户在H5页面通过调用微信支付提供的JSAP接口调起微信支付模块完成支付。<br>应用场景：</li>
</ol>
<ul>
<li>用户在微信公众账号进入商家公众号，打开某个主页面，完成支付</li>
<li>用户的好友在朋友圈、聊天窗口等分项商家页面链接，用户点击链接打开商家页面，完成支付</li>
<li>将商户页面转换成二维码，用户扫描二维码后再微信浏览器中打开页面后完成支付</li>
</ul>
<ol start="4">
<li>APP支付<br>APP支付又称移动端支付，是商户通过在移动端应用APP中集成开放SDK调起微信支付模块完成支付的模式。  </li>
<li>H5支付<br>H5支付主要是在手机、ipad等移动设备中通过浏览器唤起微信支付的支付产品。</li>
<li>小程序支付<br>小程序支付是专门被定义使用在小程序中的支付产品。目前在小程序中能且只能使用小程序支付的方式来唤起微信支付。</li>
</ol>
<h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ol>
<li>微信公众平台</li>
</ol>
]]></content>
      <categories>
        <category>支付</category>
      </categories>
      <tags>
        <tag>支付</tag>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title>想一想自己为什么要去面试？</title>
    <url>/2020/04/20/%E4%BB%8A%E5%B9%B4%E8%A6%81%E4%B9%B0%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
    <content><![CDATA[<p>想想今年为什么自己想去面试？<br>气死我了；  </p>
<ol>
<li>我今年得换个手机了；</li>
<li>得交房租了；</li>
<li>日常开销；</li>
<li>我想买台相机；</li>
<li>我还想买把吉他；</li>
<li>我今年还想买台电脑；</li>
<li>想去一次漫展，等疫情好了的时候，跟朋友一起；</li>
<li>想去西塘，参加汉服文化节；等疫情好了的时候，跟朋友一起；</li>
<li>扩充一下自己的兴趣爱好；</li>
<li>我就不信了，我好歹也被人喊过老师，我还面试不上一份10k的java开发工程师了？</li>
<li>每次面试就那么几个问题，我花一个星期还搞不定？</li>
<li>我学东西的能力有这么差？</li>
<li>好歹自己的脑子里面也不全是水啊？</li>
<li>自信一点，很难吗？有点底气行吗？别人这么信任你？怎么跟个扶不起的刘阿斗似的？</li>
<li>再不去认认真真的面试，等会儿你妹都高考完了我跟你讲；</li>
<li>再不认真面试，我看你怎么交代吧？？？！！！；老是犹犹豫豫有什么好的，都讲了几百回了，要你果决一点，果断一点，你不听；</li>
<li>好了，不说了，好好面试，好好加油；</li>
<li>每次不想看视频的时候，就看看这里，自己怎么写的，自己怎么去做；我倒是看你浑浑噩噩要躲到什么时候去；</li>
</ol>
]]></content>
      <categories>
        <category>about</category>
      </categories>
      <tags>
        <tag>心态</tag>
      </tags>
  </entry>
  <entry>
    <title>Git工作流学习笔记</title>
    <url>/2020/04/20/%E9%9D%A2%E8%AF%95/Git%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="Git工作流指南-分布式版本控制系统"><a href="#Git工作流指南-分布式版本控制系统" class="headerlink" title="Git工作流指南 分布式版本控制系统"></a>Git工作流指南 分布式版本控制系统</h2><p>观看笔记：<a href="https://www.bilibili.com/video/BV1dW411U7ER?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1dW411U7ER?p=1</a><br>老师笔记： <a href="http://www.funtl.com/zh/git/" target="_blank" rel="noopener">http://www.funtl.com/zh/git/</a>  </p>
<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><ul>
<li>什么是版本控制系统</li>
<li>什么是Git</li>
<li>如何安装Git</li>
</ul>
<h3 id="什么是版本控制系统"><a href="#什么是版本控制系统" class="headerlink" title="什么是版本控制系统"></a>什么是版本控制系统</h3><h4 id="为什么需要版本控制"><a href="#为什么需要版本控制" class="headerlink" title="为什么需要版本控制"></a>为什么需要版本控制</h4><p>在软件开发过程中，每天都会产生新的代码，代码合并的过程中可能会出现如下问题：  </p>
<ul>
<li>代码被覆盖或丢失；</li>
<li>代码写的不理想，希望还原之前的版本；</li>
<li>希望知道与之前版本的差别；</li>
<li>是谁修改了代码以及为什么修改；</li>
<li>发版时希望分成不同的版本（测试版本、发行版本等）；</li>
</ul>
<p>因此，希望有一种机制，能够帮助我们：  </p>
<ul>
<li>可以随时回滚到之前的版本；</li>
<li>协同开发时，不会覆盖别人的代码；</li>
<li>留下修改记录，以便随时查看；</li>
<li>发版时可以方便的管理不同的版本；</li>
</ul>
<h4 id="什么是版本控制系统-1"><a href="#什么是版本控制系统-1" class="headerlink" title="什么是版本控制系统"></a>什么是版本控制系统</h4><p>一个标准的版本控制系统 Version Control System（VCS），通常需要有以下功能：  </p>
<ul>
<li>能够创建Repository（仓库），用来保存代码；</li>
<li>协同开发时，方便将代码分发给团队成员；</li>
<li>记录每次修改代码的内容、时间、原因等信息；</li>
<li>能够创建Branch（分支），可以根据不同的场景进行开发；</li>
<li>能够创建Tag（标签），建立项目里程碑；</li>
</ul>
<h4 id="版本控制系统的发展史"><a href="#版本控制系统的发展史" class="headerlink" title="版本控制系统的发展史"></a>版本控制系统的发展史</h4><p>版本控制系统发展至今有几种不同的模式：  </p>
<h5 id="Local-VCS"><a href="#Local-VCS" class="headerlink" title="Local VCS"></a>Local VCS</h5><p>本地使用 复制/粘贴 的方式进行管理，缺点是无法协同开发</p>
<h5 id="Gentralized-VCS（Lock，悲观锁）"><a href="#Gentralized-VCS（Lock，悲观锁）" class="headerlink" title="Gentralized VCS（Lock，悲观锁）"></a>Gentralized VCS（Lock，悲观锁）</h5><p>中央集中式版本控制系统团队共用仓库，当某人需要编辑文件时，进行锁定，以免其他人同时编辑时造成冲突，但不是很方便，其他人需要排队才能编辑文件，如果有人编辑了很久或是忘记解锁会造成其他人长时间等待的情况；  </p>
<p>如何理解悲观锁：总有刁民想害朕。<br>我要是面试这么答，会怎么样？  </p>
<h5 id="Gentralized-VCS（Merge，乐观锁）"><a href="#Gentralized-VCS（Merge，乐观锁）" class="headerlink" title="Gentralized VCS（Merge，乐观锁）"></a>Gentralized VCS（Merge，乐观锁）</h5><p>中央集中式版本控制系统团队共用仓库，不采用悲观锁方式来避免冲突，而是时候发现如果别人也修改相同文件（冲突），再进行手动修改解决。  </p>
<p>有很多VCS属于这种类型，如：CVS、Subversion、Perforce等；  </p>
<p>中央集中式版本控制系统的共同问题是，做任何操作都需要和服务器同步，如果服务器宕机则会造成无法继续工作的窘迫；  </p>
<p>如何理解乐观锁：天网恢恢疏而不漏。<br>我想给自己两锤子；  </p>
<h5 id="Distributed-VCS"><a href="#Distributed-VCS" class="headerlink" title="Distributed VCS"></a>Distributed VCS</h5><p>分布式版本控制系统，本地也拥有完整的代码仓库，就不会出现上述集中式管理的问题，即使没有网络，依然可以commit和看log，也无需担心服务器同步问题；  </p>
<p>如：Git、Mercurial、Bazaar等就属于分布式版本控制系统。缺点是功能比较复杂，上手需要一定的学习时间；  </p>
<p>（分布式版本控制系统都有一个本地化的这样一个概念；区块链系统也能称之为一个分布式系统）  </p>
<h2 id="Git工作流"><a href="#Git工作流" class="headerlink" title="Git工作流"></a>Git工作流</h2><p>Git工作流：代码管理的工作流程、方式  </p>
<ul>
<li>Git工作流简介</li>
<li>集中式工作流</li>
<li>功能分支工作流</li>
<li>GitFlow工作流</li>
<li>Forking工作流</li>
<li>Pull Requests</li>
</ul>
<h3 id="Git工作流简介"><a href="#Git工作流简介" class="headerlink" title="Git工作流简介"></a>Git工作流简介</h3><p>工作流有各式各样的用法，但也正因此使得在实际工作中如何上手使用增加了难度。  </p>
<p>这篇指南通过总览公司团队中最常用的集中Git工作流让大家可以上手使用；  </p>
<p>在阅读的过程中请记住，本文中的集中工作流是作为方案指导而不是条例规定，在展示了各种工作流可能的用法后，可以从不同的工作流中挑选或揉合出一个满足自己需求的工作流；  </p>
<h4 id="集中式工作流"><a href="#集中式工作流" class="headerlink" title="集中式工作流"></a>集中式工作流</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXyIW2ezMoDhUXO*s5pTGue2N753CPNKcE42sPIP6l3d0rpu2DZjcGmC.Kga3cDUruqQwuWnPoetw.KevCfGSm5U!/r" alt="集中式工作流"></p>
<p>如果开发团队成员已经很熟Subversion，集中式工作流让你无需去适应一个全新流程就可以体验Git带来的收益。  </p>
<p>这个工作流也可以作为向更Git风格工作流迁移的友好过渡。  </p>
<p>（个人、三五个人的小团队）  </p>
<h4 id="功能分支工作流"><a href="#功能分支工作流" class="headerlink" title="功能分支工作流"></a>功能分支工作流</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX.QLkS1nyIjv6HHWnbV4dX7srariw7MEQpLi1gOAxL3ou18PqhQZr1mrBrEaIbVs5JuQWzjNbAd8lfxuJK8OGPM!/r" alt="功能分支工作流"></p>
<p>功能分支工作流以集中式工作流为基础，不同的是为各个新功能分配一个专门的分支来开发。  </p>
<p>这样可以在把新功能继承到正式项目前，用Pull  Requests的方式讨论变更；  </p>
<p>（达到约12个人的团队）  </p>
<h4 id="Git-Flow工作流"><a href="#Git-Flow工作流" class="headerlink" title="Git Flow工作流"></a>Git Flow工作流</h4><p>Git Flow工作流通过为功能开发、发布准备和维护分配独立的分支，让发布迭代过程更顺畅。  </p>
<p>严格的分支模型也为大型项目提供了一些非常必要的结构。  </p>
<p>（整个公司，这么一个团队的规模）  </p>
<h4 id="Forking工作流"><a href="#Forking工作流" class="headerlink" title="Forking工作流"></a>Forking工作流</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7NQkdqkFQWuuELLHKCcql5ABKaPDZFUejww*HH9qtsi8qr7IlATkqBkQ9PV1LJ9rT6faqWzcfgS3pJZnzLSzVg!/r" alt="Forking工作流"></p>
<p>Forking工作流是分布式工作流，充分利用了Git在分支和克隆上的优势。  </p>
<p>可以安全可靠地管理大团队的开发者（developer），并能接受不信任贡献者（contributor）的提交。  </p>
<p>（跨国合作。跨国团队的使用，一般用于Forking工作流）  </p>
<h4 id="Pull-Requests"><a href="#Pull-Requests" class="headerlink" title="Pull Requests"></a>Pull Requests</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXzYbgZ.02.6Smac50apszMyWGwg89uQEVJSVU01e69u2Dts1al5lueZ4HgBrr.WyV.0GtO*ZTdT3LpQtilbX2Vk!/r" alt="Pull Requests"></p>
<p>功能分支工作流、GitFlow工作流、Forking工作流都会穿插一个Pull Requests的一个东西。  </p>
<p>Pull Requests通常称为请求合并（Merge Pull Requests）；  </p>
<p>Pull Requests让开发者更方便地进行协作的功能，提供了友好的Web界面可以在提议的修改合并到正式项目之前对修改进行讨论。  </p>
<p>（相当于一个评论系统）；</p>
<h3 id="集中式工作流-1"><a href="#集中式工作流-1" class="headerlink" title="集中式工作流"></a>集中式工作流</h3><p>转到分布式版本控制系统看起来像个令人生畏的任务，但不改变已用的工作流你也可以用上Git带来的收益。  </p>
<p>团队可以用和Subversion完全不变的方式来开发项目。  </p>
<p>但使用Git加强开发的工作流，Git比SVN有几个优势。  </p>
<p>（1）首先，每个开发者可以有属于自己的整个工程的本地拷贝。隔离的环境让各个开发者的工作和项目的其他部分（修改）独立开来——-即自由地提交到自己的本地仓库，先完全忽略上游的开发，直到方便的时候再把修改反馈上去。  </p>
<p>（2）其次，Git提供了强壮的分支和合并模型。不像SVN，Git的分支设计成可以作为一种用来在仓库之间集成代码和分享修改的【失败安全】的机制。  </p>
<h4 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX58rubGqwbukXS4rvP.hcw8vVDFpcMEKyanOzFC60vYY7EfnKsFaNa8DYFcGkpbCkTOCu8b0QXObUxn8ABvZn4U!/r" alt="工作方式"></p>
<p>像Subversion一样，集中式工作流以中央仓库作为项目所有修改的单点实体。  </p>
<p>相比SVN缺省的开发分支trunk，Git叫做master，所有修改提交到这个分支上。  </p>
<p>该工作流只用到master这一个分支。  </p>
<p>开发者开始先克隆中央仓库。  </p>
<p>在自己的项目拷贝中，像SVN一样的编辑文件和提交修改；  </p>
<p>但修改是存在本地的，和中央仓库完全隔离的；  </p>
<p>开发者可以把和上游的同步延后到一个方便时间点；  </p>
<p>要发布修改到正式项目中，开发者要把本地master分支的修改【推（push）】到中央仓库中。  </p>
<p>这相当于svn  commit操作，但push操作会把所有还不在中央仓库的本地提交都推上去。  </p>
<h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7NAq94egRJ5nBPO8Co87th*P0cTdtAGYXp43mklxBxvhd73.i5d8Lm58WdsFYNrarV7XZaiqfrmkd3gUFAFW0o!/r" alt="解决冲突"></p>
<p>中央仓库代表了正式项目，所以提交历史应该被尊重且是稳定不变的。  </p>
<p>如果开发者本地的提交历史和中央仓库有分歧，Git会拒绝push提交否则会覆盖已经在中央库的正式提交。  </p>
<p>在开发者提交自己功能修改到中央库前，需要先fetch在中央库的新增提交，rebase自己提交到中央库提交历史之上。  </p>
<p>这样做的意思是在说，【我要把自己的修改加到别人已经完成的修改上。】最终的结果是一个完美的线性历史，就像以前的SVN的工作流中一样；  </p>
<p>如果本地修改和上游提交有冲突，Git会暂停rebase过程，给你手动解决冲突的机会。  </p>
<p>Git解决合并冲突，用和生成提交一样的git  status和git add命令，很一致方便。  </p>
<p>还有一点，如果解决冲突时遇到麻烦，Git可以很简单中止整个rebase操作，重来一次（或者让别人来帮助解决）。  </p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>一起逐步分解来看看一个常见的小团队如何用这个工作流来协作的。  </p>
<p>有两个开发者小明和小红，看他们是如何开发自己的功能并提交到中央仓库上的。  </p>
<h5 id="有人先初始化好中央仓库"><a href="#有人先初始化好中央仓库" class="headerlink" title="有人先初始化好中央仓库"></a>有人先初始化好中央仓库</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX9UbT3uXKi44e*o.QOIDNJOk403REJAlPsZkIyST70GEweXbAbks3cFR7TqiVMFHAtTg9MXSvYT6HSyIH1eLii4!/r" alt="有人先初始化好中央仓库"></p>
<p>第一步，有人在服务器上创建好中央仓库。  </p>
<p>如果是新项目，可以初始化一个空仓库；否则要导入已有的Git或SVN仓库。  </p>
<p>中央仓库应该是个裸仓库（bare repository），即没有工作目录（working directory）的仓库。  </p>
<h5 id="所有人克隆中央仓库"><a href="#所有人克隆中央仓库" class="headerlink" title="所有人克隆中央仓库"></a>所有人克隆中央仓库</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX8lXRlkamDF*h*SxpL42PuUsH4aIULseTwL66K.p5pWkVzGz*Bh8Nih.I7qaVf43t7zoP8GGUp44vHNS*NRccIY!/r" alt="所有人克隆中央仓库"></p>
<p>下一步，各个开发者创建整个项目的本地拷贝。  </p>
<p>通过git clone命令完成。  </p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span>  <span class="title">https</span>://github.com/path/to/repo.git</span><br></pre></td></tr></table></figure>

<p>基于后续会持续和克隆的仓库做交互的假设，克隆仓库时Git会自动添加远程别名origin指回【父】仓库。  </p>
<p>github即git的中央仓库；版本控制系统有一个版本仓库。  </p>
<p>github上public即开源，公开的意思，代码开源。  </p>
<p>如果是私有private则需要进行CreditCard 信用卡支付相应的金额；收费；  </p>
<h5 id="小明开发功能"><a href="#小明开发功能" class="headerlink" title="小明开发功能"></a>小明开发功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX3cSXX6681Ge8WeUymk3FFjspNtDVB3t7XeHuVufMD05ZhJzX9OyWJDCYAlloD65QJLNRkDaLpYfFLKjESAA0SM!/r" alt="小明开发功能"></p>
<p>在小明的本地仓库中，他使用标准的Git过程开发功能：编辑、暂存（Stage）和提交。  </p>
<p>如果你不熟悉暂存区（Stageing Area），这里说明一下：暂存区的用来准备一个提交，但可以不用把工作目录中所有的修改内容都包含进来。  </p>
<p>这样可以创建一个高度聚焦的提交，尽管本地修改很多内容。  </p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git status <span class="comment"># 查看本地仓库的修改状态</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> <span class="comment"># 暂存文件</span></span></span><br><span class="line">git commit <span class="comment"># 提交文件</span></span><br></pre></td></tr></table></figure>

<p>请记住，因为这些命令生成的是本地提交，小明可以按自己需求反复操作多次，而不用担心中央仓库有了什么操作。  </p>
<p>对需要多个更简单更原子分块的大功能，这个做法是很有用的；  </p>
<h5 id="小红开发功能"><a href="#小红开发功能" class="headerlink" title="小红开发功能"></a>小红开发功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX3AhXN0w*Kh7FwIloQiq3PMOUwp*anqXsBqPo.yaxL1hWnR.kZm*XseG5RhBNtuoS8.PVSKuKSdHEw1x7MixOxA!/r" alt="小红开发功能"></p>
<p>与此同时，小红在自己的本地仓库中用相同的编辑、暂存和提交过程开发功能。  </p>
<p>和小明一样，她也不关心中央仓库有没有新提交；当然更不关心小明在他的本地仓库中的操作，因为所有本地仓库都是私有的。  </p>
<h5 id="小明发布功能"><a href="#小明发布功能" class="headerlink" title="小明发布功能"></a>小明发布功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX2DDMKOOXZiA6a0j82260kNXKGqba7MbMMt5OmvuzTfK3A*Lxszb8CTdFEjjZXvIDOZez3cKxhQHt2dZMB.G9S4!/r" alt="小明发布功能"></p>
<p>一旦小明完成了他的功能开发，会发布他的本地提交到中央仓库中，这样其他团队成员可以看到他的修改。  </p>
<p>他可以用下面的git push  命令：  </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>

<p>注意，origin是小明克隆仓库时Git创建的远程中央仓库别名。  </p>
<p>master参数告诉Git推送的分支。  </p>
<p>由于中央仓库自从小明克隆以来还没有被更新过，所以push操作不会有冲突，成功完成。  </p>
<h5 id="小红试着发布功能"><a href="#小红试着发布功能" class="headerlink" title="小红试着发布功能"></a>小红试着发布功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX49Hssuuk2yHbmsbkSdUuOtLRbTxRlP3xEORKm5txDWaExKbZyYnyzyBD0oDqcjETeUWkabVFxZpo*3gs9yQWHs!/r" alt="小红试着发布功能"></p>
<p>一起来看看在小明发布修改后，小红push修改会怎么样？  </p>
<p>她使用完全一样的push命令：  </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>

<p>但她的本地历史已经和中央仓库有分歧了，Git拒绝操作并给出下面很长的出错消息：  </p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">error: failed <span class="keyword">to</span> push some refs <span class="keyword">to</span> <span class="string">'/path/to/repo.git'</span></span><br><span class="line">hin<span class="variable">t:</span> Updates were rejected because the tip of your current branch <span class="keyword">is</span> behind</span><br><span class="line">hin<span class="variable">t:</span> its remote counterpart. Merge the remote <span class="keyword">changes</span>(<span class="keyword">e</span>.g. <span class="string">'git pull'</span>)</span><br><span class="line">hin<span class="variable">t:</span> before pushing again.</span><br><span class="line">hin<span class="variable">t:</span> See the <span class="string">'Note about fast-forwards'</span> in <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>这避免了小红覆写正式的提交。  </p>
<p>她要先pull小明的更新到她本地仓库合并上她的本地修改后，再重试。  </p>
<h5 id="小红在小明的提交之上rebase"><a href="#小红在小明的提交之上rebase" class="headerlink" title="小红在小明的提交之上rebase"></a>小红在小明的提交之上rebase</h5><p>小红用git pull 合并上游的修改到自己的仓库中。  </p>
<p>这条命令类似svn update ——-拉取所有上游提交命令到小红的本地仓库，并尝试和她本地修改合并。  </p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">git pull <span class="comment">--rebase origin master</span></span><br></pre></td></tr></table></figure>

<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXyi6Y8l5sb1aRwQRlb0CiRDNdgM9NZtfk5D41PvfJEccriZP3FT6WnQ4PWKvEqz*e7LpBOfcXui.l9nUXAPUgd4!/r" alt="images"></p>
<p>–rebase 选项告诉Git把小红的提交移到同步了中央仓库修改后的master分支的顶部；  </p>
<p>如果忘了加这个选项，pull操作仍然可以完成，但每次pull操作要同步中央仓库别人修改时，提交历史会以一个多余的【合并提交】结尾。  </p>
<p>对于集中式工作流，最好是使用rebase而不是生成一个合并提交。  </p>
<h5 id="小红解决合并冲突"><a href="#小红解决合并冲突" class="headerlink" title="小红解决合并冲突"></a>小红解决合并冲突</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7FxPBYYYsKKPOWXqC*0rCPhZKJRqU86pJwCJIVi3g31ZcpHEH2b76upvPK6lrEAQ9UWa9VqeFjlEC4dX2PAHTw!/r" alt="小红解决合并冲突"></p>
<p>rebase操作过程是把本地提交一次一个地迁移到更新了的中央仓库master分支之上，这意味着可能要解决在迁移某个提交时出现的合并冲突，而不是解决包含了所有提交的大型合并时所出现的冲突。  </p>
<p>这样的方式让你尽可能保持每个提交的聚焦和项目历史的整洁。  </p>
<p>反过来，简化了哪里引入Bug的分析，如果有必要，回滚修改也可以做到对项目影响最小。  </p>
<p>如果小红和小明的功能是相关的，不大可能在rebase过程中有冲突。  </p>
<p>如果有，Git在合并有冲突的提交出暂停rebase过程，输出下面的信息并带上相关的指令：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CONFLICT</span> (content): Merge <span class="keyword">conflict</span> <span class="keyword">in</span></span><br></pre></td></tr></table></figure>

<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX5fiCqpawh2bvFoyuusAOSGHKu5sc59EGgvKP1aVmHVmey3BEhEwMSvuvtOXh1oSZU1zNvf5QV2G*SN2a1sgwiA!/r" alt="images"></p>
<p>Git 很赞的一点是，任何人可以解决他自己的冲突。  </p>
<p>在这个例子中，小红可以简单的运行 git status 命令来查看哪里有问题。  </p>
<p>冲突文件列在 Unmerged paths（未合并路径）一节中：  </p>
<figure class="highlight leaf"><table><tr><td class="code"><pre><span class="line"># Unmerged paths：</span><br><span class="line"><span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">use</span> <span class="string">"git reset HEAD &lt;some-file&gt;..."</span> <span class="variable">to</span> <span class="variable">unstage</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">use</span> <span class="string">"git add/rm &lt;some-file&gt;..."</span> <span class="variable">as</span> <span class="variable">appropriate</span> <span class="variable">to</span> <span class="variable">mark</span> <span class="variable">resolution</span>)</span></span></span><br><span class="line">#</span><br><span class="line"># both modified:&lt;some-file&gt;</span><br></pre></td></tr></table></figure>

<p>接着小红编辑这些文件。  </p>
<p>修改完成后，用老套路暂存这些文件，并让git rebase 完成剩下的事情：  </p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span></span><br><span class="line"><span class="bash">git rebase --<span class="built_in">continue</span></span></span><br></pre></td></tr></table></figure>

<p>要做的就这些了。  </p>
<p>Git会继续一个一个的合并后面的提交，如其他的提交有冲突就重复这个过程。  </p>
<p>如果你碰到了冲突，但是发现搞不定，不要惊慌。  </p>
<p>只要执行下面这条命令，就可以回到你执行git pull –rebase命令前的样子：  </p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">git rebase <span class="comment">--abort</span></span><br></pre></td></tr></table></figure>

<h5 id="小红成功发布功能"><a href="#小红成功发布功能" class="headerlink" title="小红成功发布功能"></a>小红成功发布功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX0kBnWeNL8ejRYU6ro4.2u6jfdf4WmDKrAtmoAnmJ9TQ4sDBTQl0i3xlqRsJMoYZns72c0lo3zm5ObKWH4CoUG0!/r" alt="小红成功发布功能"></p>
<p>小红完成和中央仓库的同步之后，就能成功发布她的修改了。  </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>如你所见，仅仅使用几个Git命令，就可以模拟出传统Subversion开发环境。  </p>
<p>对于要从SVN迁移过来的团队来说这太好了，但是没有发挥出Git分布式本质的优势。  </p>
<p>如果你的团队适应了集中式工作流，但想要更流畅的协作效果，绝对值得探索一下功能分支工作流的收益。  </p>
<p>通过为一个功能分配一个专门的分支，能够做到一个新增功能集成到正式项目之前对新功能进行深入讨论。  </p>
<h3 id="功能分支工作流-1"><a href="#功能分支工作流-1" class="headerlink" title="功能分支工作流"></a>功能分支工作流</h3><p>一旦玩转了集中式工作流，在开发过程中可以很简单地加上功能分支，用来鼓励开发者之间协作和简化交流。  </p>
<p>功能分支工作流背后的核心思路是所有的功能开发应该在一个专门的分支，而不是在master分支上。  </p>
<p>这个隔离可以方便多个开发者在各自的功能上开发而不会弄乱主干代码。  </p>
<p>另外，也保证了master分支的代码一定不会是有问题的，极大有利于集成环境。  </p>
<p>功能开发隔离也让pull  requests工作流成为可能， pull requests工作流能为每一个分支发起一个讨论，在分支合入正式项目之前，给其它开发者有表示赞同的机会。  </p>
<p>另外，如果你在功能开发中有问题卡出了，可以开一个pull Requests来向同学们征求建议。  </p>
<p>这些做法的重点就是，pull Requests让团队成员之间互相评论工作变成非常方便！  </p>
<h4 id="工作方式-1"><a href="#工作方式-1" class="headerlink" title="工作方式"></a>工作方式</h4><p>功能分支工作流仍然用中央仓库，并且master分支还是代表了正式项目的历史。  </p>
<p>但不是直接提交本地历史到各自的本地master分支，开发者每次在开始新功能前先创建一个新分支。  </p>
<p>功能分支应该有个描述性的名字，比如 animated-menu-items 或者  issue-#1061，这样可以让分支有个清楚且高聚焦的用途。  </p>
<p>在master分支和功能分支之间，Git是没有技术上的区别，所以开发者可以用和集中式工作流完全一样的方式编辑、暂存和提交修改到功能分支上。  </p>
<p>另外，功能分支也可以（且应该）push到中央仓库中。  </p>
<p>这样不修改正是代码就可以和其他开发者分享提交的功能。  </p>
<p>由于master仅有的一个【特殊】分支，在中央仓库上存在多个功能分支不会有任何问题。  </p>
<p>当然这样做也可以很方便地备份各自的本地提交。  </p>
<h4 id="Pull-Requests-1"><a href="#Pull-Requests-1" class="headerlink" title="Pull Requests"></a>Pull Requests</h4><p>功能分支除了可以隔离功能的开发，也使得通过 Pull Requests讨论变更称为可能。  </p>
<p>一旦某个开发完成一个功能，不是立即合并到master，而是push到中央仓库的功能分支上并发起一个Pull Requests的请求去合并并修改到master。  </p>
<p>在修改成为主干代码之前，这让其他的开发者有机会先去Review变更。  </p>
<p>Code Review是Pull Requests的一个重要的收益。  </p>
<p>但是pull Requests目的是讨论代码一个通用方式。  </p>
<p>你可以把Pull  Requests作为专门给某个分支的讨论。  </p>
<p>这意味着可以在更早的开发过程中就可以进行Code Review。  </p>
<p>比如，一个开发者开发功能需要帮助时，要做的就是发起一个Pull Requests，相关的人就会自动收到通知，在相关的提交旁边能看到需要帮助解决的问题。  </p>
<p>一旦Pull  Requests被接受了，发布功能要做的就和集中式工作流就很像了。  </p>
<p>（1）首先，确定本地的master分支和上游的master分支是同步的。  </p>
<p>（2）然后合并功能分支到本地master分支，并push已经更新的本地master分支到中央仓库。</p>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>下面的示例演示了如何把Pull Requests作为Code Review的方式，但注意Pull Requests可以用于很多其他的目的。  </p>
<h5 id="小红开始开发一个新功能"><a href="#小红开始开发一个新功能" class="headerlink" title="小红开始开发一个新功能"></a>小红开始开发一个新功能</h5><p>在开始开发功能之前，小红需要一个独立的分支。  </p>
<p>使用下面的命令新建一个分支。  </p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b </span><span class="keyword">marys-feature </span>master</span><br></pre></td></tr></table></figure>

<p>这个命令检出一个基于master名为marys-feature的分支，Git的-b选项表示如果分支还不存在则新建分支。  </p>
<p>这个新分支上，小红按照老套路编辑、暂存和提交修改，按需要提交以实现功能：  </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">git</span>  <span class="string">status</span></span><br><span class="line"><span class="attr">git</span> <span class="string">add</span></span><br><span class="line"><span class="attr">git</span> <span class="string">commit</span></span><br></pre></td></tr></table></figure>

<h5 id="小红要去吃个午饭"><a href="#小红要去吃个午饭" class="headerlink" title="小红要去吃个午饭"></a>小红要去吃个午饭</h5><p>（两个人、多个人同时开发，称之为协同开发）  </p>
<p>仓库：github、码云、码市、gitlab  </p>
<p>review 代码审核；  </p>
<p>早上小红为新功能添加了一些提交。  </p>
<p>去吃午饭前，push功能分支到中央仓库是很好的做法，这样可以方便地备份，如果和其他开发协作，也让他们可以看到小红的提交。  </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> marys-<span class="built_in">feature</span></span><br></pre></td></tr></table></figure>

<p>这条命令  push marys-feature 分支到中央仓库（origin），-u选项设置本地分支去跟踪远程对应的分支。  </p>
<p>设置好跟踪的分支后，小红就可以使用git push 命令省去指定推送分支的参数。  </p>
<h5 id="小红完成功能开发"><a href="#小红完成功能开发" class="headerlink" title="小红完成功能开发"></a>小红完成功能开发</h5><p>小红吃完午饭回来，完成整个功能的开发。  </p>
<p>在合并到master之前，她发起一个Pull Requests让团队的其他人知道功能已经完成。  </p>
<p>但是首先，她要确认中央仓库中已经有她最近的提交。  </p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure>

<p>然后，在她的Git GUI客户端中发起Pull Request，请求合并marys-feature到master，团队成员会自动收到通知。  </p>
<p>Pull Request很酷的是可以在相关的提交旁边显示评注，所以你可以很对某个变更集提问。  </p>
<h5 id="小黑收到Pull-Request"><a href="#小黑收到Pull-Request" class="headerlink" title="小黑收到Pull  Request"></a>小黑收到Pull  Request</h5><p>小黑收到Pull Request后会查看marys-feature的修改。  </p>
<p>决定在合并到正式项目前是否要做些修改，且通过Pull Request和小红来回的讨论。  </p>
<h5 id="小红再做修改"><a href="#小红再做修改" class="headerlink" title="小红再做修改"></a>小红再做修改</h5><p>要在做修改，小红用和功能第一个迭代完全一样的过程。  </p>
<p>编辑、暂存、提交并push更新到中央仓库。  </p>
<p>小红这些活动都会显示在Pull Request上，小黑可以断续做评注。  </p>
<p>如果小黑有需要，也可以把marys-feature分支拉到本地，自己来修改，他加的提交也会一样显示在Pull Request上。  </p>
<h5 id="小红发布她的功能"><a href="#小红发布她的功能" class="headerlink" title="小红发布她的功能"></a>小红发布她的功能</h5><p>一旦小黑可以接受Pull Request，就可以合并功能到稳定项目代码中（可以由小黑或者是小红来做这个操作）：  </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout master</span></span><br><span class="line"><span class="attr">git</span> <span class="string">pull</span></span><br><span class="line"><span class="attr">git</span> <span class="string">pull origin marys-feature</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push</span></span><br></pre></td></tr></table></figure>

<p>无论谁来做合并，首先要检出master分支并确认它是最新的。  </p>
<p>然后执行 git pull origin marys-feature 合并 marys-feature 分支到已经和远程一直的本地 master分支。  </p>
<p>你可以使用简单 git merge marys-feature命令，但是前面的命令可以保证总是最新的新功能分支。  </p>
<p>最后更新的master分支要重新push回到origin。  </p>
<p>这个过程常常会生成一个和并提交。  </p>
<p>有些开发者喜欢有合并提交。  </p>
<p>因为它像一个新功能和原来代码基线的连通符。  </p>
<p>但如果你偏爱线性的提交历史，可以在执行合并rebase新功能到master分支的顶部，这样生成一个快进（fast-forward）的合并。  </p>
<p>一些GUI客户端只要点一下【接受】按钮执行好上面的命令来自动化Pull Request接受过程。  </p>
<p>如果你的不能这样，至少在功能合并到master分子后自动关闭Pull Request。  </p>
<h5 id="与此同时，小明在做和小红一样的事情"><a href="#与此同时，小明在做和小红一样的事情" class="headerlink" title="与此同时，小明在做和小红一样的事情"></a>与此同时，小明在做和小红一样的事情</h5><p>当小红和小黑在marys-feature上工作并讨论她的Pull  Request的时候，小明在自己的功能分支上做完全一样的事情。  </p>
<p>通过隔离功能能到独立的分支上，每个人都可以自主的工作，当然必要的时候在开发者之间分享变更还是比较繁琐的。  </p>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>到了这里，但愿你发现了功能分支可以很直接地在集中式工作流的仅有的master分支上完成多功能的开发。  </p>
<p>另外，功能分支还使用了Pull Request，使得可以在你的版本控制GUI客户端中讨论某个提交。  </p>
<p>功能分支工作流是开发项目异常灵活的方式。  </p>
<p>问题是，有时候太灵活了。  </p>
<p>对于大型团队，常常需要给不同分支分配一个更具体的角色。  </p>
<p>GitFlow工作流是管理功能开发、发布准备和维护的常用模式。  </p>
<h3 id="GitFlow工作流"><a href="#GitFlow工作流" class="headerlink" title="GitFlow工作流"></a>GitFlow工作流</h3><p>在实际开发当中，可能通常使用GitFlow工作流。  </p>
<p>GitFlow工作流定义了一个围绕项目发布的严格分支模型。  </p>
<p>虽然比功能分支工作流复杂几分，但是提供了一个用于健壮的用于管理大型项目的框架。  </p>
<p>GitFlow工作流没有用超出功能分支工作流的概念和命令。  </p>
<p>而是为不同的分支分配了一个很明确的角色，并定义分支之间如何交互和什么时候进行交互。  </p>
<p>除了使用功能分支，在做准备、维护和记录发布也是用各自的分支。  </p>
<p>当然你可以用上功能分支工作流所有的好处：Pull Request、隔离实验性开发和更高效的工作。  </p>
<h4 id="工作方式-2"><a href="#工作方式-2" class="headerlink" title="工作方式"></a>工作方式</h4><p>GitFlow工作流仍然用中央仓库作为所有开发者的交互中心。  </p>
<p>和其他工作流一样，开发者在本地工作并push分子到中央分支去。  </p>
<h5 id="历史分支"><a href="#历史分支" class="headerlink" title="历史分支"></a>历史分支</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX0DucqArpSZN8V1mN.Djx7WchltIFUxePFkxo0wF6tL9hJ92GPpyK1meBHYC6jQnh92Uk6*6zENCWbjq21uqLsI!/r" alt="历史分支"></p>
<p>相对使用仅有的一个master分支，GitFlow工作流使用两个分支来记录项目的历史。  </p>
<p>master分支存储了正式发布的历史，而develop分支作为功能的集成分支，这样也方便master分支上的所有提交分配一个版本号。  </p>
<p>剩下要说明的问题就是围绕这两个分支的区别展开。  </p>
<h5 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX4suzD8O2OoWbYPwQ150IFWgQS3qSKoLWdglLxIjfri4eWAHC*W6m9OYJM0vFH4CxIhXiOdTBQYoWLsUJ3d8M.k!/r" alt="功能分支"></p>
<p>每个新功能位于一个自己的分支，这样可以push到中央仓库以备份和协作。  </p>
<p>但是功能分支不是从master分支上拉出新分支，而是使用develop分支作为父分支。  </p>
<p>当新功能完成时，合并会develop分支。  </p>
<p>新功能提交应该从不直接与master分支交互。  </p>
<p>开源软件基本上是使用GitFlow来做代码版本管理的控制。  </p>
<p>注意，从各种含义和目的上来看，功能分支加上develop分支就是功能分支工作流的用法。  </p>
<p>但是GitFlow工作流没有在这里止步。  </p>
<h5 id="发布分支"><a href="#发布分支" class="headerlink" title="发布分支"></a>发布分支</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX1K5y5ivKrS*rhk3l.NtQVVaNHmKMdlqKelqYaRENh70*1X*IrEmFCJIhfs5U7wXELfZbYI1tihPDOGBwBPqt6E!/r" alt="发布分支"></p>
<p>一旦develop分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从develop分支上fork一个发布分支。  </p>
<p>新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上——-这个分支只应该叫Bug修复、文档生成或其他面向发布任务。  </p>
<p>一旦对外发布的工作都完成了，发布分支合并到master分支并飞配一个版本号打好Tag。  </p>
<p>另外，这些新建发部分之以来做的修改要合并回develop分支。  </p>
<p>使用一个用于发布准备的专门分支，使得一个团队可以在完善当前的发布版本的同时，另一个团队可以继续开发下个版本的功能。  </p>
<p>这也打造定义良好的开发阶段（比如，可以很轻松的说，【这周我们要做准备发布版本4.0】，并且在仓库的目录结构中可以实际看到）  </p>
<p>常用的分支约定：  </p>
<ul>
<li>用于新建发布分支的分支：develop</li>
<li>用于合并的分支：master</li>
<li>分支命名：release- 或 release/</li>
</ul>
<h5 id="维护分支"><a href="#维护分支" class="headerlink" title="维护分支"></a>维护分支</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX8qfvx9q8UhYcwpU4tSoxZoCzp2TGnchoEgJnBAd**ejGrSWx7H1n1RbZFVAdVlD7v3kEO6EHjpPFNMCD9pabTQ!/r" alt="维护分支"></p>
<p>维护分支或者说是热修复（hotfix）分支用于生成快速给产品发布版本（production release）打补丁，这是唯一可以从master分支fork出来的分支。  </p>
<p>修复完成，修改应该马上合并回master分支和develop分支（当前的发部分支），master分支应该用新的版本号打好Tag。  </p>
<p>为了Bug修复使用专门分支，让团队可以处理问题而不用打断其他工作或者是等待下一个发布循环。  </p>
<p>你可以把维护分支想成是一个直接在master分支上处理的临时发布。  </p>
<p>即hotfix，维护的是v1.0.0—&gt;v1.0.1这种；<br>第三位数修改的是Bug（hotfix维护版本第三位数）；第二位数修改的是功能（功能分支维护的是版本的第二位数）；第一位为大架构改变的时候进行修改（维护版本的第一位数）；  </p>
<p>GitFlow从这点上就可以与语义化规范牵扯上联系；  </p>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p>下面的示例演示本工作流如何用于管理单个发布循环。  </p>
<p>假设你已经创建了一个中央仓库。  </p>
<h5 id="创建开发分支"><a href="#创建开发分支" class="headerlink" title="创建开发分支"></a>创建开发分支</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX4Xsg92Awirp0bThQ4n*YW8UWB.U5*XFBFsn5hkNOcst0hBz.q1uwuu*KDADM.W9naZBQq8eKQyo4iLkzk28e1g!/r" alt="创建开发分支"></p>
<p>第一步为master分支配套一个develop分支。  </p>
<p>简单来做可以本地创建一个空的develop分支，push到服务器上：  </p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>develop</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>-u origin master</span><br></pre></td></tr></table></figure>

<p>以后这个分支将会包含了项目的全部历史。  </p>
<p>而master分支将只包含部分历史。  </p>
<p>其他开发者这时应该克隆中央仓库，建好develop分支的跟踪分支：  </p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">ssh</span>://user@host/path/to/repo.git</span><br><span class="line">git checkout -b develop origin/develop</span><br></pre></td></tr></table></figure>

<p>现在每个开发都有了这些历史分支的本地拷贝。  </p>
<h5 id="小红和小明开始开发新功能"><a href="#小红和小明开始开发新功能" class="headerlink" title="小红和小明开始开发新功能"></a>小红和小明开始开发新功能</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX2X16EiSaoizI9a2HRgo6HRlddb*dD0yGRzorFtrKInoqDMveDkX4.ujU1ZgrgxXoZf1vY83YLzd6Dl2YO5SDUc!/r" alt="小红和小明开始开发新功能"></p>
<p>这个示例中，小红和小明开始各自的功能开发。  </p>
<p>他们需要为各自的功能创建相应的分支。  </p>
<p>新分支不是基于master分支，而是应该基于develop分支：  </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git checkout -b <span class="built_in">some</span>-<span class="built_in">feature</span> develop</span><br></pre></td></tr></table></figure>

<p>他们用老套路添加提交到各自功能分支上：编辑、暂存、提交；  </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">status</span></span><br><span class="line"><span class="attr">git</span> <span class="string">add</span></span><br><span class="line"><span class="attr">git</span> <span class="string">commit</span></span><br></pre></td></tr></table></figure>

<h5 id="小红完成功能开发-1"><a href="#小红完成功能开发-1" class="headerlink" title="小红完成功能开发"></a>小红完成功能开发</h5><p>添加了提交后，小红觉得她的功能OK了。  </p>
<p>如果团队使用Pull Requests，这时候可以发起一个用于合并到develop分支。  </p>
<p>否则她可以直接合并到她本地的develop分之后push到中央仓库：  </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git pull <span class="built_in">origin</span> develop</span><br><span class="line">git checkout develop</span><br><span class="line">git merge <span class="built_in">some</span>-<span class="built_in">feature</span></span><br><span class="line">git <span class="built_in">push</span></span><br><span class="line">git branch -d <span class="built_in">some</span>-<span class="built_in">feature</span></span><br></pre></td></tr></table></figure>

<p>第一条命令在合并功能前确保develop分支是最新的。  </p>
<p>注意，功能绝不应该直接合并到master分支。  </p>
<p>冲突解决方法和集中式工作流一样。  </p>
<h5 id="小红开始准备发布"><a href="#小红开始准备发布" class="headerlink" title="小红开始准备发布"></a>小红开始准备发布</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXxm6aYd1gMGOxylETc6cDcj7kTwBnGuyoyzYDL7pNxxvtXeo*D5bCxnVfWE*k.cQe8O4lhgkHo2zR.IIDII1kmA!/r" alt="小红开始准备发布"></p>
<p>这个时候小明正在实现他的功能。  </p>
<p>小红开始准备她的第一个项目正式发布（发布分支也叫预发布分支，预发布分支基于develop，只有预发布版本分支才能够去合并到master分支，而预发布版本是经过测试人员测试之后的没有问题的一个版本；master分支代码必须可以执行，没有被污染）。  </p>
<p>像功能开发一样，她用一个新的分支来做发布准备。  </p>
<p>这一步也确定了发布的版本号：  </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">git checkout -b release<span class="number">-0.1</span> develop</span><br></pre></td></tr></table></figure>

<p>这个分支是清理分支、执行所有测试、更新文档和其他为下个发布做准备操作的地方，像是一个专门用于改善发布的功能分支。  </p>
<p>只要小红创建的这个分支push到中央仓库，这个发布就是功能冻结的。  </p>
<p>任何不在develop分支中的新功能都推到下一个发布循环中。  </p>
<h5 id="小红完成发布"><a href="#小红完成发布" class="headerlink" title="小红完成发布"></a>小红完成发布</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXx2fdZ*.CxsTwPMg235DDXkchbPbk7hNVec6.FIcmcf72k0vjzhdQvVlYt8u8ao*65n3gyQAyN5GOxndJKhwiNk!/r" alt="小红完成发布"></p>
<p>一旦准备好了对外发布，小红合并修改到master分支和develop分支上，删除发布分支。  </p>
<p>合并回develop分支很重要，因为在发布分支中已经提交的更新需要在后面的新功能中也要是可用的。  </p>
<p>另外，如果小红的团队要求Code  Review，这是一个发起Pull Request的理想时机。  </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout master</span></span><br><span class="line"><span class="attr">git</span> <span class="string">merge release-0.1</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push</span></span><br><span class="line"><span class="attr">git</span> <span class="string">checkout develop</span></span><br><span class="line"><span class="attr">git</span> <span class="string">merge release-0.1</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push</span></span><br><span class="line"><span class="attr">git</span> <span class="string">branch -d release-0.1</span></span><br></pre></td></tr></table></figure>

<p>发布分支是作为功能开发（develop分支）和对外发布（master分支）间的缓冲。  </p>
<p>只要有合并到master分支，就应该打好Tag以方便跟踪。  </p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> <span class="number">0.1</span> -m <span class="string">"Initial public release"</span> <span class="literal">master</span></span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure>

<p>Git有提供各种钩子（hook），即仓库有时间发生时触发执行的脚本。  </p>
<p>可以配置一个钩子，在你push中央仓库的master分支时，自动构建好对外发布。  </p>
<h5 id="最终用户发现Bug"><a href="#最终用户发现Bug" class="headerlink" title="最终用户发现Bug"></a>最终用户发现Bug</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXzsQH1hJotlrx1khR6EZ0dUlyxkaf9L1Yi66Fs6sohYE0UTifJNygNHa*okiIgZc5dg2qSXBW*VyQGtiyMr0yo8!/r" alt="最终用户发现Bug"></p>
<p>对外发布后，小红回去和小明一起做下个发布的新功能开发，直到有最终用户开了一个Ticket抱怨当前版本的一个Bug。  </p>
<p>为了处理Bug，小红（或者小明）从master分支上来去了一个维护分支（hotfix），提交修改以解决问题，然后直接合并回master分支：  </p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git checkout -b issue-<span class="comment">#001 master</span></span><br><span class="line"><span class="comment"># Fix the bug</span></span><br><span class="line">git checkout <span class="literal">master</span></span><br><span class="line">git merge issue-<span class="comment">#001</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>就像发布分支，维护分支中新加这些重要修改需要包含到develop分支中，所以小红要执行一个合并操作，然后就可以安全地删除这个分支了：  </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout develop</span></span><br><span class="line"><span class="attr">git</span> <span class="string">merge issue-#001</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push</span></span><br><span class="line"><span class="attr">git</span> <span class="string">branch -d issue-#001</span></span><br></pre></td></tr></table></figure>

<h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>到了这里，但愿你对集中式工作流、功能分支工作流和GitFlow工作流已经感觉很舒适了。  </p>
<p>你应该也牢固的掌握了本地仓库的潜能，push/pull模式和Git健壮的分支和合并模型。  </p>
<p>记住，这里演示的工作流只是可能用法的例子，而不是在实际工作中使用Git不可违逆的条例。  </p>
<p>所以不要畏惧按自己需要对工作流的用法做取舍，不变的目标就是让Git为你所用。  </p>
<p>（在整个GitFlow工作流当中，只会去进行省略功能分支Feature，Master、HotFix、Release、Develop是必不可少的分支，以便控制每一次版本的迭代）  </p>
<h3 id="Forking工作流-1"><a href="#Forking工作流-1" class="headerlink" title="Forking工作流"></a>Forking工作流</h3><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX2qjPC0eDN.Xf29HcBYoAsTtpBFvJhu8qPVkh5cv575QWLsHx3q8JbFYK3X5cts.Zn43gkCjc7OzyBcDFaNdl.g!/r" alt="Forking工作流"></p>
<p>Forking工作流和前面讨论的几种工作流有根本的不同。  </p>
<p>这种工作流不是适用单个服务器端仓库作为【中央】代码基线，而让各个开发者都有一个服务端仓库。  </p>
<p>这意味着各个代码贡献者有2个Git仓库而不是1个：一个本地私有的，另一个服务端公开的。  </p>
<p>Forking工作流的一个主要优势是，贡献的代码可以被集成，而不需要所有人都能push代码到仅有的中央仓库中。  </p>
<p>开发者push到自己的服务端仓库，而只有项目维护者才能push到正式仓库。  </p>
<p>这样项目维护者可以接受任何开发者的提交，但无需给他正式代码库的写权限。  </p>
<p>效果就是一个分布式的工作流，能为大型、自发性的团队（包括了不受信的第三方）提供灵活的方式来安全的写作。  </p>
<p>也让这个工作流称为开源项目的理想工作流。  </p>
<h4 id="工作方式-3"><a href="#工作方式-3" class="headerlink" title="工作方式"></a>工作方式</h4><p>和其他的Git工作流一样，Forking工作流要先有一个公开的正式仓库存储在服务器上，但一个新的开发者想要在项目上工作时，不是直接从正式仓库克隆，而是fork正式项目在服务器上创建一个拷贝。  </p>
<p>这个仓库拷贝作为他人公开仓库—–其他开发者不允许push到这个仓库，但可以pull到修改（后面很快就会看到这点很重要）。  </p>
<p>在创建了自己服务端拷贝之后，和之前的工作流一样，开发者执行git clone命令克隆仓库到本地机器上，作为私有的开发环境。  </p>
<p>要提交本地修改时，push提交到自己公开仓库中——-而不是正式仓库中。  </p>
<p>然后，给正式仓库发起一个pull request，让项目维护者知道有更新已经准备好可以集成了。  </p>
<p>对于贡献的代码，pull request也可以很方便地作为一个讨论的地方。  </p>
<p>为了集成功能到正式代码库，维护者pull贡献者的变更到自己的本地仓库中，检查变更以确保不会让项目出错，合并变更到自己本地的master分支，然后push master分支到服务器的正式仓库中。  </p>
<p>到此，贡献的提交成为了项目的一部分，其他的开发者应该执行pull操作与正式仓库同步自己本地仓库。  </p>
<h5 id="正式仓库"><a href="#正式仓库" class="headerlink" title="正式仓库"></a>正式仓库</h5><p>在Forking工作流中，【官方】仓库的叫法只是一个约定，理解这点很重要。  </p>
<p>从技术上来看，各个开发者仓库和正式仓库在Git卡那里没有任何区别。  </p>
<p>事实上，让正式仓库之所以正式的唯一原因是他是项目维护者的公开仓库。  </p>
<h5 id="Forking工作流的分支使用方式"><a href="#Forking工作流的分支使用方式" class="headerlink" title="Forking工作流的分支使用方式"></a>Forking工作流的分支使用方式</h5><p>所有的个人公开仓库实际商只是为了方便和其他的开发者共享分支。  </p>
<p>各个开发者应该用分支隔离各个功能，就像功能分支工作流和GitFlow工作流一样。  </p>
<p>唯一的区别是这些分支被共享了。  </p>
<p>在Forking工作流中这些分支会被pull到另一个开发者的本地仓库中，而在功能分支工作流和GitFlow工作流中是直接被push到正式仓库当中。  </p>
<h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><h5 id="项目维护者初始化正式仓库"><a href="#项目维护者初始化正式仓库" class="headerlink" title="项目维护者初始化正式仓库"></a>项目维护者初始化正式仓库</h5><p>和任何使用Git项目一样，第一步还是创建在服务器上一个正式仓库，让所有团队成员都可以访问到。  </p>
<p>通常这个仓库也会作为项目维护者的公开仓库。  </p>
<p>公开仓库应该是裸仓库，不管是不是正式代码库。  </p>
<p>所以项目维护者会运行像下面的命令来搭建正式仓库：  </p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">ssh user<span class="symbol">@host</span></span><br><span class="line">git init --bare /path/<span class="keyword">to</span>/repo.git</span><br></pre></td></tr></table></figure>

<p>Bitbucket和Stash提供了一个方便的GUI客户端已完成上面命令行做的事。  </p>
<p>这个搭建中央仓库的过程和前面提到的工作流完全一样。  </p>
<p>如果有现存的代码库，维护者也要push到这个仓库中。  </p>
<h5 id="开发者fork正式仓库"><a href="#开发者fork正式仓库" class="headerlink" title="开发者fork正式仓库"></a>开发者fork正式仓库</h5><p>其他所有的开发需要fork正式仓库。  </p>
<p>可以用git clone命令用SSH协议连通到服务器，拷贝仓库到服务器另一个位置—–是的，fork操作基本上就只是一个服务端的克隆。  </p>
<p>Bitbucket和Stash上可以点一下按钮就让开发者完成仓库的fork操作。  </p>
<p>这一步完成后，每个开发都在服务端有一个自己的仓库。  </p>
<p>和正式仓库一样，这些仓库应该是裸仓库。  </p>
<h5 id="开发者克隆自己fork出来的仓库"><a href="#开发者克隆自己fork出来的仓库" class="headerlink" title="开发者克隆自己fork出来的仓库"></a>开发者克隆自己fork出来的仓库</h5><p>下一步，各个开发者要克隆自己的公开仓库，用熟悉的git clone命令。  </p>
<p>在这个示例中，假定用Bitbucket托管了仓库。  </p>
<p>记住，如果这样的话各个开发者需要有各自的Bitbucket账号，使用下面命令克隆服务端自己的仓库。  </p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://user@bitbucket.org/user/repo.git</span><br></pre></td></tr></table></figure>

<p>相比前面介绍的工作流只用了一个origin远程别名指向中央仓库，Forking工作流需要2个远程别名——-一个指向正式仓库，另一个指向开发者自己的服务端仓库。  </p>
<p>别名的名字可以任意命名，常见的约定是使用origin作为远程克隆的仓库的别名（这个别名会在运行git clone自动创建），upstream（上游）作为正式仓库的别名。  </p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">git remote <span class="keyword">add</span> upstream https://bitbucket<span class="meta">.org</span>/maintainer/repo</span><br></pre></td></tr></table></figure>

<p>需要自己用上面的命令创建upstream别名。  </p>
<p>这样可以简单地保持本地仓库和正式仓库的同步更新。  </p>
<p>注意，如果上游仓库需要认证（比如不是开源的），你需要提供用户：  </p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">git remote <span class="keyword">add</span> upstream https://user@bitbucket<span class="meta">.org</span>/maintainer/repo</span><br></pre></td></tr></table></figure>

<p>这时在克隆和pull正式仓库时，需要提供用户的密码。  </p>
<h5 id="开发者开发自己的功能"><a href="#开发者开发自己的功能" class="headerlink" title="开发者开发自己的功能"></a>开发者开发自己的功能</h5><p>在刚克隆的本地仓库中，开发者可以向其他工作流一样的编辑代码、提交修改和新建分支：  </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git checkout -b <span class="built_in">some</span>-<span class="built_in">feature</span></span><br><span class="line">// Edit <span class="built_in">some</span> code</span><br><span class="line">git commit -a -m <span class="string">"Add first draft of some feature"</span></span><br></pre></td></tr></table></figure>

<p>所有的修改都是私有的直到push到自己公开仓库中。  </p>
<p>如果正式项目已经向前走了，可以用git pull命令获得新的提交：  </p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git pull upstream <span class="literal">master</span></span><br></pre></td></tr></table></figure>

<p>由于开发者应该都在专门的功能分支上工作，pull操作结果会都是快进合并。  </p>
<h5 id="开发者发布自己的功能"><a href="#开发者发布自己的功能" class="headerlink" title="开发者发布自己的功能"></a>开发者发布自己的功能</h5><p>一旦开发者准备好了分享新功能，需要做两件事。  </p>
<p>（1）首先，通过push他的贡献代码到自己的公开仓库中，让其他的开发者都可以访问到。他的origin远程别名应该已经有了，所有要做的就是：  </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span>  <span class="built_in">feature</span>-branch</span><br></pre></td></tr></table></figure>

<p>这里和之前的工作流的差异是，origin远程别名指向开发者自己的服务端仓库，而不是正式仓库。  </p>
<p>（2）第二件事，开发者要通知项目维护者，想要合并他的新功能到正式库中。Bitbucket和Stash提供了Pull Request按钮，弹出个表单让你指定哪个分支要合并到正式仓库。一般你会想集成你的功能分支到上游远程仓库的master分支中。  </p>
<h5 id="项目维护者集成开发者的功能"><a href="#项目维护者集成开发者的功能" class="headerlink" title="项目维护者集成开发者的功能"></a>项目维护者集成开发者的功能</h5><p>当项目维护者收到pull request时，他要做的是决定是否集成它到正式代码库中。  </p>
<p>有两种方式来做：  </p>
<ul>
<li>直接在pull request中查看代码</li>
<li>pull代码到他自己的本地仓库，再手动合并</li>
</ul>
<p>第一种做法更简单，维护者可以在GUI中查看变更的差异，做评注和执行合并。  </p>
<p>但如果出现了合并冲突，需要第二种做法来解决。  </p>
<p>这种情况下，维护者需要从开发者的服务端仓库中fetch功能分支，合并到他本地的master分支，解决冲突：  </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git fetch https:<span class="regexp">//</span>bitbucket.org<span class="regexp">/user/</span>repo feature-branch</span><br><span class="line"><span class="regexp">//</span>查看变更</span><br><span class="line">git checkout master</span><br><span class="line">git merge FETCH_HEAD</span><br></pre></td></tr></table></figure>

<p>变更集成到本地的master分支后，维护者要push变更到服务器上的正式仓库，这样其他的开发者都能访问到：  </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>

<p>注意，维护者的origin是指向他自己公开仓库的，即是项目的正式代码库。  </p>
<p>到此，开发者的贡献完全集成到了项目中。  </p>
<h5 id="开发者和正式仓库做同步"><a href="#开发者和正式仓库做同步" class="headerlink" title="开发者和正式仓库做同步"></a>开发者和正式仓库做同步</h5><p>由于正式代码库往前走了，其他的开发需要和正式仓库做同步：  </p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git pull upstream <span class="literal">master</span></span><br></pre></td></tr></table></figure>

<h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p>如果你之前是使用SVN，Forking工作流可能看起来像是一个激进的范式切换（paradigm shift）。  </p>
<p>但是不要害怕，这个工作流实际上就是在功能分支工作流之上引入了另一个抽象层。  </p>
<p>不是直接通过单个中央仓库来分享分支，而是把贡献代码发布到开发者自己的服务端仓库中。  </p>
<p>示例中解释了，一个贡献如何从一个开发者流到正式的master分支中，但是同样的方法可以把贡献集中到任意一个仓库中。  </p>
<p>比如，如果团队的几个人协作实现一个功能，可以在开发之间用相同的方法分享变更，完全不涉及正式仓库。  </p>
<p>这使得Forking工作流对于松散组织的团队来说是个非常强大的工具。  </p>
<p>任一开发者可以方便地和另一开发者分享变更，任何分支都能有效地合并到正式代码库中。  </p>
<h3 id="Pull-Requests-2"><a href="#Pull-Requests-2" class="headerlink" title="Pull Requests"></a>Pull Requests</h3><p>Pull Requests 是Bitbucket上方便开发者之间协作的功能。  </p>
<p>提供了一个用户友好的Web界面，在集成提交的变更到正式向目前可以对变更进行讨论。  </p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX1zLLMp65VmnavK5XDJUKS6zYUJDvvIJN*Lt1FNUoIJG0DkTCKRNuOGToGtjWmjIrVLu*fSpHVogAtzO4DgCm80!/r" alt="images"></p>
<p>开发者向团队成员通知功能开发已经完成，pull Requests是最简单的用法。  </p>
<p>开发者完成功能开发后，通过Bitbucket账号发起一个pull Request。这样让涉及这个功能的所有人知道，要去做Code Review和合并到master分支。  </p>
<p>但是，Pull  Request远不止一个简单的通知，而是为讨论提交的功能的一个专门论坛。  </p>
<p>如果变更有任何问题，团队成员反馈在Pull Request中，甚至pull新的提交微调功能。  </p>
<p>所有的这些活动都直接跟踪在Pull Request中。  </p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7SLIJSUYxrmcZpwuXYsQB1Ya2zpcBawWJ7atpdZcoSsGWSrxt3XnkjpSfeaAffmHrs3SyEpgZCaBKHAdN3ReSA!/r" alt="images"></p>
<p>相比其他的协作模型，这种分享提交的形式有助于打造一个更流畅的工作流。  </p>
<p>SVN和Git都能通过一个简单的脚本收到通知邮件；  </p>
<p>但是，讨论变更时，开发者通常只能去回复邮件。  </p>
<p>这样做会变得杂乱，尤其还要涉及后面的几个提交时。  </p>
<p>Pull Requests吧所有相关功能整合到一个和Bitbucket仓库界面集成的用户友好Web界面中。  </p>
<h4 id="解析Pull-Request"><a href="#解析Pull-Request" class="headerlink" title="解析Pull Request"></a>解析Pull Request</h4><p>当腰发起一个pull Request，你所要做的就是请求（Request）另一个开发者（比如项目的维护者），来pull你仓库中一个分支到他的仓库中。  </p>
<p>这意味着你要提供4个信息（源仓库、源分支、目的仓库、目的分支），以发起Pull Request。  </p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7SLIJSUYxrmcZpwuXYsQB1Ya2zpcBawWJ7atpdZcoSsGWSrxt3XnkjpSfeaAffmHrs3SyEpgZCaBKHAdN3ReSA!/r" alt="images"></p>
<h4 id="工作方式-4"><a href="#工作方式-4" class="headerlink" title="工作方式"></a>工作方式</h4><p>Pull Request可以和功能分支工作流、GitFlow工作流或Forking工作流一起使用。  </p>
<p>但Pull Request要求要么分支不同，要么仓库不同，所以不能用于集中式工作流。  </p>
<p>在不同的工作流中使用pull  Request会有一些不同，但基本的过程是这样的：  </p>
<ul>
<li>开发者在本地仓库新建一个专门的分支开发功能；</li>
<li>开发者push分支修改到公开的Bitbucket仓库中；</li>
<li>开发者通过Bitbucket发起一个Pull Request；</li>
<li>团队的其他成员review code，讨论并修改；</li>
<li>项目维护者合并功能到官方仓库中并关闭Pull Request；</li>
</ul>
<h4 id="在功能分支工作流中使用Pull-Request"><a href="#在功能分支工作流中使用Pull-Request" class="headerlink" title="在功能分支工作流中使用Pull Request"></a>在功能分支工作流中使用Pull Request</h4><p>功能分支工作流用一个共享的Bitbucket仓库来管理协作，开发者在专门的分支上开发功能。  </p>
<p>但不是立即合并到master分支上，而是在合并到主代码之前开发这应该开一个Pull Request发起功能的讨论。  </p>
<p>功能分支工作流只有一个公开的仓库，所以Pull Request的目的仓库和源仓库总是同一个。  </p>
<p>通常开发者会指定他的功能分支作为源分支，master分支作为目的分支。  </p>
<p>收到Pull Request后，项目维护者要决定如何做。  </p>
<p>如果功能没问题，就简单地合并到master分支，关闭Pull Request。  </p>
<p>但如果提交的变更有问题，他可以在Pull Request中反馈，之后的新加的评论也会评论之后接着显示出来。  </p>
<p>在功能还没有完全开发完的时候，也可能发起一个pull Request。  </p>
<p>比如开发者在实现某个需求时遇到了麻烦。  </p>
<p>他可以发一个包含正在进行工作的Pull Request。  </p>
<p>其他的开发者可以在Pull Request提供建议，或者甚至直接添加提交来解决问题。  </p>
<h4 id="在GitFlow工作流中使用Pull-Request"><a href="#在GitFlow工作流中使用Pull-Request" class="headerlink" title="在GitFlow工作流中使用Pull Request"></a>在GitFlow工作流中使用Pull Request</h4><p>GitFlow工作流和功能分支工作流类似，单围绕项目发布定义一个严格的分支模型。  </p>
<p>在GitFlow工作流中使用Pull Request让开发者在发布分支或者是维护分支上工作时，可以有个方便的地方对关于发布分支或者是维护分支的问题进行交流。  </p>
<p>GitFlow工作流中Pull Request的使用过程和上一节中完全一致：当一个功能、发布或者是热修复分支需要Review时，开发者简单发起一个Pull Request，团队的其他成员会通过Bitbucket收到通知。  </p>
<p>新功能一般合并到develop分支，而发布和热修复则要同时合并到develop分支和master分支上。  </p>
<p>Pull Request可能用作所有合并的正式管理。  </p>
<h4 id="在Forking工作流中使用Pull-Request"><a href="#在Forking工作流中使用Pull-Request" class="headerlink" title="在Forking工作流中使用Pull Request"></a>在Forking工作流中使用Pull Request</h4><p>在Forking工作流中，开发者push完成的功能到他自己的仓库中，而不是共享仓库。  </p>
<p>然后，他发一个Pull  Request，让项目维护者知道他的功能已经可以Review了。  </p>
<p>在这个工作流，Pull Request的通知功能非常有用，因为项目维护者不可能知道其他开发者在他们自己的仓库添加了提交。  </p>
<p>由于各个开发者有自己的公开仓库，Pull Request的源仓库和目标仓库不是同一个。  </p>
<p>源仓库是开发者的公开仓库，源分支是包含了修改的分支。  </p>
<p>如果开发者要合并修改到正式代码库中，那么目标仓库是正式仓库，目标分支是master分支。  </p>
<p>Pull Request也可以用于正式项目之外的其他开发者之间的协作。  </p>
<p>比如，如果一个开发者和一个团队成员一起开发一个功能，他们可以发起一个Pull Request，用团队成员的Bitbucket仓库作为目标，而不是正式项目的仓库。  </p>
<p>然后使用相同的功能分支作为源和目标分支。  </p>
<p>2个开发者之间可以在Pull Request中讨论和开发功能。  </p>
<p>完成开发后，他们可以发起另一个Pull  Request，请求合并功能到正式的master分支。  </p>
<p>在Forking工作流中，这样的灵活性称为一个强有力的协作工具。  </p>
<h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><p>下面的示例演示了Pull Request如何在Forking工作流中使用。  </p>
<p>也同样适用于小团队的开发协作和第三方开发者向开源项目的贡献。  </p>
<p>在示例中，小红是个开发，小明是项目维护者。  </p>
<p>他们各自有一个公开的Bitbucket仓库，而小明的仓库包含了正式工程。  </p>
<h5 id="小红fork正式项目"><a href="#小红fork正式项目" class="headerlink" title="小红fork正式项目"></a>小红fork正式项目</h5><p>小红先要fork小明的Bitbucket仓库，开始项目的开发。  </p>
<p>她登录Bitbucket，浏览到小明的仓库页面，点fork按钮。  </p>
<p>然后为fork出来的仓库填写名字和描述，这样小红就有了服务端的项目拷贝了。  </p>
<h5 id="小红克隆她的Bitbucket仓库"><a href="#小红克隆她的Bitbucket仓库" class="headerlink" title="小红克隆她的Bitbucket仓库"></a>小红克隆她的Bitbucket仓库</h5><p>下一步，小红克隆自己刚才fork出来的Bitbucket仓库，以在本机上准备出工作拷贝。  </p>
<p>命令如下：  </p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://user@bitbucket.org/user/repo.git</span><br></pre></td></tr></table></figure>

<p>请记住，git clone 会自动创建origin远程别名，是指向小红fork出来的仓库。  </p>
<h5 id="小红开发新功能"><a href="#小红开发新功能" class="headerlink" title="小红开发新功能"></a>小红开发新功能</h5><p>在开始改代码前，小红要为新功能新建一个新分支。  </p>
<p>她会用这个分支作为Pull Request的源分支。  </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git checkout -b <span class="built_in">some</span>-<span class="built_in">feature</span></span><br></pre></td></tr></table></figure>

<h5 id="编辑代码"><a href="#编辑代码" class="headerlink" title="编辑代码"></a>编辑代码</h5><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">git commit -<span class="keyword">a</span> -m <span class="string">"Add first draft of some feature"</span></span><br></pre></td></tr></table></figure>

<p>在新功能分支上，小红按照需要添加提交。  </p>
<p>甚至如果小红觉得功能分支上的提交历史太乱了，她可以用交互式rebase来删除或者压制提交。  </p>
<p>对于大型项目，整理功能分支的历史可以让项目维护者更容易看出在pull Request中做了什么内容。  </p>
<h5 id="小红push功能到她的Bitbucket仓库中"><a href="#小红push功能到她的Bitbucket仓库中" class="headerlink" title="小红push功能到她的Bitbucket仓库中"></a>小红push功能到她的Bitbucket仓库中</h5><p>小红完成功能后，push功能到她自己的Bitbucket仓库中（不是正是仓库），用下面简单的命令。  </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> <span class="built_in">some</span>-branch</span><br></pre></td></tr></table></figure>

<p>这时她的变更可以让项目维护者看到了（后者任何想要看的协作者）  </p>
<h5 id="小红发起Pull-Request"><a href="#小红发起Pull-Request" class="headerlink" title="小红发起Pull Request"></a>小红发起Pull Request</h5><p>Bitbucket上有了她的功能分支后，小红可以用她的Bitbucket账号浏览到她fork出来的仓库页面，点右上角的[ Pull Request ]按钮，发起一个Pull Request。  </p>
<p>弹出的表单自动设置小红的仓库为源仓库，询问小红以指定源分支、目标仓库和目标分支。  </p>
<p>小红想要合并功能到正式仓库，所以源分支是她的功能分支，目标仓库是小明的公开仓库，而目标分支是master分支。  </p>
<p>另外，小红需要提供Pull Request的标题和描述信息。  </p>
<p>如果需要小明以外的人审核批准diamante，她可以把这些人填在[ Reviewers ]文本框中。  </p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX4eBUNEH.PnD8cXLFX3FNQ1TY28uOV3j2Ic*FLo6qk1HERoVGDzy.ccPi6KWHQ1Ha7aF4qrprhr6a71aswRPe1s!/r" alt="images"></p>
<p>创建好了Pull Request，通知会通过Bitbucket系统消息或者邮件（可选）发给小明。  </p>
<h5 id="小明-review-Pull-Request"><a href="#小明-review-Pull-Request" class="headerlink" title="小明 review Pull Request"></a>小明 review Pull Request</h5><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXz.TEdJt9fHfFvRXR*aihUCZBZl8OSFD1T7r*7GIRRSRDePO5EI5YO0pxG7Qo02eHht0.LfxlnFiUPPKgPzRY4U!/r" alt="images"></p>
<p>在小明的Bitbucket仓库页面的[ Pull Request ]Tab可以看到所有人发起的Pull Request。  </p>
<p>点击小红的Pull Request会显示Pull Request的描述、功能的提交历史和每个变更的差异（diff）。  </p>
<p>如果小明想要合并到项目中，只要点一下[ Merge ]按钮，就可以同意Pull Request并合并到master分支。  </p>
<p>但如果像这个示例中一样，小明发现了在小红的代码中的一个小Bug，要在小红合并前修复。  </p>
<p>小明可以在整个Pull Request上加上评注，或者是选择历史中的某个提交加上评注。  </p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXywJcEdXUnF5drr2Tn8vpOshxucsOMz.iW9qg*vXiM80CBz6VcPZTn4e7NC2txFi9Xf.oe9HyW39vilYdBhizv0!/r" alt="images"></p>
<h5 id="小红补加提交"><a href="#小红补加提交" class="headerlink" title="小红补加提交"></a>小红补加提交</h5><p>如果小红对反馈有任何疑问，可以在Pull Request中响应，把Pull Request当做是她功能讨论的论坛。  </p>
<p>小红在她的功能分支新加提交以解决代码问题，并push到她的Bitbucket仓库中，就像前一轮中的做饭一样。  </p>
<p>这些提交会进入到Pull Request，小明在原来的评注旁边可以再次Review 变更。  </p>
<h5 id="小明接受Pull-Request"><a href="#小明接受Pull-Request" class="headerlink" title="小明接受Pull Request"></a>小明接受Pull Request</h5><p>最终，小明接受变更，合并功能分支到master分支，并关闭Pull Request。  </p>
<p>至此，功能集成到项目中，其他的项目开发者可以用标准的git pull命令pull这些变更到自己的本地仓库中。  </p>
<h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p>到了这里，你应该有了所有需要的工具来集成Pull Request到你自己的工作流。  </p>
<p>请记住，Pull Request并不是为了替代任何基于Git的协作工作流，而是它们的一个便利的补充，让团队成员间的协作更加轻松方便。  </p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Git工作流</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务架构的分布式事务控制解决方案</title>
    <url>/2020/04/20/%E9%9D%A2%E8%AF%95/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>希望这句话不只是送给我，也送给那些跟我当时心境一样的人。  </p>
<p>就像妈妈每次给我打电话的结尾是：要天天开开心心的。保持好心情。  </p>
<p>一样。  </p>
<p>观看笔记： <a href="https://www.bilibili.com/video/BV1Q4411y7ip?from=search&amp;seid=11158504841670855744" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Q4411y7ip?from=search&amp;seid=11158504841670855744</a>  </p>
<p>相关的笔记截图放在QQ号为：198866436的空间相册当中了；  </p>
<p>视频可以选择2x倍速观看；不知道为什么它的那个原本的速度我感觉好像放慢了一样，放到2x速度的时候感觉才像是刚刚好；  </p>
<h2 id="技术专题：分布式事务专题"><a href="#技术专题：分布式事务专题" class="headerlink" title="技术专题：分布式事务专题"></a>技术专题：分布式事务专题</h2><ol>
<li>基础概念</li>
</ol>
<ul>
<li>什么是事务</li>
<li>本地事务</li>
<li>分布式事务</li>
<li>分布式事务产生的场景</li>
</ul>
<ol start="2">
<li>分布式事务基础理论</li>
</ol>
<ul>
<li>CAP理论<ul>
<li>理解CAP</li>
<li>CAP组合方式</li>
<li>总结</li>
</ul>
</li>
<li>BASE理论</li>
</ul>
<ol start="3">
<li>分布式事务解决方案之2PC（两阶段提交）</li>
</ol>
<ul>
<li>什么是2PC</li>
<li>解决方案<ul>
<li>传统2PC</li>
<li>Seata实现2PC</li>
</ul>
</li>
<li>Seata实现2PC事务（seata阿里开源框架）<ul>
<li>业务说明</li>
<li>程序组成部分</li>
<li>创建数据库</li>
<li>启动TC（事务协调器）</li>
<li>discover-server</li>
<li>导入dtx-seata-demo</li>
<li>dtx-seata-demo-bank1</li>
<li>dtx-seata-demo-bank2</li>
<li>测试场景</li>
<li>原理分析</li>
</ul>
</li>
<li>小结</li>
</ul>
<ol start="4">
<li>分布式事务解决方案之TCC</li>
</ol>
<ul>
<li>什么是TCC事务</li>
<li>解决方案</li>
<li>Hmily实现TCC事务（Hmily轻量级框架）<ul>
<li>业务说明</li>
<li>程序组成部分</li>
<li>创建数据库</li>
<li>discover-server</li>
<li>导入dtx-tcc-demo</li>
<li>dtx-tcc-demo-bank1</li>
<li>dtx-tcc-demo-bank2</li>
<li>测试场景</li>
</ul>
</li>
<li>小结</li>
</ul>
<ol start="5">
<li>分布式事务解决方案之可靠消息最终一致性</li>
</ol>
<ul>
<li>什么是可靠消息最终一致性事务</li>
<li>解决方案<ul>
<li>本地消息表方案</li>
<li>RocketMQ事务消息方案</li>
</ul>
</li>
<li>RocketMQ实现可靠消息最终一致性事务（RocketMQ阿里开源的消息队列）<ul>
<li>业务说明</li>
<li>程序组成部分</li>
<li>创建数据库</li>
<li>启动RocketMQ</li>
<li>discover-server</li>
<li>导入dtx-txmsg-demo</li>
<li>dtx-txmsg-demo-bank1</li>
<li>dtx-txmsg-demo-bank2</li>
<li>测试场景</li>
</ul>
</li>
<li>小结</li>
</ul>
<ol start="6">
<li>分布式事务解决方案之最大努力通知</li>
</ol>
<ul>
<li>什么是最大努力通知</li>
<li>解决方案</li>
<li>RocketMQ实现最大努力通知型事务<ul>
<li>业务说明</li>
<li>程序组成部分</li>
<li>创建数据库</li>
<li>启动RocketMQ</li>
<li>导入dtx-notifymsg-demo</li>
<li>dtx-notifydemo-pay</li>
<li>dtx-notifydemo-bank1</li>
<li>测试场景</li>
</ul>
</li>
<li>小结</li>
</ul>
<ol start="7">
<li>分布式事务综合案例</li>
</ol>
<ul>
<li>系统介绍<ul>
<li>P2P介绍</li>
<li>总体业务流程</li>
<li>业务术语</li>
<li>模块说明</li>
</ul>
</li>
<li>注册账号案例分析<ul>
<li>业务流程</li>
<li>解决方案分析</li>
</ul>
</li>
<li>存管开户<ul>
<li>业务流程</li>
<li>解决方案分析</li>
</ul>
</li>
<li>满标审核<ul>
<li>业务流程</li>
<li>解决方案分析</li>
</ul>
</li>
</ul>
<ol start="8">
<li>课程总结</li>
</ol>
<h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>什么是事务？<br>举个生活中的例子：你去小卖铺买东西，“一手交钱，一手交货”就是一个事务的例子，交钱和交货必须全部成功，事务才算成功，任何一个活动失败，事务将撤销所有已成功的活动；  </p>
<p>明白上述例子，再来看事务的定义：  </p>
<blockquote>
<p>事务可以看做是一次大的活动，它由不同的小活动组成，这些小活动要么全部成功，要么全部失败；  </p>
</blockquote>
<h3 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h3><p>在计算机系统中，更多的是通过关系型数据库来控制事务，这是利用数据库本身的事务特性来实现的，因此叫做数据库事务；  </p>
<p>由于应用主要靠数据库来控制事务，而数据库通常和应用在同一个服务器，所以基于关系型数据库的事务又称为本地事务；  </p>
<p>回顾一下数据库事务的四大特性ACID：  </p>
<ul>
<li>A（Atomic）：  <ul>
<li>原子性；</li>
<li>构成事物的所有操作，要么都执行完成，要么全部不执行；</li>
<li>不可能出现部分成功部分失败的情况。  </li>
</ul>
</li>
<li>C（Consistency）：  <ul>
<li>一致性；</li>
<li>在事务执行前后，数据库的一致性约束没有被破坏。</li>
<li>比如：张三向李四转100元，转账前和转账后的数据是正确的状态这就叫做一致性；如果出现张三转出100元，李四账户没有增加100元这就出现了数据错误，就没有达到一致性。</li>
</ul>
</li>
<li>I（Isolation）：  <ul>
<li>隔离性；</li>
<li>数据库中的事务一般都是并发的；</li>
<li>隔离性是指并发的两个事务的执行互不干扰；</li>
<li>一个事务不能看到其他事务运行过程的中间状态。  </li>
<li>通过配置事务隔离级别可以避免脏读、重复读等问题。</li>
</ul>
</li>
<li>D（Durability）：  <ul>
<li>持久性；</li>
<li>事务完成之后，该事务对数据的更改会被持久化到数据库，且不会被回滚。  </li>
</ul>
</li>
</ul>
<p>数据库事务在实现时，会将一次事务涉及的所有操作全部纳入到一个不可分割的执行单元，该执行单元中的所有操作要么都成功，要么都失败，只要其中任一操作执行失败，都将导致整个事务的回滚。  </p>
<h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p>随着互联网的快速发展，软件系统由原来的单体应用转变为分布式应用。  </p>
<p>下图描述了单体应用向微服务的演变：  </p>
<p>分布式系统会把一个应用系统拆分为可独立部署的多个服务。  </p>
<p>因此需要服务与服务之间远程协作才能完成事务操作。  </p>
<p>这种分布式系统环境下由不同的服务之间通过网络远程协作完成事务称之为【分布式事务】。  </p>
<p>例如用户注册送积分事务、创建订单减库存事务、银行转账事务等都是分布式事务。  </p>
<p>用户服务当中要增加用户/积分服务当中要增加积分；<br>我突然想起来了，其实信666这个项目当中增加用户还有一个充值90的一个操作，其实也应该是一个事务；当时增加用户后我是直接发送了一个队列进行充值90元；通过这个mq发送消息队列，这个不也是属于远程协作吗？加入我在进行操作增加增加账户的时候进行发送了队列这个时候如果增加账户出事情了那么势必就需要分布式事务了；倘若我当时好像处理的是当用户账户增加成功了之后然后再去发送的队列呢？这个时候就应该不会出现了吧？哦哦，不对，倘若我消息队列当中的业务逻辑处理增加90元的这个操作失败了呢？那么这个时候增加账户的这个业务操作就应该需要进行回滚？这两个操作构成一个事务（原子性），且需要达到一致性，即账户增加需要成功，充值也需要成功；  </p>
<p>订单服务中需要加订单/库存服务当中需要减少库存；  </p>
<p>本地事务依赖数据库依赖数据库本身提供的事务特性来实现，因此以下逻辑可以控制本地事务：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span> <span class="keyword">transaction</span>;</span><br><span class="line">      //1. 本地数据库操作：张三减少金额</span><br><span class="line">      //2. 本地数据库操作：李四增加金额</span><br><span class="line"><span class="keyword">commit</span> <span class="keyword">transaction</span>;</span><br></pre></td></tr></table></figure>

<p>但是在分布式环境下，会变成这样：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span> <span class="keyword">transaction</span>;</span><br><span class="line">      //1. 本地数据库操作：张三减少金额</span><br><span class="line">      //2. 远程调用：让李四增加金额</span><br><span class="line"><span class="keyword">commit</span> <span class="keyword">transaction</span>;</span><br></pre></td></tr></table></figure>

<p>可以设想，当远程调用让李四增加金额成功了，由于网络问题远程调用并没有返回，此时本地事务提交事务就回滚了张三减少金额的操作，此时张三和李四的数据就不一致了。  </p>
<p>因此在分布式架构的基础上，传统数据库事务就无法使用了。  </p>
<p>张三和李四的账户不在一个数据库中甚至不在一个应用系统里，实现转账事务需要通过远程调用，由于网络问题就会导致分布式事务问题。  </p>
<p>三种事务异常情况：<br>（1）本地数据库操作：张三减少金额失败了；那么远程调用：让李四增加金额也需要失败；<br>（2）远程调用：让李四增加金额失败了；那么本地数据库操作：让张三减少金额也需要失败；<br>（3）本地数据库操作以及远程调用都成功了；但是远程调用由于网络问题，没有及时返回相应的结果，事务的时间超时了，那么这个时候会造成异常，也就是本地数据库操作就会发生回滚；而远程调用已经成功了；则事务不一致了此时；  </p>
<p>所以说分布式事务去使用本地事务的思想解决是行不通的；  </p>
<h3 id="分布式事务产生的场景"><a href="#分布式事务产生的场景" class="headerlink" title="分布式事务产生的场景"></a>分布式事务产生的场景</h3><ol>
<li>典型的场景就是微服务架构</li>
</ol>
<p>微服务之间通过远程调用完成事务操作。  </p>
<p>比如：订单微服务和库存微服务，下单的同时订单微服务请求库存微服务减少库存。  </p>
<p>简言之: 跨JVM进程产生分布式事务。  </p>
<ol start="2">
<li>单体系统访问多个数据库实例</li>
</ol>
<p>当单体系统需要访问多个数据库（实例）时就会产生分布式事务；  </p>
<p>比如：用户信息和订单信息分别在两个MySQL实例存储，用户管理系统删除用户信息，需要分别删除用户信息及用户的订单信息，由于数据分布在不同的数据实例，需要通过不同的数据库链接去操作数据，此时产生分布式事务。  </p>
<p>简言之：跨数据库实例产生分布式事务。  </p>
<ol start="3">
<li>多服务访问同一个数据库实例</li>
</ol>
<p>比如：订单微服务和库存微服务即使访问同一个数据库也会产生分布式事务，原因就是跨JVM进程，两个微服务持有了不同的数据库链接进行数据库操作，此时产生分布式事务。  </p>
<h2 id="分布式事务基础理论"><a href="#分布式事务基础理论" class="headerlink" title="分布式事务基础理论"></a>分布式事务基础理论</h2><p>通过前面的学习，了解到了分布式事务的基础概念。  </p>
<p>与本地事务不同的是，分布式系统之所以叫做分布式，是因为提供服务的各个节点分步在不同的机器上，相互之间通过网络交互，不能因为有一点网络问题就导致整个系统无法提供服务，网络因素成为了分布式事务的考量标准之一。  </p>
<p>因此，分布式事务需要更进一步的理论支持，接下来，学习一下分布式事务的CAP理论。  </p>
<p>在安静街分布式事务控制解决方案之前需要先学习一些基础理论，通过理论知识指导确定分布式事务控制的目标，从而帮助理解每个解决方案。  </p>
<h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p>进行分布式事务控制，需要控制到什么程度：  </p>
<p>（1）出现了网络问题之后，数据不一致；  </p>
<p>（2）出现了网络问题后，某一个服务不可用；  </p>
<h4 id="理解CAP"><a href="#理解CAP" class="headerlink" title="理解CAP"></a>理解CAP</h4><p>CAP是Consistency、Availability、Partition tolerance三个词语的缩写，分别表示一致性、可用性、分区容忍性。  </p>
<p>下边分别来解释：  </p>
<p>  为了方便对CAP理论的理解，结合电商系统中的一些业务场景来理解CAP。  </p>
<p>  如下图，是商品信息管理的执行流程：  </p>
<p>整体执行流程如下：  </p>
<ol>
<li>商品服务请求主数据库写入商品信息（添加商品、修改商品、删除商品）</li>
<li>主数据库向商品服务响应写入成功</li>
<li>商品服务请求从数据库读取商品信息</li>
</ol>
<p>数据库读写分离好处：分担数据库的压力；  </p>
<p>主数据库只管提供写入操作，从数据库只管提供查询操作；  </p>
<blockquote>
<p>C - Consistency</p>
</blockquote>
<p>一致性是指写入操作的读操作可以读取到最新的数据状态，当数据分步到多个结点上，从任意节点读取到的数据都是最新的状态。  </p>
<p>上图中，商品信息的读写要满足一致性就是要实现如下目标：  </p>
<p>（1）商品服务写入主数据库成功，则向从数据库查询新数据也成功；<br>（2）商品服务写入主数据库失败，则向从数据库查询新数据也失败；  </p>
<p>如何实现一致性？（此时的一致性则指的是主从数据库的数据一致性）  </p>
<p>（1）写入主数据库后要将数据同步到从数据库；<br>（2）写入主数据库后，在向从数据库同步期间要将数据库锁定，待同步完成后再释放锁，以免在新数据写入成功后，向从数据库查询到旧的数据。  </p>
<p>同步的方式：<br>（1）主从复制；  </p>
<p>分布式系统一致性的特定：  </p>
<p>（1）由于存在数据同步的过程，写操作的响应会有一定的延迟；<br>（2）为了保证数据一致性会对资源暂时锁定，待数据同步完成释放锁定资源。<br>（3）如果请求数据同步失败的结点则会返回错误信息，一定不会返回旧数据。  </p>
<blockquote>
<p>A - Availability</p>
</blockquote>
<p>可用性是指任何事物操作都可以得到响应结果，且不会出现响应超时或者响应错误。  </p>
<p>上图中，商品信息读取满足可用性就要实现如下目标：  </p>
<p>（1）从数据库接收到数据查询的请求则立即能够响应数据查询结果；<br>（2）从数据库不允许出现响应超时或者响应错误。<br>（3）即使数据还没有同步过来，从数据库也要返回查询的数据，哪怕是旧数据，如果连就数据库也没有则可以按照约定返回一个默认信息，但不能返回错误或者响应超时。  </p>
<p>分布式可用性的特定：  </p>
<p>（1）所有请求都有响应，且不会出现响应超时或者响应错误。  </p>
<blockquote>
<p>P - Partition tolerance</p>
</blockquote>
<p>通常分布式系统的各个结点部署在不同的子网，这就是网络分区。  </p>
<p>不可避免的会出现由于网络问题而导致结点之间的通信失败，此时仍然可以对外提供服务，这就叫分区容忍性。  </p>
<p>上图中，商品信息读写满足分区容忍性就是要实现如下目标：  </p>
<p>（1）主数据库向从数据库同步数据失败不影响读写操作。<br>（2）其中一个结点挂掉不影响另一个节点对外提供服务。  </p>
<p>如何实现分区容忍性？  </p>
<p>（1）尽量使用异步取代同步操作，例如使用异步方式将数据从主数据库同步到从数据，这样结点之间才能有效的实现松耦合。<br>（2）添加从数据库结点，其中一个结点挂掉其他从结点提供服务。  </p>
<p>分布式分区容忍的特点：  </p>
<p>（1）分区容忍性是分布式系统具备的基本能力。  </p>
<h4 id="CAP组合方式"><a href="#CAP组合方式" class="headerlink" title="CAP组合方式"></a>CAP组合方式</h4><ol>
<li>上边商品管理的例子是否同时具备CAP呢？  </li>
</ol>
<p><strong>在所有分布式事务场景中不会同时具备CAP三个特性，因为在具备了P的的前提下C和A是不能共存的。</strong>  </p>
<p>比如：  </p>
<p>下图满足了P即表示分区容忍：  </p>
<p>本图分区容忍的含义是：  </p>
<p>（1）主数据库通过网络向从数据库同步数据，可以认为主从数据库部署在不同的分区，通过网络进行交互;<br>（2）当主数据库和从数据库之间的网络出现问题不影响主数据和从数据库对外提供服务。<br>（3）其中一个结点挂掉不影响另一节点对外提供服务。  </p>
<p>如果要实现C则必须保证数据一致性，在数据同步的时候为防止向从数据库查询不一致的数据则需要从数据库数据锁定，待同步完成之后解锁，如果同步失败从数据库要返回错误信息或超时信息。  </p>
<p>如果要实现A则必须保证数据可用性，不管任何时候都可以向从数据库查询数据，则不会响应超时或者返回错误信息。  </p>
<p>通过分析发现在满足P的前提下C和A存在矛盾性。  </p>
<ol start="2">
<li>CAP有哪些组合方式呢？</li>
</ol>
<p>所以在生产中对分布式事务处理时要根据需求来确定满足CAP的哪两个方面。  </p>
<p>（1）AP：  </p>
<p>放弃一致性，追求分区容忍性和可用性。<br>这是很多分布式系统设计时的选择。  </p>
<p>例如：<br>上边的商品管理，完全可以实现AP，前提是只要用户可以接受所查询到的数据在一定时间内不是最新的即可。  </p>
<p>通常实现AP都会保证最终一致性，后面讲的BASE理论就是根据AP来实现的，一些业务场景，比如：订单退款、今日退款成功，明日账户到账，只要用户可以接受在一定时间内到账即可。  </p>
<p>我突然想到一个问题；就是现在深圳通或者是乘车码有个时候会出现延迟扣费的一个情况。是不是也是额，放弃数据一致性而追求可用性和分区容忍性？深圳通和乘车码肯定是一个分布式的一个系统架构，我觉得，因为这个使用的这个人群数量很高，且每一个人进行的交易也就是乘车的这个次数的交易量也很大，好了不说这个了。也就是说，它会有一个温馨提示：因扫码设备网络不稳定等原因，该笔乘车扣款有延迟。的这样一个信息。当没有及时进行扣款遵循可用性的原则应该是返回了一个默认或者是双方规定好的一个原则，没有去响应超时或者是这个响应错误信息，而是没有提示什么东西；然后事后去保证最终一致性，也就是进行了延迟扣款。我猜的。  </p>
<p>（2）CP：  </p>
<p>放弃可用性，追求一致性和分区容错性，zookeeper其实就是追求的强一致性，又比如说跨行转账，一次转账请求要求等待双方银行都完成整个事务才算完成。  </p>
<p>对对对，我之前我想的也是这个分区容忍性和容错好像啊。  </p>
<p>（3）CA：  </p>
<p>放弃分区容忍性，即不进行分区，不考虑由于网络不同或者结点挂掉的情况，则可以实现一致性和可用性，那么系统将不是一个标准的分布式系统，最常用的关系型数据库就满足了CA。  </p>
<p>上边的商品管理，如果要实现CA则架构如下：  </p>
<p>主数据库和从数据库中间不再进行数据同步，数据库可以响应每次的查询请求，通过事务隔离级别实现每个查询请求都可以返回最新的数据。  </p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>通过上面已经学习了CAP理论的相关知识，CAP是一个已经被证实的理论：  </p>
<p>一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容忍性（Partition tolerance）这三项中的两项。  </p>
<p>它可以作为进行架构设计、技术选型的考量标准。  </p>
<p>对于多数大型互联网应用的场景，结点众多、部署分散，而且现在的集群规模越来越大，所以节点故障、网络故障是常态，而且要保证服务可用性达到N个9（99.99…%），并且要达到良好的响应性能来提高用户体验，因此一般都会做出如下选择：保证P和A，舍弃C强一致，保证最终一致性。  </p>
<h3 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h3><ol>
<li>理解强一致性（CA、CP）和最终一致性（AP）</li>
</ol>
<p>CAP理论告诉我们一个分布式系统做多只能同时满足一致性（Consistency）、可用性（Availability）和分区容忍性（Partition tolerance）这三项中的两项。  </p>
<p>其中AP在实际应用中较多，AP即舍弃一致性，保证可用性和分区容忍性。  </p>
<p>但是在实际生产中很多场景都要实现一致性，比如前面举的例子，主数据库向从数据库同步数据，即使不要一致性，但是最终也要将数据库同步成功来保证数据一致，这种一致性和CAP中的一致性不同：<br>（1）CAP中的一致性要求在任何时间查询每个节点数据都必须一致，它强调的是强一致性；<br>（2）但是最终一致性是允许在一段时间内每个结点的数据不一致，但是经过一段时间每个结点的数据必须一致，它强调的是最终数据的一致性。  </p>
<ol start="2">
<li>BASE理论介绍</li>
</ol>
<p>BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的缩写。  </p>
<p>BASE理论是对CAP中AP的一个扩展，通过牺牲强一致性来获得可用性，当出现故障允许部分不可用但要保证核心功能可用，允许数据在一段时间内是不一致的，但最终达到一致状态。  </p>
<p>满足BASE理论的事务，称之为“<strong>柔性事务</strong>”。  </p>
<ul>
<li>基本可用（Basically Available）：分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用。如，电商网站交易付款时出现问题了，商品依然可以正常浏览。  </li>
<li>软状态（Soft state）：由于不要求强一致性，所以BASE允许系统中存在中间状态（也叫软状态），这个状态不影响系统可用性，如订单的“支付中”、“数据同步中”等状态，待数据最终一致后状态改为“成功”状态。  </li>
<li>最终一致性（Eventually consistent）：最终一致是指经过一段时间后，所有结点数据都将会达到一致，如订单的“支付中”状态，最终会变为“支付成功”或者“支付失败”，使订单状态与实际交易结果达成一致，但是需要一定时间的延迟、等待。  </li>
</ul>
<h2 id="分布式事务解决方案之2PC（两阶段提交）"><a href="#分布式事务解决方案之2PC（两阶段提交）" class="headerlink" title="分布式事务解决方案之2PC（两阶段提交）"></a>分布式事务解决方案之2PC（两阶段提交）</h2><p>前面已经学习了分布式事务的基础理论，以理论为基础，针对不同的分布式场景业界常见的解决方案有2PC、TCC、可靠消息最终一致性、最大努力通知这几种。  </p>
<h3 id="什么是2PC"><a href="#什么是2PC" class="headerlink" title="什么是2PC"></a>什么是2PC</h3><p>2PC即两阶段提交协议，是将整个事务流程分为两个阶段，准备阶段（Prepare phase）、提交阶段（commit phase），2是指两个阶段，P是指准备阶段，C是指提交阶段。  </p>
<p>举例： 张三和李四好久不见，老友约起聚餐，饭店老板要求先买单，才能出票。  </p>
<p>这时张三和李四分别抱怨近况不如意，囊中羞涩，都不愿意请客，这时只能AA。  </p>
<p>只有张三和李四都付款，老板才能出票安排就餐。  </p>
<p>但是由于张三和李四都是铁公鸡，形成了尴尬的一幕：  </p>
<p>准备阶段：老板要求张三付款，张三付款。老板要求李四付款，李四付款。  </p>
<p>提交阶段：老板出票，两人拿票纷纷落座就餐。  </p>
<p>例子中形成了一个事务，若张三或者李四其中一个人拒绝付款，或者钱不够，店家老板都不会给出票，并且会把已收款退回。  </p>
<p>整个失误过程由事务管理器和参与者完成，店家老板就是事务管理器，张三、李四就是事务参与者，事务管理器负责决策整个分布式事务的提交和回滚，事务参与者负责自己本地事务的提交和回滚。  </p>
<p>在计算机中部分关系数据库如Oracle、MySQL支持两阶段提交协议，如下图：  </p>
<p>（1）准备阶段（Prepare phase）：事务管理器给每个参与者发送Prepare消息，每个数据库参与者在本地执行事务，并写本地的Undo/Redo日志，此时事务没有提交。  </p>
<p>（Undo日志是记录修改前的数据，用于数据库回滚；Redo日志是记录修改后的数据，用于提交事务后写入数据库文件）  </p>
<p>（2）提交阶段（Commit phase）：如果事务管理器受到了参与者的执行失败或者超时消息时，直接给每个参与者发送回滚（Rollback）消息；否则，发送提交（Commit）消息；参与者根据事务管理器的指令执行提交或者回滚操作，并释放事务处理过程中使用的锁资源。注意：必须在最后阶段释放锁资源。  </p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="XA方案"><a href="#XA方案" class="headerlink" title="XA方案"></a>XA方案</h4><p>2PC的传统方案是在数据库层面实现的。  </p>
<p>如Oracle、MySQL都支持2PC协议，为了统一标准减少行业内不比要的对接成本，需要制定标准化的处理模型以及接口标准，国际开发标准组织Open Group定义了分布式事务处理模型DTP（Distributed Transaction Processing Reference Model）。  </p>
<p>这套模型就是为了规范数据库支持2PC协议的整个实现的过程。  </p>
<p>为了更明确XA方案的内容，下面<strong>新用户注册送积分</strong>为例来说明：  </p>
<p>执行流程如下：  </p>
<p>（1）应用程序（AP）持有用户库和积分库两个数据源。<br>（2）准备阶段：应用程序（AP）通过TM通知用户库RM（Resource Manager）新增用户，同时通知积分库RM为该用户新增积分，RM此时并未提交事务，此时用户和积分资源锁定。<br>（3）TM（事务管理器Transaction Manager）收到执行回复，只要有一方失败则分别向其他RM发起回滚事务，回滚完毕，资源锁释放。<br>（4）TM收到执行回复，全部成功，此时向所有RM发起提交事务，提交完毕，资源锁释放。  </p>
<p>DTP模型定义如下角色：  </p>
<ul>
<li><strong>AP</strong>（Application Program）：即应用程序，可以理解为使用DTP分布式事务的程序。  </li>
<li><strong>RM</strong>（Resource Manager）：即资源管理器，可以理解为事务的参与者，一般情况下是指一个数据库实例，通过资源管理器对该数据库进行控制，资源管理器控制着分支事务。  </li>
<li><strong>TM</strong>（Transaction Manager）：事务管理器，负责协调和管理事务，事务管理器控制着全局事务，管理事务生命周期，并协调各个RM。<strong>全局事务</strong>是指分布式事务处理环境中，需要操作多个数据库共同完成一个工作，这个工作即是一个全局事务。  </li>
<li>DTP模型定义TM和RM之间通讯的接口规范叫<strong>XA</strong>，简单理解为数据库提供的2PC接口协议，<strong>基于数据库的XA协议来实现2PC又称为XA方案</strong>。</li>
<li>以上三个角色之间的交互方式如下：<br>（1）TM向AP提供应用程序编程接口，AP通过TM提交以及回滚事务。<br>（2）TM消息中间件通过XA接口来通知RM数据库事务的开始、结束以及提交、回滚等。  </li>
</ul>
<p>总结：  </p>
<p>整个2PC的事务流程涉及到三个流程AP、RM、TM。<br>AP指的是2PC分布式事务的应用程序；<br>RM指的是资源管理器；它控制着分支事务；<br>TM指的是事务管理器，它控制着整个全局事务；  </p>
<p>（1）在<strong>准备阶段</strong>RM执行实际的业务操作，但是不提交事务，自愿锁定；<br>（2）在<strong>提交阶段</strong>TM会接受RM在准备阶段的执行回复，只要有任意一个RM执行失败，TM会通知所有RM执行回滚操作；否则，TM将会通知所有的RM提交该事务，提交阶段结束资源释放锁；  </p>
<p>XA方案的问题：<br>（1）需要本地数据库支持XA协议。<br>（2）资源锁需要等到两个阶段结束才释放，性能较差。  </p>
<h4 id="Seata方案"><a href="#Seata方案" class="headerlink" title="Seata方案"></a>Seata方案</h4><p>Seata是由阿里中间件团队发起的开源项目Fescar，后更名为Seata，它是一个开源的分布式事务框架。  </p>
<p>传统2PC的问题在Seata中得到了解决，它通过对本地关系数据库的分支事务的协调来驱动完成全局事务，是工作在应用层的中间件。  </p>
<p>（Seata不要求关系数据库是否遵从2PC协议）  </p>
<p>主要优点是性能较好，且不长时间占用连接资源，它以高效并且对业务零侵入的方式解决微服务场景下面临的分布式事务问题，他目前提供AT模式（即2PC）以及TCC模式的分布式事务解决方案。  </p>
<p><strong>Seata的设计思想如下：</strong>  </p>
<p>Seata的设计目标其一是对业务目标无侵入，因此从业务无侵入的2PC方案着手，在<strong>传统2PC</strong>的基础上演进，并解决2PC方案面临的问题。  </p>
<p>Seata把一个分布式事务理解成一个包含了若干<strong>分支事务</strong>的<strong>全局事务</strong>。  </p>
<p>全局事务的职责是协调其下管辖的分支事务达成一致，要么一起成功，要么一起失败回滚。  </p>
<p>此外，通常分支事务本身就是一个关系数据库的本地事务，下图是全局事务与分支事务的关系图：  </p>
<p>与传统的2PC的模型类似，Seata定义了3个组件来协议分布式事务的处理过程：  </p>
<ul>
<li>Transaction Coordinator（TC）：事务协调器，它是独立的中间件，需要独立部署运行，它维护全局事务的运行状态，接受TM指令发起全局事务的提交与回滚，负责与RM通信协调各个分支事务的提交或者回滚。  </li>
<li>Transaction Manager（TM）：事务管理器，TM需要嵌入应用程序中工作，它负责开启一个全局事务，并最终向TC发起全局提交护着全局回滚的指令。  </li>
<li>Resource Manager（RM）：控制分支事务，负责分支注册、状态汇报，并接收事务协调器TC的指令，驱动分支（本地）事务的提交和回滚。  </li>
</ul>
<p>还拿<strong>新用户注册送积分</strong>举例Seata的分布式事务过程：  </p>
<p>具体的执行流程如下：  </p>
<p>（1）用户服务的TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID；<br>（2）用户服务的RM向TC注册分支事务，该分支事务在用户服务执行新增用户逻辑（该事务提交，即第一个阶段当中就提交了事务），并将其纳入XID对应全局事务的管辖。<br>（3）用户服务执行分支事务，向用户表插入一条记录。<br>（4）逻辑执行到远程调用 积分服务 时（XID在微服务调用链路的上下文中传播）。积分服务的RM向TC注册分支事务，该分支事务执行增加积分的逻辑，并将其纳入到XID对应全局事务的管辖。<br>（5）积分服务执行分支事务，向积分记录表插入一条记录，执行完毕后（完成分支事务，即已经提交分支事务，释放锁），返回用户服务。（如当其他的分支事务后期没有成功，导致需要回滚，即将向积分记录表当中插入的该条记录进行删除即可）<br>（6）用户服务分支事务执行完毕。<br>（7）TM向TC发起针对XID的全局提交或者回滚决议。<br>（8）TC调度XID下管辖的全部分支事务完成提交或者回滚请求。  </p>
<p><strong>Seata实现2PC与传统2PC的差别：</strong>  </p>
<p>架构层次方面，<strong>传统2PC</strong> 方案的RM实际上就是在数据库底层，RM本质上就是数据库自身，通过XA协议实现，而Seata的RM是以jar包的形式作为中间件层部署在应用程序这一侧的。  </p>
<p>两阶段提交方面，<strong>传统2PC</strong> 无论第二阶段的决议是commit还是rollback，事务性资源的锁都要保持到Phase2完成才释放。  </p>
<p>而Seata的做法是在Phase1就将本地事务提交，这样就可以省去Phase2持锁的时间，整体提高效率。  </p>
<h3 id="Seata实现2PC事务"><a href="#Seata实现2PC事务" class="headerlink" title="Seata实现2PC事务"></a>Seata实现2PC事务</h3><h4 id="业务说明"><a href="#业务说明" class="headerlink" title="业务说明"></a>业务说明</h4><p>本示例通过Seata中间件实现分布式事务，模拟三个账户的转账交易过程。  </p>
<p>两个账户在两个个不同的银行（张三在bank1、李四在bank2），bank1和bank2是两个微服务。  </p>
<p>交易过程是：张三给李四转账指定金额。  </p>
<p>上述交易步骤，要么一起成功，要么一起失败，必须是一个整体性的事务。  </p>
<h4 id="本示例程序组成部分如下"><a href="#本示例程序组成部分如下" class="headerlink" title="本示例程序组成部分如下"></a>本示例程序组成部分如下</h4><p>数据库：MySQL-5.7.25（包括bank1和bank2两个数据库）<br>JDK：64位jdk1.8.0_201<br>微服务框架：spring-boot-2.1.3、spring-cloud-Greenwich.RELEASE<br>seata客户端（RM、TM）：spring-cloud-alibaba-seata-2.1.0.RELEASE<br>seata服务端（TC）：seata-server-0.7.1<br>微服务以及数据库的关系：<br>  dtx/dtx-seata-demo/seata-demo-bank1 银行1，操作张三账户，连接数据库1<br>  dtx/dtx-seata-demo/seata-demo-bank2 银行2，操作李四账户，连接数据库2<br>服务注册中心：dtx/discover-server  </p>
<p>本示例程序技术架构如下：  </p>
<p>交互流程如下:  </p>
<ol>
<li>请求bank1进行转账，传入转账金额。  </li>
<li>bank1减少转账金额，调用bank2，传入转账金额。  </li>
</ol>
<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><h4 id="启动TC事务协调器"><a href="#启动TC事务协调器" class="headerlink" title="启动TC事务协调器"></a>启动TC事务协调器</h4><p>（1）下载Seata服务器<br>（2）解压并启动  </p>
<p>运行模式（file，nacos，eureka，redis，zk，consul，etcd3，sofa；file模式，因为TC，Seata-server是事务协调器，记录各个分支事务的执行情况，所以数据以文本的方式写到了文件/本地的一个目录当中，还有数据库的方式就将写到数据库当中还支持其他方式）  </p>
<h4 id="discover-server"><a href="#discover-server" class="headerlink" title="discover-server"></a>discover-server</h4><h4 id="导入案例工程dtx-seata-demo"><a href="#导入案例工程dtx-seata-demo" class="headerlink" title="导入案例工程dtx-seata-demo"></a>导入案例工程dtx-seata-demo</h4><h4 id="启动TC事务协调器-1"><a href="#启动TC事务协调器-1" class="headerlink" title="启动TC事务协调器"></a>启动TC事务协调器</h4><h4 id="Seata执行流程"><a href="#Seata执行流程" class="headerlink" title="Seata执行流程"></a>Seata执行流程</h4><ol>
<li><p>正常提交流程  </p>
</li>
<li><p>回滚流程</p>
</li>
</ol>
<p>要点说明：  </p>
<ol>
<li>每个RM使用DataSourceProxy连接数据库，其目的是使用ConnectionProxy，使用数据源和数据连接代理的目的就是在第一阶段将undo_log和业务数据放在一个本地事务提交，这样就保存了只要有业务操作就一定有undo_log。  </li>
<li>在第一阶段undo_log中存放了数据修改前和修改后的数据，为事务回滚做好准备，所以第一阶段完成就已经将分支事务提交，也就释放了锁资源。  </li>
<li>TM开启全局事务开始，将XID全局事务id放在事务上下文中，通过feign调用也将XID传入下游分支事务，每个分支事务将自己的Branch ID分支事务与XID关联。</li>
<li>第二阶段全局事务提交，TC会通知各个分支参与者提交分支事务，在第一阶段就已经提交了分支事务，这里各个参与者只需要删除undo_log即可，并且可以异步执行，第二阶段很快就可以完成。</li>
<li>第二阶段全局事务回滚，TC会通知各个分之参与者回滚事务，通过XID与Branch ID找到相应的回滚日志，通过回滚日志生成反向的SQL并执行，以完成分支事务回滚到之前的状态，如果回滚失败则会重试回滚操作。</li>
</ol>
<h4 id="dtx-seata-demo-bank1"><a href="#dtx-seata-demo-bank1" class="headerlink" title="dtx-seata-demo-bank1"></a>dtx-seata-demo-bank1</h4><p>为什么要有注册中心；因为张三要调用李四的微服务，要进行转账，所以让微服务都注册到注册中心；实现远程的调用；这个注册中心用的是spring-cloud的seata；  </p>
<h4 id="dtx-seata-demo-bank2"><a href="#dtx-seata-demo-bank2" class="headerlink" title="dtx-seata-demo-bank2"></a>dtx-seata-demo-bank2</h4><h4 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h4><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本节讲解了传统2PC（基于数据库XA协议）和Seata实现2PC的两种2PC方案，由于Seata的零侵入并解决了传统2PC长期锁资源的问题，所以推荐采用Seata实现2PC。  </p>
<p>Seata实现2PC要点：  </p>
<ol>
<li>全局事务开始使用@GolobalTransaction标识；</li>
<li>每个本地事务方案仍然使用@Transactional标识；</li>
<li>每个数据都需要创建undo_log表，此表是Seata保证本地事务一致性的关键；  </li>
</ol>
<h2 id="分布式事务解决方案之TCC"><a href="#分布式事务解决方案之TCC" class="headerlink" title="分布式事务解决方案之TCC"></a>分布式事务解决方案之TCC</h2><h3 id="什么是TCC事务"><a href="#什么是TCC事务" class="headerlink" title="什么是TCC事务"></a>什么是TCC事务</h3><p>2PC：两阶段提交协议（一个是准备阶段一个是提交阶段）；有两种处理方式（一种是XA方案一种是阿里的Seata方案）；协议本身是一致的也就是都存在两个阶段；  </p>
<p>2PC和TCC都是用来执行控制分布式事务的；  </p>
<p>TCC是Try、Confirm、Cancel三个词语的缩写；  </p>
<p>TCC要求每个分支事务实现三个操作：预处理Try、确认Confirm、撤销Cancel。  </p>
<p>Try操作做业务检查以及资源预留，Confirm做业务确认操作，Cancel实现一个与Try相反的操作即回滚操作。  </p>
<p>TM首先发起所有的分支事务的Try操作，任何一个事务的Try操作执行失败，TM将会发起所有分支事务的Cancel操作；若Try操作全部成功，TM将会发起所有分支事务的Confirm操作，其中Confirm/Cancel操作若执行失败，TM会进行重试。  </p>
<p>TCC分为三个阶段：  </p>
<ol>
<li><strong>Try</strong>阶段是做业务检查（一致性）以及资源预留（隔离），此阶段仅是一个初步操作，它和后续的Confirm一起才能真正构成一个完整的业务逻辑。  </li>
<li><strong>Confirm</strong>阶段是做确认提交，Try阶段所有分支事务执行成功后开始执行Confirm。通常情况下，采用TCC则认为Confirm阶段是不会出错的。即：只要Try成功，Confirm一定成功。若Confirm阶段真的出错了，需要引入重试机制或者人工处理。  </li>
<li><strong>Cancel</strong>阶段是在业务执行错误需要回滚的状态下执行分支事务的业务徐晓，预留资源释放。通常情况下，采用TCC则认为Cancel阶段也是一定成功的。若Cancel阶段真的出错了，需要引入重试机制或者人工处理。  </li>
<li>TM事务管理器  </li>
</ol>
<p>TM事务管理器可以实现独立的服务，也可以让<strong>全局事务发起方</strong>充当TM的角色，TM独立出来是为了成为公用组件，是为了考虑系统结构和软件复用。  </p>
<p>TM在发起全局事务时生成全局事务记录，全局事务ID贯穿整个分布式事务调用链条。用来记录事务上下文，追踪和记录状态，由于Confirm和Cancel失败需要进行重试，因此需要实现为幂等，幂等性是指同一个操作无论请求多少次，其结果都相同。  </p>
<h3 id="TCC解决方案"><a href="#TCC解决方案" class="headerlink" title="TCC解决方案"></a>TCC解决方案</h3><p>转账是一种业务，注册送积分也是一种业务，抛开业务的话，其实TCC本身的技术协议是一致的，所以在市面上存在有很多的框架来处理TCC的事务。  </p>
<p>目前市面上的TCC框架众多比如下面这几种：  </p>
<table>
  <thead>
    <tr>
      <th>框架名称</th>
      <th>GitHub地址</th>
      <th>star数量</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>tcc-transaction(类似Seata也需要单独进行部署相关的seata server)</td>
      <td>https://xxxxx</td>
      <td>xxxxx</td>
    </tr>
    <tr>
      <td>Hmily</td>
      <td>https://xxxxx</td>
      <td>xxxxx</td>
    </tr>
    <tr>
      <td>ByteTCC</td>
      <td>https://xxxxx</td>
      <td>xxxxx</td>
    </tr>
    <tr>
      <td>EasyTransaction</td>
      <td>https://xxxxx</td>
      <td>xxxxx</td>
    </tr>
  </tbody>
</table>

<p>上一节所讲的Seata也支持TCC，但是Seata的TCC模式对于Spring Cloud并没有提供支持。<br>目标是理解TCC原理以及事务协调运作的过程，因此更倾向于轻量级易于理解的框架，因此最终确定了Hmily。  </p>
<p>Hmily是一个功性能分布式事务TCC开源框架。  </p>
<p>基于Java语言来开发（JDK1.8），支持Dubbo、Spring Cloud等RPC框架进行分布式事务。（且支持版本较新）  </p>
<p>它目前支持一下特性:  </p>
<ul>
<li>支持嵌套事务（Nested transaction support）；</li>
<li>采用disruptor框架进行事务日志的异步读写，与RPC框架的性能毫无差别；</li>
<li>支持SpringBoot-starter项目启动，使用简单；  </li>
<li>RPC框架支持：dubbo、motan、springcloud</li>
<li>本地事务存储支持：redis、mongodb、zookeeper、file、mysql；</li>
<li>采用Aspect Aop切面思想与Spring无缝集成，天然支持集群。  </li>
<li>RPC事务恢复，超时异常恢复等；</li>
</ul>
<p>Hmily利用AOP对参与分布式事务的本地方法与远程方法进行拦截处理，通过多方拦截，事务参与者能透明的调用到另一方的Try、Confirm、Cancel方法；传递事务上下文；并记录事务日志；酌情进行补偿，重试等；  </p>
<p>Hmily不需要事务协调服务，但需要提供一个数据库（mysql/mongodb/zookeeper/redis/file）来进行日志存储。  </p>
<p>Hmily实现的TCC服务于普通的服务一样，只需要暴露一个接口，也就是它的Try业务。<br>Confirm/Cancel业务逻辑，只是因为全局事务提交/回滚的需要才提供的，因此Confirm/Cancel业务只需要被HmilyTCC事务框架发现即可，不需要被调用它的其他业务服务所感知。  </p>
<p><strong>TCC需要注意三种异常处理分别是空回滚、幂等、悬挂；</strong>  </p>
<p><strong>空回滚：</strong>  </p>
<p>在没有调用TCC资源Try方法的情况下，调用了二阶段的Cancel方法，Cancel方法需要识别出这是一个空回滚，然后直接返回成功；  </p>
<p>出现原因是：当一个分支事务所在服务宕机或者是网络异常，分支事务调用记录为失败；这个时候其实是没有执行Try阶段，当故障恢复后，分布式事务进行回滚则会调用二阶段的Cancel方法，从而形成空回滚。  </p>
<p>解决思路是关键就是要识别出这个空回滚。  </p>
<p>思路很简单就是需要知道一阶段是否执行，如果执行了，那么就是正常回滚；如果没有执行，那么就是空回滚；  </p>
<p>前面已经说过:TM在发起全局事务时生成全局事务记录，全局事务ID贯穿整个分布式事务调用链条。在额外增加一张分支事务记录表，其中有全局事务ID和分支事务ID，第一阶段Try方法里会插入一条记录，表示一阶段执行了。<br>Cancel接口里读取该记录，如果该记录存在，则正常回滚；如果该记录不存在，则是空回滚。  </p>
<p><strong>幂等：</strong>  </p>
<p>通过前面的介绍已经了解到，为了保证TCC二阶段提交重试机制不会引发数据不一致，要求TCC阶段Try、Confirm、Cancel接口保证幂等，这样不会重复使用或者释放资源。  </p>
<p>如果幂等控制没有做好，很有可能导致数据不一致等严重问题；  </p>
<p>解决思路在上述“分支事务记录”中增加执行状态，每次执行前都查询该状态。  </p>
<p><strong>悬挂：</strong>  </p>
<p>悬挂就是对一个分布式事务，其二阶段Cancel接口比Try接口先执行。  </p>
<p>出现原因是在RPC调用分支事务Try时，先注册分支事务，再调用RPC调用；  </p>
<p>如果此时RPC调用的网络发生拥堵，通常RPC调用是有超时时间的，RPC超时以后，TM就会通知RM回滚该分布式事务，可能回滚完成后，RPC请求才到达参与者真正执行，而一个Try方法预留的业务资源，只有该分布式事务才能使用，该分布式事务第一阶段预留的业务资源就再也没有人能够处理了。对于这种情况，称之为悬挂。即业务资源预留后没有办法继续处理。  </p>
<p>解决思路时候如果二阶段执行完成，那一阶段就不能再继续执行。<br>在执行一阶段事务时判断在全局事务下，“分支事务记录”表中是否已经有二阶段事务记录，如果有则不执行Try；  </p>
<p><strong>举例，场景为A转账30元给B，A和B账户在不同的服务。</strong><br><strong>方案一：</strong><br>账户A  </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    检查余额是否够<span class="number">30</span>元；</span><br><span class="line">    扣减<span class="number">30</span>元；</span><br><span class="line">confirm：</span><br><span class="line">    空；</span><br><span class="line">cancel：</span><br><span class="line">    增加<span class="number">30</span>元；</span><br></pre></td></tr></table></figure>

<p>账户B  </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    增加<span class="number">30</span>元</span><br><span class="line">confirm：</span><br><span class="line">    空</span><br><span class="line">cancel：</span><br><span class="line">    减少<span class="number">30</span>元</span><br></pre></td></tr></table></figure>

<p><strong>方案1说明：</strong>  </p>
<p>（1）账户A，这里的余额就是所谓的业务资源，按照前面提到的原则：<br>在第一阶段需要检查并预留业务资源；<br>因此，在扣钱TCC资源的Try接口里先检查A账户余额是否足够，如果足够则扣除30元。<br>Confirm接口表示正式提交，由于业务资源已经在Try接口里扣除掉了，那么在第二阶段的Confirm接口里可以什么都不用做。<br>Cancel接口的执行表示整个事务的回滚，账户A回滚则需要把Try接口里扣除掉的30元还给账户A。<br>（2）账户B，在第一阶段Try接口里实现给账户B加钱；<br>Cancel接口的执行表示整个事务的回滚；<br>账户B回滚则需要把Try接口里加的30元再减去；  </p>
<p><strong>方案1的问题分析：</strong>  </p>
<p>（1）如果账户A的try没有执行；在Cancel则就多加了30元（需要空回滚判断）；<br>（2）由于Try、Confirm、Cancel都是由单独的线程去调用，且会出现重复调用，所以都需要实现幂等（幂等）；<br>（3）账户B在try中增加了30元，当Try执行完成后可能会被其他线程给消费了；<br>（4）如果账户B的Try没有执行在Cancel则就多减了30元（需要空回滚判断）；  </p>
<p><strong>问题解决：</strong>  </p>
<p>（1）账户A的Cancel方法需要判断Try方法是否执行，正常执行Try后方可执行Cancel；避免空回滚的发生；<br>（2）Try、Cancel、Confirm方法都需要进行实现幂等；<br>（3）账户B在Try中不允许更新账户金额，在Confirm中更新账户金额；以免提前新增的30元被其他的业务逻辑给消费掉；<br>（4）账户B的Cancel方法需要判断Try方法是否执行，正常执行Try后方可执行Cancel；  </p>
<p><strong>优化方案：</strong>  </p>
<p>账户A  </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">try</span>幂等校验</span><br><span class="line">    <span class="keyword">try</span>悬挂处理（即Confirm/Cancel二阶段当中有一个执行了，那么Try阶段则不进行执行）</span><br><span class="line">    检查余额是否够<span class="number">30</span>元</span><br><span class="line">    扣减<span class="number">30</span>元</span><br><span class="line">confirm:</span><br><span class="line">    空</span><br><span class="line">cancel:</span><br><span class="line">    cancel幂等校验</span><br><span class="line">    cancel空回滚处理（如果Try没有执行，那么Cancel就不进行执行）</span><br><span class="line">    增加可用余额<span class="number">30</span>元</span><br></pre></td></tr></table></figure>

<p>账户B  </p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    空</span><br><span class="line"><span class="keyword">confirm</span>:</span><br><span class="line">    <span class="keyword">confirm</span>幂等校验</span><br><span class="line">    正式增加<span class="number">30</span>元</span><br><span class="line">cancel：</span><br><span class="line">    空</span><br></pre></td></tr></table></figure>

<h3 id="Hmily实现TCC事务"><a href="#Hmily实现TCC事务" class="headerlink" title="Hmily实现TCC事务"></a>Hmily实现TCC事务</h3><h4 id="业务说明-1"><a href="#业务说明-1" class="headerlink" title="业务说明"></a>业务说明</h4><p>本实例通过Hmily实现TCC分布式事务，模拟两个账户的转账交易过程。  </p>
<p>两个账户分别在不同的银行（张三在bank1、李四在bank2），bank1、bank2是两个微服务。<br>交易过程是：张三给李四转账指定金额；<br>上述交易步骤，要么一起成功，要么一起失败，必须是一个整体性的事务；  </p>
<h4 id="程序组成部分"><a href="#程序组成部分" class="headerlink" title="程序组成部分"></a>程序组成部分</h4><p>数据库：MySQL-5.7.25（包括bank1和bank2两个数据库）<br>JDK：64位jdk1.8.0_201<br>微服务框架：spring-boot-2.1.3、spring-cloud-Greenwich.RELEASE<br>Hmily：hmily-springcloud.2.0.4-RELEASE<br>seata客户端（RM、TM）：spring-cloud-alibaba-seata-2.1.0.RELEASE<br>seata服务端（TC）：seata-server-0.7.1<br>微服务以及数据库的关系：<br>  dtx/dtx-seata-demo/seata-demo-bank1 银行1，操作张三账户，连接数据库1<br>  dtx/dtx-seata-demo/seata-demo-bank2 银行2，操作李四账户，连接数据库2<br>服务注册中心：dtx/discover-server  </p>
<h4 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>创建hmily数据库，用于存储hmily框架记录的数据；  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="string">'hmily'</span> <span class="built_in">character</span> <span class="keyword">set</span> <span class="string">'utf8'</span> <span class="keyword">collate</span> <span class="string">'utf8_general_ci'</span>;</span><br></pre></td></tr></table></figure>

<h4 id="discover-server-1"><a href="#discover-server-1" class="headerlink" title="discover-server"></a>discover-server</h4><h4 id="导入案例工程dtx-tcc-demo"><a href="#导入案例工程dtx-tcc-demo" class="headerlink" title="导入案例工程dtx-tcc-demo"></a>导入案例工程dtx-tcc-demo</h4><h4 id="dtx-tcc-demo-bank1"><a href="#dtx-tcc-demo-bank1" class="headerlink" title="dtx-tcc-demo-bank1"></a>dtx-tcc-demo-bank1</h4><h4 id="dtx-tcc-demo-bank2"><a href="#dtx-tcc-demo-bank2" class="headerlink" title="dtx-tcc-demo-bank2"></a>dtx-tcc-demo-bank2</h4><h4 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h4><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>如果拿TCC事务的处理流程与2PC两阶段提交做比较，2PC通常是在跨库的DB层面，而TCC则在应用层面的处理，需要通过业务逻辑来实现，这种分布式事务的实现的优势在于，可以让<strong>应用自己定义数据操作的粒度，使得降低锁冲突，提高吞吐量称为可能</strong>。  </p>
<p>而不足之处则在于对应用的侵入性非常强，业务逻辑处理的每个分支都需要实现try、confirm、cancel三个操作。<br>此外，其实实现难度也比较大，需要按照网络状态、系统故障等不同的失败原因实现不同的回滚策略。  </p>
<h2 id="分布式事务解决方案之可靠消息最终一致性"><a href="#分布式事务解决方案之可靠消息最终一致性" class="headerlink" title="分布式事务解决方案之可靠消息最终一致性"></a>分布式事务解决方案之可靠消息最终一致性</h2><h3 id="什么是可靠消息最终一致性事务"><a href="#什么是可靠消息最终一致性事务" class="headerlink" title="什么是可靠消息最终一致性事务"></a>什么是可靠消息最终一致性事务</h3><p>可靠消息最终一致性方案是指：当事务发起方执行完成本地事务后并发出一条消息，事务参与者（消息消费者）一定能够接收消息并处理事务成功；此方案强调的是只要消息发给事务参与方，最终事务要达到一致。  </p>
<p>此方案是利用消息中间件来完成。如下图：  </p>
<p>事务发起方（消息生产方）将消息发给消息中间件，事务参与方从消息中间件当中接收消息，事务发起方和消息中间件之间，事务参与方（消息消费方）和消息中间件之间都是通过网络通讯，由于网络通讯的不确定性会导致分布式事务问题。  </p>
<p>因此可靠消息最终一致性要解决一下几个问题：  </p>
<ol>
<li><strong>本地事务与消息发送的原子性问题</strong>  </li>
</ol>
<p>事务的发起方到事务的参与方，这个消息必须可靠；也就是张三必须将消息发送到李四；李四必须能够接受到这个消息；并且这个可靠消息最终一致性最终还要强调一点的是最终一致性；即张三在把这个钱扣掉之后，他会要保证这个消息一定会要发给李四，那么李四接收到这个消息之后就可以进行处理加钱的这个业务逻辑处理；在这过程当中如果李四加钱失败怎么办，张三能够回滚事务吗？不能回滚。所以这个叫做可靠消息最终一致性分成两部分进行解读；一部分是可靠消息；一部分是最终一致性；可靠消息是指消息从张三传给李四，从事务的发起方传给事务的参与方，这个过程需要是可靠的；那么最终一致性是：张三，即事务的发起方，执行完本地事务；并且张三一定保证消息发给李四；那最终李四就需要保证最终一致性即无论如何都要将钱加上；这也就是所说的可靠消息最终一致性；  </p>
<p>本地事务与消息发送的原子性问题即：事务发起方在本地事务执行成功后消息必须发出去，否则就丢弃消息。<br>即实现本地事务和消息发送的原子性，要么都成功，要么都失败；<br>本地事务与消息发送的原子性问题是实现可靠消息最终一致性方案的关键问题：  </p>
<p>先来尝试下这种操作，先发送消息，再操作数据库:  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span> <span class="keyword">transaction</span>:</span><br><span class="line">        //<span class="number">1.</span>发送MQ</span><br><span class="line">        //<span class="number">2.</span>数据库操作</span><br><span class="line"><span class="keyword">commit</span> <span class="keyword">transaction</span>;</span><br></pre></td></tr></table></figure>

<p>这种情况下无法保证数据库操作与发送消息的一致性，因为可能发送消息成功，数据库操作失败；  </p>
<p>你立马想到第二种方案，先进行数据库操作，再发送消息：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span> <span class="keyword">transaction</span>:</span><br><span class="line">        //<span class="number">1.</span>数据库操作</span><br><span class="line">        //<span class="number">2.</span>发送MQ</span><br><span class="line"><span class="keyword">commit</span> <span class="keyword">transaction</span>;</span><br></pre></td></tr></table></figure>

<p>这种情况下貌似没有问题，如果发送MQ消息失败，就会抛出异常，导致数据库事务回滚。<br>但如果是超时异常，数据库回滚，但是MQ已经正常发送出去了，同样就会导致不一致。  </p>
<ol start="2">
<li><strong>事务参与方接受消息的可靠性</strong></li>
</ol>
<p>事务参与方必须能够从消息队列接收到消息，如果接收消息失败可以重复接收消息。  </p>
<ol start="3">
<li><strong>消息重复消费的问题</strong>  </li>
</ol>
<p>由于网络的存在，若某一个消费结点超时但是消费成功，此时消息中间件会重复投递此消息，就导致了消息的重复消费。<br>要解决消息重复消费的问题就要实现事务参与方的方法幂等性。  </p>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>上节讨论了可靠消息最终一致性事务方案需要解决的问题，本节讨论具体的解决方案；  </p>
<h4 id="本地消息表方案"><a href="#本地消息表方案" class="headerlink" title="本地消息表方案"></a>本地消息表方案</h4><p>本地消息表这个方案最初是eBay提出的，此方案的核心是通过本地事务保证数据业务操作和消息的一致性，然后通过定时任务将消息发送至消息中间件，待确认消息发送给消费成功再将消息删除；  </p>
<p>下面以注册送积分为例来说明：  </p>
<p>下例共有两个微服务交互，用户服务和积分服务，用户服务负责添加用户，积分服务负责增加积分。  </p>
<p>交互流程如下:  </p>
<ol>
<li><strong>用户注册</strong>  </li>
</ol>
<p>用户服务在本地新增用户和增加“积分消息日志”。（用户表和消息表通过本地事务保证一致）  </p>
<p>下边是伪代码：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span> <span class="keyword">transaction</span>;</span><br><span class="line">      //1.新增用户</span><br><span class="line">      //2.存储积分消息日志</span><br><span class="line"><span class="keyword">commit</span> <span class="keyword">transaction</span>;</span><br></pre></td></tr></table></figure>

<p>这种情况下，本地数据库操作与存储积分消息日志处于同一个事务中，本地数据库操作与记录消息日志操作具备原子性。  </p>
<ol start="2">
<li><strong>定时任务扫描日志</strong>  </li>
</ol>
<p>如何保证将消息发送给消息队列？  </p>
<p>经过第一步消息已经写到消息日志表中，可以启动独立的线程，定时对消息日志表中的消息进行扫描并发送至消息中间件，在消息中间件反馈发送成功后删除该消息日志，否则等待定时任务下一周期重试。  </p>
<ol start="3">
<li><strong>消费消息</strong>  </li>
</ol>
<p>如何保证消费者一定能消费到消息？  </p>
<p>这里可以使用MQ的Ack（即消息确认机制）机制，消费者监听MQ，如果消费者接收到消息并且业务处理完成后向MQ发送Ack（即消息确认），此时说明消费者正常消费消息完成，MQ将不再向消费者推送消息，否则消费者户不断重试向消费者来发送消息。  </p>
<p>积分服务接收到“增加积分”消息，开始增加积分，积分增加成功后向消息中间件回应Ack，否则消息中间件将重复投递此消息；  </p>
<p>由于消息会重复投递，积分服务的“增加积分”功能需要实现幂等性；  </p>
<h4 id="RocketMQ事务消息方案"><a href="#RocketMQ事务消息方案" class="headerlink" title="RocketMQ事务消息方案"></a>RocketMQ事务消息方案</h4><p>RocketMQ是一个来自阿里的分布式消息中间件。  </p>
<p>于2012年开源，并在2017年正式成为Apache顶级项目。  </p>
<p>据了解，包括阿里云上的消息产品以及收购的子公司在内，阿里集团的消息产品全线都运行在RocketMQ之上，并且最近几年的双十一大促中，RocketMQ都有抢眼表现。<br>Apache RocketMQ4.3之后的版本正式支持事务消息，为分布式事务实现提供了便利性支持。  </p>
<p>RocketMQ事务消息设计则主要是为了解决Producer端的消息发送与本地事务执行的原子性问题，RocketMQ的设计中broker与producer端的双向通信能力，使得broker天生可以作为一个事务协调者存在；<br>而RocketMQ本身提供的存储机制为事务消息提供了持久化能力；<br>RocketMQ的高可用机制以及可靠消息设计则为事务消息在系统发生异常时依然能够保证达成事务的最终一致性；<br>在RocketMQ4.3后实现了完整的事务消息，实际上其实是对本地消息表的一个封装，将本地消息表移动到MQ内部，解决Producer端的消息发送与本地事务执行的原子性问题。  </p>
<p>执行流程如下：  </p>
<p>为方便理解，还是以注册送积分这个例子来描述整个流程。  </p>
<p>Producer即MQ发送方，本例中是用户服务，负责新增用户；<br>MQ订阅方即消息消费方，本例中是积分服务，负责新增积分。  </p>
<ol>
<li>Producer发送事务消息。</li>
</ol>
<p>Producer（MQ发送方）发送事务消息至MQ Server，MQ Server将消息标记为Prepared（预备状态），注意此时这条消息消费者（MQ订阅方）是无法消费得到的。  </p>
<p>本例中，Producer发送“增加积分消息”到MQ Server。  </p>
<ol start="2">
<li>MQ Server回应消息发送成功</li>
</ol>
<p>MQ Server接受到Producer发送的消息则回应发送成功表示MQ已经接收到消息。  </p>
<ol start="3">
<li>Producer执行本地事务</li>
</ol>
<p>Producer端执行业务代码逻辑，通过本地数据库事务控制。<br>本例中，Producer执行添加用户操作。  </p>
<ol start="4">
<li>消息投递</li>
</ol>
<p>若Producer本地事务执行成功，则自动向MQ Server发送commit消息；<br>MQ Server接收到commit消息后将“增加积分消息”状态标记为可消费，此时MQ订阅方（积分服务）即正常消费消息；<br>若Producer本地事务执行失败则自动向MQ Server发送rollback消息，MQ Server接收到rollback消息后将删除“增加积分消息”；  </p>
<p>MQ订阅方（积分服务）消费消息，消费成功则向MQ回应Ack；否则将重复接收消息，这里ack默认自动回应，即程序执行正常则自动回应ack。  </p>
<ol start="5">
<li>事务回查</li>
</ol>
<p>如果执行Producer端本地事务过程中，执行端挂掉，或者超时，MQ Server将会不停的询问同组的其他Producer来获取事务执行状态，这个过程叫做<strong>事务回查</strong>，MQ Server会根据事务回查结果来决定是否投递消息。  </p>
<p>以上主干流程已经由RocketMQ实现，对于用户来说，用户需要分别实现本地事务执行以及本地事务回查方法，因此只需要关注本地事务的执行状态即可。  </p>
<p>RocketMQ提供的RocketMQLocalTransactionListener接口：  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RocketMQLocalTransactionListener</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    发送prepare消息成功则此方法被调用，该方法用于执行本地事务</span></span><br><span class="line"><span class="comment">    <span class="doctag">@param</span> msg 回传的消息，利用transactionId即可获取到该消息的唯一id</span></span><br><span class="line"><span class="comment">    <span class="doctag">@param</span> arg 调用send方法时传递的参数，当send时候，若有额外的参数可以传递到send方法中，这里能获取到</span></span><br><span class="line"><span class="comment">    <span class="doctag">@return</span> 返回事务状态，COMMIT：提交  ROLLBACK：回滚 UNKNOW：回调</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    RocketMQLocalTransactionState executeLocalTransaction（Message msg，Object arg）;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    <span class="doctag">@param</span> msg 通过获取transactionId来判断这条消息的本地事务执行状态</span></span><br><span class="line"><span class="comment">    <span class="doctag">@return</span> 返回事务状态  COMMIT：提交  ROLLBACK：回滚 UNKNOW：回调</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  RocketMQLocalTransactionState checkLocalTransaction（Message msg）;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>发送事务消息</li>
</ul>
<p>以下是RocketMQ提供用于发送事务消息的API：  </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">TransactionMQProducer producer=<span class="keyword">new</span> <span class="constructor">TransactionMQProducer(<span class="string">"ProducerGroup"</span>)</span>;</span><br><span class="line">producer.set<span class="constructor">NamesAddr(<span class="string">"127.0.0.1:9876"</span>)</span>;</span><br><span class="line">producer.start<span class="literal">()</span>;</span><br><span class="line"><span class="comment">//设置TransactionListener实现</span></span><br><span class="line">producer.set<span class="constructor">TransactionListener(<span class="params">transactionListener</span>)</span>;</span><br><span class="line"><span class="comment">//发送事务消息</span></span><br><span class="line">SendResult sendResult=producer.send<span class="constructor">MessageTransaction(<span class="params">msg</span>,<span class="params">null</span>)</span>;</span><br></pre></td></tr></table></figure>

<h3 id="RocketMQ实现可靠消息最终一致性事务"><a href="#RocketMQ实现可靠消息最终一致性事务" class="headerlink" title="RocketMQ实现可靠消息最终一致性事务"></a>RocketMQ实现可靠消息最终一致性事务</h3><h4 id="业务说明-2"><a href="#业务说明-2" class="headerlink" title="业务说明"></a>业务说明</h4><p>本示例通过RocketMQ中间件实现可靠消息最终一致性分布式事务，模拟两个账户的转账交易过程。  </p>
<p>两个账户在分别不同的银行（张三在bank1、李四在bank2），bank1、bank2是两个微服务。<br>交易过程是：张三给李四转账指定金额。  </p>
<p>上述交易步骤，张三扣减金额与给bank2发转账消息，两个操作必须是一个整体性的事务（原子性）；  </p>
<h4 id="程序组成部分-1"><a href="#程序组成部分-1" class="headerlink" title="程序组成部分"></a>程序组成部分</h4><p>数据库：MySQL-5.7.25（包括bank1和bank2两个数据库）<br>JDK：64位jdk1.8.0_201<br>rocketmq 服务端: RocketMQ-4.5.0<br>rocketmq 客户端：RocketMQ-Spring-Boot-starter.2.0.2-RELEASE<br>微服务框架：spring-boot-2.1.3、spring-cloud-Greenwich.RELEASE<br>微服务以及数据库的关系：<br>  dtx/dtx-seata-demo/seata-demo-bank1 银行1，操作张三账户，连接数据库1<br>  dtx/dtx-seata-demo/seata-demo-bank2 银行2，操作李四账户，连接数据库2  </p>
<p>本示例程序技术架构如下：  </p>
<p>交互流程如下：<br>1、Bank1向MQ Server发送转账消息<br>2、Bank1执行本地事务，扣减金额<br>3、Bank2接受消息，执行本地事务，添加金额  </p>
<h4 id="创建数据库-2"><a href="#创建数据库-2" class="headerlink" title="创建数据库"></a>创建数据库</h4><h4 id="启动RocketMQ"><a href="#启动RocketMQ" class="headerlink" title="启动RocketMQ"></a>启动RocketMQ</h4><h4 id="导入dtx-txmsg-demo"><a href="#导入dtx-txmsg-demo" class="headerlink" title="导入dtx-txmsg-demo"></a>导入dtx-txmsg-demo</h4><h4 id="dtx-txmsg-demo-bank1"><a href="#dtx-txmsg-demo-bank1" class="headerlink" title="dtx-txmsg-demo-bank1"></a>dtx-txmsg-demo-bank1</h4><h4 id="dtx-txmsg-demo-bank2"><a href="#dtx-txmsg-demo-bank2" class="headerlink" title="dtx-txmsg-demo-bank2"></a>dtx-txmsg-demo-bank2</h4><h4 id="测试场景-1"><a href="#测试场景-1" class="headerlink" title="测试场景"></a>测试场景</h4><ul>
<li>bank1本地事务失败，则bank1不发送转账消息</li>
<li>bank2接收转账消息失败，会进行重试发送消息</li>
<li>bank2多次消费同一个消息，实现幂等</li>
</ul>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>可靠消息最终一致性就是保证消息从生产方经过消息中间件传递到消息方的一致性，本案例使用了RocketMQ作为消息中间件，RocketMQ主要解决了两个功能：  </p>
<p>1、本地事务与消息发送的原子性问题；<br>2、事务参与方接收消息的可靠性。  </p>
<p>可靠消息最终一致性事务适合执行周期长且实时性要求不高的场景。<br>引入消息机制后，同步的事务操作变为基于消息执行的异步操作，避免了分布式事务中的同步阻塞操作的影响，并实现了两个服务的解耦。  </p>
<h2 id="分布式解决方案之最大努力通知"><a href="#分布式解决方案之最大努力通知" class="headerlink" title="分布式解决方案之最大努力通知"></a>分布式解决方案之最大努力通知</h2><h3 id="什么是最大努力通知"><a href="#什么是最大努力通知" class="headerlink" title="什么是最大努力通知"></a>什么是最大努力通知</h3><p>最大努力通知也是一种解决分布式事务的方案，下边是一个充值的例子。  </p>
<p>交互流程：<br>1、账户系统调用充值系统接口；<br>2、充值系统完成支付处理向账户系统发起充值结果通知；若通知失败，则充值系统按照策略进行重复通知；<br>3、账户系统接收到充值结果通知修改充值状态；<br>4、账户系统未接收到通知会主动调用充值系统的接口查询充值结果。  </p>
<p>通过上边的例子，总结最大努力通知方案的目标：  </p>
<p>目标：发起通知方通过一定的机制最大努力将业务处理结果通知到接收方；  </p>
<p>具体包括：<br>1、有一定的消息重复通知机制；<br>  因为接受通知方可能没有接收到通知，此时要有一定的机制对消息重复通知；<br>2、消息校对机制<br>  如果是最大努力也没有通知到接收方，或者接收方消费消息后要再次消费，此时可由接收方主动向通知方查询信息来满足需求。  </p>
<p>这个跟我们信666当中的交易模块很相似，也是进行查询交易结果的时候，如果在一定的查询次数下没有查找得到结果即一分钟查询多少次等，那么就更改成2分钟查询多少次；两分钟查询后仍然没有结果就再次换成3分钟查询多少次；这个一分钟两分钟三分钟，是间隔，间隔时间；因为交易量大的缘故，所以也是为了减轻下服务器压力；是的有些是异步主动去通知下游系统，就是接入第三方支付的时候，上游渠道可能会需要你提供一个异步回调的一个接口，那么这个接口用于交易结果通知或者其他的绑卡结果通知等这种，你可以提供一个接口，当然了也可以提供一个假的接口，就是系统中不存在此接口也行；当然了如果不存在该接口的话，那么就需要去使用系统当中的查询机制，即主动去查询上游渠道系统当中该笔交易的交易结果。在第三方这种支付方面就大概使用了最大努力通知的方式实现分布式事务方案。很多的第三方支付会去提供这个订单/交易结果查询的这样一个接口；而我们自己对接下游就比较缺德了，就每次我们向上游查询完交易结果之后，在处理完业务逻辑后，我们就通过try catch住，http直接发送一次交易结果给上送了回调地址接口的下游；没有上送回调接口就让他们自己来查询，上送了的话我们就回调一次；就这样。  </p>
<p>最大努力通知与可靠消息一致性有什么不同？  </p>
<p>1、解决方案思想不同  </p>
<p>  可靠消息一致性，发起通知方需要保证将消息发送出去，并且将消息发到接收通知方，消息的可靠性关键由发起通知方来保证。  </p>
<p>  最大努力通知，发起通知方尽最大的努力将业务处理结果通知给接收通知方，但是可能消息接收不到，此时需要接收通知方主动调用发起通知方的接口查询业务处理结果，通知的可靠性在于接收通知方。  </p>
<p>2、两者的业务应用场景不同  </p>
<p>  可靠消息一致性关注的是交易过程的事务一致，以异步的方式完成交易。  </p>
<p>  最大努力通知关注的是交易后的通知事务，即将交易结果可靠的通知出去。  </p>
<p>3、技术解决方向不同  </p>
<p>  可靠消息一致性要解决消息从发出到接收的一致性，即消息发出并且被接收到。  </p>
<p>  最大努力通知无法保证消息从发出到接收的一致性，只提供消息接收的可靠性机制，可靠机制是，最大努力的将消息通知给接收方，当消息无法被接收方接收时，由接收方主动查询消息（业务处理结果）；  </p>
<h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><p>通过对最大努力通知的理解，采用MQ的ack机制就可以实现最大努力通知；  </p>
<p>方案一：  </p>
<p>本方案是利用MQ的ack机制由MQ向接收通知方发送通知，流程如下：  </p>
<ol>
<li>发起通知方将通知发给MQ；  </li>
</ol>
<p>使用普通消息机制将通知发给MQ；  </p>
<p>注意:如果消息没有发出去可由接收通知方主动请求发起通知方查询业务执行结果。  </p>
<ol start="2">
<li><p>接收通知方监听MQ；</p>
</li>
<li><p>接收通知方接收消息，业务处理完成回应Ack；  </p>
</li>
<li><p>接收通知方若没有会用ack则MQ会重复通知；  </p>
</li>
</ol>
<p>MQ会<strong>按照间隔1min、5min、10min、30min、1h、2h、5h、10h的方式，逐步拉大通知间隔</strong>（如果MQ采用RocketMQ，在broker中可以进行配置），直到达到通知要求的时间窗口上限。  </p>
<ol start="5">
<li>接收通知方可通过消息校对接口来校对消息的一致性。  </li>
</ol>
<p>方案二：  </p>
<p>本方案也是利用MQ的Ack机制，与方案一不同的是应用程序向接收通知方发送通知，如下图：  </p>
<p>交互流程如下:  </p>
<ol>
<li><p>发起通知方将通知发给MQ；</p>
<p>使用可靠消息一致方案中的事务消息保证本地事务与消息的原子性，最终将通知先发给MQ。  </p>
</li>
<li><p>通知程序监听MQ，接收MQ的消息；  </p>
<p>方案1中接收通知方直接监听MQ，方案2中由通知程序监听MQ；  </p>
<p>通知程序若没有回应Ack则MQ会重复通知；  </p>
</li>
<li><p>通知程序通过互联网接口协议（如http、webservice）调用接受通知方案接口，完成通知。  </p>
<p>通知程序调用接受通知方案接口成功就表示通知成功，即MQ消费成功，MQ将不再向通知程序投递通知消息。  </p>
</li>
<li><p>接受通知方可通过消息校对接口来校对消息的一致性。  </p>
</li>
</ol>
<p>方案1和方案2的不同点：  </p>
<p>（1）方案1中接收通知方与MQ接口，即接收通知方监听MQ，次方案主要应用与内部应用之间的通知；<br>（2）方案2中由通知程序与MQ接口，通知程序监听MQ，收到MQ的消息后，由通知程序通过互联网接口协议调用接收通知方。此方案主要应用于外部应用之间的通知，例如支付宝、微信的支付结果通知。  </p>
<p>方案一针对内部系统；方案二针对外部系统；  </p>
<h3 id="RocketMQ实现最大努力通知型事务"><a href="#RocketMQ实现最大努力通知型事务" class="headerlink" title="RocketMQ实现最大努力通知型事务"></a>RocketMQ实现最大努力通知型事务</h3><h4 id="业务说明-3"><a href="#业务说明-3" class="headerlink" title="业务说明"></a>业务说明</h4><p>本示例通过RocketMQ中间件实现最大努力通知型分布式事务，模拟充值过程。  </p>
<p>本案例有账户系统和充值系统两个微服务，其中账户系统的数据库是bank1数据库，其中有张三账户。<br>充值系统的数据库使用bank1_pay数据库，记录了账户的充值记录。  </p>
<p>业务流程如下图：  </p>
<p>交互流程如下：  </p>
<ol>
<li>用户请求充值系统进行充值；  </li>
<li>充值系统完成充值将充值结果发送给MQ。</li>
<li>账户系统监听MQ，接收充值结果通知，如果接收不到消息，MQ会重复发送通知。接收到充值结果通知账户系统增加充值金额。  </li>
<li>账户系统也可以主动查询充值系统的充值查询接口，增加金额。  </li>
</ol>
<h4 id="程序组成部分-2"><a href="#程序组成部分-2" class="headerlink" title="程序组成部分"></a>程序组成部分</h4><p>数据库：MySQL-5.7.25（包括bank1和bank1_pay两个数据库）<br>JDK：64位jdk1.8.0_201<br>rocketmq 服务端: RocketMQ-4.5.0<br>rocketmq 客户端：RocketMQ-Spring-Boot-starter.2.0.2-RELEASE<br>微服务框架：spring-boot-2.1.3、spring-cloud-Greenwich.RELEASE<br>微服务以及数据库的关系：<br>  dtx/dtx-notifymsg-demo/dtx-notifymsg-demo-bank1 银行1，操作张三账户，连接数据库bank1<br>  dtx/dtx-notifymsg-demo/dtx-notifymsg-demo-pay 银行2，操作李四账户，连接数据库bank1_pay  </p>
<p>交互流程如下：  </p>
<p>1、用户请求充值系统进行充值；<br>2、充值系统完成充值将充值结果发给MQ；<br>3、账户系统监听MQ，接收充值结果通知，如果接收不到消息，MQ会重复发送通知。接收到充值结果通知账户系统增加充值金额。<br>4、账户系统也可以主动查询传给你藕汁系统的充值结果查询接口，增加金额。  </p>
<h4 id="创建数据库-3"><a href="#创建数据库-3" class="headerlink" title="创建数据库"></a>创建数据库</h4><h4 id="启动RocketMQ-1"><a href="#启动RocketMQ-1" class="headerlink" title="启动RocketMQ"></a>启动RocketMQ</h4><h4 id="导入dtx-notifymsg-demo"><a href="#导入dtx-notifymsg-demo" class="headerlink" title="导入dtx-notifymsg-demo"></a>导入dtx-notifymsg-demo</h4><h4 id="dtx-notifydemo-pay"><a href="#dtx-notifydemo-pay" class="headerlink" title="dtx-notifydemo-pay"></a>dtx-notifydemo-pay</h4><h4 id="dtx-notifydemo-bank1"><a href="#dtx-notifydemo-bank1" class="headerlink" title="dtx-notifydemo-bank1"></a>dtx-notifydemo-bank1</h4><h4 id="测试场景-2"><a href="#测试场景-2" class="headerlink" title="测试场景"></a>测试场景</h4><ul>
<li>充值系统充值成功，账户系统主动查询充值结果，修改中户金额</li>
<li>充值系统充值成功，发送消息，账户系统接收消息，修改账户金额。</li>
<li>账户系统修改账户金额幂等测试。</li>
</ul>
<h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>最大努力通知方案是分布式中对已执行要求最低的一种，适用于一些最终一致性时间敏感度低的业务；<br>最大努力通知方案需要实现如下功能：  </p>
<ol>
<li>消息重复通知机制</li>
<li>消息校对机制</li>
</ol>
<h2 id="分布式事务综合案例"><a href="#分布式事务综合案例" class="headerlink" title="分布式事务综合案例"></a>分布式事务综合案例</h2><p>前边已经学习了四种分布式事务解决方案，2PC，TCC，可靠消息最终一致性，最大努力通知，每种解决方案通过案例开发进行学习，本章节结合互联网金融项目中的业务场景，来进行分布式事务解决方案可行性分析。  </p>
<h3 id="系统介绍"><a href="#系统介绍" class="headerlink" title="系统介绍"></a>系统介绍</h3><h4 id="P2P介绍"><a href="#P2P介绍" class="headerlink" title="P2P介绍"></a>P2P介绍</h4><p>P2P金融又叫P2P信贷，其中P2P是peer-to-peer或者person-to-person的缩写，意思是：个人对个人。  </p>
<p>P2P金融指的是个人与个人之间的小额借贷交易，一般需要借助电子商务专业网络平台帮助借贷双方确立借贷关系并完成相关交易手续。  </p>
<p>借款者可以自行发布借款消息，包括金额、利息、还款方式和时间，实现自助式借款；<br>投资者根据借款人发布的消息，自行决定出借金额，实现自助式借贷。  </p>
<p>目前，国家对P2P行业的监控与规范性控制越来越严格，出台了很多政策来对其专项整治。<br>并主张采用“银行存管模式”来规避P2P平台挪用借投人资金的风险，通过银行开发的“银行存管系统”管理投资者的资金，<strong>每位P2P平台用户在银行的存管系统内都会有一个独立账号，</strong>平台来管理交易，做到资金和交易分开，让P2P平台不能接触到资金，就可以一定程度上避免资金被挪用的风险。  </p>
<p>什么是银行存管模式？  </p>
<p>银行存管模式涉及到2套账户体系，P2P平台和银行各有一套账户体系。<br>投资人在P2P平台注册后，会同时跳转到银行再开一个电子账户，2个账户之间有一一对应的关系。<br>当投资人投资时，资金进入的是平台在银行为投资人开设的二级账户当中，每一笔交易，是银行在投资人与借款人之间的交易划转，P2P平台仅能看到信息的流动。  </p>
<h4 id="总体业务流程"><a href="#总体业务流程" class="headerlink" title="总体业务流程"></a>总体业务流程</h4><h4 id="业务术语"><a href="#业务术语" class="headerlink" title="业务术语"></a>业务术语</h4><table>
  <thead>
    <tr>
      <th>术语</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>银行存管模式</td>
      <td>此种模式下，涉及到2套账户体系，P2P平台和银行各有一套账户体系。投资人在P2P平台注册后会同时跳转到银行再开一个电子账户，2个账户之间有一个一一对应的关系。当投资人投资时，资金进入的是平台在银行为投资人开设的二进账户中，每一笔交易，是由银行在投资人与借款人之间的交易划转，P2P平台仅能看到信息的流动。</td>
    </tr>
    <tr>
      <td>标的</td>
      <td>P2P业内，习惯把借款人的投资项目称之为“标的”</td>
    </tr>
    <tr>
      <td>发标</td>
      <td>借款人在P2P平台中创建并发布“标的”过程</td>
    </tr>
    <tr>
      <td>投标</td>
      <td>投资人在认可相关借款人之后进行的一种借贷行为，对自己中意的借款标的进行投资操作，一个借款标可由单个投资人或多个投资人承接。</td>
    </tr>
    <tr>
      <td>满标</td>
      <td>单笔借款标筹集齐所有借款资金即为满标，计息时间是以标满当日开始计息，投资人较多的平台多数会当天满标。</td>
    </tr>
  </tbody>
</table>

<h4 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h4><ul>
<li><p><strong>统一账号服务</strong>  </p>
<p>用户的登录账户、密码、角色、权限、资源等系统级信息的管理，不包含用户业务信息。  </p>
</li>
<li><p><strong>用户中心</strong>  </p>
<p>提供用户业务信息的管理，如会员信息、实名认证信息、绑定银行卡信息等，“用户中心”的每个用户与“<strong>统一账号服务</strong>”中的账号关联。  </p>
</li>
<li><p><strong>交易中心</strong>  </p>
<p>提供发标、投标等业务。  </p>
</li>
<li><p><strong>还款业务</strong>  </p>
<p>提供还款计划的生成、执行、记录与归档。  </p>
</li>
<li><p><strong>银行存管系统（模拟）</strong>  </p>
<p>  模拟银行存管系统，进行资金的存管，划转。  </p>
</li>
</ul>
<h3 id="注册账号案例分析"><a href="#注册账号案例分析" class="headerlink" title="注册账号案例分析"></a>注册账号案例分析</h3><h4 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h4><p>  采用用户、账号分离设计（这样设计的好处是：当用户的业务信息发生变化时，不会影响的认证、授权等系统机制），因此需要保证用户信息与账号信息的一致性。  </p>
<p>  用户向用户中心发起注册请求，用户中心保存用户业务信息，然后通知统一账号服务新建该用户所对应登录账号。  </p>
<h4 id="解决方案分析"><a href="#解决方案分析" class="headerlink" title="解决方案分析"></a>解决方案分析</h4><p>  针对注册业务，如果用户与账户信息不一致，则会导致严重问题，因此该业务对一致性要求较为严格，即当用户服务和账号服务任意一方出现问题都需要回滚事务。  </p>
<p>  根据上述需求进行解决方案分析：  </p>
<ol>
<li><p>采用可靠消息一致性方案  </p>
<p> 可靠消息一致性要求只要消息发出，事务参与者接到消息就要将事务执行成功，不存在回滚的要求，所以不适用。  </p>
</li>
<li><p>最大努力通知方案</p>
<p> 最大努力通知表示发起通知方执行完本地事务后将结果通知给事务参与者，即使事务参与者执行业务处理失败发起通知方也不会回滚事务，所以不适用。  </p>
</li>
<li><p>采用Seata实现2PC  </p>
<p> 在用户中心发起去全局事务，统一账户服务为事务参与者，用户中心和统一账户服务只要由一方出现问题则全局事务回滚，符合要求。  </p>
<p> 实现方法如下：  </p>
<ol>
<li>用户中心添加用户信息，开启全局事务；  </li>
<li>统一账号服务添加账号信息，作为事务参与者；  </li>
<li>其中一方执行失败Seata对SQL进行逆操作删除用户信息和账号信息，实现回滚。  </li>
</ol>
<ol start="4">
<li><p>采用Hmily实现TCC</p>
<p>TCC也可以实现用户中心和统一账户服务只要有一方出现问题则全局事务回滚，符合要求。  </p>
<p>实现方法如下：  </p>
<ol>
<li><p>用户中心  </p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>：</span><br><span class="line">    添加用户，状态为不可用</span><br><span class="line"><span class="keyword">confirm</span>：</span><br><span class="line">    更新用户状态为可用</span><br><span class="line">cance<span class="variable">l:</span></span><br><span class="line">    删除用户</span><br></pre></td></tr></table></figure>
</li>
<li><p>统一账号服务</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">try:</span></span><br><span class="line">    添加账号，状态为不可用</span><br><span class="line"><span class="symbol">confirm:</span></span><br><span class="line">    更新账号状态为可用</span><br><span class="line"><span class="symbol">cancel:</span></span><br><span class="line">    删除账号</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="存管开户"><a href="#存管开户" class="headerlink" title="存管开户"></a>存管开户</h3><h4 id="业务流程-1"><a href="#业务流程-1" class="headerlink" title="业务流程"></a>业务流程</h4><p>根据政策要求，P2P业务必须让银行存管资金，用户的资金在银行存管系统的账户中，而不在P2P平台中，因此用户要在银行存管系统开户。  </p>
<p>用户向用户中心提交开户资料，用户中心生成开户请求号并重定向至银行存管系统开户页面。<br>用户设置存管密码并确认开户后，银行存管立即返回“请求已受理”。<br>在某一时刻，银行存管系统处理完该开户请求后，将调用毁掉地址通知处理结果，若通知失败，则按照一定策略重试通知。<br>同时，以你航存管系统应提供<strong>开户结果查询的接口</strong>，以供用户中心校对结果。  </p>
<h4 id="解决方案分析-1"><a href="#解决方案分析-1" class="headerlink" title="解决方案分析"></a>解决方案分析</h4><p>P2P平台的用户中心与银行存管系统之间属于跨系统交互，银行存管系统属于外部系统；用户中心无法干预银行存管系统；<br>所以用户中心只能在收到银行存管系统的业务处理结果通知后积极处理，开户后的使用情况完全由用户中心来控制。<br>根据上述需求来进行解决方案分析：  </p>
<ol>
<li><p>采用Seata实现2PC</p>
<p>需要侵入银行存管系统的数据库，由于它是外部系统，所以不适用。  </p>
</li>
<li><p>采用Hmily实现TCC</p>
<p>TCC侵入性更强，所以不适用；  </p>
</li>
<li><p>基于MQ的可靠消息一致性</p>
<p>如果让银行存管系统监听MQ则不合适，因为它是外部系统。  </p>
<p>如果银行存管系统将消息发给MQ用户中心监听MQ是可以的；<br>但是由于相对银行存管系统来说用户中心属于外部系统，银行存管系统是不会让外部系统直接监听自己的MQ的，基于MQ的通信协议也不方便外部系统间的交互，所以本方案不合适。  </p>
</li>
<li><p>最大努力通知方案</p>
<p> 银行存管系统内部使用MQ，银行存管系统处理完业务后将处理结果发给MQ。<br> 由银行存管系统的通知程序专门发送通知方</p>
</li>
</ol>
<h3 id="满标审核"><a href="#满标审核" class="headerlink" title="满标审核"></a>满标审核</h3><h4 id="业务流程-2"><a href="#业务流程-2" class="headerlink" title="业务流程"></a>业务流程</h4><p>在借款人标的募集所有的资金后，P2P运营管理员审批该标的，触发放款，并开启还款流程。<br>管理员对某标的满标审批通过，交易中心修改标的状态为“还款中”，同时还要通知还款服务生成还款计划。  </p>
<h4 id="解决方案分析-2"><a href="#解决方案分析-2" class="headerlink" title="解决方案分析"></a>解决方案分析</h4><p>生成还款计划是一个执行时长较长的业务，不建议阻塞主业务流程，此业务对一致性要求较低。<br>根据上述需求进行解决方案分析：  </p>
<ol>
<li><p>采用Seata实现2PC</p>
<p>Seata在食物执行过程中或进行数据库资源锁定，由于事务执行时长较长会将资源锁定较长时间，所以不适用。  </p>
</li>
<li><p>采用Hmily实现TCC</p>
<p>本需求对业务一致性要求较低，因为生成还款计划的时长较长，所以不要求交易中心修改标的状态为“还款中”就立即生成还款计划，所以本方案不适用；  </p>
</li>
<li><p>基于MQ的可靠消息一致性</p>
<p>满标审批通过后，由交易中心修改标的状态为“还款中”并且向还款服务发送消息，还款服务接收到消息开始生成还款计划，基本与MQ的可靠消息一致性方案适用此场景。  </p>
</li>
<li><p>最大努力通知方案</p>
<p>满标审批通过后，由交易中心向还款服务发送通知要求生成还款计划，还款服务并且对外提供还款计划生成结果校对接口供其他服务查询，最大努力通知方案也适用本场景。  </p>
</li>
</ol>
<h2 id="课程总结"><a href="#课程总结" class="headerlink" title="课程总结"></a>课程总结</h2><ul>
<li><strong>重点知识回顾：</strong>  </li>
</ul>
<p>事务的基本概念以及本地事务特性。  </p>
<p>CAP、BASE理论的概念。  </p>
<p>2PC、TCC、可靠消息最终一致性、最大努力通知各个类型原理以及其特性；  </p>
<p>不同分布式事务类型的应用场景讨论。  </p>
<p>RocketMQ事务消息机制；  </p>
<p>Seata与传统XA原理上的差异。  </p>
<ul>
<li><strong>分布式事务对比分析：</strong>  </li>
</ul>
<p>在学习各种分布式事务的解决方案后，了解到各种方案的优缺点：  </p>
<p><strong>2PC</strong>最大的诟病就是一个阻塞协议。RM在执行分支事务后需要等待TM的决定，此服务会阻塞并锁定资源。<br>由于其阻塞机制和最差时间复杂高度。<br>因此，这种实际不能适应着事务涉及的服务数量增加而扩展的需要，很难用于并发较高以及子事务生命周期较长（long-running transactions）的分布式服务中。  </p>
<p>如果拿<strong>TCC</strong>事务的处理流程与2PC两阶段提交作比较，2PC同行都是在跨库的DB层面，而TCC则是在应用层面的处理，需要通过业务逻辑来实现。<br>这种分布式事务的实现方式的又是在于，可以让<strong>应用自己定义数据操作的粒度，使得降低锁冲突、提高吞吐量称为可能</strong>。<br>而不足之处则在于对应用的侵入性非常强，业务逻辑的每个分支都需要实现try、confirm、cancel三个操作。<br>此外，其实现难度也比较大，需要按照网络状态，系统故障等不同的失败原因实现不同的回滚策略。<br>典型的使用场景：满xx/登录送优惠券等。  </p>
<p><strong>可靠消息最终一致性事务</strong>适合知性周期长且实时性要求不高的场景。<br>引入消息机制后，同步的事务操作变为基于消息执行的异步操作，避免了分布式事务中的同步阻塞操作的影响，并实现了两个服务的解耦。<br>典型的使用场景：注册送积分、登录送优惠券等。  </p>
<p><strong>最大努力通知</strong> 是分布式事务中要求最低的一种，适用于一些最终一致性敏感度低的业务；<br>允许发起通知方处理业务失败，在接收通知方收到通知后积极进行失败处理，无论发起通知方如何处理结果都会不影响到接收通知方的后续处理；<br>发起通知方需要提供查询执行情况接口，用于接收通知方校对结果。<br>典型的使用场景：银行通知、支付结果通知等；  </p>
<table>
  <thead>
    <tr>
      <th></th>
      <th>2PC</th>
      <th>TCC</th>
      <th>可靠消息</th>
      <th>最大努力通知</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>一致性</td>
      <td>强一致性</td>
      <td>最终一致</td>
      <td>最终一致</td>
      <td>最终一致</td>
    </tr>
    <tr>
      <td>吞吐量</td>
      <td>低</td>
      <td>中</td>
      <td>高</td>
      <td>高</td>
    </tr>
    <tr>
      <td>实现复杂度</td>
      <td>易</td>
      <td>难</td>
      <td>中</td>
      <td>易</td>
    </tr>
  </tbody>
</table>

<p><strong>总结：</strong>  </p>
<p>在条件允许的情况下，尽可能选择本地事务单数据源，因为它减少了网络交互带来的性能消耗，且避免了数据弱一致性带来的种种问题。<br>若某系统频繁且不合理的使用分布式事务，应首先从整体设计角度观察服务的拆分是否合理，是否高内聚低耦合？是否粒度太小？分布式事务一直是业界难题，因为网络的不确定性，而且我们习惯拿分布式事务与单机事务ACID作对比；  </p>
<p>无论是数据库层的XA、还是应用层的TCC、可靠消息、最大努力通知等方案，都没有完美解决分布式事务问题，他们不过是在各自在性能、一致性、可用性等方面作取舍，寻求某些场景偏好下的权衡。  </p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>微服务</tag>
        <tag>分布式</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>整数反转</title>
    <url>/2020/04/18/LeetCode/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
    <content><![CDATA[<p>我觉得还是得多看点优秀的代码，我这个太low了；<br>可以看这个的：<a href="https://drawcode.mdnice.com/algorithm/intro/" target="_blank" rel="noopener">https://drawcode.mdnice.com/algorithm/intro/</a><br>体会到差距就是执行用时与内存消耗上面；<br>害；<br>基础不扎实；<br>晚上有时间看下别人优秀的代码解析；<br>害；别说；还是蛮沉浸其中的；  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line">    static Long <span class="keyword">minValue</span>=new Long(<span class="number">-2</span>);</span><br><span class="line">    static Long <span class="keyword">maxValue</span>=new Long(<span class="number">2</span>);</span><br><span class="line">    static&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">minValue</span>=<span class="keyword">minValue</span>*(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">maxValue</span>=<span class="keyword">maxValue</span>*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">maxValue</span>=<span class="keyword">maxValue</span><span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    给出一个32位的有符号整数，</span></span><br><span class="line"><span class="comment">    你需要将这个整数中每位上的数字进行反转；</span></span><br><span class="line"><span class="comment">    int x  32位的有符号整数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">public</span> <span class="type">int</span> reverse(<span class="type">int</span> x) &#123;</span><br><span class="line">        String s=x&lt;<span class="number">0</span>?(x+"").substring(<span class="number">1</span>,(x+"").length()):x+"";</span><br><span class="line">        Long result=<span class="built_in">new</span> Long(<span class="number">0</span>);</span><br><span class="line">        StringBuilder stringBuilder=<span class="built_in">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=s.length();i&gt;<span class="number">0</span>;i<span class="comment">--)&#123;</span></span><br><span class="line">            stringBuilder.append(s.substring(i<span class="number">-1</span>,i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            Long <span class="keyword">value</span>=Long.parseLong("-"+stringBuilder.toString());</span><br><span class="line">            result=<span class="keyword">value</span>&lt;<span class="keyword">minValue</span>?result:value;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            Long value=Long.parseLong(stringBuilder.toString());</span><br><span class="line">            result=value&gt;<span class="keyword">maxValue</span>?result:value;</span><br><span class="line">        &#125;</span><br><span class="line">        return result.intValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/2020/04/18/LeetCode/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<p>写了两种方法；<br>很奇怪执行用时和内存消耗不知道怎么降下去；<br>我开始就搜了下：java 定义变量会消耗内存是吗？<br>我这个傻逼问题；<br>抱歉抱歉，我刚入门，对不住；  </p>
<p> <img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXyrH0mn2colZek3cguDxrWyGXx4pLFnHCZcZ9eF4N289iZ2JtlaYYYeWf2LHQ5qRWF8Mf0xWoO6sbLjgob1pXQM!/r" alt="两数之和"></p>
<p>想一想办法应该还可以优化下；<br>一开始使用Map，觉得内存消耗可能会大；不知道莫名就是给我的感觉就是这种结构给我的感觉要大；后来就换成了用数组；<br>刚开始接触，写的不好，还请见谅；  </p>
<p>诶诶诶，换成js，内存消耗以及运行时间可能会要短一点吗？有时间再去试试js；<br>不知道为什么我感觉js会要短点？<br>好了今天是LeetCode打卡第一天；<br>最近有一首歌挺好听的：(司南-冬眠)</p>
<blockquote>
<p>方法一：  </p>
</blockquote>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     int[] nums 整数数组</span></span><br><span class="line"><span class="comment">     int target 目标值</span></span><br><span class="line"><span class="comment">     int[] 该数组nums中找出和为目标值的那两个整数，并返回他们的数组下标</span></span><br><span class="line"><span class="comment">     每中输入只会对应一个答案，但是数组中同一个元素不能使用两遍。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> target)&#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; <span class="built_in">map</span>=<span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] twoNums=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> numA=nums[i];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>.<span class="built_in">size</span>()==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">map</span>.<span class="built_in">put</span>(i,numA);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> numB=target-numA;</span><br><span class="line">                Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; <span class="built_in">set</span>=<span class="built_in">map</span>.entrySet();</span><br><span class="line">                <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry:<span class="built_in">set</span>)&#123;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"entry.getValue():  "</span>+entry.getValue());</span><br><span class="line">                    <span class="keyword">if</span>(numB==entry.getValue())&#123;</span><br><span class="line">                        twoNums[<span class="number">0</span>]=i&gt;entry.<span class="built_in">getKey</span>()?entry.<span class="built_in">getKey</span>():i;</span><br><span class="line">                        twoNums[<span class="number">1</span>]=i&gt;entry.<span class="built_in">getKey</span>()?i:entry.<span class="built_in">getKey</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">map</span>.<span class="built_in">put</span>(i,numA);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> twoNums;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方法二：  </p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> static <span class="built_in">int</span>[] twoSum2(<span class="built_in">int</span>[] nums,<span class="built_in">int</span> target)&#123;</span><br><span class="line">        <span class="built_in">int</span>[] twoNums=new <span class="built_in">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">bool</span>ean flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="built_in">int</span> numA=nums[i];</span><br><span class="line">            <span class="built_in">int</span> numB=target-numA;</span><br><span class="line">           <span class="keyword">for</span>(<span class="built_in">int</span> n=i+<span class="number">1</span>;n&lt;nums.length;n++)&#123;</span><br><span class="line">               <span class="built_in">int</span> numV=nums[n];</span><br><span class="line">               <span class="keyword">if</span>(numB==numV)&#123;</span><br><span class="line">                   twoNums[<span class="number">0</span>]=i;</span><br><span class="line">                   twoNums[<span class="number">1</span>]=n;</span><br><span class="line">                   flag=<span class="literal">true</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> twoNums;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>PC端直播屏幕变红</title>
    <url>/2020/04/17/%E7%9B%B4%E6%92%AD/pc%E7%9B%B4%E6%92%AD%E5%B1%8F%E5%B9%95%E5%8F%98%E7%BA%A2/</url>
    <content><![CDATA[<p>在这当中协助我完成直播功能的博客：<a href="https://me.csdn.net/eguid_1" target="_blank" rel="noopener">https://me.csdn.net/eguid_1</a>  </p>
<p>前期使用了有Red5、VLC、OBS；后来就直接使用的就是OBS进行拉流获取直播视频；  </p>
<p>OBS：<a href="https://obsproject.com/" target="_blank" rel="noopener">https://obsproject.com/</a>  </p>
<p>由于转化器converter会转化的是IplImage从而获取得到Frame；<br>而robot机器从屏幕读取得到的像素图像只能是BufferedImage；所以这两者需要做一个转化；</p>
<p>参考一些Blog，发现说是BufferedImage与IplImage之间的转化问题；  </p>
<p>参考了博客：<a href="https://blog.csdn.net/zwl18210851801/article/details/81279725" target="_blank" rel="noopener">https://blog.csdn.net/zwl18210851801/article/details/81279725</a><br>这篇博客是记录Mat与BufferedImage与我要的不一致；</p>
<p>因为参考的博客比如：<a href="https://blog.csdn.net/qiao_198911/article/details/52135013" target="_blank" rel="noopener">https://blog.csdn.net/qiao_198911/article/details/52135013</a><br>这篇博客是转化IplImage转化为BufferedImage；而我要的是BufferedImage转化为IplImage；</p>
<p>后来又找到博客发现：<a href="https://stackoverflow.com/questions/8368078/java-bufferedimage-to-iplimage" target="_blank" rel="noopener">https://stackoverflow.com/questions/8368078/java-bufferedimage-to-iplimage</a><br>这篇博客就记录了BufferedImage转化成IplImage；</p>
<p>PC端视频直播屏幕变红解决：  </p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**bufferedImage to IplImage 的转化*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IplImage toIplImage(BufferedImage bufImage) &#123;</span><br><span class="line">    ToIplImage iplConverter = <span class="keyword">new</span> <span class="type">OpenCVFrameConverter</span>.ToIplImage();</span><br><span class="line">    Java2DFrameConverter java2dConverter = <span class="keyword">new</span> <span class="type">Java2DFrameConverter</span>();</span><br><span class="line">    IplImage iplImage = iplConverter.convert(java2dConverter.convert(bufImage));</span><br><span class="line">    <span class="keyword">return</span> iplImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于不是很明白；所以之前的代码都会做一个注释；贴一下之前的代码：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">package com.live;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteOrder;</span><br><span class="line"><span class="keyword">import</span> java.nio.ShortBuffer;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.AudioFormat;</span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.AudioSystem;</span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.DataLine;</span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.Line;</span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.LineUnavailableException;</span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.Mixer;</span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.TargetDataLine;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.Loader;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.avcodec;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.opencv_core.IplImage;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.helper.opencv_objdetect;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.CanvasFrame;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FFmpegFrameRecorder;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.Frame;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FrameGrabber;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FrameGrabber.Exception;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FrameRecorder;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.OpenCVFrameConverter;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.OpenCVFrameGrabber;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.AWTException;</span><br><span class="line"><span class="keyword">import</span> java.awt.Dimension;</span><br><span class="line"><span class="keyword">import</span> java.awt.GraphicsDevice;</span><br><span class="line"><span class="keyword">import</span> java.awt.GraphicsEnvironment;</span><br><span class="line"><span class="keyword">import</span> java.awt.Rectangle;</span><br><span class="line"><span class="keyword">import</span> java.awt.Robot;</span><br><span class="line"><span class="keyword">import</span> java.awt.Toolkit;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.DataBufferByte;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.WritableRaster;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.BytePointer;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.Loader;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.avcodec;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.opencv_highgui;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.opencv_core.IplImage;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.CanvasFrame;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.Frame;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FrameGrabber;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FrameGrabber.Exception;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FrameRecorder;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.Java2DFrameConverter;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.OpenCVFrameConverter;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.OpenCVFrameConverter.ToIplImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.service.VideoService;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">JavacvAudioTest</span> &#123;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**bufferedImage to IplImage 的转化*/</span></span><br><span class="line">	public static IplImage toIplImage(BufferedImage bufImage) &#123;</span><br><span class="line">	    ToIplImage iplConverter = <span class="keyword">new</span> OpenCVFrameConverter.ToIplImage();</span><br><span class="line">	    Java2DFrameConverter java2dConverter = <span class="keyword">new</span> Java2DFrameConverter();</span><br><span class="line">	    IplImage iplImage = iplConverter.convert(java2dConverter.convert(bufImage));</span><br><span class="line">	    <span class="keyword">return</span> iplImage;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 推送/录制本机的音/视频(Webcam/Microphone)到流媒体服务器(Stream media server)</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * @param WEBCAM_DEVICE_INDEX</span></span><br><span class="line"><span class="comment">	 *            - 视频设备，本机默认是0</span></span><br><span class="line"><span class="comment">	 * @param AUDIO_DEVICE_INDEX</span></span><br><span class="line"><span class="comment">	 *            - 音频设备，本机默认是4</span></span><br><span class="line"><span class="comment">	 * @param outputFile</span></span><br><span class="line"><span class="comment">	 *            - 输出文件/地址(可以是本地文件，也可以是流媒体服务器地址)</span></span><br><span class="line"><span class="comment">	 * @param captureWidth</span></span><br><span class="line"><span class="comment">	 *            - 摄像头宽</span></span><br><span class="line"><span class="comment">	 * @param captureHeight</span></span><br><span class="line"><span class="comment">	 *            - 摄像头高</span></span><br><span class="line"><span class="comment">	 * @param FRAME_RATE</span></span><br><span class="line"><span class="comment">	 *            - 视频帧率:最低 25(即每秒25张图片,低于25就会出现闪屏)</span></span><br><span class="line"><span class="comment">	 * @throws org.bytedeco.javacv.FrameGrabber.Exception</span></span><br><span class="line"><span class="comment">	 * @throws org.bytedeco.javacv.FrameRecorder.Exception </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	public static CanvasFrame recordWebcamAndMicrophone(int WEBCAM_DEVICE_INDEX, final int AUDIO_DEVICE_INDEX, String outputFile,</span><br><span class="line">			int captureWidth, int captureHeight, final int FRAME_RATE) throws org.bytedeco.javacv.FrameGrabber.Exception, org.bytedeco.javacv.FrameRecorder.Exception &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 1.录制自己的小窗口进行隐藏，不能有声音</span></span><br><span class="line"><span class="comment">		 * 2.将录制屏的不显示出来</span></span><br><span class="line"><span class="comment">		 * 4.即通过录制屏将小窗口一起进行录制</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		</span><br><span class="line">		<span class="regexp">//JavacAudioTest.recordWebcamAndMicrophone2(0, 4,"output.mp4", 100, 100,25);</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 获取显示器</span><br><span class="line">		long startTime = <span class="number">0</span>;</span><br><span class="line">		long videoTS = <span class="number">0</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="regexp">// 获取当前屏幕大小</span></span><br><span class="line"><span class="regexp">		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();</span></span><br><span class="line"><span class="regexp">		captureWidth=(int)screenSize.getWidth();</span></span><br><span class="line"><span class="regexp">		captureHeight=(int)screenSize.getHeight();</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 指定捕获屏幕区域大小，这里使用全屏捕获</span><br><span class="line">		Rectangle rectangle = <span class="keyword">new</span> Rectangle(screenSize);</span><br><span class="line">		</span><br><span class="line">		<span class="regexp">// 本地环境</span></span><br><span class="line"><span class="regexp">		GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 获取本地屏幕设备列表</span><br><span class="line">		GraphicsDevice[] gs = ge.getScreenDevices();</span><br><span class="line">		System.err.println(<span class="string">"eguid温馨提示，找到"</span> + gs.length + <span class="string">"个屏幕设备"</span>);</span><br><span class="line">		<span class="regexp">// 目的：取到本地屏幕设备当中可以进行获取本地屏幕的设备下标</span></span><br><span class="line"><span class="regexp">		//</span> 通过robot可以实例化该获取本地屏幕的设备，大概就是这意思，</span><br><span class="line">		<span class="regexp">// 先令该robot机器设置为null,也就是类似于foreach当中的一个变量，所以是不能够放在循环里面的</span></span><br><span class="line"><span class="regexp">		//</span> 去循环遍历该本地屏幕设备列表当中的所有设备，即数组gs，通过下标取出数组当中的该元素来进行实例化robot对象</span><br><span class="line">		<span class="regexp">// 如果存在数组当中有一个下标所对应的元素实例化了robot对象后，</span></span><br><span class="line"><span class="regexp">		//</span> 可以让robot对象切实的获取得到本地屏幕的缓冲图片，且该缓冲图片不为空，并且宽大于<span class="number">0</span></span><br><span class="line">		<span class="regexp">// 即说明该下标所对应在数组当中的该元素即，就是我们所需要寻找的设备</span></span><br><span class="line"><span class="regexp">		Robot robot = null;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">		//</span> -<span class="number">1</span> 猜测：极有可能说的是没有这种可以获取本地屏幕的设备</span><br><span class="line">		int ret = -<span class="number">1</span>;</span><br><span class="line">		BufferedImage img=<span class="literal">null</span>;</span><br><span class="line">		<span class="regexp">// 进行本地屏幕设备数组列表的循环</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		for (int index = 0; index &lt; 10; index++) &#123;</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">			//</span> 从本地屏幕设备列表当中进行一一取出屏幕设备</span><br><span class="line">			GraphicsDevice g = gs[index];</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">			</span><br><span class="line">				<span class="regexp">// 通过robot来进行生成该种获取本地屏幕的机器设备</span></span><br><span class="line"><span class="regexp">				robot = new Robot(g);</span></span><br><span class="line"><span class="regexp">				</span></span><br><span class="line"><span class="regexp">				//</span> 通过该可以获取本地屏幕的机器设备来进行生成本地屏幕，也就是显示器图片</span><br><span class="line">				 img = robot.createScreenCapture(rectangle);</span><br><span class="line">				</span><br><span class="line">				 <span class="regexp">// 判断如果该图片如果不为空的话，并且该图片大于1，也就说明该图片是存在的，有一定宽度，而并不是宽为0，宽为0，即说明该并不是图片了</span></span><br><span class="line"><span class="regexp">				if (img != null &amp;&amp; img.getWidth() &gt; 1) &#123;</span></span><br><span class="line"><span class="regexp">				</span></span><br><span class="line"><span class="regexp">					//</span> 获取得到该机器设备的下标，并赋值给ret</span><br><span class="line">					ret = index;</span><br><span class="line">					</span><br><span class="line">					<span class="regexp">// 当下打断循环，跳出，找到该种设备之后立即打断循环，提高效率</span></span><br><span class="line"><span class="regexp">					break;</span></span><br><span class="line"><span class="regexp">				&#125;</span></span><br><span class="line"><span class="regexp">			&#125; catch (AWTException e) &#123;</span></span><br><span class="line"><span class="regexp">				System.err.println("打开第" + index + "个屏幕设备失败，尝试打开第" + (index + 1) + "个屏幕设备");</span></span><br><span class="line"><span class="regexp">			&#125;</span></span><br><span class="line"><span class="regexp">		&#125;</span></span><br><span class="line"><span class="regexp">		//</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span>/</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * FrameGrabber 类包含：OpenCVFrameGrabber</span></span><br><span class="line"><span class="comment">		 * (opencv_videoio),C1394FrameGrabber, FlyCaptureFrameGrabber,</span></span><br><span class="line"><span class="comment">		 * OpenKinectFrameGrabber,PS3EyeFrameGrabber,VideoInputFrameGrabber, 和</span></span><br><span class="line"><span class="comment">		 * FFmpegFrameGrabber.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line"><span class="comment">/*		OpenCVFrameGrabber grabber = new OpenCVFrameGrabber(WEBCAM_DEVICE_INDEX);</span></span><br><span class="line"><span class="comment">		grabber.setImageWidth(captureWidth);</span></span><br><span class="line"><span class="comment">		grabber.setImageHeight(captureHeight);</span></span><br><span class="line"><span class="comment">		System.out.println("开始抓取摄像头...");</span></span><br><span class="line"><span class="comment">		int isTrue = 0;// 摄像头开启状态</span></span><br><span class="line"><span class="comment">		try &#123;</span></span><br><span class="line"><span class="comment">			grabber.start();</span></span><br><span class="line"><span class="comment">			isTrue += 1;</span></span><br><span class="line"><span class="comment">		&#125; catch (org.bytedeco.javacv.FrameGrabber.Exception e2) &#123;</span></span><br><span class="line"><span class="comment">			if (grabber != null) &#123;</span></span><br><span class="line"><span class="comment">				try &#123;</span></span><br><span class="line"><span class="comment">					grabber.restart();</span></span><br><span class="line"><span class="comment">					isTrue += 1;</span></span><br><span class="line"><span class="comment">				&#125; catch (org.bytedeco.javacv.FrameGrabber.Exception e) &#123;</span></span><br><span class="line"><span class="comment">					isTrue -= 1;</span></span><br><span class="line"><span class="comment">					try &#123;</span></span><br><span class="line"><span class="comment">						grabber.stop();</span></span><br><span class="line"><span class="comment">					&#125; catch (org.bytedeco.javacv.FrameGrabber.Exception e1) &#123;</span></span><br><span class="line"><span class="comment">						isTrue -= 1;</span></span><br><span class="line"><span class="comment">					&#125;</span></span><br><span class="line"><span class="comment">				&#125;</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		if (isTrue &lt; 0) &#123;</span></span><br><span class="line"><span class="comment">			System.err.println("摄像头首次开启失败，尝试重启也失败！");</span></span><br><span class="line"><span class="comment">			return;</span></span><br><span class="line"><span class="comment">		&#125; else if (isTrue &lt; 1) &#123;</span></span><br><span class="line"><span class="comment">			System.err.println("摄像头开启失败！");</span></span><br><span class="line"><span class="comment">			return;</span></span><br><span class="line"><span class="comment">		&#125; else if (isTrue == 1) &#123;</span></span><br><span class="line"><span class="comment">			System.err.println("摄像头开启成功！");</span></span><br><span class="line"><span class="comment">		&#125; else if (isTrue == 1) &#123;</span></span><br><span class="line"><span class="comment">			System.err.println("摄像头首次开启失败，重新启动成功！");</span></span><br><span class="line"><span class="comment">		&#125;*/</span></span><br><span class="line">		<span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">//</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 本机摄像头默认<span class="number">0</span>，这里使用javacv的帧抓取器，至于使用的是ffmpeg还是opencv，请自行查看源码</span><br><span class="line">		FrameGrabber grabber = FrameGrabber.createDefault(ret);</span><br><span class="line">		</span><br><span class="line">		<span class="regexp">// 开启抓取器</span></span><br><span class="line"><span class="regexp">		grabber.start();</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 播放窗口的设置</span><br><span class="line">		System.err.println(<span class="string">"打开的屏幕序号："</span> + ret);</span><br><span class="line">		</span><br><span class="line">		<span class="regexp">// javacv提供的图像展现窗口</span></span><br><span class="line"><span class="regexp">		//</span> title 颜色的校正值</span><br><span class="line">		CanvasFrame frame = <span class="keyword">new</span> CanvasFrame(<span class="string">"camera"</span>, CanvasFrame.getDefaultGamma() / grabber.getGamma());</span><br><span class="line">		</span><br><span class="line">		int width = <span class="number">800</span>;</span><br><span class="line">		int height = <span class="number">600</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="regexp">// 窗口居中</span></span><br><span class="line"><span class="regexp">		frame.setBounds((int) (screenSize.getWidth() - width) / 2, (int) (screenSize.getHeight() - height) / 2, width, height);</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 设置CanvasFrame窗口大小</span><br><span class="line">		frame.setCanvasSize(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="regexp">//frame.setVisible(false);</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 转换器的获取以及配置</span><br><span class="line">		OpenCVFrameConverter.ToIplImage converter = <span class="keyword">new</span> OpenCVFrameConverter.ToIplImage();</span><br><span class="line">		</span><br><span class="line">		<span class="regexp">// 转换器通过抓取器grabber获取当前Frame进行来获取得到IplImage</span></span><br><span class="line"><span class="regexp">		//</span> 抓取一帧视频并将其转换为图像，至于用这个图像用来做什么？加水印，人脸识别等等自行添加</span><br><span class="line">		IplImage grabbedImage = converter.convert(grabber.grab());</span><br><span class="line">		</span><br><span class="line">		<span class="regexp">// 通过当前视频直播放映内容的存储地址以及当前视频直播放映界面的大小来进行创建视频记录器，也就是界面的记录</span></span><br><span class="line"><span class="regexp">		final FrameRecorder recorder = FrameRecorder.createDefault(outputFile, width, height);</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 设置该视频记录器的编码，即将视频直播的流进行编码，也就是直播流/推流进行编码</span><br><span class="line">		<span class="regexp">// avcodec.AV_CODEC_ID_H264，编码</span></span><br><span class="line"><span class="regexp">		recorder.setVideoCodec(avcodec.AV_CODEC_ID_H264);</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 设置记录器的记录视频的格式</span><br><span class="line">		<span class="regexp">// 封装格式，如果是推送到rtmp就必须是flv封装格式</span></span><br><span class="line"><span class="regexp">		recorder.setFormat("flv");</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 设置记录器的记录视频的速率</span><br><span class="line">		recorder.setFrameRate(FRAME_RATE);</span><br><span class="line">		<span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span>/</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * FFmpegFrameRecorder(String filename, int imageWidth, int imageHeight, int audioChannels) </span></span><br><span class="line"><span class="comment">		 * fileName可以是本地文件（会自动创建），也可以是RTMP路径（发布到流媒体服务器）</span></span><br><span class="line"><span class="comment">		 * imageWidth = width （为捕获器设置宽） </span></span><br><span class="line"><span class="comment">		 * imageHeight = height （为捕获器设置高）</span></span><br><span class="line"><span class="comment">		 * audioChannels = 2（立体声）；1（单声道）；0（无音频）</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="regexp">//final FFmpegFrameRecorder recorder = new FFmpegFrameRecorder(outputFile, captureWidth, captureHeight, 2);</span></span><br><span class="line"><span class="regexp">		recorder.setInterleaved(true);</span></span><br><span class="line"><span class="regexp">		recorder.setAudioChannels(2);</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		/**</span></span><br><span class="line"><span class="regexp">		 * 该参数用于降低延迟 参考FFMPEG官方文档：https://</span>trac.ffmpeg.org/wiki/StreamingGuide</span><br><span class="line">		 * 官方原文参考：ffmpeg -f dshow -i video=<span class="string">"Virtual-Camera"</span> -vcodec libx264</span><br><span class="line">		 * -tune zerolatency -b <span class="number">900k</span> -f mpegts udp:<span class="regexp">//10.1.0.102:1234</span></span><br><span class="line"><span class="regexp">		 */</span></span><br><span class="line"><span class="regexp">		recorder.setVideoOption("tune", "zerolatency");</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		/**</span></span><br><span class="line"><span class="regexp">		 * 权衡quality(视频质量)和encode speed(编码速度) values(值)：</span></span><br><span class="line"><span class="regexp">		 * ultrafast(终极快),</span></span><br><span class="line"><span class="regexp">		 * superfast(超级快),</span></span><br><span class="line"><span class="regexp">		 * veryfast(非常快), </span></span><br><span class="line"><span class="regexp">		 * faster(很快), </span></span><br><span class="line"><span class="regexp">		 * fast(快),</span></span><br><span class="line"><span class="regexp">		 * medium(中等), </span></span><br><span class="line"><span class="regexp">		 * slow(慢), </span></span><br><span class="line"><span class="regexp">		 * slower(很慢), </span></span><br><span class="line"><span class="regexp">		 * veryslow(非常慢)</span></span><br><span class="line"><span class="regexp">		 * ultrafast(终极快)提供最少的压缩（低编码器CPU）和最大的视频流大小；</span></span><br><span class="line"><span class="regexp">		 * 而veryslow(非常慢)提供最佳的压缩（高编码器CPU）的同时降低视频流的大小</span></span><br><span class="line"><span class="regexp">		 * 参考：https://</span>trac.ffmpeg.org/wiki/Encode/H.<span class="number">264</span> 官方原文参考：-preset ultrafast</span><br><span class="line">		 * as the name implies provides <span class="keyword">for</span> the fastest possible encoding. If</span><br><span class="line">		 * some tradeoff between quality <span class="keyword">and</span> encode speed, go <span class="keyword">for</span> the speed.</span><br><span class="line">		 * This might be needed <span class="keyword">if</span> you are going <span class="keyword">to</span> be transcoding multiple</span><br><span class="line">		 * streams <span class="literal">on</span> one machine.</span><br><span class="line">		 */</span><br><span class="line">		recorder.setVideoOption(<span class="string">"preset"</span>, <span class="string">"ultrafast"</span>);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 参考转流命令: ffmpeg</span></span><br><span class="line"><span class="comment">		 * -i'udp://localhost:5000?fifo_size=1000000&amp;overrun_nonfatal=1' -crf 30</span></span><br><span class="line"><span class="comment">		 * -preset ultrafast -acodec aac -strict experimental -ar 44100 -ac</span></span><br><span class="line"><span class="comment">		 * 2-b:a 96k -vcodec libx264 -r 25 -b:v 500k -f flv 'rtmp://&lt;wowza</span></span><br><span class="line"><span class="comment">		 * serverIP&gt;/live/cam0' -crf 30</span></span><br><span class="line"><span class="comment">		 * -设置内容速率因子,这是一个x264的动态比特率参数，它能够在复杂场景下(使用不同比特率，即可变比特率)保持视频质量；</span></span><br><span class="line"><span class="comment">		 * 可以设置更低的质量(quality)和比特率(bit rate),参考Encode/H.264 -preset ultrafast</span></span><br><span class="line"><span class="comment">		 * -参考上面preset参数，与视频压缩率(视频大小)和速度有关,需要根据情况平衡两大点：压缩率(视频大小)，编/解码速度 -acodec</span></span><br><span class="line"><span class="comment">		 * aac -设置音频编/解码器 (内部AAC编码) -strict experimental</span></span><br><span class="line"><span class="comment">		 * -允许使用一些实验的编解码器(比如上面的内部AAC属于实验编解码器) -ar 44100 设置音频采样率(audio sample</span></span><br><span class="line"><span class="comment">		 * rate) -ac 2 指定双通道音频(即立体声) -b:a 96k 设置音频比特率(bit rate) -vcodec libx264</span></span><br><span class="line"><span class="comment">		 * 设置视频编解码器(codec) -r 25 -设置帧率(frame rate) -b:v 500k -设置视频比特率(bit</span></span><br><span class="line"><span class="comment">		 * rate),比特率越高视频越清晰,视频体积也会变大,需要根据实际选择合理范围 -f flv</span></span><br><span class="line"><span class="comment">		 * -提供输出流封装格式(rtmp协议只支持flv封装格式) 'rtmp://&lt;FMS server</span></span><br><span class="line"><span class="comment">		 * IP&gt;/live/cam0'-流媒体服务器地址</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		recorder.setVideoOption(<span class="string">"crf"</span>, <span class="string">"25"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="regexp">// 2000 kb/s, 720P视频的合理比特率范围</span></span><br><span class="line"><span class="regexp">		recorder.setVideoBitrate(2000000);</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> h264编/解码器</span><br><span class="line">		<span class="regexp">//recorder.setVideoCodec(avcodec.AV_CODEC_ID_H264);</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 封装格式flv</span><br><span class="line">		<span class="regexp">//recorder.setFormat("flv");</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 视频帧率(保证视频质量的情况下最低<span class="number">25</span>，低于<span class="number">25</span>会出现闪屏)</span><br><span class="line">		<span class="regexp">//recorder.setFrameRate(FRAME_RATE);</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 关键帧间隔，一般与帧率相同或者是视频帧率的两倍</span><br><span class="line">		recorder.setGopSize(FRAME_RATE * <span class="number">2</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="regexp">// 不可变(固定)音频比特率</span></span><br><span class="line"><span class="regexp">		recorder.setAudioOption("crf", "0");</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 最高质量</span><br><span class="line">		recorder.setAudioQuality(<span class="number">0</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="regexp">// 音频比特率</span></span><br><span class="line"><span class="regexp">		recorder.setAudioBitrate(192000);</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 音频采样率</span><br><span class="line">		recorder.setSampleRate(<span class="number">44100</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="regexp">// 双通道(立体声)</span></span><br><span class="line"><span class="regexp">		recorder.setAudioChannels(2);</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 音频编/解码器</span><br><span class="line">		recorder.setAudioCodec(avcodec.AV_CODEC_ID_AAC);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"开始录制..."</span>);</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			recorder.start();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (org.bytedeco.javacv.FrameRecorder.Exception e2) &#123;</span><br><span class="line">			<span class="keyword">if</span> (recorder != <span class="literal">null</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">"关闭失败，尝试重启"</span>);</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					recorder.stop();</span><br><span class="line">					recorder.start();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (org.bytedeco.javacv.FrameRecorder.Exception e) &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						System.out.println(<span class="string">"开启失败，关闭录制"</span>);</span><br><span class="line">						recorder.stop();</span><br><span class="line">						<span class="keyword">return</span> frame;</span><br><span class="line">					&#125; <span class="keyword">catch</span> (org.bytedeco.javacv.FrameRecorder.Exception e1) &#123;</span><br><span class="line">						<span class="keyword">return</span> frame;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"> </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="regexp">// 音频捕获</span></span><br><span class="line"><span class="regexp">		new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="regexp">			@Override</span></span><br><span class="line"><span class="regexp">			public void run() &#123;</span></span><br><span class="line"><span class="regexp">				/**</span></span><br><span class="line"><span class="regexp">				 * 设置音频编码器 最好是系统支持的格式，否则getLine() 会发生错误</span></span><br><span class="line"><span class="regexp">				 * 采样率:44.1k;</span></span><br><span class="line"><span class="regexp">				 * 采样率位数:16位;</span></span><br><span class="line"><span class="regexp">				 * 立体声(stereo);</span></span><br><span class="line"><span class="regexp">				 * 是否签名;true:</span></span><br><span class="line"><span class="regexp">				 * big-endian字节顺序,false:little-endian字节顺序(详见:ByteOrder类)</span></span><br><span class="line"><span class="regexp">				 */</span></span><br><span class="line"><span class="regexp">				AudioFormat audioFormat = new AudioFormat(44100.0F, 16, 2, true, false);</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">				//</span> 通过AudioSystem获取本地音频混合器信息</span><br><span class="line">				Mixer.Info[] minfoSet = AudioSystem.getMixerInfo();</span><br><span class="line">				</span><br><span class="line">				<span class="regexp">// 通过AudioSystem获取本地音频混合器</span></span><br><span class="line"><span class="regexp">				Mixer mixer = AudioSystem.getMixer(minfoSet[AUDIO_DEVICE_INDEX]);</span></span><br><span class="line"><span class="regexp">				</span></span><br><span class="line"><span class="regexp">				//</span> 通过设置好的音频编解码器获取数据线信息</span><br><span class="line">				DataLine.Info dataLineInfo = <span class="keyword">new</span> DataLine.Info(TargetDataLine<span class="class">.<span class="keyword">class</span>, <span class="title">audioFormat</span>);</span></span><br><span class="line">				</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					</span><br><span class="line">					<span class="regexp">// 打开并开始捕获音频</span></span><br><span class="line"><span class="regexp">					//</span> 通过line可以获得更多控制权</span><br><span class="line">					<span class="regexp">// 获取设备：TargetDataLine line</span></span><br><span class="line"><span class="regexp">					//</span> =(TargetDataLine)mixer.getLine(dataLineInfo);</span><br><span class="line">					final TargetDataLine line = (TargetDataLine) AudioSystem.getLine(dataLineInfo);</span><br><span class="line">					</span><br><span class="line">					line.open(audioFormat);</span><br><span class="line">					</span><br><span class="line">					line.start();</span><br><span class="line">					</span><br><span class="line">					<span class="regexp">// 获得当前音频采样率</span></span><br><span class="line"><span class="regexp">					final int sampleRate = (int) audioFormat.getSampleRate();</span></span><br><span class="line"><span class="regexp">					</span></span><br><span class="line"><span class="regexp">					//</span> 获取当前音频通道数量</span><br><span class="line">					final int numChannels = audioFormat.getChannels();</span><br><span class="line">					</span><br><span class="line">					<span class="regexp">// 初始化音频缓冲区(size是音频采样率*通道数)</span></span><br><span class="line"><span class="regexp">					int audioBufferSize = sampleRate * numChannels;</span></span><br><span class="line"><span class="regexp">					</span></span><br><span class="line"><span class="regexp">					final byte[] audioBytes = new byte[audioBufferSize];</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">					ScheduledThreadPoolExecutor exec = new ScheduledThreadPoolExecutor(1);</span></span><br><span class="line"><span class="regexp">					</span></span><br><span class="line"><span class="regexp">					exec.scheduleAtFixedRate(new Runnable() &#123;</span></span><br><span class="line"><span class="regexp">						@Override</span></span><br><span class="line"><span class="regexp">						public void run() &#123;</span></span><br><span class="line"><span class="regexp">							try &#123;</span></span><br><span class="line"><span class="regexp">								//</span> 非阻塞方式读取</span><br><span class="line">								int nBytesRead = line.read(audioBytes, <span class="number">0</span>, line.available());</span><br><span class="line">					</span><br><span class="line">								<span class="regexp">// 因为我们设置的是16位音频格式,所以需要将byte[]转成short[]</span></span><br><span class="line"><span class="regexp">								int nSamplesRead = nBytesRead / 2;</span></span><br><span class="line"><span class="regexp">								</span></span><br><span class="line"><span class="regexp">								short[] samples = new short[nSamplesRead];</span></span><br><span class="line"><span class="regexp">								</span></span><br><span class="line"><span class="regexp">								</span></span><br><span class="line"><span class="regexp">								/**</span></span><br><span class="line"><span class="regexp">								 * ByteBuffer.wrap(audioBytes)-将byte[]数组包装到缓冲区</span></span><br><span class="line"><span class="regexp">								 * ByteBuffer.order(ByteOrder)-按little-endian修改字节顺序，解码器定义的</span></span><br><span class="line"><span class="regexp">								 * ByteBuffer.asShortBuffer()-创建一个新的short[]缓冲区</span></span><br><span class="line"><span class="regexp">								 * ShortBuffer.get(samples)-将缓冲区里short数据传输到short[]</span></span><br><span class="line"><span class="regexp">								 */</span></span><br><span class="line"><span class="regexp">								ByteBuffer.wrap(audioBytes).order(ByteOrder.LITTLE_ENDIAN).asShortBuffer().get(samples);</span></span><br><span class="line"><span class="regexp">								</span></span><br><span class="line"><span class="regexp">								//</span> 将short[]包装到ShortBuffer</span><br><span class="line">								ShortBuffer sBuff = ShortBuffer.wrap(samples, <span class="number">0</span>, nSamplesRead);</span><br><span class="line">								</span><br><span class="line">								<span class="regexp">// 按通道录制shortBuffer</span></span><br><span class="line"><span class="regexp">								 ((FFmpegFrameRecorder) recorder).recordSamples(sampleRate, numChannels, sBuff);</span></span><br><span class="line"><span class="regexp">							</span></span><br><span class="line"><span class="regexp">							&#125; catch (org.bytedeco.javacv.FrameRecorder.Exception e) &#123;</span></span><br><span class="line"><span class="regexp">								e.printStackTrace();</span></span><br><span class="line"><span class="regexp">							&#125;</span></span><br><span class="line"><span class="regexp">						&#125;</span></span><br><span class="line"><span class="regexp">					&#125;, 0, (long) 1000 / FRAME_RATE, TimeUnit.MILLISECONDS);</span></span><br><span class="line"><span class="regexp">				&#125; catch (LineUnavailableException e1) &#123;</span></span><br><span class="line"><span class="regexp">					e1.printStackTrace();</span></span><br><span class="line"><span class="regexp">				&#125;</span></span><br><span class="line"><span class="regexp">			&#125;</span></span><br><span class="line"><span class="regexp">		&#125;).start();</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">//</span></span><br><span class="line"><span class="regexp">		//</span> 设置界面的默认关闭操作的方式，即界面退出的时候</span><br><span class="line">		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">		</span><br><span class="line">		<span class="regexp">// 设置会让录制视频的窗体一直处于屏幕的最前端，即这个窗口永远会挡住别的窗口，所以录制到的内容也就是整个显示器的内容</span></span><br><span class="line"><span class="regexp">		frame.setAlwaysOnTop(true);</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		//</span> 转换器通过进行转化 IplImage图片得到Frame,轮流[按顺序循环];</span><br><span class="line">		<span class="regexp">//Frame rotatedFrame = converter.convert(grabbedImage);//</span> 不知道为什么这里不做转换就不能推到rtmp</span><br><span class="line">		Frame rotatedFrame=converter.convert(toIplImage(robot.createScreenCapture(rectangle)));</span><br><span class="line">		</span><br><span class="line">		<span class="regexp">// //</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">///</span></span><br><span class="line"><span class="regexp">				//</span> <span class="keyword">while</span>判断视频是否还在继续直播，如果继续的话，那么就显示图片</span><br><span class="line">				<span class="keyword">while</span> (frame.isShowing() &amp;&amp; frame.isVisible() &amp;&amp; (grabbedImage = converter.convert(grabber.grab())) != <span class="literal">null</span>) &#123;</span><br><span class="line">		</span><br><span class="line">					<span class="regexp">// 从当前屏幕中读取的像素图像，该图像不包括鼠标光标</span></span><br><span class="line"><span class="regexp">					BufferedImage image = robot.createScreenCapture(rectangle);</span></span><br><span class="line"><span class="regexp">					</span></span><br><span class="line"><span class="regexp">					//</span> 该界面用以来显示图片</span><br><span class="line">					<span class="regexp">//frame.showImage(image);</span></span><br><span class="line"><span class="regexp">					</span></span><br><span class="line"><span class="regexp">					//</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">///</span></span><br><span class="line"><span class="regexp">					//</span> 转换器通过进行转化 IplImage图片得到Frame,轮流[按顺序循环];</span><br><span class="line">					rotatedFrame = converter.convert(toIplImage(robot.createScreenCapture(rectangle)));</span><br><span class="line">					</span><br><span class="line">					<span class="regexp">// 设置该Frame界面当中图为动态的图</span></span><br><span class="line"><span class="regexp">					//</span> frame.showImage(rotatedFrame);</span><br><span class="line">					<span class="regexp">// 如果开始时间为0，即让开始时间变为当前时间，初始化时间戳</span></span><br><span class="line"><span class="regexp">					if (startTime == 0) &#123;</span></span><br><span class="line"><span class="regexp">						startTime = System.currentTimeMillis();</span></span><br><span class="line"><span class="regexp">					&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">					//</span> ((当前时间-视频录制开始的时间)*<span class="number">1000</span>)=从开始到现在的时间差值</span><br><span class="line">					videoTS = <span class="number">1000</span> * (System.currentTimeMillis() - startTime);</span><br><span class="line"></span><br><span class="line">					<span class="regexp">// 设置视频记录器的时间戳</span></span><br><span class="line"><span class="regexp">					//</span>recorder.setTimestamp(videoTS);</span><br><span class="line"></span><br><span class="line">					<span class="regexp">//检查偏移量</span></span><br><span class="line"><span class="regexp">					if (videoTS &gt; recorder.getTimestamp()) &#123;</span></span><br><span class="line"><span class="regexp">						//</span>System.out.println(<span class="string">"Lip-flap correction: "</span> + videoTS + <span class="string">" : "</span> + recorder.getTimestamp() + <span class="string">" -&gt; "</span> + (videoTS - recorder.getTimestamp()));</span><br><span class="line">					</span><br><span class="line">						<span class="regexp">//告诉录制器写入这个timestamp</span></span><br><span class="line"><span class="regexp">						recorder.setTimestamp(videoTS);</span></span><br><span class="line"><span class="regexp">					&#125;</span></span><br><span class="line"><span class="regexp">					</span></span><br><span class="line"><span class="regexp">					//</span> 设置视频的记录为 转化器通过进行转化IplImage图片得到的Frame，该Frame为轮流的</span><br><span class="line">					recorder.record(rotatedFrame);</span><br><span class="line"></span><br><span class="line">					<span class="regexp">// //</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span>/</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="regexp">// 线程沉睡时间40</span></span><br><span class="line"><span class="regexp">						Thread.sleep(40);</span></span><br><span class="line"><span class="regexp">					&#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="regexp">						e.printStackTrace();</span></span><br><span class="line"><span class="regexp">					&#125;</span></span><br><span class="line"><span class="regexp">				&#125;</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">/*		//</span> javaCV提供了优化非常好的硬件加速组件来帮助显示我们抓取的摄像头视频</span><br><span class="line">		CanvasFrame cFrame = <span class="keyword">new</span> CanvasFrame(<span class="string">"Capture Preview"</span>, CanvasFrame.getDefaultGamma() / grabber.getGamma());</span><br><span class="line">		Frame capturedFrame = <span class="literal">null</span>;</span><br><span class="line">		<span class="regexp">// 执行抓取（capture）过程</span></span><br><span class="line"><span class="regexp">		while ((capturedFrame = grabber.grab()) != null) &#123;</span></span><br><span class="line"><span class="regexp">			if (cFrame.isVisible()) &#123;</span></span><br><span class="line"><span class="regexp">				//</span>本机预览要发送的帧</span><br><span class="line">				cFrame.showImage(capturedFrame);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="regexp">//定义我们的开始时间，当开始时需要先初始化时间戳</span></span><br><span class="line"><span class="regexp">			if (startTime == 0)</span></span><br><span class="line"><span class="regexp">				startTime = System.currentTimeMillis();</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">			//</span> 创建一个 timestamp用来写入帧中</span><br><span class="line">			videoTS = <span class="number">1000</span> * (System.currentTimeMillis() - startTime);</span><br><span class="line">			</span><br><span class="line">			<span class="regexp">//检查偏移量</span></span><br><span class="line"><span class="regexp">			if (videoTS &gt; recorder.getTimestamp()) &#123;</span></span><br><span class="line"><span class="regexp">				System.out.println("Lip-flap correction: " + videoTS + " : " + recorder.getTimestamp() + " -&gt; "</span></span><br><span class="line"><span class="regexp">						+ (videoTS - recorder.getTimestamp()));</span></span><br><span class="line"><span class="regexp">			</span></span><br><span class="line"><span class="regexp">				//</span>告诉录制器写入这个timestamp</span><br><span class="line">				recorder.setTimestamp(videoTS);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="regexp">// 发送帧</span></span><br><span class="line"><span class="regexp">			try &#123;</span></span><br><span class="line"><span class="regexp">				recorder.record(capturedFrame);</span></span><br><span class="line"><span class="regexp">			&#125; catch (org.bytedeco.javacv.FrameRecorder.Exception e) &#123;</span></span><br><span class="line"><span class="regexp">				System.out.println("录制帧发生异常，什么都不做");</span></span><br><span class="line"><span class="regexp">			&#125;</span></span><br><span class="line"><span class="regexp">		&#125;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">		cFrame.dispose();*/</span></span><br><span class="line"><span class="regexp">		try &#123;</span></span><br><span class="line"><span class="regexp">			if (recorder != null) &#123;</span></span><br><span class="line"><span class="regexp">				recorder.stop();</span></span><br><span class="line"><span class="regexp">			&#125;</span></span><br><span class="line"><span class="regexp">		&#125; catch (org.bytedeco.javacv.FrameRecorder.Exception e) &#123;</span></span><br><span class="line"><span class="regexp">			System.out.println("关闭录制器失败");</span></span><br><span class="line"><span class="regexp">			try &#123;</span></span><br><span class="line"><span class="regexp">				if (recorder != null) &#123;</span></span><br><span class="line"><span class="regexp">					grabber.stop();</span></span><br><span class="line"><span class="regexp">				&#125;</span></span><br><span class="line"><span class="regexp">			&#125; catch (org.bytedeco.javacv.FrameGrabber.Exception e1) &#123;</span></span><br><span class="line"><span class="regexp">				System.out.println("关闭摄像头失败");</span></span><br><span class="line"><span class="regexp">				return frame;</span></span><br><span class="line"><span class="regexp">			&#125;</span></span><br><span class="line"><span class="regexp">		&#125;</span></span><br><span class="line"><span class="regexp">		try &#123;</span></span><br><span class="line"><span class="regexp">			if (recorder != null) &#123;</span></span><br><span class="line"><span class="regexp">				grabber.stop();</span></span><br><span class="line"><span class="regexp">			&#125;</span></span><br><span class="line"><span class="regexp">		&#125; catch (org.bytedeco.javacv.FrameGrabber.Exception e) &#123;</span></span><br><span class="line"><span class="regexp">			System.out.println("关闭摄像头失败");</span></span><br><span class="line"><span class="regexp">		&#125;</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">		frame.dispose();</span></span><br><span class="line"><span class="regexp">		recorder.stop();</span></span><br><span class="line"><span class="regexp">		recorder.release();</span></span><br><span class="line"><span class="regexp">		grabber.stop();</span></span><br><span class="line"><span class="regexp">		return frame;</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">	&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">	</span></span><br><span class="line"><span class="regexp">	public static void main(String[] args) throws Exception, org.bytedeco.javacv.FrameRecorder.Exception, ParseException &#123;</span></span><br><span class="line"><span class="regexp">		VideoService videoService = new VideoService();</span></span><br><span class="line"><span class="regexp">		String jsonStr = videoService.getPushAddress("Fsn");</span></span><br><span class="line"><span class="regexp">		JSONObject json = JSONObject.parseObject(jsonStr);</span></span><br><span class="line"><span class="regexp">		recordWebcamAndMicrophone(0, 4, json.getString("PUSH_URL"), 800, 600, 25);</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">	&#125;</span></span><br><span class="line"><span class="regexp">	</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>直播</category>
      </categories>
      <tags>
        <tag>直播</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql索引底层数据结构</title>
    <url>/2020/04/15/%E9%9D%A2%E8%AF%95/MySql%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>观看笔记：<br><a href="https://www.bilibili.com/video/BV13x411Z7AQ?from=search&amp;seid=12763347691863057372" target="_blank" rel="noopener">https://www.bilibili.com/video/BV13x411Z7AQ?from=search&amp;seid=12763347691863057372</a></p>
<h3 id="索引的本质"><a href="#索引的本质" class="headerlink" title="索引的本质"></a>索引的本质</h3><p>索引的本质</p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANXwvSlPCJJI2vYZaT3H0rZCG38flqH5eE7TMAOK*DSM1BhWXXI4cugphYQTkM94HMJ9GHGpkBn3QA6a5u74EOK8M!/r" alt="索引"></p>
<ul>
<li>索引是帮助MySQL高效获取数据的排好序的数据结构</li>
<li>索引存储在文件里</li>
<li>索引结构<ul>
<li>二叉树</li>
<li>红黑树</li>
<li>HASH</li>
<li>BTREE</li>
</ul>
</li>
</ul>
<p>问题：有没有在生产环境SQL查询的非常慢，需要优化的。<br>答：真的有过，就是上一家公司做的那个项目关系到全国，省，市，区，县这种的，每次一统计吧就是全国的那种统计，就是该省下有多少人注册了，该市下有多少人注册了…..这种，每次加载大半天都搞不赢，那个页面都出不来。<br>这个属于慢查询吗？我也不是很清楚诶。反正就是数据量贼大，然后用的Oracle数据库，因为还有就是交易量很大。  </p>
<p>问题： 遇到这种问题第一时间想到的优化是什么？<br>答：额，我好像也没有做什么优化，通过主键来进行查询，就是交易量特别大的时候，然后去查询的时候，就是使用的交易表TRANS 当中的主键去进行查询大部分是。然后就是因为是二次开发这个系统，所以在Oracle数据库当中是存在之前的开发者所写的索引的。然后就是不去使用外键，就是外键关联的外键这种不去进行使用，而是有些表当中额怎么说呢，就是有些表当中记录的字段存在，而另外一张表当中因为不去进行关联查询trans表这种数据量大的表就自己这张表也会记录一些数据这种。尽量通过主键去查询，因为通过其他的去查询，比如字符串这种的碰到有些时候会很慢。或者是还有就是写那个查询，navicat当中写个查询然后保存。<br>我想不到其他的了，因为没有怎么用过索引。  </p>
<p>首先检查索引；<br>查看SQL当中的where当中的查询字段是否有加索引；<br>或者说加了索引是否正确索引呢；<br>只要SQL不太烂，正常的走索引，数据量几百万上千万行的数据表，查询的速度依然会很快。  </p>
<p>思考： 一个几百万上千万数据量的表，只要加上了索引，然后查询的条件又是走的索引，关键的字段，为什么查找的速度就能够提高很多，性能会高？<br>答：因为索引就相当于是书的页码，比如我要查询新华字典当中的某一个字，找到它的索引，也就是它的页码，一下子就能找到了。不过至于它的底层方面的原理我不是很清楚。没有过这方面的研究，我也只是听说过是通过b+ 树实现的？  </p>
<p>索引的定义：索引是帮助MySQL高效获取数据的排好序的数据结构。<br>索引结构：  </p>
<ul>
<li>二叉树</li>
<li>红黑树</li>
<li>HASH(哈希表)</li>
<li>BTREE（B树）</li>
</ul>
<p>数据表是存储在磁盘文件当中；所装MySQL当中的data目录，目录下为数据库；<br>表数据实际上就存放在磁盘上了；<br>那从数据表当中去读取数据的时候查询某一行数据的时候，意味着就需要从磁盘上去查询这个数据表当中的数据。<br>如果该数据没有加索引则从第一行开始进行查找；<br>select * from t where t.col2=89;<br>如果该表t没有加任何索引则需要从该表第一行开始遍历。逐行查找逐行比对。直到查找到n次磁盘查找到数据匹配位置。如果要查找的数据在末尾，数据量非常大的情况下，每次从表头进行查找，性能非常差。这也就是全表扫描。  </p>
<p>问题：有什么办法优化SQL查询？  </p>
<ul>
<li>给字段加索引。<br>给col2字段加上索引后，即便是该表当中存在数据量十分大，查询起来的效率也会很高。<br>这个原因是什么？<br>给该字段加上索引之后，该字段作为索引字段之后，它在该表中的存储结构，该字段的存储结构就有一点区别。<br>索引本质上是一种数据结构。<br>所以当给col2字段加上索引之后，那么就会将该col2字段列的数据通过以一种数据结构进行存储起来。  </li>
</ul>
<h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p>二叉树（Binary Search Trees，简写BST）：<a href="https://www.cs.usfca.edu/~galles/visualization/BST.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/BST.html</a>  </p>
<p>比方说，常见的数据结构-二叉树，将col2字段该列的数据放到二叉树当中来，该字段col2的列的数据，每一个数据都放到二叉树当中去；<br>而二叉树的每一个结点是一个key-value的一个取值；也就是说key其实即为索引字段，而value则为箭头的指针；索引字段所对应的这一行的数据，在磁盘上的一个文件指针；<br>如果通过一个合理的方式，或者说是一个好一点的数据结构，来放索引的这个字段，以及每一个索引对应的这一行数据，磁盘文件指针；那么再去看查找这行数据。<br>数据结构-二叉树常识：  </p>
<ul>
<li>根节点（父节点）的右孩子取值大于根节点（父节点）取值；</li>
<li>根节点（父节点）的左孩子取值小于根节点（父节点）取值；</li>
<li>从左到右依次递增；</li>
</ul>
<p>如果要查找 select * from t where t.col2=89这一行数据；<br>用索引字段去查找的话，那么先走索引；<br>而索引是当前被放在二叉树这样一种数据结构当中去了；<br>那么再去进行查找；那么肯定是从根结点开始进行查找；那么第一次查询，从磁盘上进行查询结点后发现34和89对不上，错了；89是大于34的；按照二叉树数据结构的这样一个特点、特性；找到该根结点的右边的子结点，一找即发现当前右边的子结点即为当前查询的结点；然后通过找到的该结点找到该结点所对应的value；该value放的就是这个索引字段所对的那一行的数据磁盘文件指针；那么就可以很快查找得到；<br>通过一种合理的数据结构来放刚加的这个索引字段；那么这个查找的速度就会变得快很多。  </p>
<p>MySQL的底层原理并不是二叉树。<br>MySQL的底层是B+树；<br>MySQL的最终底层为什么选择B+树而不选择其他的数据结构？  </p>
<p>通过一种合理的数据结构来放索引的字段，那么查找的效率就将会快很多；就不用一行一行的去遍历表，即不用全表扫描式查询某一行数据；而是可以先快速的从索引的数据结构当中快速的定位到某一个索引，再把这个索引对应的那一行数据的磁盘文件指针给查询出来，就能够快速的从磁盘上找到该行要查询的数据；  </p>
<p>索引具体是什么样的数据结构？  </p>
<p>MySQL官方没有选择二叉树，说明二叉树在某些场景下是存在问题的；  </p>
<p>for example:  </p>
<p>假设表t，将col1作为索引字段，那么SQL语句就需要变成：<br>select * from t where t.col1=6;来进行查找；<br>现在将col1作为一个二叉树；<br>当t表在插入数据的时候，二叉树插入数据的一个变化过程；<br>二叉树这样一个索引结构的变化；<br>插入第一行数据首先会去维护这个索引，第一列col1的数据呈现的规律为顺序递增，递增；每插入一行数据会先要去维护索引的这个数据结构；<br>索引在二叉树当中存在一个递增的规律，顺序递增；<br>每插入一个数据，首先要维护二叉树（Binary Search Trees）递增顺序的一个字段；<br>二叉树如果是维护这样一个递增顺序的字段作为索引会是一个什么样的一个情况；  </p>
<ul>
<li>索引-BinarySearchTrees插入递增数据<br><img src="/2020/04/15/%E9%9D%A2%E8%AF%95/MySql%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95-BinarySearchTrees%E6%8F%92%E5%85%A5%E9%80%92%E5%A2%9E%E6%95%B0%E6%8D%AE.gif" alt="索引-BinarySearchTrees插入递增数据"></li>
</ul>
<blockquote>
<p>国外二叉树（各种数据结构）的一个教学网站（解析动画演示）：<br><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p>
</blockquote>
<p>插入第一行数据，再插入第二行数据，先进行维护这个索引；<br>如果二叉树维护的是这种单边增长的这种字段，而二叉树正好作为索引的底层数据结构，此时就会出现问题；<br>二叉树也会变成单边增长；<br>二叉树对于这种col1字段是单边增长的这种情况是不符合的；<br>这种用二叉树存储索引字段，就跟在数据表中去全表扫描没有任何区别，效果一样,没有什么区别；<br>二叉树这种数据结构对于索引的存储，索引字段的存储在某些方面是存在局限的；  </p>
<ul>
<li>索引-BinarySearchTrees查询递增数据<br><img src="/2020/04/15/%E9%9D%A2%E8%AF%95/MySql%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95-BinarySearchTrees%E6%9F%A5%E8%AF%A2%E9%80%92%E5%A2%9E%E6%95%B0%E6%8D%AE.gif" alt="索引-BinarySearchTrees查询递增数据"></li>
</ul>
<h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><p>红黑树：<a href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/RedBlack.html</a>  </p>
<p>问题：是否听说过红黑树？<br>答：听说过，且jdk1.8当中HashMap当中链表长度达到8之后就会将数据结构链表转化成红黑树这种数据结构；  </p>
<p>二叉树不行，则看看其他的更好的数据结构是否能够更好的存储索引字段;<br>红黑树也是一种常见的数据结构；<br>jdk在1.8之后，HashMap底层的链表实际上就是用红黑树来做了一个优化；  </p>
<p>插入递增数据会自动平衡；  </p>
<ul>
<li>索引-RedBlack插入递增数据<br><img src="/2020/04/15/%E9%9D%A2%E8%AF%95/MySql%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95-RedBlack%E6%8F%92%E5%85%A5%E9%80%92%E5%A2%9E%E6%95%B0%E6%8D%AE.gif" alt="索引-RedBlack插入递增数据"></li>
</ul>
<p>查询时相对于二叉树来说要少一点；用红黑树来存储索引字段，相对于用普通的二叉树来存储来说，性能稍微高一点；<br>红黑树针对于这种单边增长的这种情况，只要单边出现3个连续递增的结点会做一个自动平衡的处理；那么存储同样的数据的话，整体的高度相对来说红黑树肯定要比二叉树要短；  </p>
<ul>
<li>索引-RedBlack查询递增数据<br><img src="/2020/04/15/%E9%9D%A2%E8%AF%95/MySql%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95-RedBlack%E6%9F%A5%E8%AF%A2%E9%80%92%E5%A2%9E%E6%95%B0%E6%8D%AE.gif" alt="索引-RedBlack查询递增数据"></li>
</ul>
<p>问题：二叉树是可以自动平衡的，那么想一想如果用二叉树来做索引字段存储的数据结构有没有什么弊端？在哪些业务场景当中可能又有一些小问题？<br>答：我想不太出来诶。  </p>
<ul>
<li>红黑树范围查询</li>
<li>当数据量小的时候查询起来效率还在线上；如果当数据量大的话，红黑树将不断的往下增长；树的高度有可能变成2的n次方；这个n即为树的高度；每个结点即2，这个树能够存多少索引字段，即2的n次方；</li>
<li>如果说要查找的n，要查找的那一行的索引字段刚好是在树的叶子结点上面。一般是从根节点上进行遍历，那么查找遍历的次数至少是树的n，高度次这么多；那么从磁盘上要经过几十次，一个结点查找一次，查找一次有一个专业的术语，跟磁盘打一次交道，叫做磁盘IO，这样的话针对磁盘IO来说性能是不高的；效率不是特别高；可以说效率比较低了；如果还经历几十次这样的磁盘IO，性能是肯定没有办法接受的；</li>
</ul>
<p>红黑树这种数据结构，一旦表的数据量特别大的时候，查找数据的效率依然会很慢；<br>因为查找数据可能就在叶子结点上；<br>红黑树在数据量大的时候也是存在弊端的；  </p>
<p>红黑树不行，可以对其做一点点改造；  </p>
<p>即便是大数量情况下，几百万甚至是上千万的数据量下；通过一种数据结构能够快速的定位到所需要的那个数据的索引的字段；从而根据那个索引的字段能够得到结点当中的那个value值，也就是索引所在那一行数据的磁盘文件指针来定位到磁盘上的某一个位置查找到这一行数据；  </p>
<p>可以对红黑树进行改造进行优化；  </p>
<p>红黑树也是二叉树；叫做二叉平衡树；<br>因为红黑树会自动平衡；在红黑树的基础上做一下改造，从而解决在大数据量这种情况下出现的弊端（因为树的高度太高，也就是树存储大数据量的情况下，树的高度太高，磁盘IO就将随着树的高度height增长而增长）；  </p>
<p>问题： 对红黑树进行改造，让红黑树效率更高一点？  </p>
<ul>
<li>n叉树</li>
<li>原来结点存储到磁盘上面，之前结点就只存储一个索引字段，那么可以将这个结点弄大一点，也就是将它的磁盘存储空间分配大一点（也就是让这个结点上多存储几个索引字段）；且每一个索引之间都可以进行分叉，分叉下的索引结点的磁盘存储空间也分配大一点，也存储多个索引字段，每一个结点都可以有多个结点（多个索引元素）；  </li>
</ul>
<p>问题： 这样的存储结构，同样的大数据量的情况下，这样改造红黑树后的结构存储大数据量记录比改造前的红黑树，树的高度要小得多得多；<br>减小了红黑树的纵向，红黑树的高度，而增长了红黑树的横向；<br>横向越长，存储同样大的数据量，树的高度就越矮；树的高度越矮，查找一行数据，也就是某一结点上的数据，那么其效率也就越高；  </p>
<p>已经慢慢接触到MySQL底层的数据结构：<br>这种改造其实就是B树  </p>
<ul>
<li>磁盘存取原理<ul>
<li>寻道时间（速度慢、费时）</li>
<li>旋转时间（速度较快）<br><img src="/2020/04/15/%E9%9D%A2%E8%AF%95/MySql%E7%B4%A2%E5%BC%95/%E7%A3%81%E7%9B%98%E5%AD%98%E5%8F%96%E5%8E%9F%E7%90%86.png" alt="磁盘存取原理"></li>
</ul>
</li>
</ul>
<p>横向查找不就慢了吗？</p>
<h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p>B-Tree</p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANXx5xRm2O7Hw.CPoJY21PbGHy3.R9D2C3BHGRAwPaR*QEhgcUF1UMc2yymaSzxbgBOKNjFYrOEqnDAvX4*fMGPmY!/r" alt="索引"></p>
<ul>
<li>度（Degree）-结点的数据存储个数</li>
<li>叶子结点具有相同的深度</li>
<li>叶子结点的指针为空</li>
<li>结点中的数据key从左到右递增排列</li>
</ul>
<p>刚刚说到红黑树不行，可以在红黑树的横向上做文章；<br>存储同样大的数据量，树的高度将会大大的减小；<br>那就变成了引入B树；  </p>
<ul>
<li>索引-BTree插入递增数据<br><img src="/2020/04/15/%E9%9D%A2%E8%AF%95/MySql%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95-BTree%E6%8F%92%E5%85%A5%E9%80%92%E5%A2%9E%E6%95%B0%E6%8D%AE.gif" alt="索引-BTree插入递增数据"></li>
</ul>
<p>结点内数据有限，不能无限放大；<br>B树比红黑树来说有更大的优点；<br>问题：在横向上做文章，那横向查找不就慢了吗？<br>注意：一个结点的大小是由限制的；结点当中的数据量是有限制的；不可能无限延长、大；比如说给这个结点设置几k大小，或者1Mb这么大；如果这个结点太大；<br>一个结点对应磁盘上的一个磁盘文件地址，对应一个大的磁盘文件地址；<br>MySQL设计的是，尽量的一次磁盘IO查找，在进行查找的时候是希望一次性把这个结点放到内存；<br>MySQL查找一次，跟磁盘做一次磁盘IO交互的时候，它会把这一个横向结点全部放到内存当中；只要这一个结点的数据都放到内存之后；那之后再到这个横向结点当中再进行查找数据；比方说要查找77，那么刚刚说经过了一次磁盘IO之后，会将这一个横向结点当中的所有索引元素都放到内存当中去，那么再去查找77，实际上就是从内存当中去进行查找这个77了；内存当中查找性能就非常快了；内存当中查找跟一次磁盘IO进行查找完全是不同级别的；<br>所以不用担心横向查找是否会慢；  </p>
<p>问题：那是否能将表中的所有行数据都放在一个横向结点当中，将这个横向结点设置为无限大；几百MB或者是几个G的大小用以这个横向结点做存储索引元素？那么一次查找即一次磁盘IO将这些数据一次性放到内存当中；之后就是从内存当中查询索引数据；那就很快了；？  </p>
<p>这个横向结点不能设置太大；<br>如果设置太大那么弊端将存在更多；首先；比如说几百万行上千万行的数据的索引怎么说也要几百MB，甚至1、2G来存储；也跟索引的字段类型有关，比如说String类型或者UUID类型等就肯定要几百MB；那么一次查找就全部放到内存的话；一次磁盘IO就需要花费很长时间，而且一次磁盘IO还不一定能够全部放到内存当中去；<br>一次磁盘IO也是有存在大小限制的；就算一次磁盘IO能够将该横向结点当中的所有的索引元素放到内存当中去，那也需要时间来放着几百MB的索引元素；而且可以思考一下，事先就将这几百MB设置几个G的索引元素直接放到内存当中去，而真正去查找数据的时候可能也就是查找最常用的10%都不到的行数据；<br>如果老是将整张表的数据全部都一次性放到内存当中去；那就将对这个内存的消耗太过于浪费；内存的资源是很宝贵的；<br>所以说这对该弊端；MySQL对于这一个横向结点是不会将其设置过大；尽量设置一个合适的大小；让这个结点，通过一次磁盘IO能够快速全部存入到内存当中；  </p>
<p>B-Tree应该叫做多叉平衡树；<br>B-Tree有一个特点：在中间来看一样也满足二叉树的原则；  </p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX5q0FjtHgrmg9JO6KfRhTseVNI0ZlC7sOBVRXN8io620BWK0osf4XOQsJRaBrrA60171VhwueoMM9fAlldBY.Fs!/r" alt="索引"></p>
<p>56左边的所有元素都小于56相对来说右边的元素；而56右边的索引元素都是大于56左边的父元素；<br>20和49都小于56；而20和49都大于15；  </p>
<p>然后B树还有一个特点就是在这一个结点当中，这一个横向结点当中从左到右它也是递增排序的；15小于56；56小于77；这是B树的一个特性；同时也是该数据结构的一个特性；<br>也就是说要用B树来维护这个数据结构时，它会按照这个特性进行初始化好；需要进行查询某一索引元素时也同样按照其特性去查找；<br>比方说要进行查找49这一索引元素；那么MySQL的查找方式即为：先将第一个结点横向结点根结点通过磁盘IO之后放到内存当中；然后到内存当中进行去比对；先比对15与49之间的大小；49大于15，接着进行比对49与56；则49小于56；然后再去查找比对15和56中间的索引元素；15和56中间存放的是指针，指针存放的是下一个索引元素，也就是下一个结点所对应的磁盘指针整个查询出来；即该指针所对应的结点数据全部放入到内存当中；然后放到内存当中去进行比对大小；然后接下来49与20进行比对，49大于20；那么接着49与49进行比对；就刚好相等；刚好找到该索引远元素了；找到该索引元素之后，则每一个索引当中存放的为key-value；value当中即存储着该索引这一行数据所在的磁盘文件当中的指针；那么拿到这个data之后；磁盘文件指针就能够快速的找到磁盘文件数据；即聚众索引；  </p>
<p>MySQL真正的底层索引并不是用B树来进行实现；而是使用的一种变种的B树，称之为B+树；  </p>
<h4 id="B-Tree-B-Tree变种"><a href="#B-Tree-B-Tree变种" class="headerlink" title="B+Tree(B-Tree变种)"></a>B+Tree(B-Tree变种)</h4><p>B+Tree(B-Tree变种)</p>
<ul>
<li>非叶子结点不存储data，只存储key，可以增大度；</li>
<li>叶子结点不存储指针；</li>
<li>顺序访问指针，提高区间访问性能；</li>
</ul>
<p>什么叫做B+树，B+树是B树的一个变种；  </p>
<p>B+树与B树的区别：<br>B+树：所有的data都放到了叶子结点上；而非叶子结点没有了data；<br>B+树的叶子结点上都有一个右指针；  </p>
<p>问题：为什么B树当中非叶子结点上的data元素都移到了叶子结点上去了；<br>B树当中每一个叶子结点并不重复；而B+树当中一些关键的索引做了冗余；不光是在叶子结点上非叶子结点上也做了冗余；  </p>
<p>非叶子结点上为什么没有data元素了？<br>这么一存的话（非叶子结点上存data元素，非叶子结点不存data元素）；那么就意味着整个B+树的叶子结点当中；就有了数据表的完整的所有行的索引；因为把每一行的data都往叶子结点上移动；那么每一行数据都存在有一个data的磁盘文件指针；那也就意味着；所有的行数据应该在叶子结点都有一份完整；只不过某一些关键的索引的元素；在非叶子结点上做了一个冗余；15、20、49做了冗余；方便遍历数据；一次磁盘IO取更多的k；  </p>
<p>其中常见的数据结构在不同场景下的区别  </p>
<p>MySQL实际上希望的是这一个结点的大小是有一个适当的大小，不能设置太大；<br>也就是说这一个结点的大小是存在有限制的；<br>每一个结点当中能够存储更小的元素，是不是也就意味着；一个大结点当中里面能够存储更多的索引的key；也就是说能够存储更多的索引字段；也就意味着这一个结点在大小相同的情况下；比方说，默认MySQL把这个结点的大小设置为16k；<br>在这一个大结点，一个大小固定的情况下面；这一个大结点当中的每一个小结点如果把data元素移动到叶子结点上去；是不是也就意味着整个这一个大结点可以横向可以存储更多的索引元素；  </p>
<p>那么如果横向可以存储更多的索引元素，那也就意味着这个横向结点向下的分叉也就越多；分叉分得更多，也就说明，存储同样大的数据量，树的高度也就更小了；那么叶子结点也就更大了；  </p>
<p>为什么要将data移动到叶子结点上去的原因就在于：非叶子结点当中也就可以横向存放更多的索引元素；从而树的高度也就效率，查找的效率也就提高了上来；  </p>
<p>MySQL默认把结点的大小设置为16k；<br>SHOW GLOBAL STATUS like ‘Innodb_page_size’;  </p>
<table>
<tr>
<th>Variable_name</th>
<th>Value</th>
</tr>
<tr>
<td>Innodb_page_size</td>
<td>16384</td>
</tr>
</table>

<p>该sql语句查出来的值实际是上就是MySQL底层存储索引字段，B+树的这个大结点的大小；当然也可以去进行修改该值；但是一般并不推荐去修改该值；<br>16384个字节；实际上也就相当于是16k数据；也就是16k的大小；这个大小在磁盘上也就是分配的16k的一个磁盘大小；  </p>
<p>思考：刚刚将data元素放到叶子结点上面去了；现在画的树的高度为3；思考现在高度为3的该树一共可以存储多少索引字段？  </p>
<p>假设该索引字段的字段类型为bigint；表的主键/索引的类型一般为bigint；<br>bigint在MySQL的底层的存储大小大概为8个字节byte；  </p>
<p>大结点当中除了索引字段占据n*8个字节外，还存在有指针；指针在MySQL底层源码使用的是6个字节byte来进行存储这个指针；这个指针说白了就是下个结点在磁盘文件上的一个地址；  </p>
<p>也就是说这个大结点当中存储了这样一个小的索引，以及索引旁边的指针；差不多也就是8Byte+6Byte=14Byte（一个索引+一个指针）；这一个大结点16k大概能够存储多少个索引；<br>公式=16384Byte/(8Byte+6Byte=14Byte)=1,170.285714285714<br>一个大的结点可存储的索引数约为1170个；也就是大概1k的样子；  </p>
<p>那么第二个结点，也可以进行存储1170个索引数；  </p>
<p>再说到叶子结点；所有的data元素都放到叶子结点；那么叶子结点就会变大；每一个小结点就都会变大了相比之前没有放data元素之前变大了；  </p>
<p>假设一下；假设这个叶子结点当中的一个小叶子结点，也就是对应的这一行索引以及该索引所在的行的那个磁盘文件文件指针或者说这一行的其他数据就存储到这个小结点当中；假设这个小结点就大一点，就存储1k的数据；那么这一个存储该小结点的大结点同样是存储16k的数据；那么也就是该结点所能够存储的索引元素为16个；<br>整个叶子结点当中可以容纳多少的索引元素（存储的所有的索引的数值）？<br>公式：（根结点上的1170这一层）1170<em>1170</em>16=21,902,400‬<br>算出来的该值实际上就是该叶子结点上所有可以存储的索引元素的总和；  </p>
<p>非叶子结点的所有的索引元素*每一个叶子结点可以存储的多少个索引行数据  </p>
<p>这个结果算出来差不多等于两千多万；两千多万所算出来的东西；也就意味着该叶子结点能够放的总索引元素个数（小索引元素+data元素）大概是两千多万；（也就相当于是两千多万条/行数据）；  </p>
<p>使用B+树这么一改造之后；发现同样树的高度；高度为3；该树就能够存储两千多万条个索引，也就说明可以支撑两千万行的表；将这两千多万行数据的表当中的一字段作为索引存储到该数据结构当中，那么同样高度为3，height为3，查找一个元素比方说查找50；那么从根结点去进行匹配对比；经过顺序查找；50与父节点/根结点当中的15-56对比，查找中间的数值即该根结点的左节点；也就是再跟15-28-49进行比较，得到50再去与该结点的下一结点比较即49-50；最多经过三次磁盘IO；就能够找到索要查找得到的元素50；性能十分高；  </p>
<p>这也就是为什么上千万行数据；只要索引字段建的比较的合理、合适；那么其磁盘查找次数是非常少的；  </p>
<p>用B+树来说；常见的数据表，树的高度一般就控制在2~4之间；<br>不管如何查询；即使是查询到叶子结点的速度也是十分快的；<br>只需要经过几次磁盘IO查找；  </p>
<h4 id="HASH表"><a href="#HASH表" class="headerlink" title="HASH表"></a>HASH表</h4><p>MySQL的索引字段当中存在有索引方法；点击下拉框进行选择索引方法（存在有两种实现：一种是BTREE；一种是HASH）<br>HASH 也是官方的一种实现；但是使用的不多；<br>90%以上的场景都是使用的B树；<br>为什么不用HASH表的原因：<br>HASH表存储索引的原理：<br>比方说将col1作为索引字段；select * from t where t.col1=4;<br>通过一个hash算法，hash（4）；对该4取了一个HASH；得到的该结果，那么该结果就跟所查询的where t.col1(4)这一行数据所在磁盘文件是有一个映射关系的；<br>这就是HASH表的一个存储结构；<br>HASH实际上就是一种算法；比说MD5;MD5就是一种HASH算法；<br>HASH就是将索引列通过一种HASH算法将索引列的值存放到HASH这一数据结构当中去；<br>那么select * from t where t.col1=6;进行查找该t.col1=6的数据行；的HASH查找即为：对该col1=6；该6的该取值做一次HASH算法运算得到它的结果hash(6)；根据这个结果；只需要做一次映射就能够快速的定位到这一行数据所在的文件磁盘指针；<br>那么即便是千万级别的数据也只需要通过hash()一次HASH结果进行计算定位得到索引所在行数据的文件磁盘指针也是能够快速的查找得到的；感觉HASH表性能更高，比B+树效率更高；B+树还要经过两三次的树的一个遍历；而HASH表的查找感觉更快；<br>只需要有这个索引字段，走索引，经过MYSQL底层定义好索引方法为HASH算法，只需要一次HASH计算结果就能够拿到该查找行数据的所在文件磁盘指针；感觉性能很快；<br>甚至在数据量更大的表当中进行查找表尾的数据，也只需要经过一次HASH计算就能找到该行数据所在的磁盘文件指针；  </p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANXzV2Z6K9IOXoYW6kFdX*NnL.fv6XCleV5BjrQCN4Bw3HvJfkZCF6LFsSX26xC5WuUZwgbGD9vBaj2.Lec10r*m8!/r" alt="索引"></p>
<p>那么为什么MySQL一般用B树而不用HASH表呢？<br>（1）范围查找太慢；比如说select * from t where t.col1&gt;6;<br>      那么当这种情况下；如果col1大于的数值，极端来想的话，也就相当于是全表扫描了；<br>（2）HASH只用于范围查找很少的情况下才进行使用；那么这个时候索引使用HASH是<br>      没有问题的；而正常情况下一般都会要使用得到范围查找所以这个时候使用B Tree更佳；<br>（3）回到问题：为什么InnoDB的主键索引的叶子结点上存在有指针（右指针）？<br>      在维护B+树的时候，比方说叶子结点的最后一个结点满了，那么就需要开辟一个新的结点（下一个结点）来进行存储新的索引元素；那么就将前面那个结点（也就是之前叶子结点的最后一个结点满了的那个结点）中间开辟一个小小的元素空间；把下一个新开辟的这一个结点的磁盘文件地址的指针存放到该新开辟的结点的上一个结点的那个小元素空间当中去；也就说白了；该新开辟的结点的上一结点有一个指针，指向了下一结点，也就是该新开辟的结点的磁盘文件指针；<br>      通过有了这个指针；再联想HASH表的范围查找进行思考，那么是不是说明该指针就能够帮忙解决很大的问题；<br>      比方说：查找索引字段取值col1大于20取值的记录；从B+ 树的索引找到该20的这一个元素；因为整个叶子结点的索引元素都是从左到右依次递增形式的；通过这个（右）指针顺藤摸瓜的形式（其实这里形成了一个双向指针，查询即小于20的元素也是一样的；双向链表），通过指针就能够找到大于20，也就是20这个索引元素后面的所有索引元素结点；最后放到一个大的集合当中去；也就是这条sql语句所要返回的结果集合；  </p>
<p>B+树的两个特性：<br>（1）为了让非叶子结点能够存储更多的索引；从而叶子结点上除了索引元素还存在有data元素；<br>（2）在叶子结点索引元素之间还存在有一个指针指向下一索引元素结点的地址；存在有一个双向的指针；也就是为了解决如何高效的进行范围查找的这样一个问题；所以高效的范围查找也是可以进行走索引的；在某种情况下，范围查找也是可以走索引的；（因为存在指针，存在顺序递增顺序递减的这样一个结构，那么则肯定是可以走相关的索引的）  </p>
<h5 id="B-Tree索引的性能分析"><a href="#B-Tree索引的性能分析" class="headerlink" title="B+Tree索引的性能分析"></a>B+Tree索引的性能分析</h5><ul>
<li>一般使用磁盘I/O次数评价索引结构的优劣</li>
<li>预读：磁盘一般会顺序向后读取一定长度的数据（页的整数倍）放入内存</li>
<li>局部性原理：当一个数据被用到时，其附近的数据也通常会马上被使用；</li>
<li>B+Tree结点的大小设为等于一个页，每次新建结点直接申请一个页的空间，这样就保证一个结点物理上也存储在一个页里，就实现了一个结点的载入只需一次I/O。</li>
<li>B+Tree的度d一般会超过100；因此h非常小（一般为1~3之间）  </li>
<li>一般操作系统的最小存储单元为页，1页大小为4k；  </li>
<li>查看Mysql文件页大小（16k）: SHOW GLOBAL STATUS like ‘Innodb_page_size’;  </li>
</ul>
<h5 id="为什么MySQL页文件默认为16k"><a href="#为什么MySQL页文件默认为16k" class="headerlink" title="为什么MySQL页文件默认为16k"></a>为什么MySQL页文件默认为16k</h5><p>假设一行数据大小为1k；那么一页就能够存16条数据；也就是一个叶子结点能够存16条数据；再看非叶子结点，假设主键ID为bigint类型，那么长度为8B，指针大小在InnoDB源码中为6B，一共就是14B，那么一页里就可以存储16k/14=1170个（主键+指针）<br>那么一棵高度为2的B+树能存储的数据为1170<em>16=18720条，一棵高度为3的B+树能存储的数据为1170</em>1170*16=21902400（千万级条）  </p>
<h3 id="索引底层数据结构与算法"><a href="#索引底层数据结构与算法" class="headerlink" title="索引底层数据结构与算法"></a>索引底层数据结构与算法</h3><h3 id="InnoDB与MyISAM索引区别"><a href="#InnoDB与MyISAM索引区别" class="headerlink" title="InnoDB与MyISAM索引区别"></a>InnoDB与MyISAM索引区别</h3><p>InnoDB形容表还是形容数据库？<br>InnoDB以及MyISAM存储引擎是用来形容数据表的；  </p>
<p>当在设计表时，在选项当中有引擎选项存在有：ARCHIVE、BLACKHOLE、CSV、InnoDB、MEMORY、MRG MYISAM、MyISAM、PERFORMANCE SCHEMA…等等；  </p>
<p>存储引擎是形容表的，最常见的存储引擎即InnoDB以及MyISAM这两种存储引擎；<br>用的比较多的为InnoDB该存储引擎；  </p>
<p>不同表不同存储引擎底层的数据结构区别：  </p>
<p>test数据库对应都是存储在本地磁盘上的；<br>以数据库名命名的磁盘文件夹下；  </p>
<p>表=表结构+数据+索引  </p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX8IZB7poXY4Ed7**8BhOfVx.BLlNb39BqBwC.ebBPiVr7.bXbWAXqMbGapRUkOP8BwmJQWBxopXJj*htdZrocUE!/r" alt="索引"></p>
<p>InnoDB:<br>test.innodb.lock.frm - 表结构等相关信息存储文件<br>test.innodb.lock.ibd - 表数据+表索引结构  </p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX*r9r8zOgb4r0dv8mg9Q5qMyppmh2cPcvbiy6hMFV9ap4rR0IrTk.u5U5HvIcDcxnTh0*XJn4IhWeLwxBiXTkPg!/r" alt="索引"></p>
<p>InnoDB的表有一个主键，该主键自带索引；主键索引在InnoDB存储引擎下如何存储；<br>InnoDB的这种文件存储方式，MySQL官方在开发的时候，InnoDB当中的主键索引以及表当中的所有数据全部存储同一个文件，叫做后缀为ibd的文件当中；<br>InnoDB存储方式当中的叶子结点当中的的data元素所表示的内容与MyISAM存储方式当中叶子结点当中的data元素所表示的内容不一致；索引结构有点区别；<br>MyISAM叶子结点的data元素当中所存为索引所在行的行数据的磁盘文件指针；<br>但是发现InnoDB的主键索引，它的叶子结点当中的data元素当中所存储的为索引所在行的其他所有列的数据；这一行的所有列数据全部存储到该data元素当中去；<br>也就是说在InnoDB当中，通过一条sql语句，带有where查询通过索引进行查询的sql语句；只需要查找一个文件，从这个ibd文件当中一次性定位到索引元素，快速的就能根据data元素，这个索引所在行的其他的所有字段，将该行的所有字段进行查询出来放入内存当中去；就查找到了所需要查找的元素；相对来说性能应该要比MyISAM存储引擎的性能会高一点；  </p>
<p>InnoDB与MyISAM的底层存储是稍微有些区别的；  </p>
<p>MyISAM：<br>test.myisam.frm - 该文件存储对表的表结构一些定义的一些数据；<br>test.myisam.MYD - 实际上存储的为表的数据，D英文单词data的简写（该表当中所有的数据行）；<br>test.myisam.MYI - 该表所对应的索引字段存储的位置；  </p>
<p>主键自带主键索引；索引，它是一个数据结构，数据结构实际上存储在MYI文件当中；I即为Index首字母的简写；  </p>
<p>MyISAM底层也为B+树数据结构进行存储；<br>MyISAM索引底层存储，如何进行存储：  </p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX8sBSc*PWI*GgGhWe3pcWW625GV21FTGHFPkQrnPSFTCe3vCEKM3QCpTupcvYLjHH7f2N4y0qI7TTFDwZaL9fXc!/r" alt="索引"></p>
<p>col1是作为表的主键索引；<br>因为支持二叉查找，所以像15、20、49这种处于在中间的这些个数据将被作为冗余字段；<br>就更可以区分查找数据；像二叉折半查找等；一般取中间的元素作为冗余的索引；快速的过滤一些数据；减少查找次数；<br>将col1该字段列当中的所有数据放入到数据结构当中去；然后看；<br>原来在叶子结点当中存储的data元素，data元素存储的即使该索引所在行的行数据的磁盘文件指针；（地址指针，16进制的值）  </p>
<p>select * from t where t.col1=49;<br>col1主键索引；<br>MySQL底层实际上先会去到MYI文件当中；<br>因为索引（数据结构）存储在MYI索引文件当中；<br>先拿col1=49在MYI文件当中快速地定位到结点为49的结点；<br>根据B+树的特性；<br>先从根结点去进行定位；<br>根结点当中的数据通过一次磁盘IO，根结点当中的索引元素将会被放到内存当中，49将会在内存当中与15-56-77相进行比较；得到49在15-56之间；49就将走15与56中间的向下的指针，左节点也就是存放有15-20-49这三个索引元素的该结点中，那么此时左节点当中的索引元素将会进行第二次磁盘IO的操作，将左节点当中的索引元素放到内存当中去，与查询的数据49相进行比较；得到49在区间20-49之间；最后到了叶子结点，该叶子结点当中包括两个小结点49-50以及2个data元素（指针），那么第三次磁盘IO时，将49-50该叶子结点放到内存当中去，49就将与49-50相进行比较得到49，该49即为要查找的元素；49该小结点当中所对应的data元素拿出来，该data元素对于MyISAM存储引擎来说data元素存储的是为该索引所在行的行数据的磁盘文件指针；当拿到获取得到该指针之后就将到MYD文件当中进行查询获取得到相应数据值；  </p>
<p>面试题：聚集索引or聚众索引  </p>
<p>什么叫做聚集索引?  </p>
<p>聚集索引定义：叶结点包含了完整的数据记录；<br>InnoDB的主键索引，ibd这个主键索引的这个文件；主键索引其就叫做聚集索引；<br>因为InnoDB的主键索引，它是跟它的文件数据行整个是存储在一个文件当中ibd文件；<br>索引和数据是聚集存储在一起的；  </p>
<p>有聚集索引即存在非聚集索引；<br>MyISAM的主键索引就称作是非聚集索引；<br>因为MyISAM的主键索引存储在MYI文件当中；而数据存储在MYD文件当中；<br>那如果需要查找数据，每次都需要两个文件的一同查找才能查找得到；数据文件和索引文件分开存储了；所以称MyISAM的主键索引为非聚集索引；InnoDB的主键索引称为聚集索引；  </p>
<p>常见数据结构理论；  </p>
<p>结合具体的MySQL表来看一下；<br>不同的表底层如何进行存储；<br>MySQL的表无非就是MyISAM存储引擎/InnoDB存储引擎；<br>不同的表可能有不同的存储引擎；  </p>
<p>MyISAM索引实现（非聚集）<br><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX2tYjinQbFQFT5hJICKOua.p8u*tNGRGnBmzDnCDDuui9JbsxaFmbrmLTSu0V4thfYO9zIg6UNnWwUY*NxnoWlU!/r" alt="索引"></p>
<ul>
<li>MyISAM索引文件和数据文件是分离的；</li>
</ul>
<p>InnoDB索引实现（聚集）</p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX*GhKIY3zUQdhemNpwYPZHMTx6WJ6HggRWyAqiDQHIGmxm2m2V7hUQmLQaYwj8CF*g.zfe8sCKjjxpzzRlDfl3I!/r" alt="索引"></p>
<ul>
<li>表数据本身就是按照B+Tree组织的一个索引结构文件</li>
<li>聚集索引-叶结点包含了完整的数据记录</li>
<li>为什么InnoDB表必须要有主键？并且推荐使用整型的自增主键?  <ul>
<li>为什么必须要建主键，MySQL官方对于InnoDB的表，其数据就需要用一个索引B+树来组织；所以肯定是需要主键的；<br>（之间建了InnoDB的表但是没有建索引也建成功了）针对这种情况，MySQL会自动在底层建一个索引；如果表中没有建索引，MySQL会在底层找一个唯一能标识这一行数据的字段作为索引；<br>如果找不到，它会默认给表生成一个类似像row_id，一个隐藏列作为主键索引，主键；<br>根据该表主键索引来维护整张表的数据；MySQl官方设计的就是要用一个B+树的存储结构来组织；B+树其实就是该索引，索引结构；所以必须要有一个主键索引；即便表中没有建立，MySQL也会默认生成一个隐藏的列/主键索引；  </li>
<li>主键尽量为整型自增；为什么主键尽量为整型自增？<br>假设主键不设置为整型，设置为UUID类型，UUID不为整型，而是字符串类型；<br>为什么不推荐使用UUID，而推荐使用整型并且自增的类型；<br>首先用UUID，它是字符串类型的，而且是很长一串，字母+数字+其他符号；<br>这样存在的弊端有：<br>（1）相对于整型来说，首先，这一长串字符串的存储空间比整型大得多（字符串长度越长占用空间越大；索引存放在磁盘上面，那么也将会占用磁盘存储空间；那么UUID存储磁盘空间是肯定会要比整型类型字段要大得多）；<br>（2） 而且，底层B+树索引去进行查找的时候；是需要进行结点之间比较大小的；一个一个根据B+树，二叉一个个进行比较大小找对应的元素；而结点当中存储的都为UUID，一个个去比较大小的话；字符串比较大小，字符串跟数字进行比较，一位一位进行比较性能将会非常的低；字符串去进行比较先要转成ASCII码值（国标码）按照码表当中的顺序进行比较大小；这个性能就非常低了；<br>相对于整型来比较：数值之间的比较性能肯定是高的多的；<br>（3）为什么要使用自增的？UUID肯定不是自增类型的；<br>正常情况下如果是使用顺序自增：插入的元素基本上是往后面进行插入的；后面的结点空间满了，然后继续往后面去开辟一个空间继续放；如果现在新加一个元素；叶子结点从左到右都是依次递增的；在每一个结点当中每一个元素都是依次递增，左边小于右边；B+树当中的所有叶子结点；<br>从左到右都是依次递增的；<br>现在将一个不是自增的新元素UUID进行插入；<br>而插入的位置正好是叶子结点中间的一个位置，而并不是结尾的位置；<br>比如插入到20与30的叶子结点中间；<br>那么这个时候将20和30想象成UUID类型的字符串内容；当新元素UUID进行插入的时候就将会形成分裂的这种情况；<br>有可能就是将20与新元素新分裂出一个叶子结点，30单独分裂出去一个叶子结点；<br>插入的元素需要进行分裂一次；然后还需要平衡一次；<br>相对于这种插入新元素，插入一个元素按顺序递增往后面进行一个一个递增的加元素的这种情况效率就要高多了；<br>这也就是为什么B+ 树推荐的主键索引为整型并且自增类型；<br>因为自增它会尽可能的避免：新增的该结点插入到叶子结点上去了之后，会导致叶子结点原有的已经满了的大的叶子结点做分裂以及自动平衡；<br>（4）指针（B+树的叶子结点上的右指针）的作用：叶子结点当中某一大结点如已经存满了16k的索引元素；按照B+树从左到右的依次递增的顺序；假设当前该字段不是自增的；现在来了一个新的元素需要进行插入数据，看到索引的值比方说为25；那么按顺序这个索引值就应该插入到叶子结点20-30的中间；但是当前该叶子结点的存储空间大小16k已经满了，已经存不下了；<br>那么此时在这种情况下：<br>1&gt;当前叶子结点的存储空间已经满了<br>2&gt;当前需要新插入一个新的索引元素，而该索引元素的大小取值应该放在该当前叶子结点的中间；<br>那么这个时候就需要进行叶子结点的分裂；分裂成两个结点；20与25这两个索引元素成为一个新的叶子结点；而30将被分裂到另外一个叶子结点上面去；<br>而如果插入的元素都是递增类型的元素的话则比如说插入新元素100；那么就肯定不再需要往中间去进行插入；都是直接在后面新开辟一块空间来进行存储该新元素100；  </li>
</ul>
</li>
</ul>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX8fDAvL3g7DJ9HhnBQeGRqDvrpkZXABEIRyvGCl2wXfLlwUZMMrCWHUUoUCg2YMQdB8MP3ElixOLflsVbBIu18U!/r" alt="索引"></p>
<ul>
<li>为什么非主键索引结构叶子结点存储的是主键值？（一致性和节省存储空间）  </li>
</ul>
<h3 id="索引最左前缀原理"><a href="#索引最左前缀原理" class="headerlink" title="索引最左前缀原理"></a>索引最左前缀原理</h3><ul>
<li>联合索引的底层存储结构长什么样?  </li>
</ul>
<p>(字段1，字段2，字段3)<br>比方说字段1、字段2、字段3是联合索引；  </p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX50m84lF6rjqlgyWXpKCriCR9zfdJdu7YbMYTBq.e8Oj47TQyP3KTeZ1anErrKoy5mNBgGaDtLH9DbfHrrCBYYg!/r" alt="索引"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>红黑树</tag>
        <tag>MySql索引</tag>
        <tag>B+树</tag>
        <tag>B树</tag>
        <tag>HASH表</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>前端页面双色球3</title>
    <url>/2020/04/15/%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%94%B9%E8%BF%9B3/</url>
    <content><![CDATA[<h2 id="需求内容"><a href="#需求内容" class="headerlink" title="需求内容"></a>需求内容</h2><p><a href="https://github.com/fengshana/Mamai" target="_blank" rel="noopener">https://github.com/fengshana/Mamai</a>  </p>
<ol>
<li>分页加个页码</li>
<li>这个10出过了很多期的，最近的这一期130，4.10，到今天最新的一期不管数值多少，为止已经多少期没出了，求差值</li>
<li>把搜索的数字加个红色也行</li>
</ol>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX0OntByQ9RopVFKqFo2EAAP.w*ru3lHqrrQXKPPvOiJcpxdOfhwHYah.is4YlEKT.jSTullaIqHR6PMItPvTZnk!/r" alt="image"><br><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX6NdBhxBRYBUy.T6WIURM8FztiZEk0bzwnUWuk2wwu0zeYpSbcbz.bcVfsU6GZo8tyfIU60tglNtx0E4zdfuFgM!/r" alt="image"><br><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX.hsLuSnbnm1WocRcndLv9YK0y2Ojuh2G*eAAF14QcltwhNkZ.r8foxuxlNiqT.LK0X4HY7fncWH*Ik9RrigLc8!/r" alt="image"></p>
<h3 id="接触docker并部署项目"><a href="#接触docker并部署项目" class="headerlink" title="接触docker并部署项目"></a>接触docker并部署项目</h3><p>这边是将项目打包成jar包部署linux环境当中的docker容器内</p>
<p>参考Blog：</p>
<ul>
<li><a href="https://www.jianshu.com/p/397929dbc27d" target="_blank" rel="noopener">https://www.jianshu.com/p/397929dbc27d</a></li>
</ul>
<p>相关命令：</p>
<p>docker ps -a<br>docker images<br>docker stop 镜像的名称<br>docker start 镜像的名称</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">432 </span> cd ../logs/</span><br><span class="line"><span class="symbol">433 </span> tail -<span class="number">300</span>f access.<span class="keyword">log</span></span><br><span class="line"><span class="symbol">434 </span> ../sbin/nginx -s quit</span><br><span class="line"><span class="symbol">435 </span> ../sbin/nginx -s <span class="keyword">stop</span></span><br><span class="line"><span class="symbol">436 </span> cd ../conf</span><br><span class="line"><span class="symbol">437 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">438 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">439 </span> /<span class="keyword">usr</span>/local/nginx/sbin/nginx -c /<span class="keyword">usr</span>/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="symbol">440 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">441 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">442 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">443 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">444 </span> ../sbin/nginx  -s reload</span><br><span class="line"><span class="symbol">445 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">446 </span> cd </span><br><span class="line"><span class="symbol">447 </span> ll</span><br><span class="line"><span class="symbol">448 </span> cd apache-tomcat-<span class="number">8.5.51</span>/</span><br><span class="line"><span class="symbol">449 </span> ll</span><br><span class="line"><span class="symbol">450 </span> ccd logs/</span><br><span class="line"><span class="symbol">451 </span> ll</span><br><span class="line"><span class="symbol">452 </span> cd logs/</span><br><span class="line"><span class="symbol">453 </span> ll</span><br><span class="line"><span class="symbol">454 </span> cd ..</span><br><span class="line"><span class="symbol">455 </span> ll</span><br><span class="line"><span class="symbol">456 </span> cd ..</span><br><span class="line"><span class="symbol">457 </span> ll</span><br><span class="line"><span class="symbol">458 </span> more install.sh </span><br><span class="line"><span class="symbol">459 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">460 </span> cd /<span class="keyword">usr</span>/local/nginx/</span><br><span class="line"><span class="symbol">461 </span> ll</span><br><span class="line"><span class="symbol">462 </span> cd conf</span><br><span class="line"><span class="symbol">463 </span> more nginx.conf</span><br><span class="line"><span class="symbol">464 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">465 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">466 </span> ll</span><br><span class="line"><span class="symbol">467 </span> ps -ef |grep  java</span><br><span class="line"><span class="symbol">468 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">23983</span></span><br><span class="line"><span class="symbol">469 </span> ll</span><br><span class="line"><span class="symbol">470 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">23983</span></span><br><span class="line"><span class="symbol">471 </span> ps -ef |grep  java</span><br><span class="line"><span class="symbol">472 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">703</span></span><br><span class="line"><span class="symbol">473 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">474 </span> ll</span><br><span class="line"><span class="symbol">475 </span> <span class="keyword">mkdir</span> docker</span><br><span class="line"><span class="symbol">476 </span> ll</span><br><span class="line"><span class="symbol">477 </span> cd docker/</span><br><span class="line"><span class="symbol">478 </span> ll</span><br><span class="line"><span class="symbol">479 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">480 </span> cd ..</span><br><span class="line"><span class="symbol">481 </span> ll</span><br><span class="line"><span class="symbol">482 </span> cp Mamai-<span class="number">1.0</span>-SNAPSHOT.jar docker/</span><br><span class="line"><span class="symbol">483 </span> ll</span><br><span class="line"><span class="symbol">484 </span> cd docker/</span><br><span class="line"><span class="symbol">485 </span> ll</span><br><span class="line"><span class="symbol">486 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">487 </span> pwd</span><br><span class="line"><span class="symbol">488 </span> ll</span><br><span class="line"><span class="symbol">489 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">490 </span> docker build -t springbootdemo4docker .</span><br><span class="line"><span class="symbol">491 </span> docker images</span><br><span class="line"><span class="symbol">492 </span> docker <span class="keyword">run</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> springbootdemo4docker</span><br><span class="line"><span class="symbol">493 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">494 </span> ps -ef |grep java</span><br><span class="line"><span class="symbol">495 </span> docker logs --tail <span class="number">300</span> -f demo</span><br><span class="line"><span class="symbol">496 </span> docker ps</span><br><span class="line"><span class="symbol">497 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">498 </span> netstat -na</span><br><span class="line"><span class="symbol">499 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">500 </span> ps -ef|grep java</span><br><span class="line"><span class="symbol">501 </span> ll</span><br><span class="line"><span class="symbol">502 </span> more Dockerfile </span><br><span class="line"><span class="symbol">503 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">504 </span> docker-compose exec java bash</span><br><span class="line"><span class="symbol">505 </span> cd /<span class="keyword">usr</span>/local/bin/</span><br><span class="line"><span class="symbol">506 </span> docker-compose exec java bash</span><br><span class="line"><span class="symbol">507 </span> ll</span><br><span class="line"><span class="symbol">508 </span> netstat -lnp|grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">509 </span> ll</span><br><span class="line"><span class="symbol">510 </span> cd /<span class="keyword">usr</span>/local/nginx/conf</span><br><span class="line"><span class="symbol">511 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">512 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">513 </span> vim nginx.conf</span><br><span class="line"><span class="symbol">514 </span> ../sbin/nginx -s reload</span><br><span class="line"><span class="symbol">515 </span> ll</span><br><span class="line"><span class="symbol">516 </span> cd apache-tomcat-<span class="number">8.5.51</span>/</span><br><span class="line"><span class="symbol">517 </span> ll</span><br><span class="line"><span class="symbol">518 </span> cd ..</span><br><span class="line"><span class="symbol">519 </span> ll</span><br><span class="line"><span class="symbol">520 </span> rm -rf apache-tomcat-<span class="number">8.5.51</span>/</span><br><span class="line"><span class="symbol">521 </span> ll</span><br><span class="line"><span class="symbol">522 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">523 </span> ll</span><br><span class="line"><span class="symbol">524 </span> wget https://mirrors.cnnic.cn/apache/tomcat/tomcat-<span class="number">9</span>/v9.<span class="number">0.7</span>/bin/apache-tomcat-<span class="number">9.0.7.</span>tar.gz</span><br><span class="line"><span class="symbol">525 </span> wget https://archive.apache.org/dist/tomcat/tomcat-<span class="number">8</span>/v8.<span class="number">0.23</span>/bin/apache-tomcat-<span class="number">8.0.23.</span>tar.gz</span><br><span class="line"><span class="symbol">526 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">527 </span> ll</span><br><span class="line"><span class="symbol">528 </span> tar -zxvf apache-tomcat-<span class="number">8.0.23.</span>tar.gz </span><br><span class="line"><span class="symbol">529 </span> ll</span><br><span class="line"><span class="symbol">530 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">531 </span> ll</span><br><span class="line"><span class="symbol">532 </span> cd apache-tomcat-<span class="number">8.0.23</span></span><br><span class="line"><span class="symbol">533 </span> ll</span><br><span class="line"><span class="symbol">534 </span> cd webapps/</span><br><span class="line"><span class="symbol">535 </span> ll</span><br><span class="line"><span class="symbol">536 </span> rm -rf docs/</span><br><span class="line"><span class="symbol">537 </span> rm -rf examples/</span><br><span class="line"><span class="symbol">538 </span> rm -rf host-manager/</span><br><span class="line"><span class="symbol">539 </span> rm -rf manager/</span><br><span class="line"><span class="symbol">540 </span> rm -rf ROOT/</span><br><span class="line"><span class="symbol">541 </span> ll</span><br><span class="line"><span class="symbol">542 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">543 </span> ll</span><br><span class="line"><span class="symbol">544 </span> cd ..</span><br><span class="line"><span class="symbol">545 </span> ll</span><br><span class="line"><span class="symbol">546 </span> cd work/</span><br><span class="line"><span class="symbol">547 </span> ll</span><br><span class="line"><span class="symbol">548 </span> cd ..</span><br><span class="line"><span class="symbol">549 </span> cd conf/</span><br><span class="line"><span class="symbol">550 </span> ll</span><br><span class="line"><span class="symbol">551 </span> vim server.xml </span><br><span class="line"><span class="symbol">552 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">553 </span> cd ..</span><br><span class="line"><span class="symbol">554 </span> cd webapps/</span><br><span class="line"><span class="symbol">555 </span> ll</span><br><span class="line"><span class="symbol">556 </span> pwd</span><br><span class="line"><span class="symbol">557 </span> cd ..</span><br><span class="line"><span class="symbol">558 </span> cd conf/</span><br><span class="line"><span class="symbol">559 </span> vim server.xml </span><br><span class="line"><span class="symbol">560 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">561 </span> ll</span><br><span class="line"><span class="symbol">562 </span> cd ..</span><br><span class="line"><span class="symbol">563 </span> ll</span><br><span class="line"><span class="symbol">564 </span> cd bin</span><br><span class="line"><span class="symbol">565 </span> ./startup.sh </span><br><span class="line"><span class="symbol">566 </span> cd ..</span><br><span class="line"><span class="symbol">567 </span> cd logs/</span><br><span class="line"><span class="symbol">568 </span> ll</span><br><span class="line"><span class="symbol">569 </span> ls</span><br><span class="line"><span class="symbol">570 </span> cd ..</span><br><span class="line"><span class="symbol">571 </span> ls</span><br><span class="line"><span class="symbol">572 </span> cd server</span><br><span class="line"><span class="symbol">573 </span> cd www</span><br><span class="line"><span class="symbol">574 </span> cd server</span><br><span class="line"><span class="symbol">575 </span> ls</span><br><span class="line"><span class="symbol">576 </span> cd tomcat</span><br><span class="line"><span class="symbol">577 </span> ls</span><br><span class="line"><span class="symbol">578 </span> cd bin</span><br><span class="line"><span class="symbol">579 </span> ls</span><br><span class="line"><span class="symbol">580 </span> cd apache-tomcat-<span class="number">8.5.12</span>/</span><br><span class="line"><span class="symbol">581 </span> ls</span><br><span class="line"><span class="symbol">582 </span> cd bin</span><br><span class="line"><span class="symbol">583 </span> ./startup.sh</span><br><span class="line"><span class="symbol">584 </span> ls</span><br><span class="line"><span class="symbol">585 </span> ./startup.sh</span><br><span class="line"><span class="symbol">586 </span> ./shutdown.sh</span><br><span class="line"><span class="symbol">587 </span> ./startup.sh</span><br><span class="line"><span class="symbol">588 </span> ll</span><br><span class="line"><span class="symbol">589 </span> cd apache-tomcat-<span class="number">8.0.23</span></span><br><span class="line"><span class="symbol">590 </span> ll</span><br><span class="line"><span class="symbol">591 </span> cd webapps/</span><br><span class="line"><span class="symbol">592 </span> ll</span><br><span class="line"><span class="symbol">593 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">594 </span> cd ..</span><br><span class="line"><span class="symbol">595 </span> cd webapps/</span><br><span class="line"><span class="symbol">596 </span> ll</span><br><span class="line"><span class="symbol">597 </span> cd myProject</span><br><span class="line"><span class="symbol">598 </span> ll</span><br><span class="line"><span class="symbol">599 </span> cd WEB-INF/</span><br><span class="line"><span class="symbol">600 </span> ll</span><br><span class="line"><span class="symbol">601 </span> cd classes/</span><br><span class="line"><span class="symbol">602 </span> ll</span><br><span class="line"><span class="symbol">603 </span> more application.properties </span><br><span class="line"><span class="symbol">604 </span> cd ..</span><br><span class="line"><span class="symbol">605 </span> ll</span><br><span class="line"><span class="symbol">606 </span> cd ..</span><br><span class="line"><span class="symbol">607 </span> ll</span><br><span class="line"><span class="symbol">608 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">609 </span> cd META-INF/</span><br><span class="line"><span class="symbol">610 </span> ll</span><br><span class="line"><span class="symbol">611 </span> cd ..</span><br><span class="line"><span class="symbol">612 </span> ll</span><br><span class="line"><span class="symbol">613 </span> cd WEB-INF/</span><br><span class="line"><span class="symbol">614 </span> ll</span><br><span class="line"><span class="symbol">615 </span> cd classes/</span><br><span class="line"><span class="symbol">616 </span> ll</span><br><span class="line"><span class="symbol">617 </span> cd templates/</span><br><span class="line"><span class="symbol">618 </span> ll</span><br><span class="line"><span class="symbol">619 </span> cd ..</span><br><span class="line"><span class="symbol">620 </span> ll</span><br><span class="line"><span class="symbol">621 </span> cd classes/</span><br><span class="line"><span class="symbol">622 </span> ll</span><br><span class="line"><span class="symbol">623 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">624 </span> ll</span><br><span class="line"><span class="symbol">625 </span> more application.properties </span><br><span class="line"><span class="symbol">626 </span> ll</span><br><span class="line"><span class="symbol">627 </span> cd templates/</span><br><span class="line"><span class="symbol">628 </span> ll</span><br><span class="line"><span class="symbol">629 </span> cd js/</span><br><span class="line"><span class="symbol">630 </span> ll</span><br><span class="line"><span class="symbol">631 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">632 </span> vim <span class="keyword">common</span>.js </span><br><span class="line"><span class="symbol">633 </span> cd .</span><br><span class="line"><span class="symbol">634 </span> cd ..</span><br><span class="line"><span class="symbol">635 </span> cd conf/</span><br><span class="line"><span class="symbol">636 </span> more server.xml </span><br><span class="line"><span class="symbol">637 </span> cd ..</span><br><span class="line"><span class="symbol">638 </span> cd webapps/</span><br><span class="line"><span class="symbol">639 </span> ll</span><br><span class="line"><span class="symbol">640 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">641 </span> cd myProject</span><br><span class="line"><span class="symbol">642 </span> ll</span><br><span class="line"><span class="symbol">643 </span> cd WEB-INF/</span><br><span class="line"><span class="symbol">644 </span> ll</span><br><span class="line"><span class="symbol">645 </span> cd ca</span><br><span class="line"><span class="symbol">646 </span> cd classes/</span><br><span class="line"><span class="symbol">647 </span> ll</span><br><span class="line"><span class="symbol">648 </span> cd templates/</span><br><span class="line"><span class="symbol">649 </span> ll</span><br><span class="line"><span class="symbol">650 </span> cd js/</span><br><span class="line"><span class="symbol">651 </span> ll</span><br><span class="line"><span class="symbol">652 </span> vim <span class="keyword">common</span>.js </span><br><span class="line"><span class="symbol">653 </span> ps -ef |grep java</span><br><span class="line"><span class="symbol">654 </span> netstat -lnp|grep <span class="number">8082</span></span><br><span class="line"><span class="symbol">655 </span> systemctl status firewalld</span><br><span class="line"><span class="symbol">656 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">657 </span> firewall-cmd --zone=public --add-port=<span class="number">80</span>/tcp --permanent</span><br><span class="line"><span class="symbol">658 </span> firewall-cmd --zone=public --add-port=<span class="number">8082</span>/tcp --permanent</span><br><span class="line"><span class="symbol">659 </span> firewall-cmd --reload</span><br><span class="line"><span class="symbol">660 </span> firewall-cmd --zone=public --query-port=<span class="number">8082</span>/tcp</span><br><span class="line"><span class="symbol">661 </span> history </span><br><span class="line"><span class="symbol">662 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">663 </span> ll</span><br><span class="line"><span class="symbol">664 </span> cd ..</span><br><span class="line"><span class="symbol">665 </span> cd bin/</span><br><span class="line"><span class="symbol">666 </span> ./shutdown.sh </span><br><span class="line"><span class="symbol">667 </span> netstat -lnp|grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">668 </span> netstat -lnp|grep <span class="number">8082</span></span><br><span class="line"><span class="symbol">669 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">1109</span></span><br><span class="line"><span class="symbol">670 </span> netstat -lnp|grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">671 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">672 </span> cd ..</span><br><span class="line"><span class="symbol">673 </span> cd conf/</span><br><span class="line"><span class="symbol">674 </span> ll</span><br><span class="line"><span class="symbol">675 </span> vim server.xml </span><br><span class="line"><span class="symbol">676 </span> cd ..</span><br><span class="line"><span class="symbol">677 </span> cd bin/</span><br><span class="line"><span class="symbol">678 </span> ./startup.sh </span><br><span class="line"><span class="symbol">679 </span> netstat -lnp|grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">680 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">681 </span> ll</span><br><span class="line"><span class="symbol">682 </span> cd ../logs/</span><br><span class="line"><span class="symbol">683 </span> more catalina.<span class="keyword">out</span> </span><br><span class="line"><span class="symbol">684 </span> cd ../webapps/</span><br><span class="line"><span class="symbol">685 </span> cd myProject</span><br><span class="line"><span class="symbol">686 </span> ll</span><br><span class="line"><span class="symbol">687 </span> cd WEB-INF/</span><br><span class="line"><span class="symbol">688 </span> ll</span><br><span class="line"><span class="symbol">689 </span> cd classes/</span><br><span class="line"><span class="symbol">690 </span> ll</span><br><span class="line"><span class="symbol">691 </span> cd templates/</span><br><span class="line"><span class="symbol">692 </span> ll</span><br><span class="line"><span class="symbol">693 </span> cd js/</span><br><span class="line"><span class="symbol">694 </span> ll</span><br><span class="line"><span class="symbol">695 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">696 </span> ll</span><br><span class="line"><span class="symbol">697 </span> vim <span class="keyword">common</span>.js </span><br><span class="line"><span class="symbol">698 </span> cd ..</span><br><span class="line"><span class="symbol">699 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">700 </span> ll</span><br><span class="line"><span class="symbol">701 </span> cd ..</span><br><span class="line"><span class="symbol">702 </span> cd bin/</span><br><span class="line"><span class="symbol">703 </span> ./shutdown.sh </span><br><span class="line"><span class="symbol">704 </span> ll</span><br><span class="line"><span class="symbol">705 </span> cd apache-tomcat-<span class="number">8.0.23</span></span><br><span class="line"><span class="symbol">706 </span> ll</span><br><span class="line"><span class="symbol">707 </span> cd webapps/</span><br><span class="line"><span class="symbol">708 </span> ll</span><br><span class="line"><span class="symbol">709 </span> rm -rf myProject</span><br><span class="line"><span class="symbol">710 </span> rm -rf myProject.war </span><br><span class="line"><span class="symbol">711 </span> cd ..</span><br><span class="line"><span class="symbol">712 </span> cd work/</span><br><span class="line"><span class="symbol">713 </span> ll</span><br><span class="line"><span class="symbol">714 </span> cd Catalina/</span><br><span class="line"><span class="symbol">715 </span> ll</span><br><span class="line"><span class="symbol">716 </span> cd localhost/</span><br><span class="line"><span class="symbol">717 </span> ll</span><br><span class="line"><span class="symbol">718 </span> rm -rf myProject/</span><br><span class="line"><span class="symbol">719 </span> ll</span><br><span class="line"><span class="symbol">720 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">721 </span> cd ../../../</span><br><span class="line"><span class="symbol">722 </span> ll</span><br><span class="line"><span class="symbol">723 </span> cd ..</span><br><span class="line"><span class="symbol">724 </span> cd </span><br><span class="line"><span class="symbol">725 </span> ll</span><br><span class="line"><span class="symbol">726 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">727 </span> history </span><br><span class="line"><span class="symbol">728 </span> ll</span><br><span class="line"><span class="symbol">729 </span> cd docker/</span><br><span class="line"><span class="symbol">730 </span> ll</span><br><span class="line"><span class="symbol">731 </span> docker <span class="keyword">run</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> springbootdemo4docker</span><br><span class="line"><span class="symbol">732 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">733 </span>  docker build -t springbootdemo4docker .</span><br><span class="line"><span class="symbol">734 </span> ll</span><br><span class="line"><span class="symbol">735 </span> more Dockerfile </span><br><span class="line"><span class="symbol">736 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">737 </span> ll</span><br><span class="line"><span class="symbol">738 </span> docker build -t springbootdemo5docker .</span><br><span class="line"><span class="symbol">739 </span> docker build -t springbootdemo4docker .</span><br><span class="line"><span class="symbol">740 </span> service docker restart</span><br><span class="line"><span class="symbol">741 </span> docker build -t springbootdemo5docker .</span><br><span class="line"><span class="symbol">742 </span> docker images</span><br><span class="line"><span class="symbol">743 </span> docker <span class="keyword">run</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> springbootdemo5docker</span><br><span class="line"><span class="symbol">744 </span> docker rmi <span class="number">05</span>c655fd2bd6</span><br><span class="line"><span class="symbol">745 </span> ps -ef |grep java</span><br><span class="line"><span class="symbol">746 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">2632</span></span><br><span class="line"><span class="symbol">747 </span> <span class="keyword">kill</span> -<span class="number">9</span> <span class="number">2874</span></span><br><span class="line"><span class="symbol">748 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">749 </span> cd ..</span><br><span class="line"><span class="symbol">750 </span> ll</span><br><span class="line"><span class="symbol">751 </span> pwd</span><br><span class="line"><span class="symbol">752 </span> ll</span><br><span class="line"><span class="symbol">753 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">754 </span> ll</span><br><span class="line"><span class="symbol">755 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">756 </span> pwd</span><br><span class="line"><span class="symbol">757 </span> ll</span><br><span class="line"><span class="symbol">758 </span> cd docker/</span><br><span class="line"><span class="symbol">759 </span> ll</span><br><span class="line"><span class="symbol">760 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">761 </span> ll</span><br><span class="line"><span class="symbol">762 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">763 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">764 </span> cp ../Mamai-<span class="number">1.0</span>-SNAPSHOT.jar  Mamai-<span class="number">1.0</span>-SNAPSHOT.jar</span><br><span class="line"><span class="symbol">765 </span> ll</span><br><span class="line"><span class="symbol">766 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">767 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">768 </span> cd ..</span><br><span class="line"><span class="symbol">769 </span> ll</span><br><span class="line"><span class="symbol">770 </span> cear</span><br><span class="line"><span class="symbol">771 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">772 </span> ll</span><br><span class="line"><span class="symbol">773 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">774 </span> ll</span><br><span class="line"><span class="symbol">775 </span> tail -<span class="number">300</span>f tempMaima.txt </span><br><span class="line"><span class="symbol">776 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">777 </span> ll</span><br><span class="line"><span class="symbol">778 </span> cp Mamai-<span class="number">1.0</span>-SNAPSHOT.jar ./docker/</span><br><span class="line"><span class="symbol">779 </span> ll</span><br><span class="line"><span class="symbol">780 </span> cd docker/</span><br><span class="line"><span class="symbol">781 </span> ll</span><br><span class="line"><span class="symbol">782 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">783 </span> docker images</span><br><span class="line"><span class="symbol">784 </span> docker start <span class="number">05</span>c655fd2bd6</span><br><span class="line"><span class="symbol">785 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">786 </span> docker build -t springbootdemo6docker .</span><br><span class="line"><span class="symbol">787 </span> docker images</span><br><span class="line"><span class="symbol">788 </span> docker <span class="keyword">run</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> springbootdemo6docker</span><br><span class="line"><span class="symbol">789 </span> docker images</span><br><span class="line"><span class="symbol">790 </span> ll</span><br><span class="line"><span class="symbol">791 </span> cd ..</span><br><span class="line"><span class="symbol">792 </span> ll</span><br><span class="line"><span class="symbol">793 </span> tail -<span class="number">300</span>f tempMaima.txt </span><br><span class="line"><span class="symbol">794 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">795 </span> ll</span><br><span class="line"><span class="symbol">796 </span> cd docker/</span><br><span class="line"><span class="symbol">797 </span> docker images</span><br><span class="line"><span class="symbol">798 </span> docker rmi05c655fd2bd6</span><br><span class="line"><span class="symbol">799 </span> docker rmi <span class="number">05</span>c655fd2bd6</span><br><span class="line"><span class="symbol">800 </span> docker rmi springbootdemo4docker:latest </span><br><span class="line"><span class="symbol">801 </span> docker rmi -f <span class="number">05</span>c655fd2bd6</span><br><span class="line"><span class="symbol">802 </span> docker rmi springbootdemo5docker:latest</span><br><span class="line"><span class="symbol">803 </span> docker rmi -f <span class="number">05</span>c655fd2bd6</span><br><span class="line"><span class="symbol">804 </span> docker images</span><br><span class="line"><span class="symbol">805 </span> ls</span><br><span class="line"><span class="symbol">806 </span> Mamai-<span class="number">1.0</span>-SNAPSHOT.jar.sh <span class="keyword">stop</span></span><br><span class="line"><span class="symbol">807 </span> Mamai-<span class="number">1.0</span>-SNAPSHOT <span class="keyword">stop</span></span><br><span class="line"><span class="symbol">808 </span> Mamai-<span class="number">1.0</span>-SNAPSHOT.jar <span class="keyword">stop</span></span><br><span class="line"><span class="symbol">809 </span> top</span><br><span class="line"><span class="symbol">810 </span> ls</span><br><span class="line"><span class="symbol">811 </span> java -jar Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">812 </span> ls</span><br><span class="line"><span class="symbol">813 </span> ps -ef</span><br><span class="line"><span class="symbol">814 </span> ls</span><br><span class="line"><span class="symbol">815 </span> java -jar Mamai-<span class="number">1.0</span>-SNAPSHOT.jar</span><br><span class="line"><span class="symbol">816 </span> ls</span><br><span class="line"><span class="symbol">817 </span> java -jar Mamai-<span class="number">1.0</span>-SNAPSHOT.jar</span><br><span class="line"><span class="symbol">818 </span> ls</span><br><span class="line"><span class="symbol">819 </span> java -jar Mamai-<span class="number">1.0</span>-SNAPSHOT.jar</span><br><span class="line"><span class="symbol">820 </span> ll</span><br><span class="line"><span class="symbol">821 </span> tail -<span class="number">300</span>f tempMaima.txt </span><br><span class="line"><span class="symbol">822 </span> netstat -lnp|grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">823 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">824 </span> docker ps</span><br><span class="line"><span class="symbol">825 </span> ll</span><br><span class="line"><span class="symbol">826 </span> cd docker/</span><br><span class="line"><span class="symbol">827 </span> ll</span><br><span class="line"><span class="symbol">828 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">829 </span> docker ps</span><br><span class="line"><span class="symbol">830 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">831 </span> ps -ef |grep java</span><br><span class="line"><span class="symbol">832 </span> ps -ef |grep <span class="number">8080</span></span><br><span class="line"><span class="symbol">833 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">834 </span> history </span><br><span class="line"><span class="symbol">835 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">836 </span> cd /</span><br><span class="line"><span class="symbol">837 </span> ll</span><br><span class="line"><span class="symbol">838 </span> cd www/</span><br><span class="line"><span class="symbol">839 </span> ll</span><br><span class="line"><span class="symbol">840 </span> cd server/</span><br><span class="line"><span class="symbol">841 </span> ll</span><br><span class="line"><span class="symbol">842 </span> cd nginx/</span><br><span class="line"><span class="symbol">843 </span> ll</span><br><span class="line"><span class="symbol">844 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">845 </span> ll</span><br><span class="line"><span class="symbol">846 </span> cd bin</span><br><span class="line"><span class="symbol">847 </span> ll</span><br><span class="line"><span class="symbol">848 </span> cd sbin/</span><br><span class="line"><span class="symbol">849 </span> ll</span><br><span class="line"><span class="symbol">850 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">851 </span> ll</span><br><span class="line"><span class="symbol">852 </span> cd .</span><br><span class="line"><span class="symbol">853 </span> cd ..</span><br><span class="line"><span class="symbol">854 </span> cd conf/</span><br><span class="line"><span class="symbol">855 </span> ll</span><br><span class="line"><span class="symbol">856 </span> cd ..</span><br><span class="line"><span class="symbol">857 </span> cd sbin</span><br><span class="line"><span class="symbol">858 </span> ./nginx -c ../conf/nginx.conf</span><br><span class="line"><span class="symbol">859 </span> cd ../conf/</span><br><span class="line"><span class="symbol">860 </span> ll</span><br><span class="line"><span class="symbol">861 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">862 </span> ../sbin/nginx -c nginx.conf</span><br><span class="line"><span class="symbol">863 </span> pwd</span><br><span class="line"><span class="symbol">864 </span> tail -<span class="number">300</span>f nginx.conf</span><br><span class="line"><span class="symbol">865 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">866 </span> cd ..</span><br><span class="line"><span class="symbol">867 </span> cd sbin/</span><br><span class="line"><span class="symbol">868 </span> ./nginx  -s reload</span><br><span class="line"><span class="symbol">869 </span> ll</span><br><span class="line"><span class="symbol">870 </span> cd ..</span><br><span class="line"><span class="symbol">871 </span> ll</span><br><span class="line"><span class="symbol">872 </span> cd logs/</span><br><span class="line"><span class="symbol">873 </span> l</span><br><span class="line"><span class="symbol">874 </span> ll</span><br><span class="line"><span class="symbol">875 </span> tail -<span class="number">300</span>f <span class="keyword">error</span>.<span class="keyword">log</span> </span><br><span class="line"><span class="symbol">876 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">877 </span> cd ..</span><br><span class="line"><span class="symbol">878 </span> ll</span><br><span class="line"><span class="symbol">879 </span> cd ..</span><br><span class="line"><span class="symbol">880 </span> cd </span><br><span class="line"><span class="symbol">881 </span> docker images</span><br><span class="line"><span class="symbol">882 </span> docker image ls</span><br><span class="line"><span class="symbol">883 </span> systemctl daemon-reload</span><br><span class="line"><span class="symbol">884 </span> docker images</span><br><span class="line"><span class="symbol">885 </span> service docker status</span><br><span class="line"><span class="symbol">886 </span> service docker start</span><br><span class="line"><span class="symbol">887 </span> systemctl  docker start</span><br><span class="line"><span class="symbol">888 </span> systemctl docker status</span><br><span class="line"><span class="symbol">889 </span> systemctl restart docker</span><br><span class="line"><span class="symbol">890 </span> systemctl status docker</span><br><span class="line"><span class="symbol">891 </span> docker ps</span><br><span class="line"><span class="symbol">892 </span> docker images</span><br><span class="line"><span class="symbol">893 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">894 </span> docker images</span><br><span class="line"><span class="symbol">895 </span> docker ps -a</span><br><span class="line"><span class="symbol">896 </span> history </span><br><span class="line"><span class="symbol">897 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">898 </span> docker images</span><br><span class="line"><span class="symbol">899 </span> docker ps</span><br><span class="line"><span class="symbol">900 </span> docker ps -a</span><br><span class="line"><span class="symbol">901 </span> docker start gifted_hamilton</span><br><span class="line"><span class="symbol">902 </span> docker ps</span><br><span class="line"><span class="symbol">903 </span> ll</span><br><span class="line"><span class="symbol">904 </span> tail -<span class="number">300</span>f tempMaima.txt </span><br><span class="line"><span class="symbol">905 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">906 </span> history </span><br><span class="line"><span class="symbol">907 </span> ll</span><br><span class="line"><span class="symbol">908 </span> docker ps -a</span><br><span class="line"><span class="symbol">909 </span> docker <span class="keyword">stop</span> gifted_hamilton</span><br><span class="line"><span class="symbol">910 </span> pwd</span><br><span class="line"><span class="symbol">911 </span> ll</span><br><span class="line"><span class="symbol">912 </span> cd docker/</span><br><span class="line"><span class="symbol">913 </span> l</span><br><span class="line"><span class="symbol">914 </span> ll</span><br><span class="line"><span class="symbol">915 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">916 </span> ll</span><br><span class="line"><span class="symbol">917 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">918 </span> ll</span><br><span class="line"><span class="symbol">919 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">920 </span> pwd</span><br><span class="line"><span class="symbol">921 </span> docker ps -a</span><br><span class="line"><span class="symbol">922 </span> ll</span><br><span class="line"><span class="symbol">923 </span> docker start gifted_hamilton</span><br><span class="line"><span class="symbol">924 </span> docker ps -a</span><br><span class="line"><span class="symbol">925 </span> ps -ef |grep java</span><br><span class="line"><span class="symbol">926 </span> ll</span><br><span class="line"><span class="symbol">927 </span> docker ps -a</span><br><span class="line"><span class="symbol">928 </span> docker <span class="keyword">stop</span> gifted_hamilton</span><br><span class="line"><span class="symbol">929 </span> cd docker/</span><br><span class="line"><span class="symbol">930 </span> ll</span><br><span class="line"><span class="symbol">931 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">932 </span> ll</span><br><span class="line"><span class="symbol">933 </span> pwd</span><br><span class="line"><span class="symbol">934 </span> ll</span><br><span class="line"><span class="symbol">935 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">936 </span> docker ps -a</span><br><span class="line"><span class="symbol">937 </span> docker start gifted_hamilton</span><br><span class="line"><span class="symbol">938 </span> docker ps -a</span><br><span class="line"><span class="symbol">939 </span> docker <span class="keyword">stop</span> gifted_hamilton</span><br><span class="line"><span class="symbol">940 </span> docker ps -a</span><br><span class="line"><span class="symbol">941 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">942 </span> docker ps -a</span><br><span class="line"><span class="symbol">943 </span> docker rm gifted_hamilton</span><br><span class="line"><span class="symbol">944 </span> docker ps -a</span><br><span class="line"><span class="symbol">945 </span> docker images</span><br><span class="line"><span class="symbol">946 </span> docker rmi springbootdemo6docker</span><br><span class="line"><span class="symbol">947 </span> docker iamges</span><br><span class="line"><span class="symbol">948 </span> docker images</span><br><span class="line"><span class="symbol">949 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">950 </span> ll</span><br><span class="line"><span class="symbol">951 </span> more Dockerfile </span><br><span class="line"><span class="symbol">952 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">953 </span> docker build -t mamai .</span><br><span class="line"><span class="symbol">954 </span> docker images</span><br><span class="line"><span class="symbol">955 </span> cd ..</span><br><span class="line"><span class="symbol">956 </span> ll</span><br><span class="line"><span class="symbol">957 </span> cd docker/</span><br><span class="line"><span class="symbol">958 </span> ll</span><br><span class="line"><span class="symbol">959 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">960 </span> more Dockerfile </span><br><span class="line"><span class="symbol">961 </span> docker <span class="keyword">run</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> mamai</span><br><span class="line"><span class="symbol">962 </span> docker ps -a</span><br><span class="line"><span class="symbol">963 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">964 </span> ll</span><br><span class="line"><span class="symbol">965 </span> cd .</span><br><span class="line"><span class="symbol">966 </span> c d..</span><br><span class="line"><span class="symbol">967 </span> cd ..</span><br><span class="line"><span class="symbol">968 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">969 </span> ll</span><br><span class="line"><span class="symbol">970 </span> rm -rf Ma</span><br><span class="line"><span class="symbol">971 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">972 </span> ll</span><br><span class="line"><span class="symbol">973 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">974 </span> ll</span><br><span class="line"><span class="symbol">975 </span> rm -rf apache-tomcat-<span class="number">8.0.23</span></span><br><span class="line"><span class="symbol">976 </span> rm -rf apache-tomcat-<span class="number">8.0.23.</span>tar.gz </span><br><span class="line"><span class="symbol">977 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">978 </span> ll</span><br><span class="line"><span class="symbol">979 </span> more install.sh </span><br><span class="line"><span class="symbol">980 </span> <span class="keyword">clear</span></span><br><span class="line"><span class="symbol">981 </span> docker ps -a</span><br><span class="line"><span class="symbol">982 </span> docker <span class="keyword">stop</span> agitated_brown</span><br><span class="line"><span class="symbol">983 </span> ll</span><br><span class="line"><span class="symbol">984 </span> cd docker/</span><br><span class="line"><span class="symbol">985 </span> ll</span><br><span class="line"><span class="symbol">986 </span> rm -rf Mamai-<span class="number">1.0</span>-SNAPSHOT.jar </span><br><span class="line"><span class="symbol">987 </span> ll</span><br><span class="line"><span class="symbol">988 </span> docker  images</span><br><span class="line"><span class="symbol">989 </span> docker ps -a</span><br><span class="line"><span class="symbol">990 </span> docker start agitated_brown</span><br><span class="line"><span class="symbol">991 </span> docker ps -a</span><br><span class="line"><span class="symbol">992 </span> top</span><br><span class="line"><span class="symbol">993 </span> df -h</span><br><span class="line"><span class="symbol">994 </span> top</span><br><span class="line"><span class="symbol">995 </span> ll</span><br><span class="line"><span class="symbol">996 </span> cd docker/</span><br><span class="line"><span class="symbol">997 </span> ll</span><br><span class="line"><span class="symbol">998 </span> more Dockerfile </span><br><span class="line"><span class="symbol">999 </span> history</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>docker</tag>
        <tag>前端</tag>
        <tag>双色球</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql-存储过程</title>
    <url>/2020/04/15/%E9%A2%86%E8%B5%AB/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>在领赫这个项目当中，方便敏捷式开发的存储过程pojo-model层以及mapper的编写。  </p>
<h3 id="david指导"><a href="#david指导" class="headerlink" title="david指导"></a>david指导</h3><ul>
<li>那个存储过程等你有时间你得优化一下，不要名字全是sqlxJava，至少也要说明摸个存储过程是干嘛用的，不然后期很难维护，过几天你自己都忘了哪个 是干嘛用的。</li>
<li>如果业务不熟很复杂，还是少用存储过程，不利于维护。</li>
<li>写存储过程也可以，但是不要搞复杂了，你之前获取产品列表那个存储过程，我感觉你搞复杂了。</li>
<li>我们这业务不存在复杂的计算，基本上关联几张表就能查出数据。如果存在复杂的业务计算的时候存储过程才能发挥他额作用</li>
<li>存储过程可以用，尽力做好备注</li>
<li>两种方式都可以。你那个存储过程那个可以优化一下，通过临时表传递两个存储过程之间的数据不是很好的方式。临时表最好在一个存储过程中使用，不要夸多个存储过程。</li>
</ul>
<p>其实我能说我不会写复杂的sql所以写了存储过程吗？(<em>/ω＼</em>)<br>害  </p>
<h3 id="拼接列的名称"><a href="#拼接列的名称" class="headerlink" title="拼接列的名称"></a>拼接列的名称</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER=<span class="string">`admin`</span>@<span class="string">`%`</span> <span class="keyword">PROCEDURE</span> <span class="string">`concatColume`</span>(<span class="keyword">in</span> t_name <span class="built_in">char</span>(<span class="number">30</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">select</span></span><br><span class="line">			<span class="keyword">GROUP_CONCAT</span>(</span><br><span class="line">			column_name</span><br><span class="line">			) <span class="keyword">as</span> <span class="keyword">java</span></span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">			information_schema. <span class="keyword">columns</span></span><br><span class="line">	<span class="keyword">where</span></span><br><span class="line">			table_name = t_name;</span><br><span class="line">	<span class="keyword">select</span></span><br><span class="line">			<span class="keyword">GROUP_CONCAT</span>(</span><br><span class="line">				<span class="keyword">CONCAT</span>(<span class="string">'#&#123;'</span>,column_name,<span class="string">'&#125;#'</span>)</span><br><span class="line">			) <span class="keyword">as</span> <span class="keyword">java</span></span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">			information_schema. <span class="keyword">columns</span></span><br><span class="line">	<span class="keyword">where</span></span><br><span class="line">			table_name = t_name;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="通过逗号分隔字段取值"><a href="#通过逗号分隔字段取值" class="headerlink" title="通过逗号分隔字段取值"></a>通过逗号分隔字段取值</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `fieldValue_split_by_comma`(<span class="keyword">in</span> splitContent <span class="type">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">BEGIN</span> <span class="comment">-- 原来的procedure - sql9java,现在改名为 field_split_by_comma</span></span><br><span class="line">   <span class="keyword">DECLARE</span> n   <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 特殊字符总个数</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> test_n   <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 特殊字符总个数</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> i   <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 循环变量</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> ind <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 得到特殊字符的下标</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> left_str  <span class="type">varchar</span>(<span class="number">30</span>); <span class="comment">-- 左边的字符串</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> str_value <span class="type">varchar</span>(<span class="number">30</span>); <span class="comment">-- value变量</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> str       <span class="type">varchar</span>(<span class="number">255</span>); <span class="comment">-- 用于拼接的变量</span></span><br><span class="line">	 <span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql5java(num <span class="type">int</span>,s_id <span class="type">varchar</span>(<span class="number">255</span>));</span><br><span class="line">	 <span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql5java;<span class="comment">-- 将拆分出来的那个供应商编号新增入该表					</span></span><br><span class="line">	 <span class="keyword">SET</span> i = <span class="number">1</span>;</span><br><span class="line">	 <span class="keyword">SET</span> str = splitContent;</span><br><span class="line">	 <span class="keyword">SET</span> n = length(str)-length(REPLACE(str,",",""))+<span class="number">1</span>; <span class="comment">-- 总共有多少次需要进行替换以及大小写变化</span></span><br><span class="line">	 <span class="keyword">SET</span> max_sp_recursion_depth = <span class="number">3000</span>;</span><br><span class="line">    <span class="keyword">WHILE</span> i &lt;= n <span class="keyword">DO</span> </span><br><span class="line">		    <span class="keyword">SET</span> ind = LENGTH(SUBSTRING_INDEX(str,<span class="string">','</span>,i)); <span class="comment">-- 特殊字符的下标</span></span><br><span class="line">			  <span class="keyword">SET</span> left_str = SUBSTRING_INDEX(str,<span class="string">','</span>,i); <span class="comment">-- 特殊字符左边的字符串</span></span><br><span class="line">				<span class="keyword">SET</span> test_n =  LENGTH(SUBSTRING_INDEX(left_str,<span class="string">','</span>,i)); <span class="comment">-- 查看截取了的内容是否还有特殊字符</span></span><br><span class="line">				<span class="keyword">if</span>(test_n&lt;<span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">				<span class="keyword">SET</span> str_value = left_str;</span><br><span class="line">				<span class="keyword">else</span>   </span><br><span class="line">				<span class="keyword">SET</span> str_value = SUBSTRING_INDEX(left_str,<span class="string">','</span>,<span class="number">-1</span>);</span><br><span class="line">				<span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">				<span class="keyword">insert</span> <span class="keyword">into</span> tmp_sql5java <span class="keyword">values</span>(i,str_value);</span><br><span class="line">				<span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h3 id="生成基本的-Mapper-映射"><a href="#生成基本的-Mapper-映射" class="headerlink" title="生成基本的 Mapper 映射"></a>生成基本的 Mapper 映射</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `generate_base_mapper`(<span class="keyword">in</span> t_name <span class="type">char</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">BEGIN</span>  <span class="comment">-- 原来的 procedure - sql6java,现在改名为 generate_base_mapper</span></span><br><span class="line">		<span class="comment">-- t_name 即table_name 上送参数为表名称</span></span><br><span class="line">		<span class="keyword">DECLARE</span> columnName <span class="type">varchar</span>(<span class="number">5000</span>);         <span class="comment">-- 原型字段名称</span></span><br><span class="line">		<span class="keyword">DECLARE</span> property <span class="type">varchar</span>(<span class="number">255</span>);           <span class="comment">-- 大小写驼峰字段名称</span></span><br><span class="line">		<span class="keyword">DECLARE</span> mapper <span class="type">varchar</span>(<span class="number">255</span>);             <span class="comment">-- 表映射名称</span></span><br><span class="line">		<span class="keyword">DECLARE</span> <span class="keyword">class</span> <span class="type">varchar</span>(<span class="number">255</span>);              <span class="comment">-- 类名称</span></span><br><span class="line">		<span class="keyword">DECLARE</span> varClass <span class="type">varchar</span>(<span class="number">255</span>);           <span class="comment">-- 变量类名称</span></span><br><span class="line">		<span class="keyword">DECLARE</span> str text(<span class="number">50000</span>);               <span class="comment">-- 字符串变量</span></span><br><span class="line">		<span class="keyword">DECLARE</span> columnsStr <span class="type">varchar</span>(<span class="number">5000</span>);                <span class="comment">-- 列字符串变量</span></span><br><span class="line">		<span class="keyword">DECLARE</span> insertColumnsStr <span class="type">varchar</span>(<span class="number">5000</span>);                <span class="comment">-- 列字符串变量</span></span><br><span class="line">		<span class="keyword">DECLARE</span> propertyStr <span class="type">varchar</span>(<span class="number">5000</span>);               <span class="comment">-- 属性字符串变量</span></span><br><span class="line">		<span class="keyword">DECLARE</span> columnPropertyStr <span class="type">varchar</span>(<span class="number">5000</span>); <span class="comment">-- 列属性字符串变量</span></span><br><span class="line">		<span class="keyword">DECLARE</span> findByIdStr <span class="type">varchar</span>(<span class="number">5000</span>);       <span class="comment">-- 通过主键查找对象方法</span></span><br><span class="line">		<span class="keyword">DECLARE</span> insertRecord <span class="type">varchar</span>(<span class="number">5000</span>);      <span class="comment">-- 新增记录</span></span><br><span class="line">		<span class="keyword">DECLARE</span> selectCount <span class="type">varchar</span>(<span class="number">5000</span>);      <span class="comment">-- 新增记录</span></span><br><span class="line">		<span class="keyword">DECLARE</span> findAll <span class="type">varchar</span>(<span class="number">5000</span>);      <span class="comment">-- 新增记录</span></span><br><span class="line">		<span class="keyword">DECLARE</span> head <span class="type">varchar</span>(<span class="number">5000</span>);              <span class="comment">-- 新增记录</span></span><br><span class="line">		<span class="keyword">DECLARE</span> resultMapper text(<span class="number">10000</span>);             <span class="comment">-- 新增记录</span></span><br><span class="line">		<span class="keyword">DECLARE</span> n  <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span> ;             <span class="comment">-- 总共的字段数</span></span><br><span class="line">		<span class="keyword">DECLARE</span> i  <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>;              <span class="comment">-- 循环时的变量</span></span><br><span class="line">		<span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql2java(property_name <span class="type">varchar</span>(<span class="number">255</span>));</span><br><span class="line">		<span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql2java;</span><br><span class="line">		<span class="keyword">SET</span> i = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">SET</span> str = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">SET</span> columnsStr = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">SET</span> insertColumnsStr = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">SET</span> propertyStr = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">SET</span> columnPropertyStr = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">SET</span> findByIdStr = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">SET</span> insertRecord = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">SET</span> selectCount =<span class="string">''</span>;      <span class="comment">-- 新增记录</span></span><br><span class="line">		<span class="keyword">SET</span> findAll =<span class="string">''</span>;</span><br><span class="line">		<span class="keyword">SET</span> property = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">SET</span> mapper = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">SET</span> <span class="keyword">class</span> = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">SET</span> varClass = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">SET</span> resultMapper = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">CALL</span> generate_class_mapperClass_name(t_name,<span class="string">'Mapper'</span>,@mapperName);       <span class="comment">-- 通过表名称获取得到Mapper类名称</span></span><br><span class="line">		<span class="keyword">CALL</span> generate_class_mapperClass_name(t_name,<span class="string">''</span>,@className);  <span class="comment">-- 通过表名称获取得到Model类名称</span></span><br><span class="line">		<span class="keyword">SET</span> mapper = @mapperName;</span><br><span class="line">		<span class="keyword">SET</span> <span class="keyword">class</span> = @className;</span><br><span class="line">		<span class="keyword">SET</span> head = CONCAT(</span><br><span class="line">										<span class="string">'&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n'</span>,</span><br><span class="line">										<span class="string">'&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;\n'</span>,</span><br><span class="line">										<span class="string">'&lt;mapper namespace="com.yourshares.entity.dao.'</span>,</span><br><span class="line">										mapper,</span><br><span class="line">										<span class="string">'"&gt;\n'</span>,</span><br><span class="line">										<span class="string">'&lt;resultMap id="BaseResultMap" type="com.yourshares.entity.model.'</span>,</span><br><span class="line">										<span class="keyword">class</span>,</span><br><span class="line">										<span class="string">'"&gt;\n'</span></span><br><span class="line">										);</span><br><span class="line">		<span class="keyword">select</span> COUNT(*) <span class="keyword">into</span> n <span class="keyword">from</span> information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name; <span class="comment">-- 总共的字段</span></span><br><span class="line"><span class="keyword">WHILE</span> i &lt;= n <span class="keyword">DO</span> 	                          <span class="comment">-- 循环</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">column_name</span> <span class="keyword">into</span> columnName <span class="keyword">from</span> information_schema.`<span class="keyword">columns</span>` <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i;</span><br><span class="line"><span class="keyword">CALL</span> generate_property_name(columnName,@propertyName);    <span class="comment">-- 通过表字段获取得到属性名称</span></span><br><span class="line"><span class="keyword">SET</span>  property = @propertyName;              <span class="comment">-- 赋值</span></span><br><span class="line"><span class="keyword">CALL</span> generate_class_mapperClass_name(columnName,<span class="string">'Mapper'</span>,@varClassName);</span><br><span class="line"><span class="keyword">SET</span>  varClass = @varClassName;</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">		CONCAT(</span><br><span class="line">					columnPropertyStr,</span><br><span class="line">					<span class="keyword">case</span></span><br><span class="line">					<span class="keyword">when</span> column_key <span class="keyword">in</span> (<span class="string">'PRI'</span>) <span class="keyword">then</span>  <span class="string">'&lt;id column="'</span> </span><br><span class="line">					<span class="keyword">when</span> column_key <span class="keyword">not</span> <span class="keyword">in</span>  (<span class="string">'PRI'</span>,<span class="string">'MUL'</span>)   <span class="keyword">then</span>  <span class="string">'&lt;result column="'</span></span><br><span class="line">					<span class="keyword">when</span> column_key <span class="keyword">in</span> (<span class="string">'MUL'</span>) <span class="keyword">then</span>  <span class="string">'&lt;association column="'</span></span><br><span class="line">					<span class="keyword">end</span>,</span><br><span class="line">					<span class="built_in">column_name</span>,</span><br><span class="line">					CONCAT(<span class="string">'" property="'</span>, property, <span class="string">'"  '</span>),</span><br><span class="line">					<span class="keyword">case</span></span><br><span class="line">					<span class="keyword">when</span> column_key <span class="keyword">in</span> (<span class="string">'PRI'</span>) <span class="keyword">then</span> </span><br><span class="line">																	CONCAT(</span><br><span class="line">																	<span class="string">'jdbcType="'</span> ,</span><br><span class="line">																	<span class="keyword">case</span></span><br><span class="line">																	<span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'int'</span>,<span class="string">'smallint'</span>) <span class="keyword">then</span> <span class="string">'INTEGER'</span></span><br><span class="line">																	<span class="keyword">else</span> UPPER(data_type)</span><br><span class="line">																	<span class="keyword">end</span>,</span><br><span class="line">																	<span class="string">'"  /&gt;\n'</span></span><br><span class="line">																	)</span><br><span class="line">				  <span class="keyword">when</span> column_key <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'PRI'</span>,<span class="string">'MUL'</span>) <span class="keyword">then</span> </span><br><span class="line">																	CONCAT(</span><br><span class="line">																	<span class="string">'jdbcType="'</span> ,</span><br><span class="line">																	<span class="keyword">case</span></span><br><span class="line">																	<span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'int'</span>,<span class="string">'smallint'</span>) <span class="keyword">then</span> <span class="string">'INTEGER'</span></span><br><span class="line">																	<span class="keyword">else</span> UPPER(data_type)</span><br><span class="line">																	<span class="keyword">end</span>,</span><br><span class="line">																	<span class="string">'"  /&gt;\n'</span></span><br><span class="line">																	)</span><br><span class="line">					<span class="keyword">when</span> column_key <span class="keyword">in</span> (<span class="string">'MUL'</span>) <span class="keyword">then</span> </span><br><span class="line">																	CONCAT(</span><br><span class="line">																	<span class="string">'select="com.yourshares.entity.dao.'</span>,</span><br><span class="line">																	@varClassName,</span><br><span class="line">																	<span class="string">'.findById"&gt;&lt;/association&gt;\n'</span></span><br><span class="line">																	)</span><br><span class="line">					<span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">					<span class="keyword">end</span></span><br><span class="line">		) <span class="keyword">into</span> columnPropertyStr </span><br><span class="line">		<span class="keyword">from</span></span><br><span class="line">				information_schema.<span class="keyword">columns</span></span><br><span class="line">		<span class="keyword">where</span></span><br><span class="line">				<span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i;</span><br><span class="line">				</span><br><span class="line"><span class="keyword">SET</span> str = CONCAT(str,columnPropertyStr); <span class="comment">-- 拼接resultMap节点当中的子节点</span></span><br><span class="line"><span class="keyword">select</span> CONCAT(columnsStr,<span class="string">'a.'</span>,<span class="built_in">column_name</span>,<span class="string">','</span>) <span class="keyword">into</span> columnsStr <span class="keyword">from</span>  information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i; <span class="comment">-- 所有字段列</span></span><br><span class="line"><span class="keyword">select</span> CONCAT(insertColumnsStr,<span class="built_in">column_name</span>,<span class="string">','</span>) <span class="keyword">into</span> insertColumnsStr <span class="keyword">from</span>  information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i; <span class="comment">-- 所有字段列</span></span><br><span class="line"><span class="keyword">select</span> CONCAT(propertyStr,<span class="string">'#&#123;'</span>,property,<span class="string">'&#125;,'</span>) <span class="keyword">into</span> propertyStr <span class="keyword">from</span>  information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i; <span class="comment">-- 所有属性列</span></span><br><span class="line"><span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>; </span><br><span class="line"><span class="keyword">SET</span> columnsStr = SUBSTRING(columnsStr,<span class="number">1</span>,LENGTH(columnsStr)<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">SET</span> propertyStr = SUBSTRING(propertyStr,<span class="number">1</span>,LENGTH(propertyStr)<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">SET</span> findByIdStr = CONCAT(</span><br><span class="line">											<span class="string">'&lt;select id="findById" parameterType="java.lang.Integer" resultMap="BaseResultMap"&gt;\n'</span>,</span><br><span class="line">											<span class="string">'select '</span>, columnsStr, <span class="string">' from '</span>, t_name, <span class="string">' a where a.id=#&#123;value&#125; \n'</span>,</span><br><span class="line">											<span class="string">'&lt;/select&gt;\n'</span></span><br><span class="line">											);  <span class="comment">-- 查询语句</span></span><br><span class="line"><span class="keyword">SET</span> insertRecord = CONCAT(</span><br><span class="line">											<span class="string">'&lt;insert id="insertRecord" parameterType="com.yourshares.entity.model.'</span>, <span class="keyword">class</span>, <span class="string">'"&gt;\n'</span>,</span><br><span class="line">											<span class="string">' insert into '</span>,t_name, <span class="string">'\n'</span>,<span class="string">'('</span>,insertColumnsStr,<span class="string">')\n'</span>, <span class="string">'values\n'</span>, <span class="string">'('</span>,propertyStr,<span class="string">')\n'</span>,</span><br><span class="line">											<span class="string">'&lt;/insert&gt;\n'</span></span><br><span class="line">											);  <span class="comment">-- 新增语句</span></span><br><span class="line"><span class="keyword">SET</span> selectCount = CONCAT(</span><br><span class="line">												<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span></span><br><span class="line">											);</span><br><span class="line"><span class="keyword">SET</span> selectCount = CONCAT(</span><br><span class="line">												<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span></span><br><span class="line">											);</span><br><span class="line"><span class="keyword">SET</span> resultMapper = CONCAT(	</span><br><span class="line">														head,</span><br><span class="line">														columnPropertyStr,</span><br><span class="line">														<span class="string">'&lt;/resultMap&gt;\n'</span>,</span><br><span class="line">														findByIdStr,</span><br><span class="line">														insertRecord,</span><br><span class="line">												    <span class="string">'&lt;/mapper&gt;'</span></span><br><span class="line">													);</span><br><span class="line"><span class="keyword">select</span> resultMapper;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h3 id="生成类的名称，以及映射类的名称"><a href="#生成类的名称，以及映射类的名称" class="headerlink" title="生成类的名称，以及映射类的名称"></a>生成类的名称，以及映射类的名称</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `generate_class_mapperClass_name`(<span class="keyword">in</span> t_name <span class="type">varchar</span>(<span class="number">255</span>),<span class="keyword">in</span> split_joint_str <span class="type">varchar</span>(<span class="number">255</span>), <span class="keyword">out</span> property_name <span class="type">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">BEGIN</span> <span class="comment">-- 原来的 procedure - sql5java,现在改名为  generate_class_mapperClass_name,用于生成类名称或者是映射类的名称</span></span><br><span class="line">   <span class="keyword">DECLARE</span> n   <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 特殊字符总个数</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> i   <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 循环变量</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> ind <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 得到特殊字符的下标</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> left_str  <span class="type">varchar</span>(<span class="number">255</span>); <span class="comment">-- 左边的字符串</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> right_str <span class="type">varchar</span>(<span class="number">255</span>); <span class="comment">-- 右边的字符串</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> midd_char <span class="type">varchar</span>(<span class="number">255</span>); <span class="comment">-- 中间的那个需要修改的字符</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> str       <span class="type">varchar</span>(<span class="number">1024</span>); <span class="comment">-- 用于拼接的变量</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> first_str <span class="type">varchar</span>(<span class="number">255</span>); <span class="comment">-- 第一个字符</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> join_str  <span class="type">varchar</span>(<span class="number">255</span>); <span class="comment">-- 拼接进来的字符串</span></span><br><span class="line">	 <span class="keyword">SET</span> i = <span class="number">1</span>;</span><br><span class="line">	 <span class="keyword">SET</span> str = t_name;</span><br><span class="line">	 <span class="keyword">SET</span> join_str = split_joint_str;</span><br><span class="line">	 <span class="keyword">SET</span> n = length(str)-length(REPLACE(str,"_",""))+<span class="number">1</span>; <span class="comment">-- 总共有多少次需要进行替换以及大小写变化</span></span><br><span class="line">    <span class="keyword">WHILE</span> i &lt; n <span class="keyword">DO</span> </span><br><span class="line">		    <span class="keyword">SET</span> ind = LENGTH(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i)); <span class="comment">-- 特殊字符的下标</span></span><br><span class="line">			  <span class="keyword">SET</span> left_str = CONCAT(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i),<span class="string">'_'</span>); <span class="comment">-- 特殊字符左边的字符串</span></span><br><span class="line">				<span class="keyword">SET</span> right_str = </span><br><span class="line">				SUBSTRING(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i-(n)),<span class="number">2</span>,LENGTH(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i-(n)))); <span class="comment">-- 特殊字符右边的字符串</span></span><br><span class="line">				<span class="keyword">SET</span> midd_char = UPPER(SUBSTRING(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i-(n)),<span class="number">1</span>,<span class="number">1</span>)); <span class="comment">-- 需要变化成大写的字符</span></span><br><span class="line">				<span class="keyword">SET</span> str = concat(left_str,midd_char,right_str); <span class="comment">-- 对str字符串变量进行重新赋值</span></span><br><span class="line">				<span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">		<span class="keyword">SET</span> first_str = UPPER(SUBSTRING(str,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">		<span class="keyword">SET</span> str = SUBSTRING(REPLACE(str,"_",""),<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">SET</span> property_name = CONCAT(first_str,str,join_str);</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h3 id="生成模型层model层的属性-区分大小写"><a href="#生成模型层model层的属性-区分大小写" class="headerlink" title="生成模型层model层的属性,区分大小写"></a>生成模型层model层的属性,区分大小写</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `generate_model_case`(<span class="keyword">in</span> t_name <span class="type">char</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">BEGIN</span>  <span class="comment">-- 原来的procedure - sql4java,现在改名为 generate_model_case,生成model层属性，属性名称驼峰处理</span></span><br><span class="line"><span class="keyword">DECLARE</span> columnName <span class="type">varchar</span>(<span class="number">1000</span>); <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> property <span class="type">varchar</span>(<span class="number">5000</span>);   <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> str <span class="type">varchar</span>(<span class="number">5000</span>);       <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> n  <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span> ;     <span class="comment">-- 总共的字段数</span></span><br><span class="line"><span class="keyword">DECLARE</span> i  <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>;      <span class="comment">-- 循环时的变量</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql2java(property_name <span class="type">varchar</span>(<span class="number">5000</span>));</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql2java;</span><br><span class="line"><span class="keyword">SET</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> count(*) <span class="keyword">into</span> n <span class="keyword">from</span> information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name;</span><br><span class="line"><span class="keyword">WHILE</span> i &lt;= n <span class="keyword">DO</span> 	</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">column_name</span> <span class="keyword">into</span> columnName <span class="keyword">from</span> information_schema.`<span class="keyword">columns</span>` <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i;</span><br><span class="line"><span class="keyword">CALL</span> generate_property_name(columnName,@propertyName);</span><br><span class="line"><span class="keyword">SET</span> property = @propertyName;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    concat(</span><br><span class="line">         <span class="string">'/*'</span>,</span><br><span class="line">         column_comment,</span><br><span class="line">         <span class="string">'*/\n'</span>,</span><br><span class="line">        <span class="string">'private  '</span>,</span><br><span class="line">        <span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'varchar'</span>, <span class="string">'char'</span>, <span class="string">'text'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'String'</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'int'</span>, <span class="string">'tinyint'</span>,<span class="string">'smallint'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'Integer'</span></span><br><span class="line">		<span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'float'</span>, <span class="string">'double'</span>,<span class="string">'decimal'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'BigDecimal'</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'bigint'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'Long'</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'datetime'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'Date'</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'bit'</span>, <span class="string">'boolean'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'Boolean'</span></span><br><span class="line">		<span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'double'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'BigDecimal'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="string">'类型不确定'</span></span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">    <span class="string">'  '</span>,</span><br><span class="line">    property,</span><br><span class="line">    <span class="string">';'</span></span><br><span class="line">    ) <span class="keyword">as</span> java <span class="keyword">into</span> str </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    information_schema. <span class="keyword">columns</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i;</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> tmp_sql2java (property_name) <span class="keyword">values</span>(str); </span><br><span class="line"><span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">		<span class="keyword">select</span> property_name <span class="keyword">from</span> tmp_sql2java;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h3 id="生成model层属性，不区分大小写"><a href="#生成model层属性，不区分大小写" class="headerlink" title="生成model层属性，不区分大小写"></a>生成model层属性，不区分大小写</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `generate_model_case`(<span class="keyword">in</span> t_name <span class="type">char</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">BEGIN</span>  <span class="comment">-- 原来的procedure - sql4java,现在改名为 generate_model_case,生成model层属性，属性名称驼峰处理</span></span><br><span class="line"><span class="keyword">DECLARE</span> columnName <span class="type">varchar</span>(<span class="number">1000</span>); <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> property <span class="type">varchar</span>(<span class="number">5000</span>);   <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> str <span class="type">varchar</span>(<span class="number">5000</span>);       <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> n  <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span> ;     <span class="comment">-- 总共的字段数</span></span><br><span class="line"><span class="keyword">DECLARE</span> i  <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>;      <span class="comment">-- 循环时的变量</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql2java(property_name <span class="type">varchar</span>(<span class="number">5000</span>));</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql2java;</span><br><span class="line"><span class="keyword">SET</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> count(*) <span class="keyword">into</span> n <span class="keyword">from</span> information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name;</span><br><span class="line"><span class="keyword">WHILE</span> i &lt;= n <span class="keyword">DO</span> 	</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">column_name</span> <span class="keyword">into</span> columnName <span class="keyword">from</span> information_schema.`<span class="keyword">columns</span>` <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i;</span><br><span class="line"><span class="keyword">CALL</span> generate_property_name(columnName,@propertyName);</span><br><span class="line"><span class="keyword">SET</span> property = @propertyName;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    concat(</span><br><span class="line">         <span class="string">'/*'</span>,</span><br><span class="line">         column_comment,</span><br><span class="line">         <span class="string">'*/\n'</span>,</span><br><span class="line">        <span class="string">'private  '</span>,</span><br><span class="line">        <span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'varchar'</span>, <span class="string">'char'</span>, <span class="string">'text'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'String'</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'int'</span>, <span class="string">'tinyint'</span>,<span class="string">'smallint'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'Integer'</span></span><br><span class="line">		<span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'float'</span>, <span class="string">'double'</span>,<span class="string">'decimal'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'BigDecimal'</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'bigint'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'Long'</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'datetime'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'Date'</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'bit'</span>, <span class="string">'boolean'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'Boolean'</span></span><br><span class="line">		<span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'double'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'BigDecimal'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="string">'类型不确定'</span></span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">    <span class="string">'  '</span>,</span><br><span class="line">    property,</span><br><span class="line">    <span class="string">';'</span></span><br><span class="line">    ) <span class="keyword">as</span> java <span class="keyword">into</span> str </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    information_schema. <span class="keyword">columns</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i;</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> tmp_sql2java (property_name) <span class="keyword">values</span>(str); </span><br><span class="line"><span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">		<span class="keyword">select</span> property_name <span class="keyword">from</span> tmp_sql2java;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h3 id="生成属性名称"><a href="#生成属性名称" class="headerlink" title="生成属性名称"></a>生成属性名称</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `generate_property_name`(<span class="keyword">in</span> <span class="built_in">column_name</span> <span class="type">varchar</span>(<span class="number">1000</span>),<span class="keyword">out</span> property_name <span class="type">varchar</span>(<span class="number">30</span>))</span><br><span class="line"><span class="keyword">BEGIN</span>  <span class="comment">-- 原来的procedure - sql3java,现在改名为 generate_property_name</span></span><br><span class="line">   <span class="keyword">DECLARE</span> n   <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 特殊字符总个数</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> i   <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 循环变量</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> ind <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 得到特殊字符的下标</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> left_str  <span class="type">varchar</span>(<span class="number">30</span>); <span class="comment">-- 左边的字符串</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> right_str <span class="type">varchar</span>(<span class="number">30</span>); <span class="comment">-- 右边的字符串</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> midd_char <span class="type">varchar</span>(<span class="number">30</span>); <span class="comment">-- 中间的那个需要修改的字符</span></span><br><span class="line">	 <span class="keyword">DECLARE</span> str       <span class="type">varchar</span>(<span class="number">5000</span>); <span class="comment">-- 用于拼接的变量</span></span><br><span class="line">	 <span class="keyword">SET</span> i = <span class="number">1</span>;</span><br><span class="line">	 <span class="keyword">SET</span> str = <span class="built_in">column_name</span>;</span><br><span class="line">	 <span class="keyword">SET</span> n = length(str)-length(REPLACE(str,"_",""))+<span class="number">1</span>; <span class="comment">-- 总共有多少次需要进行替换以及大小写变化</span></span><br><span class="line">    <span class="keyword">WHILE</span> i &lt; n <span class="keyword">DO</span> </span><br><span class="line">		    <span class="keyword">SET</span> ind = LENGTH(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i)); <span class="comment">-- 特殊字符的下标</span></span><br><span class="line">			  <span class="keyword">SET</span> left_str = CONCAT(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i),<span class="string">'_'</span>); <span class="comment">-- 特殊字符左边的字符串</span></span><br><span class="line">				<span class="keyword">SET</span> right_str = </span><br><span class="line">				SUBSTRING(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i-(n)),<span class="number">2</span>,LENGTH(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i-(n)))); <span class="comment">-- 特殊字符右边的字符串</span></span><br><span class="line">				<span class="keyword">SET</span> midd_char = UPPER(SUBSTRING(SUBSTRING_INDEX(str,<span class="string">'_'</span>,i-(n)),<span class="number">1</span>,<span class="number">1</span>)); <span class="comment">-- 需要变化成大写的字符</span></span><br><span class="line">				<span class="keyword">SET</span> str = concat(left_str,midd_char,right_str); <span class="comment">-- 对str字符串变量进行重新赋值</span></span><br><span class="line">				<span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">		<span class="keyword">SET</span> property_name = REPLACE(str,"_","");</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h3 id="用于前端react使用"><a href="#用于前端react使用" class="headerlink" title="用于前端react使用"></a>用于前端react使用</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `generate_view_interface_model`(<span class="keyword">in</span> t_name <span class="type">char</span>(<span class="number">125</span>))</span><br><span class="line"><span class="keyword">BEGIN</span>  <span class="comment">-- 原来的procedure - sql7java, 用于前端生成基本属性映射，现在改名为  generate_view_interface_model</span></span><br><span class="line"><span class="keyword">DECLARE</span> columnName <span class="type">varchar</span>(<span class="number">1000</span>); <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">class</span> <span class="type">varchar</span>(<span class="number">125</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> property <span class="type">varchar</span>(<span class="number">5000</span>);   <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> columnPropertyStr <span class="type">varchar</span>(<span class="number">5000</span>); <span class="comment">-- 列属性字符串变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> resultInterface <span class="type">varchar</span>(<span class="number">5000</span>);             <span class="comment">-- 新增记录</span></span><br><span class="line"><span class="keyword">DECLARE</span> str <span class="type">varchar</span>(<span class="number">5000</span>);       <span class="comment">-- 字段名称</span></span><br><span class="line"><span class="keyword">DECLARE</span> n  <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span> ;     <span class="comment">-- 总共的字段数</span></span><br><span class="line"><span class="keyword">DECLARE</span> i  <span class="type">int</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>;      <span class="comment">-- 循环时的变量</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql2java(property_name <span class="type">varchar</span>(<span class="number">5000</span>));</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql2java;</span><br><span class="line"><span class="keyword">SET</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> columnPropertyStr = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> str = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> resultInterface = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">CALL</span> generate_class_mapperClass_name(t_name,<span class="string">''</span>,@className);</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">class</span> = @className;</span><br><span class="line"><span class="keyword">select</span> count(*) <span class="keyword">into</span> n <span class="keyword">from</span> information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name;</span><br><span class="line"><span class="keyword">WHILE</span> i &lt;= n <span class="keyword">DO</span> 	</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">column_name</span> <span class="keyword">into</span> columnName <span class="keyword">from</span> information_schema.`<span class="keyword">columns</span>` <span class="keyword">where</span> <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i;</span><br><span class="line"><span class="keyword">CALL</span> generate_property_name(columnName,@propertyName);</span><br><span class="line"><span class="keyword">SET</span> property = @propertyName;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    concat(</span><br><span class="line">		     <span class="string">'/*'</span>,</span><br><span class="line">         column_comment,</span><br><span class="line">         <span class="string">'*/\n'</span>,</span><br><span class="line">        property,</span><br><span class="line">		<span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> is_nullable <span class="keyword">in</span> (<span class="string">'YES'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'?'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="string">''</span></span><br><span class="line">		<span class="keyword">end</span>,</span><br><span class="line">		":",</span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> data_type <span class="keyword">in</span> (<span class="string">'varchar'</span>, <span class="string">'char'</span>, <span class="string">'text'</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="string">'string'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="string">'number'</span></span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">    <span class="string">';\n'</span></span><br><span class="line">    ) <span class="keyword">as</span> java <span class="keyword">into</span> columnPropertyStr </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    information_schema. <span class="keyword">columns</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    <span class="built_in">table_name</span> = t_name <span class="keyword">and</span> ordinal_position=i;</span><br><span class="line">		<span class="keyword">SET</span> str = CONCAT(str,columnPropertyStr);</span><br><span class="line"><span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">SET</span> resultInterface = CONCAT(<span class="string">'export interface '</span>,<span class="keyword">class</span>,<span class="string">' &#123;\n'</span>,str,<span class="string">'&#125;'</span>);</span><br><span class="line">		<span class="keyword">select</span> resultInterface;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CREATE <span class="attribute">DEFINER</span>=`admin`@`%` PROCEDURE `page_helper`(<span class="keyword">in</span><span class="built_in"> page </span>int,<span class="keyword">in</span> pageSize int,<span class="keyword">in</span> sqlValue text(10000))</span><br><span class="line">BEGIN  -- 原来的procedure - sql12java,现在改名称为 page_helper</span><br><span class="line">DECLARE prepareSQL text(10000);</span><br><span class="line">DECLARE countSQL int<span class="built_in"> default </span>0;</span><br><span class="line">DECLARE count_sql text(10000);</span><br><span class="line">DECLARE select_sql text(10000);</span><br><span class="line"><span class="builtin-name">SET</span> count_sql = <span class="string">''</span>;</span><br><span class="line"><span class="builtin-name">SET</span> select_sql = <span class="string">''</span>;</span><br><span class="line">			<span class="keyword">IF</span><span class="built_in"> page </span>&lt; 1 THEN </span><br><span class="line">			<span class="builtin-name">SET</span><span class="built_in"> page </span>= 1;</span><br><span class="line">			END <span class="keyword">IF</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">IF</span> pageSize &lt; 0 THEN </span><br><span class="line">			<span class="builtin-name">SET</span> pageSize = 10;</span><br><span class="line">			END <span class="keyword">IF</span>;</span><br><span class="line"></span><br><span class="line">			<span class="builtin-name">SET</span> <span class="attribute">count_sql</span>=concat('select count(*) as count_sum <span class="keyword">from</span> ( <span class="string">',sqlValue,'</span> ) t<span class="string">');</span></span><br><span class="line"><span class="string">		  SET @prepareCountSql = count_sql;</span></span><br><span class="line"><span class="string">			prepare countSQL from @prepareCountSql; </span></span><br><span class="line"><span class="string">			EXECUTE countSQL;           </span></span><br><span class="line"><span class="string">			deallocate prepare countSQL;    </span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">			select page, pageSize as page_size;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">			SET select_sql=concat(sqlValue,'</span>  limit <span class="string">',page*pageSize-pageSize,'</span>,<span class="string">',pageSize);</span></span><br><span class="line"><span class="string">			-- select select_sql;</span></span><br><span class="line"><span class="string">			SET @preparesql = select_sql;</span></span><br><span class="line"><span class="string">			prepare prepareSQL from @preparesql; </span></span><br><span class="line"><span class="string">			EXECUTE prepareSQL;           </span></span><br><span class="line"><span class="string">			deallocate prepare prepareSQL;    </span></span><br><span class="line"><span class="string">END</span></span><br></pre></td></tr></table></figure>

<h3 id="通过供应商名称获取得到产品编号"><a href="#通过供应商名称获取得到产品编号" class="headerlink" title="通过供应商名称获取得到产品编号"></a>通过供应商名称获取得到产品编号</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `select_productId_by_supplierName`(<span class="keyword">in</span> keyValue <span class="type">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">BEGIN</span>  <span class="comment">-- 原来的procedure - sql8java,用于中台当中的产品管理当中的关键字查询，通过供应商名称查找得到供应商编号，再进行对比产品表当中存在有供应商为查询得到的供应商编号，则取出该产品编号，现在改名为 select_productId_by_supplierName</span></span><br><span class="line"><span class="keyword">DECLARE</span> n TINYINT(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> t_supplier_id <span class="type">int</span>; <span class="comment">-- t_supplier表当中通过模糊查询出来的供应商编号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> cur_1 <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">select</span> t.id <span class="keyword">from</span> t_supplier t <span class="keyword">where</span> t.supplier_name <span class="keyword">like</span> keyValue <span class="keyword">and</span> t.`status`=<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">CONTINUE</span> <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">NOT</span> <span class="built_in">FOUND</span> <span class="keyword">SET</span> n=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql3java(product <span class="type">int</span>);<span class="comment">-- 该表的作用在于，如果存在有这样的产品则进行新增到该表当中最后进行查询该表即可</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql3java;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">open</span> cur_1;                               <span class="comment">-- 打开游标，开始第一轮的遍历循环，循环的内容是通过关键字模糊查询出来的所有供应商编号,过滤删除掉的</span></span><br><span class="line">		<span class="keyword">WHILE</span> n&lt;&gt;<span class="number">1</span> <span class="keyword">DO</span></span><br><span class="line">		<span class="keyword">FETCH</span> cur_1 <span class="keyword">INTO</span> t_supplier_id;    </span><br><span class="line">		</span><br><span class="line">					<span class="keyword">BEGIN</span> </span><br><span class="line">					<span class="keyword">DECLARE</span> nn TINYINT(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span>;                    <span class="comment">-- 变量，代表的是t_product当中supplier_id字段不为空值的总条数</span></span><br><span class="line">					<span class="keyword">DECLARE</span> supplier_ids <span class="type">varchar</span>(<span class="number">255</span>); <span class="comment">-- 进行查询出来供应商字段取值不为空的未进行拆分的supplierId字符串</span></span><br><span class="line">					<span class="keyword">DECLARE</span> supp_id_value <span class="type">varchar</span>(<span class="number">255</span>);        <span class="comment">-- 新增入tmp_sql4java表的属性字段supp_id</span></span><br><span class="line">					<span class="keyword">DECLARE</span> flag <span class="type">int</span>;	                <span class="comment">-- 是否可以将产品编号进行新增到tmp_sql3java表当中的依据，如果大于0则新增当前循环的产品编号</span></span><br><span class="line">					<span class="keyword">DECLARE</span> nnn <span class="type">int</span>;                  <span class="comment">-- supplier_ids字符串拆分成数组后的总长度</span></span><br><span class="line">					<span class="keyword">DECLARE</span> iii <span class="type">int</span>;                  <span class="comment">-- 遍历supplier_ids拆分后数组的变量iii</span></span><br><span class="line">					<span class="keyword">DECLARE</span> id_value <span class="type">int</span>;             <span class="comment">-- 新增入tmp_sql4java表的属性字段id</span></span><br><span class="line">					<span class="keyword">DECLARE</span> supplier_id <span class="type">int</span>;           <span class="comment">-- 进行了拆分之后的supplierId编号</span></span><br><span class="line">					<span class="keyword">DECLARE</span> product_id <span class="type">int</span>;            <span class="comment">-- 进行查询出来供应商字段取值不为空的产品编号</span></span><br><span class="line">					<span class="keyword">DECLARE</span> cur_2 <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">select</span> tt.id,tt.supplier_id <span class="keyword">from</span> t_product tt <span class="keyword">where</span> tt.supplier_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">and</span> tt.`status`=<span class="string">'0'</span>;</span><br><span class="line">					<span class="keyword">DECLARE</span> <span class="keyword">CONTINUE</span> <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">NOT</span> <span class="built_in">FOUND</span> <span class="keyword">SET</span> nn=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">open</span> cur_2;                               <span class="comment">-- 打开游标，开始第二轮的遍历循环,循环的内容是产品表当中所有supplier_id字段不为空的记录,过滤删除掉的</span></span><br><span class="line">					<span class="keyword">WHILE</span> nn&lt;&gt;<span class="number">1</span> <span class="keyword">DO</span></span><br><span class="line">					<span class="keyword">FETCH</span> cur_2 <span class="keyword">INTO</span> product_id,supplier_ids; <span class="comment">-- 获取数据产品编号以及供应商字段取值（未进行拆分的供应商编号字符串）</span></span><br><span class="line">								</span><br><span class="line">								<span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql4java(supp_id <span class="type">varchar</span>(<span class="number">255</span>));</span><br><span class="line">								<span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql4java;<span class="comment">-- 每当循环产品表一条记录则刷新一遍tmp_sql4java表，当中存的值是每一条产品表记录当中的supplier_ids字符串进行拆分出来的数值</span></span><br><span class="line">								</span><br><span class="line">								<span class="keyword">SET</span> flag=<span class="number">0</span>;   <span class="comment">-- 首先先定义值为0</span></span><br><span class="line">								<span class="keyword">SET</span> iii=<span class="number">1</span>;    <span class="comment">-- 赋初始值，赋值为1的原因是我是从1开始的，所以约定好从第一个开始，也就是@i,其实不要也行</span></span><br><span class="line">								<span class="keyword">call</span> fieldValue_split_by_comma(supplier_ids);<span class="comment">-- 拆分之后进表</span></span><br><span class="line">								<span class="keyword">SELECT</span> count(*) <span class="keyword">into</span> nnn <span class="keyword">FROM</span> tmp_sql5java; <span class="comment">-- 为nnn进行赋值</span></span><br><span class="line">											<span class="keyword">while</span> iii &lt;= nnn <span class="keyword">DO</span> <span class="comment">-- 进行循环遍历拆分supplierIds的数组</span></span><br><span class="line">											<span class="keyword">SELECT</span> s_id <span class="keyword">into</span> supp_id_value </span><br><span class="line">											<span class="keyword">FROM</span>  </span><br><span class="line">													tmp_sql5java </span><br><span class="line">											<span class="keyword">WHERE</span> </span><br><span class="line">													num=iii;</span><br><span class="line"> 											<span class="keyword">insert</span> <span class="keyword">into</span> tmp_sql4java <span class="keyword">values</span> (supp_id_value);</span><br><span class="line">											<span class="keyword">SET</span> iii=iii+<span class="number">1</span>;</span><br><span class="line">											<span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line">									</span><br><span class="line">								<span class="keyword">select</span> count(*) <span class="keyword">into</span> flag <span class="keyword">from</span> tmp_sql4java  <span class="keyword">where</span> tmp_sql4java.supp_id=t_supplier_id;</span><br><span class="line">								<span class="keyword">if</span>(flag&gt;<span class="number">0</span>) <span class="keyword">THEN</span> <span class="comment">-- 如果存在有拆分出来的供应商编号与模糊查找出来的供应商编号对应的上的话则</span></span><br><span class="line">								<span class="keyword">insert</span> <span class="keyword">into</span> tmp_sql3java <span class="keyword">values</span>(product_id);<span class="comment">-- 将当前循环到的该产品编号存入临时表当中，否则不作处理</span></span><br><span class="line">								<span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">							</span><br><span class="line">					<span class="keyword">end</span> <span class="keyword">while</span>; #结束循环</span><br><span class="line">					<span class="keyword">close</span> cur_2; #关闭游标<span class="number">2</span></span><br><span class="line">					<span class="keyword">END</span>;</span><br><span class="line">		 <span class="keyword">end</span> <span class="keyword">while</span>; #结束循环</span><br><span class="line">		 <span class="keyword">close</span> cur_1; #关闭游标<span class="number">1</span></span><br><span class="line">		 <span class="keyword">END</span>;</span><br><span class="line">		    <span class="comment">-- select product from tmp_sql3java;</span></span><br><span class="line">  <span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h3 id="通过供应商编号获取产品编号"><a href="#通过供应商编号获取产品编号" class="headerlink" title="通过供应商编号获取产品编号"></a>通过供应商编号获取产品编号</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `select_productId_by_supplierId`(<span class="keyword">in</span> keyValue <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span>   <span class="comment">-- 通过供应商编号进行查找 产品对应有供应商编号的产品编号</span></span><br><span class="line"><span class="keyword">DECLARE</span> n <span class="type">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> t_supplier_id <span class="type">int</span>; <span class="comment">-- t_supplier表当中通过模糊查询出来的供应商编号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> cur_1 <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">select</span> t.id <span class="keyword">from</span> t_supplier t <span class="keyword">where</span> t.id = keyValue <span class="keyword">and</span> t.`status`=<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">SET</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> count(*) <span class="keyword">into</span> n <span class="keyword">from</span>  t_supplier t <span class="keyword">where</span> t.id = keyValue <span class="keyword">and</span> t.`status`=<span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql3java(product <span class="type">int</span>);<span class="comment">-- 该表的作用在于，如果存在有这样的产品则进行新增到该表当中最后进行查询该表即可</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql3java;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">open</span> cur_1;                               <span class="comment">-- 打开游标，开始第一轮的遍历循环，循环的内容是通过关键字模糊查询出来的所有供应商编号,过滤删除掉的</span></span><br><span class="line">		<span class="keyword">WHILE</span> i&lt;=n <span class="keyword">DO</span></span><br><span class="line">		<span class="keyword">FETCH</span> cur_1 <span class="keyword">INTO</span> t_supplier_id;  </span><br><span class="line">					<span class="keyword">BEGIN</span> </span><br><span class="line">					<span class="keyword">DECLARE</span> nn TINYINT(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span>;                    <span class="comment">-- 变量，代表的是t_product当中supplier_id字段不为空值的总条数</span></span><br><span class="line">					<span class="keyword">DECLARE</span> supplier_ids <span class="type">varchar</span>(<span class="number">255</span>); <span class="comment">-- 进行查询出来供应商字段取值不为空的未进行拆分的supplierId字符串</span></span><br><span class="line">					<span class="keyword">DECLARE</span> supp_id_value <span class="type">varchar</span>(<span class="number">255</span>);        <span class="comment">-- 新增入tmp_sql4java表的属性字段supp_id</span></span><br><span class="line">					<span class="keyword">DECLARE</span> flag <span class="type">int</span>;	                <span class="comment">-- 是否可以将产品编号进行新增到tmp_sql4java表当中的依据，如果大于0则新增当前循环的产品编号</span></span><br><span class="line">					<span class="keyword">DECLARE</span> nnn <span class="type">int</span>;                  <span class="comment">-- supplier_ids字符串拆分成数组后的总长度</span></span><br><span class="line">					<span class="keyword">DECLARE</span> iii <span class="type">int</span>;                  <span class="comment">-- 遍历supplier_ids拆分后数组的变量iii</span></span><br><span class="line">					<span class="keyword">DECLARE</span> id_value <span class="type">int</span>;             <span class="comment">-- 新增入tmp_sql4java表的属性字段id</span></span><br><span class="line">					<span class="keyword">DECLARE</span> supplier_id <span class="type">int</span>;           <span class="comment">-- 进行了拆分之后的supplierId编号</span></span><br><span class="line">					<span class="keyword">DECLARE</span> product_id <span class="type">int</span>;            <span class="comment">-- 进行查询出来供应商字段取值不为空的产品编号</span></span><br><span class="line">					 <span class="keyword">DECLARE</span> cur_2 <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">select</span> tt.id,tt.supplier_id <span class="keyword">from</span> t_product tt <span class="keyword">where</span> tt.supplier_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">and</span> tt.`status`=<span class="string">'0'</span>;</span><br><span class="line">					 <span class="keyword">DECLARE</span> <span class="keyword">CONTINUE</span> <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">NOT</span> <span class="built_in">FOUND</span> <span class="keyword">SET</span> nn=<span class="number">1</span>;</span><br><span class="line">					 <span class="keyword">open</span> cur_2;                               <span class="comment">-- 打开游标，开始第二轮的遍历循环,循环的内容是产品表当中所有supplier_id字段不为空的记录,过滤删除掉的</span></span><br><span class="line">					 <span class="keyword">WHILE</span> nn&lt;&gt;<span class="number">1</span> <span class="keyword">DO</span></span><br><span class="line">					 <span class="keyword">FETCH</span> cur_2 <span class="keyword">INTO</span> product_id,supplier_ids; <span class="comment">-- 获取数据产品编号以及供应商字段取值（未进行拆分的供应商编号字符串）</span></span><br><span class="line">								</span><br><span class="line">								<span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_sql4java(supp_id <span class="type">varchar</span>(<span class="number">255</span>));</span><br><span class="line">								<span class="keyword">delete</span> <span class="keyword">from</span> tmp_sql4java;<span class="comment">-- 每当循环产品表一条记录则刷新一遍tmp_sql4java表，当中存的值是每一条产品表记录当中的supplier_ids字符串进行拆分出来的数值</span></span><br><span class="line">								</span><br><span class="line">								<span class="keyword">SET</span> flag=<span class="number">0</span>;   <span class="comment">-- 首先先定义值为0</span></span><br><span class="line">								<span class="keyword">SET</span> iii=<span class="number">1</span>;    <span class="comment">-- 赋初始值，赋值为1的原因是我是从1开始的，所以约定好从第一个开始，也就是@i,其实不要也行</span></span><br><span class="line">								<span class="keyword">call</span> fieldValue_split_by_comma(supplier_ids);<span class="comment">-- 拆分之后进表</span></span><br><span class="line">								<span class="keyword">SELECT</span> count(*) <span class="keyword">into</span> nnn <span class="keyword">FROM</span> tmp_sql5java; <span class="comment">-- 为nnn进行赋值</span></span><br><span class="line">											</span><br><span class="line">											<span class="keyword">while</span> iii &lt;= nnn <span class="keyword">DO</span> <span class="comment">-- 进行循环遍历拆分supplierIds的数组</span></span><br><span class="line">											<span class="keyword">SELECT</span> s_id <span class="keyword">into</span> supp_id_value </span><br><span class="line">											<span class="keyword">FROM</span>  </span><br><span class="line">													tmp_sql5java </span><br><span class="line">											<span class="keyword">WHERE</span> </span><br><span class="line">													num=iii;</span><br><span class="line"> 											<span class="keyword">insert</span> <span class="keyword">into</span> tmp_sql4java <span class="keyword">values</span> (supp_id_value);</span><br><span class="line">											<span class="keyword">SET</span> iii=iii+<span class="number">1</span>;</span><br><span class="line">											<span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line">											</span><br><span class="line"> 								<span class="keyword">select</span> count(*) <span class="keyword">into</span> flag <span class="keyword">from</span> tmp_sql4java  <span class="keyword">where</span> tmp_sql4java.supp_id=t_supplier_id;</span><br><span class="line"> 								<span class="keyword">IF</span>(flag&gt;<span class="number">0</span>) <span class="keyword">THEN</span> <span class="comment">-- 如果存在有拆分出来的供应商编号与模糊查找出来的供应商编号对应的上的话则</span></span><br><span class="line"> 								<span class="keyword">insert</span> <span class="keyword">into</span> tmp_sql3java <span class="keyword">values</span>(product_id);<span class="comment">-- 将当前循环到的该产品编号存入临时表当中，否则不作处理</span></span><br><span class="line"> 								<span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">							</span><br><span class="line">					 <span class="keyword">end</span> <span class="keyword">while</span>; #结束循环</span><br><span class="line">					 <span class="keyword">close</span> cur_2; #关闭游标<span class="number">2</span></span><br><span class="line">					<span class="keyword">END</span>;</span><br><span class="line">					<span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line">		 <span class="keyword">end</span> <span class="keyword">while</span>; #结束循环</span><br><span class="line">		 <span class="keyword">close</span> cur_1; #关闭游标<span class="number">1</span></span><br><span class="line">		 <span class="keyword">END</span>;</span><br><span class="line">		    <span class="comment">-- select product from tmp_sql3java;</span></span><br><span class="line">  <span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h3 id="通过供应商编号获取得到产品"><a href="#通过供应商编号获取得到产品" class="headerlink" title="通过供应商编号获取得到产品"></a>通过供应商编号获取得到产品</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `select_products_by_supplierId`(<span class="keyword">in</span> supplier_id <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> <span class="comment">-- 原来的procedure - sql10java,现在改名称为 select_product_by_params</span></span><br><span class="line"><span class="keyword">DECLARE</span> n <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> s <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> productNo <span class="type">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> str <span class="type">varchar</span>(<span class="number">256</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> concatSQL <span class="type">varchar</span>(<span class="number">256</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> sqls text(<span class="number">10000</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> prepareSQL text(<span class="number">10000</span>);</span><br><span class="line">																#将局部变量转换成会话变量</span><br><span class="line">																#动态<span class="keyword">sql</span>语言只接受会话变量</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> str=<span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> concatSQL=<span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> sqls=<span class="string">''</span>;</span><br><span class="line"> 			<span class="keyword">call</span> select_productId_by_supplierId(supplier_id);</span><br><span class="line"> 			 <span class="keyword">select</span> count(*) <span class="keyword">into</span> n <span class="keyword">from</span> tmp_sql3java;</span><br><span class="line"> 					<span class="keyword">if</span> n&gt;<span class="number">0</span> <span class="keyword">then</span> </span><br><span class="line"> 								<span class="keyword">BEGIN</span></span><br><span class="line"> 								<span class="keyword">DECLARE</span> cur_3 <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">select</span> product <span class="keyword">from</span> tmp_sql3java;</span><br><span class="line"> 								<span class="keyword">open</span> cur_3;</span><br><span class="line">								<span class="keyword">while</span> i&lt;=n <span class="keyword">do</span></span><br><span class="line"> 								<span class="keyword">fetch</span> cur_3 <span class="keyword">into</span> productNo;</span><br><span class="line"> 											<span class="keyword">SET</span> str=concat(str,productNo,",");</span><br><span class="line">											<span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line"> 								<span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line">								<span class="keyword">SET</span> str= substring(str, <span class="number">1</span>, length(str)<span class="number">-1</span>);</span><br><span class="line"> 								<span class="keyword">close</span> cur_3;</span><br><span class="line">								</span><br><span class="line"> 								<span class="keyword">SET</span> concatSQL=concat(" and b.id in(",str,")");</span><br><span class="line"> 								<span class="keyword">END</span>;</span><br><span class="line">					<span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">			<span class="keyword">SET</span> sqls = concat(</span><br><span class="line">												<span class="string">'select      				 </span></span><br><span class="line"><span class="string">												  a.id, a.product_id, a.image, a.`name`, a.zh_name, </span></span><br><span class="line"><span class="string">												 a.customs_code, a.unit_price, a.sku, a.fn_sku_no, </span></span><br><span class="line"><span class="string">												 a.fn_sku_code, a.packing_size_long, a.packing_size_wide, </span></span><br><span class="line"><span class="string">												 a.packing_size_height, a.box_weight, a.packing_num, a.card_board_load_num, </span></span><br><span class="line"><span class="string">												 a.product_long, a.product_width, a.product_height, a.product_weight, </span></span><br><span class="line"><span class="string">												 a.cal_unit,purpose, a.brand_info, a.material, a.model, </span></span><br><span class="line"><span class="string">												 a.remark, a.attr_name, a.attr_value, a.`status` </span></span><br><span class="line"><span class="string">														from t_product_attr a,t_product b </span></span><br><span class="line"><span class="string">														where</span></span><br><span class="line"><span class="string">														a.product_id=b.id </span></span><br><span class="line"><span class="string">														and a.`status`=0 '</span>,</span><br><span class="line">														concatSQL</span><br><span class="line">			);</span><br><span class="line">			  <span class="comment">-- select sqls;</span></span><br><span class="line">		  	 <span class="keyword">SET</span> @preparesql = sqls;</span><br><span class="line">			   <span class="keyword">prepare</span> prepareSQL <span class="keyword">from</span> @preparesql; <span class="comment">-- 预处理需要执行的动态SQL，其中stmt是一个变量</span></span><br><span class="line">			   <span class="keyword">EXECUTE</span> prepareSQL;           <span class="comment">-- 执行SQL语句</span></span><br><span class="line">			   <span class="keyword">deallocate</span> <span class="keyword">prepare</span> prepareSQL;     <span class="comment">-- 释放掉预处理段</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h3 id="渠道订单报表"><a href="#渠道订单报表" class="headerlink" title="渠道订单报表"></a>渠道订单报表</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DEFINER</span>=`<span class="keyword">admin</span>`@`%` <span class="keyword">PROCEDURE</span> `view_channel_order_report`(<span class="keyword">in</span> channelOrderId <span class="type">int</span>(<span class="number">11</span>))</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">		<span class="keyword">DECLARE</span> step_id <span class="type">int</span>;</span><br><span class="line">		<span class="keyword">DECLARE</span> n <span class="type">int</span>;</span><br><span class="line">		<span class="keyword">DECLARE</span> i <span class="type">int</span>;</span><br><span class="line">		<span class="keyword">DECLARE</span> step_finished_date <span class="type">int</span>;</span><br><span class="line">		<span class="keyword">DECLARE</span> id2 <span class="type">int</span>;</span><br><span class="line">		<span class="keyword">DECLARE</span> step_name2 <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br><span class="line">		<span class="keyword">DECLARE</span> is_delay2 <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br><span class="line">		<span class="keyword">DECLARE</span> standard_time2 <span class="type">int</span>;</span><br><span class="line">		<span class="keyword">DECLARE</span> actual_delay2 <span class="type">VARCHAR</span>(<span class="number">64</span>);</span><br><span class="line">		<span class="keyword">DECLARE</span> cur_step <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">select</span> id <span class="keyword">from</span> t_channel_order_step <span class="keyword">where</span> channel_order_id=channelOrderId;</span><br><span class="line">		<span class="keyword">select</span> count(*) <span class="keyword">into</span> n <span class="keyword">from</span> t_channel_order_step <span class="keyword">where</span> channel_order_id=channelOrderId;</span><br><span class="line">		<span class="keyword">SET</span> i=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> tmp_channel_order_report(</span><br><span class="line">		id <span class="type">int</span>(<span class="number">11</span>), step_name <span class="type">varchar</span>(<span class="number">255</span>), is_delay <span class="type">varchar</span>(<span class="number">255</span>), standard_time <span class="type">int</span>(<span class="number">11</span>), actual_delay <span class="type">varchar</span>(<span class="number">64</span>) );</span><br><span class="line">		<span class="keyword">delete</span> <span class="keyword">from</span> tmp_channel_order_report;</span><br><span class="line">									<span class="keyword">open</span> cur_step;</span><br><span class="line">											<span class="keyword">WHILE</span> i&lt;n <span class="keyword">DO</span></span><br><span class="line">											<span class="keyword">fetch</span> cur_step <span class="keyword">into</span> step_id;</span><br><span class="line">											<span class="keyword">call</span> last_step_finished_date(step_id,step_finished_date);<span class="comment">-- 当前步骤id的上一步骤完成时间</span></span><br><span class="line">											</span><br><span class="line">											<span class="keyword">select</span></span><br><span class="line">											id,`<span class="type">name</span>`,standard_time,</span><br><span class="line">											<span class="keyword">if</span>(finished_date <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line">													 ROUND((finished_date-step_finished_date)/<span class="number">3600</span>,<span class="number">1</span>),</span><br><span class="line">													 <span class="keyword">if</span>(activity=<span class="number">1</span>, ROUND((unix_timestamp(now())-step_finished_date)/<span class="number">3600</span>,<span class="number">1</span>), <span class="string">'-'</span>)</span><br><span class="line">													) <span class="keyword">as</span> actual_delay,</span><br><span class="line">											<span class="keyword">if</span>(finished_date <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line">													 <span class="keyword">if</span>(ROUND((finished_date-step_finished_date)/<span class="number">3600</span>,<span class="number">1</span>)&gt;standard_time,<span class="string">'是'</span>,<span class="string">'否'</span>),</span><br><span class="line">													 <span class="keyword">if</span>(activity=<span class="number">1</span>,  <span class="keyword">if</span>(ROUND((unix_timestamp(now())-step_finished_date)/<span class="number">3600</span>,<span class="number">1</span>)&gt;standard_time,<span class="string">'是'</span>,<span class="string">'否'</span>), <span class="string">'否'</span>)</span><br><span class="line">												) <span class="keyword">as</span> is_delay</span><br><span class="line">		</span><br><span class="line">											<span class="keyword">into</span> id2,step_name2,standard_time2,actual_delay2,is_delay2  </span><br><span class="line">											<span class="keyword">from</span> t_channel_order_step <span class="keyword">where</span> id=step_id;</span><br><span class="line">											</span><br><span class="line">											<span class="keyword">insert</span> <span class="keyword">into</span> tmp_channel_order_report <span class="keyword">values</span>(id2,step_name2,is_delay2,standard_time2,actual_delay2);</span><br><span class="line">											<span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line">											<span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">									<span class="keyword">close</span> cur_step;</span><br><span class="line">		<span class="keyword">select</span> * <span class="keyword">from</span> tmp_channel_order_report;</span><br><span class="line">		<span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER=<span class="string">`admin`</span>@<span class="string">`%`</span> <span class="keyword">FUNCTION</span> <span class="string">`currval`</span>(seq_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>)) <span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">     <span class="keyword">DECLARE</span> <span class="keyword">value</span> <span class="built_in">INTEGER</span>; </span><br><span class="line">     <span class="keyword">SET</span> <span class="keyword">value</span> = <span class="number">0</span>; </span><br><span class="line">     <span class="keyword">SELECT</span> current_value <span class="keyword">INTO</span> <span class="keyword">value</span> </span><br><span class="line">          <span class="keyword">FROM</span> <span class="keyword">sequence</span></span><br><span class="line">          <span class="keyword">WHERE</span> <span class="keyword">name</span> = seq_name; </span><br><span class="line">     RETURN value; </span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DEFINER=<span class="string">`admin`</span>@<span class="string">`%`</span> <span class="keyword">FUNCTION</span> <span class="string">`nextval`</span>(seq_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>)) <span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">     <span class="keyword">UPDATE</span> <span class="keyword">sequence</span></span><br><span class="line">          <span class="keyword">SET</span> current_value = current_value + <span class="keyword">increment</span> </span><br><span class="line">          <span class="keyword">WHERE</span> <span class="keyword">name</span> = seq_name; </span><br><span class="line">     RETURN currval(seq_name); </span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DEFINER=<span class="string">`admin`</span>@<span class="string">`%`</span> <span class="keyword">FUNCTION</span> <span class="string">`setval`</span>(seq_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>), <span class="keyword">value</span> <span class="built_in">INTEGER</span>) <span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">     <span class="keyword">UPDATE</span> <span class="keyword">sequence</span></span><br><span class="line">          <span class="keyword">SET</span> current_value = <span class="keyword">value</span> </span><br><span class="line">          <span class="keyword">WHERE</span> <span class="keyword">name</span> = seq_name; </span><br><span class="line">     RETURN currval(seq_name); </span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>领赫</category>
      </categories>
      <tags>
        <tag>领赫</tag>
        <tag>存储过程</tag>
        <tag>Sql</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot-邮件服务</title>
    <url>/2020/04/14/%E9%A2%86%E8%B5%AB/%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="参考Blog"><a href="#参考Blog" class="headerlink" title="参考Blog"></a>参考Blog</h2><ul>
<li><a href="https://blog.csdn.net/weixin_44767463/article/details/100688643" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44767463/article/details/100688643</a></li>
<li><a href="https://blog.csdn.net/daa20/article/details/88868807" target="_blank" rel="noopener">https://blog.csdn.net/daa20/article/details/88868807</a></li>
<li><a href="https://www.cnblogs.com/achengmu/p/10955765.html" target="_blank" rel="noopener">https://www.cnblogs.com/achengmu/p/10955765.html</a></li>
</ul>
<h2 id="API官方文档"><a href="#API官方文档" class="headerlink" title="API官方文档"></a>API官方文档</h2><ul>
<li><a href="https://sendgrid.api-docs.io/" target="_blank" rel="noopener">https://sendgrid.api-docs.io/</a></li>
<li><a href="https://sendgrid.com/docs/for-developers/sending-email/getting-started-smtp/" target="_blank" rel="noopener">https://sendgrid.com/docs/for-developers/sending-email/getting-started-smtp/</a></li>
</ul>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>邮件样式html不兼容—已解决</li>
<li>邮件附件名称乱码—已解决</li>
<li>邮件发送到了垃圾箱—已解决</li>
<li>邮件使用多线程进行异步处理—已解决</li>
<li>邮件发送不成功如何处理—面试官提出的问题</li>
<li>邮件发送使用多线程，关于多线程相关的面试问题</li>
</ol>
<ul>
<li>邮件发送不成功如何处理  </li>
</ul>
<p>这个问题我记得我当时的回答是这样的：<br>因为在领赫这个项目当中发送邮件是通过多线程的方式进行发送的邮件，也就是异步处理发送邮件的这个业务。<br>然后面试官就问，如果通过这个多线程发送邮件，但是这个邮件并未发送成功该如何处理？<br>答：因为SendGrid发送邮件时如果发送成功会返回一个200的发送成功的响应码回来；也有的时候并不会发送200的响应码回来，也就是当渠道不稳定的时候，异常的时候，那么这个时候我们系统是没有对这种情况作出处理。因为领赫这个项目是初稿。还有很多需要完善的地方。当然了针对这个问题，我认为所需要作出的完善就是，可以建一张关于发送账单邮件的表，把每一次发送邮件的记录，发送邮件时间，发送人，发送内容，发送状态（未发送/成功/失败）等有必要记录下来的内容映射到表中的字段。而后台当中在每次发送邮件内容的操作旁，如果读取得到该相应操作的发送邮件未成功，可以点击重试发送邮件相关按钮进行重新操作。  </p>
<p>而且有个点很类似，就是获取paypal的支付链接的时候，因为是沙箱环境，paypal沙箱环境又在做更新处理，我遇到好几次情况就是paypal沙箱环境不稳定，然后返回的token无效，也就是说我通过这个token去获取paypal沙箱环境当中的支付链接的时候无法获取得到返回401响应码，也就是说在获取支付链接的这个业务操作的时候，如果遇到paypal，也就是渠道异常的时候该如何处理，david就建议说重试三次，如果三次内paypal未获取成功那么就判定为paypal渠道问题；否则在三次内进行获取paypal支付链接。不然一直循环获取支付链接的话，会给服务器带来不必要的麻烦，或者说压力。</p>
<ul>
<li>多线程</li>
</ul>
<p>这个也是面试官问我的一个问题，他问我Runnable和Thread 有什么区别？<br>因为我在项目当中是使用多线程完成的这个发送邮件的这个功能。<br>然后被问到有关多线程相关的问题也是人之常情。<br>但是我不会。<br>我就答了Thread是类，可继承；Runnable是接口多实现。<br>哦豁。其实领赫项目当中有关多线程的操作我都是直接百度来的代码。也怪自己对待面试不够认真。<br>代码：  </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package com.yourshares.configuration;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.sendgrid.*;</span><br><span class="line">import com.yourshares.common.tools.LogFileName;</span><br><span class="line">import com.yourshares.common.utils.LoggerUtils;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> MailThread extends Thread&#123;</span><br><span class="line">    Logger logger = LoggerUtils.<span class="constructor">Logger(LogFileName.API)</span>;</span><br><span class="line"></span><br><span class="line">    String contentHtml=<span class="string">""</span>;</span><br><span class="line">    String mainMail=<span class="string">""</span>;</span><br><span class="line">    String sendgridApiKey=<span class="string">""</span>;</span><br><span class="line">    public <span class="constructor">MailThread(JSONObject <span class="params">mail</span>)</span> &#123;</span><br><span class="line">        this.contentHtml = mail.get<span class="constructor">String(<span class="string">"contentHtml"</span>)</span>;</span><br><span class="line">        this.mainMail = mail.get<span class="constructor">String(<span class="string">"mainMail"</span>)</span>;</span><br><span class="line">        this.sendgridApiKey = mail.get<span class="constructor">String(<span class="string">"sendgridApiKey"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要执行的部分</span></span><br><span class="line">    public void run<span class="literal">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        logger.info(<span class="string">"=========================MailThread========================="</span>);</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//发送邮件给客户嘞</span></span><br><span class="line">            Email from = <span class="keyword">new</span> <span class="constructor">Email(<span class="string">"info@fbabee.com"</span>)</span>;<span class="comment">//发件方@outlook.com</span></span><br><span class="line">            String subject = <span class="string">"领赫 - 消息提醒(*^▽^*)"</span>;<span class="comment">//</span></span><br><span class="line">            Email <span class="keyword">to</span> = <span class="keyword">new</span> <span class="constructor">Email(<span class="params">mainMail</span>)</span>;<span class="comment">//客户的主邮箱 mainMail</span></span><br><span class="line">            Content content = <span class="keyword">new</span> <span class="constructor">Content(<span class="string">"text/html"</span>,<span class="params">contentHtml</span>)</span>;</span><br><span class="line">            Mail mail = <span class="keyword">new</span> <span class="constructor">Mail(<span class="params">from</span>, <span class="params">subject</span>, <span class="params">to</span>, <span class="params">content</span>)</span>;</span><br><span class="line">            String apiKey = sendgridApiKey;<span class="comment">//这个key来源参考4如何获取apiKey</span></span><br><span class="line">            SendGrid sg = <span class="keyword">new</span> <span class="constructor">SendGrid(<span class="params">apiKey</span>)</span>;</span><br><span class="line">            Request request = <span class="keyword">new</span> <span class="constructor">Request()</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                request.set<span class="constructor">Method(Method.POST)</span>;</span><br><span class="line">                request.set<span class="constructor">Endpoint(<span class="string">"mail/send"</span>)</span>;</span><br><span class="line">                request.set<span class="constructor">Body(<span class="params">mail</span>.<span class="params">build</span>()</span>);</span><br><span class="line">                Response response = sg.api(request);</span><br><span class="line">                <span class="keyword">if</span>(response==null<span class="operator"> || </span><span class="module-access"><span class="module"><span class="identifier">JSONObject</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">response</span>)</span>.length<span class="literal">()</span>&lt;<span class="number">6</span>)&#123;<span class="comment">//发送账单后的响应信息做发送是否成功检查</span></span><br><span class="line">                    logger.info(<span class="string">"发送消息异常，渠道无响应"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(<span class="string">"sendMailResponse:[&#123;&#125;]"</span>,<span class="module-access"><span class="module"><span class="identifier">JSONObject</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">response</span>)</span>);</span><br><span class="line">                <span class="keyword">if</span>(response!=null<span class="operator"> &amp;&amp; </span><span class="string">"202"</span>.equals(response.get<span class="constructor">StatusCode()</span>+<span class="string">""</span>))&#123;</span><br><span class="line">                    logger.info(<span class="string">"消息发送成功：[&#123;&#125;]"</span>,response.get<span class="constructor">StatusCode()</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    logger.info(<span class="string">"发送消息异常，消息未发送成功，请稍后重试"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//发送账单信息之后，进行更新相关信息，即是否发送成功、财务状态改为待支付etc</span></span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                logger.error(<span class="string">"请求异常捕获，MSG=[&#123;&#125;]"</span>,e.get<span class="constructor">Message()</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">"=========================MailThread END========================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每次调用的时候：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送邮件给客户嘞</span></span><br><span class="line">                       String url=<span class="string">""</span>;</span><br><span class="line">                       String url0=noticeUrl.split(<span class="string">"\\?"</span>)<span class="literal">[<span class="number">0</span>]</span>;<span class="comment">//前缀 http://114.116.22.115:8888/index.html#/seek/detail</span></span><br><span class="line">                       String url1=(noticeUrl.split(<span class="string">"\\?"</span>)<span class="literal">[<span class="number">1</span>]</span>).split(<span class="string">"&amp;"</span>).length!=<span class="number">2</span>?<span class="string">""</span>:(noticeUrl.split(<span class="string">"\\?"</span>)<span class="literal">[<span class="number">1</span>]</span>).split(<span class="string">"&amp;"</span>)<span class="literal">[<span class="number">1</span>]</span>;<span class="comment">//后缀 tab=1</span></span><br><span class="line">                       url=url0+<span class="string">"?id="</span>+tDeliveryOrder.get<span class="constructor">Id()</span>+<span class="string">"&amp;"</span>+url1;</span><br><span class="line">                       TConsumer tConsumer=tConsumerService.find<span class="constructor">By(<span class="string">"id"</span>,<span class="params">tDeliveryOrder</span>.<span class="params">getConsumerId</span>()</span>);<span class="comment">//客户id</span></span><br><span class="line">                       TMiddleClientUser tMiddleClientUser=tMiddleClientUserService.find<span class="constructor">By(<span class="string">"id"</span>,<span class="params">tConsumer</span>.<span class="params">getAccountId</span>()</span>);</span><br><span class="line">                       String contentHtml=get<span class="constructor">MailContent(<span class="params">tMiddleClientUser</span>.<span class="params">getFirstName</span>()</span>+tMiddleClientUser.get<span class="constructor">LastName()</span>,tDeliveryOrder.get<span class="constructor">TakeDeliveryId()</span>,url);<span class="comment">//客户名称,询价单号,打开的页面地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                       JSONObject mailJSON=<span class="keyword">new</span> <span class="constructor">JSONObject()</span>;</span><br><span class="line">                       mailJSON.put(<span class="string">"contentHtml"</span>,contentHtml);</span><br><span class="line">                       mailJSON.put(<span class="string">"mainMail"</span>,tConsumer.get<span class="constructor">MainMail()</span>);</span><br><span class="line">                       mailJSON.put(<span class="string">"sendgridApiKey"</span>,sendgridApiKey);</span><br><span class="line">                       MailThread thread=<span class="keyword">new</span> <span class="constructor">MailThread(<span class="params">mailJSON</span>)</span>;</span><br><span class="line">                       thread.start<span class="literal">()</span>;</span><br></pre></td></tr></table></figure>

<h2 id="邮件效果"><a href="#邮件效果" class="headerlink" title="邮件效果"></a>邮件效果</h2><p>先给晾出邮件的效果。  </p>
<blockquote>
<p>第一次尝试使用SendGrid发送邮件：  </p>
</blockquote>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX4BFvHaAjGTO21ZnBL.8UU3b*ATRZ4XiOCUkgfb9eneWEQNte7w0GoX1kSJ0FH9dWBYr2bPZsVyvEzU4I5UZcvQ!/r" alt="image"></p>
<blockquote>
<p>后来发送的时候想发送html，结果发送的内容变成了html代码，而且附件的名称还乱码，真是神奇了。  </p>
</blockquote>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX7toXqNpL60NEetxpe64wpKDyzAo*4fNUC1mz*aywJBexml.2A01S4fGOgzmYmL2WGgKM.q.l4QUgSqXEhbNih4!/r" alt="image"><br><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANXzSDjZfHnJ9mVms8QIiTTM5E82q7xnacy5AsQwUoZX78PFijAGBtOzjLr*kiZ3*he.v4GvE6R5kMe2G.gAGdBAw!/r" alt="image"></p>
<blockquote>
<p>再后来我想对这个img进行设置大小这些个，结果…  </p>
</blockquote>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX2WVdozPixujwI5BIkbfJRQ6z4ZH7p4jZ3L.gKsw*WFUuwprQ7mvaJVOyu.Pk0NAU9BgnRH.WcXZi1YkK0fiujA!/r" alt="image"></p>
<blockquote>
<p>后来我就想啊，阿里云每次给我发的样式也还可以啊，于是骚操作，我就f12，把阿里云的样式代码复制了一份下来当成邮件内容进行发送，结果阿里云的没毛病。  </p>
</blockquote>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX9l8TsJ01xt0XPvt76uekv8s0BNRW6rBUC1lUqyB05yltJEu.*u5B5PdmHmYvvhaOcziChD8auF5KgRi1uJoSU4!/r" alt="image"></p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX5pYjBiFD.HNLVin2rf4cc3*OODMx3u4*cCJXvNCi3o6qSDKVl1kV1zDX3ti3bMOX.JxP45zmntChdg*5GkQt0Y!/r" alt="image"></p>
<blockquote>
<p>解决一下附件名称乱码问题</p>
</blockquote>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX9yT4s8vLJLJukFjyzCWLe6FKYZYMBrRfIrdvrJ.PI7sY8AD7eL15JpEIxbNc4kzQY*212Qna24KROrkbdB7Wi4!/r" alt="image"><br><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX.igs8ZNrQGSq0f.L0h1vNVp883OoZjrpZLGlw*TO1U765OIhUdw7dzZnE4GhqzujJ9uDCVpBqd4vewcVeuB7e0!/r" alt="image"></p>
<blockquote>
<p>从下面开始就开始了我的账单样式兼容旅程</p>
</blockquote>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX*YVFKePJU0NOSZxmxuU8vJOCtT536pXYkUeec1XBnnLojgmaqt7pVBtPTC72*8YOeC1BtJ30iOz2kH*mOr01ds!/r" alt="image"></p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX4o*UiwIyuBDv78s8bWgh8ovgCmSscpQ9GcHHHqS4uy7HrXQb0Kt4gSDH.c0u5m5sU01tkhUCD0g67rwp8kfkeg!/r" alt="image"></p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX1jVgZSussaLt.N1Nt8bdp0pUWqnjTI8WaLw23wLoMKImUEoXx0VKLkzKZjpQc5ApJyVpocGX0EWqV3znFS1WrY!/r" alt="image"></p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX*GenUxHQqrSVsK0vfB6eTKVVPqcw.7vxBpMlkX6RH*9biADj0DcHG0KiEp.5HS.pmONx2TT1VgHUvD2EnZwi4U!/r" alt="image"></p>
<blockquote>
<p>处理好的账单样式</p>
</blockquote>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX8Rl*OZLw8E6ubzxv4R*d3VmFAvHE5PEHKFYhQD3775lpeHG8a3theqOuZoGVZdhf.AbkCILhDcu5nqttpi4*gE!/r" alt="image"></p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX6ThGnF7nbCkLiuC5NSFqzMuwoM0YuF3WM5cQE93CTtA9V9ajEh7qKsGiUCiAABSdcpL3jPkUHPm.RsD.MhG.pE!/r" alt="image"></p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANXyx4SEiOmlqZfzszuKcknSsjLVQJkF**PiXP31WycOzfahyCTxLlPbOW73pgeapNqw4nI9tldk9XUK0BITSj5XU!/r" alt="image"></p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANXzrzsI.fkttQUi7wb7EOmgdAxOPNsOH.vusV*31bHJxNEr9MRXpEWDagd6DlUymkid0VXPiRTPNWm1JFOSmYwKk!/r" alt="image"></p>
<h2 id="SendGrid"><a href="#SendGrid" class="headerlink" title="SendGrid"></a>SendGrid</h2><h3 id="SendGrid介绍"><a href="#SendGrid介绍" class="headerlink" title="SendGrid介绍"></a>SendGrid介绍</h3><p>首先介绍一下SendGrid邮件服务。  </p>
<blockquote>
<p>百度百科</p>
</blockquote>
<p>SendGrid 是一个电子邮件服务平台，可以帮助市场营销人员跟踪他们的电子邮件统计数据。<br>致力于帮助公司管理事务性邮件，包括航运通知、简报和注册确认等。</p>
<p>反正理解为就是一个用来发邮件的第三方就是的。<br>链接：<a href="https://app.sendgrid.com/" target="_blank" rel="noopener">https://app.sendgrid.com/</a><br>注册登录进去之后进行一系列操作，你将会获得你的账号、密码、api_key_id、api_key这些个东西就可以了。</p>
<h3 id="SendGrid-maven依赖"><a href="#SendGrid-maven依赖" class="headerlink" title="SendGrid maven依赖"></a>SendGrid maven依赖</h3><p>maven依赖jar包：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.sendgrid/sendgrid-java --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sendgrid<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sendgrid-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="SendGrid-Demo"><a href="#SendGrid-Demo" class="headerlink" title="SendGrid Demo"></a>SendGrid Demo</h3><p>下面我就贴一下测试demo:  </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">package com.yourshares.modelTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.paypal.base.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> com.sendgrid.*;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.Tester;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.common.tools.LogFileName;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.common.utils.LoggerUtils;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.service.TOutRepoOrderExpenseService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mail 模块测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailTest</span> <span class="title">extends</span> <span class="title">Tester</span> </span>&#123;</span><br><span class="line">    <span class="type">Logger</span> logger = <span class="type">LoggerUtils</span>.<span class="type">Logger</span>(<span class="type">LogFileName</span>.<span class="type">API</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> sendgridApiKey=<span class="string">"此处填上您在SendGrid上的APIKEY"</span>;</span><br><span class="line"><span class="comment">//    private final static String DEST = "D:\\80afa41a3bfc474cbf1ac8b5bc1d.pdf";	//生成pdf的路径</span></span><br><span class="line"><span class="comment">//    private final static String SRC = "D:\\3b33a68bbf52417aac48687937352464.html";	//html文件路径</span></span><br><span class="line"><span class="comment">//    public static final String FONT = "F:\otosanscjksc_downcc\otoSansCJKSC\otoSansCJKsc-Thin.otf";	//本地字体路径（百度下载）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void style<span class="constructor">Test()</span>&#123;</span><br><span class="line">      String url=<span class="string">""</span>;</span><br><span class="line">      String noticeUrl=<span class="string">"http://114.116.22.115:8888/index.html#/pickup/directlist/detail?id=直发提货单ID"</span>;</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"url0:  "</span>+noticeUrl.split(<span class="string">"\\?"</span>)<span class="literal">[<span class="number">0</span>]</span>);</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"url1:  "</span>+noticeUrl.split(<span class="string">"\\?"</span>)<span class="literal">[<span class="number">1</span>]</span>);</span><br><span class="line">      String url0=noticeUrl.split(<span class="string">"\\?"</span>)<span class="literal">[<span class="number">0</span>]</span>;<span class="comment">//前缀 http://114.116.22.115:8888/index.html#/seek/detail</span></span><br><span class="line">      String url1=(noticeUrl.split(<span class="string">"\\?"</span>)<span class="literal">[<span class="number">1</span>]</span>).split(<span class="string">"&amp;"</span>).length!=<span class="number">2</span>?<span class="string">""</span>:(noticeUrl.split(<span class="string">"\\?"</span>)<span class="literal">[<span class="number">1</span>]</span>).split(<span class="string">"&amp;"</span>)<span class="literal">[<span class="number">1</span>]</span>;<span class="comment">//后缀 tab=1</span></span><br><span class="line">      url=url0+<span class="string">"?id="</span>+<span class="number">23</span>+<span class="string">"&amp;"</span>+url1;</span><br><span class="line">      String contentHtml=get<span class="constructor">MailContent(<span class="string">"冯莎娜"</span>,<span class="string">"TD202001010809435400000"</span>,<span class="params">url</span>)</span>;<span class="comment">//客户名称,询价单号,打开的页面地址</span></span><br><span class="line">      Email from = <span class="keyword">new</span> <span class="constructor">Email(<span class="string">"info@fbabee.com"</span>)</span>;<span class="comment">//发件方@outlook.com</span></span><br><span class="line">      String subject = <span class="string">"领赫 - 消息提醒(*^▽^*)"</span>;<span class="comment">//</span></span><br><span class="line">      Email <span class="keyword">to</span> = <span class="keyword">new</span> <span class="constructor">Email(<span class="string">"2915324940@qq.com"</span>)</span>;<span class="comment">//客户的主邮箱</span></span><br><span class="line">      Content content = <span class="keyword">new</span> <span class="constructor">Content(<span class="string">"text/html"</span>,<span class="params">contentHtml</span>)</span>;</span><br><span class="line">      Mail mail = <span class="keyword">new</span> <span class="constructor">Mail(<span class="params">from</span>, <span class="params">subject</span>, <span class="params">to</span>, <span class="params">content</span>)</span>;</span><br><span class="line">      String apiKey = sendgridApiKey;<span class="comment">//这个key来源参考4如何获取apiKey</span></span><br><span class="line">      SendGrid sg = <span class="keyword">new</span> <span class="constructor">SendGrid(<span class="params">apiKey</span>)</span>;</span><br><span class="line">      Request request = <span class="keyword">new</span> <span class="constructor">Request()</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          request.set<span class="constructor">Method(Method.POST)</span>;</span><br><span class="line">          request.set<span class="constructor">Endpoint(<span class="string">"mail/send"</span>)</span>;</span><br><span class="line">          request.set<span class="constructor">Body(<span class="params">mail</span>.<span class="params">build</span>()</span>);</span><br><span class="line">          Response response = sg.api(request);</span><br><span class="line">          <span class="keyword">if</span>(response==null<span class="operator"> || </span><span class="module-access"><span class="module"><span class="identifier">JSONObject</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">response</span>)</span>.length<span class="literal">()</span>&lt;<span class="number">6</span>)&#123;<span class="comment">//发送账单后的响应信息做发送是否成功检查</span></span><br><span class="line">              logger.info(<span class="string">"发送消息异常，渠道无响应"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          logger.info(<span class="string">"sendMailResponse:[&#123;&#125;]"</span>,<span class="module-access"><span class="module"><span class="identifier">JSONObject</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">response</span>)</span>);</span><br><span class="line">          <span class="comment">//账单发送成功，后续处理更改发货单状态</span></span><br><span class="line">          <span class="keyword">if</span>(response!=null<span class="operator"> &amp;&amp; </span><span class="string">"202"</span>.equals(response.get<span class="constructor">StatusCode()</span>+<span class="string">""</span>))&#123;</span><br><span class="line">              logger.info(<span class="string">"消息发送成功：[&#123;&#125;]"</span>,response.get<span class="constructor">StatusCode()</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              logger.info(<span class="string">"发送消息异常，消息未发送成功，请稍后重试"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//发送账单信息之后，进行更新相关信息，即是否发送成功、财务状态改为待支付etc</span></span><br><span class="line">      &#125; catch (IOException e) &#123;</span><br><span class="line">          logger.error(<span class="string">"请求异常捕获，MSG=[&#123;&#125;]"</span>,e.get<span class="constructor">Message()</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这个地方是做邮件样式处理的demo：  </p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param middleClientUserName 客户名称</span></span><br><span class="line"><span class="comment"> * @param orderId 订单号</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public String getMailContent(String middleClientUserName,String orderId,String noticeUrl)&#123;</span><br><span class="line">    StringBuffer html=new StringBuffer(<span class="string">"&lt;!DOCTYPE html&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;html&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;head&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;meta charset=<span class="subst">\"</span>utf-8<span class="subst">\"</span> /&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/head&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;body&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;table width=<span class="subst">\"</span>800<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>center<span class="subst">\"</span> cellpadding=<span class="subst">\"</span>0<span class="subst">\"</span> cellspacing=<span class="subst">\"</span>0<span class="subst">\"</span> bgcolor=<span class="subst">\"</span>#ffffff<span class="subst">\"</span> style=<span class="subst">\"</span>font-family:'Microsoft YaHei';<span class="subst">\"</span>&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tbody&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;table width=<span class="subst">\"</span>800<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>center<span class="subst">\"</span> cellpadding=<span class="subst">\"</span>0<span class="subst">\"</span> cellspacing=<span class="subst">\"</span>0<span class="subst">\"</span> height=<span class="subst">\"</span>40<span class="subst">\"</span>&gt;&lt;/table&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;table width=<span class="subst">\"</span>800<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>center<span class="subst">\"</span> cellpadding=<span class="subst">\"</span>0<span class="subst">\"</span> cellspacing=<span class="subst">\"</span>0<span class="subst">\"</span> bgcolor=<span class="subst">\"</span>#ffffff<span class="subst">\"</span> height=<span class="subst">\"</span>48<span class="subst">\"</span> style=<span class="subst">\"</span>font-family:'Microsoft YaHei';<span class="subst">\"</span>&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tbody&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td height=<span class="subst">\"</span>48<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>center<span class="subst">\"</span> valign=<span class="subst">\"</span>middle<span class="subst">\"</span> style=<span class="subst">\"</span>padding-left:20px;<span class="subst">\"</span>&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;a href=<span class="subst">\"</span>javascript:void(0);<span class="subst">\"</span> target=<span class="subst">\"</span>_blank<span class="subst">\"</span> rel=<span class="subst">\"</span>noopener<span class="subst">\"</span>&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;img src=<span class="subst">\"</span>http://fba-srm.oss-cn-hongkong.aliyuncs.com/202002241734417550微信图片_20200224173432.png<span class="subst">\"</span> width=<span class="subst">\"</span>120px<span class="subst">\"</span> height=<span class="subst">\"</span>25px<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span>&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/a&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>703<span class="subst">\"</span> height=<span class="subst">\"</span>48<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span> align=<span class="subst">\"</span>right<span class="subst">\"</span> valign=<span class="subst">\"</span>middle<span class="subst">\"</span> style=<span class="subst">\"</span>color:#ffffff; padding-right:20px;<span class="subst">\"</span>&gt;&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tbody&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/table&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;table width=<span class="subst">\"</span>800<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>left<span class="subst">\"</span> cellpadding=<span class="subst">\"</span>0<span class="subst">\"</span> cellspacing=<span class="subst">\"</span>0<span class="subst">\"</span> style=<span class="subst">\"</span>border-top:none; border-bottom:none; padding:0 20px;font-size:14px;color:#333333;<span class="subst">\"</span>&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tbody&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>760<span class="subst">\"</span> height=<span class="subst">\"</span>56<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>left<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span> style=<span class="subst">\"</span> font-size:16px;vertical-align:bottom;<span class="subst">\"</span>&gt;尊敬的"</span> +</span><br><span class="line">            <span class="string">"&lt;a target=<span class="subst">\"</span>_blank<span class="subst">\"</span> href=<span class="subst">\"</span>javascript:void(0);<span class="subst">\"</span> style=<span class="subst">\"</span>font-size:16px; font-weight:bold;<span class="subst">\"</span> rel=<span class="subst">\"</span>noopener<span class="subst">\"</span>&gt;"</span>+middleClientUserName+<span class="string">"&lt;/a&gt;:&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>760<span class="subst">\"</span> height=<span class="subst">\"</span>30<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>left<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span>&gt;&amp;nbsp;&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>40<span class="subst">\"</span> height=<span class="subst">\"</span>32<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>left<span class="subst">\"</span> valign=<span class="subst">\"</span>middle<span class="subst">\"</span> style=<span class="subst">\"</span> width:40px; text-align:left;vertical-align:middle; line-height:32px; float:left;<span class="subst">\"</span>&gt;&amp;nbsp;&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>720<span class="subst">\"</span> height=<span class="subst">\"</span>32<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> align=<span class="subst">\"</span>left<span class="subst">\"</span> style=<span class="subst">\"</span> width:720px; text-align:left;vertical-align:middle;line-height:32px;<span class="subst">\"</span>&gt;您提交的询价单&lt;a href=<span class="subst">\"</span>javascript:void(0);<span class="subst">\"</span> target=<span class="subst">\"</span>_blank<span class="subst">\"</span> rel=<span class="subst">\"</span>noopener<span class="subst">\"</span>&gt;(ID:"</span>+orderId+<span class="string">")&lt;/a&gt;，已完成人工报价，请前往查看&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>720<span class="subst">\"</span> height=<span class="subst">\"</span>32<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span> style=<span class="subst">\"</span>padding-left:40px;line-height:32px;<span class="subst">\"</span>&gt;&lt;a href=<span class="subst">\"</span>"</span>+noticeUrl+<span class="string">"<span class="subst">\"</span> target=<span class="subst">\"</span>_blank<span class="subst">\"</span> rel=<span class="subst">\"</span>noopener<span class="subst">\"</span>&gt;点此查看&lt;/a&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">""</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>720<span class="subst">\"</span> height=<span class="subst">\"</span>32<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span> style=<span class="subst">\"</span>padding-left:40px;<span class="subst">\"</span>&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>720<span class="subst">\"</span> height=<span class="subst">\"</span>32<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span> style=<span class="subst">\"</span>padding-left:40px;<span class="subst">\"</span>&gt;&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>720<span class="subst">\"</span> height=<span class="subst">\"</span>32<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span> style=<span class="subst">\"</span>padding-left:40px;<span class="subst">\"</span>&gt;&amp;nbsp;&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">""</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>720<span class="subst">\"</span> height=<span class="subst">\"</span>14<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span> style=<span class="subst">\"</span>padding-bottom:16px; border-bottom:1px dashed #e5e5e5;font-family:'Microsoft YaHei';<span class="subst">\"</span>&gt; &lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td width=<span class="subst">\"</span>720<span class="subst">\"</span> height=<span class="subst">\"</span>14<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span> style=<span class="subst">\"</span>padding:8px 0 28px;color:#999999; font-size:12px;font-family:'Microsoft YaHei';<span class="subst">\"</span>&gt;此为系统邮件请勿回复&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tbody&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/table&gt;"</span> +</span><br><span class="line">            <span class="string">""</span> +</span><br><span class="line">            <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;table align=<span class="subst">\"</span>center<span class="subst">\"</span> border=<span class="subst">\"</span>0<span class="subst">\"</span> width=<span class="subst">\"</span>100%<span class="subst">\"</span> cellpadding=<span class="subst">\"</span>0<span class="subst">\"</span> cellspacing=<span class="subst">\"</span>0<span class="subst">\"</span> bgcolor=<span class="subst">\"</span>#fff<span class="subst">\"</span>&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tbody&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;p style=<span class="subst">\"</span>line-height: 22px; font-family: 'Microsoft YaHei'; font-size: 12px; color: #999; text-align: center;<span class="subst">\"</span>&gt;&lt;/p&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tbody&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/table&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tr&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/tbody&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/table&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/body&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/html&gt;"</span>);</span><br><span class="line">    logger.info(<span class="string">"账单内容："</span>+html);</span><br><span class="line">    return html.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个地方是我写好的一个html样式，然后测试发送这个邮件内容到我自己的邮箱里面去：  </p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送样式 的邮件   https://www.sandbox.paypal.com/invoice/p/#83NQMXZRG6KPAZ4Y</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @throws IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void test4() throws  IOException&#123;</span><br><span class="line">    Email from = new Email(<span class="string">"info@fbabee.com"</span>);<span class="comment">//发件方@outlook.com</span></span><br><span class="line">    String subject = <span class="string">"领赫 - 账单提醒(*^▽^*)"</span>;<span class="comment">//Sending with Twilio SendGrid is Fun</span></span><br><span class="line">    Email to = new Email(<span class="string">"2915324940@qq.com"</span>);<span class="comment">//收件方@gmail.com</span></span><br><span class="line">    <span class="comment">//"&lt;div style='width:800px;height:600px;background-color:black'&gt; &lt;img  width='200px' height='300px'  src='http://m.qpic.cn/psc?/V11rBmNJ1xB9lV/hsnfJ.a5yg7.BhItQyNwPS2w5W77Ya6n7UEvCBQEhtvp5TN5vlqR7nIjceIjHX.H5V6eg9RYIZp65ofTS1zkiEpKFmlRFGi7*beRV26DJLI!/b&amp;bo=VQhABgAKgAcRCag!&amp;rf=viewer_4'&gt;&lt;/img&gt;&lt;/div&gt;"</span></span><br><span class="line">    Content content = new Content(<span class="string">"text/html"</span>,<span class="string">"&lt;!DOCTYPE html&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"&lt;html&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span>&lt;head&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span>&lt;meta charset=<span class="subst">\"</span>utf-8<span class="subst">\"</span> /&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span>&lt;title&gt;&lt;/title&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span>&lt;style&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>.right&#123;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>text-align: right;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>font-size: 10px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>.indent&#123;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>text-indent: 180px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>font-size: 10px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>.widd&#123;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>width: 230px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>font-size: 10px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>.centt&#123;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>text-align: center;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>font-size: 10px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>.bolder&#123;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>font-size: 10px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>font-weight: bolder;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>.ant-btn-red &#123;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    color: #FFF;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    background-color: #FF5A44;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    border-color: #FF5A44;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    text-shadow: 0 -1px 0 rgba(0,0,0,0.12);<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    -webkit-box-shadow: 0 2px 0 rgba(0,0,0,0.045);<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    box-shadow: 0 2px 0 rgba(0,0,0,0.045);<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">".ant-btn &#123;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    line-height: 2.2;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    position: relative;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    display: inline-block;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    font-weight: 400;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    white-space: nowrap;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    text-align: center;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    background-image: none;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    border: 1px solid transparent;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    -webkit-box-shadow: 0 2px 0 rgba(0,0,0,0.015);<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    box-shadow: 0 2px 0 rgba(0,0,0,0.015);<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    cursor: pointer;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    -webkit-transition: all .3s cubic-bezier(.645, .045, .355, 1);<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    transition: all .3s cubic-bezier(.645, .045, .355, 1);<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    -webkit-user-select: none;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    -moz-user-select: none;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    -ms-user-select: none;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    user-select: none;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    -ms-touch-action: manipulation;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    touch-action: manipulation;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    height: 32px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    padding: 0 15px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    font-size: 14px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    border-radius: 4px;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    color: rgba(0,0,0,0.65);<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    background-color: #fff;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>    border-color: #d9d9d9;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>.font&#123;font-size: 10px;&#125;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span>&lt;/style&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span>&lt;/head&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span>&lt;body&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span>&lt;table width=<span class="subst">\"</span>650px<span class="subst">\"</span> height=<span class="subst">\"</span>100%<span class="subst">\"</span> style=<span class="subst">\"</span>background-color: white;margin: auto; font-family:'Microsoft YaHei';<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 25px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>4<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>width: 50px;<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr &gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span> class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;&lt;img width=<span class="subst">\"</span>120px<span class="subst">\"</span> height=<span class="subst">\"</span>25px<span class="subst">\"</span> src=<span class="subst">\"</span>http://fba-srm.oss-cn-hongkong.aliyuncs.com/202002241734417550微信图片_20200224173432.png<span class="subst">\"</span>/&gt;&lt;/td&gt;&lt;!--FBABEE--&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>2<span class="subst">\"</span> style=<span class="subst">\"</span>text-align: right;font-size: 25px;font-weight: bold;<span class="subst">\"</span> &gt;INVOICE&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 2px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span> class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;Shenzhen Linkhub Supply-Chain Management Co.LTD&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>font-size: 10px;text-align: right;font-weight: bolder;<span class="subst">\"</span>&gt;Invoince ID&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>font-size: 10px;text-align: right;<span class="subst">\"</span>&gt;1904193751&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span> class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;Add:302,Building D,New Retail Tech Industrial Zoon&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>font-size: 10px;text-align: right;font-weight: bolder;<span class="subst">\"</span>&gt;FBA ID&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>font-size: 10px;text-align: right;<span class="subst">\"</span>&gt;XXXXXXX&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span> class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;GUshu,Xixiang Street,Bao'An,518000&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>font-size: 10px;text-align: right;font-weight: bolder;<span class="subst">\"</span>&gt;Date Issued&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>font-size: 10px;text-align: right;<span class="subst">\"</span>&gt;2019/05/02&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span> class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;Guangdong Province,China&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>font-size: 10px;text-align: right;font-weight: bolder;<span class="subst">\"</span>&gt;Due Date&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>font-size: 10px;text-align: right;<span class="subst">\"</span>&gt;2019/05/02&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 30px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>2<span class="subst">\"</span> class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;Bill to&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span> class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;Ship to&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 2px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>2<span class="subst">\"</span> class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;公司名称&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span> class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;24300 Nandina Ave,Moreno Valley,CA,&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>2<span class="subst">\"</span> class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;公司地址&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span> class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;92551,United States&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 30px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;Items Description&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>4<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 2px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;费用集合一&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>bolder indent<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span>&gt;Rate&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>centt bolder<span class="subst">\"</span>&gt;Quantity&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>right bolder<span class="subst">\"</span>&gt;Amount&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 2px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;固定费用&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>indent<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span>&gt;1&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>centt<span class="subst">\"</span>&gt;x 10 &lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>right<span class="subst">\"</span>&gt;$ 10.00&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;快递取件费用&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>indent<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span>&gt;0/kg&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>centt<span class="subst">\"</span>&gt;x 121kg&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>right<span class="subst">\"</span>&gt;$ 0.00&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;关税&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>indent<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span>&gt;0&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>centt<span class="subst">\"</span>&gt;x 1331 &lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>right<span class="subst">\"</span>&gt;$ 0.00&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;重量变动费用&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>indent<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span>&gt;8/kg&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>centt<span class="subst">\"</span>&gt;x 121kg&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>right<span class="subst">\"</span>&gt;$ 968.00&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr style=<span class="subst">\"</span>height: 2px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>1<span class="subst">\"</span> class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;偏远地区配送附加费&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>4<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 2px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>font<span class="subst">\"</span>&gt;偏远地区配送附加费&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>indent<span class="subst">\"</span> colspan=<span class="subst">\"</span>2<span class="subst">\"</span>&gt;90/kg&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>centt<span class="subst">\"</span>&gt;x 121kg&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>right<span class="subst">\"</span>&gt;$ 10890.00&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr style=<span class="subst">\"</span>height: 2px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;Total&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>right bolder<span class="subst">\"</span>&gt;$ 11868.00&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 30px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;Bank Infomation&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>4<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 2px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td style=<span class="subst">\"</span>width: 100px;<span class="subst">\"</span> class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;Paypal Account&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>widd<span class="subst">\"</span>&gt;Palpal@fbabee.com&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;Payoneer Account&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>widd<span class="subst">\"</span>&gt;fsn2915324940@163.com&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>bolder<span class="subst">\"</span>&gt;T/T&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td class=<span class="subst">\"</span>widd<span class="subst">\"</span>&gt;银行账号信息，暂时明确不了&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>3<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 80px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;tr style=<span class="subst">\"</span>height: 30px;<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;td colspan=<span class="subst">\"</span>5<span class="subst">\"</span>&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;div style=<span class="subst">\"</span>margin:0 auto;width:200px;<span class="subst">\"</span>&gt; <span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;a href=<span class="subst">\"</span>https://www.baidu.com<span class="subst">\"</span> class=<span class="subst">\"</span>ant-btn-red ant-btn<span class="subst">\"</span> style=<span class="subst">\"</span> text-decoration: none;<span class="subst">\"</span>&gt;PayPal确认支付&lt;/a&gt; <span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/div&gt; <span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/td&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\t</span>&lt;/tr&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span><span class="subst">\t</span>&lt;/table&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"<span class="subst">\t</span>&lt;/body&gt;<span class="subst">\n</span>"</span> +</span><br><span class="line">            <span class="string">"&lt;/html&gt;"</span> );</span><br><span class="line">    Mail mail = new Mail(from, subject, to, content);</span><br><span class="line">    String apiKey = sendgridApiKey;<span class="comment">//这个key来源参考4如何获取apiKey</span></span><br><span class="line">    SendGrid sg = new SendGrid(apiKey);</span><br><span class="line">    Request request = new Request();</span><br><span class="line">    try &#123;</span><br><span class="line">        request.setMethod(Method.POST);</span><br><span class="line">        request.setEndpoint(<span class="string">"mail/send"</span>);</span><br><span class="line">        request.setBody(mail.build());</span><br><span class="line">        Response response = sg.api(request);</span><br><span class="line">        System.out.println(response.getStatusCode());</span><br><span class="line">        System.out.println(response.getBody());</span><br><span class="line">        System.out.println(response.getHeaders());</span><br><span class="line">    &#125; catch (IOException ex) &#123;</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">public void t()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个地方是我之前参考的别人的博客，进行发送账单邮件这些的，但是我后来发现，写的样式并不那啥，就是我明明在hbuilder上面html写的还可以整体，但是发送到了qq邮箱里面去的时候，哦豁，不兼容，搞死我了。然而我也不是个前端小哥哥，所以兼容这方面还是费了我点心力的，总之就是心力交瘁。  </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * https://www.sandbox.paypal.com/invoice/p/#W4NWHW2FA2XXGFZQ  账单的分享链接</span></span><br><span class="line"><span class="comment">     * 样式+附件一起发送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @org.junit.Test</span></span><br><span class="line"><span class="comment">//    public void test()&#123;</span></span><br><span class="line"><span class="comment">//        EmailOptions emailOptions = new EmailOptions();</span></span><br><span class="line"><span class="comment">//        emailOptions.setToMailList(Arrays.asList("2915324940@qq.com"));//"198866436@qq.com" "fsn2915324940@163.com",</span></span><br><span class="line"><span class="comment">//        emailOptions.setSubject("领赫 - 账单提醒~~~~(*^▽^*)");//附件测试</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        emailOptions.setContent("来了来了来了&lt;div style='width:800px;height:600px;background-color:black'&gt; &lt;img  width='200px' height='300px'  src='http://m.qpic.cn/psc?/V11rBmNJ1xB9lV/hsnfJ.a5yg7.BhItQyNwPS2w5W77Ya6n7UEvCBQEhtvp5TN5vlqR7nIjceIjHX.H5V6eg9RYIZp65ofTS1zkiEpKFmlRFGi7*beRV26DJLI!/b&amp;bo=VQhABgAKgAcRCag!&amp;rf=viewer_4'&gt;&lt;/img&gt;&lt;/div&gt;");//&lt;h1&gt;终于等到你，来付款吧&lt;/h1&gt;&lt;hr/&gt;&lt;a href='https://www.sandbox.paypal.com/invoice/p/#W4NWHW2FA2XXGFZQ'&gt;GO&lt;/a&gt;</span></span><br><span class="line"><span class="comment">//        //辛苦了。 详细情况请确认附件。  就这些。请多关照。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        // 添付ファイル  邮件附件。</span></span><br><span class="line"><span class="comment">//        List&lt;Attachments&gt; attachments = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        Attachments attachment = new Attachments();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        byte[] fileData = null;</span></span><br><span class="line"><span class="comment">//        fileData = fileConvertToByteArray(new File("C:\\Users\\ASUS\\Desktop\\账单TEST.pdf"));//附件  C:\Users\ASUS\Desktop\古风素材\psb (1).jpg</span></span><br><span class="line"><span class="comment">//        attachment.setContentId("账单邮件~~~~(*^▽^*)");</span></span><br><span class="line"><span class="comment">//        Base64 x = new Base64();</span></span><br><span class="line"><span class="comment">//        attachment.setContent(x.encodeAsString(fileData));</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            attachment.setFilename(MimeUtility.encodeText("领赫账单.pdf"));//image.jpg  此处发送过去的中文乱码</span></span><br><span class="line"><span class="comment">//        &#125;catch (UnsupportedEncodingException e)&#123;</span></span><br><span class="line"><span class="comment">//            logger.info("转码抛出异常=========");</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        attachment.setType("plain/text");</span></span><br><span class="line"><span class="comment">//        attachments.add(attachment);</span></span><br><span class="line"><span class="comment">//        emailOptions.setAttachments(attachments);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        logger.info("emailOptions:[&#123;&#125;]", JSONObject.toJSONString(emailOptions));</span></span><br><span class="line"><span class="comment">//        // メール送信 发送邮件</span></span><br><span class="line"><span class="comment">//        sendMail(emailOptions);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * メールの送信 发送邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param emailOptions メールオプション  邮件选项</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public void sendMail(EmailOptions emailOptions) &#123;</span></span><br><span class="line"><span class="comment">//        Mail mail = new Mail();</span></span><br><span class="line"><span class="comment">//        // 差出人 (sendFrom:注册时的邮箱)</span></span><br><span class="line"><span class="comment">//        Email from = new Email("info@fbabee.com");</span></span><br><span class="line"><span class="comment">//        mail.setFrom(from);</span></span><br><span class="line"><span class="comment">//        // 宛先</span></span><br><span class="line"><span class="comment">//        if (emailOptions.getToMailList() != null) &#123;</span></span><br><span class="line"><span class="comment">//            emailOptions.getToMailList().forEach(to -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                logger.info("========&gt;to:[&#123;&#125;]",JSONObject.toJSONString(to));</span></span><br><span class="line"><span class="comment">//                Personalization personalization = new Personalization();</span></span><br><span class="line"><span class="comment">//                personalization.addTo(new Email(to.toString()));</span></span><br><span class="line"><span class="comment">//                mail.addPersonalization(personalization);</span></span><br><span class="line"><span class="comment">//            &#125;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        // 件名</span></span><br><span class="line"><span class="comment">//        String subject = emailOptions.getSubject();</span></span><br><span class="line"><span class="comment">//        mail.setSubject(subject);</span></span><br><span class="line"><span class="comment">//        // メール内容 邮件内容</span></span><br><span class="line"><span class="comment">////        Content content = new Content("text/plain", emailOptions.getContent());</span></span><br><span class="line"><span class="comment">//        Content content = new Content("text/html", emailOptions.getContent());</span></span><br><span class="line"><span class="comment">//        mail.addContent(content);</span></span><br><span class="line"><span class="comment">//        // 添付ファイル 邮件附件。</span></span><br><span class="line"><span class="comment">//        if (emailOptions.getAttachments() != null) &#123;</span></span><br><span class="line"><span class="comment">//            emailOptions.getAttachments().forEach(attachments -&gt; &#123; mail.addAttachments(attachments); &#125;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        logger.info("mail:[&#123;&#125;]",JSONObject.toJSONString(mail));</span></span><br><span class="line"><span class="comment">//        // (sendgridApiKey:经过变换的API key)</span></span><br><span class="line"><span class="comment">//        SendGrid sg = new SendGrid(sendgridApiKey);</span></span><br><span class="line"><span class="comment">//        Request request = new Request();</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            request.setMethod(Method.POST);</span></span><br><span class="line"><span class="comment">//            request.setEndpoint("mail/send");</span></span><br><span class="line"><span class="comment">//            request.setBody(mail.build());</span></span><br><span class="line"><span class="comment">//            Response response = sg.api(request);</span></span><br><span class="line"><span class="comment">//            // 202:成功</span></span><br><span class="line"><span class="comment">//            logger.info("response:[&#123;&#125;]",JSONObject.toJSONString(response));</span></span><br><span class="line"><span class="comment">//            logger.info("StatusCode: [&#123;&#125;]", response.getStatusCode());</span></span><br><span class="line"><span class="comment">//        &#125; catch (IOException ex) &#123;</span></span><br><span class="line"><span class="comment">//            logger.error("", ex);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把一个文件转化为byte字节数组。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] fileConvertToByteArray(<span class="built_in">File</span> file) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = null;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.<span class="built_in">read</span>(<span class="built_in">buffer</span>)) != <span class="number">-1</span>) &#123;</span><br><span class="line">                baos.<span class="built_in">write</span>(<span class="built_in">buffer</span>, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            data = baos.toByteArray();</span><br><span class="line"></span><br><span class="line">            fis.<span class="built_in">close</span>();</span><br><span class="line">            baos.<span class="built_in">close</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//base64字符串转byte[]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] base64String2ByteFun(<span class="keyword">String</span> base64Str)&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64.decodeBase64(base64Str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//byte[]转base64</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">byte2Base64StringFun</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64.encodeBase64String(b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这个forEache 简直了，我想说，反正应该是jdk1.8的新式写法吧，还可以感觉，给我的感觉有点额，就是有点像js里面哦哦不是jquery里面一样的那种forEach。  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">    @org.junit.Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> test2()&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 测试forEach 用法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Map&lt;String,<span class="type">Integer</span>&gt;&gt; list=<span class="built_in">new</span> ArrayList&lt;Map&lt;String,<span class="type">Integer</span>&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            Map map=<span class="built_in">new</span> HashMap();</span><br><span class="line">            map.put("测试名称"+i,i);</span><br><span class="line">            list.<span class="keyword">add</span>(map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">            list.<span class="keyword">forEach</span>(<span class="keyword">to</span> -&gt; &#123;</span><br><span class="line">                Map&lt;String,<span class="type">Integer</span>&gt; map=JSONObject.parseObject(JSONObject.toJSONString(<span class="keyword">to</span>),Map.<span class="keyword">class</span>);</span><br><span class="line">               logger.<span class="keyword">info</span>("=====&gt;打印to:[&#123;&#125;]",JSONObject.toJSONString(map));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    TOutRepoOrderExpenseService tOutRepoOrderExpenseService;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> bytessss() throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">//        String str="hello World  你好世界";</span><br><span class="line">//        try &#123;</span><br><span class="line">//            String aaa = <span class="built_in">new</span> String(str.getBytes("UTF-8"), "iso-8859-1");</span><br><span class="line">//            <span class="keyword">System</span>.<span class="keyword">out</span>.println("=======&gt;aaa print: " + aaa);</span><br><span class="line">//        &#125;catch (UnsupportedEncodingException e)&#123;</span><br><span class="line">//            <span class="keyword">System</span>.<span class="keyword">out</span>.println("====&gt;转码抛出异常");</span><br><span class="line">//        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //查询账单信息，并循环样式</span><br><span class="line">//    Condition expenseCondition=<span class="built_in">new</span> Condition(TOutRepoOrderExpense.<span class="keyword">class</span>);</span><br><span class="line">//    expenseCondition.createCriteria().andEqualTo("outOrderNo",<span class="number">41</span>);</span><br><span class="line">//    List&lt;TOutRepoOrderExpense&gt; tOutRepoOrderExpenses=tOutRepoOrderExpenseService.findByCondition(expenseCondition);</span><br><span class="line">//    List&lt;List&lt;TOutRepoOrderExpense&gt;&gt; typeList=<span class="built_in">new</span> ArrayList&lt;List&lt;TOutRepoOrderExpense&gt;&gt;();</span><br><span class="line">//    BigDecimal totalSum=BigDecimal.ZERO;</span><br><span class="line">//    <span class="keyword">for</span> (TOutRepoOrderExpense tOutRepoOrderExpense:tOutRepoOrderExpenses)&#123;</span><br><span class="line">//        totalSum=totalSum.<span class="keyword">add</span>(tOutRepoOrderExpense.getTotal());</span><br><span class="line">//        <span class="keyword">if</span>(typeList.size()==<span class="number">0</span>)&#123;</span><br><span class="line">//            List&lt;TOutRepoOrderExpense&gt; list=<span class="built_in">new</span> ArrayList&lt;TOutRepoOrderExpense&gt;();</span><br><span class="line">//            list.<span class="keyword">add</span>(tOutRepoOrderExpense);</span><br><span class="line">//            typeList.<span class="keyword">add</span>(list);</span><br><span class="line">//        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">//         //需要进行比较collectionName是否一致，如果存在一致就放入该集合，如果遍历到底发现无一致的集合则创建新集合</span><br><span class="line">//            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;typeList.size();i++)&#123;</span><br><span class="line">//                List&lt;TOutRepoOrderExpense&gt; list=typeList.<span class="keyword">get</span>(i);</span><br><span class="line">//                <span class="type">boolean</span> addFlag=<span class="keyword">false</span>;</span><br><span class="line">//                <span class="keyword">for</span>(TOutRepoOrderExpense t:list)&#123;</span><br><span class="line">//                    <span class="keyword">if</span>(t.getCollectionName().equals(tOutRepoOrderExpense.getCollectionName()))&#123;</span><br><span class="line">//                        list.<span class="keyword">add</span>(tOutRepoOrderExpense);</span><br><span class="line">//                        break;</span><br><span class="line">//                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">//                        addFlag=<span class="keyword">true</span>;</span><br><span class="line">//                    &#125;</span><br><span class="line">//                &#125;</span><br><span class="line">//                <span class="keyword">if</span>(addFlag) &#123;</span><br><span class="line">//                    List&lt;TOutRepoOrderExpense&gt; list2=<span class="built_in">new</span> ArrayList&lt;TOutRepoOrderExpense&gt;();</span><br><span class="line">//                    list2.<span class="keyword">add</span>(tOutRepoOrderExpense);</span><br><span class="line">//                    typeList.<span class="keyword">add</span>(list2);</span><br><span class="line">//                    break;</span><br><span class="line">//                &#125;</span><br><span class="line">//            &#125;</span><br><span class="line">//        &#125;</span><br><span class="line">//    &#125;</span><br><span class="line"></span><br><span class="line">    StringBuffer html=<span class="built_in">new</span> StringBuffer("&lt;!DOCTYPE html&gt;" +</span><br><span class="line">            "&lt;html&gt;" +</span><br><span class="line">            "&lt;head&gt;" +</span><br><span class="line">            "&lt;meta charset=\"utf<span class="number">-8</span>\" /&gt;" +</span><br><span class="line">            "&lt;title&gt;&lt;/title&gt;" +</span><br><span class="line">            "&lt;style&gt;" +</span><br><span class="line">            ".right&#123;" +</span><br><span class="line">            "text-align: right;" +</span><br><span class="line">            "&#125;" +</span><br><span class="line">            ".widd&#123;" +</span><br><span class="line">            "width: 230px;" +</span><br><span class="line">            "&#125;" +</span><br><span class="line">            ".centt&#123;" +</span><br><span class="line">            "text-align: center;" +</span><br><span class="line">            "&#125;" +</span><br><span class="line">            ".bolder&#123;" +</span><br><span class="line">//            "font-weight: bolder;" +</span><br><span class="line">            "&#125;" +</span><br><span class="line">            ".ant-btn-red &#123;" +</span><br><span class="line">            "    color: #FFF;" +</span><br><span class="line">            "    background-color: #FF5A44;" +</span><br><span class="line">            "    border-color: #FF5A44;" +</span><br><span class="line">            "    text-shadow: 0 -1px 0 rgba(0,0,0,0.12);" +</span><br><span class="line">            "    -webkit-box-shadow: 0 2px 0 rgba(0,0,0,0.045);" +</span><br><span class="line">            "    box-shadow: 0 2px 0 rgba(0,0,0,0.045);" +</span><br><span class="line">            "&#125;" +</span><br><span class="line">            "" +</span><br><span class="line">            ".ant-btn &#123;" +</span><br><span class="line">            "    line-height: 2.2;" +</span><br><span class="line">            "    position: relative;" +</span><br><span class="line">            "    display: inline-block;" +</span><br><span class="line">            "    font-weight: 400;" +</span><br><span class="line">            "    white-space: nowrap;" +</span><br><span class="line">            "    text-align: center;" +</span><br><span class="line">            "    background-image: none;" +</span><br><span class="line">            "    border: 1px solid transparent;" +</span><br><span class="line">            "    -webkit-box-shadow: 0 2px 0 rgba(0,0,0,0.015);" +</span><br><span class="line">            "    box-shadow: 0 2px 0 rgba(0,0,0,0.015);" +</span><br><span class="line">            "    cursor: pointer;" +</span><br><span class="line">            "    -webkit-transition: all .3s cubic-bezier(.645, .045, .355, 1);" +</span><br><span class="line">            "    transition: all .3s cubic-bezier(.645, .045, .355, 1);" +</span><br><span class="line">            "    -webkit-user-select: none;" +</span><br><span class="line">            "    -moz-user-select: none;" +</span><br><span class="line">            "    -ms-user-select: none;" +</span><br><span class="line">            "    user-select: none;" +</span><br><span class="line">            "    -ms-touch-action: manipulation;" +</span><br><span class="line">            "    touch-action: manipulation;" +</span><br><span class="line">            "    height: 32px;" +</span><br><span class="line">            "    padding: 0 15px;" +</span><br><span class="line">            "    font-size: 14px;" +</span><br><span class="line">            "    border-radius: 4px;" +</span><br><span class="line">            "    color: rgba(0,0,0,0.65);" +</span><br><span class="line">            "    background-color: #fff;" +</span><br><span class="line">            "    border-color: #d9d9d9;" +</span><br><span class="line">            "&#125;" +</span><br><span class="line">            "a:link &#123; text-decoration: none;&#125;" +</span><br><span class="line">            "　　 a:active &#123; text-decoration:none&#125;" +</span><br><span class="line">            "　　 a:hover &#123; text-decoration:none;&#125; " +</span><br><span class="line">            "　　 a:visited &#123; text-decoration: none;&#125;"+</span><br><span class="line">            "&lt;/style&gt;" +</span><br><span class="line">            "&lt;/head&gt;" +</span><br><span class="line">            "&lt;body&gt;" +</span><br><span class="line">            "&lt;table width=\"<span class="number">650</span>px\" height=\"<span class="number">100</span>%\" style=\"background-color: white;margin: auto; font-<span class="keyword">family</span>:<span class="string">'Microsoft YaHei'</span>; font-size: <span class="number">10</span>px;\"&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">25</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">4</span>\"&gt;&lt;/td&gt;&lt;td style=\"width: <span class="number">50</span>px;\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr &gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\" class=\"bolder\"&gt;FBABEE&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">2</span>\" class=\"right bolder\"&gt;INVOICE&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">2</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;Shenzhen Linkhub Supply-Chain Management Co.LTD&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"right bolder\"&gt;Invoince ID&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"right\"&gt;1904193751&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;Add:302,Building D,New Retail Tech Industrial Zoon&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"right bolder\"&gt;FBA ID&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"right\"&gt;XXXXXXX&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;GUshu,Xixiang Street,Bao'An,518000&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"right bolder\"&gt;Date Issued&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"right\"&gt;2019/05/02&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;Guangdong Province,China&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"right bolder\"&gt;Due Date&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"right\"&gt;2019/05/02&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">30</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">2</span>\" class=\"bolder\"&gt;Bill to&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\" class=\"bolder\"&gt;Ship to&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">2</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">2</span>\"&gt;公司名称&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;24300 Nandina Ave,Moreno Valley,CA,&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">2</span>\"&gt;公司地址&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;92551,United States&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">30</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td class=\"bolder\"&gt;Items Description&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">4</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">2</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;");</span><br><span class="line">    //此时将集合分了个类，分类之后的集合需要做的即遍历样式 稍等复制一下</span><br><span class="line"></span><br><span class="line">//    <span class="keyword">System</span>.<span class="keyword">out</span>.println("typeList.size:  "+typeList.size());</span><br><span class="line">//    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;typeList.size();i++)&#123;</span><br><span class="line">//        <span class="keyword">if</span>(i==<span class="number">0</span>)&#123; //第一个集合</span><br><span class="line">//            List&lt;TOutRepoOrderExpense&gt; tOutRepoOrderExpensesList=typeList.<span class="keyword">get</span>(i);</span><br><span class="line">//                <span class="keyword">for</span> (<span class="type">int</span> x=<span class="number">0</span>;x&lt;tOutRepoOrderExpensesList.size();x++)&#123;</span><br><span class="line">//                    TOutRepoOrderExpense tOutRepoOrderExpense=tOutRepoOrderExpensesList.<span class="keyword">get</span>(x);</span><br><span class="line">//                    JSONArray jsonArray=JSONArray.parseArray(tOutRepoOrderExpense.getRuleDetail());</span><br><span class="line">//                    JSONObject ruleDetail=jsonArray.getJSONObject(<span class="number">0</span>);</span><br><span class="line">//</span><br><span class="line">//                    String collectionName=tOutRepoOrderExpense.getCollectionName();</span><br><span class="line">//                    String collectionItemName=tOutRepoOrderExpense.getCollectionItemName();</span><br><span class="line">//                    String rate=""+ruleDetail.getBigDecimal("rate");</span><br><span class="line">//                    String unit=ruleDetail.getString("unit")==<span class="keyword">null</span>?"":"/"+ruleDetail.getString("unit");</span><br><span class="line">//                    String unit2=ruleDetail.getString("unit")==<span class="keyword">null</span>?" ":ruleDetail.getString("unit");</span><br><span class="line">//                    String quantity=""+ruleDetail.getBigDecimal("quantity");</span><br><span class="line">//                    String total=""+tOutRepoOrderExpense.getTotal();</span><br><span class="line">//                    <span class="keyword">if</span>(x==<span class="number">0</span>)&#123; //第一个集合当中的第一个对象 //此处需要进行循环表头，以及第一行数据</span><br><span class="line">//                        html=html.append("&lt;tr&gt;" +</span><br><span class="line">//                                "&lt;td class=\"bolder\"&gt;"+collectionName+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"right bolder\" colspan=\"<span class="number">2</span>\"&gt;Rate&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"centt bolder\"&gt;Quantity&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"right bolder\"&gt;Amount&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;/tr&gt;" +</span><br><span class="line">//                                "&lt;tr style=\"height: <span class="number">2</span>px;\"&gt;" +</span><br><span class="line">//                                "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;/tr&gt;" +</span><br><span class="line">//                                "&lt;tr&gt;" +</span><br><span class="line">//                                "&lt;td&gt;"+collectionItemName+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"right\" colspan=\"<span class="number">2</span>\"&gt;"+rate+unit+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"centt\"&gt;x "+quantity+unit2+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"right\"&gt;$ "+total+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;/tr&gt;");</span><br><span class="line">//</span><br><span class="line">//                    &#125;<span class="keyword">else</span>&#123;//第一个集合当中的其余对象</span><br><span class="line">//                        html= html.append("&lt;tr&gt;" +</span><br><span class="line">//                                "&lt;td&gt;"+collectionItemName+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"right\" colspan=\"<span class="number">2</span>\"&gt;"+rate+unit+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"centt\"&gt;x "+quantity+unit2+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;td class=\"right\"&gt;$ "+tOutRepoOrderExpense.getTotal()+"&lt;/td&gt;" +</span><br><span class="line">//                                "&lt;/tr&gt;");</span><br><span class="line">//                    &#125;</span><br><span class="line">//                &#125;</span><br><span class="line">//                //第一个集合循环后结尾 需要进行空格处理</span><br><span class="line">//            html= html.append("&lt;tr style=\"height: <span class="number">2</span>px;\"&gt;" +</span><br><span class="line">//                    "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">//                    "&lt;/tr&gt;");</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">//        &#125;</span><br><span class="line">//        <span class="keyword">else</span>&#123;//第二个第三个第四个集合</span><br><span class="line">//            List&lt;TOutRepoOrderExpense&gt; tOutRepoOrderExpensesList=typeList.<span class="keyword">get</span>(i);</span><br><span class="line">//            <span class="keyword">for</span> (<span class="type">int</span> x=<span class="number">0</span>;x&lt;tOutRepoOrderExpensesList.size();x++)&#123;</span><br><span class="line">//</span><br><span class="line">//                TOutRepoOrderExpense tOutRepoOrderExpense=tOutRepoOrderExpensesList.<span class="keyword">get</span>(x);</span><br><span class="line">//                JSONArray jsonArray=JSONArray.parseArray(tOutRepoOrderExpense.getRuleDetail());</span><br><span class="line">//                JSONObject ruleDetail=jsonArray.getJSONObject(<span class="number">0</span>);</span><br><span class="line">//                String collectionName=tOutRepoOrderExpense.getCollectionName();</span><br><span class="line">//                String collectionItemName=tOutRepoOrderExpense.getCollectionItemName();</span><br><span class="line">//                String rate=""+ruleDetail.getBigDecimal("rate");</span><br><span class="line">//                String unit=ruleDetail.getString("unit")==<span class="keyword">null</span>?"":"/"+ruleDetail.getString("unit");</span><br><span class="line">//                String unit2=ruleDetail.getString("unit")==<span class="keyword">null</span>?" ":ruleDetail.getString("unit");</span><br><span class="line">//                String quantity=""+ruleDetail.getBigDecimal("quantity");</span><br><span class="line">//                String total=""+tOutRepoOrderExpense.getTotal();</span><br><span class="line">//</span><br><span class="line">//                <span class="keyword">if</span>(x==<span class="number">0</span>)&#123; //第一个集合当中的第一个对象</span><br><span class="line">//                    //此处需要进行循环表头，以及第一行数据</span><br><span class="line">//                    html=html.append("&lt;tr&gt;" +</span><br><span class="line">//                            "&lt;td colspan=\"<span class="number">1</span>\" class=\"bolder\"&gt;"+collectionName+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;td colspan=\"<span class="number">4</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;/tr&gt;" +</span><br><span class="line">//                            "&lt;/tr&gt;" +</span><br><span class="line">//                            "&lt;tr style=\"height: <span class="number">2</span>px;\"&gt;" +</span><br><span class="line">//                            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;/tr&gt;" +</span><br><span class="line">//                            "&lt;tr&gt;" +</span><br><span class="line">//                            "&lt;td&gt;"+collectionItemName+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;td class=\"right\" colspan=\"<span class="number">2</span>\"&gt;"+rate+unit+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;td class=\"centt\"&gt;x "+quantity+unit2+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;td class=\"right\"&gt;$ "+total+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;/tr&gt;");</span><br><span class="line">//                &#125;</span><br><span class="line">//                <span class="keyword">else</span>&#123;//第一个集合当中的其余对象</span><br><span class="line">//                    html=html.append("&lt;tr&gt;" +</span><br><span class="line">//                            "&lt;td&gt;"+collectionItemName+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;td class=\"right\" colspan=\"<span class="number">2</span>\"&gt;"+rate +rate+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;td class=\"centt\"&gt;x "+quantity+unit2+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;td class=\"right\"&gt;$ "+tOutRepoOrderExpense.getTotal()+"&lt;/td&gt;" +</span><br><span class="line">//                            "&lt;/tr&gt;");</span><br><span class="line">//                &#125;</span><br><span class="line">//            &#125;</span><br><span class="line">//</span><br><span class="line">//            //第n个集合循环后结尾 需要进行空格处理</span><br><span class="line">//            html=  html.append("&lt;tr style=\"height: <span class="number">2</span>px;\"&gt;" +</span><br><span class="line">//                    "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">//                    "&lt;/tr&gt;");</span><br><span class="line">//        &#125;</span><br><span class="line">//    &#125;</span><br><span class="line">    String payoneer="fsn2915324940@163.com";//<span class="keyword">info</span>@fbabee.com</span><br><span class="line">    //当集合遍历结束，即加上total样式</span><br><span class="line">    html= html.append("&lt;tr&gt;" +</span><br><span class="line">            "&lt;td class=\"bolder\"&gt;Total&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">2</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">//            "&lt;td class=\"bolder\"&gt;$ 4761.52&lt;/td&gt;" +</span><br><span class="line">//            "&lt;td class=\"right bolder\"&gt;$ "+totalSum+"&lt;/td&gt;&lt;td&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">30</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td class=\"bolder\"&gt;Bank Infomation&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">4</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">2</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td style=\"width: <span class="number">100</span>px;\" class=\"bolder\"&gt;Paypal Account&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"widd\"&gt;Palpal@fbabee.com&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td class=\"bolder\"&gt;Payoneer Account&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"widd\"&gt;"+payoneer+"&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr&gt;" +</span><br><span class="line">            "&lt;td class=\"bolder\"&gt;T/T&lt;/td&gt;" +</span><br><span class="line">            "&lt;td class=\"widd\"&gt;银行账号信息，暂时明确不了&lt;/td&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">3</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">80</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;tr style=\"height: <span class="number">30</span>px;\"&gt;" +</span><br><span class="line">            "&lt;td colspan=\"<span class="number">5</span>\"&gt;" +</span><br><span class="line">            "&lt;div style=\"margin:<span class="number">0</span> auto;width:<span class="number">200</span>px;\"&gt; " +</span><br><span class="line">            "&lt;a href=\"https://www.baidu.com\" class=\"ant-btn-red ant-btn\"&gt;PayPal确认支付&lt;/a&gt; " +</span><br><span class="line">            "&lt;/div&gt; " +</span><br><span class="line">            "&lt;/td&gt;" +</span><br><span class="line">            "&lt;/tr&gt;" +</span><br><span class="line">            "&lt;/table&gt;" +</span><br><span class="line">            "&lt;/body&gt;" +</span><br><span class="line">            "&lt;/html&gt;");</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println("=======html:   "+html);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Email <span class="keyword">from</span> = <span class="built_in">new</span> Email("info@fbabee.com");//发件方@outlook.com</span><br><span class="line">    String subject = "领赫 - 账单提醒(*^▽^*)";//Sending <span class="keyword">with</span> Twilio SendGrid <span class="keyword">is</span> Fun</span><br><span class="line">    Email <span class="keyword">to</span> = <span class="built_in">new</span> Email("2915324940@qq.com");//收件方@gmail.com</span><br><span class="line">    //"&lt;div style='width:800px;height:600px;background-color:black'&gt; &lt;img  width='200px' height='300px'  src='http://m.qpic.cn/psc?/V11rBmNJ1xB9lV/hsnfJ.a5yg7.BhItQyNwPS2w5W77Ya6n7UEvCBQEhtvp5TN5vlqR7nIjceIjHX.H5V6eg9RYIZp65ofTS1zkiEpKFmlRFGi7*beRV26DJLI!/b&amp;bo=VQhABgAKgAcRCag!&amp;rf=viewer_4'&gt;&lt;/img&gt;&lt;/div&gt;"</span><br><span class="line">    Content content = <span class="built_in">new</span> Content("text/html",html.toString());</span><br><span class="line">    Mail mail = <span class="built_in">new</span> Mail(<span class="keyword">from</span>, subject, <span class="keyword">to</span>, content);</span><br><span class="line">    String apiKey = sendgridApiKey;//这个key来源参考<span class="number">4</span>如何获取apiKey</span><br><span class="line">    SendGrid sg = <span class="built_in">new</span> SendGrid(apiKey);</span><br><span class="line">    Request request = <span class="built_in">new</span> Request();</span><br><span class="line">    try &#123;</span><br><span class="line">        request.setMethod(<span class="keyword">Method</span>.POST);</span><br><span class="line">        request.setEndpoint("mail/send");</span><br><span class="line">        request.setBody(mail.build());</span><br><span class="line">        Response response = sg.api(request);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("=================&gt; response:"+JSONObject.toJSONString(response));</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("=================&gt; statusCode:"+response.getStatusCode());</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("=================&gt; body:"+response.getBody());</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("=================&gt; headers:"+response.getHeaders());</span><br><span class="line">    &#125; catch (IOException ex) &#123;</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为之前做出来的html样式一直不兼容，然后david就建议说换成pdf这种文档，直接发个附件过去，额，我试了一下，就是觉得吧，其实弄成pdf会更难看，我是这么觉得的。<br>因为搞出来的确是很难看。所以后面还是去弄了一下html格式。<br>后来发现就是，得每个element标签都给他设置一下style，这样就OK。<br>其实我觉得阿里云的那个账单样式挺好看的，但是账单的样式要求这么做，然后就只能按照客户的需求来。<br>后来的其他邮件内容样式自己发挥我就直接用了阿里云邮件的样式，嘿嘿。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * HTML转换成pdf</span><br><span class="line">     * @param html html文件路径</span><br><span class="line">     * @param DEST 生成pdf的路径</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static void tomPdf(String html, String DEST) throws Exception &#123;</span><br><span class="line">//        ConverterProperties props = new ConverterProperties();</span><br><span class="line">//        DefaultFontProvider defaultFontProvider = new DefaultFontProvider(false, false, false);</span><br><span class="line">////        defaultFontProvider.addFont("F:\otosanscjksc_downcc\otoSansCJKSC\otoSansCJKsc-Thin.otf");</span><br><span class="line">//        props.setFontProvider(defaultFontProvider);</span><br><span class="line">//        PdfWriter writer = new PdfWriter(DEST);</span><br><span class="line">//        PdfDocument pdf = new PdfDocument(writer);</span><br><span class="line">//        pdf.setDefaultPageSize(new PageSize(595.0F, 842.0F));</span><br><span class="line">//        Document document = HtmlConverter.convertToDocument(new FileInputStream(html), pdf, props);</span><br><span class="line">//        document.close();</span><br><span class="line">//        pdf.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testtt()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">//            tomPdf("F:\\phpStudy\\PhpStudy20180211\\PHPTutorial\\WWW\\领赫\est.html", "F:\\80afa41a3bfc474cbf1ac8b5bc1d.pdf");</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println("完======================");</span><br><span class="line">    &#125;</span><br><span class="line">/*</span><br><span class="line">=================&gt; response:</span><br><span class="line">&#123;"body":"",</span><br><span class="line">"headers":&#123;</span><br><span class="line">"Server":"nginx",</span><br><span class="line">"Access-Control-Allow-Origin":"https://sendgrid.api-docs.io",</span><br><span class="line">"Access-Control-Allow-Methods":"POST",</span><br><span class="line">"Connection":"keep-alive",</span><br><span class="line">"X-Message-Id":"4iVRN4HdSlCxByZsJd3qxA",</span><br><span class="line">"X-No-CORS-Reason":"https://sendgrid.com/docs/Classroom/Basics/API/cors.html",</span><br><span class="line">"Content-Length":"0",</span><br><span class="line">"Access-Control-Max-Age":"600",</span><br><span class="line">"Date":"Fri, 14 Feb 2020 07:43:16 GMT",</span><br><span class="line">"Access-Control-Allow-Headers":"Authorization,Content-Type, On-behalf-of, x-sg-elas-acl"</span><br><span class="line">&#125;,</span><br><span class="line">"statusCode":202&#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试JSONObject</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> tesetJSON()&#123;</span><br><span class="line"></span><br><span class="line">//    JSONArray jsonObject=JSONArray.parseArray("[&#123;\"price\":10,\"quantity\":10,\"rate\":1&#125;]");</span><br><span class="line">////    <span class="keyword">System</span>.<span class="keyword">out</span>.println(jsonObject);</span><br><span class="line"></span><br><span class="line">    JSONObject jsonObject=<span class="built_in">new</span> JSONObject();</span><br><span class="line">    jsonObject.put("name","张三");</span><br><span class="line">    StringBuffer stringBuffer=<span class="built_in">new</span> StringBuffer("");</span><br><span class="line">    stringBuffer.append("姓名："+jsonObject.getString("name")+"~~~");</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println("打印;"+stringBuffer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>领赫</category>
      </categories>
      <tags>
        <tag>领赫</tag>
        <tag>SendGrid</tag>
        <tag>邮件服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Bean生命周期</title>
    <url>/2020/04/14/Spring/Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-AOP</title>
    <url>/2020/04/12/Spring/AOP1/</url>
    <content><![CDATA[<h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="面向切面的一些基本知识"><a href="#面向切面的一些基本知识" class="headerlink" title="面向切面的一些基本知识"></a>面向切面的一些基本知识</h4><h4 id="SpringAOP概览"><a href="#SpringAOP概览" class="headerlink" title="SpringAOP概览"></a>SpringAOP概览</h4><ol>
<li>走进面向切面编程</li>
</ol>
<h5 id="编程范式概览"><a href="#编程范式概览" class="headerlink" title="编程范式概览"></a>编程范式概览</h5><p>首先面向切面编程它是一个编程范式，<br>除了面向切面编程，还有哪几种编程范式？</p>
<ul>
<li>面向过程编程，C语言、Basic…</li>
<li>面向对象编程，Java、c++…</li>
<li>面向函数编程/函数式编程</li>
<li>事件驱动编程，JUI开发中常见</li>
<li>面向切面编程</li>
</ul>
<h5 id="AOP是什么"><a href="#AOP是什么" class="headerlink" title="AOP是什么"></a>AOP是什么</h5><ul>
<li>是一种编程范式，不是编程语言；AOP跟语言不是一个层次当中的；</li>
<li>解决特定问题，不能解决所有问题；（跟面向对象编程不是竞争关系，而是互补关系）</li>
<li>是OOP的补充，不是替代；</li>
</ul>
<h5 id="AOP的初衷"><a href="#AOP的初衷" class="headerlink" title="AOP的初衷"></a>AOP的初衷</h5><p>面向切面编程为什么会被提出来？<br>AOP跟面向对象编程互补，互补在哪里？<br>这就要讲到面向切面编程的一个初衷，也就是说AOP想要解决的一个问题是什么。  </p>
<ol>
<li>DRY：Don’t Repeat Yourself（代码层问题）</li>
<li>SoC：Separation of  Concerns（关注点分离）</li>
</ol>
<p>关注点分离：  </p>
<ul>
<li>水平分离：展示层-&gt;服务层-&gt;持久层</li>
<li>垂直分离：模块划分（订单、库存等，业务模块）</li>
<li>切面分离：分离功能性需求与非功能性需求</li>
</ul>
<p>非功能性需求从功能性需求当中剥离出来集中管理，从而实现Don’t Repeat Yourself这个功能。  </p>
<h5 id="使用AOP的好处"><a href="#使用AOP的好处" class="headerlink" title="使用AOP的好处"></a>使用AOP的好处</h5><ul>
<li>集中处理某一关注点/横切逻辑</li>
<li>可以很方便地添加/删除关注点</li>
<li>侵入性少，增强代码可读性及可维护性</li>
</ul>
<h5 id="AOP的应用场景"><a href="#AOP的应用场景" class="headerlink" title="AOP的应用场景"></a>AOP的应用场景</h5><p>在功能上属于非功能性需求<br>非常适合在AOP的应用场景  </p>
<ul>
<li>权限控制</li>
<li>缓存控制</li>
<li>事务控制，相对于数据库的事务控制</li>
<li>审计日志</li>
<li>性能监控</li>
<li>分布式追踪</li>
<li>异常处理</li>
</ul>
<h5 id="支持AOP的编程语言"><a href="#支持AOP的编程语言" class="headerlink" title="支持AOP的编程语言"></a>支持AOP的编程语言</h5><p>中间既包括了面向对象也包括了脚本语言，面向过程语言…  </p>
<ul>
<li>Java</li>
<li>.NET</li>
<li>c/c++</li>
<li>Ruby</li>
<li>Python</li>
<li>PHP</li>
<li>…</li>
</ul>
<ol start="2">
<li>Spring中的AOP</li>
<li>小结</li>
</ol>
<h3 id="AOP使用"><a href="#AOP使用" class="headerlink" title="AOP使用"></a>AOP使用</h3><p>怎么在Spring中使用AOP</p>
<h3 id="AOP原理"><a href="#AOP原理" class="headerlink" title="AOP原理"></a>AOP原理</h3><p>讲述Spring  AOP的原理</p>
<h3 id="AOP开源运用"><a href="#AOP开源运用" class="headerlink" title="AOP开源运用"></a>AOP开源运用</h3><p>Spring AOP在一些开源项目当中的运用情况</p>
<h3 id="课程实战"><a href="#课程实战" class="headerlink" title="课程实战"></a>课程实战</h3><h3 id="课程总结"><a href="#课程总结" class="headerlink" title="课程总结"></a>课程总结</h3>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>前端页面双色球2</title>
    <url>/2020/04/09/%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%94%B9%E8%BF%9B2/</url>
    <content><![CDATA[<h2 id="需求内容"><a href="#需求内容" class="headerlink" title="需求内容"></a>需求内容</h2><p><a href="https://github.com/fengshana/Mamai" target="_blank" rel="noopener">https://github.com/fengshana/Mamai</a>  </p>
<p>周聪这个孽畜，自己搞不清白需求，这个需求变来变去，你以为是变色龙，这么好变。<br>不要脑子啊。  </p>
<p>其实想了想，好像的确不怎么要脑子,挺简单的（说白了，我也想当一回这么瞎改需求的人，整天啥事不做，哔哔哔改需求）。<br>最近看了大话数据结构，我觉得这个写的有点那个运用到数据结构的味道，不知道是不是我想的有点多的缘故？<br>我想了下，我还想看剑指offer。<br>就这样决定了，我再看看剑指offer。等结束掉大话数据结构后。<br>刷算法面试题，emm，我的脑子可能不太好使啊。<br>david推荐的刷算法的地方我看了下，竞赛啊，啥啥啥的，因为里面论坛有人推荐说是，就是面试题先推荐剑指offer。<br>「David：<a href="https://leetcode-cn.com" target="_blank" rel="noopener">https://leetcode-cn.com</a> 这个上面好的算法题，可以练练，难度比较大一点。」</p>
<hr>
<p>我到时候先过一遍剑指offer吧，经典的先刷一波。  </p>
<p>好了不多说了，我的树还晾着呢。<br>代码变动不大，核心代码变动了主要是。<br><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANXxuU4iMOynMQpgZWghe8iC*Hv9DIU54D9XwpBqPukpAap6RBv2zFOp*WfB.xOqeyEH4rbg9vByiV1MU7oLq7poY!/r" alt="image"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">这个是一段一段的</span><br><span class="line"></span><br><span class="line">第一个<span class="number">10</span>到第二个<span class="number">10</span> 没有</span><br><span class="line"></span><br><span class="line">那就是从第二个<span class="number">10</span>开始计算的</span><br><span class="line"></span><br><span class="line">是一段一段的</span><br><span class="line"></span><br><span class="line">不是说从第一个开始到结束的最后一个</span><br><span class="line"></span><br><span class="line">会分成很多段</span><br></pre></td></tr></table></figure>
<p>也就是说单排当中，即第一列当中如果第一个存在，第三个存在，第九个存在与查询的元素相同的元素的话，那么单排最大遗漏数是  </p>
<ol>
<li>第三个减去第一个得到一个，也就是第二个；</li>
<li>第九个减去第三个得到五个，也就是第四个、第五个、第六个、第七个、第八个；</li>
</ol>
<p>第二列、三列、…..、七列单排都这样。  </p>
<p>分段是指的是第一列当中的第一个到第三个是一段，第三个到第九个是一段；而第一个与第九个之间不会组成段。也就是相邻的相同元素之间组成的段。当前元素与下一相同元素之间组成的段。  </p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL4CDhqM/TCfiP1YaPeRT4Jil9RANX7uuHUVbVPuACfzTyR9eJsRiBmxtqPAUyvZo4RqJDM5tRKOUIoVDnT2XkRpSkRFQ5lXoVRpn0ahUJOp48IFGL.Y!/r" alt="image"></p>
<p>好，总排最大遗漏数就是，如果第一列当中的第一个存在，第二个存在，第六个存在；第二列当中第三个存在，第八个存在；第三列当中第三个存在，第八个存在；第四列当中第四个存在，第七个存在；那么总的遗漏数就是：</p>
<ol>
<li>总共有四列，八行。（x轴，y轴）</li>
<li>第一行当中，只有第一列当中的第一个存在（1，1），不进行比较；</li>
<li>第二行当中，只有第一列当中的第二个存在（1，2），进行与第一行当中的第一列当中的第一个（1，1）比较；得出这两个元素之间的遗漏数为0，中间没有隔元素，说白了，就是没有隔没有相同元素的行。</li>
<li>第三行当中，第二列（2，3）与第三列（3，3）当中存在，则与第二行的进行比较，行与行之间没有隔没有相同元素的行，所以遗漏数也是0。</li>
<li>第四行当中，第四列（4，4）存在相同元素，所以第三行在与第四行进行比较的时候，也是遗漏数为0。</li>
<li>重点来了，第五行当中不存在有相同元素。所以无法进行算端点与端点得出段的这个算这个遗漏数。</li>
<li>终于到了第六行，第六行当中，存在有（1，6）位置上的元素，所以此时，第六行与第四行的进行比较，不这样说吧，就是第四行的去与第六行的去进行比较，由于第五行不存在有相同元素，所以第五行是空着的，这样第六行与第四行之间就存在有遗漏数了。</li>
<li>说白了，也就是行与行之间的这个算了。存在有隔着的行就是有遗漏数了。跟单排一样的道理。我这个脑子没想明白。</li>
</ol>
<p>好了不说了，这个树晾了几天了。</p>
<blockquote>
<p>主要代码[ fillDataToTable ]：</p>
</blockquote>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 给detailData表格填充数据</span></span><br><span class="line"><span class="comment">     * @param sumArrays 所有数据</span></span><br><span class="line"><span class="comment">	 * @param arrays 前端页面展示的数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	 function fillDataToTable(<span class="built_in">arrays</span>,sumArrays)&#123;</span><br><span class="line">	 	//清空表格数据</span><br><span class="line">		<span class="built_in">var</span> detailData=document.getElementById(<span class="string">"detailData"</span>);</span><br><span class="line">		detailData.innerHTML=<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">		//表格插入表头数据</span><br><span class="line">		<span class="built_in">var</span> <span class="built_in">row</span>=detailData.insertRow(<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">row</span>.<span class="built_in">style</span>.fontWeight=<span class="string">"bolder"</span>;</span><br><span class="line">		<span class="built_in">var</span> cell0=<span class="built_in">row</span>.insertCell(<span class="number">0</span>);</span><br><span class="line">		cell0.innerHTML=<span class="string">"期数"</span>;</span><br><span class="line">		<span class="built_in">var</span> cell1=<span class="built_in">row</span>.insertCell(<span class="number">1</span>);</span><br><span class="line">		cell1.innerHTML=<span class="string">"开奖日期"</span>;</span><br><span class="line">		<span class="built_in">var</span> cell2=<span class="built_in">row</span>.insertCell(<span class="number">2</span>);</span><br><span class="line">		 cell2.innerHTML=<span class="string">"第一位数"</span>;</span><br><span class="line">		<span class="built_in">var</span> cell3=<span class="built_in">row</span>.insertCell(<span class="number">3</span>);</span><br><span class="line">		 cell3.innerHTML=<span class="string">"第二位数"</span>;</span><br><span class="line">		<span class="built_in">var</span> cell4=<span class="built_in">row</span>.insertCell(<span class="number">4</span>);</span><br><span class="line">		cell4.innerHTML=<span class="string">"第三位数"</span>;</span><br><span class="line">		<span class="built_in">var</span> cell5=<span class="built_in">row</span>.insertCell(<span class="number">5</span>);</span><br><span class="line">		cell5.innerHTML=<span class="string">"第四位数"</span>;</span><br><span class="line">		<span class="built_in">var</span> cell6=<span class="built_in">row</span>.insertCell(<span class="number">6</span>);</span><br><span class="line">		cell6.innerHTML=<span class="string">"第五位数"</span>;</span><br><span class="line">		<span class="built_in">var</span> cell7=<span class="built_in">row</span>.insertCell(<span class="number">7</span>);</span><br><span class="line">		cell7.innerHTML=<span class="string">"第六位数"</span>;</span><br><span class="line">		<span class="built_in">var</span> cell8=<span class="built_in">row</span>.insertCell(<span class="number">8</span>);</span><br><span class="line">		cell8.innerHTML=<span class="string">"第七位数"</span>;</span><br><span class="line">		<span class="built_in">var</span> cell9=<span class="built_in">row</span>.insertCell(<span class="number">9</span>);</span><br><span class="line">		 cell9.innerHTML=<span class="string">"操作"</span>;</span><br><span class="line"></span><br><span class="line">		//表格分页数据插入</span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arrays</span>.<span class="built_in">length</span>;i++)&#123;</span><br><span class="line">				<span class="built_in">var</span> json=<span class="built_in">arrays</span>[i];</span><br><span class="line">				<span class="built_in">var</span> row2=detailData.insertRow(i+<span class="number">1</span>);</span><br><span class="line">				<span class="built_in">var</span> cell0=row2.insertCell(<span class="number">0</span>);</span><br><span class="line">				cell0.innerHTML=json.number;</span><br><span class="line">				<span class="built_in">var</span> cell1=row2.insertCell(<span class="number">1</span>);</span><br><span class="line">				cell1.innerHTML=json.createTime;</span><br><span class="line">				<span class="built_in">var</span> cell2=row2.insertCell(<span class="number">2</span>);</span><br><span class="line">				cell2.innerHTML=json.oneColumn;</span><br><span class="line">				<span class="built_in">var</span> cell3=row2.insertCell(<span class="number">3</span>);</span><br><span class="line">				cell3.innerHTML=json.twoColumn;</span><br><span class="line">				<span class="built_in">var</span> cell4=row2.insertCell(<span class="number">4</span>);</span><br><span class="line">				cell4.innerHTML=json.threeColumn;</span><br><span class="line">				<span class="built_in">var</span> cell5=row2.insertCell(<span class="number">5</span>);</span><br><span class="line">				cell5.innerHTML=json.fourColumn;</span><br><span class="line">				<span class="built_in">var</span> cell6=row2.insertCell(<span class="number">6</span>);</span><br><span class="line">				cell6.innerHTML=json.fiveColumn;</span><br><span class="line">				<span class="built_in">var</span> cell7=row2.insertCell(<span class="number">7</span>);</span><br><span class="line">				cell7.innerHTML=json.sixColumn;</span><br><span class="line">				<span class="built_in">var</span> cell8=row2.insertCell(<span class="number">8</span>);</span><br><span class="line">				cell8.innerHTML=json.sevenColumn;</span><br><span class="line">				<span class="built_in">var</span> cell9=row2.insertCell(<span class="number">9</span>);</span><br><span class="line">				cell9.innerHTML=<span class="string">"&lt;button onclick=\"show(this,"</span>+json.id+<span class="string">")\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#myModal\" &gt;编辑&lt;/button&gt;"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		//单排遗漏数计算  总排遗漏数的计算应该简单，即每一排当中的最小值index，与每一排的最大值index取出来放入集合最后遍历出最小index与最大indeax进行相减即可</span><br><span class="line">		//将总数据中sumArrays每一列数组分组出来形成sumArray=[oneArray[oneColumn,...],twoArray[twoColumn,...],...,sevenArray[sevenColumn,...]]</span><br><span class="line">		 <span class="built_in">var</span> oneArray=[], twoArray=[], threeArray=[], fourArray=[],  fiveArray=[],  sixArray=[],  sevenArray=[], sumArray=[];</span><br><span class="line">		 <span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;sumArrays.<span class="built_in">length</span>;i++)&#123;</span><br><span class="line">			 <span class="built_in">var</span> json=sumArrays[i];</span><br><span class="line">			 oneArray.<span class="built_in">push</span>(json.oneColumn);</span><br><span class="line">			 twoArray.<span class="built_in">push</span>(json.twoColumn);</span><br><span class="line">			 threeArray.<span class="built_in">push</span>(json.threeColumn);</span><br><span class="line">			 fourArray.<span class="built_in">push</span>(json.fourColumn);</span><br><span class="line">			 fiveArray.<span class="built_in">push</span>(json.fiveColumn);</span><br><span class="line">			 sixArray.<span class="built_in">push</span>(json.sixColumn);</span><br><span class="line">			 sevenArray.<span class="built_in">push</span>(json.sevenColumn);</span><br><span class="line">		 &#125;</span><br><span class="line">		 //插入<span class="number">7</span>列数组数据</span><br><span class="line">		 sumArray.<span class="built_in">push</span>(oneArray);</span><br><span class="line">		 sumArray.<span class="built_in">push</span>(twoArray);</span><br><span class="line">		 sumArray.<span class="built_in">push</span>(threeArray);</span><br><span class="line">		 sumArray.<span class="built_in">push</span>(fourArray);</span><br><span class="line">		 sumArray.<span class="built_in">push</span>(fiveArray);</span><br><span class="line">		 sumArray.<span class="built_in">push</span>(sixArray);</span><br><span class="line">		 sumArray.<span class="built_in">push</span>(sevenArray);</span><br><span class="line"></span><br><span class="line">		 //底部表头插入</span><br><span class="line">		 <span class="built_in">var</span> tr0=detailData.insertRow(<span class="built_in">arrays</span>.<span class="built_in">length</span>+<span class="number">1</span>);</span><br><span class="line">		 <span class="built_in">var</span> td0=tr0.insertCell(<span class="number">0</span>);</span><br><span class="line">		 td0.colSpan=<span class="number">2</span>;</span><br><span class="line">		 td0.innerHTML=<span class="string">"遗漏信息"</span>;</span><br><span class="line">		 td0.<span class="built_in">style</span>.fontWeight=<span class="string">"bolder"</span>;</span><br><span class="line">		 <span class="built_in">var</span> td00=tr0.insertCell(<span class="number">1</span>);</span><br><span class="line">		 td00.colSpan=<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">		 <span class="built_in">var</span> <span class="built_in">tr</span>=detailData.insertRow(<span class="built_in">arrays</span>.<span class="built_in">length</span>+<span class="number">2</span>);</span><br><span class="line">		 <span class="built_in">var</span> td=<span class="built_in">tr</span>.insertCell(<span class="number">0</span>);</span><br><span class="line">		 td.<span class="built_in">style</span>.fontWeight=<span class="string">"bolder"</span>;</span><br><span class="line">		 td.innerHTML=<span class="string">"数字 | 单排最大遗漏数 | 总排最大遗漏数"</span>;</span><br><span class="line">		 td.colSpan=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">		 //根据所查询的number分隔逗号，计算并得到其遗漏信息(数字、单排最大遗漏数、总排最大遗漏数)</span><br><span class="line">		 <span class="built_in">var</span> numbers=document.getElementById(<span class="string">"number"</span>).value.trim();</span><br><span class="line">		 console.<span class="built_in">log</span>(<span class="string">"nums: "</span>+numbers.<span class="built_in">split</span>(<span class="string">","</span>));</span><br><span class="line"></span><br><span class="line">		//需要查询的number为空；则不进行显示其遗漏信息</span><br><span class="line">		 <span class="keyword">if</span>(numbers==null || numbers=='' || numbers==undefined)&#123;</span><br><span class="line">			 <span class="built_in">var</span> td11=<span class="built_in">tr</span>.insertCell(<span class="number">1</span>);</span><br><span class="line">			 td11.colSpan=<span class="number">8</span>;</span><br><span class="line">		 &#125;</span><br><span class="line">		 //需要查询的number不为空；则进行显示其遗漏信息</span><br><span class="line">		 <span class="keyword">else</span>&#123;</span><br><span class="line">			 <span class="built_in">var</span> nums=numbers.<span class="built_in">split</span>(<span class="string">","</span>); //则遗漏信息、数字、单排最大遗漏数进行显示 循环查询每个数值的单排 总排</span><br><span class="line"></span><br><span class="line">			 //需要查询的number遗漏信息数组的长度进行循环得到</span><br><span class="line">			 <span class="keyword">for</span>(<span class="built_in">var</span> h=<span class="number">0</span>;h&lt;nums.<span class="built_in">length</span>;h++)&#123;</span><br><span class="line">			 	 <span class="built_in">var</span> number=nums[h];//查询的数值</span><br><span class="line">				 <span class="built_in">var</span> singleMap=<span class="built_in">new</span> Map();//关于该数值的单排最大遗漏数</span><br><span class="line">				 <span class="built_in">var</span> sumList=[];</span><br><span class="line">				 // <span class="built_in">var</span> minIndexMap=<span class="built_in">new</span> Map();//每一列， 每一个单排当中的最小index</span><br><span class="line">				 // <span class="built_in">var</span> maxIndexMap=<span class="built_in">new</span> Map();//每一列， 每一个单排当中的最大index</span><br><span class="line"></span><br><span class="line">				 <span class="keyword">for</span>(<span class="built_in">var</span> t=<span class="number">0</span>;t&lt;sumArray.<span class="built_in">length</span>;t++)&#123; //当前<span class="number">7</span>个数组当中都存有对应的关于该需要进行查询遗漏信息的数值number,循环<span class="number">7</span>次,在七列当中进行查找以及得到它们所在的index</span><br><span class="line">					 <span class="built_in">var</span> arrays2=sumArray[t];//总共有<span class="number">7</span>列，当前第t，单个数组</span><br><span class="line">					 <span class="built_in">var</span> <span class="built_in">map</span>=<span class="built_in">new</span> Map();</span><br><span class="line"></span><br><span class="line">					 <span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;arrays2.<span class="built_in">length</span>;i++) &#123; //每一列数组元素的循环</span><br><span class="line">						 <span class="built_in">var</span> element = arrays2[i]; //当前七列中第t列数组当中具体的元素</span><br><span class="line">						 <span class="keyword">if</span> (number == element) &#123;</span><br><span class="line">						 	<span class="keyword">if</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(element)==null || <span class="built_in">map</span>.<span class="built_in">get</span>(element)==undefined)&#123;</span><br><span class="line">								<span class="built_in">map</span>.<span class="built_in">put</span>(element, &#123;prior: null, curr: null, size: null&#125;); //<span class="built_in">map</span>.<span class="built_in">put</span>(element,<span class="number">0</span>);//放入了该列当中所有不重复元素以及其实时变化的位移index+<span class="number">1</span></span><br><span class="line">							&#125;</span><br><span class="line">						 &#125;</span><br><span class="line"></span><br><span class="line">						 <span class="keyword">for</span>(<span class="built_in">var</span> n=<span class="number">0</span>;n&lt;arrays2.<span class="built_in">length</span>;n++)&#123;</span><br><span class="line">							 <span class="built_in">var</span> <span class="built_in">key</span>=arrays2[n]; //当前七列中第t列数组当中具体的元素</span><br><span class="line">							 <span class="keyword">if</span>(<span class="built_in">key</span>!=null &amp;&amp; <span class="built_in">key</span>==element &amp;&amp; number == <span class="built_in">key</span>)&#123; //如果存在有当前循环的数组当中的取值与<span class="built_in">map</span>当中的键相同的则重新赋值，重新赋值后进行<span class="built_in">break</span>;//<span class="built_in">var</span> y=i-n;</span><br><span class="line">								 sumList.<span class="built_in">push</span>(n);</span><br><span class="line"></span><br><span class="line">								 //存储每一个元素他的前一位相同元素的下标；y为当前元素的下标</span><br><span class="line">								 <span class="keyword">if</span>((<span class="built_in">map</span>.<span class="built_in">get</span>(element)!=null &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element)!=undefined)</span><br><span class="line">										 &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).prior==null &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).curr==null &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).size==null)&#123;</span><br><span class="line">									 <span class="built_in">map</span>.<span class="built_in">put</span>(element,&#123;prior: n, curr: n, size: <span class="number">0</span>&#125;); //第一次遇到元素相同的时候</span><br><span class="line">								 &#125;</span><br><span class="line">								 <span class="keyword">if</span>((<span class="built_in">map</span>.<span class="built_in">get</span>(element)!=null &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element)!=undefined)</span><br><span class="line">										 &amp;&amp; (<span class="built_in">map</span>.<span class="built_in">get</span>(element).prior!=null &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).curr!=null &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).size!=null)</span><br><span class="line">								 		 &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).prior==<span class="built_in">map</span>.<span class="built_in">get</span>(element).curr)&#123;</span><br><span class="line">									 <span class="built_in">map</span>.<span class="built_in">put</span>(element,&#123;prior: <span class="built_in">map</span>.<span class="built_in">get</span>(element).prior, curr: n, size: n-<span class="built_in">map</span>.<span class="built_in">get</span>(element).prior&#125;); //第二次遇到元素相同的时候</span><br><span class="line">								 &#125;</span><br><span class="line">								 <span class="keyword">if</span>((<span class="built_in">map</span>.<span class="built_in">get</span>(element)!=null &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element)!=undefined)</span><br><span class="line">										 &amp;&amp; (<span class="built_in">map</span>.<span class="built_in">get</span>(element).prior!=null &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).curr!=null  &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).size!=null)</span><br><span class="line">										 &amp;&amp; <span class="built_in">map</span>.<span class="built_in">get</span>(element).prior!=<span class="built_in">map</span>.<span class="built_in">get</span>(element).curr) &#123;</span><br><span class="line">								 	 // 此时 <span class="built_in">map</span> 中的 curr 即当前 <span class="built_in">key</span> 的相同元素的上一位置 prior 的 index ;取出 prior;</span><br><span class="line">									 // 得到当前 <span class="built_in">key</span> index 与当前 <span class="built_in">key</span> index 的 prior 的 size；</span><br><span class="line">									 // 如果当前 size较之此时<span class="built_in">map</span>当中element元素的size要大，则进行替换</span><br><span class="line">									 <span class="built_in">var</span> currPrior=<span class="built_in">map</span>.<span class="built_in">get</span>(element).curr; //当前的上一位</span><br><span class="line">									 <span class="built_in">var</span> currSize=n-currPrior; //当前的大小</span><br><span class="line">									 <span class="built_in">var</span> priorSize=<span class="built_in">map</span>.<span class="built_in">get</span>(element).size; //上一位的大小</span><br><span class="line">									 <span class="keyword">if</span>(currSize&gt;priorSize)&#123;</span><br><span class="line">										 <span class="built_in">map</span>.<span class="built_in">put</span>(element,&#123;prior:currPrior, curr:n, size:currSize&#125;);</span><br><span class="line">									 &#125;</span><br><span class="line">								 &#125;</span><br><span class="line">							 &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">								 continue;//跳出对于第i列数组中element元素对于当前n数组的当次循环，进入当前n数组迭代下一元素<span class="built_in">key</span>的循环</span><br><span class="line">							 &#125;</span><br><span class="line">						 &#125;</span><br><span class="line">					 &#125;</span><br><span class="line">					 console.<span class="built_in">log</span>(<span class="string">"第"</span>+t+<span class="string">"列当中，每一个元素的单排最大遗漏数："</span>+JSON.stringify(<span class="built_in">map</span>));</span><br><span class="line">					 <span class="keyword">if</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(number)!=null || <span class="built_in">map</span>.<span class="built_in">get</span>(number)!=undefined)&#123;</span><br><span class="line">						 //取值则为当前该<span class="built_in">map</span>.<span class="built_in">get</span>(number)即当前列当中的单排最大遗漏数</span><br><span class="line">						 singleMap.<span class="built_in">put</span>(t,<span class="built_in">map</span>.<span class="built_in">get</span>(number).size-<span class="number">1</span>);//singleMap.<span class="built_in">put</span>(t,<span class="built_in">map</span>.<span class="built_in">get</span>(number)-<span class="number">1</span>);//<span class="built_in">key</span> t：哪一列， value 当前该数值在当前排t的最大遗漏数  <span class="built_in">map</span>.<span class="built_in">get</span>(number)需要减去<span class="number">1</span></span><br><span class="line">					 &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">						 //当前列取出number如果为空则说明当前列当中不存在有该数值，则替换为<span class="number">0</span></span><br><span class="line">						 singleMap.<span class="built_in">put</span>(t,'当前列不存在'+number);</span><br><span class="line">					 &#125;</span><br><span class="line">				 &#125;</span><br><span class="line">				 //遍历完<span class="number">7</span>个数组后得到当前查询的该数值的所有index</span><br><span class="line">				 //得到当前查询的该数值的在<span class="number">7</span>列中的所有index，并进行index排序<span class="built_in">sort</span>,每一个index都与index.next进行比较得到size</span><br><span class="line">				 //定义maxSize变量，并进行赋值</span><br><span class="line">				 sumList.<span class="built_in">sort</span>(sortNumber);</span><br><span class="line">				 <span class="built_in">var</span> sumMaxNumber=null;</span><br><span class="line">				 <span class="keyword">if</span>(sumList.<span class="built_in">length</span>==<span class="number">0</span>)&#123;</span><br><span class="line">					 sumMaxNumber='不存在';</span><br><span class="line">				 &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					 <span class="keyword">for</span>(<span class="built_in">var</span> g=<span class="number">0</span>;g&lt;sumList.<span class="built_in">length</span>;g++)&#123;</span><br><span class="line">						 <span class="keyword">if</span>(sumMaxNumber==null)&#123;</span><br><span class="line">							 sumMaxNumber=sumList[g+<span class="number">1</span>]-sumList[g];</span><br><span class="line">						 &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">						 	<span class="built_in">var</span> nextSize=sumList[g+<span class="number">1</span>]-sumList[g];</span><br><span class="line">						 	<span class="keyword">if</span>(nextSize&gt;sumMaxNumber)&#123;</span><br><span class="line">								sumMaxNumber=nextSize;</span><br><span class="line">							&#125;</span><br><span class="line">						 &#125;</span><br><span class="line">					 &#125;</span><br><span class="line">				 &#125;</span><br><span class="line">				 <span class="built_in">var</span> mapArrays=singleMap.entrys();//循环之后获取得到singleMap,即单排数</span><br><span class="line">				 <span class="keyword">if</span> (h == <span class="number">0</span>) &#123; //即第一个数值的时候填入行<span class="built_in">tr</span>:<span class="built_in">arrays</span>.<span class="built_in">length</span>+<span class="number">2</span></span><br><span class="line">					 td.innerHTML=<span class="string">"数字: "</span>+number+<span class="string">" | 单排最大遗漏数 | 总排最大遗漏数: "</span>+sumMaxNumber;</span><br><span class="line">					 <span class="keyword">for</span>(<span class="built_in">var</span> r=<span class="number">0</span>;r&lt;mapArrays.<span class="built_in">length</span>;r++) &#123;</span><br><span class="line">						 <span class="built_in">var</span> td22 = <span class="built_in">tr</span>.insertCell(r+<span class="number">1</span>);//当前行处于第一行</span><br><span class="line">						 td22.innerHTML = singleMap.<span class="built_in">get</span>(r);</span><br><span class="line">					 &#125;</span><br><span class="line">					 <span class="built_in">tr</span>.insertCell(mapArrays.<span class="built_in">length</span>+<span class="number">1</span>);</span><br><span class="line">				 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					 //新增行并插入</span><br><span class="line">					 <span class="built_in">var</span> newTr=detailData.insertRow(<span class="built_in">arrays</span>.<span class="built_in">length</span>+<span class="number">2</span>+h);</span><br><span class="line">					 <span class="built_in">var</span> newTd=newTr.insertCell(<span class="number">0</span>);</span><br><span class="line">					 newTd.innerHTML=<span class="string">"数字: "</span>+number+<span class="string">" | 单排最大遗漏数 | 总排最大遗漏数: "</span>+sumMaxNumber;</span><br><span class="line">					 newTd.<span class="built_in">style</span>.fontWeight=<span class="string">"bolder"</span>;</span><br><span class="line">					 newTd.colSpan=<span class="number">2</span>;</span><br><span class="line">					 <span class="keyword">for</span>(<span class="built_in">var</span> r=<span class="number">0</span>;r&lt;mapArrays.<span class="built_in">length</span>;r++) &#123;</span><br><span class="line">						 <span class="built_in">var</span> td22 = newTr.insertCell(r+<span class="number">1</span>);//从第二行开始进行新增列</span><br><span class="line">						 td22.innerHTML = singleMap.<span class="built_in">get</span>(r);</span><br><span class="line">					 &#125;</span><br><span class="line">					 newTr.insertCell(mapArrays.<span class="built_in">length</span>+<span class="number">1</span>);</span><br><span class="line">				 &#125;</span><br><span class="line">				 console.<span class="built_in">log</span>(<span class="string">"================== 查询数值："</span>+number+<span class="string">" END =================="</span>);</span><br><span class="line">			 &#125;</span><br><span class="line">		 &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>下面小哥我就贴一下全部的代码哟：</p>
</blockquote>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"com.alibaba.fastjson.JSONObject"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"java.util.ArrayList"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"java.util.HashMap"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"java.util.List"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"java.util.Map"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"com.maima.entity.MaiMa"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"com.maima.entity.TUserInfo"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="ruby">		 pageEncoding=<span class="string">"UTF-8"</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page trimDirectiveWhitespaces=<span class="string">"true"</span></span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span></span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ taglib prefix=<span class="string">"itcast"</span> uri=<span class="string">"http://itcast.cn/common/"</span></span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span></span><br><span class="line"><span class="ruby">	TUserInfo tUserInfo=(TUserInfo) request.getSession().getAttribute(<span class="string">"tUserInfo"</span>);</span></span><br><span class="line"><span class="ruby">	<span class="keyword">if</span>(tUserInfo==null)&#123;</span></span><br><span class="line"><span class="ruby">		String path = request.getContextPath();</span></span><br><span class="line"><span class="ruby">		String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort()</span></span><br><span class="line"><span class="ruby">			+ path + <span class="string">"/"</span>;</span></span><br><span class="line"><span class="ruby">		response.sendRedirect(basePath+<span class="string">"maima/index"</span>);</span></span><br><span class="line"><span class="ruby">	&#125;</span></span><br><span class="line"><span class="xml">%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="meta-string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- Bootstrap Core CSS --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/metisMenu.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/dataTables.bootstrap.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/sb-admin-2.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/font-awesome.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span></span><br><span class="line"><span class="xml">		  type="text/css"&gt;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/boot-crm.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span></span><br><span class="line"><span class="xml">		  type="text/css"&gt;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/bootstrap-datetimepicker/4.17.47/css/bootstrap-datetimepicker.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">![endif]--</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">		.inputText&#123;</span></span><br><span class="line"><span class="xml">			width:200px;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">		.alert &#123;</span></span><br><span class="line"><span class="xml">			display: none;</span></span><br><span class="line"><span class="xml">			position: fixed;</span></span><br><span class="line"><span class="xml">			top: 50%;</span></span><br><span class="line"><span class="xml">			left: 50%;</span></span><br><span class="line"><span class="xml">			min-width: 300px;</span></span><br><span class="line"><span class="xml">			max-width: 600px;</span></span><br><span class="line"><span class="xml">			transform: translate(-50%,-50%);</span></span><br><span class="line"><span class="xml">			z-index: 99999;</span></span><br><span class="line"><span class="xml">			text-align: center;</span></span><br><span class="line"><span class="xml">			padding: 15px;</span></span><br><span class="line"><span class="xml">			border-radius: 3px;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		.alert-success &#123;</span></span><br><span class="line"><span class="xml">			color: #3c763d;</span></span><br><span class="line"><span class="xml">			background-color: #dff0d8;</span></span><br><span class="line"><span class="xml">			border-color: #d6e9c6;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">		.alert-info &#123;</span></span><br><span class="line"><span class="xml">			color: #31708f;</span></span><br><span class="line"><span class="xml">			background-color: #d9edf7;</span></span><br><span class="line"><span class="xml">			border-color: #bce8f1;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">		.alert-warning &#123;</span></span><br><span class="line"><span class="xml">			color: #8a6d3b;</span></span><br><span class="line"><span class="xml">			background-color: #fcf8e3;</span></span><br><span class="line"><span class="xml">			border-color: #faebcc;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">		.alert-danger &#123;</span></span><br><span class="line"><span class="xml">			color: #a94442;</span></span><br><span class="line"><span class="xml">			background-color: #f2dede;</span></span><br><span class="line"><span class="xml">			border-color: #ebccd1;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 模态框（Modal） --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"myModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>编号 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span>  <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>期数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span>  <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"numberId"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>开奖日期 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span>  <span class="attr">style</span>=<span class="string">"width: 200px;"</span>  <span class="attr">id</span>=<span class="string">'datetimepicker3'</span> &gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">'createTime'</span>/&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">               				 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第一位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"oneColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第二位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"twoColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第三位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"threeColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第四位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fourColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第五位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fiveColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第六位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sixColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第七位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sevenColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"edit()"</span>&gt;</span>提交更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 模态框（Modal） --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"myModal2"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal2"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel2"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>期数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"numberId2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>开奖日期 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span>  <span class="attr">style</span>=<span class="string">"width: 200px;"</span>  <span class="attr">id</span>=<span class="string">'datetimepicker4'</span> &gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">'createTime2'</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">               				 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第一位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"oneColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第二位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"twoColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第三位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"threeColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第四位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fourColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第五位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fiveColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第六位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sixColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第七位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sevenColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"add()"</span>&gt;</span>提交更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"page-wrapper"</span> <span class="attr">style</span>=<span class="string">"height: 100%"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>数字搜索 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"number"</span> <span class="attr">value</span>=<span class="string">"$&#123;number&#125;"</span> <span class="attr">name</span>=<span class="string">"number"</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"page"</span> <span class="attr">value</span>=<span class="string">"$&#123;page&#125;"</span> <span class="attr">name</span>=<span class="string">"page"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"pageSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;pageSize&#125;"</span> <span class="attr">name</span>=<span class="string">"pageSize"</span>  <span class="attr">style</span>=<span class="string">"display: none;"</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span>&gt;</span>开始日期 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span> <span class="attr">id</span>=<span class="string">'datetimepicker1'</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">							<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"createTime3"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">							<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">               				 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span>&gt;</span>结束日期 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span> <span class="attr">id</span>=<span class="string">'datetimepicker2'</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">							<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"createTime4"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">							<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">               				 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"go()"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">"margin-left:10px"</span> <span class="attr">onclick</span>=<span class="string">"reset()"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">"margin-left:10px"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-target</span>=<span class="string">"#myModal2"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered table-striped"</span> <span class="attr">id</span>=<span class="string">"detailData"</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span> <span class="attr">style</span>=<span class="string">"text-align: right"</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"up()"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"down()"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery-ui.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/metisMenu.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.dataTables.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/dataTables.bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/sb-admin-2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">'/static/js/stopExecutionOnTimeout.js?t=1'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/layui/layui.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/Particleground.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/Treatment.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.mockjax.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/moment.js/2.24.0/moment-with-locales.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/bootstrap-datetimepicker/4.17.47/js/bootstrap-datetimepicker.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	/**</span></span><br><span class="line"><span class="xml">	 * 初始化日期组件1、2、3、4</span></span><br><span class="line"><span class="xml">	 */</span></span><br><span class="line"><span class="xml">	$(function () &#123;</span></span><br><span class="line"><span class="xml">		for(var i=1;i<span class="tag">&lt;<span class="name">5;i++)&#123;</span></span></span></span><br><span class="line"><span class="xml">			$('#datetimepicker'+i).datetimepicker(&#123;</span></span><br><span class="line"><span class="xml">				format: 'YYYY-MM-DD',</span></span><br><span class="line"><span class="xml">				locale: moment.locale('zh-cn')</span></span><br><span class="line"><span class="xml">			&#125;);</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">	&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	/**</span></span><br><span class="line"><span class="xml">	 * 弹出式提示框，默认1.2秒自动消失</span></span><br><span class="line"><span class="xml">	 * @param message 提示信息</span></span><br><span class="line"><span class="xml">	 * @param style 提示样式，有alert-success、alert-danger、alert-warning、alert-info</span></span><br><span class="line"><span class="xml">	 * @param time 消失时间</span></span><br><span class="line"><span class="xml">	 */</span></span><br><span class="line"><span class="xml">	var prompt = function (message, style, time)</span></span><br><span class="line"><span class="xml">	&#123;</span></span><br><span class="line"><span class="xml">		style = (style === undefined) ? 'alert-success' : style;</span></span><br><span class="line"><span class="xml">		time = (time === undefined) ? 1200 : time;</span></span><br><span class="line"><span class="xml">		$('<span class="tag">&lt;<span class="name">div</span>&gt;</span>')</span></span><br><span class="line"><span class="xml">				.appendTo('body')</span></span><br><span class="line"><span class="xml">				.addClass('alert ' + style)</span></span><br><span class="line"><span class="xml">				.html(message)</span></span><br><span class="line"><span class="xml">				.show()</span></span><br><span class="line"><span class="xml">				.delay(time)</span></span><br><span class="line"><span class="xml">				.fadeOut();</span></span><br><span class="line"><span class="xml">	&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	/**</span></span><br><span class="line"><span class="xml">	 *  成功提示 - alert-success</span></span><br><span class="line"><span class="xml">	 *  失败提示 - alert-danger</span></span><br><span class="line"><span class="xml">	 *  提醒 - alert-warning</span></span><br><span class="line"><span class="xml">	 *  信息提示 - alert-info</span></span><br><span class="line"><span class="xml">	 */</span></span><br><span class="line"><span class="xml">	var success_prompt = function(message, time)</span></span><br><span class="line"><span class="xml">	&#123;</span></span><br><span class="line"><span class="xml">		prompt(message, 'alert-success', time);</span></span><br><span class="line"><span class="xml">	&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	/**</span></span><br><span class="line"><span class="xml">	 *  添加双色球</span></span><br><span class="line"><span class="xml">	 */</span></span><br><span class="line"><span class="xml">	function add()&#123;</span></span><br><span class="line"><span class="xml">		console.log("==============add===============");</span></span><br><span class="line"><span class="xml">		var numberId2=document.getElementById("numberId2").value;</span></span><br><span class="line"><span class="xml">		var createTime2=document.getElementById("createTime2").value;</span></span><br><span class="line"><span class="xml">		var oneColumn2=document.getElementById("oneColumn2").value;</span></span><br><span class="line"><span class="xml">		var twoColumn2=document.getElementById("twoColumn2").value;</span></span><br><span class="line"><span class="xml">		var threeColumn2=document.getElementById("threeColumn2").value;</span></span><br><span class="line"><span class="xml">		var fourColumn2=document.getElementById("fourColumn2").value;</span></span><br><span class="line"><span class="xml">		var fiveColumn2=document.getElementById("fiveColumn2").value;</span></span><br><span class="line"><span class="xml">		var sixColumn2=document.getElementById("sixColumn2").value;</span></span><br><span class="line"><span class="xml">		var sevenColumn2=document.getElementById("sevenColumn2").value;</span></span><br><span class="line"><span class="xml">		if((numberId2==null || numberId2=='' || numberId2==undefined) ||</span></span><br><span class="line"><span class="xml">				(createTime2==null || createTime2=='' || createTime2==undefined) ||</span></span><br><span class="line"><span class="xml">				(oneColumn2==null || oneColumn2=='' || oneColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(twoColumn2==null || twoColumn2=='' || twoColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(threeColumn2==null || threeColumn2=='' || threeColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(fourColumn2==null || fourColumn2=='' || fourColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(fiveColumn2==null || fiveColumn2=='' || fiveColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(sixColumn2==null || sixColumn2=='' || sixColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(sevenColumn2==null || sevenColumn2=='' || sevenColumn2==undefined)</span></span><br><span class="line"><span class="xml">		)&#123;</span></span><br><span class="line"><span class="xml">			console.log("数据不完整,请检查参数并重新填写");</span></span><br><span class="line"><span class="xml">		&#125;else&#123;</span></span><br><span class="line"><span class="xml">			//发送请求进行新增</span></span><br><span class="line"><span class="xml">			var requestDataBean = &#123;</span></span><br><span class="line"><span class="xml">				numberId:numberId2,</span></span><br><span class="line"><span class="xml">				createTime:createTime2,</span></span><br><span class="line"><span class="xml">				oneColumn:oneColumn2,</span></span><br><span class="line"><span class="xml">				twoColumn:twoColumn2,</span></span><br><span class="line"><span class="xml">				threeColumn:threeColumn2,</span></span><br><span class="line"><span class="xml">				fourColumn:fourColumn2,</span></span><br><span class="line"><span class="xml">				fiveColumn:fiveColumn2,</span></span><br><span class="line"><span class="xml">				sixColumn:sixColumn2,</span></span><br><span class="line"><span class="xml">				sevenColumn:sevenColumn2</span></span><br><span class="line"><span class="xml">			&#125;;</span></span><br><span class="line"><span class="xml">			console.log("add - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">			var url="/maima/addMaiMa";</span></span><br><span class="line"><span class="xml">			AjaxPost(url, requestDataBean,</span></span><br><span class="line"><span class="xml">					function () &#123;</span></span><br><span class="line"><span class="xml">						//ajax加载中</span></span><br><span class="line"><span class="xml">					&#125;,</span></span><br><span class="line"><span class="xml">					function (data) &#123;</span></span><br><span class="line"><span class="xml">						console.log("========数据获取成功======");</span></span><br><span class="line"><span class="xml">						if(data!=null &amp;&amp; data.Code!=null &amp;&amp; data.Code==200 &amp;&amp; data.Status!=null &amp;&amp; data.Status=="ok")&#123;</span></span><br><span class="line"><span class="xml">							success_prompt(data.Msg,2000);</span></span><br><span class="line"><span class="xml">							console.log("========FLUSH======");</span></span><br><span class="line"><span class="xml">							go();//flush</span></span><br><span class="line"><span class="xml">						&#125;else &#123;</span></span><br><span class="line"><span class="xml">							fail_prompt(data.Msg,2000);</span></span><br><span class="line"><span class="xml">							AjaxErro(data);</span></span><br><span class="line"><span class="xml">						&#125;</span></span><br><span class="line"><span class="xml">					&#125;)</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	/**</span></span><br><span class="line"><span class="xml">	 *  编辑双色球</span></span><br><span class="line"><span class="xml">	 */</span></span><br><span class="line"><span class="xml">	function edit()&#123;</span></span><br><span class="line"><span class="xml">		console.log("==============edit===============");</span></span><br><span class="line"><span class="xml">		var id=document.getElementById("id").value;</span></span><br><span class="line"><span class="xml">		var numberId2=document.getElementById("numberId").value;</span></span><br><span class="line"><span class="xml">		var createTime2=document.getElementById("createTime").value;</span></span><br><span class="line"><span class="xml">		var oneColumn2=document.getElementById("oneColumn").value;</span></span><br><span class="line"><span class="xml">		var twoColumn2=document.getElementById("twoColumn").value;</span></span><br><span class="line"><span class="xml">		var threeColumn2=document.getElementById("threeColumn").value;</span></span><br><span class="line"><span class="xml">		var fourColumn2=document.getElementById("fourColumn").value;</span></span><br><span class="line"><span class="xml">		var fiveColumn2=document.getElementById("fiveColumn").value;</span></span><br><span class="line"><span class="xml">		var sixColumn2=document.getElementById("sixColumn").value;</span></span><br><span class="line"><span class="xml">		var sevenColumn2=document.getElementById("sevenColumn").value;</span></span><br><span class="line"><span class="xml">		if((id==null || id=='' || id==undefined)||</span></span><br><span class="line"><span class="xml">				(numberId2==null || numberId2=='' || numberId2==undefined) ||</span></span><br><span class="line"><span class="xml">				(createTime2==null || createTime2=='' || createTime2==undefined) ||</span></span><br><span class="line"><span class="xml">				(oneColumn2==null || oneColumn2=='' || oneColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(twoColumn2==null || twoColumn2=='' || twoColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(threeColumn2==null || threeColumn2=='' || threeColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(fourColumn2==null || fourColumn2=='' || fourColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(fiveColumn2==null || fiveColumn2=='' || fiveColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(sixColumn2==null || sixColumn2=='' || sixColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(sevenColumn2==null || sevenColumn2=='' || sevenColumn2==undefined)</span></span><br><span class="line"><span class="xml">		)&#123;</span></span><br><span class="line"><span class="xml">			console.log("数据不完整,请检查参数并重新填写");</span></span><br><span class="line"><span class="xml">		&#125;else&#123;</span></span><br><span class="line"><span class="xml">			//发送请求进行新增</span></span><br><span class="line"><span class="xml">			var requestDataBean = &#123;</span></span><br><span class="line"><span class="xml">				id:id,</span></span><br><span class="line"><span class="xml">				numberId:numberId2,</span></span><br><span class="line"><span class="xml">				createTime:createTime2,</span></span><br><span class="line"><span class="xml">				oneColumn:oneColumn2,</span></span><br><span class="line"><span class="xml">				twoColumn:twoColumn2,</span></span><br><span class="line"><span class="xml">				threeColumn:threeColumn2,</span></span><br><span class="line"><span class="xml">				fourColumn:fourColumn2,</span></span><br><span class="line"><span class="xml">				fiveColumn:fiveColumn2,</span></span><br><span class="line"><span class="xml">				sixColumn:sixColumn2,</span></span><br><span class="line"><span class="xml">				sevenColumn:sevenColumn2</span></span><br><span class="line"><span class="xml">			&#125;;</span></span><br><span class="line"><span class="xml">			console.log("edit - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">			var url="/maima/editMaiMa";</span></span><br><span class="line"><span class="xml">			AjaxPost(url, requestDataBean,</span></span><br><span class="line"><span class="xml">					function () &#123;</span></span><br><span class="line"><span class="xml">						//ajax加载中</span></span><br><span class="line"><span class="xml">					&#125;,</span></span><br><span class="line"><span class="xml">					function (data) &#123;</span></span><br><span class="line"><span class="xml">						console.log("========数据获取成功======");</span></span><br><span class="line"><span class="xml">						if(data!=null &amp;&amp; data.Code!=null &amp;&amp; data.Code==200 &amp;&amp; data.Status!=null &amp;&amp; data.Status=="ok")&#123;</span></span><br><span class="line"><span class="xml">							success_prompt(data.Msg,2000);</span></span><br><span class="line"><span class="xml">							console.log("========FLUSH======");</span></span><br><span class="line"><span class="xml">							go();//flush</span></span><br><span class="line"><span class="xml">						&#125;else &#123;</span></span><br><span class="line"><span class="xml">							fail_prompt(data.Msg,2000);</span></span><br><span class="line"><span class="xml">							AjaxErro(data);</span></span><br><span class="line"><span class="xml">						&#125;</span></span><br><span class="line"><span class="xml">					&#125;)</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	/**</span></span><br><span class="line"><span class="xml">	 * 重置</span></span><br><span class="line"><span class="xml">	 */</span></span><br><span class="line"><span class="xml">	function reset()&#123;</span></span><br><span class="line"><span class="xml">		document.getElementById("number").value="";</span></span><br><span class="line"><span class="xml">		document.getElementById("createTime3").value="";</span></span><br><span class="line"><span class="xml">		document.getElementById("createTime4").value="";</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	/**</span></span><br><span class="line"><span class="xml">	 * 用于编辑显示页面填入数据</span></span><br><span class="line"><span class="xml">	 * @param obj 被点击编辑的按钮</span></span><br><span class="line"><span class="xml">	 * @param id 该按钮所代表的的双色球记录id</span></span><br><span class="line"><span class="xml">	 */</span></span><br><span class="line"><span class="xml">	function show(obj,id)&#123;</span></span><br><span class="line"><span class="xml">		var value0 = $(obj).parents("td").parents("tr").children("td").eq(0).text();</span></span><br><span class="line"><span class="xml">		var value1 = $(obj).parents("td").parents("tr").children("td").eq(1).text();</span></span><br><span class="line"><span class="xml">		var value2 = $(obj).parents("td").parents("tr").children("td").eq(2).text();</span></span><br><span class="line"><span class="xml">		var value3 = $(obj).parents("td").parents("tr").children("td").eq(3).text();</span></span><br><span class="line"><span class="xml">		var value4 = $(obj).parents("td").parents("tr").children("td").eq(4).text();</span></span><br><span class="line"><span class="xml">		var value5 = $(obj).parents("td").parents("tr").children("td").eq(5).text();</span></span><br><span class="line"><span class="xml">		var value6 = $(obj).parents("td").parents("tr").children("td").eq(6).text();</span></span><br><span class="line"><span class="xml">		var value7 = $(obj).parents("td").parents("tr").children("td").eq(7).text();</span></span><br><span class="line"><span class="xml">		var value8 = $(obj).parents("td").parents("tr").children("td").eq(8).text();</span></span><br><span class="line"><span class="xml">		console.log("show - [numberId: "+value0+" ，createTime: "+value1+" ，oneColumn: "+value2+" ，twoColumn: "+value3+" ，threeColumn: "+value4+" ，fourColumn: "+value5+" ，fiveColumn: "+value6+" ，sixColumn: "+value7+" ，sevenColumn: "+value8+" ]");</span></span><br><span class="line"><span class="xml">		document.getElementById("id").value=id;</span></span><br><span class="line"><span class="xml">		document.getElementById("numberId").value=value0;</span></span><br><span class="line"><span class="xml">		document.getElementById("createTime").value=value1;</span></span><br><span class="line"><span class="xml">		document.getElementById("oneColumn").value=value2;</span></span><br><span class="line"><span class="xml">		document.getElementById("twoColumn").value=value3;</span></span><br><span class="line"><span class="xml">		document.getElementById("threeColumn").value=value4;</span></span><br><span class="line"><span class="xml">		document.getElementById("fourColumn").value=value5;</span></span><br><span class="line"><span class="xml">		document.getElementById("fiveColumn").value=value6;</span></span><br><span class="line"><span class="xml">		document.getElementById("sixColumn").value=value7;</span></span><br><span class="line"><span class="xml">		document.getElementById("sevenColumn").value=value8;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	function Map() &#123;</span></span><br><span class="line"><span class="xml">		/** 存放键的数组(遍历用到) */</span></span><br><span class="line"><span class="xml">		this.keys = new Array();</span></span><br><span class="line"><span class="xml">		/** 存放数据 */</span></span><br><span class="line"><span class="xml">		this.data = new Object();</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		 * 放入一个键值对</span></span><br><span class="line"><span class="xml">		 * @param &#123;String&#125; key</span></span><br><span class="line"><span class="xml">		 * @param &#123;Object&#125; value</span></span><br><span class="line"><span class="xml">		 */</span></span><br><span class="line"><span class="xml">		this.put = function(key, value) &#123;</span></span><br><span class="line"><span class="xml">			if(this.data[key] == null)&#123;</span></span><br><span class="line"><span class="xml">				this.keys.push(key);</span></span><br><span class="line"><span class="xml">			&#125;</span></span><br><span class="line"><span class="xml">			this.data[key] = value;</span></span><br><span class="line"><span class="xml">		&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		 * 获取某键对应的值</span></span><br><span class="line"><span class="xml">		 * @param &#123;String&#125; key</span></span><br><span class="line"><span class="xml">		 * @return &#123;Object&#125; value</span></span><br><span class="line"><span class="xml">		 */</span></span><br><span class="line"><span class="xml">		this.get = function(key) &#123;</span></span><br><span class="line"><span class="xml">			return this.data[key];</span></span><br><span class="line"><span class="xml">		&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		 * 删除一个键值对</span></span><br><span class="line"><span class="xml">		 * @param &#123;String&#125; key</span></span><br><span class="line"><span class="xml">		 */</span></span><br><span class="line"><span class="xml">		this.remove = function(key) &#123;</span></span><br><span class="line"><span class="xml">			this.keys.remove(key);</span></span><br><span class="line"><span class="xml">			this.data[key] = null;</span></span><br><span class="line"><span class="xml">		&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		 * 遍历Map,执行处理函数</span></span><br><span class="line"><span class="xml">		 *</span></span><br><span class="line"><span class="xml">		 * @param &#123;Function&#125; 回调函数 function(key,value,index)&#123;..&#125;</span></span><br><span class="line"><span class="xml">		 */</span></span><br><span class="line"><span class="xml">		this.each = function(fn)&#123;</span></span><br><span class="line"><span class="xml">			if(typeof fn != 'function')&#123;</span></span><br><span class="line"><span class="xml">				return;</span></span><br><span class="line"><span class="xml">			&#125;</span></span><br><span class="line"><span class="xml">			var len = this.keys.length;</span></span><br><span class="line"><span class="xml">			for(var i=0;i<span class="tag">&lt;<span class="name">len;i++)&#123;</span></span></span></span><br><span class="line"><span class="xml">				var k = this.keys[i];</span></span><br><span class="line"><span class="xml">				fn(k,this.data[k],i);</span></span><br><span class="line"><span class="xml">			&#125;</span></span><br><span class="line"><span class="xml">		&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		 * 获取键值数组(类似<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://lib.csdn.net/base/java"</span> <span class="attr">class</span>=<span class="string">'replace_word'</span> <span class="attr">title</span>=<span class="string">"Java 知识库"</span> <span class="attr">target</span>=<span class="string">'_blank'</span> <span class="attr">style</span>=<span class="string">'color:#df3434; font-weight:bold;'</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span>的entrySet())</span></span><br><span class="line"><span class="xml">		 * @return 键值对象&#123;key,value&#125;的数组</span></span><br><span class="line"><span class="xml">		 */</span></span><br><span class="line"><span class="xml">		this.entrys = function() &#123;</span></span><br><span class="line"><span class="xml">			var len = this.keys.length;</span></span><br><span class="line"><span class="xml">			var entrys = new Array(len);</span></span><br><span class="line"><span class="xml">			for (var i = 0; i <span class="tag">&lt; <span class="attr">len</span>; <span class="attr">i</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">				entrys[i] = &#123;</span></span><br><span class="line"><span class="xml">					key : this.keys[i],</span></span><br><span class="line"><span class="xml">					value : this.data[i]</span></span><br><span class="line"><span class="xml">				&#125;;</span></span><br><span class="line"><span class="xml">			&#125;</span></span><br><span class="line"><span class="xml">			return entrys;</span></span><br><span class="line"><span class="xml">		&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		 * 判断Map是否为空</span></span><br><span class="line"><span class="xml">		 */</span></span><br><span class="line"><span class="xml">		this.isEmpty = function() &#123;</span></span><br><span class="line"><span class="xml">			return this.keys.length == 0;</span></span><br><span class="line"><span class="xml">		&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		 * 获取键值对数量</span></span><br><span class="line"><span class="xml">		 */</span></span><br><span class="line"><span class="xml">		this.size = function()&#123;</span></span><br><span class="line"><span class="xml">			return this.keys.length;</span></span><br><span class="line"><span class="xml">		&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		 * 重写toString</span></span><br><span class="line"><span class="xml">		 */</span></span><br><span class="line"><span class="xml">		this.toString = function()&#123;</span></span><br><span class="line"><span class="xml">			var s = "&#123;";</span></span><br><span class="line"><span class="xml">			for(var i=0;i<span class="tag">&lt;<span class="name">this.keys.length;i++,s+=',')&#123;</span></span></span></span><br><span class="line"><span class="xml">				var k = this.keys[i];</span></span><br><span class="line"><span class="xml">				s += k+"="+this.data[k];</span></span><br><span class="line"><span class="xml">			&#125;</span></span><br><span class="line"><span class="xml">			s=s.substr(0,s.length-1);</span></span><br><span class="line"><span class="xml">			s+="&#125;";</span></span><br><span class="line"><span class="xml">			return s;</span></span><br><span class="line"><span class="xml">		&#125;;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	/**</span></span><br><span class="line"><span class="xml">	 * 上一页</span></span><br><span class="line"><span class="xml">	 */</span></span><br><span class="line"><span class="xml">	function up()&#123;</span></span><br><span class="line"><span class="xml">		var upPage=document.getElementById("page").value;</span></span><br><span class="line"><span class="xml">		var pageSize=document.getElementById("pageSize").value;</span></span><br><span class="line"><span class="xml">		var number=document.getElementById("number").value;</span></span><br><span class="line"><span class="xml">		if(upPage=='' || upPage==undefined || upPage==null || upPage<span class="tag">&lt;<span class="name">1)&#123;</span></span></span></span><br><span class="line"><span class="xml">			upPage=0;</span></span><br><span class="line"><span class="xml">		&#125;else&#123;</span></span><br><span class="line"><span class="xml">			upPage=upPage*1-1;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">		if(upPage<span class="tag">&lt;<span class="name">0)&#123;</span></span></span></span><br><span class="line"><span class="xml">			upPage=0;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">		var requestDataBean = &#123;page:upPage,pageSize:pageSize*1,number:number&#125;;</span></span><br><span class="line"><span class="xml">		console.log("上一页 - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">		getData(requestDataBean);</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	/**</span></span><br><span class="line"><span class="xml">	 * 下一页</span></span><br><span class="line"><span class="xml">	 */</span></span><br><span class="line"><span class="xml">	function down()&#123;</span></span><br><span class="line"><span class="xml">		var downPage=document.getElementById("page").value;</span></span><br><span class="line"><span class="xml">		var pageSize=document.getElementById("pageSize").value;</span></span><br><span class="line"><span class="xml">		var number=document.getElementById("number").value;</span></span><br><span class="line"><span class="xml">		if(downPage=='' || downPage==undefined || downPage==null)&#123;</span></span><br><span class="line"><span class="xml">			downPage=0;</span></span><br><span class="line"><span class="xml">		&#125;else&#123;</span></span><br><span class="line"><span class="xml">			downPage=downPage*1+1;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">		var requestDataBean = &#123;page:downPage,pageSize:pageSize*1,number:number&#125;;</span></span><br><span class="line"><span class="xml">		console.log("下一页 - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">		getData(requestDataBean);</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	/**</span></span><br><span class="line"><span class="xml">	 * 查询</span></span><br><span class="line"><span class="xml">	 */</span></span><br><span class="line"><span class="xml">	function go()&#123;</span></span><br><span class="line"><span class="xml">		var page=document.getElementById("page").value;</span></span><br><span class="line"><span class="xml">		var pageSize=document.getElementById("pageSize").value;</span></span><br><span class="line"><span class="xml">		var number=document.getElementById("number").value;</span></span><br><span class="line"><span class="xml">		var createTime1=document.getElementById("createTime3").value;</span></span><br><span class="line"><span class="xml">		var createTime2=document.getElementById("createTime4").value;</span></span><br><span class="line"><span class="xml">		var requestDataBean = &#123;page:page*1,pageSize:pageSize*1,number:number,createTime1:createTime1,createTime2:createTime2&#125;;</span></span><br><span class="line"><span class="xml">		console.log("数据查询 - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">		getData(requestDataBean);</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	/**</span></span><br><span class="line"><span class="xml">	 * 数字排序</span></span><br><span class="line"><span class="xml">	 */</span></span><br><span class="line"><span class="xml">	function sortNumber(a,b)</span></span><br><span class="line"><span class="xml">	&#123;</span></span><br><span class="line"><span class="xml">		return a - b</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	/**</span></span><br><span class="line"><span class="xml">	 * 给detailData表格填充数据</span></span><br><span class="line"><span class="xml">     * @param sumArrays 所有数据</span></span><br><span class="line"><span class="xml">	 * @param arrays 前端页面展示的数据</span></span><br><span class="line"><span class="xml">	 */</span></span><br><span class="line"><span class="xml">	 function fillDataToTable(arrays,sumArrays)&#123;</span></span><br><span class="line"><span class="xml">	 	//清空表格数据</span></span><br><span class="line"><span class="xml">		var detailData=document.getElementById("detailData");</span></span><br><span class="line"><span class="xml">		detailData.innerHTML="";</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		//表格插入表头数据</span></span><br><span class="line"><span class="xml">		var row=detailData.insertRow(0);</span></span><br><span class="line"><span class="xml">		row.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml">		var cell0=row.insertCell(0);</span></span><br><span class="line"><span class="xml">		cell0.innerHTML="期数";</span></span><br><span class="line"><span class="xml">		var cell1=row.insertCell(1);</span></span><br><span class="line"><span class="xml">		cell1.innerHTML="开奖日期";</span></span><br><span class="line"><span class="xml">		var cell2=row.insertCell(2);</span></span><br><span class="line"><span class="xml">		 cell2.innerHTML="第一位数";</span></span><br><span class="line"><span class="xml">		var cell3=row.insertCell(3);</span></span><br><span class="line"><span class="xml">		 cell3.innerHTML="第二位数";</span></span><br><span class="line"><span class="xml">		var cell4=row.insertCell(4);</span></span><br><span class="line"><span class="xml">		cell4.innerHTML="第三位数";</span></span><br><span class="line"><span class="xml">		var cell5=row.insertCell(5);</span></span><br><span class="line"><span class="xml">		cell5.innerHTML="第四位数";</span></span><br><span class="line"><span class="xml">		var cell6=row.insertCell(6);</span></span><br><span class="line"><span class="xml">		cell6.innerHTML="第五位数";</span></span><br><span class="line"><span class="xml">		var cell7=row.insertCell(7);</span></span><br><span class="line"><span class="xml">		cell7.innerHTML="第六位数";</span></span><br><span class="line"><span class="xml">		var cell8=row.insertCell(8);</span></span><br><span class="line"><span class="xml">		cell8.innerHTML="第七位数";</span></span><br><span class="line"><span class="xml">		var cell9=row.insertCell(9);</span></span><br><span class="line"><span class="xml">		 cell9.innerHTML="操作";</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		//表格分页数据插入</span></span><br><span class="line"><span class="xml">		for(var i=0;i<span class="tag">&lt;<span class="name">arrays.length;i++)&#123;</span></span></span></span><br><span class="line"><span class="xml">				var json=arrays[i];</span></span><br><span class="line"><span class="xml">				var row2=detailData.insertRow(i+1);</span></span><br><span class="line"><span class="xml">				var cell0=row2.insertCell(0);</span></span><br><span class="line"><span class="xml">				cell0.innerHTML=json.number;</span></span><br><span class="line"><span class="xml">				var cell1=row2.insertCell(1);</span></span><br><span class="line"><span class="xml">				cell1.innerHTML=json.createTime;</span></span><br><span class="line"><span class="xml">				var cell2=row2.insertCell(2);</span></span><br><span class="line"><span class="xml">				cell2.innerHTML=json.oneColumn;</span></span><br><span class="line"><span class="xml">				var cell3=row2.insertCell(3);</span></span><br><span class="line"><span class="xml">				cell3.innerHTML=json.twoColumn;</span></span><br><span class="line"><span class="xml">				var cell4=row2.insertCell(4);</span></span><br><span class="line"><span class="xml">				cell4.innerHTML=json.threeColumn;</span></span><br><span class="line"><span class="xml">				var cell5=row2.insertCell(5);</span></span><br><span class="line"><span class="xml">				cell5.innerHTML=json.fourColumn;</span></span><br><span class="line"><span class="xml">				var cell6=row2.insertCell(6);</span></span><br><span class="line"><span class="xml">				cell6.innerHTML=json.fiveColumn;</span></span><br><span class="line"><span class="xml">				var cell7=row2.insertCell(7);</span></span><br><span class="line"><span class="xml">				cell7.innerHTML=json.sixColumn;</span></span><br><span class="line"><span class="xml">				var cell8=row2.insertCell(8);</span></span><br><span class="line"><span class="xml">				cell8.innerHTML=json.sevenColumn;</span></span><br><span class="line"><span class="xml">				var cell9=row2.insertCell(9);</span></span><br><span class="line"><span class="xml">				cell9.innerHTML="<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">\</span>"<span class="attr">show</span>(<span class="attr">this</span>,"+<span class="attr">json.id</span>+")\" <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">btn</span> <span class="attr">btn-primary</span>\" <span class="attr">data-toggle</span>=<span class="string">\</span>"<span class="attr">modal</span>\" <span class="attr">data-target</span>=<span class="string">\</span>"#<span class="attr">myModal</span>\" &gt;</span>编辑<span class="tag">&lt;/<span class="name">button</span>&gt;</span>";</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		//单排遗漏数计算  总排遗漏数的计算应该简单，即每一排当中的最小值index，与每一排的最大值index取出来放入集合最后遍历出最小index与最大indeax进行相减即可</span></span><br><span class="line"><span class="xml">		//将总数据中sumArrays每一列数组分组出来形成sumArray=[oneArray[oneColumn,...],twoArray[twoColumn,...],...,sevenArray[sevenColumn,...]]</span></span><br><span class="line"><span class="xml">		 var oneArray=[], twoArray=[], threeArray=[], fourArray=[],  fiveArray=[],  sixArray=[],  sevenArray=[], sumArray=[];</span></span><br><span class="line"><span class="xml">		 for(var i=0;i<span class="tag">&lt;<span class="name">sumArrays.length;i++)&#123;</span></span></span></span><br><span class="line"><span class="xml">			 var json=sumArrays[i];</span></span><br><span class="line"><span class="xml">			 oneArray.push(json.oneColumn);</span></span><br><span class="line"><span class="xml">			 twoArray.push(json.twoColumn);</span></span><br><span class="line"><span class="xml">			 threeArray.push(json.threeColumn);</span></span><br><span class="line"><span class="xml">			 fourArray.push(json.fourColumn);</span></span><br><span class="line"><span class="xml">			 fiveArray.push(json.fiveColumn);</span></span><br><span class="line"><span class="xml">			 sixArray.push(json.sixColumn);</span></span><br><span class="line"><span class="xml">			 sevenArray.push(json.sevenColumn);</span></span><br><span class="line"><span class="xml">		 &#125;</span></span><br><span class="line"><span class="xml">		 //插入7列数组数据</span></span><br><span class="line"><span class="xml">		 sumArray.push(oneArray);</span></span><br><span class="line"><span class="xml">		 sumArray.push(twoArray);</span></span><br><span class="line"><span class="xml">		 sumArray.push(threeArray);</span></span><br><span class="line"><span class="xml">		 sumArray.push(fourArray);</span></span><br><span class="line"><span class="xml">		 sumArray.push(fiveArray);</span></span><br><span class="line"><span class="xml">		 sumArray.push(sixArray);</span></span><br><span class="line"><span class="xml">		 sumArray.push(sevenArray);</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		 //底部表头插入</span></span><br><span class="line"><span class="xml">		 var tr0=detailData.insertRow(arrays.length+1);</span></span><br><span class="line"><span class="xml">		 var td0=tr0.insertCell(0);</span></span><br><span class="line"><span class="xml">		 td0.colSpan=2;</span></span><br><span class="line"><span class="xml">		 td0.innerHTML="遗漏信息";</span></span><br><span class="line"><span class="xml">		 td0.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml">		 var td00=tr0.insertCell(1);</span></span><br><span class="line"><span class="xml">		 td00.colSpan=8;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		 var tr=detailData.insertRow(arrays.length+2);</span></span><br><span class="line"><span class="xml">		 var td=tr.insertCell(0);</span></span><br><span class="line"><span class="xml">		 td.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml">		 td.innerHTML="数字 | 单排最大遗漏数 | 总排最大遗漏数";</span></span><br><span class="line"><span class="xml">		 td.colSpan=2;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		 //根据所查询的number分隔逗号，计算并得到其遗漏信息(数字、单排最大遗漏数、总排最大遗漏数)</span></span><br><span class="line"><span class="xml">		 var numbers=document.getElementById("number").value.trim();</span></span><br><span class="line"><span class="xml">		 console.log("nums: "+numbers.split(","));</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		//需要查询的number为空；则不进行显示其遗漏信息</span></span><br><span class="line"><span class="xml">		 if(numbers==null || numbers=='' || numbers==undefined)&#123;</span></span><br><span class="line"><span class="xml">			 var td11=tr.insertCell(1);</span></span><br><span class="line"><span class="xml">			 td11.colSpan=8;</span></span><br><span class="line"><span class="xml">		 &#125;</span></span><br><span class="line"><span class="xml">		 //需要查询的number不为空；则进行显示其遗漏信息</span></span><br><span class="line"><span class="xml">		 else&#123;</span></span><br><span class="line"><span class="xml">			 var nums=numbers.split(","); //则遗漏信息、数字、单排最大遗漏数进行显示 循环查询每个数值的单排 总排</span></span><br><span class="line"></span><br><span class="line"><span class="xml">			 //需要查询的number遗漏信息数组的长度进行循环得到</span></span><br><span class="line"><span class="xml">			 for(var h=0;h<span class="tag">&lt;<span class="name">nums.length;h++)&#123;</span></span></span></span><br><span class="line"><span class="xml">			 	 var number=nums[h];//查询的数值</span></span><br><span class="line"><span class="xml">				 var singleMap=new Map();//关于该数值的单排最大遗漏数</span></span><br><span class="line"><span class="xml">				 var sumList=[];</span></span><br><span class="line"><span class="xml">				 // var minIndexMap=new Map();//每一列， 每一个单排当中的最小index</span></span><br><span class="line"><span class="xml">				 // var maxIndexMap=new Map();//每一列， 每一个单排当中的最大index</span></span><br><span class="line"></span><br><span class="line"><span class="xml">				 for(var t=0;t<span class="tag">&lt;<span class="name">sumArray.length;t++)&#123;</span> //当前<span class="attr">7</span>个数组当中都存有对应的关于该需要进行查询遗漏信息的数值<span class="attr">number</span>,循环<span class="attr">7</span>次,在七列当中进行查找以及得到它们所在的<span class="attr">index</span></span></span></span><br><span class="line"><span class="xml">					 var arrays2=sumArray[t];//总共有7列，当前第t，单个数组</span></span><br><span class="line"><span class="xml">					 var map=new Map();</span></span><br><span class="line"></span><br><span class="line"><span class="xml">					 for(var i=0;i<span class="tag">&lt;<span class="name">arrays2.length;i++)</span> &#123; //每一列数组元素的循环</span></span></span><br><span class="line"><span class="xml">						 var element = arrays2[i]; //当前七列中第t列数组当中具体的元素</span></span><br><span class="line"><span class="xml">						 if (number == element) &#123;</span></span><br><span class="line"><span class="xml">						 	if(map.get(element)==null || map.get(element)==undefined)&#123;</span></span><br><span class="line"><span class="xml">								map.put(element, &#123;prior: null, curr: null, size: null&#125;); //map.put(element,0);//放入了该列当中所有不重复元素以及其实时变化的位移index+1</span></span><br><span class="line"><span class="xml">							&#125;</span></span><br><span class="line"><span class="xml">						 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">						 for(var n=0;n<span class="tag">&lt;<span class="name">arrays2.length;n++)&#123;</span></span></span></span><br><span class="line"><span class="xml">							 var key=arrays2[n]; //当前七列中第t列数组当中具体的元素</span></span><br><span class="line"><span class="xml">							 if(key!=null &amp;&amp; key==element &amp;&amp; number == key)&#123; //如果存在有当前循环的数组当中的取值与map当中的键相同的则重新赋值，重新赋值后进行break;//var y=i-n;</span></span><br><span class="line"><span class="xml">								 sumList.push(n);</span></span><br><span class="line"></span><br><span class="line"><span class="xml">								 //存储每一个元素他的前一位相同元素的下标；y为当前元素的下标</span></span><br><span class="line"><span class="xml">								 if((map.get(element)!=null &amp;&amp; map.get(element)!=undefined)</span></span><br><span class="line"><span class="xml">										 &amp;&amp; map.get(element).prior==null &amp;&amp; map.get(element).curr==null &amp;&amp; map.get(element).size==null)&#123;</span></span><br><span class="line"><span class="xml">									 map.put(element,&#123;prior: n, curr: n, size: 0&#125;); //第一次遇到元素相同的时候</span></span><br><span class="line"><span class="xml">								 &#125;</span></span><br><span class="line"><span class="xml">								 if((map.get(element)!=null &amp;&amp; map.get(element)!=undefined)</span></span><br><span class="line"><span class="xml">										 &amp;&amp; (map.get(element).prior!=null &amp;&amp; map.get(element).curr!=null &amp;&amp; map.get(element).size!=null)</span></span><br><span class="line"><span class="xml">								 		 &amp;&amp; map.get(element).prior==map.get(element).curr)&#123;</span></span><br><span class="line"><span class="xml">									 map.put(element,&#123;prior: map.get(element).prior, curr: n, size: n-map.get(element).prior&#125;); //第二次遇到元素相同的时候</span></span><br><span class="line"><span class="xml">								 &#125;</span></span><br><span class="line"><span class="xml">								 if((map.get(element)!=null &amp;&amp; map.get(element)!=undefined)</span></span><br><span class="line"><span class="xml">										 &amp;&amp; (map.get(element).prior!=null &amp;&amp; map.get(element).curr!=null  &amp;&amp; map.get(element).size!=null)</span></span><br><span class="line"><span class="xml">										 &amp;&amp; map.get(element).prior!=map.get(element).curr) &#123;</span></span><br><span class="line"><span class="xml">								 	 // 此时 map 中的 curr 即当前 key 的相同元素的上一位置 prior 的 index ;取出 prior;</span></span><br><span class="line"><span class="xml">									 // 得到当前 key index 与当前 key index 的 prior 的 size；</span></span><br><span class="line"><span class="xml">									 // 如果当前 size较之此时map当中element元素的size要大，则进行替换</span></span><br><span class="line"><span class="xml">									 var currPrior=map.get(element).curr; //当前的上一位</span></span><br><span class="line"><span class="xml">									 var currSize=n-currPrior; //当前的大小</span></span><br><span class="line"><span class="xml">									 var priorSize=map.get(element).size; //上一位的大小</span></span><br><span class="line"><span class="xml">									 if(currSize&gt;priorSize)&#123;</span></span><br><span class="line"><span class="xml">										 map.put(element,&#123;prior:currPrior, curr:n, size:currSize&#125;);</span></span><br><span class="line"><span class="xml">									 &#125;</span></span><br><span class="line"><span class="xml">								 &#125;</span></span><br><span class="line"><span class="xml">							 &#125;else&#123;</span></span><br><span class="line"><span class="xml">								 continue;//跳出对于第i列数组中element元素对于当前n数组的当次循环，进入当前n数组迭代下一元素key的循环</span></span><br><span class="line"><span class="xml">							 &#125;</span></span><br><span class="line"><span class="xml">						 &#125;</span></span><br><span class="line"><span class="xml">					 &#125;</span></span><br><span class="line"><span class="xml">					 console.log("第"+t+"列当中，每一个元素的单排最大遗漏数："+JSON.stringify(map));</span></span><br><span class="line"><span class="xml">					 if(map.get(number)!=null || map.get(number)!=undefined)&#123;</span></span><br><span class="line"><span class="xml">						 //取值则为当前该map.get(number)即当前列当中的单排最大遗漏数</span></span><br><span class="line"><span class="xml">						 singleMap.put(t,map.get(number).size-1);//singleMap.put(t,map.get(number)-1);//key t：哪一列， value 当前该数值在当前排t的最大遗漏数  map.get(number)需要减去1</span></span><br><span class="line"><span class="xml">					 &#125;else&#123;</span></span><br><span class="line"><span class="xml">						 //当前列取出number如果为空则说明当前列当中不存在有该数值，则替换为0</span></span><br><span class="line"><span class="xml">						 singleMap.put(t,'当前列不存在'+number);</span></span><br><span class="line"><span class="xml">					 &#125;</span></span><br><span class="line"><span class="xml">				 &#125;</span></span><br><span class="line"><span class="xml">				 //遍历完7个数组后得到当前查询的该数值的所有index</span></span><br><span class="line"><span class="xml">				 //得到当前查询的该数值的在7列中的所有index，并进行index排序sort,每一个index都与index.next进行比较得到size</span></span><br><span class="line"><span class="xml">				 //定义maxSize变量，并进行赋值</span></span><br><span class="line"><span class="xml">				 sumList.sort(sortNumber);</span></span><br><span class="line"><span class="xml">				 var sumMaxNumber=null;</span></span><br><span class="line"><span class="xml">				 if(sumList.length==0)&#123;</span></span><br><span class="line"><span class="xml">					 sumMaxNumber='不存在';</span></span><br><span class="line"><span class="xml">				 &#125;else&#123;</span></span><br><span class="line"><span class="xml">					 for(var g=0;g<span class="tag">&lt;<span class="name">sumList.length;g++)&#123;</span></span></span></span><br><span class="line"><span class="xml">						 if(sumMaxNumber==null)&#123;</span></span><br><span class="line"><span class="xml">							 sumMaxNumber=sumList[g+1]-sumList[g];</span></span><br><span class="line"><span class="xml">						 &#125;else&#123;</span></span><br><span class="line"><span class="xml">						 	var nextSize=sumList[g+1]-sumList[g];</span></span><br><span class="line"><span class="xml">						 	if(nextSize&gt;sumMaxNumber)&#123;</span></span><br><span class="line"><span class="xml">								sumMaxNumber=nextSize;</span></span><br><span class="line"><span class="xml">							&#125;</span></span><br><span class="line"><span class="xml">						 &#125;</span></span><br><span class="line"><span class="xml">					 &#125;</span></span><br><span class="line"><span class="xml">				 &#125;</span></span><br><span class="line"><span class="xml">				 var mapArrays=singleMap.entrys();//循环之后获取得到singleMap,即单排数</span></span><br><span class="line"><span class="xml">				 if (h == 0) &#123; //即第一个数值的时候填入行tr:arrays.length+2</span></span><br><span class="line"><span class="xml">					 td.innerHTML="数字: "+number+" | 单排最大遗漏数 | 总排最大遗漏数: "+sumMaxNumber;</span></span><br><span class="line"><span class="xml">					 for(var r=0;r<span class="tag">&lt;<span class="name">mapArrays.length;r++)</span> &#123;</span></span></span><br><span class="line"><span class="xml">						 var td22 = tr.insertCell(r+1);//当前行处于第一行</span></span><br><span class="line"><span class="xml">						 td22.innerHTML = singleMap.get(r);</span></span><br><span class="line"><span class="xml">					 &#125;</span></span><br><span class="line"><span class="xml">					 tr.insertCell(mapArrays.length+1);</span></span><br><span class="line"><span class="xml">				 &#125; else &#123;</span></span><br><span class="line"><span class="xml">					 //新增行并插入</span></span><br><span class="line"><span class="xml">					 var newTr=detailData.insertRow(arrays.length+2+h);</span></span><br><span class="line"><span class="xml">					 var newTd=newTr.insertCell(0);</span></span><br><span class="line"><span class="xml">					 newTd.innerHTML="数字: "+number+" | 单排最大遗漏数 | 总排最大遗漏数: "+sumMaxNumber;</span></span><br><span class="line"><span class="xml">					 newTd.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml">					 newTd.colSpan=2;</span></span><br><span class="line"><span class="xml">					 for(var r=0;r<span class="tag">&lt;<span class="name">mapArrays.length;r++)</span> &#123;</span></span></span><br><span class="line"><span class="xml">						 var td22 = newTr.insertCell(r+1);//从第二行开始进行新增列</span></span><br><span class="line"><span class="xml">						 td22.innerHTML = singleMap.get(r);</span></span><br><span class="line"><span class="xml">					 &#125;</span></span><br><span class="line"><span class="xml">					 newTr.insertCell(mapArrays.length+1);</span></span><br><span class="line"><span class="xml">				 &#125;</span></span><br><span class="line"><span class="xml">				 console.log("================== 查询数值："+number+" END ==================");</span></span><br><span class="line"><span class="xml">			 &#125;</span></span><br><span class="line"><span class="xml">		 &#125;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	/**</span></span><br><span class="line"><span class="xml">	 * 获取list接口数据</span></span><br><span class="line"><span class="xml">	 * @param requestDataBean</span></span><br><span class="line"><span class="xml">	 */</span></span><br><span class="line"><span class="xml">	function getData(requestDataBean)&#123;</span></span><br><span class="line"><span class="xml">		var url="/maima/findAllByParams";</span></span><br><span class="line"><span class="xml">		AjaxPost(url, requestDataBean,</span></span><br><span class="line"><span class="xml">			function () &#123;</span></span><br><span class="line"><span class="xml">				//ajax加载中</span></span><br><span class="line"><span class="xml">			&#125;,</span></span><br><span class="line"><span class="xml">			function (data) &#123;</span></span><br><span class="line"><span class="xml">				console.log("========数据获取成功======");</span></span><br><span class="line"><span class="xml">				//ajax返回 //认证完成</span></span><br><span class="line"><span class="xml">				if(data!=null)&#123;</span></span><br><span class="line"><span class="xml">					var arrays=JSON.parse(JSON.stringify(data.list));</span></span><br><span class="line"><span class="xml">					var sumArrays=JSON.parse(JSON.stringify(data.list2));</span></span><br><span class="line"><span class="xml">					document.getElementById("page").value=data.page;</span></span><br><span class="line"><span class="xml">					document.getElementById("pageSize").value=data.pageSize;</span></span><br><span class="line"><span class="xml">					if (arrays.length!=0) &#123;</span></span><br><span class="line"><span class="xml">						//前端填充数据操作</span></span><br><span class="line"><span class="xml">						console.log("======= 表格填充数据 - fillDataToTable =======")</span></span><br><span class="line"><span class="xml">						fillDataToTable(arrays,sumArrays);</span></span><br><span class="line"><span class="xml">					&#125; else &#123;</span></span><br><span class="line"><span class="xml">						AjaxErro(data);</span></span><br><span class="line"><span class="xml">					&#125;</span></span><br><span class="line"><span class="xml">				&#125;</span></span><br><span class="line"><span class="xml">			&#125;)</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	/**</span></span><br><span class="line"><span class="xml">	 * 页面加载</span></span><br><span class="line"><span class="xml">	 */</span></span><br><span class="line"><span class="xml">	window.onload = function()&#123;</span></span><br><span class="line"><span class="xml">		var requestDataBean = &#123;page:0,pageSize:10&#125;;</span></span><br><span class="line"><span class="xml">		console.info("页面加载 - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">		getData(requestDataBean);</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby">-</span></span><br><span class="line"></span><br><span class="line"><span class="ruby"> /<span class="regexp">/console.log(map.toString());</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ var mapArrays=map.entrys();</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ var maxValue=0;</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ var maxKey=0;</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ for(var i=0;i&lt;mapArrays.length;i++)&#123; /</span><span class="regexp">/当前列当中的map数组</span></span></span><br><span class="line"><span class="ruby">						/<span class="regexp">/  var key=mapArrays[i].key;</span></span></span><br><span class="line"><span class="ruby">						/<span class="regexp">/  var value=map.get(key);</span></span></span><br><span class="line"><span class="ruby">						 /<span class="regexp">/ console.log("key: "+key+" value:"+value);</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ &#125;</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ console.log("单排最大遗漏数为 - key:"+maxKey+"  value:"+(maxValue-1));</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/添加元素</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ var td4=tr.insertCell(t+1);</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ if(maxKey&lt;=0)&#123;</span></span></span><br><span class="line"><span class="ruby">						/<span class="regexp">/  td4.innerHTML="-";</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">						/<span class="regexp">/  td4.innerHTML=maxKey;</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ &#125;</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ var td5=tr2.insertCell(t+1);</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ if((maxValue-1)&lt;=0)&#123;</span></span></span><br><span class="line"><span class="ruby">						/<span class="regexp">/  td5.innerHTML="-";</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">						/<span class="regexp">/  td5.innerHTML=(maxValue-1);</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ &#125;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="ruby">var tr=detailData.insertRow(arrays.length+<span class="number">2</span>);</span></span><br><span class="line"><span class="ruby">		 var td=tr.insertCell(<span class="number">0</span>);</span></span><br><span class="line"><span class="ruby">		 td.innerHTML=<span class="string">"数字"</span>;</span></span><br><span class="line"><span class="ruby">		 td.style.fontWeight=<span class="string">"bolder"</span>;</span></span><br><span class="line"><span class="ruby">		 td.colSpan=<span class="number">2</span>;</span></span><br><span class="line"><span class="ruby">		 var tr2=detailData.insertRow(arrays.length+<span class="number">3</span>);</span></span><br><span class="line"><span class="ruby">		 var td2=tr2.insertCell(<span class="number">0</span>);</span></span><br><span class="line"><span class="ruby">		 td2.innerHTML=<span class="string">"单排最大遗漏数"</span>;</span></span><br><span class="line"><span class="ruby">		 td2.style.fontWeight=<span class="string">"bolder"</span>;</span></span><br><span class="line"><span class="ruby">		 td2.colSpan=<span class="number">2</span>;</span></span><br><span class="line"><span class="ruby">		 var tr3=detailData.insertRow(arrays.length+<span class="number">4</span>);</span></span><br><span class="line"><span class="ruby">		 var td3=tr3.insertCell(<span class="number">0</span>);</span></span><br><span class="line"><span class="ruby">		 td3.innerHTML=<span class="string">"总排最大遗漏数"</span>;</span></span><br><span class="line"><span class="ruby">		 td3.style.fontWeight=<span class="string">"bolder"</span>;</span></span><br><span class="line"><span class="ruby">		 td3.colSpan=<span class="number">2</span>;</span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ /</span><span class="regexp">/当前7个数组当中都存有对应的数值</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ for(var t=0;t&lt;sumArray.length;t++)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/ var arrays=[01,28,19,35,43,08,01,12,32,41];</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var arrays=sumArray[t];/</span><span class="regexp">/单个数组</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  console.log(arrays);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var flag=true;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var map=new Map();</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  for(var i=0;i&lt;arrays.length;i++)&#123; /</span><span class="regexp">/循环10次</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 var element=arrays[i];/</span><span class="regexp">/数组当中具体的元素</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 map.put(element,0);/</span><span class="regexp">/放入的只有9个</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 for(var n=0;n&lt;arrays.length;n++)&#123; /</span><span class="regexp">/循环10次</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 		 var key=arrays[n];</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 		 /</span><span class="regexp">/console.log("当前遍历的element: "+element+"；所处index: "+i+"  map当中循环的element: "+key+"所处index: "+n)</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 		 if(key!=null &amp;&amp; key==element)&#123; /</span><span class="regexp">/如果存在有当前循环的数组当中的取值与map当中的键相同的则重新赋值，重新赋值后进行下一次break;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 			 var y=i-n;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 			 /</span><span class="regexp">/console.log("key: "+key+" element:"+element+" y: "+y);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 			 map.put(element,y);/</span><span class="regexp">/此处的y没有减去当前自己的位数,所以当单排最大遗漏数查询的时候还需要-1</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 			 break;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 		 &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 			 continue;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 		 &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/console.log(map.toString());</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var mapArrays=map.entrys();</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var maxValue=0;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var maxKey=0;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  for(var i=0;i&lt;mapArrays.length;i++)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 var key=mapArrays[i].key;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 var value=map.get(key);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 /</span><span class="regexp">/console.log("key: "+key+" value:"+value);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 if(maxValue&lt;value)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 		 maxValue=value;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 		 maxKey=key;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  console.log("单排最大遗漏数为 - key:"+maxKey+"  value:"+(maxValue-1));</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/添加元素</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var td4=tr.insertCell(t+1);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  if(maxKey&lt;=0)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 td4.innerHTML="-";</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 td4.innerHTML=maxKey;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var td5=tr2.insertCell(t+1);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  if((maxValue-1)&lt;=0)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 td5.innerHTML="-";</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 td5.innerHTML=(maxValue-1);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ &#125;</span></span></span><br><span class="line"><span class="ruby">-</span><span class="xml">-%&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>前端</tag>
        <tag>双色球</tag>
      </tags>
  </entry>
  <entry>
    <title>串</title>
    <url>/2020/04/07/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2-05/</url>
    <content><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/04/07/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%B2-05/%E4%B8%B2-05.png" alt="串-05"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>串</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>栈与队列</title>
    <url>/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/</url>
    <content><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04.png" alt="栈与队列-04"></p>
<p><img src="/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E5%BC%80%E5%9C%BA%E7%99%BD.png" alt="开场白"></p>
<p><img src="/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%A0%88%E7%9A%84%E5%AE%9A%E4%B9%89.png" alt="栈的定义"></p>
<p><img src="/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%A0%88%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="栈的抽象数据类型"></p>
<p><img src="/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%8F%8A%E5%AE%9E%E7%8E%B0.png" alt="栈的顺序存储结构及实现"></p>
<p><img src="/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E4%B8%A4%E6%A0%88%E7%9A%84%E5%85%B1%E4%BA%AB%E7%A9%BA%E9%97%B4.png" alt="两栈的共享空间"></p>
<p><img src="/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%8F%8A%E5%AE%9E%E7%8E%B0.png" alt="栈的链式存储结构及实现"></p>
<p><img src="/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%A0%88%E7%9A%84%E4%BD%9C%E7%94%A8.png" alt="栈的作用"></p>
<p><img src="/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E9%80%92%E5%BD%92.png" alt="栈的应用-递归"></p>
<p><img src="/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.png" alt="栈的应用-四则运算表达式求值"></p>
<p><img src="/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9A%E4%B9%89.png" alt="队列的定义"></p>
<p><img src="/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E9%98%9F%E5%88%97%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="队列的抽象数据类型"></p>
<p><img src="/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97.png" alt="循环队列"></p>
<p><img src="/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%8F%8A%E5%AE%9E%E7%8E%B0.png" alt="队列的链式存储结构及实现"></p>
<p><img src="/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E6%80%BB%E7%BB%93%E5%9B%9E%E9%A1%BE.png" alt="总结回顾"></p>
<p><img src="/2020/04/05/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-04/%E7%BB%93%E5%B0%BE%E8%AF%AD.png" alt="结尾语"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>栈与队列</tag>
      </tags>
  </entry>
  <entry>
    <title>社会主义接班人</title>
    <url>/2020/04/03/%E9%9A%8F%E7%AC%94/%E6%88%91%E6%98%AF%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E6%8E%A5%E7%8F%AD%E4%BA%BA/</url>
    <content><![CDATA[<blockquote>
<p>帮我妹改改作文。</p>
</blockquote>
<p>主题：灾害到来时我该怎么做</p>
<ol>
<li>身份：新时代的青年人，是社会建设和国家发展的接班人</li>
<li>态度：勇敢面对，承担使命</li>
<li>方向：针对新冠疫情；视角要宽；</li>
<li>人群：90,00代的突出表现和感人事迹</li>
</ol>
<p>面临黑暗，我向阳光</p>
<p>  汽车的鸣笛，街道的喧闹。<br>  在蓝天白云下，在灿阳照射下，看似和谐美好的生活，也有阳光穿不透的黑暗，<br>  他们在黑暗里肆意欢笑，趁人不注意，便将罪恶的双手伸向人们，<br>  他们在变态心理的引导下剥夺了人爱阳光照耀的机会，<br>  将人无情地拉进黑暗。</p>
<p>  黑暗就如病毒，如同冠状病毒，从天而降，肆意传播，于是将人们的天空浸染成了黑色，<br>  雨水冲刷着人们的双眼。但总会有阳光，哪怕只剩一缕，他也会穿过乌云照向大地。<br>  新闻中不断播的着“巨婴”的行为，可以说是个反面教材了，<br>  在面对危险时，他们慌乱了手脚，将内心底的自私播出来给人们看，<br>  像跳梁小丑，引人发笑。当医生带着阳光冲向黑暗，“巨婴”们手里拿着盾牌，却站反了方向。<br>  我们理应相信那一缕阳光，将我们内心的力量融合，为医生助力。</p>
<p>  黑暗也如同恐惧心理，覆压人的心灵，痛打着人们的躯体，凌辱了人的自尊，却仍在暗自偷笑。<br>  校园暴力给人带来的伤痛往往是比身体的疼痛更令人刻骨铭心。<br>  但总有强大心灵带着阳光，即使”身在井隅”，却仍然”心向璀璨”。<br>  冰冷的法律中出现裂痕，投进去了温暖，扫黑，禁止校园暴力的法律的颁布，<br>  在这个社会，让人们走在街道上，没有胆怯。我们主动站出来打击黑恶势力，将力量团结在一起。<br>  黑暗骑士也没有那么可怕。</p>
<p>  我想阳光的力量一定可以战胜黑暗，我想，抬头暖阳春草，用拥抱将黑暗消融。<br>  阳光会穿过茂密的树枝，穿过乱窜的树枝，知道最后，千缕阳光冲破黑来前来拥抱我。</p>
<p>  ======================================================================</p>
<h2 id="面临黑暗，我向阳光"><a href="#面临黑暗，我向阳光" class="headerlink" title="面临黑暗，我向阳光"></a>面临黑暗，我向阳光</h2><p>“等到黑夜翻面之后，会是新的白昼；<br>等到海啸退去之后，只是潮起潮落；<br>别到最后你才发觉，心里头的野兽，还没到最终就已经罢休；<br>心脏没有那么脆弱，总还会有执着；<br>人生不会只有收获，总难免有伤口；<br>不要害怕生命中，不完美的角落；<br>阳光在每个裂缝中散落，不如就勇敢打破生命中的裂缝，阳光就逐渐洒满了其中。”<br>——题记</p>
<p>2019的尾巴到2020的开端，甚至更甚。<br>爆发的新冠状病毒，在这场看不见硝烟的抗疫战争中告诉我们，<br>这不仅仅是一场我们巍巍中华人民需要迎接且不能退缩的挑战，这更是让我们泱泱华夏子孙心与心贴在了一起的连线。</p>
<p>在这场抗疫当中，有着数不清的前线抗疫战士为了这场战争前继后扑。<br>贵州省黔西南州兴义市人民医院的一位呼吸科医生张恩莉争分夺秒，只为更多患者康复；<br>吉林省援鄂医疗队的一位护士长高岚守护生命，坚持到最后胜利；<br>武汉大学人民医院东院区山东医疗队的主治医生郭海鹏用仁心仁术守护生命…</p>
<p>不仅仅是前线的抗疫战士，就连普普通通老百姓也送上了来自他们的绵薄之力。<br>山东日照一个环卫工人捐了一万二,钱虽然不是很多，但对于他来说却是一个大数目；<br>1月28日，寿光免费赠送了300吨新鲜蔬菜。并且29日起，每天给武汉送600吨平价新鲜蔬菜，持续供应10到15天。截止到2月3日共捐赠1120吨；<br>1月29日，临沂兰陵县捐赠200吨大蒜;<br>1月31日，临沂蔬菜公司原计划捐赠100吨蔬菜，结果这个消息传到了菜农耳朵里又自愿增加60吨，共计160吨;<br>1月31日，金乡捐赠300吨大蒜;<br>2月1日，滕州捐赠66吨马铃薯;<br>2月4日，菏泽8节车厢满载着275吨优质农产品驰援武汉…</p>
<p>给出力量的不仅仅来自于前线、百姓、企业…<br>也有来自00后，90后那些一度被认为仍处在温室的花朵，也给予了来自他们微弱的力量。</p>
<p>“阿姨，您的处方单是以前的，药店说需要新的处方单才能开药，请您让主治医师再开一张过来吧”，“叔叔，您要的药没有了，看看这种行不行”，……<br>在武汉市汉阳区晴川街的一家药店，19岁的张玉欣一边跟店主报需求，一边联系居民询问购药的细节，忙的不可开交。<br>张玉欣是武汉本地的“00”后大学生，疫情发生后，她主动到社区报名，成为一名志愿者，主要负责给居民买药送药。<br>“之前有过志愿服务经验，现在我们的城市遇到困难了，我想为家乡人民出一份力。”张玉欣说。<br>张玉欣工作的汉阳晴川街龙灯社区龙灯里小区是一个老旧小区，居民大多是老年人。<br>为了满足居民多样化的用药需求，张玉欣和同事们经常从早跑到晚，遇到一些难买到的药，还得一家家药店去询问，经常饭都来不及吃。<br>“虽然只是跑腿的工作，但有些药对居民来说是‘救命药’，我们必须争分夺秒去买。”张玉欣说。<br>小区居民买高血压、糖尿病等慢性病的药物比较多，有的隔几天就需要再买一次。最多的时候，她一天要买五六十种药品，光排队就要好几个小时。<br>让张玉欣印象最深的是，一天下午，她接到居民求助：一名70多岁的危重症者急需球蛋白。她和同事立即开车外出找药，一家家药店去询问，从汉阳一路搜到汉口，辗转10多家药店，终于在快要天黑时，在一家即将打烊的药店买到了药。<br>当他们把药送到求助居民手中时，对方感动的热泪盈眶。志愿者的辛苦付出，居民都看在眼里。<br>“开始时一些居民不放心，但看到那些买药的居民不仅拿到了急需的药，零钱也一份不少，现在他们都提前写下医保卡密码，放心地交给我们购药”张玉欣欣慰地说。</p>
<p>“身在无间，心在桃源”。<br>前有武汉汉阳区“00”后志愿者张玉欣为居民买药送药争分夺秒，后有“90”后一线抗疫英雄谢小玉的12小时无私奉献。</p>
<p>过去有人说他们是娇滴滴的一代，但现在看，他们成了抗疫一线的主力军，不怕苦、不怕牺牲。抗疫一线比其他地方更能考验人。”<br>3月10日，习近平总书记来到武汉市东湖新城社区考察。听完社区志愿者代表、中国矿业大学(北京)大二学生谢小玉的工作汇报后，总书记深有感触地说。<br>　　受到总书记的肯定和鼓励，谢小玉工作起来更有干劲了。这名社区第一批参加志愿服务、唯一的大学生志愿者，已经在30栋楼值守一个多月。日前，记者来到东湖新城社区，感受了谢小玉忙碌的一天。<br>　　上午9点——主动上门问需求。<br>　　趁着上午9点物资尚未送达的待命时刻，谢小玉看望了住在30栋楼15层的80多岁的周奶奶。<br>　　“奶奶，降压药够吗?燃气卡要充值吗?”“小玉来啦，放心，都够用。”周奶奶感动地说，有一次为了帮她买降压药，谢小玉连跑了3家药店。<br>　　因为老人家不会用手机、腿脚又不方便，谢小玉就特别关心周奶奶。“周奶奶第一次接电话时，看到是陌生的手机号码，以为遇到了骗子，熟悉了以后，周奶奶经常主动打电话找我谈心。”她说，以前连对门邻居都不熟悉，这段时间却认识了很多社区邻居，有些人还给她送防护物资。<br>　　服务200多户居民不是简单事。单从买药来说，居民对生产厂家、品牌型号都有特殊要求。有时候她和其他志愿者连“逛”几天药店，才能买到某种指定的药。<br>　　上午10点——大箱小箱送快递。<br>　　“我的顺丰快递到南门了。”上午10点，30栋楼1单元一位居民在群里求助志愿者，谢小玉看到后立刻起身。<br>　　取快递是志愿者的日常工作，30栋楼离社区南门最远，来回一趟要十几分钟。一上午谢小玉就帮居民取了4次快递，看到她气喘吁吁地抱着大箱小箱，其他志愿者连忙帮她找推车。“没事，这几天，我的力气都锻炼大了。”谢小玉说。<br>　　“快递业务是从2月下旬开始逐渐增多的，最忙时一天要跑十几趟，一批快递在南门，一批在社区服务站前，收到居民通知就得赶紧取走、避免堆积。”谢小玉介绍说，居民个性化需求比较多，经常会有退换货的情况。<br>　　几天前，谢小玉向一位社区居民借了辆电瓶车。“最近取快递、取货方便多了，但小玉总是把电瓶车给我们用。”一起负责30栋楼的下沉干部毕彪说，谢小玉年纪虽小却很爱照顾人。<br>　　当然，工作中也有不顺心的时候。有一次分快递时，有居民冲她发了火，她哭了。“不只是感到委屈，更多的是觉得自己没做好。”谢小玉不好意思地说，社区工作人员和家人都在鼓励她，她也慢慢学会了调整心态。<br>　　下午5点半——挨家挨户发活鱼。<br>　　“团购活鱼到楼下了。”下午5点半，近10份活鱼在灌满清水的塑料袋里活蹦乱跳。谢小玉在群里发出通知，担心有居民没及时看到，她又一家家打电话通知。“谢谢小玉!”不到20分钟，鱼分发完了。随后，她仔细查阅笔记本上的记录，再次确认当天的物资和生活用品是否全部送到，然后继续值班。<br>　　脚踩一双粉色球鞋，外面套着一件红马甲，扎着利落的马尾辫，未满20岁的谢小玉浑身洋溢着青春的活力。她原本计划今年寒假和家人出去旅游过年，“虽然旅游没成行，但当社区志愿者也挺有意义的。”<br>　　搭档万小强说，小玉上岗时正值2月中旬寒潮来袭，爱心物资大部分是米面油，都特别沉，一周要发三四次。小玉挨家挨户敲门送货，好几次一直从傍晚忙到晚上11点。“这个‘00后’小姑娘一点也不娇气，很坚强，很有责任感。”万小强佩服地说。<br>　　“抗疫一线也是大学，志愿服务就是课堂。社区工作的经历和体验，是我课堂上学不到的。现在，我的承受能力、沟通能力、信息整合能力都增强了。”谢小玉自豪地说。</p>
<p>阳光会穿过茂密的树枝，投下的那些光影将斑驳这段可歌可泣的岁月，成为这程征途上熠熠生辉的勋章。<br>我知道最后，千万缕阳光会冲破黑暗前来拥抱那些需要握住阳光的人。<br>我想，其实勇敢一点，我们也能手握阳光，给予他人。</p>
<p>那是一个即将下着雨的午后，<br>早些时候火辣的太阳瞧得人都睁不开眼睛，<br>烤的地铁车厢的壳都想生烟，车窗外的樟树叶子被晒的都好像要反光似的，卟呤卟呤的。<br>得亏地铁中有穿堂风倒是凉快。<br>不过本来身上就发了汗，黏黏糊糊的。<br>风一吹，贴在身上的衣服与皮肉之间倒是分开了，反倒生出一股子燥意。<br>就是一冷一热夹杂搞得人有点头昏脑涨，有点崩溃。<br>说白了，就是有点晕地铁。<br>车上人多的很，一个小小的车厢挤得好像已经腾不出地儿再去容纳更多的人了。<br>周遭放眼望去就是人。<br>戴着耳机听歌看电视的，看新闻的，低头玩手机的，逗孩子乐呵的，打电话的，望向车窗外放空的，喊着借过让道的，也有些观察着别人的人。<br>总之就是人挤人，挨着站一块儿。挤一挤，位置总会有的。<br>充斥在耳旁的声音还有地铁上穿堂而过的风声，那响声绝了，感觉就像是坐在过山车上尖叫声。<br>六月的天说变就变，不过一会儿，车窗外的天空就被就大块黑漆漆的乌云给占地为王了。<br>阴沉沉的，就像考试没考好爸妈的脸色似的，跟锅底有的一拼。跟要下暴雨似的，确是有黑云压城城欲摧的气势。<br>“哕！”<br>天！我一听声音就知道离我不远。我就杵在地铁门口的地儿，估算一下离我也就两个人的距离吧，听着声音倒不像是好事。<br>看向车窗外的视线立马掉转了180度，看向了声源地，准备凑凑热闹。<br>那是一个小男孩，得到我鼻子这么高了。<br>一手捂着口，脸通红着，冒着热汗，又止不住的想要吐。<br>不是想要吐，是止不住的吐，到后面吐到没东西吐了在那里干呕。<br>中午应该是吃了带有火腿肠热狗面包一类的快餐，<br>呕出的酸臭粘液从他指缝中滑过，连着口水丝都掺有一股浓浓的感觉没有消化完全的那股味道，<br>淌了一地的污秽物，红的白的黄的浑浊搅在一起，胆汁都要给吐出来了。<br>真真是惨不忍睹，人间惨剧。<br>旁边站着一位中年女士也是急了眼，手抓着小男孩的衣领骂，伸手拍打了小男孩背部几下，像是在训斥他怎么没有忍住在公共场合给吐了，<br>那小男孩有些不满，有些抵触，又做不得声。<br>该是他的妈妈。<br>那母亲也红了脸，隔着人我都能感觉得到她满脸的尴尬之情，无以言表。<br>她忙的翻了翻挎包，挎包夹层，里里外外找了一通，都没来得及扣好挎包的扣子，又从衣服口袋里翻了翻，没翻出什么东西，又从裤口袋里翻了翻，还是没找着什么。<br>她大概是在找能够清理那些污秽物的东西。<br>我突然发现，整一我在的这节车厢，不，是这小男孩和他母亲所在的这一车厢都安静了很多。<br>地铁上的穿堂风依然呼呼疾行而过，顺路将这节车厢的酸臭味稍稍带去了些许。<br>并且最最最古怪的事是，明明之前还挤得不可开交，现在倒是成了距离那对母子所在范围一两米都没有什么人。<br>他们都捂着口鼻，神色异样，仍在惊异怎么吐了，怎么偏偏在这节车厢吐了，今天可真是倒霉。<br>呕吐物带来的酸臭味让人退避三尺。<br>那对母子希望能有人帮助他们一点点，就一节纸巾或者是一个塑料袋的善意，那一点微末的雪中送炭，却都无人问津。<br>离那对母子最近的一位农民老奶奶颤巍巍的从自己挑的篮子当中找出了个卖菜的那种塑料袋，短小粗糙泛黄的手中递出了她的一点零星善意。<br>“你拿塑料袋盛着”。<br>那母亲连声道谢，一边鞠躬一边道谢，赶紧让那小男孩拿着那塑料袋以免再吐。<br>有了老奶奶递出的那个塑料袋，旁边一些近身旁的人也纷纷从口袋里拿出一包包的纸巾。<br>那母亲一边道谢一边拿着不多的纸巾去擦地铁上小男孩吐的一片狼藉，将那一张张纸一点点包住污秽，然后放到塑料袋里面。<br>但是纸巾依然不够。<br>我知道我今天出门前特意带了卷纸出来了。但我不太好意思拿出来给那母亲用。<br>于是我从包里将卷纸扯了一大长节，再在包里尴尬的折好紧张的递了过去。<br>我朝她笑了笑，她脸仍然是红着，但是已经好些了，也朝我笑了笑，拿过纸巾，怀着歉意拘谨的道谢。<br>狼藉已经被那母亲擦拭得差不多了，小男孩也吐的差不多了，看上去脸色要舒服点了。<br>我又扯了节纸巾折好了递了过去给那小男孩。<br>“可以拿着擦手”。<br>那小男孩摇了摇手，连声道谢说不用。<br>于是我拿着那节纸巾又把手给缩了回来。<br>“要下车的乘客，请您提前做好准备”。<br>地铁停下来的时候，那对母子从我身旁经过，我将那节纸巾准备递给那母亲。<br>“可以拿着擦手”。<br>那母亲提着污秽物的塑料袋，笑笑温婉答道：“不用了，谢谢你”。<br>直到他们下了地铁后，我手里仍有些紧张的拿着那节纸巾，心底突然放松了些，畅快了许多。<br>好像突然晓得”初极狭，才通人，复行数十步，豁然开朗”是个什么滋味儿。<br>地铁上又涌上来了许多人。人依然很挤。<br>嘈杂的声音依然存在着，穿堂风也依然在疾声作响，只是忽然从耳畔淡了下去。<br>车窗外的云好像也没有那么黑了。压的人透不过气的那股子气好像也泄了了下去。<br>而最终，这场疑似暴雨的天气也没有来临。</p>
<p>我想，其实勇敢一点，他人不仅能获取阳光，或许还能将阳光撒的更远。</p>
<p>即便是一脚踏空，我也会相信会有人将你扶起；<br>我向上不再会是迷茫，也不再会是抹掉的慌张，而是抬头便是暖阳春草；<br>我向下听见你说这世界不再是空荡荡，而是看见你会伸开双手将我搂住给我拥抱。<br>踩碎了冰冷走过时光，睁开眼你就会听到人间四月芳菲始盛开的声音。</p>
<p>微笑向暖，清风自来；而面临黑暗，我心向阳光。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>社会主义接班人</tag>
      </tags>
  </entry>
  <entry>
    <title>线性表</title>
    <url>/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/</url>
    <content><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E7%BA%BF%E6%80%A7%E8%A1%A8-03.png" alt="线性表-03"></p>
<p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%AE%9A%E4%B9%89.png" alt="线性表定义"></p>
<p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="线性表的抽象数据类型"></p>
<p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="线性表的顺序存储结构"></p>
<p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E6%8F%92%E5%85%A5%E4%B8%8E%E5%88%A0%E9%99%A4.png" alt="顺序存储结构的插入与删除"></p>
<p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="线性表的链式存储结构"></p>
<p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E8%AF%BB%E5%8F%96.png" alt="单链表的读取"></p>
<p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E4%B8%8E%E5%88%A0%E9%99%A4.png" alt="单链表的插入与删除"></p>
<p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%95%B4%E8%A1%A8%E5%88%9B%E5%BB%BA.png" alt="单链表的整表创建"></p>
<p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%95%B4%E8%A1%A8%E5%88%A0%E9%99%A4.png" alt="单链表的整表删除"></p>
<p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%E4%B8%8E%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%BC%98%E7%BC%BA%E7%82%B9.png" alt="单链表结构与顺序存储结构优缺点"></p>
<p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8.png" alt="静态链表"></p>
<p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E7%BB%93%E5%B0%BE%E8%AF%AD.png" alt="结尾语"></p>
<p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png" alt="循环链表"></p>
<p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.png" alt="双向链表"></p>
<p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8-03/%E6%80%BB%E7%BB%93%E5%9B%9E%E9%A1%BE.png" alt="总结回顾"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>线性表</tag>
      </tags>
  </entry>
  <entry>
    <title>排序</title>
    <url>/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F-09/</url>
    <content><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F-09/%E6%8E%92%E5%BA%8F-09.png" alt="排序-09"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>树</title>
    <url>/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91-06/</url>
    <content><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91-06/%E6%A0%91-06.png" alt="树-06"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>图</title>
    <url>/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE-07/</url>
    <content><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE-07/%E5%9B%BE-07.png" alt="图-07"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>查找</title>
    <url>/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE-08/</url>
    <content><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/04/03/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE-08/%E6%9F%A5%E6%89%BE-08.png" alt="查找-08"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>查找</tag>
      </tags>
  </entry>
  <entry>
    <title>算法</title>
    <url>/2020/04/01/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95-02/</url>
    <content><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/04/01/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95-02/%E7%AE%97%E6%B3%95-02.png" alt="算法-02"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>面试</title>
    <url>/2020/03/29/%E9%9D%A2%E8%AF%95/%E4%BB%8A%E5%B9%B4%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ul>
<li>自我介绍</li>
<li>最熟悉的一个项目进行介绍</li>
<li>多线程（Thread与Runnable的不同）</li>
<li>重构从哪些地方入手</li>
<li>索引优化</li>
<li>为什么红黑树快，二进制为什么快（底层操作系统）</li>
<li>描述下计算机的底层原理</li>
<li>SpringBoot统一异常处理机制</li>
<li>SpringBoot的AOP、IOC流程，以及简单实现</li>
<li>SpringBoot的注解@Autowired,@Resource实现原理</li>
<li>Spring当中Bean的实现流程</li>
<li>HashMap当中红黑树为什么需要左旋右旋</li>
<li>Redis缓存击穿，缓存穿透，雪崩</li>
<li>分布式相关知识点</li>
<li>时间空间复杂度，O(n),二叉搜索树O(logn)</li>
<li>如何看待加班</li>
<li>SpringBoot当中事务实现</li>
<li>Redis底层进制实现，为什么Redis性能高</li>
<li>使用过哪些锁机制，有哪些锁</li>
<li>邮件服务，通过多线程，邮件没有发送成功如何处理</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>红黑树</title>
    <url>/2020/03/26/%E9%9D%A2%E8%AF%95/%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
    <content><![CDATA[<p>最近两天看到了HashMap比较多，包括一致性Hash等。<br>基本的了解了。<br>就是不太晓得红黑树。  </p>
<p>要是觉得看文档实在觉得不适的话，可以建议先去b站看个视频：<a href="https://www.bilibili.com/video/BV1tE411f7tP?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1tE411f7tP?p=1</a>  </p>
<p>HashMap源码阅读参考：</p>
<ul>
<li><a href="https://ke.qq.com/webcourse/index.html#cid=459141&amp;term_id=100549477&amp;taid=4078067153043845&amp;vid=5285890795538344618" target="_blank" rel="noopener">https://ke.qq.com/webcourse/index.html#cid=459141&amp;term_id=100549477&amp;taid=4078067153043845&amp;vid=5285890795538344618</a>  </li>
</ul>
<p>一致性Hash:  </p>
<ul>
<li><a href="https://www.bilibili.com/video/av25184175" target="_blank" rel="noopener">https://www.bilibili.com/video/av25184175</a>  </li>
<li><a href="https://www.cnblogs.com/lpfuture/p/5796398.html" target="_blank" rel="noopener">https://www.cnblogs.com/lpfuture/p/5796398.html</a></li>
<li>Redis哈希槽：<a href="https://blog.csdn.net/z15732621582/article/details/79121213" target="_blank" rel="noopener">https://blog.csdn.net/z15732621582/article/details/79121213</a></li>
</ul>
<p>blog:</p>
<ul>
<li><a href="https://www.cnblogs.com/mfrank/p/9227097.html" target="_blank" rel="noopener">https://www.cnblogs.com/mfrank/p/9227097.html</a></li>
<li><a href="https://blog.csdn.net/carson_ho/article/details/79373026" target="_blank" rel="noopener">https://blog.csdn.net/carson_ho/article/details/79373026</a></li>
<li><a href="https://blog.csdn.net/carson_ho/article/details/79373134" target="_blank" rel="noopener">https://blog.csdn.net/carson_ho/article/details/79373134</a></li>
<li><a href="https://www.cnblogs.com/FCWORLD/articles/8504383.html" target="_blank" rel="noopener">https://www.cnblogs.com/FCWORLD/articles/8504383.html</a></li>
<li><a href="https://www.cnblogs.com/leesf456/p/5242233.html" target="_blank" rel="noopener">https://www.cnblogs.com/leesf456/p/5242233.html</a></li>
<li><a href="https://www.jianshu.com/p/400f3c019557" target="_blank" rel="noopener">https://www.jianshu.com/p/400f3c019557</a></li>
</ul>
<p>打算看完再睡觉。对自己蜜汁自信。  </p>
<p>Node是TreeNode的爷爷，而且普通节点一般来说也比TreeNode要多。  </p>
<ul>
<li>红黑树介绍</li>
<li>TreeNode结构</li>
<li>树化的过程</li>
<li>红黑树的左旋和右旋</li>
<li>TreeNode的左旋和右旋</li>
<li>红黑树的插入</li>
<li>TreeNode的插入</li>
<li>红黑树的删除</li>
<li>TreeNode的删除</li>
</ul>
<p>理论部分：红黑树部分<br>代码实践部分：TreeNode部分  </p>
<p>好饿啊。  </p>
<h2 id="红黑树介绍"><a href="#红黑树介绍" class="headerlink" title="红黑树介绍"></a>红黑树介绍</h2><blockquote>
<p>什么是树？  </p>
</blockquote>
<p> <img src="https://images2018.cnblogs.com/blog/1043143/201806/1043143-20180625235951335-1438523857.jpg" alt="image"></p>
<ul>
<li>A~H 都是树的节点，每个节点有零个或者多个子节点，或者说多个孩子。</li>
<li>但是除根节点以外，每个节点都只有一个父节点，也称只要一个父亲。</li>
<li>最上面的A是根节点，最下面的D、H、F、G是叶子节点。</li>
<li>每一个非根节点【有且只有】一个父节点；</li>
<li>树是具有【一层一层】的【层次】结构；</li>
<li>这里A位于第一层，B、C位于第二层，D、E、F、G位于第三层，H位于第四层。以此类推。</li>
<li>将左边的B节点部分（包括BDEH）拿出来，则又是一棵树，称为树的子树。</li>
</ul>
<blockquote>
<p>什么是二叉搜索树？</p>
</blockquote>
<p> <img src="https://images2018.cnblogs.com/blog/1043143/201806/1043143-20180626005359234-143383116.jpg" alt="image"></p>
<ul>
<li>二叉代表他的节点最多有两个子节点; 而且左右有顺序，不能颠倒，分别叫左孩子和右孩子；这两个节点互成为兄弟节点。</li>
<li>4、9互为兄弟，7是他们的父亲，9是2的叔叔，8是2的堂兄弟。</li>
<li>既然叫做搜索树，表示它的用途是为了【更快的搜索和查找】而设计的，所以这棵树本身满足【一定的排序规则】，即数组的【任何节点的值大于它的左孩子，且小于它的右孩子】。</li>
<li>任意节点的左、右子树也分别为二叉查找树。</li>
</ul>
<blockquote>
<p>什么是红黑树？  </p>
</blockquote>
<p> <img src="https://images2018.cnblogs.com/blog/1043143/201806/1043143-20180626004222951-1996840383.jpg" alt="image"></p>
<ul>
<li>红黑树，本质上来说是一棵二叉搜索树。</li>
<li>红黑树，就跟他的名字一样，又红又黑，红黑并进，理实交融，【节点是非红即黑的】。</li>
</ul>
<h3 id="红黑树的主要特性"><a href="#红黑树的主要特性" class="headerlink" title="红黑树的主要特性"></a>红黑树的主要特性</h3><ol>
<li>每个节点要么是黑色，要么是红色。（节点非黑继红）</li>
<li>根节点是黑色的。</li>
<li>每个叶子节点（NIL）是黑色。</li>
<li>如果一个节点是红色的，则它的子节点必须是黑色的。（也就是说父子节点不能同时为红色）</li>
<li>从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。（这一点是平衡的关键）</li>
</ol>
<p>其实就是一棵比较平衡的又红又黑的二叉树。  </p>
<h4 id="TreeNode结构"><a href="#TreeNode结构" class="headerlink" title="TreeNode结构"></a>TreeNode结构</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">用于Tree bins的Entry.</span></span><br><span class="line"><span class="comment">扩展LinkedHashMap.Entry(进而扩展Node)，</span></span><br><span class="line"><span class="comment">因此可以用作常规节点或链接节点的扩展</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">static <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode&lt;K</span>,<span class="title">V&gt;</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry&lt;K</span>,<span class="title">V&gt;</span></span>&#123;</span><br><span class="line">    <span class="type">TreeNode</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; parent;<span class="comment">//红黑树父节点</span></span><br><span class="line">    <span class="type">TreeNode</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; left;<span class="comment">//红黑树左节点？</span></span><br><span class="line">    <span class="type">TreeNode</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; right;<span class="comment">//红黑树右节点？</span></span><br><span class="line">    <span class="type">TreeNode</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; prev;<span class="comment">//红黑树前一节点，删除后需要取消链接</span></span><br><span class="line">    boolean red;<span class="comment">//是否为红色，是否为红节点</span></span><br><span class="line">    <span class="comment">//构建TreeNode所需参数</span></span><br><span class="line">    <span class="type">TreeNode</span>(int hash,<span class="type">K</span> key,<span class="type">V</span> <span class="keyword">val</span>,<span class="type">Node</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; next)&#123;</span><br><span class="line">      <span class="keyword">super</span>(hash,key,<span class="keyword">val</span>,next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//省略后续代码</span></span><br></pre></td></tr></table></figure>

<p>TreeNode继承自LinkedHashMap中的内部类——-LinkedHashMap.Entry.<br>而这个内部类又继承自Node，所以算是Node的孙子辈了。  </p>
<p>属性：</p>
<ul>
<li>parent 用来指向他的父节点。</li>
<li>left 指向左孩子。</li>
<li>right 指向右孩子。</li>
<li>prev 则指向前一节点（原链表中的前一个节点）</li>
</ul>
<p>注意，这些字段跟Entry，Node中的字段是一样的，是使用默认访问权限的，所以子类可以直接使用父类的属性。</p>
<h4 id="树化的过程"><a href="#树化的过程" class="headerlink" title="树化的过程"></a>树化的过程</h4><p>当HashMap桶中的元素个数超过一定数量时，就会树化，也就是将链表转化为红黑树的结构。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">//put方法===》调用putVal方法</span></span><br><span class="line"> <span class="keyword">public</span> V put(K <span class="built_in">key</span>, V value) &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(<span class="built_in">key</span>), <span class="built_in">key</span>, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现hashMap的put操作</span></span><br><span class="line">    <span class="keyword">final</span> V putVal(<span class="built_in">int</span> hash, K <span class="built_in">key</span>, V value, <span class="built_in">boolean</span> onlyIfAbsent,</span><br><span class="line">                   <span class="built_in">boolean</span> evict) &#123;</span><br><span class="line">        ...省略部分代码...</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, <span class="built_in">key</span>, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">//当桶中元素个数超过阈值（8）时就进行树化</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)</span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">         ...省略部分代码...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="红黑树的具体实现方式（重点）"><a href="#红黑树的具体实现方式（重点）" class="headerlink" title="红黑树的具体实现方式（重点）"></a>红黑树的具体实现方式（重点）</h2><p>在JDK1.8 HashMap中，转换为红黑树大致分为三个步骤  </p>
<ol>
<li>第一阶段：将链表转化为二叉树</li>
<li>第二节点：验证是否满足红黑树的五大特征</li>
<li>第三阶段：对二叉树进行左右旋转操作</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将链表转化为二叉树；即tab为链表</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> treeifyBin(Node&lt;K,V&gt;[] tab, <span class="built_in">int</span> hash) &#123;</span><br><span class="line">        <span class="built_in">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        如果node节点数组为空或者node节点数组的长度小于最小树化容量则进入判断进行初始化该节点数组吧应该是。或者扩容?</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        对n进行赋值为链表的长度</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        */</span></span></span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            resize();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        key根据算法算出得到hash,</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        然后通过(n - 1) &amp; hash进行得到下标index位置，</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        这里根据(n - 1) &amp; hash得到下标位置index也有一段说辞，</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        请看视频：https://ke.qq.com/webcourse/index.html#cid=459141&amp;term_id=100549477&amp;taid=4078067153043845&amp;vid=5285890795538344618</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        此处判断Node节点数组当中的该index下标位置上的Node是否为空</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        如果不为空则进入判断</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">        */</span></span></span></span><br><span class="line">        <span class="comment">//重新计算hash段位，以及table节点数组的索引位，第一个节点</span></span><br><span class="line">        <span class="comment">//链表长度-1&amp;hash得到index下标取值</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">*双向链表 strat*</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line">          <span class="comment">//定义树节点hd为空； 树节点tl为空</span></span><br><span class="line">          <span class="comment">//hd：头节点head；tl: 为节点tail</span></span><br><span class="line">            TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                将节点替换为TreeNode</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                循环所有节点；即tab当中的所有Node(Node&lt;K,V&gt; e)</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                获取相对应的树节点p</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                */</span></span></span></span><br><span class="line">                TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果当前尾节点为空则将当前循环的p节点赋值给头结点</span></span><br><span class="line">                <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">　　　　　　　　　　　<span class="comment">//hd指向头结点</span></span><br><span class="line">                    hd = p;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                    这里其实是将单链表转化成了双向链表，</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                    tl是p的前驱，</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                    每次循环更新指向双链表的最后一个元素，</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                    用来和p相连，</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                    p是当前节点</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                    */</span></span></span></span><br><span class="line">                    p.prev = tl;</span><br><span class="line">                    tl.next = p;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//对尾节点进行赋值为当前树节点</span></span><br><span class="line">                tl = p;</span><br><span class="line"></span><br><span class="line">                <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                如果当前执行完do后执行while,首先进行重新赋值，</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                将e.next下一节点赋值给当前节点e，</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                并判断该节点是否为空;</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                不为空的情况下继续执行否则结束循环；</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">                */</span></span></span></span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">          <span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">*双向链表 end*</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">            前面仅仅转换为双向链表，treeify才是转换红黑树的处理方法入口;</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">            第一个节点赋值为头结点，也就是根节点</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">            查询链表当中是否存在头结点hd，如果不为空存在的话即验证</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">            */</span></span></span></span><br><span class="line">            <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//将链表进行树化；将二叉树转换为红黑树；</span></span><br><span class="line">                hd.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在treeifyBin函数中，先将所有节点替换为TreeNode，然后再将单链表转为双链表，方便之后的遍历和移动操作。<br>而最终的操作，实际上是调用了TreeNode的方法treeify进行的</p>
<p>看这些代码让我看得怀疑人生。仿佛又回到了当年的数学课。  </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//树化</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">调用这个方法之前，也就是一个双向链表</span></span><br><span class="line"><span class="comment">初始进入值为 this头结点</span></span><br><span class="line"><span class="comment">将双向链表转换为红黑树</span></span><br><span class="line"><span class="comment">目标：查询root节点</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">验证是否满足红黑树的五大特征</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">final void treeify(Node&lt;K,V&gt;<span class="literal">[]</span> tab) &#123;</span><br><span class="line">            <span class="comment">//树的根节点；初始化为空；root节点</span></span><br><span class="line">            TreeNode&lt;K,V&gt; root = null;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//x是当前节点，next是后继</span></span><br><span class="line">            <span class="comment">//这里的this是树转换数组索引处的第一个链表元素</span></span><br><span class="line">            for (TreeNode&lt;K,V&gt; x = this, next; x != null; x = next) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//next 当前节点的下一个节点，对next节点进行重新赋值</span></span><br><span class="line">                next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//设置左右节点为空</span></span><br><span class="line">                x.left = x.right = null;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果根节点为null，把当前节点设置为根节点</span></span><br><span class="line">                <span class="comment">//首次循环root根节点==null，设置当前循环的x节点为根节点</span></span><br><span class="line">                <span class="comment">//设置根节点特征</span></span><br><span class="line">                <span class="keyword">if</span> (root<span class="operator"> == </span>null) &#123;</span><br><span class="line"></span><br><span class="line">                  <span class="comment">//将根节点的父节点位置设置为空；根节点没有父节点</span></span><br><span class="line">                    x.parent = null;</span><br><span class="line">                  <span class="comment">//将根节点设置为black黑色；根节点是黑色的</span></span><br><span class="line">                    x.red = <span class="literal">false</span>;</span><br><span class="line">                  <span class="comment">//将当前节点设置为根节点，根节点重新赋值</span></span><br><span class="line">                    root = x;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果根节点现在不为空则当前的x节点，非根节点</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">//当前节点x的键进行赋值给k</span></span><br><span class="line">                  <span class="comment">//获取当前循环节点x的Key</span></span><br><span class="line">                    K k = x.key;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//得到当前该节点x的hash进行赋值给h</span></span><br><span class="line">                    <span class="comment">//获取当前节点x的Hash</span></span><br><span class="line">                    <span class="built_in">int</span> h = x.hash;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//定义key所属于的class</span></span><br><span class="line">                    Class&lt;?&gt; kc = null;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//这里循环遍历，进行二叉搜索树的插入</span></span><br><span class="line">                    <span class="comment">//从根节点开始验证</span></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                    循环这个红黑树，从根节点开始，也就是从上到下进行遍历</span></span><br><span class="line"><span class="comment">                    外层循环树节点也就相当于是Entry[]循环，内部是新建的，</span></span><br><span class="line"><span class="comment">                    外层循环到的当前该节点x也就相当于Entry,与构建的红黑树当中的根节点是否为空进行比较，</span></span><br><span class="line"><span class="comment">                    如果根节点不为空则说明当前遍历的x节点为非根节点，也就是左节点或者右节点，子节点</span></span><br><span class="line"><span class="comment">                    如果根节点为空则使之当前循环遍历到的x节点为根节点</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    for (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                        p指向遍历中的当前节点，</span></span><br><span class="line"><span class="comment">                        x为待插入节点，</span></span><br><span class="line"><span class="comment">                        k是x的key，</span></span><br><span class="line"><span class="comment">                        h是x的hash值，</span></span><br><span class="line"><span class="comment">                        ph是p的hash值，</span></span><br><span class="line"><span class="comment">                        dir用来指示x节点与p的比较，</span></span><br><span class="line"><span class="comment">                        -1表示比p小，</span></span><br><span class="line"><span class="comment">                        1表示比p大，</span></span><br><span class="line"><span class="comment">                        不存在相等情况，</span></span><br><span class="line"><span class="comment">                        因为HashMap中是不存在两个key完全一致的情况。</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                        <span class="built_in">int</span> dir, ph;</span><br><span class="line">                        K pk = p.key;<span class="comment">//每一个节点的key</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                        每个节点的hash与外层的x.hash作比较</span></span><br><span class="line"><span class="comment">                        这里做了一个赋值的操作，即当前内部循环当中循环的节点p的hash赋值给了ph;</span></span><br><span class="line"><span class="comment">                        如果当前内部循环的字节点的hash大于外层循环当中x的hash值时，则进行判断其hash大小，</span></span><br><span class="line"><span class="comment">                        通过判断hash大小，</span></span><br><span class="line"><span class="comment">                        从而可以知道节点大致位置，比如在左边还是右边</span></span><br><span class="line"><span class="comment">                        因为(n-1) &amp; hash得到index下标位置</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                        dir用来指示x节点与当前内部的p节点的比较，</span></span><br><span class="line"><span class="comment">                        如果dir小于0，沿左路径查找；</span></span><br><span class="line"><span class="comment">                        二叉查找树特征即为：任意节点大于左节点值，小于右节点值；</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                            dir = -<span class="number">1</span>;</span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                        如果dir大于0，则沿右路径查找</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                            dir = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                        如果hash值相等，</span></span><br><span class="line"><span class="comment">                        那么判断k是否实现了comparable接口，</span></span><br><span class="line"><span class="comment">                        如果实现了comparable接口就使用compareTo进行进行比较，</span></span><br><span class="line"><span class="comment">                        如果仍旧相等或者没有实现comparable接口，则在tieBreakOrder中比较</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> ((kc<span class="operator"> == </span>null &amp;&amp;</span><br><span class="line">                                  (kc = comparable<span class="constructor">ClassFor(<span class="params">k</span>)</span>)<span class="operator"> == </span>null) <span class="pattern-match"><span class="operator">||</span></span></span><br><span class="line"><span class="pattern-match">                                 (dir = compare<span class="constructor">Comparables(<span class="params">kc</span>, <span class="params">k</span>, <span class="params">pk</span>)</span>) <span class="operator">==</span> 0)</span></span><br><span class="line"><span class="pattern-match">                            dir = tie<span class="constructor">BreakOrder(<span class="params">k</span>, <span class="params">pk</span>)</span>;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">                        <span class="operator">/</span><span class="operator">/</span>xp节点为内部循环遍历的节点p</span></span><br><span class="line"><span class="pattern-match">                        <span class="operator">/</span><span class="operator">/</span>p设置为x的父节点 xp</span></span><br><span class="line"><span class="pattern-match">                        <span class="constructor">TreeNode</span>&lt;<span class="constructor">K</span>,<span class="constructor">V</span>&gt; xp = p;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">                        <span class="operator">/</span><span class="operator">**</span></span></span><br><span class="line"><span class="pattern-match">                        dir默认为0；</span></span><br><span class="line"><span class="pattern-match">                        所以此处如果dir小于等于0即定义为向左</span></span><br><span class="line"><span class="pattern-match">                        沿左路径查找;</span></span><br><span class="line"><span class="pattern-match">                        如果dir小于等于0取值为内部循环节点p的左节点否则为右节点;</span></span><br><span class="line"><span class="pattern-match">                        对获取得到的该节点进行判空;</span></span><br><span class="line"><span class="pattern-match">                        内部循环也是从上往下循环节点的；</span></span><br><span class="line"><span class="pattern-match">                        所以如果当前内部循环的p节点的左节点或者右节点为空，即进行插入操作</span></span><br><span class="line"><span class="pattern-match">                        <span class="operator">*</span><span class="operator">/</span></span></span><br><span class="line"><span class="pattern-match">                        <span class="keyword">if</span> ((p = (dir &lt;= 0) ? p.left : p.right) <span class="operator">==</span> null) &#123;</span></span><br><span class="line"><span class="pattern-match">                          <span class="operator">/</span><span class="operator">/</span>将xp设置为x的父节点</span></span><br><span class="line"><span class="pattern-match">                            x.parent = xp;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">                            <span class="keyword">if</span> (dir &lt;= 0)</span></span><br><span class="line"><span class="pattern-match">                                xp.left = x;</span></span><br><span class="line"><span class="pattern-match">                            <span class="keyword">else</span></span></span><br><span class="line"><span class="pattern-match">                                xp.right = x;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">　　　　　　　　　　　　　　　　 <span class="operator">/</span><span class="operator">/</span>进行插入平衡处理</span></span><br><span class="line"><span class="pattern-match">                              <span class="operator">/</span><span class="operator">/</span>将二叉树转换为红黑树-正式转换红黑树</span></span><br><span class="line"><span class="pattern-match">                            root = balance<span class="constructor">Insertion(<span class="params">root</span>, <span class="params">x</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">                            break;</span></span><br><span class="line"><span class="pattern-match">                        &#125;</span></span><br><span class="line"><span class="pattern-match">                    &#125;</span></span><br><span class="line"><span class="pattern-match">                &#125;</span></span><br><span class="line"><span class="pattern-match">            &#125;</span></span><br><span class="line"><span class="pattern-match">　　　　　　　<span class="operator">/</span><span class="operator">/</span>确保给定节点是桶中的第一个元素</span></span><br><span class="line"><span class="pattern-match">            move<span class="constructor">RootToFront(<span class="params">tab</span>, <span class="params">root</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">        &#125;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">     <span class="operator">/</span><span class="operator">/</span>这里不是为了整体排序，而是为了在插入中保持一致的顺序</span></span><br><span class="line"><span class="pattern-match">     static <span class="built_in">int</span> tie<span class="constructor">BreakOrder(Object <span class="params">a</span>, Object <span class="params">b</span>)</span> &#123;</span></span><br><span class="line"><span class="pattern-match">            <span class="built_in">int</span> d;</span></span><br><span class="line"><span class="pattern-match">            <span class="operator">/</span><span class="operator">/</span>用两者的类名进行比较，如果相同则使用对象默认的hashcode进行比较</span></span><br><span class="line"><span class="pattern-match">            <span class="keyword">if</span> (a <span class="operator">==</span> null <span class="operator">||</span> b <span class="operator">==</span> null <span class="operator">||</span></span></span><br><span class="line"><span class="pattern-match">                (d = a.get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span>.</span></span><br><span class="line"><span class="pattern-match">                 compare<span class="constructor">To(<span class="params">b</span>.<span class="params">getClass</span>()</span>.get<span class="constructor">Name()</span>)) <span class="operator">==</span> 0)</span></span><br><span class="line"><span class="pattern-match">                d = (<span class="constructor">System</span>.identity<span class="constructor">HashCode(<span class="params">a</span>)</span> &lt;= <span class="constructor">System</span>.identity<span class="constructor">HashCode(<span class="params">b</span>)</span> ?</span></span><br><span class="line"><span class="pattern-match">                     -1 : 1);</span></span><br><span class="line"><span class="pattern-match">            return d;</span></span><br><span class="line"><span class="pattern-match">        &#125;</span></span><br></pre></td></tr></table></figure>

<p>这里的逻辑其实并不复杂，仅仅是循环遍历当前树，然后找到可以该节点可以插入的位置，依次和遍历节点比较，比他大则跟其右孩子比较，小则与其左孩子比较，依次遍历，直到找到左孩子或者右孩子为null的位置进行插入。  </p>
<p>真正复杂一点的地方在于balanceInsertion函数，这个函数，后欧诺个黑叔进行插入平衡处理，保证插入节点后仍保持红黑树性质。  </p>
<p>这个函数稍后在TreeNode的插入中进行介绍，这里先看moveRootToFront,这个函数是将root节点移动到同种的第一个元素，也就是链表的首节点，这样做是因为在判断同种元素类型的时候会对链表进行遍历，将根节点移动到链表前端可以确保类型判断时不会出现错误。</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 把给定节点设为桶中的第一个元素</span><br><span class="line"> */        </span><br><span class="line">    static &lt;K,V&gt; void moveRootToFront(Node&lt;K,V&gt;[] tab, TreeNode&lt;K,V&gt; root) &#123;</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果根节点不为空以及树节点数组不为空以及树节点数组长度大于0</span></span><br><span class="line">            if (root != <span class="built_in">null</span> &amp;&amp; tab != <span class="built_in">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//得到该根节点在该树节点数组当中的位置下标index</span></span><br><span class="line">                <span class="type">int</span> index = (n - <span class="number">1</span>) &amp; root.hash;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//first指向链表第一个节点</span></span><br><span class="line">                TreeNode&lt;K,V&gt; <span class="built_in">first</span> = (TreeNode&lt;K,V&gt;)tab[index];</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断如果根节点与index查找出来的根节点不一致则</span></span><br><span class="line">                if (root != <span class="built_in">first</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果root不是第一个节点，则将root放到第一个首节点位置</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//定义next节点应该是</span></span><br><span class="line">                    Node&lt;K,V&gt; rn;</span><br><span class="line"></span><br><span class="line">                  <span class="comment">//对index位置的节点，树节点数组进行重新赋值为指定的根节点</span></span><br><span class="line">                    tab[index] = root;</span><br><span class="line"></span><br><span class="line">                  <span class="comment">//root节点的上一个节点进行赋值给rp</span></span><br><span class="line">                    TreeNode&lt;K,V&gt; rp = root.<span class="built_in">prev</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//对rn进行重新赋值为根节点的下一节点，判空</span></span><br><span class="line">                    if ((rn = root.<span class="built_in">next</span>) != <span class="built_in">null</span>)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)rn).<span class="built_in">prev</span> = rp;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//对rp进行判空，即根节点的上一节点判空</span></span><br><span class="line">                    if (rp != <span class="built_in">null</span>)</span><br><span class="line">                        rp.<span class="built_in">next</span> = rn;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line">                    if (<span class="built_in">first</span> != <span class="built_in">null</span>)</span><br><span class="line">                        <span class="built_in">first</span>.<span class="built_in">prev</span> = root;</span><br><span class="line">                    root.<span class="built_in">next</span> = <span class="built_in">first</span>;</span><br><span class="line">                    root.<span class="built_in">prev</span> = <span class="built_in">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//这里是防御性编程，校验更改后的结构是否满足红黑树和双链表的特性</span></span><br><span class="line">                <span class="comment">//因为HashMap并没有做并发安全处理，可能在并发场景中意外破坏了结构</span></span><br><span class="line">                assert checkInvariants(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="红黑树的左旋和右旋"><a href="#红黑树的左旋和右旋" class="headerlink" title="红黑树的左旋和右旋"></a>红黑树的左旋和右旋</h3><blockquote>
<p>左旋和右旋，顾名思义，就是将节点以某个节点向左或者向右进行旋转操作以保持二叉树的平衡</p>
</blockquote>
<h3 id="二叉树的左旋"><a href="#二叉树的左旋" class="headerlink" title="二叉树的左旋"></a>二叉树的左旋</h3><p>左旋：相当于以要旋转的节点为中心，将子树整体向左旋转，该节点变成子树的根节点，原来的父节点A变成了左孩子，如果右孩子C有左孩子D，则将其便成为A的右孩子  </p>
<p>当节点A向左旋转之后，C的左孩子D可以理解为因为重力问题掉到A的右孩子的位置。  </p>
<p> <img src="https://images2018.cnblogs.com/blog/1043143/201807/1043143-20180717135149338-1921395779.png" alt="image"></p>
<h3 id="二叉树的右旋"><a href="#二叉树的右旋" class="headerlink" title="二叉树的右旋"></a>二叉树的右旋</h3><p> <img src="https://images2018.cnblogs.com/blog/1043143/201807/1043143-20180717135200454-1697647783.png" alt="image"></p>
<h3 id="TreeNode的左旋和右旋"><a href="#TreeNode的左旋和右旋" class="headerlink" title="TreeNode的左旋和右旋"></a>TreeNode的左旋和右旋</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 左旋</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; rotateLeft(TreeNode&lt;K,V&gt; root,</span><br><span class="line">                                              TreeNode&lt;K,V&gt; p) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">            这里的p即上图的A节点，</span></span><br><span class="line"><span class="comment">            r指向右孩子即C，</span></span><br><span class="line"><span class="comment">            rl指向右孩子的左孩子即D，</span></span><br><span class="line"><span class="comment">            pp为p的父节点</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断A节点是否为空以及A的右节点C节点r是否不为空,满足判断即左旋</span></span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (r = p.right) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">              <span class="comment">/**</span></span><br><span class="line"><span class="comment">              如果A的右节点C，</span></span><br><span class="line"><span class="comment">              C的左节点D赋值给A节点的右节点；</span></span><br><span class="line"><span class="comment">              且将A节点的右节点赋值给r1树节点</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">                <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//将D的父节点重新赋值为A节点</span></span><br><span class="line">                    rl.<span class="keyword">parent</span> = p;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将p的父节点的孩子节点指向r</span></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                A的父节点重新赋值给，A节点的右节点即C节点</span></span><br><span class="line"><span class="comment">                C节点的父节点重新赋值给pp节点，进行判空</span></span><br><span class="line"><span class="comment">                如果为空则C节点重新赋值给root根节点指向，</span></span><br><span class="line"><span class="comment">                将从C节点的是否标红改为false，即根节点的颜色都是黑色的</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">if</span> ((pp = r.<span class="keyword">parent</span> = p.<span class="keyword">parent</span>) == <span class="keyword">null</span>)</span><br><span class="line">                    (root = r).red = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                如果A的父节点赋值给C的父节点，C的父节点赋值给pp节点</span></span><br><span class="line"><span class="comment">                如果pp节点的左节点为为A节点；</span></span><br><span class="line"><span class="comment">                则pp节点的左节点进行重新赋值为C节点</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">                    pp.left = r;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                最后如果不满足以上条件则进入else判断</span></span><br><span class="line"><span class="comment">                A节点的父节点C节点的父节点pp节点的右节点改为C节点</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.right = r;</span><br><span class="line">                <span class="comment">//将p置为r的左节点</span></span><br><span class="line">                r.left = p;</span><br><span class="line">                p.<span class="keyword">parent</span> = r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 右旋</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; rotateRight(TreeNode&lt;K,V&gt; root,</span><br><span class="line">                                               TreeNode&lt;K,V&gt; p) &#123;</span><br><span class="line">             <span class="comment">//这里的p即上图的A节点，l指向左孩子即C，lr指向左孩子的右孩子即E，pp为p的父节点</span></span><br><span class="line">            TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (l = p.left) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="keyword">null</span>)</span><br><span class="line">                    lr.<span class="keyword">parent</span> = p;</span><br><span class="line">                <span class="keyword">if</span> ((pp = l.<span class="keyword">parent</span> = p.<span class="keyword">parent</span>) == <span class="keyword">null</span>)</span><br><span class="line">                    (root = l).red = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">                    pp.right = l;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.left = l;</span><br><span class="line">                l.right = p;</span><br><span class="line">                p.<span class="keyword">parent</span> = l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="红黑树的插入"><a href="#红黑树的插入" class="headerlink" title="红黑树的插入"></a>红黑树的插入</h3><p>红黑树的插入，首先找到这个节点要插入的位置。<br>即一层一层比较，大的放右边，小的放左边，直到找到为null的节点放入即可。<br>可是如何在插入的过程中保持红黑树的特性呢，其实又这么几种情况：</p>
<ol>
<li>插入的为根节点，则直接把颜色改成黑色即可。</li>
<li>插入的节点的父节点是黑色节点，则不需要调整，因为插入的节点会初始化为红色节点，红色节点是不会影响树的平衡的。</li>
<li>插入的节点的祖父节点为null，即插入的节点的父节点是根节点，直接插入即可（因为根节点肯定是黑色）。</li>
<li>插入的节点父节点和祖父节点都存在，并且其父节点是祖父节点的左节点。这种情况稍微麻烦一点，又分两种子情况：</li>
</ol>
<ul>
<li>插入节点的叔叔节点是红色，则将父亲节点和叔叔节点都改成黑色，然后祖父节点改成红色即可。</li>
<li>插入节点的叔叔节点是黑色或不存在：<ul>
<li>若插入节点是其父节点的孩子，则将其父节点左旋</li>
<li>若为左孩子，则将其父节点变成黑色节点，将其祖父节点变成红色节点，然后将其祖父节点右旋。</li>
</ul>
</li>
</ul>
<ol start="5">
<li>插入的节点父节点和祖父节点都存在，并且其父节点是祖父节点的右节点。这种情况跟上面是类似的，分两种子情况：</li>
</ol>
<ul>
<li>插入节点的叔叔节点是红色，则将父亲节点和叔叔节点都改成黑色，然后祖父节点改成红色即可。</li>
<li>插入节点的叔叔节点是黑色或不存在：<ul>
<li>若插入节点是其父节点的左孩子，则将其父节点右旋。</li>
<li>若为右孩子，则将其父节点变成黑色节点，将其祖父节点变成红色节点，然后将其祖父节点左旋。</li>
</ul>
</li>
</ul>
<p>然后重复进行上述操作，直到变成1或2的情况时则结束变换。<br>构建一棵红黑树，假设插入的顺序为：10,5,9,3,6,7,19,32,24,17</p>
<p>先来插个10，为情境1，直接改成黑色即可；<br>再插入5，为情境2，比10小，放到10的左孩子位置；<br>插入9，比10小，但是比5大，放到5的右孩子位置，此时为情境4iia，左旋后变成了情境4iib，变色右旋即可完成转化；<br>插入3后为情境4i，将父节点和叔叔节点同时变色即可；<br>插入6不需要调整；<br>插入7后变为情境5i，变色即可。<br>插入19不需要调整；<br>插入32，变成了5iib，左旋变色即可；<br>插入24，变成5iia，右旋变成5i，变色即可；<br>最后插入17，完美</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">static &lt;K,V&gt; TreeNode&lt;K,V&gt; balanceInsertion(TreeNode&lt;K,V&gt; root,</span><br><span class="line">                                                    TreeNode&lt;K,V&gt; x) &#123;</span><br><span class="line">            x.<span class="attr">red</span> = <span class="literal">true</span>;</span><br><span class="line">            for (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">                //情景<span class="number">1</span>：父节点为<span class="literal">null</span></span><br><span class="line">                <span class="keyword">if</span> ((<span class="attr">xp</span> = x.parent) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    x.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                    return x;</span><br><span class="line">                &#125;</span><br><span class="line">　　　　　　　　　 //情景<span class="number">2</span>，<span class="number">3</span>：父节点是黑色节点或者祖父节点为<span class="literal">null</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (<span class="attr">xpp</span> = xp.parent) == <span class="literal">null</span>)</span><br><span class="line">                    return root;</span><br><span class="line">　　　　　　　　　　//情景<span class="number">4</span>：插入的节点父节点和祖父节点都存在，并且其父节点是祖父节点的左节点</span><br><span class="line">                <span class="keyword">if</span> (<span class="attr">xp</span> == (<span class="attr">xppl</span> = xpp.left)) &#123;</span><br><span class="line">　　　　　　　　　　　　//情景<span class="number">4</span>i：插入节点的叔叔节点是红色</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="attr">xppr</span> = xpp.right) != <span class="literal">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                        xppr.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                        xp.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                        xpp.<span class="attr">red</span> = <span class="literal">true</span>;</span><br><span class="line">                        <span class="attr">x</span> = xpp;</span><br><span class="line">                    &#125;</span><br><span class="line">　　　　　　　　　　　　//情景<span class="number">4</span>ii：插入节点的叔叔节点是黑色或不存在</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　　　　　　　　　　　//情景<span class="number">4</span>iia：插入节点是其父节点的右孩子</span><br><span class="line">                        <span class="keyword">if</span> (<span class="attr">x</span> == xp.right) &#123;</span><br><span class="line">                            <span class="attr">root</span> = rotateLeft(root, <span class="attr">x</span> = xp);</span><br><span class="line">                            <span class="attr">xpp</span> = (<span class="attr">xp</span> = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.parent;</span><br><span class="line">                        &#125;</span><br><span class="line">　　　　　　　　　　　　　　//情景<span class="number">4</span>iib：插入节点是其父节点的左孩子</span><br><span class="line">                        <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                            xp.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">if</span> (xpp != <span class="literal">null</span>) &#123;</span><br><span class="line">                                xpp.<span class="attr">red</span> = <span class="literal">true</span>;</span><br><span class="line">                                <span class="attr">root</span> = rotateRight(root, xpp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">　　　　　　　　　 //情景<span class="number">5</span>：插入的节点父节点和祖父节点都存在，并且其父节点是祖父节点的右节点</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　　　　　　　　　//情景<span class="number">5</span>i：插入节点的叔叔节点是红色</span><br><span class="line">                    <span class="keyword">if</span> (xppl != <span class="literal">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                        xppl.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                        xp.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                        xpp.<span class="attr">red</span> = <span class="literal">true</span>;</span><br><span class="line">                        <span class="attr">x</span> = xpp;</span><br><span class="line">                    &#125;</span><br><span class="line">　　　　　　　　　　　　//情景<span class="number">5</span>ii：插入节点的叔叔节点是黑色或不存在</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">·　　　　　　　　　　　　　　//情景<span class="number">5</span>iia：插入节点是其父节点的左孩子　</span><br><span class="line">                        <span class="keyword">if</span> (<span class="attr">x</span> == xp.left) &#123;</span><br><span class="line">                            <span class="attr">root</span> = rotateRight(root, <span class="attr">x</span> = xp);</span><br><span class="line">                            <span class="attr">xpp</span> = (<span class="attr">xp</span> = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.parent;</span><br><span class="line">                        &#125;</span><br><span class="line">　　　　　　　　　　　　　　//情景<span class="number">5</span>iib：插入节点是其父节点的右孩子</span><br><span class="line">                        <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                            xp.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">if</span> (xpp != <span class="literal">null</span>) &#123;</span><br><span class="line">                                xpp.<span class="attr">red</span> = <span class="literal">true</span>;</span><br><span class="line">                                <span class="attr">root</span> = rotateLeft(root, xpp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="红黑树的删除"><a href="#红黑树的删除" class="headerlink" title="红黑树的删除"></a>红黑树的删除</h3><p>红黑树是一颗特殊的二叉搜索树，所以进行删除操作时，其实是先进行二叉搜索树的删除，然后再进行整理。  </p>
<p>所以，其实这里分为两部分内容：</p>
<ul>
<li>二叉搜索树的删除</li>
<li>红黑树的删除调整</li>
</ul>
<p>二叉搜索树的删除主要有这么几种情境：<br>情境一：待删除的节点五左右孩子；<br>情景二：待删除的节点只有左孩子或者右孩子；<br>情境三：待删除的节点既有左孩子又有右孩子；</p>
<p>对于情景一，直接删除即可；<br>情景二，则直接把该节点的父节点指向他的左孩子或者右孩子即可；<br>情境三稍微复杂一点，需要先找到其右子树的最左孩子(或者左子树的最右孩子)，即左（右）子树中序遍历时的第一个节点，然后将其与待删除的节点互换，最后再删除该节点（如果有右子树，则右子树上位）。<br>总之，就是先找到他的替代者，找到之后替换这个要删除的节点，然后再把这个节点真正删除掉。  </p>
<p>其实二叉搜索树的删除总体来说还是比较简单的。<br>删除完之后，如果替代者是红色节点，则不需要调整；<br>如果是黑色节点，则会导致左子树和右子树路径中黑色节点数量不一致，需要进行红黑树的调整；<br>跟上面一样，替代节点为其父节点的左孩子与右孩子的情况类似，所以这里直说其为左孩子的情景（PS：上一步的寻找替换节点使用的是右子树的最左节点，所以该节点如果右孩子，只能是右孩子）；  </p>
<p>情景一：只有右孩子且为红色，直接用右孩子替换该节点然后变成黑色即可。  </p>
<p>（D代表替代节点，即要被删除的节点，之前在经过二叉搜索树的删除之后，D节点其实已经被删除了，这里为了方便理解这个变化过程，所以把这个节点也画出来了，所以当初的初始状态是待删除节点与其替换节点互换位置与颜色字后的状态）  </p>
<p>情景二：只有右孩子且为黑色，那么删除该节点会导致父节点的左子树路径上黑色节点减一，此时只能去借助右子树，从右子树中借一个红色节点过来即可，具体取决于右子树的情况，这里又要分成两种情况：  </p>
<ul>
<li><p>兄弟节点是红色，则此时父节点是黑色，且兄弟节点肯定有两个孩子，且兄弟节点的左右子树路径上均有两个黑色节点，此时只需将兄弟节点与父节点颜色互换，然后将父节点左旋，左旋后，兄弟节点的左子树SL挂到了父节点p的右孩子位置，这时会导致p的右子树路径上的黑色节点比左子树多一，此时再SL置为红色即可。  </p>
</li>
<li><p>兄弟节点是黑色，那么就只能打他孩子的主意了。这里主要关注远侄子（兄弟节点的右孩子，即SR）的颜色情况，这里分成两种情况：</p>
<ul>
<li>远侄子SR是黑色，近侄子任意（白色代表颜色可以为任意颜色），现将S转为红色，然后右旋，再将SL换成P节点颜色，P土城黑色，S也涂成黑色，在进行左旋即可。<br>其实简单说就是SL上位，替换父节点位置。  </li>
<li>远侄子SR为红色，近侄子（该子树路径中有且有仅有一个黑色节点），则现将兄弟节点与父节点颜色互换，将SR涂成黑色，再将父节点左旋即可。  </li>
</ul>
</li>
</ul>
<h3 id="TreeNode的删除节点"><a href="#TreeNode的删除节点" class="headerlink" title="TreeNode的删除节点"></a>TreeNode的删除节点</h3><p>TreeNode删除节点其实也是两步走：  </p>
<ol>
<li>先进性二叉搜索树的删除，然后再进行红黑树的调整，跟之前的情况分析是一致的。  </li>
</ol>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">final void removeTreeNode(HashMap&lt;K,V&gt; <span class="built_in">map</span>, Node&lt;K,V&gt;[] tab, boolean movable) &#123;</span><br><span class="line"></span><br><span class="line">     ......</span><br><span class="line"></span><br><span class="line">     //p是待删除节点，replacement用于后续的红黑树调整，指向的是p或者p的继承者。</span><br><span class="line">     //如果p是叶子节点，<span class="attr">p==replacement，否则replacement为p的右子树中最左节点</span></span><br><span class="line">     <span class="keyword">if</span> (replacement != p) &#123;</span><br><span class="line">        //若p不是叶子节点，则让replacement的父节点指向p的父节点</span><br><span class="line">        TreeNode&lt;K,V&gt; <span class="attr">pp</span> = replacement.<span class="attr">parent</span> = p.parent;</span><br><span class="line">        <span class="keyword">if</span> (<span class="attr">pp</span> == <span class="literal">null</span>)</span><br><span class="line">            <span class="attr">root</span> = replacement;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="attr">p</span> == pp.left)</span><br><span class="line">            pp.<span class="attr">left</span> = replacement;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.<span class="attr">right</span> = replacement;</span><br><span class="line">        p.<span class="attr">left</span> = p.<span class="attr">right</span> = p.<span class="attr">parent</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //若待删除的节点p时红色的，则树平衡未被破坏，无需进行调整。</span><br><span class="line">    //否则删除节点后需要进行调整</span><br><span class="line">    TreeNode&lt;K,V&gt; <span class="attr">r</span> = p.red ? root : balanceDeletion(root, replacement);</span><br><span class="line"></span><br><span class="line">    //p为叶子节点，则直接将p从树中清除</span><br><span class="line">    <span class="keyword">if</span> (<span class="attr">replacement</span> == p) &#123;  // detach</span><br><span class="line">        TreeNode&lt;K,V&gt; <span class="attr">pp</span> = p.parent;</span><br><span class="line">        p.<span class="attr">parent</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (pp != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="attr">p</span> == pp.left)</span><br><span class="line">                pp.<span class="attr">left</span> = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="attr">p</span> == pp.right)</span><br><span class="line">                pp.<span class="attr">right</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>麻烦的地方就在删除节点后的调整了，所有逻辑都在balanceDeletion函数里，两个参数分别表示根节点和删除节点的继承者，具体实现如下：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">static &lt;K,V&gt; TreeNode&lt;K,V&gt; balanceDeletion(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; x) &#123;</span><br><span class="line">    for (TreeNode&lt;K,V&gt; xp, xpl, xpr;;)  &#123;</span><br><span class="line">        //x为空或x为根节点，直接返回</span><br><span class="line">        <span class="keyword">if</span> (<span class="attr">x</span> == <span class="literal">null</span> || <span class="attr">x</span> == root)</span><br><span class="line">            return root; </span><br><span class="line">        //x为根节点，染成黑色，直接返回（因为调整过后，root并不一定指向删除操作过后的根节点，如果之前删除的是root节点，则x将成为新的根节点）</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="attr">xp</span> = x.parent) == <span class="literal">null</span>) &#123;</span><br><span class="line">            x.<span class="attr">red</span> = <span class="literal">false</span>; </span><br><span class="line">            return x;</span><br><span class="line">        &#125;</span><br><span class="line">        //如果x为红色，则无需调整，返回</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x.red) &#123;</span><br><span class="line">            x.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">            return root; </span><br><span class="line">        &#125;</span><br><span class="line">        //x为其父节点的左孩子</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="attr">xpl</span> = xp.left) == x) &#123;</span><br><span class="line">            //如果它有红色的兄弟节点xpr，那么它的父亲节点xp一定是黑色节点</span><br><span class="line">            <span class="keyword">if</span> ((<span class="attr">xpr</span> = xp.right) != <span class="literal">null</span> &amp;&amp; xpr.red) &#123; </span><br><span class="line">                xpr.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                xp.<span class="attr">red</span> = <span class="literal">true</span>; </span><br><span class="line">                //对父节点xp做左旋转</span><br><span class="line">                <span class="attr">root</span> = rotateLeft(root, xp); </span><br><span class="line">                //重新将xp指向x的父节点，xpr指向xp新的右孩子</span><br><span class="line">                <span class="attr">xpr</span> = (<span class="attr">xp</span> = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.right; </span><br><span class="line">            &#125;</span><br><span class="line">            //如果xpr为空，则向上继续调整，将x的父节点xp作为新的x继续循环</span><br><span class="line">            <span class="keyword">if</span> (<span class="attr">xpr</span> == <span class="literal">null</span>)</span><br><span class="line">                <span class="attr">x</span> = xp; </span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                //sl和sr分别为其近侄子和远侄子</span><br><span class="line">                TreeNode&lt;K,V&gt; <span class="attr">sl</span> = xpr.left, <span class="attr">sr</span> = xpr.right;</span><br><span class="line">　　　　　　　　　　　　</span><br><span class="line">                <span class="keyword">if</span> ((<span class="attr">sr</span> == <span class="literal">null</span> || !sr.red) &amp;&amp;</span><br><span class="line">                    (<span class="attr">sl</span> == <span class="literal">null</span> || !sl.red)) &#123;</span><br><span class="line">                    xpr.<span class="attr">red</span> = <span class="literal">true</span>; //若sl和sr都为黑色或者不存在，即xpr没有红色孩子，则将xpr染红</span><br><span class="line">                    <span class="attr">x</span> = xp; //本轮结束，继续向上循环</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    //否则的话，就需要进一步调整</span><br><span class="line">                    <span class="keyword">if</span> (<span class="attr">sr</span> == <span class="literal">null</span> || !sr.red) &#123; </span><br><span class="line">                        <span class="keyword">if</span> (sl != <span class="literal">null</span>) //若左孩子为红，右孩子不存在或为黑</span><br><span class="line">                            sl.<span class="attr">red</span> = <span class="literal">false</span>; //左孩子染黑</span><br><span class="line">                        xpr.<span class="attr">red</span> = <span class="literal">true</span>; //将xpr染红</span><br><span class="line">                        <span class="attr">root</span> = rotateRight(root, xpr); //右旋</span><br><span class="line">                        <span class="attr">xpr</span> = (<span class="attr">xp</span> = x.parent) == <span class="literal">null</span> ?</span><br><span class="line">                            <span class="literal">null</span> : xp.right;  //右旋后，xpr指向xp的新右孩子，即上一步中的sl</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpr != <span class="literal">null</span>) &#123;</span><br><span class="line">                        xpr.<span class="attr">red</span> = (<span class="attr">xp</span> == <span class="literal">null</span>) ? <span class="literal">false</span> : xp.red; //xpr染成跟父节点一致的颜色，为后面父节点xp的左旋做准备</span><br><span class="line">                        <span class="keyword">if</span> ((<span class="attr">sr</span> = xpr.right) != <span class="literal">null</span>)</span><br><span class="line">                            sr.<span class="attr">red</span> = <span class="literal">false</span>; //xpr新的右孩子染黑，防止出现两个红色相连</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                        xp.<span class="attr">red</span> = <span class="literal">false</span>; //将xp染黑，并对其左旋，这样就能保证被删除的X所在的路径又多了一个黑色节点，从而达到恢复平衡的目的</span><br><span class="line">                        <span class="attr">root</span> = rotateLeft(root, xp);</span><br><span class="line">                    &#125;</span><br><span class="line">                    //到此调整已经完毕，进入下一次循环后将直接退出</span><br><span class="line">                    <span class="attr">x</span> = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //x为其父节点的右孩子，跟上面类似</span><br><span class="line">        <span class="keyword">else</span> &#123; // symmetric</span><br><span class="line">            <span class="keyword">if</span> (xpl != <span class="literal">null</span> &amp;&amp; xpl.red) &#123;</span><br><span class="line">                xpl.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                xp.<span class="attr">red</span> = <span class="literal">true</span>;</span><br><span class="line">                <span class="attr">root</span> = rotateRight(root, xp);</span><br><span class="line">                <span class="attr">xpl</span> = (<span class="attr">xp</span> = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="attr">xpl</span> == <span class="literal">null</span>)</span><br><span class="line">                <span class="attr">x</span> = xp;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; <span class="attr">sl</span> = xpl.left, <span class="attr">sr</span> = xpl.right;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="attr">sl</span> == <span class="literal">null</span> || !sl.red) &amp;&amp;</span><br><span class="line">                    (<span class="attr">sr</span> == <span class="literal">null</span> || !sr.red)) &#123;</span><br><span class="line">                    xpl.<span class="attr">red</span> = <span class="literal">true</span>;</span><br><span class="line">                    <span class="attr">x</span> = xp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="attr">sl</span> == <span class="literal">null</span> || !sl.red) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (sr != <span class="literal">null</span>)</span><br><span class="line">                            sr.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                        xpl.<span class="attr">red</span> = <span class="literal">true</span>;</span><br><span class="line">                        <span class="attr">root</span> = rotateLeft(root, xpl);</span><br><span class="line">                        <span class="attr">xpl</span> = (<span class="attr">xp</span> = x.parent) == <span class="literal">null</span> ?</span><br><span class="line">                            <span class="literal">null</span> : xp.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpl != <span class="literal">null</span>) &#123;</span><br><span class="line">                        xpl.<span class="attr">red</span> = (<span class="attr">xp</span> == <span class="literal">null</span>) ? <span class="literal">false</span> : xp.red;</span><br><span class="line">                        <span class="keyword">if</span> ((<span class="attr">sl</span> = xpl.left) != <span class="literal">null</span>)</span><br><span class="line">                            sl.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                        xp.<span class="attr">red</span> = <span class="literal">false</span>;</span><br><span class="line">                        <span class="attr">root</span> = rotateRight(root, xp);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="attr">x</span> = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://r.photo.store.qq.com/psc?/V11rBmNJ3kviLN/hsnfJ.a5yg7.BhItQyNwPS8WgpyOY*TnhQ6ra5OBonOaSJRRjYa.EwaeDcHd5u0Z2wMIczAx0nk6IHzpV2SuW5ZkbqYqWpEyQuGfndQv*mU!/r" alt="image"></p>
<p><img src="https://r.photo.store.qq.com/psc?/V11rBmNJ3kviLN/hsnfJ.a5yg7.BhItQyNwPZ0TVvbWf.6wlQibDDEU9nwepElsriUycANIyLMCH972q4*18zAQ2JnfajC3UcA3FOOYO1pY.VPGyy9Yhc5qm0U!/r" alt="image"></p>
<p><img src="https://r.photo.store.qq.com/psc?/V11rBmNJ3kviLN/hsnfJ.a5yg7.BhItQyNwPVrsS.2eQykh7ln*jpalRaYOuC840EjilEUf*3l1I4Uj5vN8oKglrkZSTgN9O7NMea.f2q30d9hZwhBgLkZ2pjc!/r" alt="image"></p>
<p><img src="https://r.photo.store.qq.com/psc?/V11rBmNJ3kviLN/hsnfJ.a5yg7.BhItQyNwPaZRzqjFpkGRmkeFlPQdsF3YnWtpVuzAnvhHE3LZZLP.CEPsRNlRt0U.WFtozxfBS3bCEjSVmbIFygRtlzEuDYY!/r" alt="image"></p>
<p><img src="https://r.photo.store.qq.com/psc?/V11rBmNJ3kviLN/hsnfJ.a5yg7.BhItQyNwPXdSPInQ3l8qS*.LcdHVIU3s1Gt6GVBtTa9yvpW2nENYOBAu4lPqx2**2LleuReBcgcvRMJXIU9kfBqvzwfvC1A!/r" alt="image"></p>
<p><img src="https://r.photo.store.qq.com/psc?/V11rBmNJ3kviLN/hsnfJ.a5yg7.BhItQyNwPek1*OE0FbhH1wkxqG3uJo4a90xtMKMRqDZROfloDawycjwz7yjR*VrmgnpyK1.DoWB9aksaXcF2svMMndLJNUU!/r" alt="image"></p>
<p><img src="https://r.photo.store.qq.com/psc?/V11rBmNJ3kviLN/hsnfJ.a5yg7.BhItQyNwPfeCIgjNMUSfKD8lKPVMn13P9lKi7RRo3e8RSqlAT5LwIXSns.TckldPKVuWYuAh17R7wiB9FFZTtwfrabXsmY8!/r" alt="image"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>红黑树</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>一点点复习</title>
    <url>/2020/03/24/%E9%9D%A2%E8%AF%95/%E4%B8%80%E7%82%B9%E7%82%B9%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h2><h2 id="理解常用的设计模式"><a href="#理解常用的设计模式" class="headerlink" title="理解常用的设计模式"></a>理解常用的设计模式</h2><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><h2 id="Jquery"><a href="#Jquery" class="headerlink" title="Jquery"></a>Jquery</h2><h2 id="微服务架构设计原理"><a href="#微服务架构设计原理" class="headerlink" title="微服务架构设计原理"></a>微服务架构设计原理</h2><h2 id="Linux操作系统，shell编程，Linux操作命令"><a href="#Linux操作系统，shell编程，Linux操作命令" class="headerlink" title="Linux操作系统，shell编程，Linux操作命令"></a>Linux操作系统，shell编程，Linux操作命令</h2><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>Redis 是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API的非关系型数据库。  </p>
<p>传统数据库遵循ACID规则。而NoSql(Not Only Sql的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称)一般为分布式，而分布式一般遵循CAP定理。</p>
<h3 id="Redis支持的数据类型"><a href="#Redis支持的数据类型" class="headerlink" title="Redis支持的数据类型"></a>Redis支持的数据类型</h3><ul>
<li>String<ul>
<li>字符串类型</li>
<li>格式：set key value</li>
<li>String 类型是二进制安全的。意思是Redis的String可以包含任何数据。比如jpg图片或者序列化的对象。</li>
<li>String类型是Redis最基本的数据类型。一个键最大能存储512MB。</li>
</ul>
</li>
<li>Hash<ul>
<li>哈希</li>
<li>格式：hmset name key1 value1 key2 value2</li>
<li>Redis Hash 是一个键值（key=&gt;value）对集合</li>
<li>Redis Hash 是一个String类型的field和value的映射表，hash特别适合用于存储对象。</li>
</ul>
</li>
<li>List<ul>
<li>列表</li>
<li>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</li>
<li>格式：lpush name value</li>
<li>在key对应list的头部添加字符串元素</li>
<li>格式：rpush name value</li>
<li>在key对应list的尾部添加字符串元素</li>
<li>格式：lrem name index</li>
<li>key对应list中删除count个和value相同的元素</li>
<li>格式： llen name</li>
<li>返回key对应list的长度</li>
</ul>
</li>
<li>Set<ul>
<li>集合</li>
<li>格式：sadd name value</li>
<li>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1).</li>
</ul>
</li>
<li>Zset<ul>
<li>sorted set:有序集合</li>
<li>格式：zadd name score value</li>
<li>Redis zset和set一样也是String类型元素的集合，且不允许重复的成员</li>
<li>不同的是每个元素都会关联一个double类型的分数。Redis正式通过分数来为集合中的成员从小到大的排序。</li>
<li>zset的成员是唯一的，但是分数（score）却可以重复。</li>
</ul>
</li>
</ul>
<h3 id="什么是Redis持久化，Rredis有哪几种持久化方式，优缺点是什么"><a href="#什么是Redis持久化，Rredis有哪几种持久化方式，优缺点是什么" class="headerlink" title="什么是Redis持久化，Rredis有哪几种持久化方式，优缺点是什么"></a>什么是Redis持久化，Rredis有哪几种持久化方式，优缺点是什么</h3><ul>
<li>持久化就是把内存的数据写到磁盘中去，防止服务宕机内存数据丢失。</li>
<li>Redis提供了两种持久化方式：RDB（默认）和AOF </li>
</ul>
<h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>rdb是Redis DataBase的缩写。<br>核心功能函数rdbSave(生成RDB文件)和rdbLoad（从文件加载内存）两个函数<br>内存中的数据对象—–rdbSave—–&gt;磁盘中的RDB文件<br>内存中的数据对象&lt;—-rdbLoad——磁盘中的RDB文件  </p>
<h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>Aof是Append-only file缩写<br>服务端——–flush Append Only File——-&gt;磁盘中的AOF文件</p>
<p>每当执行服务器（定时）任务或者函数时flushAppendOnlyFile函数都会被调用，这个函数执行以下两个工作  </p>
<p>aof写入保存：<br>WRITE: 根据条件，将aof_buf中的缓存写入到AOF文件<br>SAVE：根据条件，调用fsync或者fdatasync函数，将AOF文件保存到磁盘中。</p>
<h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>内容是Redis通讯协议（RESP）格式的命令文本存储</p>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol>
<li>aof文件比rdb更新频率高，有限使用aof还原数据。</li>
<li>aof比rdb更安全也更大</li>
<li>rdb性能比aof好</li>
<li>如果两个都进行了配置优先加载AOF</li>
</ol>
<h3 id="其实上面你有提到Redis通讯协议（RESP），能解释下什么是RESP-有什么特点"><a href="#其实上面你有提到Redis通讯协议（RESP），能解释下什么是RESP-有什么特点" class="headerlink" title="其实上面你有提到Redis通讯协议（RESP），能解释下什么是RESP,有什么特点"></a>其实上面你有提到Redis通讯协议（RESP），能解释下什么是RESP,有什么特点</h3><ul>
<li>RESP 是Redis客户端和服务端之间使用的一种通讯协议</li>
<li>RESP的特点是：实现简单、快速解析、可读性好</li>
</ul>
<h3 id="REdis有哪些架构模式，讲讲各自的特点"><a href="#REdis有哪些架构模式，讲讲各自的特点" class="headerlink" title="REdis有哪些架构模式，讲讲各自的特点"></a>REdis有哪些架构模式，讲讲各自的特点</h3><ul>
<li><p>单机版</p>
<ul>
<li>特点：简单</li>
<li>问题：<ul>
<li>1.内存容量有限</li>
<li>2.处理能力有限</li>
<li>3.无法高可用</li>
</ul>
</li>
</ul>
</li>
<li><p>主从复制</p>
<ul>
<li>Redis的复制（replication）功能允许用户根据一个REdis服务器来创建任意多个该服务器的复制品，其中被复制的服务器为主服务器（master），而通过复制创建出来的服务器复制品则为从服务器（slave）。</li>
<li>只要主从服务器之间的网络连接正常，主从服务器两者会具有相同的数据库，，主服务器就会一直讲发生在自己身上的数据更新同步给从服务器，从而抑制保证主从服务器的数据相同。</li>
<li>特点：<ul>
<li>1.master/slave角色</li>
<li>2.master/slave数据相同</li>
<li>3.降低master读压力在转交从库</li>
</ul>
</li>
<li>问题： 无法保证高可用，没有解决master写的压力</li>
</ul>
</li>
<li><p>哨兵</p>
<ul>
<li>Redis sentinel 是一个分布式系统中监控redis主从服务器，并在主服务器下线时自动进行故障转移。</li>
<li>其中三个特性：<ul>
<li>监控（Monitoring）：Sentinel会不断的检查你的主服务器和从服务器是否运作正常；</li>
<li>提醒（Notification）：当被监控的某个Redis服务器出现问题时，Sentinel可以通过API向管理员或者其他应用程序发送通知</li>
<li>自动故障迁移（Automatic failover）:当一个主服务器不能正常工作时，Sentinel会开始一次自动故障迁移操作。</li>
</ul>
</li>
<li>特点：<ul>
<li>1.保证高可用</li>
<li>2.监控各个节点</li>
<li>3.自动故障迁移</li>
</ul>
</li>
<li>缺点： 主从模式，切换需要时间丢数据；没有解决master写的压力</li>
</ul>
</li>
<li><p>集群（Proxy）型</p>
<ul>
<li>Twemproxy是一个Twitter开源的一个Redis和memcache快速、轻量级代理服务器；</li>
<li>Twemproxy是一个快速的单线程代理程序，支持Memcached ASCII协议和Redis协议</li>
<li>特点：<ul>
<li>1.多种hash算法：MD 5、CRC16、CRC32、CRC32a、hsieh、nurmur、Jenkins </li>
<li>2.支持失败节点自动删除 </li>
<li>3.后端Sharding分片逻辑对业务透明，业务放的读写方式和操作单个Redis一致</li>
</ul>
</li>
<li>缺点：增加了新的proxy，需要维护其高可用</li>
</ul>
</li>
<li><p>集群（直连型）</p>
<ul>
<li>从redis 3.0之后版本支持redis-cluster集群，Redis-Cluster采用无中心结构，每个节点保存数据和整个集群状态，每个节点都和其他所有节点连接</li>
<li>特点：<ul>
<li>无中心架构（不存在哪个节点影响性能瓶颈），少了proxy层</li>
<li>数据按照slot存储分布在多个节点，节点间数据共享，可动态调整数据分步</li>
<li>可扩展性，可先行扩展到1000个节点，节点可动态添加或者删除</li>
<li>高可用性，部分节点不可用时，集群仍然可用。通过增加Slave做备份数据副本。</li>
<li>实现谷中自动failover，节点之间通过gossip协议交换状态信息，用投票机制完成Slave到Master的角色提升。</li>
</ul>
</li>
<li>缺点<ul>
<li>1.资源隔离性较差，容易出现相互影响的情况</li>
<li>2.数据通过异步复制，不保证数据的强一致性</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="什么是一致性哈希算法，什么是哈希槽"><a href="#什么是一致性哈希算法，什么是哈希槽" class="headerlink" title="什么是一致性哈希算法，什么是哈希槽"></a>什么是一致性哈希算法，什么是哈希槽</h3><h3 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h3><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="使用RabbitMQ有什么好处"><a href="#使用RabbitMQ有什么好处" class="headerlink" title="使用RabbitMQ有什么好处"></a>使用RabbitMQ有什么好处</h3><ol>
<li>解耦：系统A在代码中国直接调用系统B和系统C的代码，如果将来D系统接入，系统A还不需要修改代码，过于麻烦</li>
<li>异步：将消息写入消息队列，非必要的业务逻辑以异步的方式运行，加快响应速度。</li>
<li>削峰：并发量大的时候，所有的请求直接怼到数据库，造成数据库连接异常。</li>
</ol>
<h3 id="RabbitMQ中的broker是指的什么，cluster又是指的什么"><a href="#RabbitMQ中的broker是指的什么，cluster又是指的什么" class="headerlink" title="RabbitMQ中的broker是指的什么，cluster又是指的什么"></a>RabbitMQ中的broker是指的什么，cluster又是指的什么</h3><ul>
<li>broker是指一个或者多个erlang node 的逻辑分组，且node上运行着rabbitMQ的应用程序。</li>
<li>cluster是指在broker的基础之上，增加了node之间共享元数据的约束。</li>
</ul>
<h3 id="RabbitMQ概念里的Channel、exchange和queue是逻辑概念还是对应着进程实体，分别起着什么作用"><a href="#RabbitMQ概念里的Channel、exchange和queue是逻辑概念还是对应着进程实体，分别起着什么作用" class="headerlink" title="RabbitMQ概念里的Channel、exchange和queue是逻辑概念还是对应着进程实体，分别起着什么作用"></a>RabbitMQ概念里的Channel、exchange和queue是逻辑概念还是对应着进程实体，分别起着什么作用</h3><ul>
<li>queue具有自己的erlang进程；</li>
<li>exchange内部实现为保存binding关系的查找表；</li>
<li>channel是实际进行路由工作的实体，即负责按照routing_key将message投递给queue；</li>
<li>由AMQP协议描述可知，channel是真实TCP连接之上的虚拟连接，所有AMQP命令都是通过channel发送的，且每一个channel都有一个唯一的ID。一个channel只能被单独一个操作系统线程使用，故投递到特定channel上的message是有顺序的。单一个操作系统还是那个允许使用多个channel。</li>
</ul>
<h3 id="vhost是什么，起什么作用"><a href="#vhost是什么，起什么作用" class="headerlink" title="vhost是什么，起什么作用"></a>vhost是什么，起什么作用</h3><ul>
<li>vhost可以理解为虚拟broker，即mini-RabbitMQ server。</li>
<li>其内部均含有独立的queue、exchange和binding等。</li>
<li>但最最最重要的是，其拥有独立的权限系统。可以做到vhost范围的用户控制。</li>
<li>当然，从RabbitMQ的全局角度，vhost可以作为不同权限隔离的手段（一个典型的例子就是不同应用可以跑在不同的vhost中）。</li>
</ul>
<h3 id="消息基于什么传输"><a href="#消息基于什么传输" class="headerlink" title="消息基于什么传输"></a>消息基于什么传输</h3><ul>
<li>由于TCP连接的擦行间和销毁开销较大，且并发数受系统资源限制，会造成性能瓶颈。</li>
<li>RabbitMQ使用【信道】的方式来传输数据。</li>
<li>信道是建立在真是的TCP连接内的虚拟连接，且每条TCP连接上的信道数量没有限制。</li>
</ul>
<h3 id="消息如何分发"><a href="#消息如何分发" class="headerlink" title="消息如何分发"></a>消息如何分发</h3><ul>
<li>若该队列至少有一个消费者订阅，消息将以循环（round-robin）的方式发送给消费者。</li>
<li>每条消息只会分发给一个订阅的消费者（前提是消费者能够正常处理消息并进行确认）。</li>
</ul>
<h3 id="消息怎么路由"><a href="#消息怎么路由" class="headerlink" title="消息怎么路由"></a>消息怎么路由</h3><p>从概念上来说，消息路由必须有三部分：交换器exchange、路由routing_key、绑定binding。  </p>
<p>生产者把消息发布到交换器上；绑定决定消息如何从路由器路由到特定的队列；消息最终到达队列，并被消费者接收。</p>
<ol>
<li>消息发布到交换器时，消息将拥有一个路由键（routing key），在消息创建时设定；</li>
<li>通过队列路由键，可以吧队列绑定到交换器上。</li>
<li>消息到达交换器后，RabbitMQ会将消息的路由键与队列的路由键进行匹配（针对不同的交换器有不同的路由规则）；如果能够匹配到队列，则消息会投递到相应的队列当中；如果不能匹配到任何队列，消息将进入”黑洞”；</li>
</ol>
<h4 id="常用的交换器主要分为以下三种"><a href="#常用的交换器主要分为以下三种" class="headerlink" title="常用的交换器主要分为以下三种"></a>常用的交换器主要分为以下三种</h4><ul>
<li>direct: 如果路由键完全匹配，消息就被投递到相应的队列</li>
<li>fanout: 如果交换器收到消息，将会广播到所有绑定的队列上</li>
<li>topic：可以使来自不同源头的消息能够到达同一个队列。使用topic交换器时，可以使用通配符；比如：”*”匹配特定位置的任意文本。”.”把路由键分为了几个部分。”#”匹配所有规则等。</li>
<li>特别注意：发往topic交换器的消息不能随意的设置选择键（routing_key）,必须是由”.”隔开的一系列的标识符组成。</li>
</ul>
<h3 id="什么是元数据，元数据分为哪些类型，包括哪些内容，与cluster相关的元数据有哪些，元数据是如何保存的，元数据在cluster中是如何分布的"><a href="#什么是元数据，元数据分为哪些类型，包括哪些内容，与cluster相关的元数据有哪些，元数据是如何保存的，元数据在cluster中是如何分布的" class="headerlink" title="什么是元数据，元数据分为哪些类型，包括哪些内容，与cluster相关的元数据有哪些，元数据是如何保存的，元数据在cluster中是如何分布的"></a>什么是元数据，元数据分为哪些类型，包括哪些内容，与cluster相关的元数据有哪些，元数据是如何保存的，元数据在cluster中是如何分布的</h3><ul>
<li>在非cluster模式下，元数据主要分为：<ul>
<li>Queue元数据（queue名字和属性等）；</li>
<li>Exchange元数据（exchange名字、类型、属性等）</li>
<li>Binding元数据（存放路由关系的查找表）</li>
<li>Vhost元数据（Vhost范围内针对前三者的名字空间约束和安全属性设置）</li>
</ul>
</li>
<li>在cluster模式下，元数据还包括：<ul>
<li>cluster中node位置信息和node关系信息</li>
</ul>
</li>
<li>元数据按照erlang node的类型确定是仅保存于RAM中，还是同时保存在RAM和disk上。</li>
<li>元数据在cluster中是全node分步的。</li>
</ul>
<h3 id="在单node系统和多node构成的cluster系统中声明queue、exchange、以及进行binding会有什么不同"><a href="#在单node系统和多node构成的cluster系统中声明queue、exchange、以及进行binding会有什么不同" class="headerlink" title="在单node系统和多node构成的cluster系统中声明queue、exchange、以及进行binding会有什么不同"></a>在单node系统和多node构成的cluster系统中声明queue、exchange、以及进行binding会有什么不同</h3><ul>
<li><p>当你在单node上声明queue时，只要该node上相关元数据进行了变更，你就会得到Queue.Declare-ok回应。</p>
</li>
<li><p>而在cluster上声明queue，则要求cluster上的全部node都要进行元数据成功更新，才会得到Queue.Declare-ok回应。</p>
</li>
<li><p>另外，若node类型为RAM node则变更的数据仅保存在内存中；若类型为disk node 则还要变更保存在磁盘上的数据。</p>
</li>
<li><p>死信队列&amp;死信交换器：DLX全称（Dead-Letter-Exchange），称之为死信交换器，当消息变成一个死信之后，如果这个消息所在的队列存在x-dead-letter-exchange参数，那它会被发送到x-dead-letter-exchange对应值的交换器上，这个交换器就称之为死信交换器，与这个死信交换器绑定的队列就是死信队列。</p>
</li>
</ul>
<h3 id="如何确保消息正确的发送至RabbitMQ"><a href="#如何确保消息正确的发送至RabbitMQ" class="headerlink" title="如何确保消息正确的发送至RabbitMQ"></a>如何确保消息正确的发送至RabbitMQ</h3><ul>
<li>RabbitMQ使用发送方确认模式，确保消息正确地发送到RabbitMQ。</li>
<li>发送方确认模式：将信道设置confirm模式（发送方确认模式），则所有在信道上发布的消息都会被指派一个唯一的id。一旦消息被投递到目的地队列之后，或者消息被写入磁盘之后（可持久化消息），信道会发送一个确认和生产者（包含消息唯一id）。</li>
<li>如果RabbitMQ发送内部错误而导致消息丢失，会发送一条nack(not acknowledged,未确认)消息。</li>
<li>发送方确认模式是异步的，生产者应用程序在等待确认的同时，可以继续发送消息。</li>
<li>当确认消息到达生产者应用程序，生产者应用程序的回调方法就会被触发来处理确认消息。</li>
</ul>
<h3 id="如何确保消费接收方消费了消息"><a href="#如何确保消费接收方消费了消息" class="headerlink" title="如何确保消费接收方消费了消息"></a>如何确保消费接收方消费了消息</h3><ul>
<li>接收方消息确认机制： 消费者接受每一条消息后都必须进行确认（消息接受和消息确认时两个不同的操作）。</li>
<li>只有消费者确认了消息，RabbitMQ才能安全的把消息从队列中删除。</li>
<li>这里并没有用到超时机制，RabbitMQ仅通过COnsumer的连接中断来确认是否需要重新发送消息。</li>
<li>也就是说，只要连接不中断，RabbitMQ给了Consumer足够长的时间来处理消息。</li>
</ul>
<p>下面罗列几种特殊情况；</p>
<ul>
<li>如果消费者接收到消息，在确认之前断开了连接或者取消订阅，RabbitMQ会认为消息没有被分发，然后重新分发给下一个订阅的消费者（可能存在消息重复消费的隐患，需要根据bizId去重）</li>
<li>如果消费者接收到消息却没有确认消息，连接也未断开，则RabbitMQ认为该消费者繁忙，将不会给该消费者分发更多的消息。</li>
</ul>
<h3 id="如何避免消息重复投递或者重复消费"><a href="#如何避免消息重复投递或者重复消费" class="headerlink" title="如何避免消息重复投递或者重复消费"></a>如何避免消息重复投递或者重复消费</h3><ul>
<li>在消息生产时，MQ内部针对每条生产者发送的消息生成了一个inner-msg-id，作为去重和幂等性的依据（消息投递失败并重传）避免重复的消息进入队列；</li>
<li>在消息消费时，要求消息体重必须要有一个bizId（对于同一个业务全局唯一，如支付ID、订单ID、帖子ID等）作为去重和幂等的依据，避免同一条消息被重复消费。</li>
</ul>
<p>这个问题针对业务场景来答，分以下几点：</p>
<ol>
<li>比如，你拿到这个消息做数据库的insert操作，那就容易了。给这个消息做一个唯一主键，那么就算出现重复消费的情况，就会导致主键冲突，避免数据库出现脏数据。</li>
<li>再比如，你拿到这个消息做redis的set操作，那就容易了，不用解决，因为你无论set几次结果都是一样的，set操作本来就算幂等操作。</li>
<li>如果上面两种情况还不行，上大招，准备一个第三方介质，来做消费记录。以redis为例，给消息分配一个全局id，只要消费过该消息，将&lt; id, message&gt; 以key-value形式写入redis。那消费者开始消费前，先去redis中查询有没有消费记录即可。</li>
</ol>
<h3 id="如何结局丢数据的问题"><a href="#如何结局丢数据的问题" class="headerlink" title="如何结局丢数据的问题"></a>如何结局丢数据的问题</h3><ol>
<li>生产者丢数据</li>
</ol>
<p>生产者的消息如果没有投递到MQ中怎么办？<br>从生产者弄丢数据这个角度来看，RabbitMQ提供transaction和confirm模式来确保生产者不丢消息。  </p>
<p>transaction机制就是说，发送消息前，开启事务（channel.txSelect()）,然后放消息，如果发送过程中出现什么异常，事务就会回滚（channel.txRollback()）,如果发送成功则提交事务（channel.txCommit()）。  </p>
<p>然后缺点就是吞吐量下降了。因此，生产商用confirm模式居多。<br>一旦channel进入confirm模式，所有在该信道上面发布的消息都将会呗指派一个唯一的ID（从1开始），一旦消息被投递到素有匹配的队列之后，rabbitMQ就会发送一个Ack给生产者（包含消息的唯一ID），这就使得生产知道消息已经正确到达目的地队列了。<br>如果RabbitMQ没能处理该消息，则会发送一个nack消息给你，你可以进行重试操作。</p>
<ol start="2">
<li>消息队列丢失数据</li>
</ol>
<p>处理消息队列丢失数据的情况，一般是开启持久化磁盘的配置。<br>这个持久化配置可以和confirm机制配合使用。<br>你可以在消息持久化磁盘之后，再给生产者发送一个Ack信号。这样，如果消息持久化磁盘之前，RabbitMQ阵亡了，那么生产者收不到Ack信号，生产者会自动重发。  </p>
<p>那么如何持久化呢，这里顺便说一下，其实也很容易，就下面两步骤：  </p>
<ul>
<li>将queue的持久化标示durable设置为true，则代表是一个持久的队列</li>
<li>发送消息的时候将deliveryMode=2</li>
</ul>
<p>这样设置以后，RabbitMQ就算挂了，重启后也能恢复数据，在消息还没哟持久化到硬盘时，可能服务已经死掉，这种那个情况可以通过引入mirrored-queue即镜像队列，但是也不能保证消息百分百不丢失（整个集群都挂掉）</p>
<ol start="3">
<li>消费者丢失数据</li>
</ol>
<p>启用手动确认模式可以解决这个问题  </p>
<ul>
<li>自动确认模式：消费者挂掉，等待ack的消息回归到队列中。消费者抛出异常，消息会不断地被重发，知道处理成功。不会丢失消息，即便服务挂掉，没有处理完成的消息会重回队列，但是异常回访消息不断重试。</li>
<li>手动确认模式：如果消费者来不及处理就死掉时，没有响应ack时会重复发送一条消息给其他消费者；如果监听程序处理异常了，且未对异常进行捕获，会一直重复接收消息，然后一直抛出异常；如果对异常进行了捕获，但是没有在finally里ack，也会一直重复发送消息（重试机制）；</li>
<li>不确认模式，acknowledge=”none”,不使用确认机制，只要消息发送完成会立即在队列移除，无论客户端异常还是断开，只要发送完就移除，不会重发。</li>
</ul>
<h3 id="死信队列和延迟队列的使用"><a href="#死信队列和延迟队列的使用" class="headerlink" title="死信队列和延迟队列的使用"></a>死信队列和延迟队列的使用</h3><p>死信消息：</p>
<ol>
<li>消息被拒绝（Basic.Reject或者Basic.Nack）并且设置requeue参数的值为false</li>
<li>消息过期了</li>
<li>队列达到最大的长度</li>
</ol>
<p>过期消息：</p>
<p>在RabbitMQ中存在两种方式方可设置消息的过期时间：</p>
<ul>
<li>第一种通过对队列进行设置，这猴子那个设置后，该队列中所有消息都存在相同的过期时间；</li>
<li>第二种通过对消息本身进行设置，那么每条消息的过期时间都不一样。</li>
<li>如果同时使用这两种方法，那么以过期时间小的那个数值为准。</li>
<li>当消息达到过期时间还没有被消费，那么这个消息就成为了一个死信消息.</li>
</ul>
<p>队列设置: 在队列申明的时候使用x-message-ttl参数，单位为毫秒</p>
<p>单个消息设置：是设置消息属性的expiration参数的值，单位为毫秒</p>
<p>延时队列：在RabbitMQ中不存在延时队列。但是我们可以通过设置消息的过期时间和死信队列来模拟出延时队列。消费者监听死信交换器绑定的队列，而不要监听消息发送的队列。</p>
<p>需求：用户在系统中创建了一个订单，如果超过时间用户没有进行支付，那么自动取消订单。<br>分析：</p>
<ol>
<li>上面这个情况，我们就适合使用延时队列来实现，那么延时队列如何创建</li>
<li>延时队列可以由 过期消息+死信队列 来实现</li>
<li>过期消息通过队列中设置x-message-ttl 参数实现</li>
<li>死信队列通过在队列申明时，给队列设置x-dead-letter-exchange参数，然后另外申明一个队列绑定x-dead-letter-exchange对应的交换器。</li>
</ol>
<h3 id="使用消息队列会有什么缺点"><a href="#使用消息队列会有什么缺点" class="headerlink" title="使用消息队列会有什么缺点"></a>使用消息队列会有什么缺点</h3><ol>
<li>系统可用性降低</li>
<li>系统复杂性增加，需要考虑的东西更多，系统复杂性增大。</li>
<li>一致性问题</li>
</ol>
<h2 id="SQL数据库索引优化"><a href="#SQL数据库索引优化" class="headerlink" title="SQL数据库索引优化"></a>SQL数据库索引优化</h2><ul>
<li>索引不会包含有NULLL的值</li>
<li>使用短索引</li>
<li>不要在列上进行运算</li>
<li>不适用not in 和in操作</li>
</ul>
<h2 id="SQL数据库查询优化"><a href="#SQL数据库查询优化" class="headerlink" title="SQL数据库查询优化"></a>SQL数据库查询优化</h2><h4 id="SQL优化的具体操作"><a href="#SQL优化的具体操作" class="headerlink" title="SQL优化的具体操作"></a>SQL优化的具体操作</h4><ol>
<li>在表中建立索引，优先考虑where、group by 使用到的字段；<br>【优化方式】：在表中建立索引，优先考虑where、group by使用到的字段。</li>
<li>尽量避免使用select * ,<br>返回无用的字段会降低查询效率。<br>如下：select * from t.<br>【优化方式】：使用具体的字段代替*，只返回使用到的字段。</li>
<li>尽量避免使用in 和not in,会导致数据库引擎放弃索引进行全表扫描。如下:<br>select * from t where id in (2,3);<br>select * from t1 where username in (select username from t2);<br>【优化方式】：如果是连续数值，可以用between and代替。如下：<br>select * from t where id between 2 and 3;<br>如果是子查询，可以用exists代替，如下：<br>select * from t1 where exists (select * from t2 where t1.username=t2.username);</li>
<li>尽量避免使用or，会导致数据库引擎放弃索引进行全表扫描。如下:<br>select * from t where id=1 or id=3;<br>【优化方式】：可以用union代替or，如下：<br>select * from t where id=1 union select * from t where id=3;<br>(ps:如果or两边的字段是同一个，如例子中这样，貌似两种方式效率差不多，及时union扫描的是索引，or扫描的是全表)。</li>
<li>尽量避免在字段开头模糊查询，会导致数据库引擎放弃索引进行全表扫描。如下：<br>select * from t where username like ‘%li%’;<br>【优化方式】：尽量在字段后面使用模糊查询。如下：<br>select * from t where username like ‘li%’;</li>
<li>尽量避免进行null值的判断，会导致数据库引擎放弃索引进行全表扫描。如下：<br>select * from t where score is null;<br>【优化方式】：可以给字段添加默认值为0，对0值进行判断，如下：<br>selext * from t where score =0;</li>
<li>尽量避免在where条件中等号的左边进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描。如下：<br>select * from t2 where score/10=9;<br>select * from t2 where substr(username,1,2)=’li’;<br>【优化方式】：可以将表达式、函数操作移动到灯油右侧，如下：<br>select * from t2 where socre=10*9;<br>select * from t2 where username like ‘li%’;</li>
<li>当数据量较大时，避免使用where 1=1的条件。通常是为了方便拼装插叙条件，我们会默认使用该条件，数据库引擎会放弃索引进行全表扫描。如下：<br>select * from t where 1=1;<br>【优化方式】：用代码拼装sql时进行判断，没有where加where,有where加and.</li>
<li>对查询进行优化，应尽量避免全表扫描，首先应该考虑在where以及order by涉及的列上建立索引，一个表的索引不能过多，过多则不利于删除、插入等操作。</li>
<li>避免频繁创建和删除临时表，以减少系统表资源的消耗。</li>
<li>尽可能的使用varchar代替char，因为首选变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</li>
<li>尽量使用数字型字段，若只含有数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，炳辉增加存储的开销。这是因为引擎在处理查询和连接是会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</li>
<li>索引并不是越多越好，索引固然可以提高相应的select的效率，但同时也降低了insert和update的效率，因为insert或者是update时有可能重建索引，所以怎样建立索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，弱太多则应该考虑一些不常使用到的列上键的索引是否有必要。</li>
<li>并不是所有索引对查询都要效。SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一张表中有字段sex，male、female各占了一半，那么即使在sex上建立了索引也对查询效率起不了作用。</li>
</ol>
<h2 id="SQL数据库存储过程优化"><a href="#SQL数据库存储过程优化" class="headerlink" title="SQL数据库存储过程优化"></a>SQL数据库存储过程优化</h2><p>SQL语句需要【先编译然后执行】。<br>而存储过程（Stored Procedure）则是一组为了完成特定功能的【SQL语句集】，经过【编译】之后【存储】在数据库中，用户通过指定存储过程的【名字】并传给定【参数】（如果该存储过程带有参数的话）来调用执行它。  </p>
<p>存储过程是可编程的函数，在数据库中创建并保存，可以由【SQL语句】和【控制结构】组成。<br>当想要在【不同的应用程序或着平台】上执行【相同的函数】，或者【封装特定功能】时，存储过程是非常有用的。<br>数据库中的存储过程可以看做是对编程中【面向对象方法的模拟】，它【允许控制数据的访问方式】。  </p>
<p>存储过程的优点：</p>
<ol>
<li>【增强SQL语言的功能和灵活性】：存储过程可以用控制语句编写，有很强的灵活性，可以完成复杂的判断和比较复杂的运算。</li>
<li>【标准组件式编程】：存储过程被创建之后，可以在程序中被调用多次，而不必重新编写该存储过程的SQL语句。而且数据库专业人员可以随时对存储过程进行修改，对应用程序源代码毫无影响。</li>
<li>【较快的执行速度】：如果某已操作包含大量的Transaction-SQL代码或者分别被多次执行，那么存储过程要比批处理的执行速度快很多。因为存储过程是预编译的。在首次运行一个存储过程时查询，优化器对其进行分析优化，并且给出最终被存储在系统表中的执行计划。而批处理的Transaction-SQL语句则在每次运行时都要进行编译和优化，速度相对要慢一些。</li>
<li>【减少网络流量】：针对同一个数据库对象的操作（如查询、修改），如果这一操作所涉及的Transaction-SQL语句被组织进存储过程，那么当在客户计算机上调用该存储过程的时候，网络中传送的只是该调用语句，从而大大减少网络流量并降低了网络负载。</li>
<li>【作为一种安全机制来充分利用】：通过对执行某一存储过程的权限进行限制，能够实现对相应的数据的访问权限的限制，避免了非授权用户对数据的访问，保证了数据的安全性。</li>
</ol>
<h3 id="MySQL的存储过程"><a href="#MySQL的存储过程" class="headerlink" title="MySQL的存储过程"></a>MySQL的存储过程</h3><p>存储过程是数据库的一个重要的功能，【MySQL5.0】 以前并不支持存储过程这使得MySQL在应用上大打折扣。好在MySQL5.0开始支持存储过程，这样既可以大大提高数据库的【处理速度】，同时也可以提供数据库【编程的灵活性】。</p>
<h3 id="存储过程编写经验和优化措施"><a href="#存储过程编写经验和优化措施" class="headerlink" title="存储过程编写经验和优化措施"></a>存储过程编写经验和优化措施</h3><ol>
<li>开发人员如果用到其他库的Table或者View，务必在当前库中简历View来实现跨库操作，最好不要直接使用”database.dbo.table_name”，因为sp_depends不能显示出该SP所使用的的跨库table或者view，不方便校验。</li>
<li>开发人员在提交SP前，必须已经使用set showplan on 分析过查询计划，做过自身的查询优化检查。</li>
<li>高程序运行效率，优化应用程序，在SP编写过程中应该注意以下几点：</li>
</ol>
<ul>
<li>SQL的使用规范：<ul>
<li>尽量避免大量事务操作，慎用holdlock子句，提高系统并发能力。</li>
<li>尽量避免反复访问同一张或者几张表，尤其是数据量较大的二标，可以考虑先根据条件提取数据到临时表中，然后再做连接。</li>
<li>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过一万行，那么就应该改写；如果使用了游标，就要尽量避免在游标循环中在进行表连接的操作。</li>
<li>注意where 子句写法，必须考虑语句顺序，应该根据索引顺序，范围大小来确定条件子句的前后顺序，尽可能的让字段顺序与所以顺序相一致，范围从大到小。</li>
<li>不要在where子句中的”=”左边进行函数、算数运算或者其他表达式运算，否则系统将可能无法正确使用索引。</li>
<li>尽量使用exists代替select count(1)来判断是否存在记录，count函数只有在统计表中所有行数时使用，而且count(1)比count(*)更有效率。</li>
<li>尽量使用”&gt;=”，不要使用”&gt;”</li>
<li>注意一些or子句和union子句之间的替换</li>
<li>注意表之间的数据类型，避免不同类型数据之间的链接。</li>
<li>注意存储过程中国参数和数据类型的关系。</li>
<li>注意insert、update操作的数据量，防止与其他应用冲突。如果数据量超过200个数据页面（400k），那么系统将会进行锁升级，页级锁会升级成表级锁。</li>
</ul>
</li>
<li>索引的使用规范：<ul>
<li>所以的创建要与应用结合考虑，建议大的OLTP表不要超过6个索引</li>
<li>尽可能的使用索引字段作为查询条件，尤其是聚簇索引，必要时可以通过index index_name来强制指定索引</li>
<li>避免对大表查询时进行table scan,必要时考虑新建索引</li>
<li>在使用索引字段作为条件时，如果该索引是联合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用。</li>
<li>要注意索引的维护，周期性重建索引，重新编译存储过程。</li>
</ul>
</li>
<li>tempdb的使用规范<ul>
<li>尽量避免使用distinct、order by、group by、having、join、***pute，因为这些语句会加重tempdb的负担。</li>
<li>避免频繁创建和删除临时表，减少系统表资源的消耗。</li>
<li>在新建临时表时，如果一次性插入数据量很大，那么可以使用select into 代替create table,避免log,提高速度；如果数据量不大，为了缓和系统表的资源，建议先create table,然后insert</li>
<li>如果临时表的数据量较大，需要建立索引，那么应该将创建临时表和建立索引的过后才能放在单独一个自存储过程中，这样才能保证系统能够很好的使用到该临时表的索引。</li>
<li>如果使用到了临时表，在存储过程的最后务必将所有临时表显示删除，先truncate table然后drop table,这样可以便面系统表的较长时间锁定。</li>
<li>慎用大的临时表与其他大表的链接查询和修改，减低系统表的负担，因为这种操作会在一条语句中多次使用tempdb的系统表。</li>
</ul>
</li>
<li>合理的算法使用<ul>
<li>根据上面已经提到的SQL优化技术和ASE Tuning手册中的SQL优化内容，结合实际内容，采用多种算法进行比较，以获得消耗资源最少，效率最高的方法。具体可以使用ASE调优命令：set statistics io on,set statistics time on,set showplan on 等。</li>
</ul>
</li>
</ul>
<h3 id="存储过程执行速度优化"><a href="#存储过程执行速度优化" class="headerlink" title="存储过程执行速度优化"></a>存储过程执行速度优化</h3><ol>
<li>首先查看存储过程中是否有很多重复的实体表（一般给报表写存储过程，第一步就是使用临时表）</li>
<li>如果反复使用的实体表很多，就要考虑将这个实体表最小范围的数据放到临时表，这样就可以大大提高查询效率。</li>
<li>如果前两条都做到了还是很慢，就分步骤执行你的存储过程，看看慢在哪个SQL</li>
<li>如果临时表做到了，问题基本就是在临时表提取数据的时候慢，那就专门对这个临时表提取数据的sql看看有没有走索引，需要的情况下拆分SQL，分步提取数据。</li>
<li>分步执行你的存储过程，看看慢在哪一个SQL上。一般给报表写存储过程，要在第一步提取出最小范围的数据放到临时表，之后全部的处理过程都对该临时表操作，不再涉及任何实体表，先看看这一点你做大了没有。</li>
</ol>
<h3 id="存储过程编写与优化"><a href="#存储过程编写与优化" class="headerlink" title="存储过程编写与优化"></a>存储过程编写与优化</h3><h4 id="编写存储过程有如下好处"><a href="#编写存储过程有如下好处" class="headerlink" title="编写存储过程有如下好处"></a>编写存储过程有如下好处</h4><ol>
<li>使用存储过程可以对所执行的SQL语句进行封装，在接口保持不变的情况下不影响调用程序。</li>
<li>最大限度的重用已缓存的执行计划。</li>
<li>减少网络流量。</li>
<li>提供更好的数据库安全控制，防止直接对表操作。</li>
</ol>
<p>存储过程的编译占用CPU，因此我们应该发那个孩子存储过程不必要的重新编译。  </p>
<p>防止存储过程不必要的重新编译，达到优化存储过程的目的。  </p>
<h4 id="存储过程编写经验和优化措施-1"><a href="#存储过程编写经验和优化措施-1" class="headerlink" title="存储过程编写经验和优化措施"></a>存储过程编写经验和优化措施</h4><ul>
<li><p>存储过程正确的编译发生于</p>
<ul>
<li>1.所引用的表中大部分的数据发生了的更改，导致统计信息变化过大</li>
<li>2.所引用的表的架构被修改，包括添加或者取消约束，默认值或者规则</li>
<li>3.明确使用WITH RECOMPILE强制每次执行过程时重新编译或者sp_recompile使用过程缓存无效。</li>
<li>4.由于服务器内存不足或者长期不使用，使缓存过程被清除。</li>
</ul>
</li>
<li><p>在以下情况下编写的存储过程会被不必要的重新编译</p>
<ul>
<li>1.在调用过程时，不指定架构所有者。</li>
<li>2.存储过程在临时表上执行了特定操作。</li>
<li>3.过程定义中出现DDL和DML的交错。</li>
<li>4.不应该使用sp_作为自定义存储过程的前缀。这是微软用作系统存储的前缘；在调用以sp_开头的过程中，会首先在master数据库中进行查找，如果找不到才会在用户数据库中查找。</li>
<li>5.存储过程编写的安全方面，因为传入的参数可能会引起脚本注入的危险，因此应该对每个参数进行一些判断。</li>
</ul>
</li>
</ul>
<h2 id="Docker服务"><a href="#Docker服务" class="headerlink" title="Docker服务"></a>Docker服务</h2><h3 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h3><p>Docker是一个【容器化】平台。<br>它以【容器】的形式将您的【应用程序】及其所有【依赖项】打包在一起，以确保您的应用程序在【任何环境】中无缝运行。</p>
<h3 id="CI-持续集成-服务器的功能是什么"><a href="#CI-持续集成-服务器的功能是什么" class="headerlink" title="CI (持续集成)服务器的功能是什么"></a>CI (持续集成)服务器的功能是什么</h3><p>CI功能就是在每次提交之后不断地集成所有提交到存储库的代码，并编译检查错误。</p>
<h3 id="什么是Docker镜像"><a href="#什么是Docker镜像" class="headerlink" title="什么是Docker镜像"></a>什么是Docker镜像</h3><p>Docker镜像是Docker容器的源代码，Docker镜像用于创建容器，使用build命令创建镜像。</p>
<h3 id="什么是Docker容器"><a href="#什么是Docker容器" class="headerlink" title="什么是Docker容器"></a>什么是Docker容器</h3><p>Docker容器包括应用程序以及其所有依赖项，作为操作系统的独立进程运行</p>
<h3 id="Docker容器有几种状态"><a href="#Docker容器有几种状态" class="headerlink" title="Docker容器有几种状态"></a>Docker容器有几种状态</h3><p>Docker容器可以有四种状态</p>
<ul>
<li>运行状态</li>
<li>已暂停状态</li>
<li>重新启动状态</li>
<li>已退出状态</li>
</ul>
<h3 id="Docker使用流程"><a href="#Docker使用流程" class="headerlink" title="Docker使用流程"></a>Docker使用流程</h3><ol>
<li>创建Dockerfile之后，您可以构建它已创建容器的镜像。</li>
<li>推送或拉取镜像。</li>
</ol>
<h3 id="Dockerfile中最常见的命令是什么"><a href="#Dockerfile中最常见的命令是什么" class="headerlink" title="Dockerfile中最常见的命令是什么"></a>Dockerfile中最常见的命令是什么</h3><p>Dockerfile中的一些常用指令如下：</p>
<ul>
<li>FROM: 指定基础镜像</li>
<li>LABEL：功能是为镜像指定标签</li>
<li>RUN：运行指定的命令</li>
<li>CMD：容器启动时要运行的命令</li>
</ul>
<h3 id="Dockerfile中的命令COPY和ADD命令有什么区别"><a href="#Dockerfile中的命令COPY和ADD命令有什么区别" class="headerlink" title="Dockerfile中的命令COPY和ADD命令有什么区别"></a>Dockerfile中的命令COPY和ADD命令有什么区别</h3><p>COPY与ADD的区别在于：COPY的&lt; src &gt;只能是本地文件，其他的用法一致</p>
<h3 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h3><ul>
<li>docker pull 拉取或者更新指定镜像</li>
<li>docker pusl 将镜像推送至远程仓库</li>
<li>docker rm 删除容器</li>
<li>docker rmi 删除镜像</li>
<li>docker images 列出所有镜像</li>
<li>docker ps 列出所有容器</li>
</ul>
<h3 id="DevOps有哪些优势"><a href="#DevOps有哪些优势" class="headerlink" title="DevOps有哪些优势"></a>DevOps有哪些优势</h3><ol>
<li>技术优势</li>
</ol>
<ul>
<li>持续的软件交付</li>
<li>修复不太复杂的问题</li>
<li>更快地解决问题</li>
</ul>
<ol start="2">
<li>商业利益：</li>
</ol>
<ul>
<li>更快速的传递功能</li>
<li>更稳定的操作环境</li>
<li>有更多时间可以增加价值（而不是修复/维护）</li>
</ul>
<h3 id="CI（持续集成）服务器的功能是什么"><a href="#CI（持续集成）服务器的功能是什么" class="headerlink" title="CI（持续集成）服务器的功能是什么"></a>CI（持续集成）服务器的功能是什么</h3><p>CI服务器功能是：不断地集成所有正在进行的更改并由不同的开发人员提交到存储库，并检查编译错误。<br>他需要每天多次构建代码，最好是在每次提交之后，以便他可以检测在问题发生时是哪个提交bug了。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题</title>
    <url>/2020/03/23/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<blockquote>
<p>借鉴自博客：<a href="https://blog.csdn.net/fangchao2011/article/details/89184058" target="_blank" rel="noopener">https://blog.csdn.net/fangchao2011/article/details/89184058</a></p>
</blockquote>
<h2 id="面试题模块"><a href="#面试题模块" class="headerlink" title="面试题模块"></a>面试题模块</h2><ul>
<li>Java基础</li>
<li>容器</li>
<li>多线程</li>
<li>反射</li>
<li>对象拷贝</li>
<li>Java Web模块</li>
<li>异常</li>
<li>网络</li>
<li>设计模式</li>
<li>Spring/Spring MVC</li>
<li>SpringBoot/Spring Cloud</li>
<li>Hibernate</li>
<li>Mybatis</li>
<li>RabbitMQ</li>
<li>Kafka</li>
<li>Zookeeper</li>
<li>Mysql</li>
<li>Redis</li>
<li>JVM</li>
</ul>
<h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><ul>
<li>Java基础</li>
<li>容器</li>
<li>多线程</li>
<li>对象拷贝</li>
<li>Java Web模块</li>
<li>异常模块</li>
<li>网络模块</li>
<li>设计模块</li>
</ul>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><ul>
<li>Spring<ul>
<li>Spring MVC</li>
<li>Spring Boot</li>
<li>Spring Cloud</li>
</ul>
</li>
<li>Hibernate</li>
<li>Mybatis</li>
<li>中间件<ul>
<li>RabbitMQ</li>
<li>Kafka</li>
<li>Zookeeper</li>
</ul>
</li>
<li>数据<ul>
<li>Mysql</li>
<li>Redis</li>
</ul>
</li>
<li>JVM</li>
</ul>
<h2 id="基础模块"><a href="#基础模块" class="headerlink" title="基础模块"></a>基础模块</h2><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><h4 id="1-JDK和JRE有什么区别"><a href="#1-JDK和JRE有什么区别" class="headerlink" title="1.JDK和JRE有什么区别"></a>1.JDK和JRE有什么区别</h4><ul>
<li>JDK: Java Development Kit的简称，Java开发工具包，提供了Java的开发环境和运行环境。</li>
<li>JRE：Java Runtime Environment的简称，Java运行环境，为Java的运行提供了所需环境。</li>
</ul>
<p>具体分析来说，【JDK其实包含了JRE，同时还包含了编译Java源码的编译器Javac，还包含了很多Java程序调试和分析的工具。】<br>简单来说，如果你需要运行Java程序，只需要安装JRE就可以了；如果你需要编写Java程序，那么需要安装JDK。  </p>
<h4 id="2-和equals的区别是什么"><a href="#2-和equals的区别是什么" class="headerlink" title="2.==和equals的区别是什么"></a>2.==和equals的区别是什么</h4><h5 id="解读"><a href="#解读" class="headerlink" title="==解读"></a>==解读</h5><p>对于【基本类型】和【引用类型】，==的作用效果是不同的，如下所示：  </p>
<ul>
<li>基本类型：比较的是值是否相同；</li>
<li>引用类型：比较的是引用是否相同；</li>
</ul>
<p>代码示例：  </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String x=<span class="string">"string"</span>;</span><br><span class="line">String y=<span class="string">"string"</span>;</span><br><span class="line"></span><br><span class="line">String z=<span class="keyword">new</span> <span class="constructor">String(<span class="string">"string"</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(x==y);<span class="comment">//true</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(x==z);<span class="comment">//false</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(x.equals(y));<span class="comment">//true</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(x.equals(z));<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>代码解读：<br>因为x和y指向的是同一个引用，所以==也是true；<br>而new String()方法则是重写开辟了内存空间，所以==结果为false，而equals比较的一直是值，所以结果都为true。  </p>
<h5 id="equals解读"><a href="#equals解读" class="headerlink" title="equals解读"></a>equals解读</h5><p>equals本质上就是==，只不过String和Integer等重写了equals方法，把它变成了值比较。  </p>
<p>看下面的代码就明白了。  </p>
<p>首先来看默认情况下equals比较一个有相同值的对象，代码如下：  </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>&#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(<span class="keyword">String</span> name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Cat c1=<span class="keyword">new</span> Cat(<span class="string">"王磊"</span>);</span><br><span class="line">  Cat c2=<span class="keyword">new</span> Cat(<span class="string">"王磊"</span>);</span><br><span class="line">  System.out.<span class="built_in">println</span>(c1.equals(c2));<span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果出乎我们的意料，竟然是false? 这是怎么回事，看了equals源码就知道了，源码如下：  </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">this</span>==obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原来equals本质上就是==  </p>
<p>那么问题来了，两个相同值的String对象，为什么返回的是true？代码如下:  </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String</span> s1=<span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"老王"</span>);</span><br><span class="line"><span class="keyword">String</span> s2=<span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"老王"</span>);</span><br><span class="line">System.out.<span class="built_in">println</span>(s1.equals(s2));</span><br></pre></td></tr></table></figure>

<p>同样的，当我们进入String的equals方法，找到了答案，代码如下：  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="type">boolean</span> equals(<span class="keyword">Object</span> anObject)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(this==anObject)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(anObject instanceOf String)&#123;</span><br><span class="line">      String anotherString=(String)anObject;</span><br><span class="line">      <span class="type">int</span> n=<span class="keyword">value</span>.length;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(n==anotherString.<span class="keyword">value</span>.length)&#123;</span><br><span class="line">          <span class="type">char</span> v1[]=<span class="keyword">value</span>;</span><br><span class="line">          <span class="type">char</span> v2[]=anotherString.<span class="keyword">value</span>;</span><br><span class="line">          <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">          <span class="keyword">while</span>(n<span class="comment">-- !=0)&#123;</span></span><br><span class="line">            <span class="keyword">if</span>(v1[i] != v2[i])&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原来是String重写了Object的equals方法，把引用比较改成了值比较。</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>==对于基本类型来说是值比较；<br>==对于引用类型来说是比较的引用；<br>而equals默认情况下是引用比较，只是很多类重写了equals方法，比如String、Integer等把他变成了值比较，所以一般情况下equals比较的是值是否相等。  </p>
<h4 id="3-两个对象的hashCode-相同，则equals-也一定为true，对吗"><a href="#3-两个对象的hashCode-相同，则equals-也一定为true，对吗" class="headerlink" title="3.两个对象的hashCode()相同，则equals()也一定为true，对吗"></a>3.两个对象的hashCode()相同，则equals()也一定为true，对吗</h4><p>不对，两个对象的hashCode()相同，equals()不一定true  </p>
<p>代码示例：  </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1=<span class="string">"通话"</span>;</span><br><span class="line">String str2=<span class="string">"重地"</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println( <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>format(<span class="string">"str1: %d | str2: %d"</span>, str1.hash<span class="constructor">Code()</span>, str2.hash<span class="constructor">Code()</span> ) );</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.equals(str2));</span><br></pre></td></tr></table></figure>

<p>执行的结果：<br>str1: 1179395 | str2: 1179395<br>false  </p>
<p>代码解读：很显然”通话”和”重地”的hashCode()相同,然而equals()则为false；<br>因为在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。  </p>
<h4 id="4-final在Java中有什么作用"><a href="#4-final在Java中有什么作用" class="headerlink" title="4.final在Java中有什么作用"></a>4.final在Java中有什么作用</h4><ul>
<li>final修饰的类叫做最终类，该类不能被继承</li>
<li>final修饰的方法不能被重写</li>
<li>final修饰的变量叫做常量，常量必须初始化，初始化之后值就不能被修改</li>
</ul>
<h4 id="5-Java中的Math-round-1-5-等于多少"><a href="#5-Java中的Math-round-1-5-等于多少" class="headerlink" title="5.Java中的Math.round(-1.5)等于多少"></a>5.Java中的Math.round(-1.5)等于多少</h4><p>等于-1。</p>
<h4 id="6-String属于基础的数据类型吗"><a href="#6-String属于基础的数据类型吗" class="headerlink" title="6.String属于基础的数据类型吗"></a>6.String属于基础的数据类型吗</h4><p>String不属于基础的数据类型；<br>基础类型有8种：byte、short、char、int、long、float、double、boolean;<br>而String属于对象。</p>
<h4 id="7-Java-中操作字符串的类都有哪些类？他们之间有什么区别"><a href="#7-Java-中操作字符串的类都有哪些类？他们之间有什么区别" class="headerlink" title="7.Java 中操作字符串的类都有哪些类？他们之间有什么区别"></a>7.Java 中操作字符串的类都有哪些类？他们之间有什么区别</h4><p>操作字符串的类有：String、StringBuffer、StringBuilder  </p>
<p>String和StringBuffer、StringBuilder的区别在于：  </p>
<p>String声明的是不可变的对象，每次操作都会生成新的String对象，然后将指针指向新的String对象；<br>而StringBuffer、StringBuilder可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用String。  </p>
<p>StringBuffer和StringBuilder最大的区别在于，StringBuffer是线程安全的，而StringBuilder是非线程安全的。<br>但是StringBuilder的性能却高于StringBuffer，所以单线程环境推荐使用StringBuilder，多线程环境下推荐使用StringBuffer。</p>
<h4 id="8-String-str-”i”与String-str-new-String-“i”-一样吗"><a href="#8-String-str-”i”与String-str-new-String-“i”-一样吗" class="headerlink" title="8.String str=”i”与String str=new String(“i”)一样吗"></a>8.String str=”i”与String str=new String(“i”)一样吗</h4><p>不一样，因为内存的分配方式不一样。<br>String str=”i”的方式，Java虚拟机会将其分配到常量池当中；而String str=new String(“i”)则会被分配到堆内存中。</p>
<h4 id="9-如何将字符串反装"><a href="#9-如何将字符串反装" class="headerlink" title="9.如何将字符串反装"></a>9.如何将字符串反装</h4><p>使用StringBuilder 或者StringBuffer的reverse()  </p>
<p>示例代码：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">//StringBuffer reverse</span></span><br><span class="line">StringBuffer stringBuffer=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">stringBuffer.<span class="keyword">append</span>(<span class="string">"abcdefg"</span>);</span><br><span class="line">System.out.<span class="keyword">println</span>(stringBuffer.<span class="keyword">reverse</span>());<span class="comment">//gfedcba</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//StringBuilder reverse</span></span><br><span class="line">StringBuilder stringBuilder=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">stringBuilder.<span class="keyword">append</span>(<span class="string">"abcdefg"</span>);</span><br><span class="line">System.out.<span class="keyword">println</span>(stringBuilder.<span class="keyword">reverse</span>());<span class="comment">//gfedcba</span></span><br></pre></td></tr></table></figure>

<h4 id="10-String类的常用方法都有哪些"><a href="#10-String类的常用方法都有哪些" class="headerlink" title="10.String类的常用方法都有哪些"></a>10.String类的常用方法都有哪些</h4><p>好饿啊</p>
<ul>
<li>indexOf(): 返回指定字符的索引</li>
<li>chatAt(): 返回指定索引出的字符</li>
<li>replace(): 字符串替换</li>
<li>trim(): 取出字符串两端空白</li>
<li>split(): 分隔字符串，返回一个分隔后的字符串数组</li>
<li>getBytes(): 返回字符串的byte类型数组</li>
<li>length(): 返回字符串的长度</li>
<li>toLowerCase(): 将字符串转成小写字母</li>
<li>toUpperCase(): 将字符串转成大写字母</li>
<li>substring(): 截取字符串</li>
<li>equals(): 字符串比较</li>
</ul>
<h4 id="11-抽象类必须要有抽象方法吗"><a href="#11-抽象类必须要有抽象方法吗" class="headerlink" title="11.抽象类必须要有抽象方法吗"></a>11.抽象类必须要有抽象方法吗</h4><p>不需要，抽象类不一定非要有抽象方法。  </p>
<p>示例代码：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Cat</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"hi~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码，抽象类并没有抽象方法但完全可以正常运行</p>
<h4 id="12-普通类和抽象类的区别"><a href="#12-普通类和抽象类的区别" class="headerlink" title="12.普通类和抽象类的区别"></a>12.普通类和抽象类的区别</h4><ul>
<li>普通类不能够包含抽象方法，抽象类可以包含抽象方法；</li>
<li>抽象类不能够直接实例化，普通类可以直接实例化；</li>
</ul>
<h4 id="13-抽象类能够使用final修饰吗"><a href="#13-抽象类能够使用final修饰吗" class="headerlink" title="13.抽象类能够使用final修饰吗"></a>13.抽象类能够使用final修饰吗</h4><p>不能。<br>定义抽象类就是让其他类继承的；<br>如果定义为final该类就不能被继承，这样彼此就会产生矛盾，所以final不能修饰抽象类。<br>编辑器也会提示错误信息。  </p>
<h4 id="14-接口和抽象类有什么区别"><a href="#14-接口和抽象类有什么区别" class="headerlink" title="14.接口和抽象类有什么区别"></a>14.接口和抽象类有什么区别</h4><ul>
<li>实现：抽象类的子类使用extend是来进行继承；接口必须使用implements来实现接口。</li>
<li>构造函数：抽象类可以有构造函数，但是接口不能有。</li>
<li>main方法：抽象类可以有main方法，并且我们能够运行他；但是接口不能有main方法。</li>
<li>实现数量：类可以是实现很多个接口；但是只能继承一个抽象类。</li>
<li>访问修饰符：接口中的方法默认使用public修饰；抽象类中的方法可以使任意访问修饰符。</li>
</ul>
<h4 id="15-Java中IO流分几种"><a href="#15-Java中IO流分几种" class="headerlink" title="15.Java中IO流分几种"></a>15.Java中IO流分几种</h4><p>按照功能来分：  </p>
<ul>
<li>输入流</li>
<li>输出流</li>
</ul>
<p>按照类型来分：</p>
<ul>
<li>字节流</li>
<li>字符流</li>
</ul>
<p>字节流和字符流的区别是： 字节流按照8位传输，以字节为单位，输入输出数据；字符流按照16位传输，以字符为单位；</p>
<h4 id="16-BIO、NIO、AIO有什么区别"><a href="#16-BIO、NIO、AIO有什么区别" class="headerlink" title="16.BIO、NIO、AIO有什么区别"></a>16.BIO、NIO、AIO有什么区别</h4><ul>
<li>BIO：Block IO同步阻塞式IO，就是我们平常使用的传统IO，他的特点是模式简单，使用方便，并发处理能力低。</li>
<li>NIO：New IO同步非阻塞式IO，是传统IO的升级，客户端和服务器通过Channel（通道）通讯，实现了多路复用。</li>
<li>AIO：Asynchronous IO 是NIO的升级，也叫NIO2，实现了异步非堵塞IO，异步IO的操作基于事件和回调机制。</li>
</ul>
<h4 id="17-Files的常用方法都有哪些"><a href="#17-Files的常用方法都有哪些" class="headerlink" title="17.Files的常用方法都有哪些"></a>17.Files的常用方法都有哪些</h4><ul>
<li>Files.exists(): 检测文件路径是否存在。</li>
<li>Files.createFile(): 创建文件。</li>
<li>Files.createDirectory(): 创建文件夹。</li>
<li>Files.delete(): 删除一个文件或者目录。</li>
<li>Files.copy(): 复制文件。</li>
<li>Files.move(): 移动文件。</li>
<li>Files.size(): 查看文件个数。</li>
<li>Files.read(): 读取文件。</li>
<li>Files.write(): 写入文件。</li>
</ul>
<h4 id="抽象类与接口的区别2"><a href="#抽象类与接口的区别2" class="headerlink" title="抽象类与接口的区别2"></a>抽象类与接口的区别2</h4><ol>
<li>修饰符不同。一个是abstract，一个是interface。</li>
<li>抽象类中可以有不是抽象的方法，接口当中必须全是抽象方法（jdk1.8之前成立）</li>
<li>接口中变量全部默认是public static final修饰的常量，抽象类当中不限制。</li>
<li>抽象类继承（extends），接口实现（implements）。</li>
<li>抽象类中只能被单继承，接口可以有多实现。</li>
</ol>
<h3 id="容器（二）"><a href="#容器（二）" class="headerlink" title="容器（二）"></a>容器（二）</h3><h4 id="18-Java容器都有哪些"><a href="#18-Java容器都有哪些" class="headerlink" title="18.Java容器都有哪些"></a>18.Java容器都有哪些</h4><ul>
<li>Collection<ul>
<li>List<ul>
<li>Vector<ul>
<li>Stack</li>
</ul>
</li>
<li>ArrayList</li>
<li>LinkedLIst</li>
</ul>
</li>
<li>Queue<ul>
<li>LinkedList</li>
<li>PriorityQueue</li>
</ul>
</li>
<li>Set<ul>
<li>HashSet<ul>
<li>LinkHashSet</li>
</ul>
</li>
<li>TreeSet</li>
</ul>
</li>
</ul>
</li>
<li>Map<ul>
<li>HashMap</li>
<li>TreeMap</li>
</ul>
</li>
</ul>
<h4 id="19-Collection和Collections有什么区别"><a href="#19-Collection和Collections有什么区别" class="headerlink" title="19.Collection和Collections有什么区别"></a>19.Collection和Collections有什么区别</h4><ul>
<li>java.util.Collection是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操作的通用方法。Collection接口再Java类库当中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方法，其直接继承接口有List与Set。</li>
<li>Collections则是集合类的一个工具类、帮助类，其中提供了一系列静态方法，用于集合元素进行排序、搜索以及线程安全等各种操作。</li>
</ul>
<h4 id="20-List、Set、Map之间的区别是什么"><a href="#20-List、Set、Map之间的区别是什么" class="headerlink" title="20.List、Set、Map之间的区别是什么"></a>20.List、Set、Map之间的区别是什么</h4><table>
  <thead>
   <tr>
      <th>比较</th>
      <th>List</th>
      <th>Set</th>
      <th>Map</th>
   </tr>
  </thead>
  <tbody>
    <tr>
      <th>继承接口</th>
      <td>Collection</td>
      <td>Collection</td>
      <td></td>
    </tr>
    <tr>
      <th>常见实现类</th>
      <td>AbstractList(其常用子类有ArrayList、LinkedList、Vector)</td>
      <td>AbstractSet（其常用子类有HashSet、LinkedHashSet、TreeSet）</td>
      <td>HashMap、HashTable</td>
    </tr>
    <tr>
      <th>常用方法</th>
      <td>add()、remove()、clear()、get()、contains()、size()</td>
      <td>add()、remove()、clear()、contains()、size()</td>
      <td>put()、get()、remove()、clear()、containsKey()、containsValue()、keySet()、values()、size()</td>
    </tr>
    <tr>
      <th>元素</th>
      <td>可重复</td>
      <td>不可重复（用equals判断）</td>
      <td>不可重复</td>
    </tr>
    <tr>
      <th>顺序</th>
      <td>有序</td>
      <td>无需（实际上用HashCode决定）</td>
      <td></td>
    </tr>
    <tr>
      <th>线程安全</th>
      <td>Vector线程安全</td>
      <td></td>
      <td>HashTable线程安全</td>
    </tr>
  </tbody>
</table>

<h4 id="21-HashMap和HashTable有什么区别"><a href="#21-HashMap和HashTable有什么区别" class="headerlink" title="21.HashMap和HashTable有什么区别"></a>21.HashMap和HashTable有什么区别</h4><ul>
<li>HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。</li>
<li>HashTable是同步的，而hashMap是非同步的，效率上要比HashTable要高</li>
<li>hashMap允许空键值，而HashTable不允许。</li>
</ul>
<h4 id="22-如何决定使用HashMap还是TreeMap"><a href="#22-如何决定使用HashMap还是TreeMap" class="headerlink" title="22.如何决定使用HashMap还是TreeMap"></a>22.如何决定使用HashMap还是TreeMap</h4><p>对于在Map中插入、删除和定位这类操作，HashMap是最好的选择。<br>然后，假如你需要对一个有序的key集合进行遍历，TreeMap是更好的选择。<br>基于你的collection的大小，也许向HashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历。</p>
<h4 id="23-说一下HashMap的实现原理"><a href="#23-说一下HashMap的实现原理" class="headerlink" title="23.说一下HashMap的实现原理"></a>23.说一下HashMap的实现原理</h4><p>HashMap概述： HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是他不保证该顺序恒久不变。  </p>
<p>HashMap的数据结构：在Java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用）。所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个”链表散列”的数据结构，即数组和链表的结合体。  </p>
<p>当我们往HashMap当中put元素时，<br>首先根据key的hashCode重新计算Hash值，<br>根据Hash值得到这个元素在数组当中的位置（下标），<br>如果该数组在该位置上已经存放了其他元素，那么在这个位置上的元素将以链表的形式存放，新加入的放在链表头部，最先加入的放在链表尾部，如果数组该位置没有元素，那么就直接将该元素放到该数组的该位置上。  </p>
<p>需要注意Jdk1.8中对HashMap的实现做了优化，当链表当中的节点数据超过了八个之后，该链表会转为红黑树来提高查询效率，从原来的O(n)到O(logn).</p>
<h4 id="24-说一下HashSet的实现原理"><a href="#24-说一下HashSet的实现原理" class="headerlink" title="24.说一下HashSet的实现原理"></a>24.说一下HashSet的实现原理</h4><ul>
<li>HashSet底层由HashMap实现</li>
<li>HashSet的值存放在HashMap的key上</li>
<li>HashMap的value统一为PRESENT present</li>
</ul>
<h4 id="25-ArrayList和LinkedList的区别是什么"><a href="#25-ArrayList和LinkedList的区别是什么" class="headerlink" title="25.ArrayList和LinkedList的区别是什么"></a>25.ArrayList和LinkedList的区别是什么</h4><p>最明显的区别是ArrayList底层的数据结构是数组，支持随机访问。<br>而LinkedList的底层数据结构是双向循环链表，不支持随机访问。<br>使用下标访问下一个元素，ArrayList的时间复杂度是O(1)，而LinkedList的时间复杂度是O(n)。</p>
<h4 id="26-如何实现数组和List之间的转换"><a href="#26-如何实现数组和List之间的转换" class="headerlink" title="26.如何实现数组和List之间的转换"></a>26.如何实现数组和List之间的转换</h4><ul>
<li>List转换成为数组：调用ArrayList的toArray()方法</li>
<li>数组转换成为List：调用Arrays的asList方法</li>
</ul>
<h4 id="27-ArrayList和Vector的区别是什么"><a href="#27-ArrayList和Vector的区别是什么" class="headerlink" title="27.ArrayList和Vector的区别是什么"></a>27.ArrayList和Vector的区别是什么</h4><ul>
<li>Vector是同步的，而ArrayList不是。然后，如果你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList。</li>
<li>ArrayList比Vector快，Vector因为有同步，不会过载。</li>
<li>ArrayList更加通用，因为我们可以使用Collections工具类轻易的获取同步列表和只读列表。</li>
</ul>
<h4 id="28-Array和ArrayList有何区别"><a href="#28-Array和ArrayList有何区别" class="headerlink" title="28.Array和ArrayList有何区别"></a>28.Array和ArrayList有何区别</h4><ul>
<li>Array可以容纳基本类型和对象，而ArrayList只能够容纳对象。</li>
<li>Array是指定大小后不可变的，而ArrayList是可变的。</li>
<li>Array没有提供ArrayList那么多功能，比如addAll、removeAll和iterator等。</li>
</ul>
<h4 id="29-在Queue中poll-和remove-有什么区别"><a href="#29-在Queue中poll-和remove-有什么区别" class="headerlink" title="29.在Queue中poll()和remove()有什么区别"></a>29.在Queue中poll()和remove()有什么区别</h4><p>poll()和remove()都是从队列当中取出一个元素，但是poll()在获取元素失败的时候会返回空，但是remove()在获取元素失败的时候会抛出异常。</p>
<h4 id="30-哪些集合类是线程安全的"><a href="#30-哪些集合类是线程安全的" class="headerlink" title="30.哪些集合类是线程安全的"></a>30.哪些集合类是线程安全的</h4><ul>
<li>Vector：就比ArrayList多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在Web应用中，特别是前端页面，往往效率（页面响应速度）是优先考虑的。</li>
<li>stack：堆栈类，先进后出。</li>
<li>HashTable：就比HashMap多了个线程安全。</li>
<li>enumeration：枚举，相当于迭代器。</li>
</ul>
<h4 id="31-迭代器iterator是什么"><a href="#31-迭代器iterator是什么" class="headerlink" title="31.迭代器iterator是什么"></a>31.迭代器iterator是什么</h4><p>迭代器是一种设计模式。<br>它是一个对象。<br>他可以遍历并选择序列中的对象，而开发人员不需要了解序列的底层结构，迭代器通常被称为”轻量级”对象，因为创建它的代价小。</p>
<h4 id="32-Iterator怎么使用，有什么特点"><a href="#32-Iterator怎么使用，有什么特点" class="headerlink" title="32.Iterator怎么使用，有什么特点"></a>32.Iterator怎么使用，有什么特点</h4><p>Java中的Iterator功能比较简单，并且只能单向移动。  </p>
<ol>
<li>使用方法Iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterator接口，被Collection继承。</li>
<li>使用next()获得序列中的下一个元素。</li>
<li>使用hasNext()检查序列中是否还有元素。</li>
<li>使用remove()将迭代器新返回的元素删除。</li>
</ol>
<p>iterator是Java迭代器最简单的实现，为List设计的LIstIterator具有更多的功能，他可以从两个方向遍历List，也可以从List中插入和删除元素。</p>
<h4 id="Iterator和ListIterator有什么区别"><a href="#Iterator和ListIterator有什么区别" class="headerlink" title="Iterator和ListIterator有什么区别"></a>Iterator和ListIterator有什么区别</h4><ul>
<li>Iterator可用来遍历Set和List集合，但是LIstIterator只能用来遍历List。</li>
<li>Iterator对集合只能是向前遍历，ListIterator既可以向前遍历也可以向后遍历。</li>
<li>LIstIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引等。</li>
</ul>
<h4 id="HashMap原理"><a href="#HashMap原理" class="headerlink" title="HashMap原理"></a>HashMap原理</h4><p>HashMap的原理：<br>众所周知，HashMap是用来存储Key-Value键值对的一种集合，这个键值对也叫做Entry，而每个Entry都是存储在数组当中，因此这个数组就是HashMap的主干。  </p>
<p>HashMap数组中的每一个元素的初始值都是NULL。  </p>
<ol>
<li>put()方法的实现原理  </li>
</ol>
<p>HashMap的一种重要的方法是put()方法，当我们调用put()方法时，比如hashMap.put(“java”,0); 此时要插入一个Key值为”java”的元素，这时首先需要一个Hash函数来确定这个Entry的插入位置，设为index，即index=hash(“java”),假设求出的index值为2，那么这个Entry就会插入到数组索引为2的位置。  </p>
<p>但是HashMap的长度肯定是有限的，当插入的Entry越来越多时，不同的Key值通过哈希函数算出来的index肯定会有冲突，此时就可以利用链表来解决。  </p>
<p>其实HashMap数组的每一个元素不只是一个Entry对象，也是一个链表的头结点，每一个Entry对象通过Next指针指向下一个Entry对象，这样，当新的Entry的哈市值与之前的存在冲突时，只需要插入到对应点链表即可。  </p>
<p>需要注意的是，新来的Entry节点采用的是“头插法”，而不是直接插入在链表的尾部，这时候因为HashMap的发明者认为，新插入的节点被查找出来的可能性更大。  </p>
<ol start="2">
<li>get()方法的实现原理  </li>
</ol>
<p>get()方法用来根据key值来查找对应点的value，当调用get方法时，比如hashMap.get(“apple”)，这时同样要对key值做一次Hash映射，算出其对一样的index值，即index=hash(“apple”)。前面说到的可能存在hash冲突，同一个位置可能存在多个Entry，这时就要从对应链表的头结点开始，一个个向下查找，知道找到对应的Key值，这样就获得了索要查找的键值对。例如假设我们要找的Key值是”apple”：  </p>
<ul>
<li>第一步，算出key值”apple”的hash值，假设为2.</li>
<li>第二步，在数组中查找索引为2的位置，此时找到头结点为Entry6,Entry6的key值是banana，不是我们要找的值。</li>
<li>第三部，查找Entry6的Next节点，这里为Entry1,它的key值为apple,使我们要查找的值，这样就找到了对应的价值对，结束。  </li>
</ul>
<p>在jdk1.8之后，hashMap的链表数量如果超过8个，那么就会自动转成红黑树了。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题</title>
    <url>/2020/03/23/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h2><p>Spring是一个开源的Java EE开发框架。<br>Spring框架的核心功能可以应用在任何java应用程序中，但对Java EE平台上的Web应用程序有更好的扩展性。<br>Spring框架的目标是使得Java EE应用程序的开发更加简捷，通过使用POJO为基础的变成模型促进良好的变成风格。  </p>
<h2 id="Spring有哪些优点"><a href="#Spring有哪些优点" class="headerlink" title="Spring有哪些优点"></a>Spring有哪些优点</h2><ul>
<li>轻量级： Spring在大小和透明性方面觉得属于轻量级的，基础版本的Spring框架大约只有2MB。</li>
<li>控制反转（IOC）： SPring使用控制反转技术实现了松耦合。依赖被注入到对象，而不是创建或者寻找依赖对象。</li>
<li>面向切面编程（AOP）: Spring支持面向切面编程，同时把应用的业务逻辑与系统的服务分离开来。</li>
<li>容器： Spring包含并管理应用程序对象的配置以及生命周期。</li>
<li>MVC框架：Spring的web框架是一个设计优良的web MVC框架，很好的取代了一些web框架。</li>
<li>事务管理： Spring对下至本地业务上至全局业务（JAT）提供了统一的事务管理接口。</li>
<li>异常处理： Spring提供一个方便的API将特定技术的异常（由JDBC，Hibernate，或者JDO抛出）转化为一致的、Unchecked异常。</li>
</ul>
<h2 id="Spring事务实现方式"><a href="#Spring事务实现方式" class="headerlink" title="Spring事务实现方式"></a>Spring事务实现方式</h2><ul>
<li>编程式事务管理： 这意味着你可以通过编程的方式管理事务，这种方式带来了很大的灵活性，但是很难维护。</li>
<li>声明式事务管理： 这种方式意味着你可以将事务和业务代码分离。你只需要通过注解或者XML配置管理事务。</li>
</ul>
<h2 id="Spring框架的事务管理有哪些优点"><a href="#Spring框架的事务管理有哪些优点" class="headerlink" title="Spring框架的事务管理有哪些优点"></a>Spring框架的事务管理有哪些优点</h2><ul>
<li>它为不同的事务API（如JTA,JDBC,Hibernate,JPA,和JDO）提供了统一的编程模型。</li>
<li>它为编程式事务管理提供了一个简单的API而非一系列复杂的事务API（如JTA）</li>
<li>它支持声明式事务管理。</li>
<li>它可以和Spring的多种数据访问技术很好的融合。</li>
</ul>
<h2 id="Spring事务定义的传播规则"><a href="#Spring事务定义的传播规则" class="headerlink" title="Spring事务定义的传播规则"></a>Spring事务定义的传播规则</h2><ul>
<li>propagation_required: 支持当前事务，如果当前没有事务，就建一个事务。这是最常见的选择。</li>
<li>propagation_supports: 支持当前事务，如果当前没有事务，就以非事务方式执行。</li>
<li>propagation_mandatory: 支持当前事务，如果当前没有事务，就抛出异常。</li>
<li>propagation_requires_new: 新建事务，如果当前存在事务，把当前事务挂起。</li>
<li>propagation_not_supported: 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li>
<li>propagation_never: 以非事务方式执行，如果当前存在事务，则抛出异常。</li>
<li>propagation_nested: 如果当前存在事务，则在嵌套式事务内执行。如果当前没有事务，则进行与propagation_required类似的操作，即支持当前事务，如果当前没有事务，就建一个事务。这是最常见的选择。</li>
</ul>
<h2 id="Spring事务底层原理"><a href="#Spring事务底层原理" class="headerlink" title="Spring事务底层原理"></a>Spring事务底层原理</h2><h3 id="划分处理单元—-ioc"><a href="#划分处理单元—-ioc" class="headerlink" title="划分处理单元—-ioc"></a>划分处理单元—-ioc</h3><p>由于Spring解决的问题是对【单个数据库】进行【局部事务】处理的。<br>具体的实现首先用Spring的IOC划分了【事务处理单元】。<br>并且将对事务的各种配置放到了ioc容器中。<br>（设置事务管理器，设置事务的传播特性以及隔离机制）。  </p>
<h3 id="AOP拦截需要进行事务处理的类"><a href="#AOP拦截需要进行事务处理的类" class="headerlink" title="AOP拦截需要进行事务处理的类"></a>AOP拦截需要进行事务处理的类</h3><p>【Spring事务处理模块】是通过【AOP】功能来实现【声明式事务】处理的，<br>具体操作（比如事务实行的配置和读取，事务对象的抽象），用TransactionProxyFactoryBean接口来使用AOP功能，生成proxy代理对象，通过TransactionInterceptor完成对代理方法的拦截，将事务处理的功能编织到拦截的方法中。读取ioc容器事务配置属性，转化为Spring事务处理需要的内部数据结构（TransactionAttributeSourceAdvisor），转化为TransactionAttribute表示的数据对象。</p>
<h2 id="对事务处理实现（事务的生成、提交、回滚、挂起）"><a href="#对事务处理实现（事务的生成、提交、回滚、挂起）" class="headerlink" title="对事务处理实现（事务的生成、提交、回滚、挂起）"></a>对事务处理实现（事务的生成、提交、回滚、挂起）</h2><p>Spring委托给具体的事务处理器实现。<br>实现了一个抽象和适配。<br>适配的具体事务处理器：DataSource数据源支持、Hibernate数据源事务处理支持、JDO数据源事务处理支持、JPA、JTA数据源事务处理支持。<br>这些支持都是通过设计PlatformTransactionManager、AbstractPlatformTransaction一些列事务处理的支持。<br>为常用数据源支持提供了一系列TransactionManager。</p>
<ul>
<li>结合<br>PlatformTransactionManager实现了TransactionInterception接口，让其与TransactionProxyFactoryBean结合起来，形成一个Spring声明式事务处理的设计体系。</li>
</ul>
<h2 id="Spring-MVC运行流程"><a href="#Spring-MVC运行流程" class="headerlink" title="Spring MVC运行流程"></a>Spring MVC运行流程</h2><ol>
<li>第一步：发起请求到前端控制器（DispatcherServlet）</li>
<li>第二步：前端控制器请求HandlerMapping查找Handler（可以根据XML配置、注解进行查找）</li>
<li>第三步：处理器映射器HandlerMapping向前端控制器返回Handler</li>
<li>第四步：前端控制器调用处理器适配器去执行Handler</li>
<li>第五步：处理器适配器去执行Handler</li>
<li>第六步：Handler执行完成给适配器返回ModelAndView</li>
<li>第七步：处理器适配器向前端控制器返回ModelAndView（ModelAndView是SpringMVC框架的一个底层对象，包括Model和View）</li>
<li>第八步：前端控制器请求视图解析器去进行视图解析（根据逻辑视图名解析成真正的视图（jsp））</li>
<li>第九步：视图解析器向前端控制器返回View</li>
<li>前端控制器进行视图渲染（视图渲染将模型数据（在ModelAndView对象中）填充到Request域）</li>
<li>前端控制器向用户响应结果</li>
</ol>
<h2 id="BeanFactory和ApplicationContext有什么区别"><a href="#BeanFactory和ApplicationContext有什么区别" class="headerlink" title="BeanFactory和ApplicationContext有什么区别"></a>BeanFactory和ApplicationContext有什么区别</h2><p>ApplicationContext提供了一种解决文档信息的方法，一种加载文件资源的方式（如图片），他们可以向监听他们的Beans发送消息。<br>另外，容器或者容器中的Beans的操作，这些必须以Bean工厂的编程方式处理的操作可以在应用上下文中以声明的方式处理。<br>应用上下文实现了MessageSource，该接口用于获取本地消息，实际的实现是可选的。  </p>
<ul>
<li>相同点：两者都是通过xml配置文件加载Bean，ApplicationContext和BeanFactory相比，提供了更多的扩展功能。</li>
<li>不同点：BeanFactory是延迟加载，如果Bean的某一个属性没有注入，BeanFactory加载后，直至第一次使用调用getBean方法才会报异常；而ApplicationContext则在初始化自身是检验，这样有利于检查所依赖属性是否注入；通常情况狂下我们选择使用ApplicationContext。</li>
</ul>
<h2 id="什么是Spring-Beans"><a href="#什么是Spring-Beans" class="headerlink" title="什么是Spring Beans"></a>什么是Spring Beans</h2><p>Spring Beans是构成Spring应用核心的Java对象。<br>这些对象由Spring IOC容器实例化、组装、管理。<br>这些对象通过容器中配置的元数据创建。<br>例如，使用XML文件中的定义的创建。  </p>
<p>在Spring中创建的beans都是单例的beans。<br>在bean标签中国有一个属性为”singleton”<br>如果设为true,则该bean是单例的；如果设置为false，则该bean是原型bean。<br>Singleton属性默认设置为true。<br>因此，Spring框架中所有的bean都默认是单例bean。  </p>
<h2 id="说一下Spring中支持的bean作用域"><a href="#说一下Spring中支持的bean作用域" class="headerlink" title="说一下Spring中支持的bean作用域"></a>说一下Spring中支持的bean作用域</h2><p>Spring框架支持如下五种不同的作用域：</p>
<ul>
<li><p>singleton: 在Spring IOC容器中仅存在一个Bean实例，Bean以单实例的方式存在。</p>
</li>
<li><p>prototype：一个Bean可以定义多个实例。</p>
</li>
<li><p>request：每次Http请求都会创建一个新的Bean。该作用域仅适用于WebApplicationContext环境。</p>
</li>
<li><p>session：一个Http Session定义一个Bean。该作用于仅适用于WebApplicationContext环境。</p>
</li>
<li><p>globalSession：同一个全局Http Session定义一个Bean。该作用于同样仅适用于WebApplicationContext环境。</p>
</li>
<li><p>bean默认的scope属性是”singleton”</p>
</li>
</ul>
<h2 id="Spring-的单例实现原理"><a href="#Spring-的单例实现原理" class="headerlink" title="Spring 的单例实现原理"></a>Spring 的单例实现原理</h2><p>Spring框架对单例的支持是采用单例注册表的方式进行实现的，而这个注册表的缓存是HashMap对象，如果配置文件中的配置信息不要求使用单例Spring会采用新建实例的方式返回对象实例。</p>
<h2 id="解释Spring框架中Bean的生命周期"><a href="#解释Spring框架中Bean的生命周期" class="headerlink" title="解释Spring框架中Bean的生命周期"></a>解释Spring框架中Bean的生命周期</h2><ol>
<li>容器启动</li>
<li>实例化Bean对象</li>
<li>设置对象属性</li>
<li>调用BeanNameAware的setBeanName()方法</li>
</ol>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>In the Supermarket</title>
    <url>/2020/03/21/%E8%8B%B1%E8%AF%AD/lesson3/</url>
    <content><![CDATA[<h2 id="Learn-amp-Talk-I"><a href="#Learn-amp-Talk-I" class="headerlink" title="Learn &amp; Talk I"></a>Learn &amp; Talk I</h2><h3 id="Chapter-1-Shopping"><a href="#Chapter-1-Shopping" class="headerlink" title="Chapter 1 Shopping"></a>Chapter 1 Shopping</h3><h4 id="Lesson-3-In-the-Supermarket"><a href="#Lesson-3-In-the-Supermarket" class="headerlink" title="Lesson 3 In the Supermarket"></a>Lesson 3 In the Supermarket</h4><blockquote>
<p>at the bottom of the following pages:T1=teaching instructions;T=teacher;S=student</p>
</blockquote>
<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul>
<li><p>part <big>A</big>. Let’s Learn (12 mins)</p>
</li>
<li><p>part <big>B</big>. Let’s Talk (12 mins)</p>
</li>
<li><p>part <big>C</big>. Review (1 min)</p>
</li>
</ul>
<blockquote>
<p>Learning Objectives</p>
</blockquote>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">学习目标：</span><br><span class="line"><span class="number">4</span> <span class="built_in">words</span> <span class="keyword">about</span> <span class="string">"supermarket shopping"</span> | <span class="number">4</span>个和<span class="string">"超市购物"</span>相关的单词</span><br><span class="line">Expressions <span class="keyword">for</span> <span class="string">"supermarket"</span> | <span class="string">"超市购物"</span>常用表达</span><br><span class="line">How <span class="keyword">to</span> talk <span class="keyword">about</span> topics related <span class="keyword">to</span> <span class="string">"supermarket shopping"</span> | 谈论和<span class="string">"超市购物"</span>相关的话题</span><br></pre></td></tr></table></figure>

<h2 id="part-A-Let’s-Learn"><a href="#part-A-Let’s-Learn" class="headerlink" title="part A. Let’s Learn"></a>part A. Let’s Learn</h2><h3 id="Vocabulary-4-mins"><a href="#Vocabulary-4-mins" class="headerlink" title="Vocabulary (4 mins)"></a>Vocabulary (4 mins)</h3><table>
<thead>
<tr>
<th>vocabulary</th>
<th>means</th>
<th>sentense</th>
<th>etc</th>
<th>phrase</th>
</tr>
</thead>
<tbody><tr>
<td>toothbrush</td>
<td>a small brush with a long handle that you use to clean your teeth</td>
<td>e.g. How much is the <u><strong><em>toothbrush</em></strong></u> .</td>
<td>toothpaste 牙膏；mouthwash 漱口水</td>
<td></td>
</tr>
<tr>
<td>promote</td>
<td>to encourage people to like,buy,use,do,or support something 宣传，促销</td>
<td>e.g. The saleswoman is <u><strong><em>promoting</em></strong></u> cookies.</td>
<td>promotion n.促销（often on posters 常做海报标语）</td>
<td></td>
</tr>
<tr>
<td>include</td>
<td>to contain something as a part of something else,or to make something part of something else 包括</td>
<td>e.g. This gift pack(礼包) <u><strong><em>includes</em></strong></u> toothbrushes,toothpaste, and mouthwash.</td>
<td></td>
<td></td>
</tr>
<tr>
<td>aisle</td>
<td>a long,narrow space between the rows of shelves in a large shop （商店货架间的）通道</td>
<td>e.g. You’ll find toothbrushes in the fourth <u><strong><em>aisle</em></strong></u> .</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h3><h4 id="Role-play-the-dialog-with-your-teacher-twice-and-learn-the-highlighted-expressions-by-heart-和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达"><a href="#Role-play-the-dialog-with-your-teacher-twice-and-learn-the-highlighted-expressions-by-heart-和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达" class="headerlink" title="Role-play the dialog with your teacher twice,and learn the highlighted expressions by heart.和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达"></a>Role-play the dialog with your teacher twice,and learn the highlighted expressions by heart.和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达</h4><h5 id="（Mark-is-choosing-a-gift-for-His-girlfriend-in-a-jewelry-珠宝-store-）"><a href="#（Mark-is-choosing-a-gift-for-His-girlfriend-in-a-jewelry-珠宝-store-）" class="headerlink" title="（Mark is choosing a gift for His girlfriend in a jewelry(珠宝) store.）"></a>（Mark is choosing a gift for His girlfriend in a jewelry(珠宝) store.）</h5><ul>
<li><strong><em>Salesman:</em></strong> Have a look at these toothbrushes.They are being promoted in this gift pack now.</li>
<li><strong><em>Mark:</em></strong> What’s included in the gift pack ?</li>
<li><strong><em>Salesman:</em></strong> Toothbrushes,toothpaste,mouthwash and a cup .</li>
<li><strong><em>Mark:</em></strong> It’s good deal. Where can i find shower gel(沐浴露).</li>
<li><strong><em>Salesman:</em></strong> It’s in aisle 10.</li>
</ul>
<blockquote>
<p>It’s good deal. 直译：这是笔好交易./意译：这挺划算的.</p>
</blockquote>
<h2 id="part-B-Let’s-Talk"><a href="#part-B-Let’s-Talk" class="headerlink" title="part B. Let’s Talk"></a>part B. Let’s Talk</h2><h3 id="Conversation"><a href="#Conversation" class="headerlink" title="Conversation"></a>Conversation</h3><h4 id="Suppose-you’re-choosing-a-gift-in-a-jewelry-store-Use-th-vocabulary-and-expressions-you’ve-learned-in-part-A-to-complete-the-following-conversation-假设你在商店里挑礼物。运用在第一部分学到的词汇和表达将一下情境对话补充完整"><a href="#Suppose-you’re-choosing-a-gift-in-a-jewelry-store-Use-th-vocabulary-and-expressions-you’ve-learned-in-part-A-to-complete-the-following-conversation-假设你在商店里挑礼物。运用在第一部分学到的词汇和表达将一下情境对话补充完整" class="headerlink" title="Suppose you’re choosing a gift in a jewelry store. Use th vocabulary and expressions you’ve learned in part A to complete the following conversation. 假设你在商店里挑礼物。运用在第一部分学到的词汇和表达将一下情境对话补充完整"></a>Suppose you’re choosing a gift in a jewelry store. Use th vocabulary and expressions you’ve learned in part A to complete the following conversation. 假设你在商店里挑礼物。运用在第一部分学到的词汇和表达将一下情境对话补充完整</h4><blockquote>
<p>Hints<br><strong><em>aisle</em></strong><br><strong><em>It’s good deal</em></strong><br><strong><em>toothbrush</em></strong><br><strong><em>What’s included in the pack?</em></strong><br><strong><em>promote</em></strong></p>
</blockquote>
<ul>
<li><strong><em>A:</em></strong> Excuse me. Where can i find toothbrush ?</li>
<li><strong><em>B:</em></strong> In aisle 4. Follow me.</li>
<li><strong><em>A:</em></strong> Thanks.</li>
<li><strong><em>B:</em></strong> Have a look at this pack. It’s being promote and it is selling well.</li>
<li><strong><em>A:</em></strong> What’s included in the pack ?</li>
<li><strong><em>B:</em></strong> Toothbrushes,toothpaste and mouthwash. They’re only 25 yuan in total(合计).</li>
<li><strong><em>A:</em></strong> It’s good deal.</li>
</ul>
<h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><h4 id="Talk-with-your-teacher-about-the-following-question-Refer-to-the-hints-if-necessary-和老师一起讨论一下问题。可以参考方框中的提示。"><a href="#Talk-with-your-teacher-about-the-following-question-Refer-to-the-hints-if-necessary-和老师一起讨论一下问题。可以参考方框中的提示。" class="headerlink" title="Talk with your teacher about the following question. Refer to the hints if necessary.和老师一起讨论一下问题。可以参考方框中的提示。"></a>Talk with your teacher about the following question. Refer to the hints if necessary.和老师一起讨论一下问题。可以参考方框中的提示。</h4><ul>
<li>1.When are things in the supermarket promoted in your city? Will you by a lot when they’re being promoted? Why?</li>
</ul>
<blockquote>
<p>Hints:<br><strong><em>around hoildays like Christmas,Women’s Day…</em></strong><br><strong><em>will by a lot-&gt;cheap/It’s a good deal…</em></strong><br><strong><em>won’t buy a lot-&gt;waste</em></strong></p>
</blockquote>
<blockquote>
<p>Hints:<br><strong><em>toothbrushes</em></strong><br><strong><em>aisle</em></strong><br><strong><em>promoted</em></strong><br><strong><em>What’s included in the pack</em></strong><br><strong><em>It’s a good deal</em></strong></p>
</blockquote>
<ul>
<li>2.How often do you go to the supermarket? What do you usually buy in the supermarket?</li>
</ul>
<blockquote>
<p>Hints:<br><strong><em>every day/every week/when i need to buy</em></strong><br><strong><em>thins/once in a while(时不时，偶尔)…</em></strong><br><strong><em>bread/fruit/drinks/showr gel…</em></strong></p>
</blockquote>
<ul>
<li>Have you ever bought(buy的过去分词) things in an online supermarket? Do you like it? Why or Why not?</li>
</ul>
<blockquote>
<p>Hints:<br><strong><em>yes-&gt;anytime and anywhere / no need to carry the heavy shopping bags…</em></strong><br><strong><em>no-&gt;wait for days for things to come…</em></strong></p>
</blockquote>
<h2 id="part-c-Review"><a href="#part-c-Review" class="headerlink" title="part c. Review"></a>part c. Review</h2><p>In this lesson,you’ve learned</p>
<ul>
<li>4 words about “shopping in the supermarket”</li>
</ul>
<blockquote>
<p>toothbrush<br>promote<br>include<br>aisle</p>
</blockquote>
<ul>
<li>commonly used expressions for buying gifts</li>
</ul>
<blockquote>
<p>What’s included in the gift pack?<br>It’s good deal.</p>
</blockquote>
<ul>
<li>how to talk about topics related to “supermarket shopping”</li>
</ul>
<h2 id="Further-Study"><a href="#Further-Study" class="headerlink" title="Further Study"></a>Further Study</h2><h3 id="Listen-and-Learn"><a href="#Listen-and-Learn" class="headerlink" title="Listen and Learn"></a>Listen and Learn</h3><blockquote>
<p>save up to 40% 打六折<br>shopping list 购物清单<br>coupon 优惠券</p>
</blockquote>
<ul>
<li>There are lots of items on sale today.</li>
<li>That chair is for sale.</li>
</ul>
<p>(both highlighted phrases means “sold at a lower price”上述加粗词组均有“打特价”之意)</p>
<blockquote>
<p>closing down sale 结业大甩卖</p>
</blockquote>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">hello,teacher</span><br><span class="line">ok ,i <span class="keyword">am</span> introducing myself <span class="keyword">to</span> you.</span><br><span class="line"><span class="keyword">first</span>,my chinese name <span class="keyword">is</span> fengshana,i <span class="keyword">am</span> not have englishname,<span class="keyword">so</span>,you can <span class="keyword">call</span> <span class="keyword">me</span> shana.</span><br><span class="line">i <span class="keyword">am</span> twenty yeas old.</span><br></pre></td></tr></table></figure>

<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">like</span> <span class="built_in">Double</span> Twelve Festival,<span class="keyword">or</span> <span class="built_in">Double</span> Eleven Festival <span class="keyword">on</span> internet Shopping <span class="keyword">by</span> TaoBao apps.<span class="keyword">if</span> i have more money,i will buy a lot <span class="keyword">and</span> useful things <span class="keyword">for</span> <span class="keyword">me</span> <span class="keyword">and</span> my family <span class="keyword">when</span> they<span class="comment">'re being promoted. because something usually is expansive,but,if in the some festivals,these will be cheaper than usually. so, the time ,we are not go to the buy, when  we are going to wait.It's good deal.of course, in generally,if i need go to the trip or go to the outside working,  i will buy something to prepare.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">when i need <span class="built_in">to</span> buy something,so i will go <span class="built_in">to</span> <span class="keyword">the</span> supermarket. </span><br><span class="line">i will <span class="keyword">with</span> my friend buy some vegetables <span class="keyword">and</span> some  fruits <span class="keyword">in</span> <span class="keyword">the</span> supermarket.</span><br><span class="line">usually, <span class="keyword">in</span> <span class="keyword">the</span> evening,<span class="keyword">at</span> <span class="keyword">the</span> <span class="number">8</span><span class="string">'clock,9'</span>clock. we go <span class="built_in">to</span> <span class="keyword">the</span> supermarket <span class="keyword">for</span> preparing our dinner.but ,today,i am <span class="keyword">not</span> go <span class="built_in">to</span> <span class="keyword">the</span> supermarket.because my friends need <span class="built_in">to</span> working <span class="keyword">in</span> her company. so ,today ,<span class="keyword">in</span> <span class="keyword">the</span> evening, i eat some noodles <span class="keyword">as</span> <span class="keyword">a</span> dinner.</span><br></pre></td></tr></table></figure>


<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">yes, i have. <span class="keyword">and</span> ,yes, i <span class="built_in">do</span>.</span><br><span class="line">because sometime <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">internet</span> shopping,online supermarket,i can compare <span class="keyword">the</span> store A<span class="string">',and store B,and c ,in these stores compare the same goods ,in price.and i think online supermarket'</span>s goods is cheaper than live supermarket. but have <span class="keyword">a</span> shortcoming,<span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">internet</span> shopping will be <span class="built_in">wait</span> <span class="keyword">for</span> days when you buy something <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">internet</span>.sometimes ,<span class="keyword">it</span><span class="string">'s slowly.sometimes,it'</span>s quickly.sure,when i received my something that i bought <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">internet</span>,i am very happy.looks like kids received sweet <span class="keyword">in</span> <span class="keyword">the</span> festival.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>第四节心态课</title>
    <url>/2020/03/18/%E5%BF%83%E6%80%81%E8%AF%BE/%E7%AC%AC%E5%9B%9B%E8%8A%82%E8%AF%BE/</url>
    <content><![CDATA[<p>朋友推荐我看的心态修炼课程：<a href="http://www.gulixueyuan.com/h5/index.html#/course/354" target="_blank" rel="noopener">http://www.gulixueyuan.com/h5/index.html#/course/354</a>   </p>
<p>第四堂课主题：很多人，一辈子就靠这两个字活着  </p>
<p>别人家孩子。  </p>
<p>你看看人家谁谁谁，你再看看你自己  </p>
<p>不能让孩子输在起跑线上  </p>
<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><h2 id="比较无处不在，比较学习"><a href="#比较无处不在，比较学习" class="headerlink" title="比较无处不在，比较学习"></a>比较无处不在，比较学习</h2><p>竞争的是全中国人民。  </p>
<h2 id="建议：把眼光放远一点，你未来的世界远比现在大"><a href="#建议：把眼光放远一点，你未来的世界远比现在大" class="headerlink" title="建议：把眼光放远一点，你未来的世界远比现在大"></a>建议：把眼光放远一点，你未来的世界远比现在大</h2><p>不要在需要埋头种地的时候，走错了别人家的花园，还以为自己收获了整个秋天，这才是最大的作死  </p>
<p>生活啊，从来都不会心平气和的和你招招手<br>生活只会一脚把你踢翻在地，然后说傻叉以后长点记性  </p>
<p>所以别因为比较而沾沾自喜或者郁郁寡欢  </p>
<p>如果要比，就和上个月的自己比，和以前的自己相比较  </p>
<h2 id="比较无处不在：比对象"><a href="#比较无处不在：比对象" class="headerlink" title="比较无处不在：比对象"></a>比较无处不在：比对象</h2><p>高不成低不就，难在了比较二字  </p>
<p>比较有时让人惶恐  </p>
<p>不要在千千万万的比较当中迷失自我。  </p>
<p>比较有时候就是用拉人下水的形式找认同感  </p>
<h2 id="比较无处不在：比较收入"><a href="#比较无处不在：比较收入" class="headerlink" title="比较无处不在：比较收入"></a>比较无处不在：比较收入</h2><p>比较是一种局限和狭隘，会让你变得不思进取  </p>
<p>人和人的差距，根源在于有的人总是喜欢通过比较降低自己的标准，然后躲在舒适圈，享安乐  </p>
<p>演好自己的角色，别成天盯着别人的剧本看，越是优秀的人越努力，越是富有的人越勤奋。</p>
<p>越是智慧的人越是谦卑学习。优秀的人总能看到比自己更好的。而平庸的人总能看到比自己更差的。<br>如果总是看到比自己优秀的人，说明自己可能在走上坡路，你总是看到和自己差不多的人，甚至更甚，说明自己正在混日子。<br>如果你是这个房间最聪明的人，那么自己一定是走错了房间。  </p>
<p>年龄越大越没有人会原谅你的穷。<br>现在的生活也许不是自己想要的，但是觉得是自己自找的。  </p>
<p>别成天在比较中安逸，生活里，不必要去苛求别人的理解和认同，因为别人也没有这些义务。  </p>
<h2 id="记住：今天所做的努力，不是为了让别人觉得自己了不起，而是为了能够让你打心里看得起自己。"><a href="#记住：今天所做的努力，不是为了让别人觉得自己了不起，而是为了能够让你打心里看得起自己。" class="headerlink" title="记住：今天所做的努力，不是为了让别人觉得自己了不起，而是为了能够让你打心里看得起自己。"></a>记住：今天所做的努力，不是为了让别人觉得自己了不起，而是为了能够让你打心里看得起自己。</h2><h2 id="最后：比较无处不在：比个屁"><a href="#最后：比较无处不在：比个屁" class="headerlink" title="最后：比较无处不在：比个屁"></a>最后：比较无处不在：比个屁</h2><p>比较让人愤愤不平。<br>世界上最好的安慰，并不是告诉对方一切都会好起来，而是愁眉苦脸的说，你哭个屁啊，你看我比你还惨  </p>
<h2 id="一起比惨-痛苦减半"><a href="#一起比惨-痛苦减半" class="headerlink" title="一起比惨 痛苦减半"></a>一起比惨 痛苦减半</h2><p>幸福是用来感觉不是用来比较  </p>
<p>知足是一种生活态度  </p>
<p>自己喜欢的东西就不要问别人好不好看，你的生活不会因为别人的话就变好了<br>自己的事情和别人没有关系  </p>
<p>石黑一雄：如果说有一件事是我鼓励你们大家去做的，那就是永远不要随波逐流，要超越我们周围那些低级和颓废的影响  </p>
]]></content>
      <categories>
        <category>心态</category>
      </categories>
      <tags>
        <tag>心态课程</tag>
      </tags>
  </entry>
  <entry>
    <title>第五节心态课</title>
    <url>/2020/03/18/%E5%BF%83%E6%80%81%E8%AF%BE/%E7%AC%AC%E4%BA%94%E8%8A%82%E8%AF%BE/</url>
    <content><![CDATA[<p>朋友推荐我看的心态修炼课程：<a href="http://www.gulixueyuan.com/h5/index.html#/course/354" target="_blank" rel="noopener">http://www.gulixueyuan.com/h5/index.html#/course/354</a>   </p>
<p>第五堂课主题：面对批评，你应该摆一个正确姿势  </p>
<p>懒惰是最可怕的事情<br>不牺牲短暂的享乐和安逸，就换不来长久的保障和幸福<br>找借口也很可怕<br>找借口会让自己失去机会<br>不能扛起责任无法付以重任  </p>
<h2 id="闻过则喜的心态"><a href="#闻过则喜的心态" class="headerlink" title="闻过则喜的心态"></a>闻过则喜的心态</h2><p>一味在意对方的态度和自己的感受就会忘了事情的根本所在<br>错了就是错了，面对批评输球不要输姿势。  </p>
<h2 id="永远感谢愿意花时间在你身上的人"><a href="#永远感谢愿意花时间在你身上的人" class="headerlink" title="永远感谢愿意花时间在你身上的人"></a>永远感谢愿意花时间在你身上的人</h2><p>他认识你。<br>你们之间有关系别人才会花时间批评你。<br>所以一定是你们之间有联系，尤其在你年轻的时候，多半是你有改进的空间<br>他的批评可以让你变得更好<br>所以错了就认，认了就改正。</p>
<h2 id="面对批评的心态应该是：把“为什么挨骂的总是我”变成“我能从这件事上学到什么”"><a href="#面对批评的心态应该是：把“为什么挨骂的总是我”变成“我能从这件事上学到什么”" class="headerlink" title="面对批评的心态应该是：把“为什么挨骂的总是我”变成“我能从这件事上学到什么”"></a>面对批评的心态应该是：把“为什么挨骂的总是我”变成“我能从这件事上学到什么”</h2><p>哪怕严厉苛刻，谦虚使人进步骄傲使人落后，有则改之无则加勉。<br>达尔文： 能够生存性下来的物种，并不是那些最强壮的，也不是最聪明的，而是那些对变化做出快速反应的<br>面对批评，正确地姿势应该是沉心静气的想一想我哪儿做错了。我该怎么改。<br>被批评不是坏事。  </p>
<p>因为在意，所以争吵。  </p>
<h2 id="如果你觉得批评是一种刁难，一开始就输了。如果你觉得批评是一种雕刻，迟早都会赢的。"><a href="#如果你觉得批评是一种刁难，一开始就输了。如果你觉得批评是一种雕刻，迟早都会赢的。" class="headerlink" title="如果你觉得批评是一种刁难，一开始就输了。如果你觉得批评是一种雕刻，迟早都会赢的。"></a>如果你觉得批评是一种刁难，一开始就输了。如果你觉得批评是一种雕刻，迟早都会赢的。</h2><p>凡事先在自身找原因。<br>不要苛求他人。千万不要遇事着急，冷静思考沉着应对才是面对批评正确的姿势。<br>如果大错酿成，最重要的不是埋怨推诿，而是面对和解决。  </p>
<h2 id="面对批评的职业心态"><a href="#面对批评的职业心态" class="headerlink" title="面对批评的职业心态"></a>面对批评的职业心态</h2><p>不要埋怨老板苛刻。老板骂你是希望快点成长。</p>
<h2 id="褒贬是买主，喝彩是闲人"><a href="#褒贬是买主，喝彩是闲人" class="headerlink" title="褒贬是买主，喝彩是闲人"></a>褒贬是买主，喝彩是闲人</h2><p>正是因为有所期待才会批评有所改进。</p>
<p>普京：没有实力的愤怒毫无意义。<br>道理：好学生做坏事不是没有被老师发现，老师可能只是装作看不见。对自己而言成长才是硬道理。  </p>
<p>苦练七十二变才能笑对八十一难。  </p>
<p>高情商：不断改过，默默自强。<br>解释就是掩饰，掩饰就是事实。  </p>
<p>可怕的不是犯错，而是不知道错在哪里还在盲目争辩。而是知错不改还重复犯错。  </p>
<p>所以错了第一步是认，第二步是改。  </p>
<p>第一次是不知道，第二次是不小心，第三次就是故意了。</p>
<h2 id="示弱有助于解决冲突。先认错后解释"><a href="#示弱有助于解决冲突。先认错后解释" class="headerlink" title="示弱有助于解决冲突。先认错后解释"></a>示弱有助于解决冲突。先认错后解释</h2><h2 id="越是不认错被骂的越多"><a href="#越是不认错被骂的越多" class="headerlink" title="越是不认错被骂的越多"></a>越是不认错被骂的越多</h2><p>骂你是因为你是负责的人。谁负责谁担责。这个是态度问题。  </p>
<p>狗咬人一口，人不能回咬回去。</p>
<p>有个好心态，先和自己将锻炼自己情商的时候到了，先克制情绪在解决问题。  </p>
<p>退一步海阔天空，退三分风平浪静。  </p>
<p>所以和蛮不讲理的人讲理先示弱表达部分认同，再换位思考给出方案，先礼后兵。  </p>
<p>发现问题是好事，解决问题是大事，没有问题是坏事。</p>
<p>成功是来自精准的勤奋而不是平庸的忙碌，批评是成长的机会，闻过则喜。  </p>
]]></content>
      <categories>
        <category>心态</category>
      </categories>
      <tags>
        <tag>心态课程</tag>
      </tags>
  </entry>
  <entry>
    <title>第二节心态课</title>
    <url>/2020/03/18/%E5%BF%83%E6%80%81%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%8A%82%E8%AF%BE/</url>
    <content><![CDATA[<p>朋友推荐我看的心态修炼课程：<a href="http://www.gulixueyuan.com/h5/index.html#/course/354" target="_blank" rel="noopener">http://www.gulixueyuan.com/h5/index.html#/course/354</a>   </p>
<p>第二堂课主题：别让你的情绪，变成你的性格缺陷  </p>
<p>不打招呼不说话，情绪写在脸上的人不能委以重任<br>田乐好像都跟我说过<br>先处理心情，再处理事情  </p>
<p>在职场掉眼泪能接受吗？<br>其实哪儿都不相信眼泪  </p>
<p>老板不会惯着你<br>所有的善良都需要有人买单的<br>老板为自己的错误买单<br>任何时候别干哭鼻子的事情，有泪不轻弹，有多少委屈自己打碎了牙吞进去<br>像个爷们<br>错了就要人，挨打就要立正，有问题就要解决问题，都是成年人，职业一点，一个人要是当地隐藏自己的情绪<br>高兴的时候就笑，不高兴的时候假装什么也没有发生<br>不要在人前表演你的情绪  </p>
<h2 id="第一点-你不应该是个煤气罐"><a href="#第一点-你不应该是个煤气罐" class="headerlink" title="第一点 你不应该是个煤气罐"></a>第一点 你不应该是个煤气罐</h2><p>嗓门大不代表你有道理，脸通红不代表可以主持正义<br>就是再好也有人挑刺<br>为什么要活在别人的评价里<br>别人只会关心你有用还是没用<br>从为人处世上来说，别做煤气罐一点就炸了  </p>
<p>要用体面的方式表达你的情绪，否则你的情绪会被视作性格的缺陷<br>可以表达愤怒，而不是愤怒的表达，这二者区别很大。<br>吵架只会让心情更差，打架只会让事情变糟<br>已解决问题为目的，发脾气是本能，控制脾气是本领  </p>
<p>永远不要让你的脾气比你的本事还大  </p>
<p>冷静下来问自己三个问题：</p>
<ol>
<li>这是别人的错吗？</li>
</ol>
<p>很多时候并不是别人的问题，而是误会或者是我们对别人有误解或者偏见，所以闲谈莫论人非，静坐常思己过，先从自己身上找找问题<br>的确是的，有很多的时候都是我自己的错误  </p>
<ol start="2">
<li>这个事情值得生气吗</li>
</ol>
<p>田乐就跟我说过，你至于为了这么一件小事跟我吵？<br>其实的确不值得。<br>但是我还是吵了。<br>确实，我的确是一个小肚鸡肠的人。<br>俗话说宰相肚里能撑船，但是要明白，他不是当了宰相肚里才能撑船，一定是他平时肚里就能撑船，所以他才当了宰相  </p>
<ol start="3">
<li>生气能解决问题吗？</li>
</ol>
<p>越是有本事的人，脾气越好。<br>是的。<br>我脾气就不好。<br>因为明白发脾气无法解决任何问题。<br>解决问题唯一的方法就是面对它，然后冷静的把这个问题给解决掉。  </p>
<p>没那么多需要生气的事情。  </p>
<h2 id="第二点：你也不应该还是个祥林嫂"><a href="#第二点：你也不应该还是个祥林嫂" class="headerlink" title="第二点：你也不应该还是个祥林嫂"></a>第二点：你也不应该还是个祥林嫂</h2><p>碰到一点压力，就把自己变成不堪重负的样子，碰到一点不确定性，就把前途描摹成前途无光  </p>
<p>不要做个怨妇  </p>
<p>这个世界上最无能的就是怨妇。<br>挫折失败经历的太少了。你才会觉得鸡毛蒜皮都是烦恼。<br>抱怨只会让别人觉得你委屈，可怜，但无助于解决任何问题<br>牢骚太盛防肠断，风物长宜放眼量<br>已经发生的事情，埋怨一点用也没有，成年人，我已经是个成年人了  </p>
<p>其实在生活当中，让你不堪重负的不是压力，而是你承受压力的方式<br>你曾在什么样的公司工作，你就是什么样的人<br>说过去的公司不好那只是证明你的无能<br>的确，我挺无能的  </p>
<h2 id="第三点：没有本事就不要表演真性情"><a href="#第三点：没有本事就不要表演真性情" class="headerlink" title="第三点：没有本事就不要表演真性情"></a>第三点：没有本事就不要表演真性情</h2><p>只有玻璃心的员工，所以别那么多怀才不遇的抱怨。<br>我觉得这就是在说我呗。<br>说明你的能力还撑不起你的雄心。<br>没有收拾残局的能力，就不要放纵你善变的情绪。<br>在你成为强者之前，所有的委屈都必须吞咽和妥协。<br>因为没有人会在乎弱者的眼泪。<br>成年的世界里，微笑只是一个表情，对讨厌的人或者事情露出你的微笑，使我们必须要学会的恶心<br>要想人前显贵必须背后受罪<br>能忍多大的事情就能成多大的事情<br>永远不应该挑战领导的权威<br>鸡汤：使我们痛苦者让我们强大，没本事的时候身边的坏人特别多，就会受委屈<br>等有一天强大了，所有人都是好人，和颜悦色<br>表达厌恶最好的方式不是争吵，而是要努力的奋斗。  </p>
]]></content>
      <categories>
        <category>心态</category>
      </categories>
      <tags>
        <tag>心态课程</tag>
      </tags>
  </entry>
  <entry>
    <title>第六节心态课</title>
    <url>/2020/03/18/%E5%BF%83%E6%80%81%E8%AF%BE/%E7%AC%AC%E5%85%AD%E8%8A%82%E8%AF%BE/</url>
    <content><![CDATA[<p>朋友推荐我看的心态修炼课程：<a href="http://www.gulixueyuan.com/h5/index.html#/course/354" target="_blank" rel="noopener">http://www.gulixueyuan.com/h5/index.html#/course/354</a>   </p>
<p>第六堂课主题：这个世界上，没人该为你的选择买单  </p>
<h2 id="选择自己所爱的，爱自己所选择的"><a href="#选择自己所爱的，爱自己所选择的" class="headerlink" title="选择自己所爱的，爱自己所选择的"></a>选择自己所爱的，爱自己所选择的</h2><p>人生中每一个重要的决定都必须自己做，这个世界上没有任何人要为你的选择买单  </p>
<p>如果你觉得岁月静好，一定是有人为你负重前行。  </p>
<p>一个人的独立，是从自己选择去做某件事情开始的。不要让别人为你的行为承担风险。自己的事情自己解决否则永远是个长不大的孩子。  </p>
<p>什么是稳定，稳定的穷着稳定的累着稳定的看着他人成功  </p>
<p>真正的稳定不是你在一家公司又饭吃，而是无论走到哪里都有饭吃。</p>
<p>父母不远游，游必有方。自己要想清楚了，不要过于顾虑别人的看法。<br>这是自己的人生，不应该活在别人的嘴里。  </p>
<h2 id="人性一个最特别的弱点：在意别人如何看待自己"><a href="#人性一个最特别的弱点：在意别人如何看待自己" class="headerlink" title="人性一个最特别的弱点：在意别人如何看待自己"></a>人性一个最特别的弱点：在意别人如何看待自己</h2><p>父母不应该为自己的人生买单。<br>根据自己的想法去做决定。<br>什么是孝：</p>
<ol>
<li>第一个阶段:不要再为自己担心了,自己做决定</li>
<li>第二阶段：我是你的骄傲吗，选择自己所爱的，清楚自己想要的是什么，得努力以后失败才不可耻</li>
</ol>
<h2 id="当自己所选了自己的选择，就要肩负起相应的责任"><a href="#当自己所选了自己的选择，就要肩负起相应的责任" class="headerlink" title="当自己所选了自己的选择，就要肩负起相应的责任"></a>当自己所选了自己的选择，就要肩负起相应的责任</h2><p>满足感会一步步吞噬自己的焦虑感。时间一长就会为这种满足感辩护  </p>
<h2 id="走好选择的路，别选择好走的路"><a href="#走好选择的路，别选择好走的路" class="headerlink" title="走好选择的路，别选择好走的路"></a>走好选择的路，别选择好走的路</h2><h2 id="工作以后跟父母报喜不报忧"><a href="#工作以后跟父母报喜不报忧" class="headerlink" title="工作以后跟父母报喜不报忧"></a>工作以后跟父母报喜不报忧</h2><p>做一个认真起来连自己都害怕的人  </p>
<p>只有披荆斩棘这一条路，值得赞美的是处理困难的能力以及处理之后获得的幸福  </p>
<p>吃苦本身不值得赞美，什么年纪就应该做什么样的事情  </p>
<p>越疼越要不动声色，越苦越要保持沉默  </p>
<h2 id="成年人的世界里，一切都是自作自受"><a href="#成年人的世界里，一切都是自作自受" class="headerlink" title="成年人的世界里，一切都是自作自受"></a>成年人的世界里，一切都是自作自受</h2><p>选择自己所爱的，爱自己所选择的。越是重大决定越要自己选，任何人帮自己选了都会不甘心。  </p>
<h2 id="选择的基本原则"><a href="#选择的基本原则" class="headerlink" title="选择的基本原则"></a>选择的基本原则</h2><p>学会接受不完美</p>
<ul>
<li>两利相权取其重</li>
<li>两害相权取其轻</li>
</ul>
<p>选择就是权衡利害，取舍之道，没有完美的选择，不可鱼与熊掌兼得</p>
<p>张爱玲：娶了红玫瑰，久而久之，红的变成了墙上的一抹蚊子血。白的还是窗前明月光。娶了白玫瑰，白的便是衣服上的一粒饭粘子，红的却是心头上的一个朱砂痣。<br>所以得不到的永远是最好的。<br>将硬币抛上空中的那一刻，你会突然发现希望自己的选择是哪一个</p>
<h2 id="选择永远比努力更重要"><a href="#选择永远比努力更重要" class="headerlink" title="选择永远比努力更重要"></a>选择永远比努力更重要</h2><p>真正决定我们的人生的，第一是我们的选择，第二才是我们的能力和努力。</p>
]]></content>
      <categories>
        <category>心态</category>
      </categories>
      <tags>
        <tag>心态课程</tag>
      </tags>
  </entry>
  <entry>
    <title>第一节心态课</title>
    <url>/2020/03/18/%E5%BF%83%E6%80%81%E8%AF%BE/%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE/</url>
    <content><![CDATA[<p>朋友推荐我看的心态修炼课程：<a href="http://www.gulixueyuan.com/h5/index.html#/course/354" target="_blank" rel="noopener">http://www.gulixueyuan.com/h5/index.html#/course/354</a>  </p>
<p>第一堂课主题：基于评价体系的自我认知术  </p>
<p>飞机的发动机，内因</p>
<p>心态很重要  </p>
<p>你做任何事情最后的结果，都由你做这些事情时，所抱持的心态所决定  </p>
<p>拼了命-试试看：不必拼尽全力  </p>
<p>你的心态：从你的声音里能听见，从你的举止里能看见，从你的身上能感受到  </p>
<p>自我认知实验<br>写出自己的五个优点和五个缺点  </p>
<p>五个优点  </p>
<ul>
<li>别人觉得我很努力  </li>
<li>别人觉得我字写的好看  </li>
<li>别人觉得我拍照拍的好看  </li>
<li>找不到自己的优点算优点吗</li>
<li>爱整洁  </li>
</ul>
<p>发现的不多，好像也没有什么优点  </p>
<p>五个缺点  </p>
<ul>
<li>懒</li>
<li>自私  </li>
<li>不上进  </li>
<li>心态不好  </li>
<li>不诚信，答应别人的事情没做到  </li>
<li>自我约束不够，自制力不够强  </li>
<li>情商低，智商低  </li>
<li>得过且过  </li>
</ul>
<p>第二个实验 了解一下别人对你的评价<br>找你最好的朋友，让他写下看到你的人或听到你的名字时，最先想到的形容词  </p>
<p>不用找了，我觉得第一个词肯定是傻  </p>
<p>「ChoiMinki：单纯 努力 勤奋」</p>
<hr>
<p>「ChoiMinki：good  心态还不错」</p>
<hr>
<p>「David：美」</p>
<hr>
<p>「ChoiMinki：@Fsn   还有缺点哦  一根筋」</p>
<hr>
<p>「七七：大概就是上面那个吧」 最好的朋友</p>
<hr>
<p>这个实验结果非常具有参考价值  </p>
<p>自我认知和别人对自己的评价几乎一致是相当有难度的，因为人容易高估自己<br>自己看自己永远是上帝视角<br>第一个是发现问题<br>第二个是解决问题<br>第三个复杂点的实验<br>招聘企业最在意的员工的职业素养  </p>
<p>举例： 1. 你够勤奋吗 - 答：不够  3分 够 7分</p>
<ol>
<li>你有目标吗？ - 答：好像是没有的 3分    目标能让你坚持</li>
<li>你够勤奋吗？ - 答：不够努力 3分  勤奋是高效利用时间</li>
<li>你持之以恒吗？ - 答：应该没有 3分 做任何事要坚持到底，哪怕是一个坏结果，至少证明你人生有一条路走不通，这不是坏事  </li>
<li>你安排有序吗 - 答：没有 3分 东搞搞西搞搞，时间都被浪费掉了  </li>
<li>你有创造性吗 - 答:   想方设法解决问题的能力，我会百度搜索这个够不够？ 问老师问同学问朋友这些我很少会问  4分吧那就</li>
<li>你精力集中吗 - 答： 现在挺集中的  7分  </li>
<li>你正直吗？ - 答： 就是你是否有正常和正确的心态，我没有 3分 不能一边抱怨一边不停的努力，让在这个不公平的社会里，站在对自己有利的位置。一边抱怨一边懒得要死这样就不好，我应该是正直的。7分   </li>
<li>你乐观吗？ - 答: 一种乐观，想尽办法解决处理问题 ，一种悲观，为什么倒霉的总是我，总想着该抱怨谁 我好像也没有抱怨谁，就是挺抱怨自己的。4分吧  </li>
<li>你愿与人合作吗？ - 答：我可能额，愿意吧。就是共赢的一种吧，那我还挺乐意的，我就是担心别人不愿意。  7分</li>
<li>你愿接受他人的建议吗？ - 答：这个问题，首先对待他人的建议得理性的去想这个建议对我是好是坏，做出客观的判断，这个建议是否合理。我倒是挺愿意接受别人的建议，但是我担心我改不过来呗。3分吧。别人给我建议的时候，我首先会像个刺猬一样把刺竖起来，但是我仔细想过之后，我会承认这个是我的错误，是我没有处理好，会坦白的。因为一开始我也不知道是怎么错了。后来仔细想过之后发现的确是自己的错，还是去主动承担这个错误比较好。我觉得我还是不咋地这方面。  </li>
</ol>
<p>总分：3<em>8）+2+2</em>7）=24+2+14=40<br>60——80 心态不错<br>20——30 说明你未来可以进步的空间还是挺大的。  </p>
<p>判断自己的心态偏积极还是消极，建议每年做一次<br>一个人心态积极还是消极，看一个生活中的常见问题，怎么回答即可<br>我有一个好消息还是坏消息，- 答： 先听坏消息，再听好消息<br>如果总是先听好消息，可能偏积极，如果总是先听坏消息，可能偏消极  </p>
]]></content>
      <categories>
        <category>心态</category>
      </categories>
      <tags>
        <tag>心态课程</tag>
      </tags>
  </entry>
  <entry>
    <title>第七节心态课</title>
    <url>/2020/03/18/%E5%BF%83%E6%80%81%E8%AF%BE/%E7%AC%AC%E4%B8%83%E8%8A%82%E8%AF%BE/</url>
    <content><![CDATA[<p>朋友推荐我看的心态修炼课程：<a href="http://www.gulixueyuan.com/h5/index.html#/course/354" target="_blank" rel="noopener">http://www.gulixueyuan.com/h5/index.html#/course/354</a>   </p>
<p>第七堂课主题：职场最糟糕的两种心态：自我和自私  </p>
<p>警惕： 我以为和我觉得<br>完全从自身出发，想当然的思考问题，不经确认就行动了。<br>以自我为中心不顾及别人的想法。<br>做自己这是一种借口。当做任性的挡箭牌。<br>太多个性十足的背后多站着自私的影子。<br>自私是人的天性，但是得有个度。</p>
<p>自我和自私是两种最糟糕的负面心态。</p>
<h2 id="什么是自我：别人的问题与我无关"><a href="#什么是自我：别人的问题与我无关" class="headerlink" title="什么是自我：别人的问题与我无关"></a>什么是自我：别人的问题与我无关</h2><p>所以不要妄想别人与自己感同身受。<br>人的喜怒哀乐都是执着于自己的得失<br>做人不能太过自我。<br>老话：己所不欲勿施于人</p>
<p>先做好自己不要给别人带来麻烦。</p>
<h2 id="所谓不自我，就是换位思考；最深层的本性，就是渴望得到别人的重视"><a href="#所谓不自我，就是换位思考；最深层的本性，就是渴望得到别人的重视" class="headerlink" title="所谓不自我，就是换位思考；最深层的本性，就是渴望得到别人的重视"></a>所谓不自我，就是换位思考；最深层的本性，就是渴望得到别人的重视</h2><h2 id="今天你不帮助别人，明天一定不会有人帮你"><a href="#今天你不帮助别人，明天一定不会有人帮你" class="headerlink" title="今天你不帮助别人，明天一定不会有人帮你"></a>今天你不帮助别人，明天一定不会有人帮你</h2><p>工作中交不到真正的朋友</p>
<h2 id="你要先把别人当朋友，别人才可能把你当朋友"><a href="#你要先把别人当朋友，别人才可能把你当朋友" class="headerlink" title="你要先把别人当朋友，别人才可能把你当朋友"></a>你要先把别人当朋友，别人才可能把你当朋友</h2><p>为人：以诚待人<br>处事：更够帮别人一把就帮，投桃报李</p>
<h2 id="什么是自私：我的利益比什么都重要"><a href="#什么是自私：我的利益比什么都重要" class="headerlink" title="什么是自私：我的利益比什么都重要"></a>什么是自私：我的利益比什么都重要</h2><p>有什么职业规划：能不能随着公司共同成长  </p>
<h2 id="别人帮了你，你会心存感激；你帮了别人，他会想要报答你"><a href="#别人帮了你，你会心存感激；你帮了别人，他会想要报答你" class="headerlink" title="别人帮了你，你会心存感激；你帮了别人，他会想要报答你"></a>别人帮了你，你会心存感激；你帮了别人，他会想要报答你</h2><p>绝大多数付出都会得到回报，回报的时间长短不同<br>但是不付出就一定没有回报。也不是付出了马上就会得到回报的。<br>春天播种还要秋天收获呢  </p>
<h2 id="你越是自私，反而得到的越少；占得全是小便宜，吃的全是大亏"><a href="#你越是自私，反而得到的越少；占得全是小便宜，吃的全是大亏" class="headerlink" title="你越是自私，反而得到的越少；占得全是小便宜，吃的全是大亏"></a>你越是自私，反而得到的越少；占得全是小便宜，吃的全是大亏</h2><h2 id="不要太自私"><a href="#不要太自私" class="headerlink" title="不要太自私"></a>不要太自私</h2><p>人从来都不只是为自己而活着，是为自己以及自己所热爱的人活着</p>
<p>记恨多于感恩，多付出<br>不自我就是换位思考多替别人着想；不自私就是乐于付出，付出才会有收获。</p>
<p>总结：</p>
<ul>
<li>第一讲：心态认知，别人的评价…自我认知</li>
<li>……..</li>
</ul>
<h2 id="如果自己是蚂蚁心态，那么再小的石头都是障碍；如果你是雄鹰心态，再高的山峰也敢尝试"><a href="#如果自己是蚂蚁心态，那么再小的石头都是障碍；如果你是雄鹰心态，再高的山峰也敢尝试" class="headerlink" title="如果自己是蚂蚁心态，那么再小的石头都是障碍；如果你是雄鹰心态，再高的山峰也敢尝试"></a>如果自己是蚂蚁心态，那么再小的石头都是障碍；如果你是雄鹰心态，再高的山峰也敢尝试</h2><p>心小了，所有的小事情就大了<br>心大了，所有的大事情就都小了  </p>
]]></content>
      <categories>
        <category>心态</category>
      </categories>
      <tags>
        <tag>心态课程</tag>
      </tags>
  </entry>
  <entry>
    <title>第三节心态课</title>
    <url>/2020/03/18/%E5%BF%83%E6%80%81%E8%AF%BE/%E7%AC%AC%E4%B8%89%E8%8A%82%E8%AF%BE/</url>
    <content><![CDATA[<p>朋友推荐我看的心态修炼课程：<a href="http://www.gulixueyuan.com/h5/index.html#/course/354" target="_blank" rel="noopener">http://www.gulixueyuan.com/h5/index.html#/course/354</a>   </p>
<p>第三堂课主题：自信都没有，你的世界怎么可能好  </p>
<p>面试逻辑：你先要有自信，才有资格要求别人对你有信心  </p>
<p>不自信会害死自己。<br>当前能力，学习能力，未来成长的自信  </p>
<p>如果对自己的某一个能力没有自信，这个方法叫做，一点一点小的成功会积累你的自信  </p>
<p>第二个不知道哪里不自信，方法：去做一件一直想做但没敢去做的事情  </p>
<p>它可以帮你建立自信  </p>
<h2 id="一点一点小的成功会积累你的自信"><a href="#一点一点小的成功会积累你的自信" class="headerlink" title="一点一点小的成功会积累你的自信"></a>一点一点小的成功会积累你的自信</h2><p>锻炼自己的演说你能力，不要定宏伟的大目标。<br>大目标是用来规划方向的，小目标才可以积累你的自信。<br>定那种短时间就可以实现的，跳一跳脚就可以完成的目标。  </p>
<p>这个跟我以前看到的并且作为座右铭的一句话很相似，就是，永远只追上离你最近的那个人去追赶他。把最近的那个人当做目标，这个目标不大，但是你慢慢慢慢的就可以超越过很多的人。  </p>
<p>良性循环。<br>一点一点小的成功积累得越来越多，从量变到质变，就成为了你的自信。  </p>
<p>改变你可以改变的，接受你不能改变的，你得学会接受你自己。<br>希望实现某个方面的自信，切记，不能是脱离实际的盲目自信。<br>培养自信一定是一个循序渐进的过程<br>如果目标太大耗时太久，那么在执行的过程中，就容易让你懈怠甚至失败。<br>所以定短时间可以完成的小目标，不断获得的成就感可以让你坚持并且自信。<br>建议：对某一个方面不自信可试的方法  </p>
<h2 id="做一件你一直想做但是没有敢去做的事情"><a href="#做一件你一直想做但是没有敢去做的事情" class="headerlink" title="做一件你一直想做但是没有敢去做的事情"></a>做一件你一直想做但是没有敢去做的事情</h2><p>建立自信最好的方法，做一件不敢去做的事情直到你获得成功  </p>
<p>挑战一下自己<br>戒酒日志<br>失败经验：有第一次破例就有第二次破例，有第二次就有第三次，是的我非常认同  </p>
<p>破例只有一次和很多次。<br>持久的坚持才能变成惯性，而超出你自己预期的这种践行，慢慢就会长成根植于你心底的自信  </p>
<h2 id="当你有足够的自信时。你就能做成很多你原本做不到的事情"><a href="#当你有足够的自信时。你就能做成很多你原本做不到的事情" class="headerlink" title="当你有足够的自信时。你就能做成很多你原本做不到的事情"></a>当你有足够的自信时。你就能做成很多你原本做不到的事情</h2><p>培养自信的目的所在。</p>
<p>李敖：人生第一大快乐，是做到自己认为自己做不到的事情；人生第二快乐，是做到别人认为自己做不到的事情；  </p>
<p>疗效持久不易复发  </p>
<p>自卑不自信一定要试试  </p>
<h2 id="心理暗示"><a href="#心理暗示" class="headerlink" title="心理暗示"></a>心理暗示</h2><p>谁在自己心里还不觉得自己是个人物，哈哈哈  </p>
<p>培养自己自信的心理暗示方法，要多给自己一些肯定的暗示，每个人内心深处都有一点自卑，这很正常。<br>这种否定的心态很要命，尤其当你经历挫折的时候，这种自我否定就会不断地累加。  </p>
<p>觉得自己有天赋，自己就会刻意的去锻炼。<br>就比如说，别人夸我写字好看，我就会主动的去写字，以及拍照啊这些。因为我在这方面受到了表扬。<br>积极性就会慢慢提高了。<br>良性循环，相信什么，就拥有什么，就会越有决心可以去锻炼自己。  </p>
<p>好孩子都是夸出来的。<br>信则有不信则无。  </p>
<h2 id="简单的自信培养法"><a href="#简单的自信培养法" class="headerlink" title="简单的自信培养法"></a>简单的自信培养法</h2><p>走路很快，我这个人很重要，我要做的事情很重要，慢慢的对自己建立自信非常有帮助  </p>
]]></content>
      <categories>
        <category>心态</category>
      </categories>
      <tags>
        <tag>心态课程</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ简单问答</title>
    <url>/2020/03/18/%E9%9D%A2%E8%AF%95/RabbitMQ%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<p>今天糟老头子问了我一通RabbitMQ，反正我不会就是了….<br>再问就是不会。  </p>
<p>david: 有空再思考一下发送邮件这个如何可以做的更好。 其实这里很有些门道的（面试如何聊项目，聊什么，就是聊这些细节，以及你是如何处理好这些细节，以此类推）。至少一点发送邮件这里肯定是要做成异步的，也就是邮件发送之后，不应等待它完成处理而应该立即返回，邮件的成功与否不应该是这个业务成功的关键。当然这是个ERP系统满意度可以接受，如果是互联网产品，这样一个接口就因为这个操作会拖累整个接口的访问速度。@Fsn  </p>
<p>david: 面试如何聊项目，聊什么，就是聊这些细节，以及你是如何处理好这些细节，以此类推 @ChoiMinki 对你也有用  </p>
<p>me: 那我用多线程或者是rabbitmq对比  </p>
<p>david: 就多线程就可以  </p>
<p>david: 说说我为什么说只用线程而不用RM?  </p>
<p>david: 多线程和RM不是同一个层面的概念，这个要理清楚。  </p>
<p>david: 多线程和RM不是同一个层面的概念！！！！  </p>
<p>me: 要不就是大材小用了，要不就是懒得配置  </p>
<p>me: rabbitmq更多时候用在分布式环境下  </p>
<p>me: 我们项目的话用多线程够了  </p>
<p>david: 还有呢？  </p>
<p>david: 难道分布式才能用RM？  </p>
<p>me: 那倒不是只有分布式才能用mq，mq有两种模式一种是点对点也就是队列生产者消费者，还有一种就是发布与订阅，mq有可能存在有消息丢失啊堵塞啊这种情况  </p>
<p>david: 我看你简历中有说使用过Mq，能具体举个你做过的项目中通过Mq解决了什么问题了？  </p>
<p>me：信666这个项目当中使用了mq，我们业务当中主要是使用了mq的点对点模式，也就是生产者消费者队列这种，我们这个项目当中要用到消息队列的地方很多，比如说交易成功之后有些交易类型会需要分润，这个时候为了不影响正常的交易流程，就会发送分润队列，消费者去完成这个任务，因为分润也占据了一个比较大的模块，模块于模块之间松散耦合，互不干扰，分润流程不会影响到正常的交易流程。用到mq的地方还有消费，代付以及初次注册之后会有90元佣金的产生到该客户相对应的账户当中这个会要使用到mq。以及交易的时候针对不同类型的交易也就是不停的业务场景会有着同步异步处理。比如说支付宝链接支付会要响应一个支付链接正如paypal支付得到支付链接一样这个时候就没有使用mq进行处理，而是直接响应给了客户端。而消费代付这种，并不是需要即时响应给客户端，就是用了mq进行处理  </p>
<p>david: 前面表达的很好，也是Mq常用的使用场景。 这里“比如说支付宝链接支付会要响应一个支付链接正如paypal支付得到支付链接一样这个时候就没有使用mq进行处理，而是直接响应给了客户端。” 和使用Mq不是很贴切  </p>
<p>me： 这个没答在点上是吧  </p>
<p>david: 是。  </p>
<p>me: 没有符合主题是吧  </p>
<p>me: 我想想我是想表达啥时候用它啥时候不用他  </p>
<p>david: 那如果我们有个业务需要发送邮件，如果用Mq做，那么你是怎么设计的，Mq在其中承担什么角色，你能描述一下？  </p>
<p>david: 「 Fsn: 我想想我是想表达啥时候用它啥时候不用他 」</p>
<hr>
<p>比喻不当  </p>
<p>david: 以上只是个演练， 我不太清楚你们遇到面试官是如何面试的，但是我知道大公司的面试官面试一定会是这样层次追问问题的。  </p>
<p>me: 我们领赫这个项目有几个地方是需要异步处理发送邮件的，即直发提货等状态更改的情况下，那么可以提供生成一个队列即可，该队列专门用于发送邮件，当业务逻辑需要发送邮件的时候直接推送发邮件的队列上即可，在原来的业务场景当中就不会因为邮件发送不成功或者是sendgrid返回了其他的响应码而做其他处理而影响了原来的业务逻辑导致事务回滚等异常状况的发生，发送队列的话就与原来的主线分开不再影响原来的主线逻辑，从而使得原来的主线逻辑能够正常执行完整，两者互不干扰彼此执行完彼此的业务逻辑处理。在这个业务场景当中，mq承担了两个业务模块当中的一个消息传递的一个媒介。且可能会有多个生产者，且一个消费者就够了。  </p>
<p>david: 发邮件和你前面提到的，思路是一样的，万变不离其宗  </p>
<p>david: 还可以深问  </p>
<p>david: 不，我要为难你，你也样不知道说什么，我是有点顺带你思路  </p>
<p>me: 好嘞百度了  </p>
<p>me: 解耦、异步、削峰，解耦针对项目模块与模块之间，异步是具体业务逻辑需要，削峰则针对访问数据库请求数过大，诶诶诶对了我发现多看点源码还是有点好处嘞，参考：<a href="https://www.cnblogs.com/zhuifeng523/p/11579568.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhuifeng523/p/11579568.html</a>  </p>
<p>me: 引入一个新的内容得考虑下他对这个项目的必要性以及风险性，是不是会对这个项目造成不必要的麻烦。  </p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ实战指南</title>
    <url>/2020/03/17/RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/RabbitMQ%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%9701/</url>
    <content><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>《RabbitMQ实战指南》 - 朱忠华  </p>
<blockquote>
<p>内容简介</p>
</blockquote>
<ul>
<li>从消息中间件的概念和RabbitMQ的历史切入，阐述RabbitMQ的安装、使用、配置、管理、运维、原理、扩展等方面的细节。</li>
<li>分为基础、进阶、高级三个部分。</li>
<li>基础：介绍RabbitMQ的基本安装以及使用方式，RabbitMQ的基本概念，包括生产者、消费者、交换器、队列、绑定等，通过java讲述客户端如何与RabbitMQ建立（关闭）连接，声明（删除）交换器，队列，绑定关系，以及如何发送和消费消息等。</li>
<li>进阶：RabbitMQ的TTL，死信、延迟队列、优先级队列、RPC、消息持久化、生产端和消费端的消息确认机制等内容。</li>
<li>中间篇幅主要从RabbitMQ的管理、配置、运维三个角度提供帮助文档以及解决问题的思路。</li>
<li>高阶：RabbitMQ的存储机制、流控以及镜像队列的原理，深入讲述RabbitMQ的一些实现细节，</li>
<li>涉及网络分区概念。</li>
<li>最后讲述的是RabbitMQ的一些扩展内容以及附录，供参考使用。</li>
</ul>
<blockquote>
<p>前言  </p>
</blockquote>
<p>略…  </p>
<blockquote>
<p>内容大纲</p>
</blockquote>
<ul>
<li>第一章：摘要性介绍，什么是消息中间件、消息中间件的作用以及特点等。引入RabbitMQ对其历史和相关特点做一个简要介绍，最后介绍RabbitMQ的安装以及生产、消费的使用示例。</li>
<li>第二章：讲述RabbitMQ的入门知识，包括生产者、消费者、队列、交换器、路由键、绑定、连接以及信道等基本术语。还阐述了RabbitMQ与AMQP协议的对应关系。</li>
<li>第三章：介绍RabbitMQ客户端开发的简单使用，按照一个生命周期对连接、创建、生产、消费以及关闭等几个方面进行宏观的介绍。</li>
<li>第四章：数据可靠性的一些细节，展示RabbitMQ的集中已具备或衍生的高级特性，包括TTL、死信队列、延迟队列、优先级队列、RPC等。</li>
<li>第五章：围绕RabbitMQ管理展开，包括多租户、权限、用户、应用和集群管理、服务端状态等方面，并且从侧面讲述rabbitmqctl工具和rabbitmq_management插件的使用。</li>
<li>第六章：讲述RabbitMQ的配置，通过环境变量、配置文件、运行时参数（和策略）等三种方式来定制化相应的服务。</li>
<li>第七章：围绕运维层面展开，主要包括集群搭建、日志查看、故障恢复、集群迁移、集群监控等方面。</li>
<li>第八章：讲述Federation和Shovel这两个插件的使用、细节以及相关原理。区别于第七章中集群的部署方式，Federation和Shovel可以部署在广域网中，为RabbitMQ提供更广泛的应用空间。</li>
<li>第九章：介绍RabbitMQ相关原理，包括RabbitMQ存储机制、磁盘和内存告罄、流控机制、镜像队列。</li>
<li>第十章：围绕网络分区进行展开，阐述网络分区意义，如何查看和处理网络分区以及网络分区所带来的的影响。</li>
<li>第十一章：探讨RabbitMQ的两个扩展内容：消息追踪和负载均衡。消息追踪可以有效定位消息丢失的问题。负载均衡本身属于运维层面，但是负载均衡一般需要借助第三方工具—–HAProxy、LVS等实现。</li>
</ul>
<blockquote>
<p>读者讨论</p>
</blockquote>
<p>略…</p>
<blockquote>
<p>致谢</p>
</blockquote>
<p>略…</p>
<h3 id="第一章-RabbitMQ简介"><a href="#第一章-RabbitMQ简介" class="headerlink" title="第一章 RabbitMQ简介"></a>第一章 RabbitMQ简介</h3><p>RabbitMQ: 消息中间件<br>RabbitMQ功能特性：【高可靠】、【易扩展】、【高可用】、其他丰富的功能特性  </p>
<h4 id="1-1-什么是消息中间件"><a href="#1-1-什么是消息中间件" class="headerlink" title="1.1 什么是消息中间件"></a>1.1 什么是消息中间件</h4><p>消息（Message）是指在【应用间】传送的数据。  </p>
<table>
<thead>
<tr>
<th>消息</th>
<th>example</th>
<th>example2</th>
</tr>
</thead>
<tbody><tr>
<td>简单</td>
<td>文本字符串</td>
<td>JSON</td>
</tr>
<tr>
<td>复杂</td>
<td>内前对象</td>
<td></td>
</tr>
</tbody></table>
<p>消息队列中间件（Message Queue Middleware,简称MQ）<br>是指利用高效可靠的【消息传递机制】进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。<br>通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间的通信。  </p>
<p>消息队列中间件，也可以成为消息队列或者消息中间件。  </p>
<p>消息中间件 |  |<br>-|-|-<br>| 传递模式1 | 点对点（P2P，Point-to-Point）模式 |  | |<br>| 传递模式2 | 发布/订阅(Pub/Sub)模式 | | |</p>
<blockquote>
<p>点对点模式</p>
</blockquote>
<ul>
<li>基于队列的  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">消息生产者发送消息到队列，消息消费者从队列当中接受消息，队列的存在使得消息的异步传输成为可能。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>发布订阅模式  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发布订阅模式定义了如何向一个内容节点发布和订阅消息，</span><br><span class="line">这个内容节点成为主题（topic），</span><br><span class="line">主题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者则可以从主体中订阅消息，主题使得晓得的订阅者和消息的发布者相互保持独立，不需要进行接触即可保证消息的传递，</span><br><span class="line">发布&#x2F;订阅模式在消息的一对多广播室采用。</span><br></pre></td></tr></table></figure>

<p>目前开源的消息中间件有很多，比较主流的有：</p>
<ul>
<li>RabbitMQ</li>
<li>Kafka</li>
<li>ActiveMQ</li>
<li>RocketMQ</li>
<li>等</li>
</ul>
<p>面向消息的中间件（简称为MOM，Message Oriented Middleware）提供了以【松散耦合】的灵活方式集成应用程序的一种机制。  </p>
<p>它们提供了基于【存储】和【转发】的应用程序之间的【异步数据】发送，即应用程序彼此不直接通信，而是与作为【中介】的消息中间件通信。  </p>
<p>消息中间件提供了有保证的消息发送，应用程序开发人员无需了解远程调用（RPC）和网络通信协议的细节。  </p>
<p>消息中间件适用于需要可靠的数据传送的【分布式环境】。<br>采用消息中间件的系统中，不同的对象之间通过传递消息来激活对方的时间，已完成相应的操作，发送者将消息发送给消息服务器，消息服务器将消息存放在若干队列中，在合适的时候再将消息转发给接受者。  </p>
<p>消息中间件能在不同平台之间通信，它常被用来表示屏蔽各种平台以及协议之间的特性，实现应用程序之间的协同，其优点在于能够在客户和服务器之间提供同步和异步的链接，并且在任何时刻都可以将消息进行传送或者存储转发，这也是它比远程调用更进步的原因。</p>
]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>笔记</tag>
        <tag>RabbitMQ实战指南</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/2020/03/14/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p><a href="https://www.bilibili.com/video/av6538245?from=search&amp;seid=14655081057930783496" target="_blank" rel="noopener">https://www.bilibili.com/video/av6538245?from=search&amp;seid=14655081057930783496</a>    </p>
<p>操作系统 Operating Systems<br>1.1 课程概述</p>
<p>基本概述</p>
<ul>
<li>课程简介</li>
<li>什么是操作系统</li>
<li>为什么学习以及如何学习操作系统</li>
<li>当前的操作系统的实例，操作系统的历史和操作系统的结构介绍，演变过程<br>对操作系统有一个大概的简介</li>
</ul>
<p>这门课涉及概念  </p>
<ul>
<li>基本概念以及原理</li>
<li>操作系统介绍</li>
<li>中断以及系统调用</li>
<li>内存管理</li>
<li>进程以及线程管理</li>
<li>调度，进程线程调度，cpu调度</li>
<li>结合进程管理带来的同步互斥</li>
<li>文件系统</li>
<li>I/O 子系统</li>
</ul>
<p>基本概念以及原理</p>
<p>操作系统其实是一个很复杂的一个系统软件</p>
<p>原理与具体代码对应起来<br>实际操作系统以及练习<br>小型操作系统uCore</p>
<ul>
<li>练习</li>
<li>在uCore 操作系统上做实验</li>
<li>延伸</li>
<li>讨论一些相关的话题或者故事</li>
<li><a href="https://github.io" target="_blank" rel="noopener">https://github.io</a>….</li>
</ul>
<h2 id="操作系统实验"><a href="#操作系统实验" class="headerlink" title="操作系统实验"></a>操作系统实验</h2><ul>
<li>实验0：准备操作系统怎么构成的，最开始的准备到怎么去怎么到一个实验环境中建立好他的开发环境这个是一个准备过程【准备】</li>
<li>实验1：系统启动，操作系统启动以及中断</li>
<li>实验2：操作系统物理内存进行管理，以及进一步进行堆内存进行虚拟化的管理，使得我们的程序可以有更大更丰富的资源去利用</li>
<li>实验3：虚拟内存管理,</li>
<li>实验4：内核线程管理</li>
<li>实验5：用户进程管理</li>
<li>实验6：CPU调度</li>
<li>实验7：同步与互斥,访问资源</li>
<li>实验8：文件系统</li>
</ul>
<p>概念原理+实验=&gt;二者有机结合<br>为什么这么做，怎么做</p>
<p>有必要了解<br>预备知识：</p>
<ul>
<li>计算机结构，原理（Intel 80386+）</li>
<li>数据结构（涉及算法，数据组织管理）</li>
<li>主要是C语言和有一小部分是汇编语言uCore  </li>
</ul>
<h2 id="1-2-什么是操作系统"><a href="#1-2-什么是操作系统" class="headerlink" title="1.2 什么是操作系统"></a>1.2 什么是操作系统</h2><p>操作系统的定义等  </p>
<ul>
<li>复杂的一个软件，没有一个完整、精确、公认的定义</li>
<li>从功能和特点来介绍操作系统</li>
<li>操作系统可以对上对下来理解，对上是从用户角度上来说，操作系统是一个控制软件</li>
<li>管理应用程序</li>
<li>为应用程序提供服务</li>
<li>杀死应用程序</li>
<li>资源管理</li>
<li>管理外设、分配资源，怎么把资源协调好</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>ArrayList源码</title>
    <url>/2020/03/13/%E9%9D%A2%E8%AF%95/ArrayList/</url>
    <content><![CDATA[<p>坚强。<br>虽然很想发个表情包出来。<br>我得坚强。<br>我就不信了，磨不死我。<br>我得向阳而生，活的灿烂一点。<br>我可真讨厌做笔记。  </p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Copyright (c) 1997, 2017, Oracle<span class="built_in"> and/or </span>its affiliates. All rights reserved.</span><br><span class="line"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p>Copyright n.版权，著作权 adj.版权的；受版权保护的。vt.保护版权；为…取得版权<br>Oracle n.神谕；语言；神谕处；圣人/ 甲骨文；甲骨文公司；数据库；神谕<br>affiliates 附属公司；联播电台<br>reserved adj.保留的，预定的；缄默的，冷淡的，高冷的；包租的<br>proprietary adj.专卖的，专营的；所有的，所有权的；（行为）像所有者那样的，所有人（似的）n.所有权，所有人<br>confidential adj.机密的；表示信任的；获信任的<br>subject n.主题；科目；[ 语 ]主语；国民；adj.服从的；易患…的；受制于…的；vt.使…隶属；<br>license n.执照，许可证；特许 vt.许可；特许；发许可证给…<br>terms n.地位，关系；[ 法 ]条款；术语；措辞；价钱（term的复数形式）…<br>Oracle and/or its affiliates Oracle和/或其关联公司<br>All rights reserved. 版权所有，保留所有权利。<br>ORACLE PROPRIETARY/CONFIDENTIAL Oracle专有/机密。<br>Use is subject to license terms. 使用受许可条款约束。  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">java</span><span class="selector-class">.util</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.util</span><span class="selector-class">.function</span><span class="selector-class">.Consumer</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.util</span><span class="selector-class">.function</span><span class="selector-class">.Predicate</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.util</span><span class="selector-class">.function</span><span class="selector-class">.UnaryOperator</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">sun</span><span class="selector-class">.misc</span><span class="selector-class">.SharedSecrets</span>;</span><br></pre></td></tr></table></figure>
<p>Consumer 消费者<br>Predicate  谓词<br>Unary 一元<br>UnaryOperator 非合格算子<br>SharedSecrets 共享的秘密  </p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Resizable-array implementation <span class="keyword">of</span> the <span class="xml"><span class="tag">&lt;<span class="name">tt</span>&gt;</span>List<span class="tag">&lt;/<span class="name">tt</span>&gt;</span></span> interface.  Implements</span><br><span class="line"> * all optional list operations, <span class="keyword">and</span> permits all elements, including</span><br><span class="line"> * <span class="xml"><span class="tag">&lt;<span class="name">tt</span>&gt;</span>null<span class="tag">&lt;/<span class="name">tt</span>&gt;</span></span>.  In addition <span class="keyword">to</span> implementing the <span class="xml"><span class="tag">&lt;<span class="name">tt</span>&gt;</span>List<span class="tag">&lt;/<span class="name">tt</span>&gt;</span></span> interface,</span><br><span class="line"> * this class provides methods <span class="keyword">to</span> manipulate the size <span class="keyword">of</span> the <span class="keyword">array</span> that <span class="literal">is</span></span><br><span class="line"> * used internally <span class="keyword">to</span> store the list.  (This class <span class="literal">is</span> roughly equivalent <span class="keyword">to</span></span><br><span class="line"> * <span class="xml"><span class="tag">&lt;<span class="name">tt</span>&gt;</span>Vector<span class="tag">&lt;/<span class="name">tt</span>&gt;</span></span>, <span class="keyword">except</span> that it <span class="literal">is</span> unsynchronized.)</span><br></pre></td></tr></table></figure>
<p>Resizable 可调整大小的<br>Implements all optional list operations 实现所有可选的List操作<br>permits 许可证<br>可调整大小的数组实现了接口List。实现了所有可选的List操作，并且许可所有的元素，包括空元素。<br>In addition to 除了<br>manipulate 操作<br>internally 在内部<br>store 贮藏<br>除了实现接口List，该类ArrayList还提供了方法来操作数组的大小的方法，被用在内部来存储的list<br>roughly 粗略地<br>equivalent 等效<br>该类ArrayList粗略地等效于类Vector，除了他不是同步的  </p>
<blockquote>
<p>由此可得，注释当中说明ArrayList是不同步的，也就是unsynchronized；而Vector是同步的，也就是synchronized  </p>
</blockquote>
<p>由此可得，看点源码还是非常非常非常好的。<br>但是我有个问题，为什么呢，为什么这样说他ArrayList是不同步，而Vector是同步的，有理由吗？<br>我觉得接着往下看可能有答案呗。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">* <span class="tag">&lt;<span class="name">p</span>&gt;</span>The <span class="tag">&lt;<span class="name">tt</span>&gt;</span>size<span class="tag">&lt;/<span class="name">tt</span>&gt;</span>, <span class="tag">&lt;<span class="name">tt</span>&gt;</span>isEmpty<span class="tag">&lt;/<span class="name">tt</span>&gt;</span>, <span class="tag">&lt;<span class="name">tt</span>&gt;</span>get<span class="tag">&lt;/<span class="name">tt</span>&gt;</span>, <span class="tag">&lt;<span class="name">tt</span>&gt;</span>set<span class="tag">&lt;/<span class="name">tt</span>&gt;</span>,</span><br><span class="line">* <span class="tag">&lt;<span class="name">tt</span>&gt;</span>iterator<span class="tag">&lt;/<span class="name">tt</span>&gt;</span>, and <span class="tag">&lt;<span class="name">tt</span>&gt;</span>listIterator<span class="tag">&lt;/<span class="name">tt</span>&gt;</span> operations run in constant</span><br><span class="line">* time.  The <span class="tag">&lt;<span class="name">tt</span>&gt;</span>add<span class="tag">&lt;/<span class="name">tt</span>&gt;</span> operation runs in <span class="tag">&lt;<span class="name">i</span>&gt;</span>amortized constant time<span class="tag">&lt;/<span class="name">i</span>&gt;</span>,</span><br><span class="line">* that is, adding n elements requires O(n) time.  All of the other operations</span><br><span class="line">* run in linear time (roughly speaking).  The constant factor is low compared</span><br><span class="line">* to that for the <span class="tag">&lt;<span class="name">tt</span>&gt;</span>LinkedList<span class="tag">&lt;/<span class="name">tt</span>&gt;</span> implementation.</span><br></pre></td></tr></table></figure>
<p>constant 常数<br>size()，isEmpty()，get()，set()，iterator()，listIterator()这些操作运行在常数时间，大概意思应该说的是这些方法经常用。<br>amortized 分期偿还，摊销<br>add() 操作在平摊常数时间中，操作即方法之意<br>that is 那是，添加n个元素要求在O(n) 时间内，注意下是O(n)time，而不是0零啊，我第一反应是同时，现在想来不是同时的意思了。<br>添加n个元素需要O(n)时间。<br>O(n)感觉好像在哪里见过嘞，哦哦之前算法书里面讲过好像。<br>也就是说添加n个元素，数据量增大n倍，那么耗时也就增大几倍。<br>in linear time 在线性时间以内<br>（粗略的来说）所有的其他操作运行都在限行时间以内。<br>factor 因素<br>compared 相比<br>low 就没必要翻译了吧<br>常量因素是低于LinkedList的实现，与LinkedList实现相比，常量因子较低  </p>
<blockquote>
<p><a href="https://www.jianshu.com/p/f31744e423eb" target="_blank" rel="noopener">https://www.jianshu.com/p/f31744e423eb</a>  </p>
</blockquote>
<ul>
<li>描述算法复杂度时，常用o(1)，o(n)，o(logn)，o(nlogn)表示对应算法的时间复杂度，是算法的时空复杂度的表示。不仅仅用于表示时间复杂度，也用于表示空间复杂度。  </li>
<li>O后面的括号中有一个函数，指明某个算法的耗时/耗空间与数据增长量之间的关系。其中的n代表输入数据的量  </li>
<li>比如时间复杂度为O(n)，就代表数据量增大几倍，耗时也增大几倍。比如常见的遍历算法。再比如时间复杂度O(n^2)，就代表数据量增大n倍时，耗时增大n的平方倍，这是比线性更高的时间复杂度。比如冒泡排序，就是典型的O(n^2)的算法，对n个数排序，需要扫描n x n次。  </li>
<li>再比如O(logn)，当数据增大n倍时，耗时增大logn倍(这里的log是以2为底的，比如，当数据增大256倍时，耗时只增大8倍，是比线性还要低的时间复杂度)。二分查找就是O(logn)的算法，每找一次排除一半的可能，256个数据中查找只要找8次就可以找到目标。  </li>
<li>O(nlogn)同理，就是n乘以logn，当数据增大256倍时，耗时增大256*8=2048倍。这个复杂度高于线性低于平方。归并排序就是O(nlogn)的时间复杂度。  </li>
<li>O(1)就是最低的时空复杂度了，也就是耗时/耗空间与输入数据大小无关，无论输入数据增大多少倍，耗时/耗空间都不变。哈希算法就是典型的O(1)时间复杂度，无论数据规模多大，都可以在一次计算后找到目标（不考虑冲突的话）。  </li>
</ul>
<p>看来阅读源码，不仅让我知道了我要学算法，我还把冒泡排序这些….东西都给忘了。  </p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">* &lt;p&gt;Each &lt;tt&gt;ArrayList&lt;/tt&gt;<span class="built_in"> instance </span>has a &lt;i&gt;capacity&lt;/i&gt;.  The capacity is</span><br><span class="line">* the size of the<span class="built_in"> array </span>used to store the elements in the list.  It is always</span><br><span class="line">* at least as large as the list size.  As elements are added to an ArrayList,</span><br><span class="line">* its capacity grows automatically.  The details of the growth policy are not</span><br><span class="line">* specified beyond the fact that adding an element has constant amortized</span><br><span class="line">* time cost.</span><br></pre></td></tr></table></figure>
<p>each 每个，each other互相<br>每个ArrayList实例都有一个capacity,capacity电梯里面有，我看到过，容量，就是能够乘载人数容量的那个<br>这个容量是数组的大小，被用来存储list当中的元素。<br>其总是至少和数组的大小是一样大的。<br>我忘了这个as as啥意思了。<br>as large as 一样大；at least 至少<br>last but not least 最后但是同等重要的，突然想起了这个<br>最为元素是要被添加到一个ArrayList集合当中去的，他的容量增长是自动增长的。<br>automatically 自动，因为auto是自动的意思吧所以联想自动。<br>details 细节； policy 政策；specified 指定的；beyond 除了；fact 事实<br>这个增长政策的细节是没有指定的除了事实上添加一个元素有常数平摊时间消耗上<br>增长策略的细节没有指定，除了添加一个元素有恒定的平摊时间成本。<br>我都不知道我在说些什么鬼。  </p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">* &lt;p&gt;An application can increase the capacity of an &lt;tt&gt;ArrayList&lt;/tt&gt; instance</span><br><span class="line">* before adding a large number of elements using the &lt;tt&gt;ensureCapacity&lt;/tt&gt;</span><br><span class="line">* operation.  This may reduce the amount of incremental reallocation.</span><br></pre></td></tr></table></figure>
<p>a large number of 大量的<br>increase 增加<br>一个应用程序能够增长其一个ArrayList实例的容量之前添加一个大数量的元素时使用ensureCapacity 确保容量操作<br>在使用ensureCapacity操作添加大量元素之前，应用程序可以增加一个ArrayList实例的容量<br>incremental 增量 ；reallocation 重新分配；allocation 分配<br>这或许可以减少大数量的增量重新分配.<br>amount 数量<br>这可能会减少增量重新分配的数量。  </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">* &lt;p&gt;&lt;strong&gt;Note that this implementation <span class="keyword">is</span> <span class="keyword">not</span> synchronized.&lt;/strong&gt;</span><br><span class="line">* <span class="keyword">If</span> multiple threads <span class="keyword">access</span> an &lt;tt&gt;ArrayList&lt;/tt&gt; instance <span class="keyword">concurrently</span>,</span><br><span class="line">* <span class="keyword">and</span> at least one <span class="keyword">of</span> the threads modifies the list structurally, it</span><br><span class="line">* &lt;i&gt;must&lt;/i&gt; be synchronized externally.  (A structural modification <span class="keyword">is</span></span><br><span class="line">* <span class="keyword">any</span> operation that adds <span class="keyword">or</span> deletes one <span class="keyword">or</span> more elements, <span class="keyword">or</span> explicitly</span><br><span class="line">* resizes the backing <span class="keyword">array</span>; merely setting the <span class="keyword">value</span> <span class="keyword">of</span> an element <span class="keyword">is</span> <span class="keyword">not</span></span><br><span class="line">* a structural modification.)  This <span class="keyword">is</span> typically accomplished <span class="keyword">by</span></span><br><span class="line">* synchronizing <span class="keyword">on</span> <span class="keyword">some</span> <span class="keyword">object</span> that naturally encapsulates the list.</span><br></pre></td></tr></table></figure>
<p>Note 请注意<br>请注意这个实现方法并不是同步的。也就是ArrayList非同步。<br>concurrently 同时  ；structurally 构造，externally 外部<br>如果多个线程同时访问同一个ArrayList实例，并且至少某一个线程对这个list集合做了结构性的修改的操作，他必须是外部同步的<br>explicitly 显示地<br>一个构造性修改可以使任意操作比如add添加或者delete删除某一个或者更多的元素，或者显示地重新调整了数组的大小<br>backing array 备份数组 ；modification 修改<br>仅仅是设置一个元素的值是不需要一个构造性的修改的<br>accomplished  完成 ；typically 通常 ；naturally自然；encapsulates封装<br>这是通常完成同步在某些自然封装的list对象上<br>这通常是通过对一些自然封装list的对象进行同步来实现的。  </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">* If no such object exists, the <span class="built_in">list</span> should be <span class="string">"wrapped"</span> using the</span><br><span class="line">* &#123;@link Collections#synchronizedList <span class="module-access"><span class="module"><span class="identifier">Collections</span>.</span></span>synchronizedList&#125;</span><br><span class="line">* <span class="keyword">method</span>.  This is best <span class="keyword">done</span> at creation time, <span class="keyword">to</span> prevent accidental</span><br><span class="line">* unsynchronized access <span class="keyword">to</span> the <span class="built_in">list</span>:&lt;pre&gt;</span><br><span class="line">*   List <span class="built_in">list</span> = <span class="module-access"><span class="module"><span class="identifier">Collections</span>.</span></span>synchronized<span class="constructor">List(<span class="params">new</span> ArrayList(<span class="operator">...</span>)</span>);&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>如果没有这样的对象存在，这个list集合应该是封装的，使用{@link Collections#synchronizedList Collections.synchronizedList}方法，同步集合。<br>prevent 防止；accidental 意外<br>这是最好的做法在创建时间上，来防止意外的不同步来访问list集合  </p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="comment">* &lt;p&gt;&lt;a name="fail-fast"&gt;</span></span><br><span class="line"><span class="comment">* The iterators returned by this class's &#123;@link #iterator() iterator&#125; and</span></span><br><span class="line"><span class="comment">* &#123;@link #listIterator(int) listIterator&#125; methods are &lt;em&gt;fail-fast&lt;/em&gt;:&lt;/a&gt;</span></span><br><span class="line"><span class="comment">* if the list is structurally modified at any time after the iterator is</span></span><br><span class="line"><span class="comment">* created, in any way except through the iterator's own</span></span><br><span class="line"><span class="comment">* &#123;@link ListIterator#remove() remove&#125; or</span></span><br><span class="line"><span class="comment">* &#123;@link ListIterator#add(Object) add&#125; methods, the iterator will throw a</span></span><br><span class="line"><span class="comment">* &#123;@link ConcurrentModificationException&#125;.  Thus, in the face of</span></span><br><span class="line"><span class="comment">* concurrent modification, the iterator fails quickly and cleanly, rather</span></span><br><span class="line"><span class="comment">* than risking arbitrary, non-deterministic behavior at an undetermined</span></span><br><span class="line"><span class="comment">* time in the future.</span></span><br></pre></td></tr></table></figure>
<p>超链接：快速失败<br>这个迭代器通过类的iterator以及listIterator方法返回是快速失败的。<br>如果list是构造性修改在迭代器创建的任何时间之后，在任何方法当中除了迭代器自身<br>如果再迭代器创建后的任何时候对list集合进行了结构上的修改，则可以使用除了迭代器本身之外的方式进行修改  </p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">* <span class="symbol">&lt;p&gt;</span>Note that the fail-fast behavior of <span class="keyword">an</span> iterator cannot <span class="keyword">be</span> guaranteed</span><br><span class="line">* <span class="keyword">as</span> it <span class="keyword">is</span>, generally speaking, impossible <span class="keyword">to</span> <span class="keyword">make</span> any hard guarantees in the</span><br><span class="line">* presence of unsynchronized concurrent modification.  Fail-fast iterators</span><br><span class="line">* <span class="keyword">throw</span> &#123;@code ConcurrentModificationException&#125; <span class="keyword">on</span> <span class="keyword">a</span> best-effort basis.</span><br><span class="line">* Therefore, it would <span class="keyword">be</span> wrong <span class="keyword">to</span> <span class="keyword">write</span> <span class="keyword">a</span> program that depended <span class="keyword">on</span> this</span><br><span class="line">* exception <span class="keyword">for</span> its correctnes<span class="variable">s:</span>  <span class="symbol">&lt;i&gt;</span>the fail-fast behavior of iterators</span><br><span class="line">* should <span class="keyword">be</span> used <span class="keyword">only</span> <span class="keyword">to</span> detect bugs.&lt;/i&gt;</span><br></pre></td></tr></table></figure>
<p>guarantees 担保；presence存在 ；impossible 不可能的<br>请注意快速失败 一个迭代器不能够担保作为他自身的行为，通常来说，来制作困难的担保存在在不同步且同时修改是不可能的。<br>在不同步并发修改的情况下，不可能做出任何严格的保证。<br>concurrent 并发<br>快速失败 迭代器应发的 并发修改异常 在一个最好的努力基础上。<br>尽最大努力抛出并发修改异常。<br>因此，他可能会导致错误的去写一个对于这个错误去依赖这个异常的程序<br>detect 检测<br>快速失败 迭代器应该被仅仅使用在检测bug的行为上  </p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="comment">* &lt;p&gt;This class is a member of the</span></span><br><span class="line"><span class="comment">* &lt;a href="&#123;@docRoot&#125;/../technotes/guides/collections/index.html"&gt;</span></span><br><span class="line"><span class="comment">* Java Collections Framework&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @author  Josh Bloch</span></span><br><span class="line"><span class="comment">* @author  Neal Gafter</span></span><br><span class="line"><span class="comment">* @see     Collection</span></span><br><span class="line"><span class="comment">* @see     List</span></span><br><span class="line"><span class="comment">* @see     LinkedList</span></span><br><span class="line"><span class="comment">* @see     Vector</span></span><br><span class="line"><span class="comment">* @since   1.2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>java集合框架  </p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ArrayList&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractList&lt;E&gt;</span></span></span><br><span class="line"><span class="class">        <span class="title">implements</span> <span class="title">List&lt;E&gt;</span>, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br></pre></td></tr></table></figure>
<p>ArrayList&lt;&gt; 可以泛型，继承了父类AbstractList 抽象List，实现了接口List，RandomAccess随机访问? 可可隆化，以及序列化这几个接口。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;<span class="comment">//定义了一个常量 序列化版本uid</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default initial capacity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>默认一个初始化容量。<br>默认的这个容量的值为10，也就是说这个ArrayList里面默认能放10个object  </p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Shared empty<span class="built_in"> array </span>instance used for empty instances.</span><br><span class="line"> */</span><br><span class="line">private<span class="keyword"> static</span><span class="keyword"> final</span> Object[] EMPTY_E<span class="class">LEMENTDATA = &#123;&#125;;</span></span><br></pre></td></tr></table></figure>
<p>分享空的数组实例给空的实例数组  </p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Shared empty<span class="built_in"> array </span>instance used for default sized empty instances. We</span><br><span class="line"> * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span><br><span class="line"> * first element is added.</span><br><span class="line"> */</span><br><span class="line">private<span class="keyword"> static</span><span class="keyword"> final</span> Object[] DEFAU<span class="class">LTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span></span><br></pre></td></tr></table></figure>
<p>distinguish 区分；inflate 膨胀<br>分享空的数组实例使用给默认大小的空的实例。 我们区分这个是来自于一个空元素数组  ，来知道当第一个元素被添加时会膨胀多少<br>我们将其与EMPTY_ELEMENTDATA区分开来，以了解在添加第一个元素时应该膨胀多少  </p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The<span class="built_in"> array </span>buffer into which the elements of the ArrayList are stored.</span><br><span class="line"> * The capacity of the ArrayList is the length of this<span class="built_in"> array </span>buffer. Any</span><br><span class="line"> * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class="line"> * will be expanded to DEFAULT_CAPACITY when the first element is added.</span><br><span class="line"> */</span><br><span class="line">transient Object[] elementData; // non-private to simplify nested class access</span><br></pre></td></tr></table></figure>
<p>被ArrayList所存储的元素会被缓冲到数组当中去。<br>存储ArrayList元素的数组缓冲区。<br>这个ArrayList的容量是数组缓冲区的长度。<br>任何一个空的ArrayList以及他的数组 等于等于 默认容量空元素数组 将会被扩展到默认容量当第一个元素被添加的时候。  </p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The size of the ArrayList (the number of elements it contains).</span></span><br><span class="line"><span class="comment"> * @serial</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">size</span>;</span><br></pre></td></tr></table></figure>
<p>定义这个ArrayList集合的大小，也就是这个集合当中所包含的元素个数  </p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty list with the specified initial capacity.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  initialCapacity  the initial capacity of the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if the specified initial capacity</span></span><br><span class="line"><span class="comment"> *         is negative</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(initialCapacity == <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造一个空的list集合以及指定初始化的容量。<br>initalCapacity list集合当中初始化容量大小，当前为构造方法，普通方法为：访问修饰+返回类型+方法名称+方法参数+方法体<br>如果初始化容量大小大于0，则元素数组构建一个Object数组，当中初始容量为初始化容量大小<br>如果初始化容量大小等于0，则元素数组则是一个空数组，即所定义的空数组<br>如果初始化容量大小既不大于0也不是等于0，那就是小于0，为负数了，那么则抛出异常，非法参数异常，非法容量+所需要初始化容量的大小值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty list with an initial capacity of ten.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造方法是一个空的list集合，并带有默认的初始化容量为10  </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a list containing the elements of the specified</span></span><br><span class="line"><span class="comment"> * collection, in the order they are returned by the collection's</span></span><br><span class="line"><span class="comment"> * iterator.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param c the collection whose elements are to be placed into this list</span></span><br><span class="line"><span class="comment"> * @throws NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="constructor">ArrayList(Collection&lt;? <span class="params">extends</span> E&gt; <span class="params">c</span>)</span> &#123;</span><br><span class="line">    elementData = c.<span class="keyword">to</span><span class="constructor">Array()</span>;</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.get<span class="constructor">Class()</span> != Object<span class="literal">[]</span>.<span class="keyword">class</span>)</span><br><span class="line">            elementData = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">Of(<span class="params">elementData</span>, <span class="params">size</span>, Object[].<span class="params">class</span>)</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造一个list集合，该list集合包含指定集合当中的元素，通过集合的迭代按照他们返回的顺序<br>参数c为元素将被替换到list当中的集合<br>抛出空指针异常如果该指定的集合为空<br>private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};<br>elementData原来就是一个空数组，现在重新赋值为一个新的数组，即该集合数组化成为一个数组。<br>对size变量进行赋值，size即为数组elementData的长度，如果size不为0，则<br>incorrectly 不正确<br>集合c数组后之后可能错误的不能返回对象数组<br>如果数组elementData的反射不等于Object[]数组的反射，即两者如果不是同出一宗的话<br>数组elementData将又被重新赋值，数组的复制，复制的数组elementData，复制的个数，以Object[]对象数组的形式<br>如果elementData的长度为0，则elementData数组则将被重新赋值为<br>private static final Object[] EMPTY_ELEMENTDATA = {};空数组  </p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Trims the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt;<span class="built_in"> instance </span>to be the</span><br><span class="line"> * list's current size.  An application can use this operation to minimize</span><br><span class="line"> * the storage of an &lt;tt&gt;ArrayList&lt;/tt&gt; instance.</span><br><span class="line"> */</span><br><span class="line">public void trimToSize() &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">   <span class="built_in"> if </span>(size &lt; elementData.length) &#123;</span><br><span class="line">        elementData = (size == 0)</span><br><span class="line">          ? EMPTY_ELEMENTDATA</span><br><span class="line">         <span class="keyword"> :</span> Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>trim 修剪；<br>修剪ArrayList实例的容量来成为这个list集合的当前size数量<br>minimize 最小化；<br>一个应用程序能够使用该操作来最小化一个ArrayList实例的存储量<br>该类ArrayList当中没有定影modCount，应该是继承的父类当中的变量。<br>修改次数自增。<br>如果size变量小于elementData数组的长度，则对elementData数组进行重新复制，三元换算法，如果size为0则elementData取值为空数组，否则进行复制elementData当中的size个元素成为一个新数组并赋值给elementData。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Increases the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance, if</span></span><br><span class="line"><span class="comment">     * necessary, to ensure that it can hold at least the number of elements</span></span><br><span class="line"><span class="comment">     * specified by the minimum capacity argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   minCapacity   the desired minimum capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">            <span class="comment">// any size if not default element table</span></span><br><span class="line">            ? <span class="number">0</span></span><br><span class="line">            <span class="comment">// larger than default for default empty table. It's already</span></span><br><span class="line">            <span class="comment">// supposed to be at default size.</span></span><br><span class="line">            : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">            ensureExplicitCapacity(minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The maximum size of array to allocate.</span></span><br><span class="line"><span class="comment">     * Some VMs reserve some header words in an array.</span></span><br><span class="line"><span class="comment">     * Attempts to allocate larger arrays may result in</span></span><br><span class="line"><span class="comment">     * OutOfMemoryError: Requested array size exceeds VM limit</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Increases the capacity to ensure that it can hold at least the</span></span><br><span class="line"><span class="comment">     * number of elements specified by the minimum capacity argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minCapacity the desired minimum capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the number of elements in this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of elements in this list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains no elements.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list contains no elements</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains the specified element.</span></span><br><span class="line"><span class="comment">     * More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this list contains</span></span><br><span class="line"><span class="comment">     * at least one element &lt;tt&gt;e&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o element whose presence in this list is to be tested</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list contains the specified element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the index of the first occurrence of the specified element</span></span><br><span class="line"><span class="comment">     * in this list, or -1 if this list does not contain the element.</span></span><br><span class="line"><span class="comment">     * More formally, returns the lowest index &lt;tt&gt;i&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment">     * or -1 if there is no such index.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the index of the last occurrence of the specified element</span></span><br><span class="line"><span class="comment">     * in this list, or -1 if this list does not contain the element.</span></span><br><span class="line"><span class="comment">     * More formally, returns the highest index &lt;tt&gt;i&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment">     * or -1 if there is no such index.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a shallow copy of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance.  (The</span></span><br><span class="line"><span class="comment">     * elements themselves are not copied.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a clone of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">            v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">            v.modCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an array containing all of the elements in this list</span></span><br><span class="line"><span class="comment">     * in proper sequence (from first to last element).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The returned array will be "safe" in that no references to it are</span></span><br><span class="line"><span class="comment">     * maintained by this list.  (In other words, this method must allocate</span></span><br><span class="line"><span class="comment">     * a new array).  The caller is thus free to modify the returned array.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method acts as bridge between array-based and collection-based</span></span><br><span class="line"><span class="comment">     * APIs.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an array containing all of the elements in this list in</span></span><br><span class="line"><span class="comment">     *         proper sequence</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an array containing all of the elements in this list in proper</span></span><br><span class="line"><span class="comment">     * sequence (from first to last element); the runtime type of the returned</span></span><br><span class="line"><span class="comment">     * array is that of the specified array.  If the list fits in the</span></span><br><span class="line"><span class="comment">     * specified array, it is returned therein.  Otherwise, a new array is</span></span><br><span class="line"><span class="comment">     * allocated with the runtime type of the specified array and the size of</span></span><br><span class="line"><span class="comment">     * this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;If the list fits in the specified array with room to spare</span></span><br><span class="line"><span class="comment">     * (i.e., the array has more elements than the list), the element in</span></span><br><span class="line"><span class="comment">     * the array immediately following the end of the collection is set to</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;null&lt;/tt&gt;.  (This is useful in determining the length of the</span></span><br><span class="line"><span class="comment">     * list &lt;i&gt;only&lt;/i&gt; if the caller knows that the list does not contain</span></span><br><span class="line"><span class="comment">     * any null elements.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a the array into which the elements of the list are to</span></span><br><span class="line"><span class="comment">     *          be stored, if it is big enough; otherwise, a new array of the</span></span><br><span class="line"><span class="comment">     *          same runtime type is allocated for this purpose.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an array containing the elements of the list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ArrayStoreException if the runtime type of the specified array</span></span><br><span class="line"><span class="comment">     *         is not a supertype of the runtime type of every element in</span></span><br><span class="line"><span class="comment">     *         this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified array is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">            <span class="comment">// Make a new array of a's runtime type, but my contents:</span></span><br><span class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">            a[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Positional Access Operations</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the element at the specified position in this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  index index of the element to return</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the element at the specified position in this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> elementData(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Replaces the element at the specified position in this list with</span></span><br><span class="line"><span class="comment">     * the specified element.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index index of the element to replace</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element element to be stored at the specified position</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the element previously at the specified position</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts the specified element at the specified position in this</span></span><br><span class="line"><span class="comment">     * list. Shifts the element currently at that position (if any) and</span></span><br><span class="line"><span class="comment">     * any subsequent elements to the right (adds one to their indices).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index index at which the specified element is to be inserted</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element element to be inserted</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                         size - index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the element at the specified position in this list.</span></span><br><span class="line"><span class="comment">     * Shifts any subsequent elements to the left (subtracts one from their</span></span><br><span class="line"><span class="comment">     * indices).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index the index of the element to be removed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the element that was removed from the list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the first occurrence of the specified element from this list,</span></span><br><span class="line"><span class="comment">     * if it is present.  If the list does not contain the element, it is</span></span><br><span class="line"><span class="comment">     * unchanged.  More formally, removes the element with the lowest index</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;i&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * (if such an element exists).  Returns &lt;tt&gt;true&lt;/tt&gt; if this list</span></span><br><span class="line"><span class="comment">     * contained the specified element (or equivalently, if this list</span></span><br><span class="line"><span class="comment">     * changed as a result of the call).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o element to be removed from this list, if present</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list contained the specified element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Private remove method that skips bounds checking and does not</span></span><br><span class="line"><span class="comment">     * return the value removed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes all of the elements from this list.  The list will</span></span><br><span class="line"><span class="comment">     * be empty after this call returns.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear to let GC do its work</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Appends all of the elements in the specified collection to the end of</span></span><br><span class="line"><span class="comment">     * this list, in the order that they are returned by the</span></span><br><span class="line"><span class="comment">     * specified collection's Iterator.  The behavior of this operation is</span></span><br><span class="line"><span class="comment">     * undefined if the specified collection is modified while the operation</span></span><br><span class="line"><span class="comment">     * is in progress.  (This implies that the behavior of this call is</span></span><br><span class="line"><span class="comment">     * undefined if the specified collection is this list, and this</span></span><br><span class="line"><span class="comment">     * list is nonempty.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c collection containing elements to be added to this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts all of the elements in the specified collection into this</span></span><br><span class="line"><span class="comment">     * list, starting at the specified position.  Shifts the element</span></span><br><span class="line"><span class="comment">     * currently at that position (if any) and any subsequent elements to</span></span><br><span class="line"><span class="comment">     * the right (increases their indices).  The new elements will appear</span></span><br><span class="line"><span class="comment">     * in the list in the order that they are returned by the</span></span><br><span class="line"><span class="comment">     * specified collection's iterator.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index index at which to insert the first element from the</span></span><br><span class="line"><span class="comment">     *              specified collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c collection containing elements to be added to this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                             numMoved);</span><br><span class="line"></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes from this list all of the elements whose index is between</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> fromIndex&#125;, inclusive, and &#123;<span class="doctag">@code</span> toIndex&#125;, exclusive.</span></span><br><span class="line"><span class="comment">     * Shifts any succeeding elements to the left (reduces their index).</span></span><br><span class="line"><span class="comment">     * This call shortens the list by &#123;<span class="doctag">@code</span> (toIndex - fromIndex)&#125; elements.</span></span><br><span class="line"><span class="comment">     * (If &#123;<span class="doctag">@code</span> toIndex==fromIndex&#125;, this operation has no effect.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException if &#123;<span class="doctag">@code</span> fromIndex&#125; or</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> toIndex&#125; is out of range</span></span><br><span class="line"><span class="comment">     *         (&#123;<span class="doctag">@code</span> fromIndex &lt; 0 ||</span></span><br><span class="line"><span class="comment">     *          fromIndex &gt;= size() ||</span></span><br><span class="line"><span class="comment">     *          toIndex &gt; size() ||</span></span><br><span class="line"><span class="comment">     *          toIndex &lt; fromIndex&#125;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> numMoved = size - toIndex;</span><br><span class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class="line">                         numMoved);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear to let GC do its work</span></span><br><span class="line">        <span class="keyword">int</span> newSize = size - (toIndex-fromIndex);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = newSize; i &lt; size; i++) &#123;</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size = newSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Checks if the given index is in range.  If not, throws an appropriate</span></span><br><span class="line"><span class="comment">     * runtime exception.  This method does *not* check if the index is</span></span><br><span class="line"><span class="comment">     * negative: It is always used immediately prior to an array access,</span></span><br><span class="line"><span class="comment">     * which throws an ArrayIndexOutOfBoundsException if index is negative.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A version of rangeCheck used by add and addAll.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an IndexOutOfBoundsException detail message.</span></span><br><span class="line"><span class="comment">     * Of the many possible refactorings of the error handling code,</span></span><br><span class="line"><span class="comment">     * this "outlining" performs best with both server and client VMs.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">outOfBoundsMsg</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes from this list all of its elements that are contained in the</span></span><br><span class="line"><span class="comment">     * specified collection.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c collection containing elements to be removed from this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException if the class of an element of this list</span></span><br><span class="line"><span class="comment">     *         is incompatible with the specified collection</span></span><br><span class="line"><span class="comment">     * (&lt;a href="Collection.html#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if this list contains a null element and the</span></span><br><span class="line"><span class="comment">     *         specified collection does not permit null elements</span></span><br><span class="line"><span class="comment">     * (&lt;a href="Collection.html#optional-restrictions"&gt;optional&lt;/a&gt;),</span></span><br><span class="line"><span class="comment">     *         or if the specified collection is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Collection#contains(Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(c);</span><br><span class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retains only the elements in this list that are contained in the</span></span><br><span class="line"><span class="comment">     * specified collection.  In other words, removes from this list all</span></span><br><span class="line"><span class="comment">     * of its elements that are not contained in the specified collection.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c collection containing elements to be retained in this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException if the class of an element of this list</span></span><br><span class="line"><span class="comment">     *         is incompatible with the specified collection</span></span><br><span class="line"><span class="comment">     * (&lt;a href="Collection.html#optional-restrictions"&gt;optional&lt;/a&gt;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if this list contains a null element and the</span></span><br><span class="line"><span class="comment">     *         specified collection does not permit null elements</span></span><br><span class="line"><span class="comment">     * (&lt;a href="Collection.html#optional-restrictions"&gt;optional&lt;/a&gt;),</span></span><br><span class="line"><span class="comment">     *         or if the specified collection is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Collection#contains(Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(c);</span><br><span class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (; r &lt; size; r++)</span><br><span class="line">                <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</span><br><span class="line">                    elementData[w++] = elementData[r];</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Preserve behavioral compatibility with AbstractCollection,</span></span><br><span class="line">            <span class="comment">// even if c.contains() throws.</span></span><br><span class="line">            <span class="keyword">if</span> (r != size) &#123;</span><br><span class="line">                System.arraycopy(elementData, r,</span><br><span class="line">                                 elementData, w,</span><br><span class="line">                                 size - r);</span><br><span class="line">                w += size - r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (w != size) &#123;</span><br><span class="line">                <span class="comment">// clear to let GC do its work</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</span><br><span class="line">                    elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">                modCount += size - w;</span><br><span class="line">                size = w;</span><br><span class="line">                modified = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Save the state of the &lt;tt&gt;ArrayList&lt;/tt&gt; instance to a stream (that</span></span><br><span class="line"><span class="comment">     * is, serialize it).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serialData</span> The length of the array backing the &lt;tt&gt;ArrayList&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     *             instance is emitted (int), followed by all of its elements</span></span><br><span class="line"><span class="comment">     *             (each an &lt;tt&gt;Object&lt;/tt&gt;) in the proper order.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">        <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">        s.writeInt(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            s.writeObject(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reconstitute the &lt;tt&gt;ArrayList&lt;/tt&gt; instance from a stream (that is,</span></span><br><span class="line"><span class="comment">     * deserialize it).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in capacity</span></span><br><span class="line">        s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// be like clone(), allocate array based upon size not capacity</span></span><br><span class="line">            <span class="keyword">int</span> capacity = calculateCapacity(elementData, size);</span><br><span class="line">            SharedSecrets.getJavaOISAccess().checkArray(s, Object[]<span class="class">.<span class="keyword">class</span>, <span class="title">capacity</span>)</span>;</span><br><span class="line">            ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">            Object[] a = elementData;</span><br><span class="line">            <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">                a[i] = s.readObject();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a list iterator over the elements in this list (in proper</span></span><br><span class="line"><span class="comment">     * sequence), starting at the specified position in the list.</span></span><br><span class="line"><span class="comment">     * The specified index indicates the first element that would be</span></span><br><span class="line"><span class="comment">     * returned by an initial call to &#123;<span class="doctag">@link</span> ListIterator#next next&#125;.</span></span><br><span class="line"><span class="comment">     * An initial call to &#123;<span class="doctag">@link</span> ListIterator#previous previous&#125; would</span></span><br><span class="line"><span class="comment">     * return the element with the specified index minus one.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The returned list iterator is &lt;a href="#fail-fast"&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a list iterator over the elements in this list (in proper</span></span><br><span class="line"><span class="comment">     * sequence).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The returned list iterator is &lt;a href="#fail-fast"&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #listIterator(int)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an iterator over the elements in this list in proper sequence.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The returned iterator is &lt;a href="#fail-fast"&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an iterator over the elements in this list in proper sequence</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An optimized version of AbstractList.Itr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">                cursor = lastRet;</span><br><span class="line">                lastRet = -<span class="number">1</span>;</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(consumer);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">                consumer.accept((E) elementData[i++]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">            cursor = i;</span><br><span class="line">            lastRet = i - <span class="number">1</span>;</span><br><span class="line">            checkForComodification();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An optimized version of AbstractList.ListItr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        ListItr(<span class="keyword">int</span> index) &#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">            cursor = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            cursor = i;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ArrayList.<span class="keyword">this</span>.set(lastRet, e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = cursor;</span><br><span class="line">                ArrayList.<span class="keyword">this</span>.add(i, e);</span><br><span class="line">                cursor = i + <span class="number">1</span>;</span><br><span class="line">                lastRet = -<span class="number">1</span>;</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a view of the portion of this list between the specified</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> fromIndex&#125;, inclusive, and &#123;<span class="doctag">@code</span> toIndex&#125;, exclusive.  (If</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> fromIndex&#125; and &#123;<span class="doctag">@code</span> toIndex&#125; are equal, the returned list is</span></span><br><span class="line"><span class="comment">     * empty.)  The returned list is backed by this list, so non-structural</span></span><br><span class="line"><span class="comment">     * changes in the returned list are reflected in this list, and vice-versa.</span></span><br><span class="line"><span class="comment">     * The returned list supports all of the optional list operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method eliminates the need for explicit range operations (of</span></span><br><span class="line"><span class="comment">     * the sort that commonly exist for arrays).  Any operation that expects</span></span><br><span class="line"><span class="comment">     * a list can be used as a range operation by passing a subList view</span></span><br><span class="line"><span class="comment">     * instead of a whole list.  For example, the following idiom</span></span><br><span class="line"><span class="comment">     * removes a range of elements from a list:</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     *      list.subList(from, to).clear();</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * Similar idioms may be constructed for &#123;<span class="doctag">@link</span> #indexOf(Object)&#125; and</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #lastIndexOf(Object)&#125;, and all of the algorithms in the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Collections&#125; class can be applied to a subList.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The semantics of the list returned by this method become undefined if</span></span><br><span class="line"><span class="comment">     * the backing list (i.e., this list) is &lt;i&gt;structurally modified&lt;/i&gt; in</span></span><br><span class="line"><span class="comment">     * any way other than via the returned list.  (Structural modifications are</span></span><br><span class="line"><span class="comment">     * those that change the size of this list, or otherwise perturb it in such</span></span><br><span class="line"><span class="comment">     * a fashion that iterations in progress may yield incorrect results.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, <span class="number">0</span>, fromIndex, toIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">subListRangeCheck</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"fromIndex = "</span> + fromIndex);</span><br><span class="line">        <span class="keyword">if</span> (toIndex &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"toIndex = "</span> + toIndex);</span><br><span class="line">        <span class="keyword">if</span> (fromIndex &gt; toIndex)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromIndex("</span> + fromIndex +</span><br><span class="line">                                               <span class="string">") &gt; toIndex("</span> + toIndex + <span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SubList</span> <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">RandomAccess</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AbstractList&lt;E&gt; parent;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parentOffset;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> offset;</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">        SubList(AbstractList&lt;E&gt; parent,</span><br><span class="line">                <span class="keyword">int</span> offset, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) &#123;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">            <span class="keyword">this</span>.parentOffset = fromIndex;</span><br><span class="line">            <span class="keyword">this</span>.offset = offset + fromIndex;</span><br><span class="line">            <span class="keyword">this</span>.size = toIndex - fromIndex;</span><br><span class="line">            <span class="keyword">this</span>.modCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">            rangeCheck(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            E oldValue = ArrayList.<span class="keyword">this</span>.elementData(offset + index);</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.elementData[offset + index] = e;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            rangeCheck(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">return</span> ArrayList.<span class="keyword">this</span>.elementData(offset + index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.add(parentOffset + index, e);</span><br><span class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="keyword">this</span>.size++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            rangeCheck(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            E result = parent.remove(parentOffset + index);</span><br><span class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="keyword">this</span>.size--;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.removeRange(parentOffset + fromIndex,</span><br><span class="line">                               parentOffset + toIndex);</span><br><span class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="keyword">this</span>.size -= toIndex - fromIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> addAll(<span class="keyword">this</span>.size, c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            <span class="keyword">int</span> cSize = c.size();</span><br><span class="line">            <span class="keyword">if</span> (cSize==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.addAll(parentOffset + index, c);</span><br><span class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="keyword">this</span>.size += cSize;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> listIterator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="keyword">this</span>.offset;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ListIterator&lt;E&gt;() &#123;</span><br><span class="line">                <span class="keyword">int</span> cursor = index;</span><br><span class="line">                <span class="keyword">int</span> lastRet = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> cursor != SubList.<span class="keyword">this</span>.size;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    checkForComodification();</span><br><span class="line">                    <span class="keyword">int</span> i = cursor;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= SubList.<span class="keyword">this</span>.size)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">                    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    cursor = i + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">return</span> (E) elementData[offset + (lastRet = i)];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> cursor != <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    checkForComodification();</span><br><span class="line">                    <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">                    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    cursor = i;</span><br><span class="line">                    <span class="keyword">return</span> (E) elementData[offset + (lastRet = i)];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">                    Objects.requireNonNull(consumer);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> size = SubList.<span class="keyword">this</span>.size;</span><br><span class="line">                    <span class="keyword">int</span> i = cursor;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">                        consumer.accept((E) elementData[offset + (i++)]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">                    lastRet = cursor = i;</span><br><span class="line">                    checkForComodification();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> cursor;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> cursor - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">                    checkForComodification();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        SubList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">                        cursor = lastRet;</span><br><span class="line">                        lastRet = -<span class="number">1</span>;</span><br><span class="line">                        expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">                    checkForComodification();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        ArrayList.<span class="keyword">this</span>.set(offset + lastRet, e);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">                    checkForComodification();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> i = cursor;</span><br><span class="line">                        SubList.<span class="keyword">this</span>.add(i, e);</span><br><span class="line">                        cursor = i + <span class="number">1</span>;</span><br><span class="line">                        lastRet = -<span class="number">1</span>;</span><br><span class="line">                        expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (expectedModCount != ArrayList.<span class="keyword">this</span>.modCount)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">            subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, offset, fromIndex, toIndex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>.size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="keyword">this</span>.size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">outOfBoundsMsg</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+<span class="keyword">this</span>.size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (ArrayList.<span class="keyword">this</span>.modCount != <span class="keyword">this</span>.modCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayListSpliterator&lt;E&gt;(ArrayList.<span class="keyword">this</span>, offset,</span><br><span class="line">                                               offset + <span class="keyword">this</span>.size, <span class="keyword">this</span>.modCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="keyword">final</span> E[] elementData = (E[]) <span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">            action.accept(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &lt;em&gt;&lt;a href="Spliterator.html#binding"&gt;late-binding&lt;/a&gt;&lt;/em&gt;</span></span><br><span class="line"><span class="comment">     * and &lt;em&gt;fail-fast&lt;/em&gt; &#123;<span class="doctag">@link</span> Spliterator&#125; over the elements in this</span></span><br><span class="line"><span class="comment">     * list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The &#123;<span class="doctag">@code</span> Spliterator&#125; reports &#123;<span class="doctag">@link</span> Spliterator#SIZED&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Spliterator#SUBSIZED&#125;, and &#123;<span class="doctag">@link</span> Spliterator#ORDERED&#125;.</span></span><br><span class="line"><span class="comment">     * Overriding implementations should document the reporting of additional</span></span><br><span class="line"><span class="comment">     * characteristic values.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a &#123;<span class="doctag">@code</span> Spliterator&#125; over the elements in this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayListSpliterator&lt;&gt;(<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Index-based split-by-two, lazily initialized Spliterator */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListSpliterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * If ArrayLists were immutable, or structurally immutable (no</span></span><br><span class="line"><span class="comment">         * adds, removes, etc), we could implement their spliterators</span></span><br><span class="line"><span class="comment">         * with Arrays.spliterator. Instead we detect as much</span></span><br><span class="line"><span class="comment">         * interference during traversal as practical without</span></span><br><span class="line"><span class="comment">         * sacrificing much performance. We rely primarily on</span></span><br><span class="line"><span class="comment">         * modCounts. These are not guaranteed to detect concurrency</span></span><br><span class="line"><span class="comment">         * violations, and are sometimes overly conservative about</span></span><br><span class="line"><span class="comment">         * within-thread interference, but detect enough problems to</span></span><br><span class="line"><span class="comment">         * be worthwhile in practice. To carry this out, we (1) lazily</span></span><br><span class="line"><span class="comment">         * initialize fence and expectedModCount until the latest</span></span><br><span class="line"><span class="comment">         * point that we need to commit to the state we are checking</span></span><br><span class="line"><span class="comment">         * against; thus improving precision.  (This doesn't apply to</span></span><br><span class="line"><span class="comment">         * SubLists, that create spliterators with current non-lazy</span></span><br><span class="line"><span class="comment">         * values).  (2) We perform only a single</span></span><br><span class="line"><span class="comment">         * ConcurrentModificationException check at the end of forEach</span></span><br><span class="line"><span class="comment">         * (the most performance-sensitive method). When using forEach</span></span><br><span class="line"><span class="comment">         * (as opposed to iterators), we can normally only detect</span></span><br><span class="line"><span class="comment">         * interference after actions, not before. Further</span></span><br><span class="line"><span class="comment">         * CME-triggering checks apply to all other possible</span></span><br><span class="line"><span class="comment">         * violations of assumptions for example null or too-small</span></span><br><span class="line"><span class="comment">         * elementData array given its size(), that could only have</span></span><br><span class="line"><span class="comment">         * occurred due to interference.  This allows the inner loop</span></span><br><span class="line"><span class="comment">         * of forEach to run without any further checks, and</span></span><br><span class="line"><span class="comment">         * simplifies lambda-resolution. While this does entail a</span></span><br><span class="line"><span class="comment">         * number of checks, note that in the common case of</span></span><br><span class="line"><span class="comment">         * list.stream().forEach(a), no checks or other computation</span></span><br><span class="line"><span class="comment">         * occur anywhere other than inside forEach itself.  The other</span></span><br><span class="line"><span class="comment">         * less-often-used methods cannot take advantage of most of</span></span><br><span class="line"><span class="comment">         * these streamlinings.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;E&gt; list;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> index; <span class="comment">// current index, modified on advance/split</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fence; <span class="comment">// -1 until used; then one past last index</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount; <span class="comment">// initialized when fence set</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Create new spliterator covering the given  range */</span></span><br><span class="line">        ArrayListSpliterator(ArrayList&lt;E&gt; list, <span class="keyword">int</span> origin, <span class="keyword">int</span> fence,</span><br><span class="line">                             <span class="keyword">int</span> expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">this</span>.list = list; <span class="comment">// OK if null unless traversed</span></span><br><span class="line">            <span class="keyword">this</span>.index = origin;</span><br><span class="line">            <span class="keyword">this</span>.fence = fence;</span><br><span class="line">            <span class="keyword">this</span>.expectedModCount = expectedModCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getFence</span><span class="params">()</span> </span>&#123; <span class="comment">// initialize fence to size on first use</span></span><br><span class="line">            <span class="keyword">int</span> hi; <span class="comment">// (a specialized variant appears in method forEach)</span></span><br><span class="line">            ArrayList&lt;E&gt; lst;</span><br><span class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((lst = list) == <span class="keyword">null</span>)</span><br><span class="line">                    hi = fence = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    expectedModCount = lst.modCount;</span><br><span class="line">                    hi = fence = lst.size;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> hi;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ArrayListSpliterator&lt;E&gt; <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (lo &gt;= mid) ? <span class="keyword">null</span> : <span class="comment">// divide range in half unless too small</span></span><br><span class="line">                <span class="keyword">new</span> ArrayListSpliterator&lt;E&gt;(list, lo, index = mid,</span><br><span class="line">                                            expectedModCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">int</span> hi = getFence(), i = index;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; hi) &#123;</span><br><span class="line">                index = i + <span class="number">1</span>;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E)list.elementData[i];</span><br><span class="line">                action.accept(e);</span><br><span class="line">                <span class="keyword">if</span> (list.modCount != expectedModCount)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i, hi, mc; <span class="comment">// hoist accesses and checks from loop</span></span><br><span class="line">            ArrayList&lt;E&gt; lst; Object[] a;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">if</span> ((lst = list) != <span class="keyword">null</span> &amp;&amp; (a = lst.elementData) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    mc = lst.modCount;</span><br><span class="line">                    hi = lst.size;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    mc = expectedModCount;</span><br><span class="line">                <span class="keyword">if</span> ((i = index) &gt;= <span class="number">0</span> &amp;&amp; (index = hi) &lt;= a.length) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (; i &lt; hi; ++i) &#123;</span><br><span class="line">                        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E) a[i];</span><br><span class="line">                        action.accept(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (lst.modCount == mc)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">long</span>) (getFence() - index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeIf</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> E&gt; filter)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(filter);</span><br><span class="line">        <span class="comment">// figure out which elements are to be removed</span></span><br><span class="line">        <span class="comment">// any exception thrown from the filter predicate at this stage</span></span><br><span class="line">        <span class="comment">// will leave the collection unmodified</span></span><br><span class="line">        <span class="keyword">int</span> removeCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> BitSet removeSet = <span class="keyword">new</span> BitSet(size);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            <span class="keyword">final</span> E element = (E) elementData[i];</span><br><span class="line">            <span class="keyword">if</span> (filter.test(element)) &#123;</span><br><span class="line">                removeSet.set(i);</span><br><span class="line">                removeCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// shift surviving elements left over the spaces left by removed elements</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> anyToRemove = removeCount &gt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (anyToRemove) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> newSize = size - removeCount;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) &#123;</span><br><span class="line">                i = removeSet.nextClearBit(i);</span><br><span class="line">                elementData[j] = elementData[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=newSize; k &lt; size; k++) &#123;</span><br><span class="line">                elementData[k] = <span class="keyword">null</span>;  <span class="comment">// Let gc do its work</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.size = newSize;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">            modCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> anyToRemove;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(operator);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">            elementData[i] = operator.apply((E) elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        Arrays.sort((E[]) elementData, <span class="number">0</span>, size, c);</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>ArrayList</tag>
      </tags>
  </entry>
  <entry>
    <title>OSS</title>
    <url>/2020/03/12/Vuejs/Vuejs%E6%8E%A5%E8%A7%A6/</url>
    <content><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>虽然说不是第一次接触Vuejs,但是吧之前也只是打过包而已。<br>反正我是有点懵。<br>这个是依赖了ali-oss这个module进行oss文件下载运行，随便找篇百度的帖子搭建一个简单的vuejs工程，然后把我这个方案一的代码放到main.js里面，然后敲命令<br>搭建vuejs工程：<a href="https://www.jianshu.com/p/02b12c600c7b" target="_blank" rel="noopener">https://www.jianshu.com/p/02b12c600c7b</a><br>ali-oss依赖下载oss文件: <a href="https://www.cnblogs.com/zoo-x/articles/11778010.html" target="_blank" rel="noopener">https://www.cnblogs.com/zoo-x/articles/11778010.html</a><br>ali后台参考下并配置下: <a href="https://help.aliyun.com/knowledge_detail/39518.html?spm=a2c4g.11186623.2.25.46edc4516qVyeW" target="_blank" rel="noopener">https://help.aliyun.com/knowledge_detail/39518.html?spm=a2c4g.11186623.2.25.46edc4516qVyeW</a>  </p>
<p>反正就是多百度，多看阿里的API，要是不行就找售后提工单。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">cnpm install</span><br><span class="line">cnpm <span class="keyword">run</span><span class="bash"> dev</span></span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:8080/即可" target="_blank" rel="noopener">http://localhost:8080/即可</a></p>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">// The Vue build version <span class="keyword">to</span> load with the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf with an alias.</span><br><span class="line"><span class="keyword">import</span> Vue from <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App from <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router from <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> OSS from <span class="string">'ali-oss'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip =<span class="built_in"> false</span></span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 配置信息</span><br><span class="line"> */</span><br><span class="line">const region = <span class="string">'oss-cn-xxxxxxxxxxxx'</span> // 换成自己的region</span><br><span class="line">const accessKeyId = <span class="string">'xxxxxxxxxxxxxxxxx'</span> // 换成自己的accessKeyId</span><br><span class="line">const accessKeySecret = <span class="string">'xxxxxxxxxxxxxxxxxxxxxxxxx'</span> // 换成自己的accessKeySecret</span><br><span class="line">const bucket = <span class="string">'xxxxxxxxx'</span> // 换成自己的bucket名称</span><br><span class="line">// <span class="keyword">import</span> &#123; Message &#125; from <span class="string">'element-ui'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> client = new OSS(&#123;</span><br><span class="line">  region: region,</span><br><span class="line">  accessKeyId: accessKeyId,</span><br><span class="line">  accessKeySecret: accessKeySecret,</span><br><span class="line">  bucket: bucket</span><br><span class="line">&#125;)</span><br><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * @param &#123;上传是设置文<span class="built_in">件key</span> , 一般为文件名称&#125; objectKey</span><br><span class="line"> * @param &#123;文件file&#125; file</span><br><span class="line">//  上传</span><br><span class="line">const CooOss = <span class="keyword">function</span> (file) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (this instanceof CooOss) &#123;</span><br><span class="line">    <span class="keyword">let</span> objectKey = file.lastModified + <span class="string">'_'</span> + file<span class="built_in">.name</span> ;</span><br><span class="line">    <span class="keyword">return</span> new Promise((resolve,reject) =&gt; &#123;</span><br><span class="line">      client.multipartUpload(objectKey, file).<span class="keyword">then</span>(result =&gt; &#123;</span><br><span class="line">        resolve(&#123;</span><br><span class="line">          code: <span class="number">0</span>,</span><br><span class="line">          objectKey: objectKey,</span><br><span class="line">          url: this.getOssFileUrl(objectKey),</span><br><span class="line">          msg: <span class="string">'ok'</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;).<span class="keyword">catch</span>(err =&gt; &#123;</span><br><span class="line">        console.log(<span class="string">'上传出错了'</span>);</span><br><span class="line">        reject(&#123;code : -<span class="number">1</span> , url : <span class="string">""</span>, objectKey : <span class="string">""</span>, msg : <span class="string">"上传出错了"</span>&#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> new CooOss(file);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// 下载</span><br><span class="line">const downloadFile = <span class="keyword">function</span> <span class="built_in">(key</span>) &#123;</span><br><span class="line">  console.log<span class="built_in">(key</span>)</span><br><span class="line">  <span class="keyword">let</span> url = client.signatureUrl<span class="built_in">(key</span>)</span><br><span class="line">  <span class="keyword">let</span> Img = new Image()</span><br><span class="line">  <span class="keyword">let</span> dataURL = <span class="string">''</span></span><br><span class="line">  <span class="keyword">let</span> fileName =<span class="built_in"> key</span><span class="built_in">.substring</span><span class="built_in">(key</span>.indexOf(<span class="string">'_'</span>) + <span class="number">1</span>)</span><br><span class="line">  Img.src = url</span><br><span class="line">  Img.setAttribute(<span class="string">'crossOrigin'</span>, <span class="string">'Anonymous'</span>)</span><br><span class="line">  Img.onload = <span class="keyword">function</span> () &#123;</span><br><span class="line">    <span class="keyword">let</span> canvas =<span class="built_in"> document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line">    <span class="keyword">let</span> width = Img.width</span><br><span class="line">    <span class="keyword">let</span> height = Img.height</span><br><span class="line">    canvas.width = width</span><br><span class="line">    canvas.height = height</span><br><span class="line">    canvas.getContext(<span class="string">'2d'</span>).drawImage(Img, <span class="number">0</span>, <span class="number">0</span>, width, height)</span><br><span class="line">    dataURL = canvas.toDataURL(<span class="string">'image/png'</span>)</span><br><span class="line">    <span class="keyword">let</span> eleLink =<span class="built_in"> document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">    eleLink.download = fileName</span><br><span class="line">    eleLink.style.display = <span class="string">'none'</span></span><br><span class="line">    eleLink.href = dataURL</span><br><span class="line">   <span class="built_in"> document</span>.body.appendChild(eleLink)</span><br><span class="line">    eleLink.click()</span><br><span class="line">   <span class="built_in"> document</span>.body.removeChild(eleLink)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">downloadFile(<span class="string">'201912111621536609会员卡效果图.jpg'</span>)</span><br><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * @param &#123;上传是设置文<span class="built_in">件key</span> 一般是文件名&#125; obecjtKey</span><br><span class="line"> CooOss.prototype.getOssFileUrl = obecjtKey =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(!obecjtKey) <span class="keyword">return</span>  new Error(<span class="string">"object key 必须传"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"https://"</span> + bucket + <span class="string">"."</span> + region + <span class="string">".aliyuncs.com/"</span> + obecjtKey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  install(Vue)&#123;</span><br><span class="line">    Vue.prototype.Oss = &#123;</span><br><span class="line">      uploadFile : CooOss,</span><br><span class="line">      downloadFile : downloadFile</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>我自认为也不叫方案二吧，额，好吧总得给个名分。<br>就是如果要在oss下载文件，但是吧又不通过ali-oss包的话，因为david说他，觉得前端包太大了如果加了ali-oss的话，唉毕竟是老大，不敢反驳，瑟瑟发抖。好吧那就不用ali-oss进行下载oss文件。<br>然后就又换了种方法。<br>用javaScript，额这个网上一大堆啊。我也是百度的。  </p>
<blockquote>
<p>参考：  </p>
</blockquote>
<p><a href="https://www.cnblogs.com/xtjatswc/p/11345584.html" target="_blank" rel="noopener">https://www.cnblogs.com/xtjatswc/p/11345584.html</a><br><a href="https://blog.csdn.net/qq_34233080/article/details/90635235" target="_blank" rel="noopener">https://blog.csdn.net/qq_34233080/article/details/90635235</a>  </p>
<p>对了需要在程序当中访问，也就是localhost:8080/这种访问，清下缓存。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">售后工程师    <span class="number">2020</span><span class="number">-03</span><span class="number">-12</span> <span class="number">11</span>:<span class="number">36</span>:<span class="number">22</span></span><br><span class="line">您好，这个跨域的配置是可以的，您客户端情况下浏览器缓存后，不要直接访问这个URL，直接通过程序访问测试下是否正常，避免客户端缓存的情况</span><br></pre></td></tr></table></figure>

<p>差不多了，讲完了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"> /**</span><br><span class="line">     * 获取页面文件名</span><br><span class="line">     * @param url 文件url 8020-8079</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">downloadUrlFile</span><span class="params">(url)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="built_in">console</span>.log(<span class="string">"downloadFile====="</span>);</span></span><br><span class="line"><span class="javascript">      url= url.replace(<span class="regexp">/\\/g</span>, <span class="string">'/'</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">      xhr.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">      xhr.responseType = <span class="string">'blob'</span>;</span></span><br><span class="line"><span class="actionscript">      xhr.setRequestHeader(<span class="string">'Authorization'</span>, <span class="string">'Basic a2VybWl0Omtlcm1pdA=='</span>);</span></span><br><span class="line"><span class="actionscript">	  xhr.setRequestHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'http://localhost:8080'</span>);</span></span><br><span class="line"><span class="actionscript">	  xhr.setRequestHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'GET, POST, HEAD, PUT, DELETE'</span>);</span></span><br><span class="line"><span class="actionscript">	  xhr.setRequestHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Content-Type'</span>);</span></span><br><span class="line"><span class="javascript">      xhr.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">        if (xhr.status === 200) &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 获取文件blob数据并保存</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> fileName = getFileName(url);</span></span><br><span class="line">          saveAs(xhr.response, fileName);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      xhr.send();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * URL方式保存文件到本地</span><br><span class="line">     * @param data 文件的blob数据</span><br><span class="line">     * @param name 文件名</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">saveAs</span><span class="params">(data, name)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> urlObject = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL || <span class="built_in">window</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> export_blob = <span class="keyword">new</span> Blob([data]);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> save_link = <span class="built_in">document</span>.createElementNS(<span class="string">'http://www.w3.org/1999/xhtml'</span>, <span class="string">'a'</span>)</span></span><br><span class="line">        save_link.href = urlObject.createObjectURL(export_blob);</span><br><span class="line">        save_link.download = name;</span><br><span class="line">        save_link.click();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 根据文件url获取文件名</span><br><span class="line">     * @param url 文件url</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">getFileName</span><span class="params">(url)</span> </span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> num = url.lastIndexOf(<span class="string">'/'</span>)+<span class="number">1</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> fileName = url.substring(num)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//把参数和文件名分割开</span></span></span><br><span class="line"><span class="javascript">        fileName = <span class="built_in">decodeURI</span>(fileName.split(<span class="string">"?"</span>)[<span class="number">0</span>]);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> fileName;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">	downloadUrlFile(<span class="string">"http://   [bucket name]   .oss-cn-  [region]   .aliyuncs.com/202003031140425717批注 2020-02-20 150155.png"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>oss对象存储</category>
      </categories>
      <tags>
        <tag>Vuejs</tag>
        <tag>oss</tag>
        <tag>nodejs</tag>
        <tag>CORS</tag>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot与tomcat</title>
    <url>/2020/03/09/%E9%9D%A2%E8%AF%95/springboot%E4%B8%8Etomcat/</url>
    <content><![CDATA[<p>「我：领赫这个项目是在docker容器当中将 项目打包成容器然后直接使用是吗？」</p>
<hr>
<p>「David：不是」</p>
<hr>
<p>「David：docker你就理解为一个虚拟机」</p>
<hr>
<p>「David：跟项目没有关系」</p>
<hr>
<p>「我：那是不是类似于，hbuilder一样  www下直接访问的那种一个站点目录」</p>
<hr>
<p>「我：我知道理解为一个虚拟机」</p>
<hr>
<p>「David：docker容器里面直接跑了个java spring boot程序」</p>
<hr>
<p>「我：你说docker是一个虚拟机，虚拟机也就相当于是远程服务器，远程服务器呢也就相当于是本机，docker当中配置了nginx,也就相当于是本机配置了nginx, 对啊」</p>
<hr>
<p>「我：本机当中也就是直接跑了hbuilder的网页也可以跑噻，而java直接跑的前提是装了环境噻，」</p>
<hr>
<p>「David：docker当中配置了nginx,也就相当于是本机配置了nginx, 这句话又毛病」</p>
<hr>
<p>「我：docker当中没有配置NGINX？」</p>
<hr>
<p>「David：没有」</p>
<hr>
<p>「我：那就是服务器配置了nginx是吧」</p>
<hr>
<p>「David：是的」</p>
<hr>
<p>「我：就好像我们的本机  cmd,  javac 编译 java运行」</p>
<hr>
<p>「我：也是不需要容器的」</p>
<hr>
<p>「David：当然docker中也可以配置nginx，服务器也可以配置。如果服务器不想配置nginx，想使用docker中的nginx，那么需要把服务器的80端口映射到docker容器中就可以了」</p>
<hr>
<p>「我：而，领赫这个项目，就相当于是在cmd当中，只要额配置了java环境，那么」</p>
<hr>
<p>「我：就可以跑起来这个意思？」</p>
<hr>
<p>「我：因为本机cmd不依赖tomcat容器也是可以进行编译以及运行java的」</p>
<hr>
<p>「David：「 Fsn: 而，领赫这个项目，就相当于是在cmd当中，只要额配置了java环境，那么 」</p>
<hr>
<p>可以这么理解， 其实springboot自带容器。它包含了tomcat容器功能」</p>
<hr>
<p>「我：springboot 内置了tomcat」</p>
<hr>
<p>「我：那我们项目就是依赖的是springboot本身的内置tomcat是吧」</p>
<hr>
<p>「David：是的」</p>
<hr>
<p>「我：cmd 这种的」</p>
<hr>
<p>「我：cmd他就只能是运行单个文件，而无法部署一个web应用是吧」</p>
<hr>
<p>「David：你不要以为tomat好像很大一样，对操作系统来说它也只是个进程，跟命令行启动一个java程序没什么区别。」</p>
<hr>
<p>「我：cmd 进行javac java 是没有依赖tomcat的」</p>
<hr>
<p>「我：是吧」</p>
<hr>
<p>「David：是的」</p>
<hr>
<p>「David：tomcat你可以理解为也是一个普通java程序」</p>
<hr>
<p>「我：cmd进行javac java是泡在java虚拟机上面」</p>
<hr>
<p>「我：tomcat 也是跑在虚拟机上面」</p>
<hr>
<p>「David：我们项目丢到tomcat里，相当于项目就是tomcat的一部分了，或者你理解为它的一个模块」</p>
<hr>
<p>「David：如果用tomcat。来了一个http请求，tomcat先收到这个请求，然后再路由到我们项目中」</p>
<hr>
<p>「我：借助了tomcat进行发布，部署，tomcat会有一个pid, 就相当于是一个站点，，，，，，他本来就是一个程序啊，然后我们通过这个pid,进程号可以知道端口号，通过端口号访问进来， 访问的即根目录，而这个根目录是可以进行设置的」</p>
<hr>
<p>「我：我有点不知道自己在纠结什么….」</p>
<hr>
<p>「我：哦哦哦，springboot,依赖了一个jar,关于tomcat的jar,是这些个jar在起作用是吧，把tomcat打成了jar是吧」</p>
<hr>
<p>「David：如果用tomcat，那么你tomcat启动在哪个端口，你项目运行就早那个端口。比如8080，那么tomcat中的所有项目都在8080。如果不用tomcat，就是你每个项目各自可以有各自的端口」</p>
<hr>
<p>「David：「 Fsn: 哦哦哦，springboot,依赖了一个jar,关于tomcat的jar,是这些个jar在起作用是吧，把tomcat打成了jar是吧 」</p>
<hr>
<p>对」</p>
<hr>
<p>「我：这样依赖，每个项目都需要tomcat这个jar,或者不是不一定是tomcat的jar,其他的jar也可以，但是需要依赖jar是吧」</p>
<hr>
<p>「David：不能完全说把tomcat打包成了jar。」</p>
<hr>
<p>「David：其他的jar当然也可以啊，而且不止一个jar。这个类似tomcat的jar无非就是实现了，监听http请求，路由请求等等基础功能」</p>
<hr>
<p>「David：只要这个jar包实现了这些功能，都可以。」</p>
<hr>
<p>「我：对因为单独的这一个jar也依赖了其他的jar」</p>
<hr>
<p>「我：所以会需要多依赖，也就是多module,  简化了整个程序，从而没有那么肥胖，而是清爽，模块化好处是吧？  ………….我去我到底在说些什么」</p>
<hr>
<p>「David：「 Fsn: 所以会需要多依赖，也就是多module,  简化了整个程序，从而没有那么肥胖，而是清爽，模块化好处是吧？  ………….我去我到底在说些什么 」</p>
<hr>
<p>你在开始理解，到底什么是程序」</p>
<hr>
<p>「David：<a href="https://item.jd.com/12395269.html" target="_blank" rel="noopener">https://item.jd.com/12395269.html</a>  @Fsn @ChoiMinki  有时间就翻阅翻阅」</p>
<hr>
<p>「David：操作系统这本书，有利于你们对计算机的理解」</p>
<hr>
<p><a href="https://github.com/qiu-deqing/FE-interview#$html，-http，web综合问题" target="_blank" rel="noopener">https://github.com/qiu-deqing/FE-interview#$html，-http，web综合问题</a></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>springboot</tag>
        <tag>tomcat</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>前端页面双色球</title>
    <url>/2020/03/09/%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A21/</url>
    <content><![CDATA[<h2 id="需求内容"><a href="#需求内容" class="headerlink" title="需求内容"></a>需求内容</h2><p>长这样：<a href="http://120.78.211.216:8080/maima/list2" target="_blank" rel="noopener">http://120.78.211.216:8080/maima/list2</a>  </p>
<p>「来日方长：这是一列的吧」</p>
<hr>
<p>「来日方长：七列都要有」</p>
<hr>
<p>「来日方长：七个数字 每个数字有七列」</p>
<hr>
<p>「来日方长：你想一下那个表格要怎么排版」</p>
<hr>
<p>「来日方长：你测试数据再改一下」</p>
<hr>
<p>「来日方长：一个隔两个一个隔三个」</p>
<hr>
<p>「我：总排最大遗漏数什么意思来着我给忘了」</p>
<hr>
<p>「我：数字搜索了多少个，然后总排当中就调出这些数字的在7列当中的最大遗漏数是吧」</p>
<hr>
<p>「我：没有出现最大遗漏数的也就是1都没有的我用-代替了」</p>
<hr>
<p>「来日方长：你这个有点不对吧」</p>
<hr>
<p>「来日方长：遗漏数是所有的数据对比 不是当页的」</p>
<hr>
<p>「来日方长：但是遗漏数是所有数据对比」</p>
<hr>
<p>「来日方长：还有 你这个遗漏数啊 还是不够勒」</p>
<hr>
<p>「来日方长：就每一个数字 都有七列的遗漏数」</p>
<hr>
<p>「来日方长：遗漏数 是他搜索哪个数字」</p>
<hr>
<p>「来日方长：就用哪个数字去做遗漏数对比」</p>
<hr>
<p>「来日方长：最多可以七个」</p>
<hr>
<p>「来日方长：意思就是每一个数字有七个单排遗漏数」</p>
<hr>
<p>「我：那他要是不搜的话，单排 总排都没有是吧」</p>
<hr>
<p>「来日方长：记得再加一个时间筛选」</p>
<hr>
<p>「来日方长：新增和修改」</p>
<hr>
<p>「我：我有个问题，其实数据可以查很多个的」</p>
<hr>
<p>「我：就是数字搜索那里，可以搜索不止7个的」</p>
<hr>
<p>「我：但是只搜索七个是吧」</p>
<hr>
<p>也行，要不你说很多吧不限制「我：单排最大遗漏数说的不是数字吧」</p>
<hr>
<p>「我：而是之间的差index吧？」</p>
<hr>
<p>「我：我跟你理一理，单排是指的每一列当中单列当中当前查询的该数字的最大差index,而总排是指的是每一列当中的最大index取最大值是不是」</p>
<hr>
<p>「来日方长：那个页面是响应式的不」</p>
<hr>
<p>大概的一个意思就是，给一个数组给前端，<br>数组当中存在多个类似对象数据  </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;<span class="string">"number"</span>:<span class="number">1</span>,<span class="string">"one"</span>:<span class="number">1</span>,<span class="string">"two"</span>:<span class="number">1</span>,<span class="string">"three"</span>:<span class="number">1</span>,<span class="string">"four"</span>:<span class="number">1</span>,<span class="string">"five"</span>:<span class="number">1</span>,,<span class="string">"six"</span>:<span class="number">1</span>,<span class="string">"seven"</span>:<span class="number">1</span>,<span class="string">"time"</span>:<span class="number">2020</span><span class="number">-01</span><span class="number">-01</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"number"</span>:<span class="number">1</span>,<span class="string">"one"</span>:<span class="number">1</span>,<span class="string">"two"</span>:<span class="number">1</span>,<span class="string">"three"</span>:<span class="number">1</span>,<span class="string">"four"</span>:<span class="number">1</span>,<span class="string">"five"</span>:<span class="number">1</span>,,<span class="string">"six"</span>:<span class="number">1</span>,<span class="string">"seven"</span>:<span class="number">1</span>,<span class="string">"time"</span>:<span class="number">2020</span><span class="number">-01</span><span class="number">-01</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"number"</span>:<span class="number">1</span>,<span class="string">"one"</span>:<span class="number">1</span>,<span class="string">"two"</span>:<span class="number">1</span>,<span class="string">"three"</span>:<span class="number">1</span>,<span class="string">"four"</span>:<span class="number">1</span>,<span class="string">"five"</span>:<span class="number">1</span>,,<span class="string">"six"</span>:<span class="number">1</span>,<span class="string">"seven"</span>:<span class="number">1</span>,<span class="string">"time"</span>:<span class="number">2020</span><span class="number">-01</span><span class="number">-01</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"number"</span>:<span class="number">1</span>,<span class="string">"one"</span>:<span class="number">1</span>,<span class="string">"two"</span>:<span class="number">1</span>,<span class="string">"three"</span>:<span class="number">1</span>,<span class="string">"four"</span>:<span class="number">1</span>,<span class="string">"five"</span>:<span class="number">1</span>,,<span class="string">"six"</span>:<span class="number">1</span>,<span class="string">"seven"</span>:<span class="number">1</span>,<span class="string">"time"</span>:<span class="number">2020</span><span class="number">-01</span><span class="number">-01</span>&#125;,</span><br><span class="line">  ...]</span><br></pre></td></tr></table></figure>

<p>然后前端根据这个数据做出表格  </p>
<blockquote>
<p>example</p>
</blockquote>
<table>
<thead>
<tr>
<th>期数</th>
<th>开奖日期</th>
<th>第一位数</th>
<th>第二位数</th>
<th>第三位数</th>
<th>第四位数</th>
<th>第五位数</th>
<th>第六位数</th>
<th>第七位数</th>
</tr>
</thead>
<tbody><tr>
<td>number</td>
<td>time</td>
<td>one</td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td>one</td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td>one</td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td>one</td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>遗漏信息</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>数字-<br>单排最大遗漏数-<br>总排最大遗漏数</td>
<td></td>
<td>第一列最大遗漏数</td>
<td>第二列最大遗漏数</td>
<td>第三列最大遗漏数</td>
<td>第四列最大遗漏数</td>
<td>第五列最大遗漏数</td>
<td>第六列最大遗漏数</td>
<td>第七列最大遗漏数</td>
</tr>
</tbody></table>
<p>数字指的是搜索的数字，做多可以搜索n+，即有一个数字搜索、（开始时间、结束时间）时间筛选的表格，数字搜索为搜索的搜索的数字如果多个通过,逗号隔开，且搜索的数字匹配满足其中字段当中一个即带出该条记录。<br>(“one”:1,”two”:1,”three”:1,<br>“four”:1,”five”:1,”six”:1,”seven”:1)<br>单排最大遗漏数指的是，在th:第一列数该列当中，进行搜索数字one:01,即比如说第一列当中第一行数据为01，第一列当中第三行数据为01，那么，第一行第一列的01与第三行第一列的01的遗漏数为1  </p>
<table>
<thead>
<tr>
<th>期数</th>
<th>开奖日期</th>
<th>第一位数</th>
<th>第二位数</th>
<th>第三位数</th>
<th>第四位数</th>
<th>第五位数</th>
<th>第六位数</th>
<th>第七位数</th>
</tr>
</thead>
<tbody><tr>
<td>number</td>
<td>time</td>
<td><span style="color:red">01</span></td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td>one</td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td><span style="color:red">01</span></td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td>one</td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>遗漏信息</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>数字-<br>单排最大遗漏数-<br>总排最大遗漏数</td>
<td></td>
<td>第一列最大遗漏数</td>
<td>第二列最大遗漏数</td>
<td>第三列最大遗漏数</td>
<td>第四列最大遗漏数</td>
<td>第五列最大遗漏数</td>
<td>第六列最大遗漏数</td>
<td>第七列最大遗漏数</td>
</tr>
</tbody></table>
<p>而最大遗漏数，即比如第一列第一行的数值为01，第一列第二行的数值为01，第一列第三行的数值为01，第一列第五行的数值为01，那么第一列one，当中搜索01的单排最大遗漏数为3，也就是该列当中第一次出现该数值的index:0，  该列当中最后一次出现该数值的index:4，他们之间的差值4-0-1，也就是该列的manIndex-minIndex-1=3，td.index从0开始  </p>
<table>
<thead>
<tr>
<th>期数</th>
<th>开奖日期</th>
<th>第一位数</th>
<th>第二位数</th>
<th>第三位数</th>
<th>第四位数</th>
<th>第五位数</th>
<th>第六位数</th>
<th>第七位数</th>
</tr>
</thead>
<tbody><tr>
<td>number</td>
<td>time</td>
<td><span style="color:red">01</span></td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td><span style="color:red">01</span></td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td><span style="color:red">01</span></td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td>one</td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td><span style="color:red">01</span></td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>遗漏信息</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>数字-<br>单排最大遗漏数-<br>总排最大遗漏数</td>
<td></td>
<td>第一列最大遗漏数</td>
<td>第二列最大遗漏数</td>
<td>第三列最大遗漏数</td>
<td>第四列最大遗漏数</td>
<td>第五列最大遗漏数</td>
<td>第六列最大遗漏数</td>
<td>第七列最大遗漏数</td>
</tr>
</tbody></table>
<p>好，那么再说下总排最大遗漏数，总排最大遗漏数的意思就是第一列当中第一行出现搜索的数值01，第二列第三行出现搜索的数据01，那么在一、二列当中的总排遗漏数为1，而相对于7列来说，for example，第一列第三行出现搜索数值01，第二列第五行出现搜索数值01，第三列第六行出现搜索数值01，第四列第九行出现搜索数值01，第五列第五行出现搜索数值01，第六列第二行出现搜索数值01，第七列第一行出现搜索数值01，那么总排最大遗漏数为8  </p>
<table>
<thead>
<tr>
<th>期数</th>
<th>开奖日期</th>
<th>第一位数</th>
<th>第二位数</th>
<th>第三位数</th>
<th>第四位数</th>
<th>第五位数</th>
<th>第六位数</th>
<th>第七位数</th>
</tr>
</thead>
<tbody><tr>
<td>number</td>
<td>time</td>
<td>one</td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td><span style="color:red">01</span></td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td>one</td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td><span style="color:red">01</span></td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td><span style="color:red">01</span></td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td>one</td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td>one</td>
<td><span style="color:red">01</span></td>
<td>three</td>
<td>four</td>
<td><span style="color:red">01</span></td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td>one</td>
<td>two</td>
<td><span style="color:red">01</span></td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td>one</td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td>one</td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td>one</td>
<td>two</td>
<td>three</td>
<td><span style="color:red">01</span></td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>number</td>
<td>time</td>
<td>one</td>
<td>two</td>
<td>three</td>
<td>four</td>
<td>five</td>
<td>six</td>
<td>seven</td>
</tr>
<tr>
<td>遗漏信息</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>数字-<br>单排最大遗漏数-<br>总排最大遗漏数</td>
<td></td>
<td>第一列最大遗漏数</td>
<td>第二列最大遗漏数</td>
<td>第三列最大遗漏数</td>
<td>第四列最大遗漏数</td>
<td>第五列最大遗漏数</td>
<td>第六列最大遗漏数</td>
<td>第七列最大遗漏数</td>
</tr>
</tbody></table>
<blockquote>
<p>max.html-demo</p>
</blockquote>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">function Map() </span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">    /** 存放键的数组(遍历用到) */    </span></span><br><span class="line"><span class="xquery">    this.keys = new Array();     </span></span><br><span class="line"><span class="xquery">    /** 存放数据 */    </span></span><br><span class="line"><span class="xquery">    this.data = new Object();     </span></span><br><span class="line"></span><br><span class="line"><span class="xquery">    /**   </span></span><br><span class="line"><span class="xquery">     * 放入一个键值对   </span></span><br><span class="line"><span class="xquery">     * @param &#123;String&#125;</span><span class="xml"> key   </span></span><br><span class="line"><span class="xml">     * @param </span><span class="xquery">&#123;Object&#125;</span><span class="xml"> value   </span></span><br><span class="line"><span class="xml">     */    </span></span><br><span class="line"><span class="xml">    this.put = function(key, value) </span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">        <span class="keyword">if</span>(this.data<span class="built_in">[key</span>] == null)&#123;     </span></span><br><span class="line"><span class="xquery">            this.keys.push<span class="built_in">(key</span>);     </span></span><br><span class="line"><span class="xquery">        &#125;</span><span class="xml">     </span></span><br><span class="line"><span class="xml">        this.data[key] = value;     </span></span><br><span class="line"><span class="xml">    &#125;;     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    /**   </span></span><br><span class="line"><span class="xml">     * 获取某键对应的值   </span></span><br><span class="line"><span class="xml">     * @param </span><span class="xquery">&#123;String&#125;</span><span class="xml"> key   </span></span><br><span class="line"><span class="xml">     * @return </span><span class="xquery">&#123;Object&#125;</span><span class="xml"> value   </span></span><br><span class="line"><span class="xml">     */    </span></span><br><span class="line"><span class="xml">    this.get = function(key) </span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">        <span class="keyword">return</span> this.data<span class="built_in">[key</span>];     </span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml">;     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    /**   </span></span><br><span class="line"><span class="xml">     * 删除一个键值对   </span></span><br><span class="line"><span class="xml">     * @param </span><span class="xquery">&#123;String&#125;</span><span class="xml"> key   </span></span><br><span class="line"><span class="xml">     */    </span></span><br><span class="line"><span class="xml">    this.remove = function(key) </span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">        this.keys<span class="built_in">.remove</span><span class="built_in">(key</span>);     </span></span><br><span class="line"><span class="xquery">        this.data<span class="built_in">[key</span>] = null;     </span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml">;     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    /**   </span></span><br><span class="line"><span class="xml">     * 遍历Map,执行处理函数   </span></span><br><span class="line"><span class="xml">     *    </span></span><br><span class="line"><span class="xml">     * @param </span><span class="xquery">&#123;Function&#125;</span><span class="xml"> 回调函数 function(key,value,index)</span><span class="xquery">&#123;..&#125;</span><span class="xml">   </span></span><br><span class="line"><span class="xml">     */    </span></span><br><span class="line"><span class="xml">    this.each = function(fn)</span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">        <span class="keyword">if</span>(typeof fn != <span class="string">'function'</span>)&#123;     </span></span><br><span class="line"><span class="xquery">            <span class="keyword">return</span>;     </span></span><br><span class="line"><span class="xquery">        &#125;</span><span class="xml">     </span></span><br><span class="line"><span class="xml">        var len = this.keys.length;     </span></span><br><span class="line"><span class="xml">        for(var i=0;i<span class="tag">&lt;<span class="name">len;i++)</span></span></span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">            var k = this.keys[i];     </span></span><br><span class="line"><span class="xquery">            fn(k,this.data[k],i);     </span></span><br><span class="line"><span class="xquery">        &#125;</span><span class="xml">     </span></span><br><span class="line"><span class="xml">    &#125;;     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    /**   </span></span><br><span class="line"><span class="xml">     * 获取键值数组(类似</span><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://lib.csdn.net/base/java"</span> <span class="attr">class</span>=<span class="string">'replace_word'</span> <span class="attr">title</span>=<span class="string">"Java 知识库"</span> <span class="attr">target</span>=<span class="string">'_blank'</span> <span class="attr">style</span>=<span class="string">'color:#df3434; font-weight:bold;'</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml">的entrySet())   </span></span><br><span class="line"><span class="xml">     * @return 键值对象</span><span class="xquery"><span class="built_in">&#123;key</span>,<span class="keyword">value</span>&#125;</span><span class="xml">的数组   </span></span><br><span class="line"><span class="xml">     */    </span></span><br><span class="line"><span class="xml">    this.entrys = function() </span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">        var len = this.keys.length;     </span></span><br><span class="line"><span class="xquery">        var entrys = new Array(len);     </span></span><br><span class="line"><span class="xquery">        <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; len; i++) &#123;     </span></span><br><span class="line"><span class="xquery">            entrys[i] = &#123;     </span></span><br><span class="line"><span class="xquery">               <span class="built_in"> key</span> : this.keys[i],     </span></span><br><span class="line"><span class="xquery">                <span class="keyword">value</span> : this.data[i]     </span></span><br><span class="line"><span class="xquery">            &#125;</span><span class="xml">;     </span></span><br><span class="line"><span class="xml">        &#125;     </span></span><br><span class="line"><span class="xml">        return entrys;     </span></span><br><span class="line"><span class="xml">    &#125;;     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    /**   </span></span><br><span class="line"><span class="xml">     * 判断Map是否为空   </span></span><br><span class="line"><span class="xml">     */    </span></span><br><span class="line"><span class="xml">    this.isEmpty = function() </span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">        <span class="keyword">return</span> this.keys.length == <span class="number">0</span>;     </span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml">;     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    /**   </span></span><br><span class="line"><span class="xml">     * 获取键值对数量   </span></span><br><span class="line"><span class="xml">     */    </span></span><br><span class="line"><span class="xml">    this.size = function()</span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">        <span class="keyword">return</span> this.keys.length;     </span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml">;     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    /**   </span></span><br><span class="line"><span class="xml">     * 重写toString    </span></span><br><span class="line"><span class="xml">     */    </span></span><br><span class="line"><span class="xml">    this.toString = function()</span><span class="xquery">&#123;     </span></span><br><span class="line"><span class="xquery">        var s = <span class="string">"&#123;"</span>;     </span></span><br><span class="line"><span class="xquery">        <span class="keyword">for</span>(var i=<span class="number">0</span>;i&lt;this.keys.length;i++,s+=<span class="string">','</span>)&#123;     </span></span><br><span class="line"><span class="xquery">            var k = this.keys[i];     </span></span><br><span class="line"><span class="xquery">            s += k+<span class="string">"="</span>+this.data[k];     </span></span><br><span class="line"><span class="xquery">        &#125;</span><span class="xml">   </span></span><br><span class="line"><span class="xml">		s=s.substr(0,s.length-1);</span></span><br><span class="line"><span class="xml">        s+="&#125;";     </span></span><br><span class="line"><span class="xml">        return s;     </span></span><br><span class="line"><span class="xml">    &#125;;     </span></span><br><span class="line"><span class="xml">&#125;     </span></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		var arrays=[01,28,19,35,43,08,01,12,32,41];</span></span><br><span class="line"><span class="xml">		console.log(arrays);</span></span><br><span class="line"><span class="xml">		var flag=true;</span></span><br><span class="line"><span class="xml">		var map=new Map();</span></span><br><span class="line"><span class="xml">		for(var i=0;i<span class="tag">&lt;<span class="name">arrays.length;i++)</span></span></span><span class="xquery">&#123; //循环<span class="number">10</span>次</span></span><br><span class="line"><span class="xquery">			var <span class="keyword">element</span>=arrays[i];//数组当中具体的元素</span></span><br><span class="line"><span class="xquery">			<span class="keyword">map</span>.put(<span class="keyword">element</span>,0);//放入的只有9个</span></span><br><span class="line"><span class="xquery">			</span></span><br><span class="line"><span class="xquery">			<span class="keyword">for</span>(var n=<span class="number">0</span>;n&lt;arrays.length;n++)&#123; //循环<span class="number">10</span>次 </span></span><br><span class="line"><span class="xquery">				var<span class="built_in"> key</span>=arrays[n];</span></span><br><span class="line"><span class="xquery">				//console.log(<span class="string">"当前遍历的element: "</span>+<span class="keyword">element</span>+"；所处index: "+i+"  map当中循环的<span class="keyword">element</span>: "+key+"所处index: "+n)</span></span><br><span class="line"><span class="xquery">				<span class="keyword">if</span><span class="built_in">(key</span>!=null &amp;&amp;<span class="built_in"> key</span>==<span class="keyword">element</span>)&#123; //如果存在有当前循环的数组当中的取值与<span class="keyword">map</span>当中的键相同的则重新赋值，重新赋值后进行下一次break;</span></span><br><span class="line"><span class="xquery">					var y=i-n;</span></span><br><span class="line"><span class="xquery">					//console.log(<span class="string">"key: "</span><span class="built_in">+key</span>+<span class="string">" element:"</span>+<span class="keyword">element</span>+" y: "+y);</span></span><br><span class="line"><span class="xquery">					<span class="keyword">map</span>.put(<span class="keyword">element</span>,y);//此处的y没有减去当前自己的位数,所以当单排最大遗漏数查询的时候还需要-1</span></span><br><span class="line"><span class="xquery">					break;</span></span><br><span class="line"><span class="xquery">				&#125;</span><span class="xml">else</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">					continue;</span></span><br><span class="line"><span class="xquery">				&#125;</span></span><br><span class="line"><span class="xml">			&#125;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">		//console.log(map.toString());</span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		var mapArrays=map.entrys();</span></span><br><span class="line"><span class="xml">		var maxValue=0;</span></span><br><span class="line"><span class="xml">		var maxKey=0;</span></span><br><span class="line"><span class="xml">		for(var i=0;i<span class="tag">&lt;<span class="name">mapArrays.length;i++)</span></span></span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">			var<span class="built_in"> key</span>=mapArrays[i]<span class="built_in">.key</span>;</span></span><br><span class="line"><span class="xquery">			var <span class="keyword">value</span>=<span class="keyword">map</span>.get<span class="built_in">(key</span>);</span></span><br><span class="line"><span class="xquery">			//console.log(<span class="string">"key: "</span><span class="built_in">+key</span>+<span class="string">" value:"</span>+<span class="keyword">value</span>);</span></span><br><span class="line"><span class="xquery">			<span class="keyword">if</span>(maxValue&lt;<span class="keyword">value</span>)&#123;</span></span><br><span class="line"><span class="xquery">				maxValue=<span class="keyword">value</span>;</span></span><br><span class="line"><span class="xquery">				maxKey<span class="built_in">=key</span>;</span></span><br><span class="line"><span class="xquery">			&#125;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">		console.log("单排最大遗漏数为 - key:"+maxKey+"  value:"+(maxValue-1));</span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		var numbers="hello,world,hello,world,hello,wrold";</span></span><br><span class="line"><span class="xml">		var nums=numbers.split(",");</span></span><br><span class="line"><span class="xml">		console.log("nums: "+nums.length);</span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		*/</span></span><br><span class="line"><span class="xml">		 var tr0=detailData.insertRow(arrays.length+1);</span></span><br><span class="line"><span class="xml">		 var td0=tr0.insertCell(0);</span></span><br><span class="line"><span class="xml">		 td0.colSpan=2;</span></span><br><span class="line"><span class="xml">		 td0.innerHTML="遗漏信息";</span></span><br><span class="line"><span class="xml">		 td0.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml">		 var td00=tr0.insertCell(1);</span></span><br><span class="line"><span class="xml">		 td00.colSpan=7;</span></span><br><span class="line"><span class="xml">		 var tr=detailData.insertRow(arrays.length+2);</span></span><br><span class="line"><span class="xml">		 var td=tr.insertCell(0);</span></span><br><span class="line"><span class="xml">		 td.innerHTML="数字";</span></span><br><span class="line"><span class="xml">		 td.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml">		 td.colSpan=2;</span></span><br><span class="line"><span class="xml">		 var tr2=detailData.insertRow(arrays.length+3);</span></span><br><span class="line"><span class="xml">		 var td2=tr2.insertCell(0);</span></span><br><span class="line"><span class="xml">		 td2.innerHTML="单排最大遗漏数";</span></span><br><span class="line"><span class="xml">		 td2.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml">		 td2.colSpan=2;</span></span><br><span class="line"><span class="xml">		 var tr3=detailData.insertRow(arrays.length+4);</span></span><br><span class="line"><span class="xml">		 var td3=tr3.insertCell(0);</span></span><br><span class="line"><span class="xml">		 td3.innerHTML="总排最大遗漏数";</span></span><br><span class="line"><span class="xml">		 td3.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml">		 td3.colSpan=2;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		//当前7个数组当中都存有对应的数值</span></span><br><span class="line"><span class="xml">		 for(var t=0;t<span class="tag">&lt;<span class="name">sumArray.length;t++)</span></span></span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">			 // var arrays=[<span class="number">01</span>,<span class="number">28</span>,<span class="number">19</span>,<span class="number">35</span>,<span class="number">43</span>,08,<span class="number">01</span>,<span class="number">12</span>,<span class="number">32</span>,<span class="number">41</span>];</span></span><br><span class="line"><span class="xquery">			 var arrays=sumArray[t];//单个数组</span></span><br><span class="line"><span class="xquery">			 console.log(arrays);</span></span><br><span class="line"><span class="xquery">			 var flag<span class="built_in">=true</span>;</span></span><br><span class="line"><span class="xquery">			 var <span class="keyword">map</span>=new Map();</span></span><br><span class="line"><span class="xquery">			 <span class="keyword">for</span>(var i=<span class="number">0</span>;i&lt;arrays.length;i++)&#123; //循环<span class="number">10</span>次</span></span><br><span class="line"><span class="xquery">				 var <span class="keyword">element</span>=arrays[i];//数组当中具体的元素</span></span><br><span class="line"><span class="xquery">				 <span class="keyword">map</span>.put(<span class="keyword">element</span>,0);//放入的只有9个</span></span><br><span class="line"></span><br><span class="line"><span class="xquery">				 <span class="keyword">for</span>(var n=<span class="number">0</span>;n&lt;arrays.length;n++)&#123; //循环<span class="number">10</span>次</span></span><br><span class="line"><span class="xquery">					 var<span class="built_in"> key</span>=arrays[n];</span></span><br><span class="line"><span class="xquery">					 //console.log(<span class="string">"当前遍历的element: "</span>+<span class="keyword">element</span>+"；所处index: "+i+"  map当中循环的<span class="keyword">element</span>: "+key+"所处index: "+n)</span></span><br><span class="line"><span class="xquery">					 <span class="keyword">if</span><span class="built_in">(key</span>!=null &amp;&amp;<span class="built_in"> key</span>==<span class="keyword">element</span>)&#123; //如果存在有当前循环的数组当中的取值与<span class="keyword">map</span>当中的键相同的则重新赋值，重新赋值后进行下一次break;</span></span><br><span class="line"><span class="xquery">						 var y=i-n;</span></span><br><span class="line"><span class="xquery">						 //console.log(<span class="string">"key: "</span><span class="built_in">+key</span>+<span class="string">" element:"</span>+<span class="keyword">element</span>+" y: "+y);</span></span><br><span class="line"><span class="xquery">						 <span class="keyword">map</span>.put(<span class="keyword">element</span>,y);//此处的y没有减去当前自己的位数,所以当单排最大遗漏数查询的时候还需要-1</span></span><br><span class="line"><span class="xquery">						 break;</span></span><br><span class="line"><span class="xquery">					 &#125;</span><span class="xml">else</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">						 continue;</span></span><br><span class="line"><span class="xquery">					 &#125;</span></span><br><span class="line"><span class="xml">				 &#125;</span></span><br><span class="line"><span class="xml">			 &#125;</span></span><br><span class="line"><span class="xml">			 //console.log(map.toString());</span></span><br><span class="line"><span class="xml">			 var mapArrays=map.entrys();</span></span><br><span class="line"><span class="xml">			 var maxValue=0;</span></span><br><span class="line"><span class="xml">			 var maxKey=0;</span></span><br><span class="line"><span class="xml">			 for(var i=0;i<span class="tag">&lt;<span class="name">mapArrays.length;i++)</span></span></span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">				 var<span class="built_in"> key</span>=mapArrays[i]<span class="built_in">.key</span>;</span></span><br><span class="line"><span class="xquery">				 var <span class="keyword">value</span>=<span class="keyword">map</span>.get<span class="built_in">(key</span>);</span></span><br><span class="line"><span class="xquery">				 //console.log(<span class="string">"key: "</span><span class="built_in">+key</span>+<span class="string">" value:"</span>+<span class="keyword">value</span>);</span></span><br><span class="line"><span class="xquery">				 <span class="keyword">if</span>(maxValue&lt;<span class="keyword">value</span>)&#123;</span></span><br><span class="line"><span class="xquery">					 maxValue=<span class="keyword">value</span>;</span></span><br><span class="line"><span class="xquery">					 maxKey<span class="built_in">=key</span>;</span></span><br><span class="line"><span class="xquery">				 &#125;</span></span><br><span class="line"><span class="xml">			 &#125;</span></span><br><span class="line"><span class="xml">			 console.log("单排最大遗漏数为 - key:"+maxKey+"  value:"+(maxValue-1));</span></span><br><span class="line"><span class="xml">			 //添加元素</span></span><br><span class="line"><span class="xml">			 var td4=tr.insertCell(t+1);</span></span><br><span class="line"><span class="xml">			 if(maxKey<span class="tag">&lt;<span class="name">=0)</span></span></span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">				 td4.innerHTML=<span class="string">"-"</span>;</span></span><br><span class="line"><span class="xquery">			 &#125;</span><span class="xml">else</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">				 td4.innerHTML=maxKey;</span></span><br><span class="line"><span class="xquery">			 &#125;</span></span><br><span class="line"><span class="xml">			 var td5=tr2.insertCell(t+1);</span></span><br><span class="line"><span class="xml">			 if((maxValue-1)<span class="tag">&lt;<span class="name">=0)</span></span></span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">				 td5.innerHTML=<span class="string">"-"</span>;</span></span><br><span class="line"><span class="xquery">			 &#125;</span><span class="xml">else</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">				 td5.innerHTML=(maxValue-<span class="number">1</span>);</span></span><br><span class="line"><span class="xquery">			 &#125;</span></span><br><span class="line"><span class="xml">		 &#125;</span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>complete-demo</p>
</blockquote>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"com.alibaba.fastjson.JSONObject"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"java.util.ArrayList"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"java.util.HashMap"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"java.util.List"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page import=<span class="string">"java.util.Map"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="ruby">		 pageEncoding=<span class="string">"UTF-8"</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page trimDirectiveWhitespaces=<span class="string">"true"</span></span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span></span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ taglib prefix=<span class="string">"itcast"</span> uri=<span class="string">"http://itcast.cn/common/"</span></span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span></span><br><span class="line"><span class="ruby">	String path = request.getContextPath();</span></span><br><span class="line"><span class="ruby">	String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort()</span></span><br><span class="line"><span class="ruby">			+ path + <span class="string">"/"</span>;</span></span><br><span class="line"><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="meta-string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- Bootstrap Core CSS --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/metisMenu.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/dataTables.bootstrap.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/sb-admin-2.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/font-awesome.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span></span><br><span class="line"><span class="xml">		  type="text/css"&gt;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/boot-crm.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span></span><br><span class="line"><span class="xml">		  type="text/css"&gt;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/bootstrap-datetimepicker/4.17.47/css/bootstrap-datetimepicker.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">![endif]--</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">		.inputText&#123;</span></span><br><span class="line"><span class="xml">			width:200px;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">		.alert &#123;</span></span><br><span class="line"><span class="xml">			display: none;</span></span><br><span class="line"><span class="xml">			position: fixed;</span></span><br><span class="line"><span class="xml">			top: 50%;</span></span><br><span class="line"><span class="xml">			left: 50%;</span></span><br><span class="line"><span class="xml">			min-width: 300px;</span></span><br><span class="line"><span class="xml">			max-width: 600px;</span></span><br><span class="line"><span class="xml">			transform: translate(-50%,-50%);</span></span><br><span class="line"><span class="xml">			z-index: 99999;</span></span><br><span class="line"><span class="xml">			text-align: center;</span></span><br><span class="line"><span class="xml">			padding: 15px;</span></span><br><span class="line"><span class="xml">			border-radius: 3px;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		.alert-success &#123;</span></span><br><span class="line"><span class="xml">			color: #3c763d;</span></span><br><span class="line"><span class="xml">			background-color: #dff0d8;</span></span><br><span class="line"><span class="xml">			border-color: #d6e9c6;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		.alert-info &#123;</span></span><br><span class="line"><span class="xml">			color: #31708f;</span></span><br><span class="line"><span class="xml">			background-color: #d9edf7;</span></span><br><span class="line"><span class="xml">			border-color: #bce8f1;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		.alert-warning &#123;</span></span><br><span class="line"><span class="xml">			color: #8a6d3b;</span></span><br><span class="line"><span class="xml">			background-color: #fcf8e3;</span></span><br><span class="line"><span class="xml">			border-color: #faebcc;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		.alert-danger &#123;</span></span><br><span class="line"><span class="xml">			color: #a94442;</span></span><br><span class="line"><span class="xml">			background-color: #f2dede;</span></span><br><span class="line"><span class="xml">			border-color: #ebccd1;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 模态框（Modal） --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"myModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>编号 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span>  <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>期数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span>  <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"numberId"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>开奖日期 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span>  <span class="attr">style</span>=<span class="string">"width: 200px;"</span>  <span class="attr">id</span>=<span class="string">'datetimepicker3'</span> &gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">'createTime'</span>/&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">               				 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第一位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"oneColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第二位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"twoColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第三位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"threeColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第四位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fourColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第五位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fiveColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第六位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sixColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第七位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sevenColumn"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"edit()"</span>&gt;</span>提交更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 模态框（Modal） --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"myModal2"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal2"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel2"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>期数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"numberId2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>开奖日期 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span>  <span class="attr">style</span>=<span class="string">"width: 200px;"</span>  <span class="attr">id</span>=<span class="string">'datetimepicker4'</span> &gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">'createTime2'</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">               				 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第一位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"oneColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第二位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"twoColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第三位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"threeColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第四位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fourColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第五位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fiveColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第六位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sixColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>第七位数 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control inputText"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"sevenColumn2"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"add()"</span>&gt;</span>提交更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"page-wrapper"</span> <span class="attr">style</span>=<span class="string">"height: 100%"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"number"</span>&gt;</span>数字搜索 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"number"</span> <span class="attr">value</span>=<span class="string">"$&#123;number&#125;"</span> <span class="attr">name</span>=<span class="string">"number"</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"page"</span> <span class="attr">value</span>=<span class="string">"$&#123;page&#125;"</span> <span class="attr">name</span>=<span class="string">"page"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"pageSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;pageSize&#125;"</span> <span class="attr">name</span>=<span class="string">"pageSize"</span>  <span class="attr">style</span>=<span class="string">"display: none;"</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span>&gt;</span>开始日期 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span> <span class="attr">id</span>=<span class="string">'datetimepicker1'</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">							<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"createTime3"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">							<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">               				 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">label</span>&gt;</span>结束日期 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'input-group date'</span> <span class="attr">id</span>=<span class="string">'datetimepicker2'</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">							<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"createTime4"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">							<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">               				 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"go()"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">"margin-left:10px"</span> <span class="attr">onclick</span>=<span class="string">"reset()"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">"margin-left:10px"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-target</span>=<span class="string">"#myModal2"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered table-striped"</span> <span class="attr">id</span>=<span class="string">"detailData"</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span> <span class="attr">style</span>=<span class="string">"text-align: right"</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"up()"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"down()"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery-ui.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/metisMenu.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.dataTables.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/dataTables.bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/sb-admin-2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">'/static/js/stopExecutionOnTimeout.js?t=1'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/layui/layui.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/Particleground.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/Treatment.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.mockjax.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/moment.js/2.24.0/moment-with-locales.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/bootstrap-datetimepicker/4.17.47/js/bootstrap-datetimepicker.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	$(function () &#123;</span></span><br><span class="line"><span class="xml">		$('#datetimepicker1').datetimepicker(&#123;</span></span><br><span class="line"><span class="xml">			format: 'YYYY-MM-DD',</span></span><br><span class="line"><span class="xml">			locale: moment.locale('zh-cn')</span></span><br><span class="line"><span class="xml">		&#125;);</span></span><br><span class="line"><span class="xml">		$('#datetimepicker2').datetimepicker(&#123;</span></span><br><span class="line"><span class="xml">			format: 'YYYY-MM-DD',</span></span><br><span class="line"><span class="xml">			locale: moment.locale('zh-cn')</span></span><br><span class="line"><span class="xml">		&#125;);</span></span><br><span class="line"><span class="xml">		$('#datetimepicker3').datetimepicker(&#123;</span></span><br><span class="line"><span class="xml">			format: 'YYYY-MM-DD',</span></span><br><span class="line"><span class="xml">			locale: moment.locale('zh-cn')</span></span><br><span class="line"><span class="xml">		&#125;);</span></span><br><span class="line"><span class="xml">		$('#datetimepicker4').datetimepicker(&#123;</span></span><br><span class="line"><span class="xml">			format: 'YYYY-MM-DD',</span></span><br><span class="line"><span class="xml">			locale: moment.locale('zh-cn')</span></span><br><span class="line"><span class="xml">		&#125;);</span></span><br><span class="line"><span class="xml">	&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	/**</span></span><br><span class="line"><span class="xml">	 * 弹出式提示框，默认1.2秒自动消失</span></span><br><span class="line"><span class="xml">	 * @param message 提示信息</span></span><br><span class="line"><span class="xml">	 * @param style 提示样式，有alert-success、alert-danger、alert-warning、alert-info</span></span><br><span class="line"><span class="xml">	 * @param time 消失时间</span></span><br><span class="line"><span class="xml">	 */</span></span><br><span class="line"><span class="xml">	var prompt = function (message, style, time)</span></span><br><span class="line"><span class="xml">	&#123;</span></span><br><span class="line"><span class="xml">		style = (style === undefined) ? 'alert-success' : style;</span></span><br><span class="line"><span class="xml">		time = (time === undefined) ? 1200 : time;</span></span><br><span class="line"><span class="xml">		$('<span class="tag">&lt;<span class="name">div</span>&gt;</span>')</span></span><br><span class="line"><span class="xml">				.appendTo('body')</span></span><br><span class="line"><span class="xml">				.addClass('alert ' + style)</span></span><br><span class="line"><span class="xml">				.html(message)</span></span><br><span class="line"><span class="xml">				.show()</span></span><br><span class="line"><span class="xml">				.delay(time)</span></span><br><span class="line"><span class="xml">				.fadeOut();</span></span><br><span class="line"><span class="xml">	&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	// 成功提示</span></span><br><span class="line"><span class="xml">	var success_prompt = function(message, time)</span></span><br><span class="line"><span class="xml">	&#123;</span></span><br><span class="line"><span class="xml">		prompt(message, 'alert-success', time);</span></span><br><span class="line"><span class="xml">	&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	// 失败提示</span></span><br><span class="line"><span class="xml">	var fail_prompt = function(message, time)</span></span><br><span class="line"><span class="xml">	&#123;</span></span><br><span class="line"><span class="xml">		prompt(message, 'alert-danger', time);</span></span><br><span class="line"><span class="xml">	&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	// 提醒</span></span><br><span class="line"><span class="xml">	var warning_prompt = function(message, time)</span></span><br><span class="line"><span class="xml">	&#123;</span></span><br><span class="line"><span class="xml">		prompt(message, 'alert-warning', time);</span></span><br><span class="line"><span class="xml">	&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	// 信息提示</span></span><br><span class="line"><span class="xml">	var info_prompt = function(message, time)</span></span><br><span class="line"><span class="xml">	&#123;</span></span><br><span class="line"><span class="xml">		prompt(message, 'alert-info', time);</span></span><br><span class="line"><span class="xml">	&#125;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">	function add()&#123;</span></span><br><span class="line"><span class="xml">		console.log("==============add===============");</span></span><br><span class="line"><span class="xml">		var numberId2=document.getElementById("numberId2").value;</span></span><br><span class="line"><span class="xml">		var createTime2=document.getElementById("createTime2").value;</span></span><br><span class="line"><span class="xml">		var oneColumn2=document.getElementById("oneColumn2").value;</span></span><br><span class="line"><span class="xml">		var twoColumn2=document.getElementById("twoColumn2").value;</span></span><br><span class="line"><span class="xml">		var threeColumn2=document.getElementById("threeColumn2").value;</span></span><br><span class="line"><span class="xml">		var fourColumn2=document.getElementById("fourColumn2").value;</span></span><br><span class="line"><span class="xml">		var fiveColumn2=document.getElementById("fiveColumn2").value;</span></span><br><span class="line"><span class="xml">		var sixColumn2=document.getElementById("sixColumn2").value;</span></span><br><span class="line"><span class="xml">		var sevenColumn2=document.getElementById("sevenColumn2").value;</span></span><br><span class="line"><span class="xml">		if((numberId2==null || numberId2=='' || numberId2==undefined) ||</span></span><br><span class="line"><span class="xml">				(createTime2==null || createTime2=='' || createTime2==undefined) ||</span></span><br><span class="line"><span class="xml">				(oneColumn2==null || oneColumn2=='' || oneColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(twoColumn2==null || twoColumn2=='' || twoColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(threeColumn2==null || threeColumn2=='' || threeColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(fourColumn2==null || fourColumn2=='' || fourColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(fiveColumn2==null || fiveColumn2=='' || fiveColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(sixColumn2==null || sixColumn2=='' || sixColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(sevenColumn2==null || sevenColumn2=='' || sevenColumn2==undefined)</span></span><br><span class="line"><span class="xml">		)&#123;</span></span><br><span class="line"><span class="xml">			console.log("数据不完整,请检查参数并重新填写");</span></span><br><span class="line"><span class="xml">		&#125;else&#123;</span></span><br><span class="line"><span class="xml">			//发送请求进行新增</span></span><br><span class="line"><span class="xml">			var requestDataBean = &#123;</span></span><br><span class="line"><span class="xml">				numberId:numberId2,</span></span><br><span class="line"><span class="xml">				createTime:createTime2,</span></span><br><span class="line"><span class="xml">				oneColumn:oneColumn2,</span></span><br><span class="line"><span class="xml">				twoColumn:twoColumn2,</span></span><br><span class="line"><span class="xml">				threeColumn:threeColumn2,</span></span><br><span class="line"><span class="xml">				fourColumn:fourColumn2,</span></span><br><span class="line"><span class="xml">				fiveColumn:fiveColumn2,</span></span><br><span class="line"><span class="xml">				sixColumn:sixColumn2,</span></span><br><span class="line"><span class="xml">				sevenColumn:sevenColumn2</span></span><br><span class="line"><span class="xml">			&#125;;</span></span><br><span class="line"><span class="xml">			console.log("add - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">			var url="/maima/addMaiMa";</span></span><br><span class="line"><span class="xml">			AjaxPost(url, requestDataBean,</span></span><br><span class="line"><span class="xml">					function () &#123;</span></span><br><span class="line"><span class="xml">						//ajax加载中</span></span><br><span class="line"><span class="xml">					&#125;,</span></span><br><span class="line"><span class="xml">					function (data) &#123;</span></span><br><span class="line"><span class="xml">						console.log("========数据获取成功======");</span></span><br><span class="line"><span class="xml">						if(data!=null &amp;&amp; data.Code!=null &amp;&amp; data.Code==200 &amp;&amp; data.Status!=null &amp;&amp; data.Status=="ok")&#123;</span></span><br><span class="line"><span class="xml">							success_prompt(data.Msg,2000);</span></span><br><span class="line"><span class="xml">							go();//flush</span></span><br><span class="line"><span class="xml">						&#125;else &#123;</span></span><br><span class="line"><span class="xml">							fail_prompt(data.Msg,2000);</span></span><br><span class="line"><span class="xml">							AjaxErro(data);</span></span><br><span class="line"><span class="xml">						&#125;</span></span><br><span class="line"><span class="xml">					&#125;)</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">	function edit()&#123;</span></span><br><span class="line"><span class="xml">		console.log("==============edit===============");</span></span><br><span class="line"><span class="xml">		var id=document.getElementById("id").value;</span></span><br><span class="line"><span class="xml">		var numberId2=document.getElementById("numberId").value;</span></span><br><span class="line"><span class="xml">		var createTime2=document.getElementById("createTime").value;</span></span><br><span class="line"><span class="xml">		var oneColumn2=document.getElementById("oneColumn").value;</span></span><br><span class="line"><span class="xml">		var twoColumn2=document.getElementById("twoColumn").value;</span></span><br><span class="line"><span class="xml">		var threeColumn2=document.getElementById("threeColumn").value;</span></span><br><span class="line"><span class="xml">		var fourColumn2=document.getElementById("fourColumn").value;</span></span><br><span class="line"><span class="xml">		var fiveColumn2=document.getElementById("fiveColumn").value;</span></span><br><span class="line"><span class="xml">		var sixColumn2=document.getElementById("sixColumn").value;</span></span><br><span class="line"><span class="xml">		var sevenColumn2=document.getElementById("sevenColumn").value;</span></span><br><span class="line"><span class="xml">		if((id==null || id=='' || id==undefined)||</span></span><br><span class="line"><span class="xml">				(numberId2==null || numberId2=='' || numberId2==undefined) ||</span></span><br><span class="line"><span class="xml">				(createTime2==null || createTime2=='' || createTime2==undefined) ||</span></span><br><span class="line"><span class="xml">				(oneColumn2==null || oneColumn2=='' || oneColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(twoColumn2==null || twoColumn2=='' || twoColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(threeColumn2==null || threeColumn2=='' || threeColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(fourColumn2==null || fourColumn2=='' || fourColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(fiveColumn2==null || fiveColumn2=='' || fiveColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(sixColumn2==null || sixColumn2=='' || sixColumn2==undefined) ||</span></span><br><span class="line"><span class="xml">				(sevenColumn2==null || sevenColumn2=='' || sevenColumn2==undefined)</span></span><br><span class="line"><span class="xml">		)&#123;</span></span><br><span class="line"><span class="xml">			console.log("数据不完整,请检查参数并重新填写");</span></span><br><span class="line"><span class="xml">		&#125;else&#123;</span></span><br><span class="line"><span class="xml">			//发送请求进行新增</span></span><br><span class="line"><span class="xml">			var requestDataBean = &#123;</span></span><br><span class="line"><span class="xml">				id:id,</span></span><br><span class="line"><span class="xml">				numberId:numberId2,</span></span><br><span class="line"><span class="xml">				createTime:createTime2,</span></span><br><span class="line"><span class="xml">				oneColumn:oneColumn2,</span></span><br><span class="line"><span class="xml">				twoColumn:twoColumn2,</span></span><br><span class="line"><span class="xml">				threeColumn:threeColumn2,</span></span><br><span class="line"><span class="xml">				fourColumn:fourColumn2,</span></span><br><span class="line"><span class="xml">				fiveColumn:fiveColumn2,</span></span><br><span class="line"><span class="xml">				sixColumn:sixColumn2,</span></span><br><span class="line"><span class="xml">				sevenColumn:sevenColumn2</span></span><br><span class="line"><span class="xml">			&#125;;</span></span><br><span class="line"><span class="xml">			console.log("edit - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">			var url="/maima/editMaiMa";</span></span><br><span class="line"><span class="xml">			AjaxPost(url, requestDataBean,</span></span><br><span class="line"><span class="xml">					function () &#123;</span></span><br><span class="line"><span class="xml">						//ajax加载中</span></span><br><span class="line"><span class="xml">					&#125;,</span></span><br><span class="line"><span class="xml">					function (data) &#123;</span></span><br><span class="line"><span class="xml">						console.log("========数据获取成功======");</span></span><br><span class="line"><span class="xml">						if(data!=null &amp;&amp; data.Code!=null &amp;&amp; data.Code==200 &amp;&amp; data.Status!=null &amp;&amp; data.Status=="ok")&#123;</span></span><br><span class="line"><span class="xml">							success_prompt(data.Msg,2000);</span></span><br><span class="line"><span class="xml">							go();//flush</span></span><br><span class="line"><span class="xml">						&#125;else &#123;</span></span><br><span class="line"><span class="xml">							fail_prompt(data.Msg,2000);</span></span><br><span class="line"><span class="xml">							AjaxErro(data);</span></span><br><span class="line"><span class="xml">						&#125;</span></span><br><span class="line"><span class="xml">					&#125;)</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">	function reset()&#123;</span></span><br><span class="line"><span class="xml">		document.getElementById("number").value="";</span></span><br><span class="line"><span class="xml">		document.getElementById("createTime3").value="";</span></span><br><span class="line"><span class="xml">		document.getElementById("createTime4").value="";</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">	function show(obj,id)&#123;</span></span><br><span class="line"><span class="xml">		var value0 = $(obj).parents("td").parents("tr").children("td").eq(0).text();</span></span><br><span class="line"><span class="xml">		var value1 = $(obj).parents("td").parents("tr").children("td").eq(1).text();</span></span><br><span class="line"><span class="xml">		var value2 = $(obj).parents("td").parents("tr").children("td").eq(2).text();</span></span><br><span class="line"><span class="xml">		var value3 = $(obj).parents("td").parents("tr").children("td").eq(3).text();</span></span><br><span class="line"><span class="xml">		var value4 = $(obj).parents("td").parents("tr").children("td").eq(4).text();</span></span><br><span class="line"><span class="xml">		var value5 = $(obj).parents("td").parents("tr").children("td").eq(5).text();</span></span><br><span class="line"><span class="xml">		var value6 = $(obj).parents("td").parents("tr").children("td").eq(6).text();</span></span><br><span class="line"><span class="xml">		var value7 = $(obj).parents("td").parents("tr").children("td").eq(7).text();</span></span><br><span class="line"><span class="xml">		var value8 = $(obj).parents("td").parents("tr").children("td").eq(8).text();</span></span><br><span class="line"><span class="xml">		console.log("value0: "+value0+" value1: "+value1+" value2: "+value2+" value3: "+value3+" value4: "+value4+" value5: "+value5+" value6: "+value6+" value7: "+value7+" value8: "+value8);</span></span><br><span class="line"><span class="xml">		document.getElementById("id").value=id;</span></span><br><span class="line"><span class="xml">		document.getElementById("numberId").value=value0;</span></span><br><span class="line"><span class="xml">		document.getElementById("createTime").value=value1;</span></span><br><span class="line"><span class="xml">		document.getElementById("oneColumn").value=value2;</span></span><br><span class="line"><span class="xml">		document.getElementById("twoColumn").value=value3;</span></span><br><span class="line"><span class="xml">		document.getElementById("threeColumn").value=value4;</span></span><br><span class="line"><span class="xml">		document.getElementById("fourColumn").value=value5;</span></span><br><span class="line"><span class="xml">		document.getElementById("fiveColumn").value=value6;</span></span><br><span class="line"><span class="xml">		document.getElementById("sixColumn").value=value7;</span></span><br><span class="line"><span class="xml">		document.getElementById("sevenColumn").value=value8;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">	function Map() &#123;</span></span><br><span class="line"><span class="xml">		/** 存放键的数组(遍历用到) */</span></span><br><span class="line"><span class="xml">		this.keys = new Array();</span></span><br><span class="line"><span class="xml">		/** 存放数据 */</span></span><br><span class="line"><span class="xml">		this.data = new Object();</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		 * 放入一个键值对</span></span><br><span class="line"><span class="xml">		 * @param &#123;String&#125; key</span></span><br><span class="line"><span class="xml">		 * @param &#123;Object&#125; value</span></span><br><span class="line"><span class="xml">		 */</span></span><br><span class="line"><span class="xml">		this.put = function(key, value) &#123;</span></span><br><span class="line"><span class="xml">			if(this.data[key] == null)&#123;</span></span><br><span class="line"><span class="xml">				this.keys.push(key);</span></span><br><span class="line"><span class="xml">			&#125;</span></span><br><span class="line"><span class="xml">			this.data[key] = value;</span></span><br><span class="line"><span class="xml">		&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		 * 获取某键对应的值</span></span><br><span class="line"><span class="xml">		 * @param &#123;String&#125; key</span></span><br><span class="line"><span class="xml">		 * @return &#123;Object&#125; value</span></span><br><span class="line"><span class="xml">		 */</span></span><br><span class="line"><span class="xml">		this.get = function(key) &#123;</span></span><br><span class="line"><span class="xml">			return this.data[key];</span></span><br><span class="line"><span class="xml">		&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		 * 删除一个键值对</span></span><br><span class="line"><span class="xml">		 * @param &#123;String&#125; key</span></span><br><span class="line"><span class="xml">		 */</span></span><br><span class="line"><span class="xml">		this.remove = function(key) &#123;</span></span><br><span class="line"><span class="xml">			this.keys.remove(key);</span></span><br><span class="line"><span class="xml">			this.data[key] = null;</span></span><br><span class="line"><span class="xml">		&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		 * 遍历Map,执行处理函数</span></span><br><span class="line"><span class="xml">		 *</span></span><br><span class="line"><span class="xml">		 * @param &#123;Function&#125; 回调函数 function(key,value,index)&#123;..&#125;</span></span><br><span class="line"><span class="xml">		 */</span></span><br><span class="line"><span class="xml">		this.each = function(fn)&#123;</span></span><br><span class="line"><span class="xml">			if(typeof fn != 'function')&#123;</span></span><br><span class="line"><span class="xml">				return;</span></span><br><span class="line"><span class="xml">			&#125;</span></span><br><span class="line"><span class="xml">			var len = this.keys.length;</span></span><br><span class="line"><span class="xml">			for(var i=0;i<span class="tag">&lt;<span class="name">len;i++)&#123;</span></span></span></span><br><span class="line"><span class="xml">				var k = this.keys[i];</span></span><br><span class="line"><span class="xml">				fn(k,this.data[k],i);</span></span><br><span class="line"><span class="xml">			&#125;</span></span><br><span class="line"><span class="xml">		&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		 * 获取键值数组(类似<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://lib.csdn.net/base/java"</span> <span class="attr">class</span>=<span class="string">'replace_word'</span> <span class="attr">title</span>=<span class="string">"Java 知识库"</span> <span class="attr">target</span>=<span class="string">'_blank'</span> <span class="attr">style</span>=<span class="string">'color:#df3434; font-weight:bold;'</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span>的entrySet())</span></span><br><span class="line"><span class="xml">		 * @return 键值对象&#123;key,value&#125;的数组</span></span><br><span class="line"><span class="xml">		 */</span></span><br><span class="line"><span class="xml">		this.entrys = function() &#123;</span></span><br><span class="line"><span class="xml">			var len = this.keys.length;</span></span><br><span class="line"><span class="xml">			var entrys = new Array(len);</span></span><br><span class="line"><span class="xml">			for (var i = 0; i <span class="tag">&lt; <span class="attr">len</span>; <span class="attr">i</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">				entrys[i] = &#123;</span></span><br><span class="line"><span class="xml">					key : this.keys[i],</span></span><br><span class="line"><span class="xml">					value : this.data[i]</span></span><br><span class="line"><span class="xml">				&#125;;</span></span><br><span class="line"><span class="xml">			&#125;</span></span><br><span class="line"><span class="xml">			return entrys;</span></span><br><span class="line"><span class="xml">		&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		 * 判断Map是否为空</span></span><br><span class="line"><span class="xml">		 */</span></span><br><span class="line"><span class="xml">		this.isEmpty = function() &#123;</span></span><br><span class="line"><span class="xml">			return this.keys.length == 0;</span></span><br><span class="line"><span class="xml">		&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		 * 获取键值对数量</span></span><br><span class="line"><span class="xml">		 */</span></span><br><span class="line"><span class="xml">		this.size = function()&#123;</span></span><br><span class="line"><span class="xml">			return this.keys.length;</span></span><br><span class="line"><span class="xml">		&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		/**</span></span><br><span class="line"><span class="xml">		 * 重写toString</span></span><br><span class="line"><span class="xml">		 */</span></span><br><span class="line"><span class="xml">		this.toString = function()&#123;</span></span><br><span class="line"><span class="xml">			var s = "&#123;";</span></span><br><span class="line"><span class="xml">			for(var i=0;i<span class="tag">&lt;<span class="name">this.keys.length;i++,s+=',')&#123;</span></span></span></span><br><span class="line"><span class="xml">				var k = this.keys[i];</span></span><br><span class="line"><span class="xml">				s += k+"="+this.data[k];</span></span><br><span class="line"><span class="xml">			&#125;</span></span><br><span class="line"><span class="xml">			s=s.substr(0,s.length-1);</span></span><br><span class="line"><span class="xml">			s+="&#125;";</span></span><br><span class="line"><span class="xml">			return s;</span></span><br><span class="line"><span class="xml">		&#125;;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	//上一页</span></span><br><span class="line"><span class="xml">	function up()&#123;</span></span><br><span class="line"><span class="xml">		var upPage=document.getElementById("page").value;</span></span><br><span class="line"><span class="xml">		var pageSize=document.getElementById("pageSize").value;</span></span><br><span class="line"><span class="xml">		var number=document.getElementById("number").value;</span></span><br><span class="line"><span class="xml">		if(upPage=='' || upPage==undefined || upPage==null || upPage<span class="tag">&lt;<span class="name">1)&#123;</span></span></span></span><br><span class="line"><span class="xml">			upPage=0;</span></span><br><span class="line"><span class="xml">		&#125;else&#123;</span></span><br><span class="line"><span class="xml">			upPage=upPage*1-1;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">		if(upPage<span class="tag">&lt;<span class="name">0)&#123;</span></span></span></span><br><span class="line"><span class="xml">			upPage=0;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">		var requestDataBean = &#123;page:upPage,pageSize:pageSize*1,number:number&#125;;</span></span><br><span class="line"><span class="xml">		console.log("上一页 - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">		getData(requestDataBean);</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">	//下一页</span></span><br><span class="line"><span class="xml">	function down()&#123;</span></span><br><span class="line"><span class="xml">		var downPage=document.getElementById("page").value;</span></span><br><span class="line"><span class="xml">		var pageSize=document.getElementById("pageSize").value;</span></span><br><span class="line"><span class="xml">		var number=document.getElementById("number").value;</span></span><br><span class="line"><span class="xml">		if(downPage=='' || downPage==undefined || downPage==null)&#123;</span></span><br><span class="line"><span class="xml">			downPage=0;</span></span><br><span class="line"><span class="xml">		&#125;else&#123;</span></span><br><span class="line"><span class="xml">			downPage=downPage*1+1;</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"><span class="xml">		var requestDataBean = &#123;page:downPage,pageSize:pageSize*1,number:number&#125;;</span></span><br><span class="line"><span class="xml">		console.log("下一页 - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">		getData(requestDataBean);</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">	//查询</span></span><br><span class="line"><span class="xml">	function go()&#123;</span></span><br><span class="line"><span class="xml">		var page=document.getElementById("page").value;</span></span><br><span class="line"><span class="xml">		var pageSize=document.getElementById("pageSize").value;</span></span><br><span class="line"><span class="xml">		var number=document.getElementById("number").value;</span></span><br><span class="line"><span class="xml">		var createTime1=document.getElementById("createTime3").value;</span></span><br><span class="line"><span class="xml">		var createTime2=document.getElementById("createTime4").value;</span></span><br><span class="line"><span class="xml">		var requestDataBean = &#123;page:page*1,pageSize:pageSize*1,number:number,createTime1:createTime1,createTime2:createTime2&#125;;</span></span><br><span class="line"><span class="xml">		console.log("数据查询 - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">		getData(requestDataBean);</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">	//给detailData表格填充数据</span></span><br><span class="line"><span class="xml">	 function fillDataToTable(arrays,sumArrays)&#123;</span></span><br><span class="line"><span class="xml">		var detailData=document.getElementById("detailData");</span></span><br><span class="line"><span class="xml">		detailData.innerHTML="";</span></span><br><span class="line"><span class="xml">		var row=detailData.insertRow(0);</span></span><br><span class="line"><span class="xml">		row.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml">		var cell0=row.insertCell(0);</span></span><br><span class="line"><span class="xml">		cell0.innerHTML="期数";</span></span><br><span class="line"><span class="xml">		var cell1=row.insertCell(1);</span></span><br><span class="line"><span class="xml">		cell1.innerHTML="开奖日期";</span></span><br><span class="line"><span class="xml">		var cell2=row.insertCell(2);</span></span><br><span class="line"><span class="xml">		cell2.innerHTML="第一位数";</span></span><br><span class="line"><span class="xml">		var cell3=row.insertCell(3);</span></span><br><span class="line"><span class="xml">		cell3.innerHTML="第二位数";</span></span><br><span class="line"><span class="xml">		var cell4=row.insertCell(4);</span></span><br><span class="line"><span class="xml">		cell4.innerHTML="第三位数";</span></span><br><span class="line"><span class="xml">		var cell5=row.insertCell(5);</span></span><br><span class="line"><span class="xml">		cell5.innerHTML="第四位数";</span></span><br><span class="line"><span class="xml">		var cell6=row.insertCell(6);</span></span><br><span class="line"><span class="xml">		cell6.innerHTML="第五位数";</span></span><br><span class="line"><span class="xml">		var cell7=row.insertCell(7);</span></span><br><span class="line"><span class="xml">		cell7.innerHTML="第六位数";</span></span><br><span class="line"><span class="xml">		var cell8=row.insertCell(8);</span></span><br><span class="line"><span class="xml">		cell8.innerHTML="第七位数";</span></span><br><span class="line"><span class="xml">		var cell9=row.insertCell(9);</span></span><br><span class="line"><span class="xml">		 cell9.innerHTML="操作";</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		//分页数据插入</span></span><br><span class="line"><span class="xml">		for(var i=0;i<span class="tag">&lt;<span class="name">arrays.length;i++)&#123;</span></span></span></span><br><span class="line"><span class="xml">				var json=arrays[i];</span></span><br><span class="line"><span class="xml">				var row2=detailData.insertRow(i+1);</span></span><br><span class="line"><span class="xml">				var cell0=row2.insertCell(0);</span></span><br><span class="line"><span class="xml">				cell0.innerHTML=json.number;</span></span><br><span class="line"><span class="xml">				var cell1=row2.insertCell(1);</span></span><br><span class="line"><span class="xml">				cell1.innerHTML=json.createTime;</span></span><br><span class="line"><span class="xml">				var cell2=row2.insertCell(2);</span></span><br><span class="line"><span class="xml">				cell2.innerHTML=json.oneColumn;</span></span><br><span class="line"><span class="xml">				var cell3=row2.insertCell(3);</span></span><br><span class="line"><span class="xml">				cell3.innerHTML=json.twoColumn;</span></span><br><span class="line"><span class="xml">				var cell4=row2.insertCell(4);</span></span><br><span class="line"><span class="xml">				cell4.innerHTML=json.threeColumn;</span></span><br><span class="line"><span class="xml">				var cell5=row2.insertCell(5);</span></span><br><span class="line"><span class="xml">				cell5.innerHTML=json.fourColumn;</span></span><br><span class="line"><span class="xml">				var cell6=row2.insertCell(6);</span></span><br><span class="line"><span class="xml">				cell6.innerHTML=json.fiveColumn;</span></span><br><span class="line"><span class="xml">				var cell7=row2.insertCell(7);</span></span><br><span class="line"><span class="xml">				cell7.innerHTML=json.sixColumn;</span></span><br><span class="line"><span class="xml">				var cell8=row2.insertCell(8);</span></span><br><span class="line"><span class="xml">				cell8.innerHTML=json.sevenColumn;</span></span><br><span class="line"><span class="xml">				var cell9=row2.insertCell(9);</span></span><br><span class="line"><span class="xml">				cell9.innerHTML="<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">\</span>"<span class="attr">show</span>(<span class="attr">this</span>,"+<span class="attr">json.id</span>+")\" <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">btn</span> <span class="attr">btn-primary</span>\" <span class="attr">data-toggle</span>=<span class="string">\</span>"<span class="attr">modal</span>\" <span class="attr">data-target</span>=<span class="string">\</span>"#<span class="attr">myModal</span>\" &gt;</span>编辑<span class="tag">&lt;/<span class="name">button</span>&gt;</span>";</span></span><br><span class="line"><span class="xml">		&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		//单排遗漏数计算  总排遗漏数的计算应该简单，即每一排当中的最小值index，与每一排的最大值index取出来放入集合最后遍历出最小index与最大indeax进行相减即可</span></span><br><span class="line"><span class="xml">		 var oneArray=[]; var twoArray=[]; var threeArray=[]; var fourArray=[]; var fiveArray=[]; var sixArray=[]; var sevenArray=[];</span></span><br><span class="line"><span class="xml">		 var sumArray=[];</span></span><br><span class="line"><span class="xml">		 //总数据 算遗漏数</span></span><br><span class="line"><span class="xml">		 for(var i=0;i<span class="tag">&lt;<span class="name">sumArrays.length;i++)&#123;</span></span></span></span><br><span class="line"><span class="xml">			 var json=sumArrays[i];</span></span><br><span class="line"><span class="xml">			 oneArray.push(json.oneColumn);</span></span><br><span class="line"><span class="xml">			 twoArray.push(json.twoColumn);</span></span><br><span class="line"><span class="xml">			 threeArray.push(json.threeColumn);</span></span><br><span class="line"><span class="xml">			 fourArray.push(json.fourColumn);</span></span><br><span class="line"><span class="xml">			 fiveArray.push(json.fiveColumn);</span></span><br><span class="line"><span class="xml">			 sixArray.push(json.sixColumn);</span></span><br><span class="line"><span class="xml">			 sevenArray.push(json.sevenColumn);</span></span><br><span class="line"><span class="xml">		 &#125;</span></span><br><span class="line"><span class="xml">		 //插入7列数组数据</span></span><br><span class="line"><span class="xml">		 sumArray.push(oneArray);</span></span><br><span class="line"><span class="xml">		 sumArray.push(twoArray);</span></span><br><span class="line"><span class="xml">		 sumArray.push(threeArray);</span></span><br><span class="line"><span class="xml">		 sumArray.push(fourArray);</span></span><br><span class="line"><span class="xml">		 sumArray.push(fiveArray);</span></span><br><span class="line"><span class="xml">		 sumArray.push(sixArray);</span></span><br><span class="line"><span class="xml">		 sumArray.push(sevenArray);</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		 var tr0=detailData.insertRow(arrays.length+1);</span></span><br><span class="line"><span class="xml">		 var td0=tr0.insertCell(0);</span></span><br><span class="line"><span class="xml">		 td0.colSpan=2;</span></span><br><span class="line"><span class="xml">		 td0.innerHTML="遗漏信息";</span></span><br><span class="line"><span class="xml">		 td0.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml">		 var td00=tr0.insertCell(1);</span></span><br><span class="line"><span class="xml">		 td00.colSpan=8;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		 var tr=detailData.insertRow(arrays.length+2);</span></span><br><span class="line"><span class="xml">		 var td=tr.insertCell(0);</span></span><br><span class="line"><span class="xml">		 td.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml">		 td.innerHTML="数字 | 单排最大遗漏数 | 总排最大遗漏数";</span></span><br><span class="line"><span class="xml">		 td.colSpan=2;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		 var numbers=document.getElementById("number").value.trim();</span></span><br><span class="line"><span class="xml">		 console.log("nums: "+numbers.split(","));</span></span><br><span class="line"><span class="xml">		 if(numbers==null || numbers=='' || numbers==undefined)&#123;//则遗漏信息、数字、单排最大遗漏数不进行显示</span></span><br><span class="line"><span class="xml">			 var td11=tr.insertCell(1);</span></span><br><span class="line"><span class="xml">			 td11.colSpan=8;</span></span><br><span class="line"><span class="xml">		 &#125;else&#123;</span></span><br><span class="line"><span class="xml">			 var nums=numbers.split(","); //则遗漏信息、数字、单排最大遗漏数进行显示 循环查询每个数值的单排 总排</span></span><br><span class="line"></span><br><span class="line"><span class="xml">			 for(var h=0;h<span class="tag">&lt;<span class="name">nums.length;h++)&#123;</span></span></span></span><br><span class="line"><span class="xml">			 	 var number=nums[h];//查询的数值</span></span><br><span class="line"><span class="xml">				 var singleMap=new Map();//关于该数值的单排遗漏数</span></span><br><span class="line"><span class="xml">				 var minIndexMap=new Map();//t每一列， 每一个单排当中的最小index</span></span><br><span class="line"><span class="xml">				 var maxIndexMap=new Map();//t每一列， 每一个单排当中的最大index</span></span><br><span class="line"></span><br><span class="line"><span class="xml">				 for(var t=0;t<span class="tag">&lt;<span class="name">sumArray.length;t++)&#123;</span> //当前<span class="attr">7</span>个数组当中都存有对应的数值,循环<span class="attr">7</span>次 // <span class="attr">var</span> <span class="attr">arrays</span>=<span class="string">[01,28,19,35,43,08,01,12,32,41];</span></span></span></span><br><span class="line"><span class="xml">					 var arrays2=sumArray[t];//单个数组</span></span><br><span class="line"><span class="xml">					 var map=new Map();</span></span><br><span class="line"></span><br><span class="line"><span class="xml">					 for(var i=0;i<span class="tag">&lt;<span class="name">arrays2.length;i++)&#123;</span></span></span></span><br><span class="line"><span class="xml">						 var element=arrays2[i];//数组当中具体的元素</span></span><br><span class="line"><span class="xml">						 map.put(element,0);//放入了该列当中所有不重复元素以及其世事变化的位移index+1</span></span><br><span class="line"></span><br><span class="line"><span class="xml">						 for(var n=0;n<span class="tag">&lt;<span class="name">arrays2.length;n++)&#123;</span></span></span></span><br><span class="line"><span class="xml">							 var key=arrays2[n];</span></span><br><span class="line"><span class="xml">							 if(key!=null &amp;&amp; key==element)&#123; //如果存在有当前循环的数组当中的取值与map当中的键相同的则重新赋值，重新赋值后进行break;</span></span><br><span class="line"><span class="xml">								 var y=i-n;</span></span><br><span class="line"><span class="xml">								 map.put(element,y);//此处的y没有减去当前自己的位数,所以当单排最大遗漏数查询的时候还需要-1</span></span><br><span class="line"></span><br><span class="line"><span class="xml">								 //每一组的min与max取出来之后的差也应该是该列的最大遗漏数+1，没有减1处理</span></span><br><span class="line"><span class="xml">								 if(element==number)&#123; //当key不为空以及key与element相同的机会有多次，则每次赋值时进行比较看是否是最小值</span></span><br><span class="line"><span class="xml">									 if(minIndexMap.get(t)==null || minIndexMap.get(t)==undefined)&#123; //取出的数值为空则说明还没有放入过值,则判断number与当前循环的element是否一致，如果一致则放入当前t与该element的位移index  //一般没有放过且第一次放的话即判断为最小index,后续无需再次判断了</span></span><br><span class="line"><span class="xml">										 minIndexMap.put(t,i);</span></span><br><span class="line"><span class="xml">									 &#125;else&#123;//从minIndexMap当中进行取出该t 如果当前number与当前的element相同，则放入当前element的位移,我觉得这种可能性没有</span></span><br><span class="line"><span class="xml">										if(minIndexMap.get(t)&gt;i)&#123;</span></span><br><span class="line"><span class="xml">											minIndexMap.put(t,i);</span></span><br><span class="line"><span class="xml">										&#125;</span></span><br><span class="line"><span class="xml">									 &#125;</span></span><br><span class="line"><span class="xml">									 if(maxIndexMap.get(t)==null || maxIndexMap.get(t)==undefined)&#123;//取最大值的话可能性就有</span></span><br><span class="line"><span class="xml">										 maxIndexMap.put(t,i);</span></span><br><span class="line"><span class="xml">									 &#125;else&#123;</span></span><br><span class="line"><span class="xml">										 if(maxIndexMap.get(t)<span class="tag">&lt;<span class="name">i)&#123;</span></span></span></span><br><span class="line"><span class="xml">											 maxIndexMap.put(t,i);</span></span><br><span class="line"><span class="xml">										 &#125;</span></span><br><span class="line"><span class="xml">									 &#125;</span></span><br><span class="line"><span class="xml">								 &#125;</span></span><br><span class="line"><span class="xml">								 break;</span></span><br><span class="line"><span class="xml">							 &#125;else&#123;</span></span><br><span class="line"><span class="xml">								 continue;</span></span><br><span class="line"><span class="xml">							 &#125;</span></span><br><span class="line"><span class="xml">						 &#125;</span></span><br><span class="line"><span class="xml">					 &#125;</span></span><br><span class="line"><span class="xml">					 console.log("第"+t+"列当中，每一个元素的单排最大遗漏数："+map.toString());</span></span><br><span class="line"><span class="xml">					 if(map.get(number)!=null || map.get(number)!=undefined)&#123;</span></span><br><span class="line"><span class="xml">						 //取值则为当前该map.get(number)即当前列当中的单排最大遗漏数</span></span><br><span class="line"><span class="xml">						 singleMap.put(t,map.get(number)-1);//key t：哪一列， value 当前该数值在当前排t的最大遗漏数  map.get(number)需要减去1</span></span><br><span class="line"><span class="xml">					 &#125;else&#123;</span></span><br><span class="line"><span class="xml">						 //当前列取出number如果为空则说明当前列当中不存在有该数值，则替换为0</span></span><br><span class="line"><span class="xml">						 singleMap.put(t,'当前列不存在'+number);</span></span><br><span class="line"><span class="xml">					 &#125;</span></span><br><span class="line"><span class="xml">				 &#125;</span></span><br><span class="line"><span class="xml">				 console.log("minIndexMap: "+minIndexMap.toString());</span></span><br><span class="line"><span class="xml">				 console.log("maxIndexMap: "+maxIndexMap.toString());</span></span><br><span class="line"><span class="xml">				 var minIndex;</span></span><br><span class="line"><span class="xml">				 var mapArrays1=minIndexMap.entrys();</span></span><br><span class="line"><span class="xml">				 for(var i=0;i<span class="tag">&lt;<span class="name">mapArrays1.length;i++)&#123;</span> //当前列当中的<span class="attr">min</span> <span class="attr">map</span>数组</span></span></span><br><span class="line"><span class="xml">				 	var value=minIndexMap.get(i);</span></span><br><span class="line"><span class="xml">					 if(minIndex==undefined || minIndex==null)&#123;</span></span><br><span class="line"><span class="xml">						 minIndex=value;</span></span><br><span class="line"><span class="xml">					 &#125;else&#123;</span></span><br><span class="line"><span class="xml">						 if(minIndex&gt;value)&#123;</span></span><br><span class="line"><span class="xml">						 	minIndex=value;</span></span><br><span class="line"><span class="xml">						 &#125;</span></span><br><span class="line"><span class="xml">					  &#125;</span></span><br><span class="line"><span class="xml">				 &#125;</span></span><br><span class="line"><span class="xml">				 var maxIndex;</span></span><br><span class="line"><span class="xml">				 var mapArrays2=maxIndexMap.entrys();</span></span><br><span class="line"><span class="xml">				 for(var i=0;i<span class="tag">&lt;<span class="name">mapArrays2.length;i++)&#123;</span> //当前列当中的<span class="attr">min</span> <span class="attr">map</span>数组</span></span></span><br><span class="line"><span class="xml">					 var value=maxIndexMap.get(i);</span></span><br><span class="line"><span class="xml">					 if(maxIndex==undefined || maxIndex==null)&#123;</span></span><br><span class="line"><span class="xml">						 maxIndex=value;</span></span><br><span class="line"><span class="xml">					 &#125;else&#123;</span></span><br><span class="line"><span class="xml">						 if(maxIndex<span class="tag">&lt;<span class="name">value)&#123;</span></span></span></span><br><span class="line"><span class="xml">						 	maxIndex=value;</span></span><br><span class="line"><span class="xml">						 &#125;</span></span><br><span class="line"><span class="xml">					 &#125;</span></span><br><span class="line"><span class="xml">				 &#125;</span></span><br><span class="line"><span class="xml">				 var sumMaxNumber=maxIndex-minIndex-1;</span></span><br><span class="line"><span class="xml">				 console.log("minIndex: "+minIndex+" maxIndex: "+maxIndex+" sumMaxNumber: "+sumMaxNumber);</span></span><br><span class="line"></span><br><span class="line"><span class="xml">				 var mapArrays=singleMap.entrys();//循环之后获取得到singleMap,即单排数</span></span><br><span class="line"><span class="xml">				 if (h == 0) &#123; //即第一个数值的时候填入行tr:arrays.length+2</span></span><br><span class="line"><span class="xml">					 td.innerHTML="数字: "+number+" | 单排最大遗漏数 | 总排最大遗漏数: "+sumMaxNumber;</span></span><br><span class="line"><span class="xml">					 for(var r=0;r<span class="tag">&lt;<span class="name">mapArrays.length;r++)</span> &#123;</span></span></span><br><span class="line"><span class="xml">						 var td22 = tr.insertCell(r+1);//当前行处于第一行</span></span><br><span class="line"><span class="xml">						 td22.innerHTML = singleMap.get(r);</span></span><br><span class="line"><span class="xml">					 &#125;</span></span><br><span class="line"><span class="xml">					 tr.insertCell(mapArrays.length+1);</span></span><br><span class="line"><span class="xml">				 &#125; else &#123;</span></span><br><span class="line"><span class="xml">					 //新增行并插入</span></span><br><span class="line"><span class="xml">					 var newTr=detailData.insertRow(arrays.length+2+h);</span></span><br><span class="line"><span class="xml">					 var newTd=newTr.insertCell(0);</span></span><br><span class="line"><span class="xml">					 newTd.innerHTML="数字: "+number+" | 单排最大遗漏数 | 总排最大遗漏数: "+sumMaxNumber;</span></span><br><span class="line"><span class="xml">					 newTd.style.fontWeight="bolder";</span></span><br><span class="line"><span class="xml">					 newTd.colSpan=2;</span></span><br><span class="line"><span class="xml">					 for(var r=0;r<span class="tag">&lt;<span class="name">mapArrays.length;r++)</span> &#123;</span></span></span><br><span class="line"><span class="xml">						 var td22 = newTr.insertCell(r+1);//从第二行开始进行新增列</span></span><br><span class="line"><span class="xml">						 td22.innerHTML = singleMap.get(r);</span></span><br><span class="line"><span class="xml">					 &#125;</span></span><br><span class="line"><span class="xml">					 newTr.insertCell(mapArrays.length+1);</span></span><br><span class="line"><span class="xml">				 &#125;</span></span><br><span class="line"><span class="xml">				 console.log("================== 查询数值："+number+" END ==================");</span></span><br><span class="line"><span class="xml">			 &#125;</span></span><br><span class="line"><span class="xml">		 &#125;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">	//获取list接口数据</span></span><br><span class="line"><span class="xml">	function getData(requestDataBean)&#123;</span></span><br><span class="line"><span class="xml">		var url="/maima/findAllByParams";</span></span><br><span class="line"><span class="xml">		AjaxPost(url, requestDataBean,</span></span><br><span class="line"><span class="xml">			function () &#123;</span></span><br><span class="line"><span class="xml">				//ajax加载中</span></span><br><span class="line"><span class="xml">			&#125;,</span></span><br><span class="line"><span class="xml">			function (data) &#123;</span></span><br><span class="line"><span class="xml">				console.log("========数据获取成功======");</span></span><br><span class="line"><span class="xml">				//ajax返回 //认证完成</span></span><br><span class="line"><span class="xml">				if(data!=null)&#123;</span></span><br><span class="line"><span class="xml">					var arrays=JSON.parse(JSON.stringify(data.list));</span></span><br><span class="line"><span class="xml">					var sumArrays=JSON.parse(JSON.stringify(data.list2));</span></span><br><span class="line"><span class="xml">					document.getElementById("page").value=data.page;</span></span><br><span class="line"><span class="xml">					document.getElementById("pageSize").value=data.pageSize;</span></span><br><span class="line"><span class="xml">					if (arrays.length!=0) &#123;</span></span><br><span class="line"><span class="xml">						//前端填充数据操作</span></span><br><span class="line"><span class="xml">						console.log("======= 表格填充数据 - fillDataToTable =======")</span></span><br><span class="line"><span class="xml">						fillDataToTable(arrays,sumArrays);</span></span><br><span class="line"><span class="xml">					&#125; else &#123;</span></span><br><span class="line"><span class="xml">						AjaxErro(data);</span></span><br><span class="line"><span class="xml">					&#125;</span></span><br><span class="line"><span class="xml">				&#125;</span></span><br><span class="line"><span class="xml">			&#125;)</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">	//页面加载</span></span><br><span class="line"><span class="xml">	window.onload = function()&#123;</span></span><br><span class="line"><span class="xml">		var requestDataBean = &#123;page:0,pageSize:10&#125;;</span></span><br><span class="line"><span class="xml">		console.info("页面加载 - requestDataBean: "+JSON.stringify(requestDataBean));</span></span><br><span class="line"><span class="xml">		getData(requestDataBean);</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby">-</span></span><br><span class="line"></span><br><span class="line"><span class="ruby"> /<span class="regexp">/console.log(map.toString());</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ var mapArrays=map.entrys();</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ var maxValue=0;</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ var maxKey=0;</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ for(var i=0;i&lt;mapArrays.length;i++)&#123; /</span><span class="regexp">/当前列当中的map数组</span></span></span><br><span class="line"><span class="ruby">						/<span class="regexp">/  var key=mapArrays[i].key;</span></span></span><br><span class="line"><span class="ruby">						/<span class="regexp">/  var value=map.get(key);</span></span></span><br><span class="line"><span class="ruby">						 /<span class="regexp">/ console.log("key: "+key+" value:"+value);</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ &#125;</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ console.log("单排最大遗漏数为 - key:"+maxKey+"  value:"+(maxValue-1));</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/添加元素</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ var td4=tr.insertCell(t+1);</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ if(maxKey&lt;=0)&#123;</span></span></span><br><span class="line"><span class="ruby">						/<span class="regexp">/  td4.innerHTML="-";</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">						/<span class="regexp">/  td4.innerHTML=maxKey;</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ &#125;</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ var td5=tr2.insertCell(t+1);</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ if((maxValue-1)&lt;=0)&#123;</span></span></span><br><span class="line"><span class="ruby">						/<span class="regexp">/  td5.innerHTML="-";</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">						/<span class="regexp">/  td5.innerHTML=(maxValue-1);</span></span></span><br><span class="line"><span class="ruby">					 /<span class="regexp">/ &#125;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="ruby">var tr=detailData.insertRow(arrays.length+<span class="number">2</span>);</span></span><br><span class="line"><span class="ruby">		 var td=tr.insertCell(<span class="number">0</span>);</span></span><br><span class="line"><span class="ruby">		 td.innerHTML=<span class="string">"数字"</span>;</span></span><br><span class="line"><span class="ruby">		 td.style.fontWeight=<span class="string">"bolder"</span>;</span></span><br><span class="line"><span class="ruby">		 td.colSpan=<span class="number">2</span>;</span></span><br><span class="line"><span class="ruby">		 var tr2=detailData.insertRow(arrays.length+<span class="number">3</span>);</span></span><br><span class="line"><span class="ruby">		 var td2=tr2.insertCell(<span class="number">0</span>);</span></span><br><span class="line"><span class="ruby">		 td2.innerHTML=<span class="string">"单排最大遗漏数"</span>;</span></span><br><span class="line"><span class="ruby">		 td2.style.fontWeight=<span class="string">"bolder"</span>;</span></span><br><span class="line"><span class="ruby">		 td2.colSpan=<span class="number">2</span>;</span></span><br><span class="line"><span class="ruby">		 var tr3=detailData.insertRow(arrays.length+<span class="number">4</span>);</span></span><br><span class="line"><span class="ruby">		 var td3=tr3.insertCell(<span class="number">0</span>);</span></span><br><span class="line"><span class="ruby">		 td3.innerHTML=<span class="string">"总排最大遗漏数"</span>;</span></span><br><span class="line"><span class="ruby">		 td3.style.fontWeight=<span class="string">"bolder"</span>;</span></span><br><span class="line"><span class="ruby">		 td3.colSpan=<span class="number">2</span>;</span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ /</span><span class="regexp">/当前7个数组当中都存有对应的数值</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ for(var t=0;t&lt;sumArray.length;t++)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/ var arrays=[01,28,19,35,43,08,01,12,32,41];</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var arrays=sumArray[t];/</span><span class="regexp">/单个数组</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  console.log(arrays);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var flag=true;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var map=new Map();</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  for(var i=0;i&lt;arrays.length;i++)&#123; /</span><span class="regexp">/循环10次</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 var element=arrays[i];/</span><span class="regexp">/数组当中具体的元素</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 map.put(element,0);/</span><span class="regexp">/放入的只有9个</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 for(var n=0;n&lt;arrays.length;n++)&#123; /</span><span class="regexp">/循环10次</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 		 var key=arrays[n];</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 		 /</span><span class="regexp">/console.log("当前遍历的element: "+element+"；所处index: "+i+"  map当中循环的element: "+key+"所处index: "+n)</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 		 if(key!=null &amp;&amp; key==element)&#123; /</span><span class="regexp">/如果存在有当前循环的数组当中的取值与map当中的键相同的则重新赋值，重新赋值后进行下一次break;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 			 var y=i-n;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 			 /</span><span class="regexp">/console.log("key: "+key+" element:"+element+" y: "+y);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 			 map.put(element,y);/</span><span class="regexp">/此处的y没有减去当前自己的位数,所以当单排最大遗漏数查询的时候还需要-1</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 			 break;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 		 &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 			 continue;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 		 &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/console.log(map.toString());</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var mapArrays=map.entrys();</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var maxValue=0;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var maxKey=0;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  for(var i=0;i&lt;mapArrays.length;i++)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 var key=mapArrays[i].key;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 var value=map.get(key);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 /</span><span class="regexp">/console.log("key: "+key+" value:"+value);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 if(maxValue&lt;value)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 		 maxValue=value;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 		 maxKey=key;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  console.log("单排最大遗漏数为 - key:"+maxKey+"  value:"+(maxValue-1));</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  /</span><span class="regexp">/添加元素</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var td4=tr.insertCell(t+1);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  if(maxKey&lt;=0)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 td4.innerHTML="-";</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 td4.innerHTML=maxKey;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  var td5=tr2.insertCell(t+1);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  if((maxValue-1)&lt;=0)&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 td5.innerHTML="-";</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;else&#123;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ 	 td5.innerHTML=(maxValue-1);</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/  &#125;</span></span></span><br><span class="line"><span class="ruby">/<span class="regexp">/ &#125;</span></span></span><br><span class="line"><span class="ruby">-</span><span class="xml">-%&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>前端</tag>
        <tag>双色球</tag>
      </tags>
  </entry>
  <entry>
    <title>david说的面试题</title>
    <url>/2020/03/07/%E9%A2%86%E8%B5%AB/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>面试题</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">「ChoiMinki：@David   登录页面得操作  我是在退出登录得时候缓存得路径  为啥重新启动程序会 缓存这个路径呢」</span><br><span class="line"><span class="bullet">- </span>- - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">「David：@ChoiMinki 那个不用存缓存，作为参数拼接到url中」</span><br><span class="line"><span class="bullet">- </span>- - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">「ChoiMinki：我是做的缓存处理」</span><br><span class="line"><span class="bullet">- </span>- - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">「ChoiMinki：我不知道你怎么写的」</span><br><span class="line"><span class="bullet">- </span>- - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">「ChoiMinki：我按照我得思路来的[捂脸]」</span><br><span class="line"><span class="bullet">- </span>- - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">「David：不能写在缓存，假设我给你个链接要调到制定页面，缓存的方式就实现不了」</span><br><span class="line"><span class="bullet">- </span>- - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">「David：但是作为参数就可以」</span><br><span class="line"><span class="bullet">- </span>- - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">「David：想想为什么用我说的，而不能用你的方式@ChoiMinki」</span><br><span class="line"><span class="bullet">- </span>- - - - - - - - - - - - - -</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>领赫</category>
      </categories>
      <tags>
        <tag>领赫</tag>
        <tag>前端面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>领赫介绍</title>
    <url>/2020/03/05/%E9%A2%86%E8%B5%AB/%E9%A2%86%E8%B5%ABDESC/</url>
    <content><![CDATA[<h2 id="领赫"><a href="#领赫" class="headerlink" title="领赫"></a>领赫</h2><p>跨境<br>物流公司 example 快递一些货物<br>业务：欧洲国外客户 , 想买中国的一些东西，<br>通过领赫，领赫通过供应商拿到货，<br>并运送到欧洲国外可指定的地方<br>重要规则：主要业务（直发提货流程） 借助系统完成  </p>
<p>客户想要买东西，发起一个客户提交直发提货，用户用的是中台系统，领赫公司用的是后台管理系统， 点开中台系统，预估价格界面（发起提货-申请一个提货买东西）/直发提货列表 用来发货  </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">直发提货 <span class="selector-tag">-</span> 选择要提的东西 <span class="selector-tag">-</span> 填写完信息之后生成订单</span><br><span class="line">生成一个订单，领赫公司就可以在后台管理系统当中看到 直发提货菜单</span><br><span class="line">订单状态为等待联系工厂，领赫即需要看哪个工厂可提供，联系厂家， 联系到了之后，将订单状态改为已联系，此时需要做价格评估，报价，（价格可不变/也有时候需要评估）</span><br><span class="line">如果价格需要重新评估则中台系统需要中台客户重新确认价格，如果确认则为订单状态为待提货状态</span><br><span class="line">此时领赫公司去提货，当货进来之后即确认到货，订单状态变为待入库，并生成待入库订单，（确认商品和货物对不对的上），确认无误之后则入库存对应商品库存则增加。</span><br><span class="line">入库后告诉用户，用户发起是否可以发货请求，用户发起发货请求，走发货流程</span><br><span class="line">发货单通过邮件发给用户的邮箱，发的内容即为货物信息，涉及支付信息</span><br><span class="line">也有一些不需要支付，走线下弄完了，不需要支付就相当于一个记录功能</span><br><span class="line">用户确认支付，点击按钮进行支付，</span><br><span class="line">付款成功之后，生成渠道订单，发到对应的订单，流程</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">prep</span>  <span class="selector-tag">prepare</span> 预先准备  提前让物流公司发货</span><br><span class="line">用户提一个提货单，物流公司发货，入库，</span><br><span class="line">入库不一样，有两个库存</span><br><span class="line">设计订单，库存两个需要分开</span><br><span class="line"></span><br><span class="line">询价</span><br><span class="line">后台系统里面菜单 有一个</span><br><span class="line">询价</span><br><span class="line">客户发起商品的 询价请求  公司对这个商品进行价格预估，告诉客户</span><br><span class="line"></span><br><span class="line">价格计算</span><br><span class="line">发起提货的时候</span><br><span class="line">价格模板</span><br><span class="line">费用计算模板 业务难点  计算费用</span><br><span class="line">如何设计模板</span><br><span class="line"></span><br><span class="line">直发货流程以及<span class="selector-tag">prepare</span>发货流程</span><br><span class="line">基础数据的增删改查</span><br><span class="line">库存管理，商品管理入库则加商品</span><br><span class="line">客户管理等基础数据，录入这种的</span><br><span class="line">供应商 能够提供商品的一些厂家的基本信息，厂家/供应商可能跟用户挂钩</span><br><span class="line"></span><br><span class="line">产品预添加</span><br><span class="line">发起提货的时候选择一些系统当中的数据</span><br><span class="line"></span><br><span class="line">系统先设定模板，询价的时候可能套用模板计算费用</span><br><span class="line"></span><br><span class="line">管理员列表 <span class="selector-tag">-</span> 维护登录后台账户的 一些巴拉巴拉..</span><br><span class="line">账单<span class="selector-tag">-</span>发邮件出去的<span class="selector-tag">-</span>生成支付的一些信息</span><br><span class="line"></span><br><span class="line">技术方面：我们整个后台，现在是<span class="selector-tag">5</span>个人，</span><br><span class="line">前端<span class="selector-tag">react</span>+阿里框架</span><br><span class="line">后台<span class="selector-tag">springboot</span></span><br><span class="line">数据库<span class="selector-tag">mysql</span></span><br><span class="line"></span><br><span class="line">邮件服务</span><br><span class="line"><span class="selector-tag">-</span> 邮件服务用<span class="selector-tag">mailgun</span>，订单信息，商品信息</span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">CDN</span> 用阿里云的<span class="selector-tag">oss</span> ，用于文件存储</span><br><span class="line"><span class="selector-tag">-</span> 接<span class="selector-tag">Paypal</span>的支付接口（接到邮件账单通知里，到时得研究下）</span><br><span class="line"><span class="selector-tag">-</span> 快递鸟的快递查询接口</span><br><span class="line">商品图片放到阿里云服务器当中的<span class="selector-tag">oss</span>对象存储</span><br><span class="line">上传接口到本地服务器，本地服务器再去传到阿里云的<span class="selector-tag">oss</span>的对象存储</span><br><span class="line"><span class="selector-tag">oss</span>生成网络链接</span><br><span class="line"><span class="selector-tag">paypal</span>支付接入</span><br><span class="line">快递鸟的快递查询</span><br><span class="line"></span><br><span class="line">本地电脑的文件服务器就是一个文件夹</span><br><span class="line"><span class="selector-tag">oss</span>对象存储就相当于是，远程电脑上的一个文件夹</span><br><span class="line">也就是服务器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">整个项目，大概一周的时间做完</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">后台登录接口 </span><br><span class="line">接口名称先确定</span><br><span class="line">先把接口名称确定再写接口</span><br><span class="line"></span><br><span class="line">关税 <span class="selector-tag">-</span> 查询</span><br><span class="line"><span class="selector-tag">swagger2</span>接口访问地址：</span><br><span class="line"><span class="selector-tag">http</span>:<span class="comment">//localhost:8080/swagger-ui.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">后台<span class="selector-tag">UI</span>设计：<span class="selector-tag">https</span>:<span class="comment">//next.modao.cc/app/3a7da83645ba6bea7ac16bb3a3eb9cfb#screen=s20cd83f9b8156312231300</span></span><br><span class="line"></span><br><span class="line">数据库设计规范：</span><br><span class="line"><span class="selector-tag">https</span>:<span class="comment">//choerodon.io/zh/docs/practice-specification-reference/database-design-specification/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">java</span>开发规范：</span><br><span class="line"><span class="selector-tag">https</span>:<span class="comment">//choerodon.io/zh/docs/practice-specification-reference/development/developmen-to-micro-services/</span></span><br><span class="line"></span><br><span class="line">团队管理：</span><br><span class="line"><span class="selector-tag">https</span>:<span class="comment">//www.teambition.com/project/5dd6528d8233030019cdd3a5/analytics</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">git</span>练习：</span><br><span class="line"><span class="selector-tag">https</span>:<span class="comment">//www.jianshu.com/p/59e66364ea6e</span></span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"><span class="selector-tag">http</span>:<span class="comment">//gitlab.yourshares.cn/david/lingo/tree/master</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">领赫<span class="selector-tag">-</span>原型图</span><br><span class="line">导航菜单栏</span><br><span class="line">总览</span><br><span class="line">询价单</span><br><span class="line">直发提货</span><br><span class="line"><span class="selector-tag">Prep</span>提货</span><br><span class="line">入库单</span><br><span class="line">库存管理</span><br><span class="line">发货单</span><br><span class="line">渠道跟进单</span><br><span class="line">卸货清点</span><br><span class="line">客户管理</span><br><span class="line">产品管理</span><br><span class="line">渠道管理</span><br><span class="line">费用计算模板</span><br><span class="line">管理员管理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这里进行估计的时候会比较麻烦，</span><br><span class="line">后台要根据选择的模板，以及当前货物的重量，提交....等信息，</span><br><span class="line">匹配之前模板设置的规则</span><br><span class="line"></span><br><span class="line">单位上，其实费用类型确定了，单位也就确定了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">后台 <span class="selector-tag">-</span> 客户管理</span><br><span class="line">列表 <span class="selector-tag">-</span> 查询所有客户信息 <span class="selector-tag">-</span> 按日期降序排序</span><br><span class="line">恢复 <span class="selector-tag">-</span> 禁用 客户接口</span><br><span class="line">编辑 <span class="selector-tag">-</span> 内容和新增客户内容一样</span><br><span class="line">前端带*为必填</span><br><span class="line">个人信息 <span class="selector-tag">-</span> 客户<span class="selector-tag">ID</span>  后台生成 <span class="selector-tag">-</span> 保证在系统中唯一性</span><br><span class="line">负责业务员 <span class="selector-tag">-</span> 提供接口 <span class="selector-tag">-</span> 后台当中的所有用户 <span class="selector-tag">t_user_info</span> <span class="selector-tag">-</span> 显示业务员所有信息先</span><br><span class="line">获取渠道和亚马逊站点 <span class="selector-tag">-</span> 两种做法 </span><br><span class="line">一种做法是 不要传到前端来，但是前端有后台也有，但是需要统一</span><br><span class="line">这两个数据为基础数据，提前录入进的数据</span><br><span class="line">接口提供这两个信息，可以一个接口给过来</span><br><span class="line">基础数据的查询接口</span><br><span class="line">必须提供一个接口来查询 站点以及亚马逊站点信息 一个接口提供过来</span><br><span class="line">新增，编辑 接口，</span><br><span class="line">区别：编辑的客户编号给后台系统，以及编辑的内容给后台系统</span><br><span class="line"></span><br><span class="line">供应商</span><br><span class="line">国家信息 <span class="selector-tag">-</span> 基础信息 <span class="selector-tag">-</span> 直接存在前端</span><br><span class="line">数据库保存 国家省市<span class="selector-tag">xxx</span>名字</span><br><span class="line">不需要获取国家信息的相关接口，前端写好 <span class="selector-tag">-</span> 字段直接填写国家名称</span><br><span class="line">客户联系人 <span class="selector-tag">-</span> 新增的时候一次性给后台系统</span><br><span class="line">联系人 <span class="selector-tag">maybe</span>为数组 <span class="selector-tag">-</span> <span class="selector-attr">[]</span></span><br><span class="line">编辑有点区别 <span class="selector-tag">-</span> 保存时一次性把数据全给我</span><br><span class="line">联系人 </span><br><span class="line"><span class="selector-tag">1</span>. 存在<span class="selector-tag">id</span>则<span class="selector-tag">update</span>,不存在<span class="selector-tag">id</span>则<span class="selector-tag">insert</span></span><br><span class="line"><span class="selector-tag">2</span>. 将数据全部删除，重新生成</span><br><span class="line"></span><br><span class="line">产品管理</span><br><span class="line">查询所有产品列表</span><br><span class="line">编辑</span><br><span class="line">删除</span><br><span class="line">中台也有产品管理 <span class="selector-tag">-</span> <span class="selector-tag">consumer_id</span></span><br><span class="line">中台只看到自己的产品唯一区别于</span><br><span class="line">只提交一个接口即可，唯一区别在于是否上送<span class="selector-tag">consumer_id</span>参数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">单规格 <span class="selector-tag">-</span>多规格  </span><br><span class="line">黑色衣服 <span class="selector-tag">-</span> 白色衣服 <span class="selector-tag">-</span> 衣服属性</span><br><span class="line">衣服多属性<span class="selector-tag">-</span> 多规格</span><br><span class="line">衣服单属性 <span class="selector-tag">-</span> 单规格</span><br><span class="line"></span><br><span class="line">查询客户接口<span class="selector-tag">-</span> 所有后台的客户 提供接口查询所有客户信息<span class="selector-tag">-</span> 基础信息</span><br><span class="line">查询客户 <span class="selector-tag">-</span> 查询客户的供应商信息 <span class="selector-tag">-</span> 供应商跟客户相关 <span class="selector-tag">-</span> 添加供应商时需要客户</span><br><span class="line">产品类型 <span class="selector-tag">-</span> 前段写死（或者是后台提供产品类型接口以供选择）</span><br><span class="line">是否多规格.....不需要后台提供接口</span><br><span class="line"></span><br><span class="line">产品信息 <span class="selector-tag">-</span> 海关编码</span><br><span class="line">海关信息 <span class="selector-tag">-</span>海关编码</span><br><span class="line">产品单价 <span class="selector-tag">-</span> 海关单价 前段多名称 但是对应的后台数据库当中只有一个字段</span><br><span class="line">应用名称 <span class="selector-tag">-</span> 对应产品表的产品名称</span><br><span class="line"><span class="selector-tag">t_product</span></span><br><span class="line"><span class="selector-tag">t_product_attr</span> 产品属性表</span><br><span class="line"></span><br><span class="line">产品多规格产品</span><br><span class="line">前段处理不一样</span><br><span class="line">相当于提交数组</span><br><span class="line">产品单规格即提交一个数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">渠道管理</span><br><span class="line">查询 <span class="selector-tag">-</span> 删除接口</span><br><span class="line">系统当中的所有渠道</span><br><span class="line">编辑</span><br><span class="line">点开后 <span class="selector-tag">-</span> 系统自动生成渠道代码</span><br><span class="line"><span class="selector-tag">t_channel</span> 主表</span><br><span class="line">国家名字  前端提名字给后台</span><br><span class="line">运输方式 <span class="selector-tag">-</span>选择 <span class="selector-tag">-</span> 查询接口数据在<span class="selector-tag">t_transport_type</span> 写死了</span><br><span class="line"><span class="selector-tag">steps</span>字段对应表 <span class="selector-tag">t_transport_step</span> 表  提前录入  </span><br><span class="line"><span class="selector-tag">t_transport_type</span> 的<span class="selector-tag">steps</span> 关联外键  <span class="selector-tag">t_transport_step</span></span><br><span class="line">走海运 <span class="selector-tag">-</span> 海运步骤</span><br><span class="line">举例  快递<span class="selector-tag">-</span> </span><br><span class="line"><span class="selector-tag">all_status</span>  一个过程经历的状态  基础数据 为功能服务</span><br><span class="line">编辑渠道页面  <span class="selector-tag">-</span>  一次性拿 <span class="selector-tag">-</span></span><br><span class="line"> 运输方式以及相对应的步骤信息传送给前端，两者关联</span><br><span class="line"></span><br><span class="line">步骤当中有许多状态 至于选择哪种状态根据步骤关联</span><br><span class="line">每种状态有触发字段</span><br><span class="line">单<span class="selector-tag">-</span>选择渠道<span class="selector-tag">-</span> 状态及运输的状态 </span><br><span class="line">渠道管理编辑的信息</span><br><span class="line"></span><br><span class="line">渠道编辑要提供基础数据的查询</span><br><span class="line">渠道的主表就是<span class="selector-tag">t_channel</span></span><br><span class="line">渠道可以没有步骤 <span class="selector-tag">t_channel_step</span>当中的记录可以没有</span><br><span class="line">一个步骤可能没有状态，</span><br><span class="line"></span><br><span class="line">应该提供哪些接口出去...</span><br><span class="line">供应商管理相关表：<span class="selector-tag">t_suppier</span>，<span class="selector-tag">t_supplier_connecter</span></span><br><span class="line">渠道管理相关表: </span><br><span class="line"><span class="selector-tag">t_channel</span>, <span class="selector-tag">t_channel_step</span>, <span class="selector-tag">t_channel_step_status</span>, <span class="selector-tag">t_channel_step_status_trigger</span>, <span class="selector-tag">t_transport_step</span>, <span class="selector-tag">t_transport_type</span></span><br><span class="line">产品管理相关表</span><br><span class="line"><span class="selector-tag">t_product</span>, <span class="selector-tag">t_product_atrr</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">管理员和用户角色数据库设计。</span><br><span class="line"><span class="selector-tag">MySQL</span>官网保留关键字：<span class="selector-tag">https</span>:<span class="comment">//dev.mysql.com/doc/refman/5.7/en/keywords.html</span></span><br><span class="line">参照原型图【管理员列表】</span><br><span class="line"></span><br><span class="line">管理员列表</span><br><span class="line">账号</span><br><span class="line">名称</span><br><span class="line">角色</span><br><span class="line">编辑管理员</span><br><span class="line">账号</span><br><span class="line">角色</span><br><span class="line">名称</span><br><span class="line">登录密码</span><br><span class="line">重复密码</span><br><span class="line">角色管理</span><br><span class="line">角色名称</span><br><span class="line">编辑角色</span><br><span class="line">角色名称</span><br><span class="line">权限设置</span><br><span class="line">页面权限</span><br><span class="line">操作权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">本数据库设计规范是以   <span class="selector-tag">MySQL</span>数据库    为基准，</span><br><span class="line">主要分为四个部分，</span><br><span class="line">即 建表规约、索引规约、<span class="selector-tag">SQL</span>语句和<span class="selector-tag">ORM</span>映射。</span><br><span class="line"></span><br><span class="line">其中，将阐述在建表过程中的要求和约定，</span><br><span class="line">例如   数据库名称、表名称、视图名称  以及  表别名使用  等，</span><br><span class="line">最后还将描述如何在<span class="selector-tag">ORM</span>中进行数据库表映射等。</span><br><span class="line"></span><br><span class="line">此规范是   <span class="selector-tag">Choerodon</span>  社区在研发和实施的过程中经验的总结，</span><br><span class="line">希望能够给广大读者提供一个参考和借鉴，</span><br><span class="line">俗话说，“百密一疏”，其中如有不正确的地方，烦请不吝指正。</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Note</span>：如若使用<span class="selector-tag">Choerodon</span>猪齿鱼微服务开发框架，强烈建议参考使用此规范，</span><br><span class="line">这样可以保持与开发框架数据库设计规范的一致性。</span><br><span class="line"></span><br><span class="line">建表规约</span><br><span class="line">强制要求</span><br><span class="line"><span class="selector-tag">1</span>. </span><br><span class="line">表达   是/否  概念的字段，必须使用   <span class="selector-tag">is_xxx</span>  的方式命名，</span><br><span class="line">数据类型是   <span class="selector-tag">unsigned</span> <span class="selector-tag">tinyint</span>(<span class="number">1</span>  表示是，<span class="number">0</span>   表示否)。</span><br><span class="line">说明：任何字段如果为非负数，必须是   <span class="selector-tag">unsigned</span>。</span><br><span class="line">正例：表达逻辑删除的字段名 <span class="selector-tag">is_deleted</span>，<span class="selector-tag">1</span>表示删除，<span class="selector-tag">0</span>表示未删除。</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">2</span>.</span><br><span class="line">表名、字段名     必须使用   小写字母或数字，</span><br><span class="line">禁止出现数字开头，</span><br><span class="line">禁止两个下划线中间只出现数字。</span><br><span class="line">说明：<span class="selector-tag">MySQL</span>在<span class="selector-tag">Windows</span>下不区分大小写，但是在<span class="selector-tag">Linux</span>下默认是区分大小写。</span><br><span class="line">因此，数据库名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。</span><br><span class="line">正例：<span class="selector-tag">hap_admin</span>,<span class="selector-tag">rdc_config</span>,<span class="selector-tag">level3_name</span></span><br><span class="line">反例：<span class="selector-tag">HapAdmin</span>,<span class="selector-tag">rdcConfig</span>,<span class="selector-tag">level_3_name</span>  </span><br><span class="line">（数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑）</span><br><span class="line"><span class="selector-tag">3</span>.</span><br><span class="line">表名  不使用  复数名词。</span><br><span class="line">说明：表名  应该仅仅表示表里面的    实体内容，不应该表示   实体数量，</span><br><span class="line">对应于<span class="selector-tag">DO</span>类名也是单数形式，符合表达习惯。</span><br><span class="line"><span class="selector-tag">4</span>. </span><br><span class="line">禁用保留字</span><br><span class="line">如  <span class="selector-tag">desc</span>、<span class="selector-tag">range</span>、<span class="selector-tag">match</span>、<span class="selector-tag">delayed</span>等，请参考<span class="selector-tag">MySQL</span>官方保留字。</span><br><span class="line"><span class="selector-tag">5</span>.</span><br><span class="line">主键索引名为  <span class="selector-tag">pk_</span>字段名；</span><br><span class="line">唯一索引名为  <span class="selector-tag">uk_</span>字段名；</span><br><span class="line">普通索引名则为  <span class="selector-tag">idx_</span>字段名。</span><br><span class="line">说明：<span class="selector-tag">pk_</span>  即  <span class="selector-tag">primary_key</span>;  <span class="selector-tag">uk_</span> 即  <span class="selector-tag">unique_key</span>;  <span class="selector-tag">idx</span>  即  <span class="selector-tag">index</span></span><br><span class="line"><span class="selector-tag">6</span>.</span><br><span class="line">小数类型为  <span class="selector-tag">decimal</span>，禁止使用   <span class="selector-tag">float</span> 和  <span class="selector-tag">double</span>;</span><br><span class="line">说明：<span class="selector-tag">float</span>  和  <span class="selector-tag">double</span>在存储的时候，</span><br><span class="line">存在精度损失的问题，很可能在值的比较时，得到不正确的结果。</span><br><span class="line">如果存储的数据范围超过  <span class="selector-tag">decimal</span>  的范围，建议将数据拆成整数和小数分开存储。</span><br><span class="line"><span class="selector-tag">7</span>. </span><br><span class="line">如果存储的字符串长度几乎相等，使用   <span class="selector-tag">char</span>  定长字符串类型。</span><br><span class="line"><span class="selector-tag">8</span>.</span><br><span class="line"><span class="selector-tag">varchar</span>  是可变长字符串，不预先分配存储空间，长度不要超过<span class="selector-tag">5000</span>，</span><br><span class="line">如果存储长度大于此值，定义字段类型为<span class="selector-tag">text</span>,独立出来一张表，</span><br><span class="line">用主键来对应，避免影响其他字段索引效率。</span><br><span class="line">说明：该表的命名以  原表名<span class="selector-tag">_</span>字段缩写  的格式命名。</span><br><span class="line"><span class="selector-tag">9</span>.</span><br><span class="line">表必备字段：</span><br><span class="line"><span class="selector-tag">id</span> , </span><br><span class="line"><span class="selector-tag">create_date</span> , </span><br><span class="line"><span class="selector-tag">last_update_date</span> , </span><br><span class="line"><span class="selector-tag">create_by</span> , </span><br><span class="line"><span class="selector-tag">last_update_by</span> , </span><br><span class="line"><span class="selector-tag">object_version_number</span>。</span><br><span class="line">也可以叫做<span class="selector-tag">who</span>字段，就是每个表里必须具备的字段。</span><br><span class="line">这些字段起到类似<span class="selector-tag">metadata</span>的作用。</span><br><span class="line">这些字段的作用很大，例如，数据分析的时候，可以使用<span class="selector-tag">last_update_date</span>作为数据抽取的时间戳字段。</span><br><span class="line"><span class="selector-tag">id</span> 必为  主键，类型为  <span class="selector-tag">unsigned</span> <span class="selector-tag">bigint</span>、单表时自增、步长为<span class="selector-tag">1</span></span><br><span class="line"><span class="selector-tag">create_date</span> 是此条数据的创建时间，数据类型为  <span class="selector-tag">datetime</span> 类型</span><br><span class="line"><span class="selector-tag">last_update_date</span> 是此条数据的最后更新时间，数据类型为 <span class="selector-tag">datetime</span> 类型</span><br><span class="line"><span class="selector-tag">create_by</span> 是此条数据的创建人，数据类型为  <span class="selector-tag">unsigned</span> <span class="selector-tag">bigint</span>类型</span><br><span class="line"><span class="selector-tag">last_update_by</span> 是此条数据的最后更新人，数据类型为  <span class="selector-tag">unsigned</span> <span class="selector-tag">bigint</span> 类型</span><br><span class="line"><span class="selector-tag">object_version_number</span> 是此条数据的版本号，如果启用数据库数据版本控制，则会使用到次数据</span><br><span class="line">以下是基于<span class="selector-tag">MySQL</span>数据库的创建脚本，可供参考。</span><br><span class="line"><span class="selector-tag">column</span> (<span class="attribute">name</span>:<span class="string">"object_version_number"</span>,   type：<span class="string">"BIGINT UNSIGNED"</span>,  <span class="attribute">defaultValue</span>:<span class="string">"1"</span>)</span><br><span class="line"><span class="selector-tag">column</span> (<span class="attribute">name</span>:<span class="string">"created_by"</span>,  <span class="attribute">type</span>:<span class="string">"BIGINT UNSIGNED"</span>, <span class="attribute">defaultValue</span>:<span class="string">"0"</span>)</span><br><span class="line"><span class="selector-tag">column</span> (<span class="attribute">name</span>:<span class="string">"creation_date"</span>, <span class="string">"type:"</span>DATETIME<span class="string">", defaultValueConputed:"</span>CURRENT_TIMESTAMP")</span><br><span class="line"><span class="selector-tag">column</span>(<span class="attribute">name</span>:<span class="string">"last_update_by"</span>,  <span class="attribute">type</span>:<span class="string">"BIGINT UNSIGNED"</span>,<span class="attribute">defaultValue</span>:<span class="string">"0"</span>)</span><br><span class="line"><span class="selector-tag">column</span>(<span class="attribute">name</span>:<span class="string">"last_update_date"</span>,<span class="attribute">type</span>:<span class="string">"DATETIME"</span>,<span class="attribute">defaultValueConputed</span>:<span class="string">"CURRENT_TIMESTAMP"</span>)</span><br><span class="line"><span class="selector-tag">10</span>.</span><br><span class="line">表的命名最好是加上  业务名称<span class="selector-tag">_</span>表的作用</span><br><span class="line">正例：<span class="selector-tag">kanban_task</span> 、<span class="selector-tag">devops_project</span>、<span class="selector-tag">website_config</span></span><br><span class="line"></span><br><span class="line">推荐规约</span><br><span class="line"><span class="selector-tag">1</span>. 数据库名称  或者  编码 与  应用名称  或者 编码  尽量一致。</span><br><span class="line"><span class="selector-tag">2</span>. 如果 修改字段含义 或者对   字段表示的状态追加时， 需要及时更新字段注释。</span><br><span class="line"><span class="selector-tag">3</span>. 字段允许  适当冗余，（所谓冗余是指   在不同的表里面存储相同的字段），</span><br><span class="line">以提高查询性能，但必须考虑数据一致，</span><br><span class="line">冗余字段应遵循：</span><br><span class="line"> 不是频繁修改的字段</span><br><span class="line">不是 <span class="selector-tag">varchar</span> 超长字段，更不能是<span class="selector-tag">text</span>字段</span><br><span class="line">正例：商品类目名称使用频率高，字段长度短，名称基本一成不变，</span><br><span class="line">可在相关联的表中冗余存储类目名称，避免关联查询。</span><br><span class="line"><span class="selector-tag">4</span>. 单表行数超过  <span class="selector-tag">500</span> 万行或者单表超过 <span class="selector-tag">2</span> <span class="selector-tag">GB</span>，才推荐分库分表。</span><br><span class="line">说明：如果预计三年后的数量根本达不到这个级别，请不要在创建时就分库分表。</span><br><span class="line"></span><br><span class="line">规约参考</span><br><span class="line">合适的字符存储长度，不但节约数据库空间、节约索引存储</span><br><span class="line">更重要的是提升检索速度。</span><br><span class="line">正例：如下表，其中无符号值  可以避免误存 负数，  且扩大了表示范围。</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>领赫</category>
      </categories>
      <tags>
        <tag>领赫</tag>
      </tags>
  </entry>
  <entry>
    <title>心情</title>
    <url>/2020/03/02/%E5%BF%83%E6%83%85/%E5%BF%83%E6%83%854/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Hey, password is required here." /><label>Hey, password is required here.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="eba6423c712fadc1c60a0f4b7007311ecc755bce75d0e3a26af48154d59d5d82">b31f159afd2875e238fd142233ddd138ab0d44113399ddd50e5ab9b91b0c753d14a01c8b3bcab5e08ccf8224732c4c70a840a7308c87103c606a5af5e236c0f6c50ac472a5e1b17c499f9d933266a62042f3de19e4ec423d23aed3c70d366f3c44caa5aaa05849f3da439e9d7fc3ec1666d0549c63d75c5cf681938638c5c3e663f66c9ab216784739d8c5a0464dd40dd2e94520e5f38d69f30abc6c891dc72679be36d493273ee456d11855f26d6e7429e93e849824314265ee3eaa7640af69a5ce0603eef9a03efe5166ec0669a7ed36f3e28ad7c315739a351ca497aeadab1c3b4a0a6b4ee397ae6c40adebffc7f159e596e2e3cf674336b55b7512637728a14e0ffc4bb458904082b6df9694f8044b3912e221635e0e4827e28eaf0272df5ae67dbb3779ebf15b85e152f5b4c53025df49efc1f4d904b82b26913bd1d5ed6278376b880ea9bc09e8e0b16888a4e8da2ea2ba79c473cd33cff39fd32e76b6abd687c69e8e21e2b4a5b77d3567bd869ef8d8f51917c97c6a2f2d2e9a378736afd6c06b91bc58bb106f093c130cccf48a7efc7a77b6050b01437867c0b8584ae3f4e0432c501a2f6101841d63f8a7c7312a923f515f72e2f42edf20380d962a103e6a145405bcb58d6d27bd155ec0e3559e517aced496266bafed8608473e875dd058cfc8b148dc196b2fa84d4846a7aa7543d5f3f24b6db93d791124b759b73a8b49884e0972f37f1ed38ce9dd343c68caebc7c9b24f6d9aff767f59af8be7ee2cdd5468d6f8ecd9c42f2d821191a387a4a522ca3cc33e6e92996be99acd842aeccda0fdefc41480767048f8ee5400e088e64f40357d616d5f94b576a3434877f646a56ab4632b130679a6ac6174010c634d9cc51ac658764fe89149d9c9ba7240216fc9491dc0d09c4e25752ab5be2dcdb7a757e5b204a5adbb2523bae63fed7d6f57db6ed9c6f6597638b1e1b9b665ab6b42fca4ecec9a0a29a96bbe5eb719643012edc6bbca9dfb8d679e2d8b1bb18b8d5c3e866a23f98402f604a3225a02a708271b6adaaddfa5d915a1c907e86b449f959ea2a9e3caf116f78edc95b555522c95885c439ae4074682e95def110b615af352c43d196e0ac4dd412f05806ab0f7fa64445682b9ccf93ce256ebba3924723a1be266e1ff27f56a902a19e49d7a3ff84ec9b5ab6a5c39b7916a604e9f2d6fe35d51a8d2f5abd08797682887ab04bc1400fa1c4df167cfd83c5b54c9f9107beea8266d3fef4e5abf47d1e3ab6c2233ecc51391f9cec03caa7f493a5090a4ff4d83186d3708c81158d97da63456bb73465ef2e81a8c92583f976b18ad898cb2ce36778469f6fefe8b5c905c1eff61570a6b331d18ea2c86b28edc2b72a6b7a1593f971e8321668aeff200a8ba95bf7aa41de3cc6f32f73c22b822e5386c980e73cf4bda6b679de0ac6205aa56d8c4895bda0cd79be75ba6e4b099c682557138057007d098c4c9c7b487315d6a51b7726f772532e8afc66e359c092f51f63138fac029f080784c74cf66b0f9b06b5f07ed7121817f2c912974e19fe9c39320ca2fcdc2430b9187fc50c9b5c1ea0df6b12c739664af07c1f08d6a8c172987649db4c0de3c63ccb6988c73e327ec07c84e4ff5545fbe68001135c3289f03a01465f8abf78f0c0c1786709e9434023882199a2e635f21c14fcf92ff9c1d6da559e4c4d97c46a4978223c5d8151f74936e5e30cd2e6b4b8ad3ea3d944d621d42ab091d8d1e27050416e256ee23b115824b68b4a00d4fd763f6017138d8108ffd64d7cb0acfdb68d9a3f8b502311f53653a0ccd4f64dda5bddaf654354364b29883b937ec92f4eb0e717f5724eef021cb1a640de554b73bd35576b50c634d314e83bd1629df8991144eb576b54ea257952503b79f9edbf40343c7f2de0a3a26397c7d7e3cbf8a86ab2e73fd9ce7f92ed582364de238edd985b5a03158848e329c13872f0a80201b402cfe8cd51d4ca62252bf8e7bb085820406b79b106c605a6ff0532fcb36149c5812653992ad17dd78ffa9530586e87ed52270f1487adbb19e7a16d3e7da09b91daf7cf48ee940fa7ee92c5165f9780e1eff0df30b76f3b4b6021ef3b6032bd3093d0627dbc87f7727c0d444f8bdf3f2f6f84216a15545a195f4ebf86e17e6f7980589d81070a26f107fc5942997c3aac4d8e2c2bdc72a3881d932d4efc2f8e445e2bc6002fc37d7b289066d4473cd932ae6cf184b059878fe0cbbcdd87ca8d107044c0aef47c2f14044c9612bf0e59412eccfac9068ad9fb1d73f13832ac3b498e4d1d64541986a55c9fccfc66268ca143f3c09ba16ed6d60c1f0a925c853203bd0d7a4c69a3f995fb88b82ad39f99594ee9cd3e34b54ebd6c33557ea3f8748bc215902a8638d9ba873af80060e28191e55d63367906ceddc113fdd94c7cb072992640bf30a8c44fe1e1a402d63c9a02cbc4307aaa25891b8de076cb368fff2c796d0cf87fc91943d8ccdbc1610d9c5a1b4c945e4c716a6eafc4bd1f5ec90eee5043bb210a8bc0f1acc6ca49cd10f9c760c91b1644fd3a6bb22ae094d36220e5a5ef06e34a4076414372ea1105672c8239f09dcdfffd162d4443fd437587be9af94c7c02a9add7cf64d2ce12a3d467da295fa4ae340b7d018ddf86355965aafd67159442e886729bbee5f7993bb28cefcabc53c4bf85ae820737af0b2b011b6e9e6d097cec034043199d564d71dc776f8deca9e05f37737e5613619fad785329f1a0147fc4ec7548ad56cab2784b6e841c77608ecee37521131c656c3a4c84c28e79c4b49d97e0336d465d6e9f2af043ab7ae56423297151338da9ba029dd29147448132f192e4e594d670395f093c473e04261e9bbe5dcce87f8c79ee272eb229a9f410331a71cefd94f5df7f8cfe7843eb30f8ea2a27c22b2b6bc0bf4648a60098338a6b81d9b90190d2bb02bb814f2821d7b0a8e122321c908996a0d5d2a61c2f9d42774e15c1fae514b9d13fb0c84cd03245198f11664ab675604873f19e9a335b17c14c0877fff13ca99726a2fc209cef682be7700acf40c8230c1d2bbd9012d25cf58626c59a486094288b1000f801e5cb9b7df3b7ddbed197408fa6979341de0e29f0dfa275ae30a325a2eddd4494f60bd0852f83fa170db98d53f8d68509f4a4cdf6afa3d0596c751c91eeb92a15aaef9245e2c37aec2017d99d7a6b71eb75068cdbefc791625f2cdd9aa75236e0ae2c0c906316423176d8fd2bb25d8b827045f635409</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>KING服务</title>
    <url>/2020/03/01/%E4%BF%A1666/KING%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="KING服务"><a href="#KING服务" class="headerlink" title="KING服务"></a>KING服务</h2><p>该服务主要应用于信666的android与ios、h5后台以及后台管理平台所提供的服务；<br>主要有：  </p>
<ul>
<li>apiservice<ul>
<li>configure<ul>
<li>swagger2 前后台的交互文档</li>
<li>WebMVCConfigurer WebMVC的配置</li>
</ul>
</li>
<li>controller<ul>
<li>IncomeController 提供进件接口层</li>
<li>KayouIncomeController 卡友进件接口层</li>
<li>MerchQueryController 商户信息相关查询接口层主要应用于前端ios以及android、h5等</li>
<li>MposController 主要是用于Mpos刷卡相关接口</li>
<li>PartnerController 合作代理商等相关接口</li>
<li>PlanController 余额规划、全额规划等相关接口</li>
<li>RegisterController 前端Vuejs用户注册方面的相关接口</li>
<li>TradeController 交易接口</li>
<li>WebController Web端的接口</li>
<li>WeixinController 微信公众号关注等相关接口</li>
</ul>
</li>
<li>enums<ul>
<li>MerchlevelEnum 商户登记枚举</li>
<li>MerchStatusEnum 商户状态枚举</li>
<li>SmsTypeEnum 商户注册、商户修改密码、商户规划不同状态通知等短信类型枚举</li>
</ul>
</li>
<li>exception<ul>
<li>RegisterException 注册相关异常</li>
</ul>
</li>
<li>model<ul>
<li>BankCardResult 银行卡绑卡结果model</li>
<li>BaseResult 返回给前端基本的model</li>
<li>CarResult 绑卡model</li>
<li>ContactBean 相关Bean</li>
<li>DeviceInfo 位置信息model</li>
<li>FaceResult 人脸识别model</li>
<li>GetKayouIncomeResult 获取卡友进件结果</li>
<li>GetKayouOrderResult 获取卡友订单结果</li>
<li>IdCardResults 身份证识别结果model</li>
<li>KayouIncomeCallback 卡友进件回调</li>
<li>KayouIncomeResult 卡友进件结果model</li>
<li>KayouUnbindTermIdResult 卡友未绑卡…结果model</li>
<li>PhotoBean 图片等Bean</li>
<li>PlanBean 规划Bean</li>
<li>PosBean  Mpos等Bean</li>
<li>RequestBean 前端请求Bean</li>
<li>WeChatBean 微信Bean</li>
</ul>
</li>
<li>service<ul>
<li>IncomeService 进件服务</li>
<li>KayouIncomeService 卡友进件服务</li>
<li>MerchQueryService 商户查询服务</li>
<li>MposService Mpos服务</li>
<li>PartnerService 合作商代理商等服务</li>
<li>PlanService 规划服务</li>
<li>RegisterService 注册服务</li>
<li>ReportService 报表服务</li>
<li>TradeService 交易服务</li>
<li>WebService Web服务</li>
<li>WechatService 微信服务</li>
</ul>
</li>
<li>tool<ul>
<li>BaiduAip 人脸识别、图片识别等认证服务</li>
<li>JGPush 极光推送，用于android、ios端的消息推送</li>
</ul>
</li>
<li>utils<ul>
<li>ImagesUtils 图片工具类用于上传图片等</li>
<li>JwtTokenUtil 用于前端用户登录超时等；token令牌</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="king-apiservice"><a href="#king-apiservice" class="headerlink" title="king-apiservice"></a>king-apiservice</h3><h3 id="king-cardmanager"><a href="#king-cardmanager" class="headerlink" title="king-cardmanager"></a>king-cardmanager</h3><h3 id="king-channel"><a href="#king-channel" class="headerlink" title="king-channel"></a>king-channel</h3><h3 id="king-common"><a href="#king-common" class="headerlink" title="king-common"></a>king-common</h3><h3 id="king-entity"><a href="#king-entity" class="headerlink" title="king-entity"></a>king-entity</h3><h3 id="king-operation"><a href="#king-operation" class="headerlink" title="king-operation"></a>king-operation</h3><h3 id="king-pay"><a href="#king-pay" class="headerlink" title="king-pay"></a>king-pay</h3><h3 id="king-service"><a href="#king-service" class="headerlink" title="king-service"></a>king-service</h3><h3 id="king-timer"><a href="#king-timer" class="headerlink" title="king-timer"></a>king-timer</h3><h3 id="king-web"><a href="#king-web" class="headerlink" title="king-web"></a>king-web</h3>]]></content>
      <categories>
        <category>信666</category>
      </categories>
      <tags>
        <tag>信666</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins</title>
    <url>/2020/03/01/%E9%A2%86%E8%B5%AB/%E6%B8%A0%E9%81%93%E8%B7%9F%E8%BF%9B%E5%8D%95%E5%8D%B8%E8%B4%A7%E6%B8%85%E5%8D%95/</url>
    <content><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>/var/log/jenkins/jenkins.log  这个是jenkins日志</p>
<p>它把磁盘撑爆了，你看下能否修改一下jenkins</p>
<p>这个系统，里面有2个物理盘， 系统在40G这个盘，/root/data下面挂载了一个200G的盘，数据库存在这个地方。但是jenkins装载系统盘，所以把40G的系统盘撑爆了</p>
<p>这里稍微和你普及一下linux文件系统。linux系统的开始的几个目录名称，安装的时候确定好了，且安装完成之后，这些目录都指向系统磁盘分区的磁盘空间。比如最开始有个目录 /var ,它所在位置是系统安装时候的盘。linux如果要加一个硬盘到系统，就是把磁盘分区之后挂载某个目录下。如果你加个磁盘分区，并把它挂载/var目录下，那么/var就指向新的磁盘空间了。原来系统盘/var这个目录你就无法访问了，当然/var目录还是在，如果你卸载/var目录这个磁盘，那么又回到了系统磁盘分区的/var</p>
<p>jenkins root账号密码是liukai2009</p>
]]></content>
      <categories>
        <category>领赫</category>
      </categories>
      <tags>
        <tag>领赫</tag>
      </tags>
  </entry>
  <entry>
    <title>账单样式</title>
    <url>/2020/02/26/%E9%A2%86%E8%B5%AB/%E8%B4%A6%E5%8D%95/</url>
    <content><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>今天突然觉得内心十分惶恐不安。<br>实在是太茫然了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-class">.right</span>&#123;</span></span><br><span class="line">				text-align: right;</span><br><span class="line">				font-size: 10px;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.indent</span>&#123;</span></span><br><span class="line">				text-indent: 180px;</span><br><span class="line">				font-size: 10px;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.widd</span>&#123;</span></span><br><span class="line">				width: 230px;</span><br><span class="line">				font-size: 10px;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.centt</span>&#123;</span></span><br><span class="line">				text-align: center;</span><br><span class="line">				font-size: 10px;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.bolder</span>&#123;</span></span><br><span class="line">				font-size: 10px;</span><br><span class="line">				font-weight: bolder;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.ant-btn-red</span> &#123;</span></span><br><span class="line"><span class="css">			    <span class="selector-tag">color</span>: <span class="selector-id">#FFF</span>;</span></span><br><span class="line"><span class="css">			    <span class="selector-tag">background-color</span>: <span class="selector-id">#FF5A44</span>;</span></span><br><span class="line"><span class="css">			    <span class="selector-tag">border-color</span>: <span class="selector-id">#FF5A44</span>;</span></span><br><span class="line"><span class="css">			    <span class="selector-tag">text-shadow</span>: 0 <span class="selector-tag">-1px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.12</span>);</span></span><br><span class="line"><span class="css">			    <span class="selector-tag">-webkit-box-shadow</span>: 0 2<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.045</span>);</span></span><br><span class="line"><span class="css">			    <span class="selector-tag">box-shadow</span>: 0 2<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.045</span>);</span></span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line"><span class="css"><span class="selector-class">.ant-btn</span> &#123;</span></span><br><span class="line"><span class="css">			    <span class="selector-tag">line-height</span>: 2<span class="selector-class">.2</span>;</span></span><br><span class="line">			    position: relative;</span><br><span class="line">			    display: inline-block;</span><br><span class="line">			    font-weight: 400;</span><br><span class="line">			    white-space: nowrap;</span><br><span class="line">			    text-align: center;</span><br><span class="line">			    background-image: none;</span><br><span class="line">			    border: 1px solid transparent;</span><br><span class="line"><span class="css">			    <span class="selector-tag">-webkit-box-shadow</span>: 0 2<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.015</span>);</span></span><br><span class="line"><span class="css">			    <span class="selector-tag">box-shadow</span>: 0 2<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.015</span>);</span></span><br><span class="line">			    cursor: pointer;</span><br><span class="line"><span class="css">			    <span class="selector-tag">-webkit-transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.3s</span> <span class="selector-tag">cubic-bezier</span>(<span class="selector-class">.645</span>, <span class="selector-class">.045</span>, <span class="selector-class">.355</span>, 1);</span></span><br><span class="line"><span class="css">			    <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.3s</span> <span class="selector-tag">cubic-bezier</span>(<span class="selector-class">.645</span>, <span class="selector-class">.045</span>, <span class="selector-class">.355</span>, 1);</span></span><br><span class="line">			    -webkit-user-select: none;</span><br><span class="line">			    -moz-user-select: none;</span><br><span class="line">			    -ms-user-select: none;</span><br><span class="line">			    user-select: none;</span><br><span class="line">			    -ms-touch-action: manipulation;</span><br><span class="line">			    touch-action: manipulation;</span><br><span class="line">			    height: 32px;</span><br><span class="line">			    padding: 0 15px;</span><br><span class="line">			    font-size: 14px;</span><br><span class="line">			    border-radius: 4px;</span><br><span class="line"><span class="css">			    <span class="selector-tag">color</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.65</span>);</span></span><br><span class="line"><span class="css">			    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">			    <span class="selector-tag">border-color</span>: <span class="selector-id">#d9d9d9</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.font</span>&#123;<span class="attribute">font-size</span>: <span class="number">10px</span>;&#125;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"650px"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">style</span>=<span class="string">"background-color: white;margin: auto; font-family:'Microsoft YaHei';"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 25px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 50px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"120px"</span> <span class="attr">height</span>=<span class="string">"25px"</span> <span class="attr">src</span>=<span class="string">"http://fba-srm.oss-cn-hongkong.aliyuncs.com/202002241734417550微信图片_20200224173432.png"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="comment">&lt;!--FBABEE--&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">style</span>=<span class="string">"text-align: right;font-size: 25px;font-weight: bold;"</span> &gt;</span>INVOICE<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 2px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>Shenzhen Linkhub Supply-Chain Management Co.LTD<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"font-size: 10px;text-align: right;font-weight: bolder;"</span>&gt;</span>Invoince ID<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"font-size: 10px;text-align: right;"</span>&gt;</span>1904193751<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>Add:302,Building D,New Retail Tech Industrial Zoon<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"font-size: 10px;text-align: right;font-weight: bolder;"</span>&gt;</span>FBA ID<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"font-size: 10px;text-align: right;"</span>&gt;</span>XXXXXXX<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>GUshu,Xixiang Street,Bao'An,518000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"font-size: 10px;text-align: right;font-weight: bolder;"</span>&gt;</span>Date Issued<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"font-size: 10px;text-align: right;"</span>&gt;</span>2019/05/02<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>Guangdong Province,China<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"font-size: 10px;text-align: right;font-weight: bolder;"</span>&gt;</span>Due Date<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"font-size: 10px;text-align: right;"</span>&gt;</span>2019/05/02<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 30px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>Bill to<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>Ship to<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 2px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>公司名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>24300 Nandina Ave,Moreno Valley,CA,<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>公司地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>92551,United States<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 30px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>Items Description<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 2px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>费用集合一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"bolder indent"</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>Rate<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"centt bolder"</span>&gt;</span>Quantity<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right bolder"</span>&gt;</span>Amount<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 2px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>固定费用<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"indent"</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"centt"</span>&gt;</span>x 10 <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>$ 10.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>快递取件费用<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"indent"</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>0/kg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"centt"</span>&gt;</span>x 121kg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>$ 0.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>关税<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"indent"</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"centt"</span>&gt;</span>x 1331 <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>$ 0.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>重量变动费用<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"indent"</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>8/kg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"centt"</span>&gt;</span>x 121kg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>$ 968.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 2px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"1"</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>偏远地区配送附加费<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 2px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>偏远地区配送附加费<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"indent"</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>90/kg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"centt"</span>&gt;</span>x 121kg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>$ 10890.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 2px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>Total<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right bolder"</span>&gt;</span>$ 11868.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 30px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>Bank Infomation<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 2px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width: 100px;"</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>Paypal Account<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"widd"</span>&gt;</span>Palpal@fbabee.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>Payoneer Account<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"widd"</span>&gt;</span>fsn2915324940@163.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"bolder"</span>&gt;</span>T/T<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"widd"</span>&gt;</span>银行账号信息，暂时明确不了<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 80px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"height: 30px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin:0 auto;width:200px;"</span>&gt;</span> </span><br><span class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">class</span>=<span class="string">"ant-btn-red ant-btn"</span> <span class="attr">style</span>=<span class="string">" text-decoration: none;"</span>&gt;</span>PayPal确认支付<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span> 					</span><br><span class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>领赫</category>
      </categories>
      <tags>
        <tag>领赫</tag>
      </tags>
  </entry>
  <entry>
    <title>分页</title>
    <url>/2020/02/26/%E9%9D%A2%E8%AF%95/%E5%88%86%E9%A1%B5/</url>
    <content><![CDATA[<p>这个是很久很久之前做的个人理解。  </p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">webRoot 文件夹中放.jsp文件(index.jsp/show.jsp)/images文件夹/WEB-INF 文件夹</span><br><span class="line">lib文件夹中放.jar文件(mysql.jar)</span><br><span class="line">WEB-INF 文件夹当中放置.xml文件(web.xml)/lib文件夹(.xml文件与lib文件夹同级)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">工程名\WebRoot\index.jsp</span><br><span class="line"></span><br><span class="line">index.jsp</span><br><span class="line"></span><br><span class="line">&lt;%@ page language="java" import="java.util.<span class="strong">*" pageEncoding="UTF-8" %&gt;</span></span><br><span class="line"><span class="strong">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="strong">/*</span></span><br><span class="line">JSP页面元素：指令[以"&lt;%@"开始，以"%&gt;"]</span><br><span class="line"></span><br><span class="line">将该index.jsp文件放置到浏览器当中去，让浏览器按照指令中的内容去完成</span><br><span class="line">page 页面指令 language 语言是Java语言 import 导入的是Java工程中的util包中的<span class="strong">*所有类 pageEncoding 页面编码为UTF-8</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">JSP页面元素</span></span><br><span class="line"><span class="strong">静态内容 HTMl静态文本/CSS/图片/JS</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">指令 以"&lt;%@"开始，以"%&gt;"结束</span></span><br><span class="line"><span class="strong">				举例：&lt;%@ page language="java" import="java.util.*</span>" pageEncoding="UTF-8" %&gt;</span><br><span class="line"><span class="code">					page 页面指令 language 语言是Java语言 import 导入的是Java工程中的util包中的*所有类 pageEncoding 页面编码为UTF-8</span></span><br><span class="line"></span><br><span class="line">表达式 "&lt;%=Java表达式%&gt;"  //将查询到的内容 在界面/客户端/浏览器网页上进行输出</span><br><span class="line"><span class="code">				举例：&lt;%=info.getUsername()%&gt;&lt;%=info.getPassword()%&gt;</span></span><br><span class="line">小脚本 "&lt;% java代码 %&gt;"</span><br><span class="line">声明 "&lt;%! 函数或者是方法%&gt;"</span><br><span class="line"></span><br><span class="line">动作 以"&lt;jsp:动作名"开始,以"&lt;/jsp:动作名&gt;"结束</span><br><span class="line"></span><br><span class="line">注释 "&lt;!--注释内容，客户端可以进行查看得到 --&gt;"</span><br><span class="line"><span class="code">	"&lt;%--注释内容，但客户端无法查看得到--&gt;"</span></span><br><span class="line"></span><br><span class="line">注意：当前的jsp页面中原本默认的编码方式是ISO-8859-1；</span><br><span class="line"><span class="code">	然而浏览器中的编码方式为UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="code">	如果以当前页中的原本的编码方式，也就是ISO-8859-1的编码方式进行在当前的jsp页面进行编码，</span></span><br><span class="line"><span class="code">	那么传送到浏览器当中去的内容将是以ISO-8859-1的编码形式的内容传送过去，</span></span><br><span class="line"><span class="code">	但浏览器当中的编码方式是UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="code">	相当于jsp页面当中是写的韩文，然而浏览器当中只认识中文，</span></span><br><span class="line"><span class="code">	所以当浏览器接受该jsp文件时就会将韩文看作是中文，以中文来对待</span></span><br><span class="line"><span class="code">	浏览器是看不懂韩文的，所以会就会发生翻译上的偏差，也就是出现乱码</span></span><br><span class="line"><span class="code">	也就是当两种编码方式不一致的时候，就会出现乱码的情况</span></span><br><span class="line"></span><br><span class="line"><span class="code">	所以在指令中就需要将该jsp页面的页面编码方式该为与浏览器当中一样的编码方式</span></span><br><span class="line"><span class="code">	这样以中文编码的形式传送过去的内容，这时候浏览器就能够识别jsp页面中所写的内容，以中文的编码方式来认识中文</span></span><br><span class="line"><span class="code">	这样就不会出现乱码的情况</span></span><br><span class="line"><span class="code">	也就是说当两种编码方式一致的时候，就不会出现乱码的情况</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">	还有两种方式可以进行编码操作：request.setCharacterEncoding("UTF-8");</span></span><br><span class="line"><span class="code">					response.setContentType("text/html;charset=utf-8");</span></span><br><span class="line"></span><br><span class="line">page n.一页；专栏；一张；事件；网页；vi.翻书；vt.标记…的页码</span><br><span class="line">language n.语言，语言文字，表达方式</span><br><span class="line">import v.进口，输入 n.进口，输入</span><br><span class="line">encoding n.编码</span><br><span class="line"></span><br><span class="line"><span class="strong">*/</span></span><br><span class="line"><span class="strong">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="strong">&lt;jsp:forward page="user.do?method=fenye"&gt;&lt;/jsp:forward&gt;</span></span><br><span class="line"><span class="strong">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="strong">/*</span> </span><br><span class="line">JSP页面元素：动作[以"&lt;jsp:动作名"开始，以"&lt;/jsp:动作名&gt;"结束]</span><br><span class="line"></span><br><span class="line">联想：jsp:forward 当前的jsp页面发生了一个动作也就是页面的前进，也就是相当于跳转到另外一个界面中去</span><br><span class="line"><span class="code">	page="user.do?method=fenye" 跳转到的指定的页面,该指定的页面是user.do,也就是去到UserServlet.java的这个界面</span></span><br><span class="line"><span class="code">					且传递了一个参数，传递参数的格式是在跳转到指定的页面后(user.do)后面添加一个问号？，</span></span><br><span class="line"><span class="code">					？问号后面就写具体要传递的参数名称(method)以及参数值(fenye)</span></span><br><span class="line"><span class="code">					</span></span><br><span class="line"><span class="code">					传递参数的原因：当客户端向服务器发起一个请求，</span></span><br><span class="line"><span class="code">							就像相当于有一个用户向qq发起一个请求一样</span></span><br><span class="line"><span class="code">							有可能该用户需要进行的是登陆操作(也就是到数据库当中去进行查询看有没有与之一样的账户，密码，若有则进行登陆；若没有，则有可能是账户或密码错误或者是该用户被禁用又或者是该用户根本没有注册过)</span></span><br><span class="line"><span class="code">							也有可能用户需要进行的是注册操作(也就是到新增一条记录[账户，密码]到数据库去)</span></span><br><span class="line"><span class="code">							也有可能用户需要进行的是修改信息操作</span></span><br><span class="line"><span class="code">							也有可能用户需要进行的是注销操作(也就是到数据库当中将该用户进行删除操作)</span></span><br><span class="line"><span class="code">							</span></span><br><span class="line"><span class="code">							那么如何知道该用户到底需要进行的是什么操作？</span></span><br><span class="line"><span class="code">							因此，此时就传递一个参数(method=fenye)过来,告诉服务器，</span></span><br><span class="line"><span class="code">							客户端也就是该用户到底想要干什么</span></span><br><span class="line"><span class="code">							想要干什么，就传递一个参数过来，告诉服务器，</span></span><br><span class="line"><span class="code">							然后服务器就根据这个参数做出相应的判断，</span></span><br><span class="line"><span class="code">							判断完成之后，</span></span><br><span class="line"><span class="code">							就执行登陆(查询)操作/注册(新增)操作/修改(修改)信息操作/注销(删除)操作</span></span><br><span class="line"><span class="code">							</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">					UserServlet.java是一个servlet/servlet在现在指的就是UserServlet.java</span></span><br><span class="line"><span class="code">					(Servlet的步骤：</span></span><br><span class="line"><span class="code">							1.写一个Java类(该UserServlet.java即为一个servlet)</span></span><br><span class="line"><span class="code">							2.在该.java类中也就是UserServlet.java类中</span></span><br><span class="line"><span class="code">							实现一个Servlet接口(implements Servlet)/继承一个HttpServlet类(extends HttpServlet)</span></span><br><span class="line"></span><br><span class="line"><span class="code">							实现(implements)Servlet接口和继承(extends)HttpServlet类有所不同</span></span><br><span class="line"><span class="code">								1'当采取的是实现Servlet这个接口时（implements Serevlet),</span></span><br><span class="line"><span class="code">								该java类也就是UserServlet.java相当于变成了一个实现类</span></span><br><span class="line"><span class="code">								该实现类UserServlet.java就将会自动的去重写Servlet接口当中的所有方法</span></span><br><span class="line"><span class="code">								也就是说有些方法不管需不需要被用到，都会进行重写，</span></span><br><span class="line"><span class="code">								也就是说多了很多不必要的操作</span></span><br><span class="line"><span class="code">								2'当采取的是继承HttpServlet这个类是(extends HttpServlet)</span></span><br><span class="line"><span class="code">								也就是说此时的HttpServlet.java相当于UserServlet.java该类的父类</span></span><br><span class="line"><span class="code">								这个时候子类继承父类，</span></span><br><span class="line"><span class="code">								就不会像实现类实现接口中的一样，自动重写接口当中全部的方法</span></span><br><span class="line"><span class="code">								而是可以进行有所选择性的去重写方法</span></span><br><span class="line"><span class="code">								需要父类当中的XX()方法，就对该方法进行重写即可</span></span><br><span class="line"></span><br><span class="line"><span class="code">							3.注册和映射</span></span><br><span class="line"><span class="code">							也就是web.xml文件中进行操作，</span></span><br><span class="line"><span class="code">							有多少个servlet文件就需要写多少个注册和映射，</span></span><br><span class="line"><span class="code">							因为每个servlet的.java文件不同，其访问方式也就不同</span></span><br><span class="line"></span><br><span class="line"><span class="code">							&lt;!--注册--&gt;</span></span><br><span class="line"><span class="code">							&lt;servlet&gt;</span></span><br><span class="line"><span class="code">							&lt;servlet-name&gt;UserServlet&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="code">							&lt;servlet-class&gt;com.servlet.UserServlet&lt;/servlet-class&gt;</span></span><br><span class="line"><span class="code">                                                        &lt;/servlet&gt;</span></span><br><span class="line"><span class="code">							&lt;!--映射--&gt;</span></span><br><span class="line"><span class="code">							&lt;servlet-mapping&gt;</span></span><br><span class="line"><span class="code">							&lt;servlet-name&gt;UserServlet&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="code">							&lt;url-pattern&gt;/user.do&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="code">							&lt;/servlet-mapping&gt;</span></span><br><span class="line"><span class="code">							/*</span></span><br><span class="line"><span class="code">							注册：</span></span><br><span class="line"><span class="code">							&lt;servlet-name&gt;&lt;/servlet-name&gt;：servlet的名字</span></span><br><span class="line"><span class="code">											servlet步骤中的第一个中讲到：写一个.java类,</span></span><br><span class="line"><span class="code">											也就是说该.java类就是servlet，</span></span><br><span class="line"><span class="code">											所以.java类的名称也就是servlet的名称(UserServlet.java)</span></span><br><span class="line"><span class="code">							&lt;servlet-class&gt;&lt;/servlet-class&gt;:指定是哪一个.java类是servlet</span></span><br><span class="line"><span class="code">											servlet所在java当中的的具体的地址(全类名)[class 类]</span></span><br><span class="line"><span class="code">											servlet相当于.java类也就是UserServlet.java类</span></span><br><span class="line"><span class="code">											也就是在问UserServlet.java类在具体哪一个地方</span></span><br><span class="line"><span class="code">											com.servlet.UserServlet</span></span><br><span class="line"><span class="code">											com.servlet是一个自己创建的一个包</span></span><br><span class="line"><span class="code">											UserServlet是一个自己写的java类，也就是servlet</span></span><br><span class="line"><span class="code">											包名+类名=全类名</span></span><br><span class="line"><span class="code">							映射：</span></span><br><span class="line"><span class="code">							&lt;servlet-name&gt;&lt;/servlet-name&gt;:servlet的名字</span></span><br><span class="line"><span class="code">							&lt;url-pattern&gt;&lt;/url-pattern&gt;：相当于是UserServlet.java的一个地址，</span></span><br><span class="line"><span class="code">											只不过该地址是放在网页上的以供被打开这个文件</span></span><br><span class="line"><span class="code">											也就是同样还是在网页上去搜寻的还是UserServlet.java这个文件，</span></span><br><span class="line"><span class="code">											但后缀名以及名称变了，名称可变可不变</span></span><br><span class="line"><span class="code">											内容却还是那个.java文件</span></span><br><span class="line"><span class="code">										 	&lt;url-pattern&gt;/user.do&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="code">											"/"和".do"是这个如果.java文件要放在网页上的格式，所必不可少的</span></span><br><span class="line"><span class="code">											user.do和UserServlet.java指的是同一个文件</span></span><br><span class="line"><span class="code">											只是UserServlet.java文件的后缀名的格式变换成了.do，</span></span><br><span class="line"><span class="code">											以及名称换成了user，也可以不改变名称，依旧用UserServlet亦可，那么就变成了UserServlet.do</span></span><br><span class="line"><span class="code">								</span></span><br><span class="line"><span class="code">											书写方式：http://127.0.0.1:8080/工程名(UserServlet.java所在的工程当中)/文件名(user.do)</span></span><br><span class="line"></span><br><span class="line"><span class="code">										  	也就是说在网页当中输入的是哪一个url,哪一个XX.do 说明的是要访问的是&lt;url-pattern&gt;与之对应一样的哪一个servlet文件</span></span><br><span class="line"></span><br><span class="line"><span class="code">										  	在该映射当中，通过url找到该servlet的名字，</span></span><br><span class="line"><span class="code">											再通过servlet的名字找到注册当中的与之对应的一样的servlet名字，</span></span><br><span class="line"><span class="code">											最后在注册当中通过知道了servlet的名字，找到该servlet的类</span></span><br><span class="line"></span><br><span class="line"><span class="code">											流程：网页当中输入的是web.xml文件当中的&lt;url-pattern&gt;&lt;/url-pattern&gt;当中输入的内容</span></span><br><span class="line"><span class="code">                                                                                                                       			    |</span></span><br><span class="line"><span class="code">											     通过该url地址&lt;url-pattern&gt;&lt;/url-pattern&gt;找到映射&lt;servlet-mapping&gt;&lt;/servlet-mapping&gt;</span></span><br><span class="line"><span class="code">																	    |</span></span><br><span class="line"><span class="code">											     找到该映射之后，进行查找映射当中的&lt;servlet-name&gt;&lt;servlet-name&gt;,也就是servlet的名字，也就是.java文件(UserServlet.java)的名字</span></span><br><span class="line"><span class="code">																	    |</span></span><br><span class="line"><span class="code">											     			通过servlet的名字找到servlet的注册&lt;servlet&gt;&lt;/servlet&gt;</span></span><br><span class="line"><span class="code">																	    |</span></span><br><span class="line"><span class="code">											      找到该注册之后，依据在映射当中的servlet-name,进行查找注册当中的&lt;servlet-name&gt;&lt;/servlet-name&gt;,</span></span><br><span class="line"><span class="code">												(注册和映射当中的&lt;servlet-name&gt;&lt;/servlet-name&gt;需要保持一致，</span></span><br><span class="line"><span class="code">												否则通过url查找到映射，映射当中的servlet的名字name之后，却找不到与之对应servlet名字一样的注册)</span></span><br><span class="line"><span class="code">																	    |</span></span><br><span class="line"><span class="code">												查找的servlet-name所对应的注册之后，再找到该注册当中的&lt;servlet-class&gt;&lt;/servlet-class&gt;,也就是该servlet文件在Java当中的地址(包名+类名)，也就是该.java文件所在的具体地址(全类名)</span></span><br><span class="line"></span><br><span class="line"><span class="code">							*/</span></span><br><span class="line"><span class="code">	 </span></span><br><span class="line">forward adv. 向前，前进；adj.向前的，前部的；进步的 v.转交，转递；n.前锋</span><br><span class="line">mapping 动词map的现在分词形式 n.绘图；[数]映象</span><br><span class="line">map v.测绘，为…绘制地图 n.地图；路线图；天体图</span><br><span class="line">pattern n.模型；典型；图案；方式 vi.形成图案 vt.模仿；用图案装饰</span><br><span class="line">url abbr.Uniform Resource Locator 统一资源定位符 缩写为URL，又叫做网页地址，是互联网上标准的资源的地址(Address)</span><br><span class="line"><span class="code">	互联网上的每一个文件都有一个唯一的一个URL，它包含的信息是指出文件的位置以及浏览器应该怎么处理他</span></span><br><span class="line"><span class="code">	它最初是由蒂姆.伯纳斯-李 发明用来作为万维网的地址的</span></span><br><span class="line"><span class="code">	现在他已经被万维网联盟编制为因特网标准RFC1738了</span></span><br><span class="line"><span class="code">	统一资源定位符的开始，一般会标志着一个计算机网络所使用的网络协议</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">因为index.jsp当中写到一个动作&lt;jsp:forward&gt;,实现当前index.jso页面(page)跳转到user.do界面去，所以需要去到那个界面就写哪一个界面</span><br><span class="line"></span><br><span class="line">工程名\src\com\servlet\UserServlet.java</span><br><span class="line"></span><br><span class="line">UserServlet.java</span><br><span class="line"></span><br><span class="line">package com.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.dao.UserDao;</span><br><span class="line">import com.pojo.UserInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class UserInfo extends HttpServlet&#123;</span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">						/*servlet的三个步骤：1.写一个java类，即该类UserServlet.java即为一个servlet</span></span><br><span class="line"><span class="code">								     2.实现一个Servlet接口(implements Servlet),并进行重写Servlet接口当中的service()方法</span></span><br><span class="line"><span class="code">									/继承HttpServlet类，并同样进行重写HttpServlet父类当中的service()方法</span></span><br><span class="line"><span class="code">									(两者有不同，查上)</span></span><br><span class="line"><span class="code">								     3.注册和映射</span></span><br><span class="line"><span class="code">									可以写一个web.xml文件，自己写UserServlet的注册和映射</span></span><br><span class="line"><span class="code">									也可以采取自带注册和映射的方式</span></span><br><span class="line"><span class="code">									</span></span><br><span class="line"><span class="code">									自带注册和映射的方式</span></span><br><span class="line"><span class="code">									点击com.servlet包，</span></span><br><span class="line"><span class="code">									并右击new一个Servlet文件，</span></span><br><span class="line"><span class="code">									写好servlet的文件名(也就是.java文件的名字)之后，</span></span><br><span class="line"><span class="code">									找到</span></span><br><span class="line"><span class="code">									which method stubs would you like to create?</span></span><br><span class="line"><span class="code">									 Inherited abstract methods     doGet()</span></span><br><span class="line"><span class="code">									 Constructors from superclass   doPost()</span></span><br><span class="line"><span class="code">									 init() and destroy()     	doPut()</span></span><br><span class="line"><span class="code">									 doDelete()			getServletInfo()</span></span><br><span class="line"><span class="code">									将其全部都不要选择勾选</span></span><br><span class="line"></span><br><span class="line"><span class="code">									单击NEXT，</span></span><br><span class="line"><span class="code">									找到</span></span><br><span class="line"><span class="code">									Servlet/JSP Mapping URL：/servlet/类名(servlet的文件，.java的名称)</span></span><br><span class="line"><span class="code">									将/servlet/类名  修改为：/XX.do的格式即可</span></span><br><span class="line"><span class="code">									就完成了servlet的自带注册映射的web.xml文件</span></span><br><span class="line"><span class="code">									最后Finish</span></span><br><span class="line"></span><br><span class="line"><span class="code">									inherited adj. 遗传的(病的)，继承权的，通过继承得到的</span></span><br><span class="line"><span class="code">									abstract adj.抽象的，深奥的； n.摘要</span></span><br><span class="line"><span class="code">									methods 名词method的复数形式 n.方法</span></span><br><span class="line"><span class="code">									method n.办法，方法；秩序，规律</span></span><br><span class="line"><span class="code">									constructors n.构造器</span></span><br><span class="line"><span class="code">									from prep.从…来，来自</span></span><br><span class="line"><span class="code">									super从子类当中调用父类的构造方法</span></span><br><span class="line"><span class="code">									class 类</span></span><br><span class="line"><span class="code">									init abbr.[计]初始化(=initialization)</span></span><br><span class="line"><span class="code">									destroy v.破坏，消灭，毁灭</span></span><br><span class="line"><span class="code">									put v.放，摆；使出于</span></span><br><span class="line"><span class="code">									servlet n.小服务程序</span></span><br><span class="line"><span class="code">									info abbr.信息；情报(=infomation)</span></span><br><span class="line"><span class="code">									override v.推翻；无视；凌驾；超驰控制(使自动控制暂时失效而改用手动控制)；[计算机]覆盖；n.给代理人的佣金；超驰控制装置；推翻	</span></span><br><span class="line"><span class="code">									*/</span></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">	private UserDao userDao = new UserDao();</span></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="code">	/*override 重写service方法(重写Servlet接口当中的service方法/重写HttpServlet父类当中的service方法),</span></span><br><span class="line"><span class="code">	service()方法当中的参数需要进行修改</span></span><br><span class="line"><span class="code">	将service(HttpServletRequest avg0,HttpServletResponse avg1)方法当中的avg0修改为request，当中的avg1修改为response</span></span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">	@Override</span></span><br><span class="line"><span class="code">	protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOExcetion&#123;</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="code">	/* 通过request对象的getParameter("参数名称")方法</span></span><br><span class="line"><span class="code">		获得从index.jsp界面传递过来的参数值(fenye)</span></span><br><span class="line"><span class="code">		且将该参数值赋值给String字符串类型的method，</span></span><br><span class="line"><span class="code">	   	由该参数值让服务器进行判断</span></span><br><span class="line"><span class="code">		判断之后得知用户/客户端到底需要进行一个什么操作</span></span><br><span class="line"><span class="code">		request.getParameter("index.jsp界面中传递的参数名称")：返回的是该参数名称所对应的参数值，也就是fenye</span></span><br><span class="line"><span class="code">	*/</span></span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">		String method = request.getParameter("request");</span></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="code">	/*为什么要进行一个if判断</span></span><br><span class="line"><span class="code">				if(条件)&#123;条件成立所要执行的代码&#125;</span></span><br><span class="line"><span class="code">	客户端向服务器发起一个请求，</span></span><br><span class="line"><span class="code">	服务器是不知道客户端/用户到底要进行一个什么操作的</span></span><br><span class="line"><span class="code">	有可能该用户/客户端要进行一个登陆(查询)操作/修改(修改)操作/注销(删除)操作/注册(新增)操作</span></span><br><span class="line"><span class="code">	所以就有了传递参数，</span></span><br><span class="line"><span class="code">	由该参数告诉服务器，客户端/用户想要做一个什么样的操作</span></span><br><span class="line"><span class="code">	此时接收到参数的服务器就会对传递过来的参数进行判断</span></span><br><span class="line"><span class="code">	[</span></span><br><span class="line"><span class="code">	用.equals()布尔类型Boolean方法进行内容上的比较判断，</span></span><br><span class="line"><span class="code">	true则表示两者一致，也就是说要进行的操作就是这个；</span></span><br><span class="line"><span class="code">	false则表示两者不一致，也就是说要进行的操作不是这个，再进行下一个if()判断，是否为其他操作</span></span><br><span class="line"><span class="code">	]</span></span><br><span class="line"><span class="code">	判断传递过来的到底是一个什么参数</span></span><br><span class="line"><span class="code">	因为存在很多的不同的操作，所以传递过来的参数也就不一致，执行的操作(方法)也就不一致</span></span><br><span class="line"></span><br><span class="line"><span class="code">	如果要进行一个fenye操作(查询操作[查询出的内容以分页的形式显示出来])，</span></span><br><span class="line"><span class="code">	那么传递过来的参数就需要是fenye,</span></span><br><span class="line"><span class="code">	很明显从index.jsp界面传递过来的参数是fenye</span></span><br><span class="line"><span class="code">	那么就执行这一个方法doFenYe(request,response)</span></span><br><span class="line"><span class="code">	那么此时当写出doFenYe(request,response)方法时，是会报错的</span></span><br><span class="line"><span class="code">	因为此时的当前类当中，是没有写这样一个方法的，所以报错</span></span><br><span class="line"><span class="code">	所以此时Ctrl+1或者时Alt+/，</span></span><br><span class="line"><span class="code">	进行自动创建一个这样的方法 </span></span><br><span class="line"><span class="code">	*/</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">		if("fenye".equals(method))&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="code">		doFenYe(request,response);</span></span><br><span class="line"></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">	&#125;</span></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">	/* 分页操作的原理：</span></span><br><span class="line"><span class="code">			举例子</span></span><br><span class="line"><span class="code">				如果淘宝/京东/天猫要进行一次查询用户名以及密码的操作[select usernmae,password from userinfo]</span></span><br><span class="line"><span class="code">				那么到时候查出来的数据将会过于庞大，</span></span><br><span class="line"><span class="code">				更何况数据还要在一张界面当中显示出来，</span></span><br><span class="line"><span class="code">				那么这一张界面极有可能因为数据太过于庞大而被撑爆</span></span><br><span class="line"><span class="code">				</span></span><br><span class="line"><span class="code">				又比方说，如果将一本语文书中的所有内容全部显示在一张A4纸当中，</span></span><br><span class="line"><span class="code">				那么这一张纸当中显示出来一定是密密麻麻的全部都是文字，让人眼花缭乱，就无法快捷的找到自己所需要的内容</span></span><br><span class="line"></span><br><span class="line"><span class="code">				所以就采取了分页的操作，</span></span><br><span class="line"><span class="code">				也就是说语文书是一本书，</span></span><br><span class="line"><span class="code">				一页一页纸张组成的书，每一页当中都有其固定的文条数，也有一个页码数</span></span><br><span class="line"><span class="code">				要哪一页就找哪一页的页码即可</span></span><br><span class="line"><span class="code">				这样既方便找到所需要的内容，也方便页面的整洁，美观，用起来也更加的快捷</span></span><br><span class="line"></span><br><span class="line"><span class="code">				所以分页的操作也就是应用于此，适用于数据量庞大时，就进行分页操作</span></span><br><span class="line"></span><br><span class="line"><span class="code">				现在从数据库当中进行查询得到一结果集，其中的记录有50条，也就是说有50个对象用户</span></span><br><span class="line"></span><br><span class="line"><span class="code">				若每一页指定放置10条记录</span></span><br><span class="line"><span class="code">				那么总共即为 50/10=5页</span></span><br><span class="line"></span><br><span class="line"><span class="code">				若每一页指定放置5条记录</span></span><br><span class="line"><span class="code">				那么总共即为50/5=10页</span></span><br><span class="line"></span><br><span class="line"><span class="code">				若每一页指定放置2条记录</span></span><br><span class="line"><span class="code">				那么总共即为50/2=25页</span></span><br><span class="line"></span><br><span class="line"><span class="code">				所以得出一个结论：</span></span><br><span class="line"><span class="code">				总的记录数是固定的，</span></span><br><span class="line"><span class="code">				但是每一页放置的记录数是可变的</span></span><br><span class="line"><span class="code">				随着每一页放置的记录数变化</span></span><br><span class="line"><span class="code">				最后的总页数是跟着变化的</span></span><br><span class="line"></span><br><span class="line"><span class="code">				然而真正进行操作时，</span></span><br><span class="line"><span class="code">				最主要还是要进行查询操作，也就是说重要的是查询出来的内容</span></span><br><span class="line"><span class="code">				那么如何根据总的记录条数/每一页的条数/以及总页数，来快速的查询找到用户所需要的内容？</span></span><br><span class="line"></span><br><span class="line"><span class="code">				结果集为一个集合</span></span><br><span class="line"><span class="code">				集合当中的记录是从下标为0的记录数开始的</span></span><br><span class="line"><span class="code">				也就是说</span></span><br><span class="line"><span class="code">				现有一结果集，其中总共有50条记录，每一页当中放置5条记录，那么总共有50/5=10页</span></span><br><span class="line"></span><br><span class="line"><span class="code">				那么第一页当中放置的记录数为5条，即1，2，3，4，5</span></span><br><span class="line"><span class="code">				但若以集合的形式来说明有几条记录的话</span></span><br><span class="line"><span class="code">				则下标为0，1，2，3，4的记录就代表着的就是1，2，3，4，5</span></span><br><span class="line"><span class="code">				也就是说第下标为0的记录就是第一条记录</span></span><br><span class="line"><span class="code">				</span></span><br><span class="line"><span class="code">				以下都以下标来表示记录条数</span></span><br><span class="line"><span class="code">				第1页	0，1，2，3，4</span></span><br><span class="line"><span class="code">				第2页	5，6，7，8，9</span></span><br><span class="line"><span class="code">				第3页	10，11，12，13，14</span></span><br><span class="line"><span class="code">				第4页	15，16，17，18，19</span></span><br><span class="line"><span class="code">				……	……</span></span><br><span class="line"><span class="code">				那么能不能说，第下标为0的记录条也就是代表着第1页</span></span><br><span class="line"><span class="code">					      第下标为5的记录条也就是代表者第2页</span></span><br><span class="line"><span class="code">					      第下标为10的记录条也就是代表着第3页</span></span><br><span class="line"><span class="code">					      第下标为10的记录条也就是代表着第4页</span></span><br><span class="line"><span class="code">					      </span></span><br><span class="line"><span class="code">				即通过每一页的第一条记录数的下标数，来知道其所翻到的页数是哪一页</span></span><br><span class="line"><span class="code">				在数据库当中有一个limit</span></span><br><span class="line"><span class="code">				limit n 代表着的是显示n条记录</span></span><br><span class="line"><span class="code">				limit m , n 代表着的是显示从第下标数为m的记录数开始显示，显示n条记录  </span></span><br><span class="line"><span class="code">				那么limit m ，n 就代表了显示页面当中每一页的第一条记录以及每一页要放多少条记录</span></span><br><span class="line"><span class="code">						通过m,也就知道了该页是哪一页</span></span><br><span class="line"></span><br><span class="line"><span class="code">	*/</span></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">	private void doFenYe(HttpServletRequest request,HttpServletResponse response) throws ServletException ,IOException&#123;</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="code">	/*</span></span><br><span class="line"><span class="code">	总页数是依据总的记录条数以及每一页当中要放置多少条记录计算而来的</span></span><br><span class="line"><span class="code">	需要显示的是哪一个页面，以及每一个页面当中放置多少条记录都是可变的，也就是说都是可以被指定的</span></span><br><span class="line"><span class="code">	若客户端/用户指定需要看到哪一个页面，又或者是说指定每一页当中该放多少条记录，都是可以的</span></span><br><span class="line"><span class="code">	同样也是以传递参数的形式传递过来</span></span><br><span class="line"></span><br><span class="line"><span class="code">	在index.jsp传递参数</span></span><br><span class="line"><span class="code">	例如</span></span><br><span class="line"><span class="code">		&lt;jsp:forward page="user.do?method=fenye&amp;page=m&amp;size=n"&gt;&lt;/jsp:forward&gt;</span></span><br><span class="line"><span class="code">	参数与参数用&amp;连接即可</span></span><br><span class="line"></span><br><span class="line"><span class="code">	若用户/客户端未传递参数过来，则采用默认的显示哪一页，以及每一页显示多少条记录，</span></span><br><span class="line"><span class="code">	也就是自己所输入的 int page=1; int size=4;默认显示的是第一页，以及每一页显示4条记录</span></span><br><span class="line"></span><br><span class="line"><span class="code">	但当用户/客户端传递了参数过来，也就是说指定了要显示第几页，每一页显示多少条记录时，</span></span><br><span class="line"><span class="code">	那么就要先将用户/客户端传递过来的参数取出来</span></span><br><span class="line"><span class="code">	同样还是通过request对象的getParameter("参数名称")方法将参数值(page=?&amp;size=?)取出来,</span></span><br><span class="line"><span class="code">	(这时候，通过request对象的getParameter()方法取出来的值的类型是一个字符串String类型的)</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">	然后进行判断(判断原因：也有可能仅仅只是传了一个参数名称，但并没有传递参数值过来)</span></span><br><span class="line"><span class="code">	判断传递过来的参数值是否为空(也就是说以防用户/客户端传递了一个参数名称过来，但并没有传递参数值，即参数值为空null)</span></span><br><span class="line"><span class="code">	若不为空也就是page!=null&amp;size!=null</span></span><br><span class="line"><span class="code">	那么page和size的取值就按照用户/客户端指定的要显示的页数以及每一页要显示多少条记录来操作</span></span><br><span class="line"><span class="code">	但上文说到通过request对象的getParameter()方法得到的值是一个字符串类型的值</span></span><br><span class="line"><span class="code">	而需要显示的第几页，每一页需要显示几条，这都是一个整数</span></span><br><span class="line"><span class="code">	所以这时候就需要一个从字符串String到整数int的转换</span></span><br><span class="line"></span><br><span class="line"><span class="code">	</span></span><br><span class="line"></span><br><span class="line"><span class="code">	将字符串String类型转换为整数int类型的方法为：int XX(变量名)=Integer.parseInt(需要转换成int整数类型的String字符串类型);</span></span><br><span class="line"><span class="code">	[</span></span><br><span class="line"><span class="code">	若需要转换成int整数类型的String字符串类型本身就是被标注了是一个字符串类型就不必要打双引号""</span></span><br><span class="line"><span class="code">	比如：声明是一个字符串类型</span></span><br><span class="line"><span class="code">		 String str = "12";</span></span><br><span class="line"><span class="code">		int str2 = Integer.parseInt(str);</span></span><br><span class="line"><span class="code">		未声明是一个字符串类型</span></span><br><span class="line"><span class="code">		int str3 = Integer.parseInt("13");</span></span><br><span class="line"><span class="code">	]</span></span><br><span class="line"><span class="code">	将整数int类型转换为字符串String类型的方法为：String XX(变量名)=整数的变量名.toString();</span></span><br><span class="line"><span class="code">	[</span></span><br><span class="line"><span class="code">	比如： 声明一个整数类型的变量,使之字符串化</span></span><br><span class="line"><span class="code">		int a= 12;</span></span><br><span class="line"><span class="code">		String b = a.toString();</span></span><br><span class="line"><span class="code">	]</span></span><br><span class="line"></span><br><span class="line"><span class="code">	该处有个重新赋值的操作</span></span><br><span class="line"><span class="code">	也就是先定义了默认的显示页码数和每一页中要显示的条数 int page=1；</span></span><br><span class="line"><span class="code">		      						 int size=4;</span></span><br><span class="line"><span class="code">	但当用户/客户端有指定的参数传递过来时，</span></span><br><span class="line"><span class="code">	就先将参数取出来，再判断是否为null,[if(条件)&#123;条件成立执行的代码&#125;]</span></span><br><span class="line"><span class="code">	最后将参数进行从String字符串类型转换成int整数类型并且赋值给之前定义过的page以及size</span></span><br><span class="line"></span><br><span class="line"><span class="code">	但当用户/客户端没有指定的参数传递过来时/或者说时传递过来了参数名称，却并没有参数值，</span></span><br><span class="line"><span class="code">	也就是说page为null空以及size为null空[page==null&amp;size==null]</span></span><br><span class="line"><span class="code">	就将不会执行if语句当中大括号当中的代码，</span></span><br><span class="line"><span class="code">	也就不会被重新赋值，</span></span><br><span class="line"><span class="code">	也就是说明没有传递参数过来，</span></span><br><span class="line"><span class="code">	就用默认的page&amp;size参数显示查询的数据</span></span><br><span class="line"><span class="code">	[if(条件)&#123;条件成立执行的代码&#125;]</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">    	*/</span></span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">	int page = 1;</span></span><br><span class="line"><span class="code">	int size = 4;</span></span><br><span class="line"></span><br><span class="line"><span class="code">	String pageString = request.getParameter("page");</span></span><br><span class="line"><span class="code">	if(page != null)&#123;</span></span><br><span class="line"><span class="code">			page = Integer.parseInt(pageString);</span></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"><span class="code">	String sizeString = request.getParameter("size");</span></span><br><span class="line"><span class="code">	if(sizeString != null)&#123;</span></span><br><span class="line"><span class="code">			size = Integer.parseInt(sizeString);</span></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">	/*越界判断</span></span><br><span class="line"><span class="code">	也就是说当按"上一页"一直按一直按，按到了第0页，甚至按到了第-1页，第-2页，…</span></span><br><span class="line"><span class="code">	从第0页开始，一直往下-1，-2页界面当中是没有任何的内容的</span></span><br><span class="line"><span class="code">	可能出现这种情况吗？</span></span><br><span class="line"><span class="code">	很显然，是不被允许的，这就被看作是一个漏洞</span></span><br><span class="line"><span class="code">	所以仅需要写出一个判断即可</span></span><br><span class="line"><span class="code">	也就是判断如果用户/客户端要显示的页面是否为第0页，第负数的页，也就是当页数小于1时，</span></span><br><span class="line"><span class="code">	将其page进行重新赋值，赋值为1，也就是说一旦显示的页数小于1，就给page赋值为1，</span></span><br><span class="line"><span class="code">	也就是说显示的内容一直都是第1页当中的内容</span></span><br><span class="line"><span class="code">	*/</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">	if(page &lt; 1)&#123;</span></span><br><span class="line"><span class="code">			page = 1;</span></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">	/*该处有一句语法知识：接口的引用指向实现类</span></span><br><span class="line"><span class="code">	Map是一个接口，HashMap是接口Map的实现类</span></span><br><span class="line"><span class="code">	如同List与ArrayList是一样的</span></span><br><span class="line"><span class="code">	List同样是一个接口，而ArrayList是接口List的实现类</span></span><br><span class="line"><span class="code">	称之为接口的引用指向实现类</span></span><br><span class="line"><span class="code">	*/</span></span><br><span class="line"><span class="code">	Map map = new HashMap();</span></span><br><span class="line"></span><br><span class="line"><span class="code">	/*使用到了UserDAO中的fenye()方法</span></span><br><span class="line"><span class="code">	知识点：</span></span><br><span class="line"><span class="code">	之前学习的是.jsp文件负责界面，servlet做访问数据库部分</span></span><br><span class="line"><span class="code">	(jsp与servlet两者其实都可以负责界面以及数据库，只是进行依据代码简洁程度做了分工)</span></span><br><span class="line"><span class="code">	而现在分成了三类，</span></span><br><span class="line"><span class="code">	第一类仍然是.jsp文件负责界面</span></span><br><span class="line"><span class="code">	第二类是servlet,却不再是负责访问数据库的操作了，</span></span><br><span class="line"><span class="code">	而是负责协调，又或者说成是传递参数的作用，</span></span><br><span class="line"><span class="code">	是一个媒介</span></span><br><span class="line"></span><br><span class="line"><span class="code">	从index.jsp中传递过来的参数(method=fenye :具体要执行的是什么操作/page=m :显示的是第m页的内容/size=n :每一页要显示几条记录)</span></span><br><span class="line"><span class="code">	将参数整理好(进行了参数判断)之后，</span></span><br><span class="line"><span class="code">	又将参数进行传递给DAO，让之写好sql语句，</span></span><br><span class="line"><span class="code">	DAO利用其参数(page,size)写好sql语句之后，又将sql语句传递给DBUtil类当中的query(String sql,Object...p)查询方法</span></span><br><span class="line"><span class="code">	DBUtil类当中的query()方法的返回类型是一个ResultSet结果集，</span></span><br><span class="line"><span class="code">	也就是说查询到的内容都放到了结果集当中</span></span><br><span class="line"><span class="code">	也就是说调用者调用了这个方法，得到的结果是一个结果集，</span></span><br><span class="line"><span class="code">	也就是说调用DBUtil类当中的query()方法的调用者DAO得到的只是一个结果集</span></span><br><span class="line"><span class="code">	但需要的真的只是结果集吗？</span></span><br><span class="line"><span class="code">	操作对象方便，还是操作结果集方便</span></span><br><span class="line"><span class="code">	大多数人的回答是操作结果集方便</span></span><br><span class="line"></span><br><span class="line"><span class="code">	但是并不是操作结果集方便</span></span><br><span class="line"><span class="code">	但是并不是操作结果集方便</span></span><br><span class="line"><span class="code">	但是并不是操作结果集方便</span></span><br><span class="line"></span><br><span class="line"><span class="code">	相反，是操作对象方便</span></span><br><span class="line"><span class="code">	原因有二：</span></span><br><span class="line"><span class="code">	一是因为java是一门面向对象的编程语言，所以操作对象方便</span></span><br><span class="line"><span class="code">	二是自己猜的：如果说操作结果集方便的话，</span></span><br><span class="line"><span class="code">			使用结果集带给我们的是什么？</span></span><br><span class="line"><span class="code">			一张满是记录，满是数据的表？</span></span><br><span class="line"><span class="code">			一堆数据？一堆毫无生机的死气沉沉的数据？</span></span><br><span class="line"><span class="code">			尽管显示的时候，</span></span><br><span class="line"><span class="code">			如果要显示的记录，数据，</span></span><br><span class="line"><span class="code">			他的确是做到了，可他的用处也就止于此了，</span></span><br><span class="line"><span class="code">			除了显示一堆了无生机的死的数据之外，结果集再做不了其他的用处</span></span><br><span class="line"></span><br><span class="line"><span class="code">			但如果说操作对象的话，很大的不一样</span></span><br><span class="line"><span class="code">			他带来的数据是活着的，并且很方便</span></span><br><span class="line"><span class="code">			怎么活着？</span></span><br><span class="line"><span class="code">			用自己打个比方：现在自己的名字叫做XXX,可能以后自己的名字随时更换，就叫AAA,又或者是BBB,CCC甚至都有可能</span></span><br><span class="line"><span class="code">					可以随时想换名字就换不受顾忌(重新赋值XXX,又被赋值成了AAA…)</span></span><br><span class="line"><span class="code">					到了要显示数据的时候直接显示即可</span></span><br><span class="line"></span><br><span class="line"><span class="code">					但结果集不一样，如果要进行改名字的话</span></span><br><span class="line"><span class="code">					第一：要连接数据库，jdbc七大步骤访问数据库，然后到数据库当中去修改名字，修改操作</span></span><br><span class="line"><span class="code">					第二：在数据库当中更改完名字之后，又要再java当中进行刷新操作，也就是进行重新查找的操作，然后才能显示在页面当中</span></span><br><span class="line"><span class="code">					简直不要太麻烦</span></span><br><span class="line"></span><br><span class="line"><span class="code">	所以是操作对象方便，到了此时UserDAO类中接受到的是DBUtil类中query()方法返回的ResultSet结果集</span></span><br><span class="line"><span class="code">	需要的不是结果集，不是死的记录，死的数据</span></span><br><span class="line"><span class="code">	所以此时，需要的是进行一个转化操作</span></span><br><span class="line"><span class="code">	也就是将一条条记录转换成为一个个的对象</span></span><br><span class="line"><span class="code">							数据库当中的一张表对应java当中的一个.java类(com.pojo包当中的UserInfo.java该类)</span></span><br><span class="line"><span class="code">							数据库当中的一个字段对应java当中的一个属性(private String username;/private String password;)</span></span><br><span class="line"><span class="code">						 	数据库当中的一条记录对应java当中的一个对象(UserInfo userinfo = new UserInfo();(new出一个对象需要给其赋值，使之真正成为一个对象)</span></span><br><span class="line"><span class="code">	循环结果集while(rs.next())</span></span><br><span class="line"><span class="code">	循环一次结果集，就表示有一条记录；</span></span><br><span class="line"><span class="code">	有一条记录，就表示有一个对象，就new 一个对象[UserInfo userinfo = new UserInfo();]</span></span><br><span class="line"><span class="code">	循环完结果集之后，得到的也就是全部的记录，也就是得到了全部的对象</span></span><br><span class="line"><span class="code">	当然此时的对象，还仅仅只是一个对象，并不是真正的对象，</span></span><br><span class="line"><span class="code">	真正的对象是有特征的，也就是有属性，</span></span><br><span class="line"><span class="code">	比如说现在只是产生了一个人，只有给这个人标上ID编号，姓名，年龄…之后，才能真正的成为一个人/一个对象</span></span><br><span class="line"><span class="code">	也就是说现在需要一个赋值的操作，当赋完值之后的这个对象，才是我真正所需要的这个对象</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">	那么这个时候，查询的记录查了，该由记录转换成对象的操作也做了之后，就将对象传递给UserServlet.java</span></span><br><span class="line"><span class="code">	最后再由UserServlet.java类获得这些对象，由UserServlet.java将这些对象呈递给show.jsp界面中去，显示出来这些对象		</span></span><br><span class="line"></span><br><span class="line"><span class="code">	第三类是DAO,由DAO负责访问数据库操作了</span></span><br><span class="line"><span class="code">	(</span></span><br><span class="line"><span class="code">	但其实真正操刀数据库的应该是DBUtil类，</span></span><br><span class="line"><span class="code">	因为DAO仅仅只是写了一个sql语句，</span></span><br><span class="line"><span class="code">	调用了DBUtil类当中的方法进行访问数据库，</span></span><br><span class="line"><span class="code">	也就是说DBUtil类当中的zsg()方法以及query()方法当中的jdbc七大步骤都已经写好，</span></span><br><span class="line"><span class="code">	万事俱备只欠"东风"(sql语句)</span></span><br><span class="line"></span><br><span class="line"><span class="code">	jdbc七大步骤：拷贝驱动/加载驱动/创建连接对象/写sql语句/发送并编译sql语句/执行操作/关闭连接对象</span></span><br><span class="line"><span class="code">	)</span></span><br><span class="line"><span class="code">	*/</span></span><br><span class="line"><span class="code">	List&lt;UserInfo&gt; list = userDAO.fenye(page,size);</span></span><br><span class="line"></span><br><span class="line"><span class="code">	/*</span></span><br><span class="line"><span class="code">	UserServlet类中不再操刀访问数据库的操作，而只是负责一个连接的作用，传递参数的作用</span></span><br><span class="line"><span class="code">	当前UserServlet.java类用到了UserDAO类当中的fenye()方法</span></span><br><span class="line"><span class="code">	需要该方法就写什么</span></span><br><span class="line"><span class="code">	所以此时就直接写UserDAO.java该类</span></span><br><span class="line"><span class="code">	*/</span></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="code">					/*这时候，UserServlet.java类是得到了所有所需要显示在show.jsp界面当中去的东西</span></span><br><span class="line"><span class="code">					同样，既要将page参数传递过去，也要将size参数传递过去(原因：进行上一页/下一页分页的操作)</span></span><br><span class="line"><span class="code">						更要将装有所有记录/对象的集合list传递过去</span></span><br><span class="line"><span class="code">					同样还是因为，如果是一个个的传递过去，太耗时间，太麻烦了</span></span><br><span class="line"><span class="code">					所以就创建了一个map集合，</span></span><br><span class="line"><span class="code">					map集合以键值对的形式进行存储，</span></span><br><span class="line"><span class="code">					也就是相当于，存进去的内容是一个一个的对象存进去的，</span></span><br><span class="line"><span class="code">					对象的名称是"page"/"size"/"list",对象一一所对应的值是page/size/list</span></span><br><span class="line"><span class="code">					都是以一个对象Object类型进行被添加到map集合中取得的</span></span><br><span class="line"><span class="code">					Object类：所有子类直接或间接的父类</span></span><br><span class="line"></span><br><span class="line"><span class="code">					相当于将所有的要进行传递的内容都变成一个一个的对象放到了一个叫做map的大袋子中去</span></span><br><span class="line"><span class="code">					最后要通过request对象进行呈递到show.jsp界面当中去，因为map大袋子本身是无法自己动起来跑到show.jsp页面中去</span></span><br><span class="line"><span class="code">					所以就要依靠request对象，request对象就相当于一辆自行车，map这个大袋子就放在了自行车的后座椅上，</span></span><br><span class="line"><span class="code">					也就是相当于存值的操作[request.setAttribut("map",map)]</span></span><br><span class="line"><span class="code">					存值的形式也是以键值对的形式存进去的，也就是说，map是以一个对象类型进行存值在request对象中</span></span><br><span class="line"><span class="code">					Object类：所有子类直接或间接的父类</span></span><br><span class="line"></span><br><span class="line"><span class="code">					request对象存值完之后，就要开始驮着map大袋子去到show.jsp界面中去显示查询到的数据[也就是转发过程]</span></span><br><span class="line"></span><br><span class="line"><span class="code">					为什么这里用的是转发request对象</span></span><br><span class="line"><span class="code">					而不是用的重定向response对象</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">					原因：转发是同一次请求；重定向是两次不同的请求</span></span><br><span class="line"><span class="code">					然而请求一次，请求完了之后该请求对象就会被销毁</span></span><br><span class="line"><span class="code">					如果说，用的是重定向的话</span></span><br><span class="line"><span class="code">					那么request.setAttribute("map",map);就已经是相当于第一次请求，存值完之后，也就是请求完了之后，该存了map对象值的request请求对象就会被销毁</span></span><br><span class="line"><span class="code">					所以又会产生一个新的request请求对象，也就是通过这个新的request请求对象，进行页面跳转到show.jsp页面中去</span></span><br><span class="line"><span class="code">					show.jsp界面中本就是要显示出所查询的数据，也就是存起来的值</span></span><br><span class="line"><span class="code">					而之前那个存了值的request对象却被销毁了，也就是，存起来的值跟没有存一样</span></span><br><span class="line"><span class="code">					就将没有内容显示在界面当中去</span></span><br><span class="line"><span class="code">					所做的查询操作，就跟都白做了一样</span></span><br><span class="line"></span><br><span class="line"><span class="code">					但转发不同，转发是一次请求，也就是说存值的这个请求，与跳转到show.jsp界面中去的这个请求，作为一次请求完成了</span></span><br><span class="line"><span class="code">					那么所存的值就都还在</span></span><br><span class="line"><span class="code">					</span></span><br><span class="line"><span class="code">					所以现在要到达的界面是show.jsp界面</span></span><br><span class="line"><span class="code">					但此时，show.jsp界面还未被创建，</span></span><br><span class="line"><span class="code">					所以接下来的操作就是去写show.jsp</span></span><br><span class="line"><span class="code">					*/</span></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">	map.out("page",page);</span></span><br><span class="line"><span class="code">	map.out("size",size);</span></span><br><span class="line"><span class="code">	map.out("list",list);</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">	request.setAttribute("map",map);</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">	request.getRequestDispatcher("show.jsp").forward(request,response);</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">	&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="code">			/* 该类UserServlet.java中的步骤即为：</span></span><br><span class="line"><span class="code">							1.先通过request对象的getParameter("参数名称")方法获得index.jsp中传过来的参数，为字符串类型</span></span><br><span class="line"><span class="code">							2.对于传过来的参数进行一个判断，(判断客户端/用户到底要进一个什么操作)，判断完成之后，创建该方法</span></span><br><span class="line"><span class="code">							3.在创建的该方法中写出默认显示的页码数，以及每一页要显示出来的条数</span></span><br><span class="line"><span class="code">							4.若客户端/用户有指定显示页码数以及每一页当中要显示出来的条数</span></span><br><span class="line"><span class="code">								1'则先通过request对象的getParameter("参数名称")取出该参数，该参数为字符串类型</span></span><br><span class="line"><span class="code">								2'取出参数后进行判断,若该参数为空，也就说明为仅仅只是传递了一个参数名称过来而已</span></span><br><span class="line"><span class="code">								3'取出参数后进行判断，若该参数不为空，page/size也就要进行重新赋值，换成用户/客户端指定的page和size</span></span><br><span class="line"><span class="code">								4'重新赋值要进行一个字符串类型转换成整数类型的操作</span></span><br><span class="line"><span class="code">							5.UserServlet.java不再负责访问数据库操作，访问数据库操作的是UserDAO.java，</span></span><br><span class="line"><span class="code">								所以就调用UserDAO.java中的fenye(int page,int size)方法，并传递参数page和size参数过去</span></span><br><span class="line"><span class="code">								得到UserDAO.java类中返回的是一个List&lt;UserInfo&gt;集合类型的对象，并赋值给List&lt;UserInfo&gt;类型对象list</span></span><br><span class="line"><span class="code">							6.创建一个map集合，将所有要显示再界面当中去的数据都以键值对的形式，通过map对象的.put()方法添加list/page/size</span></span><br><span class="line"><span class="code">							7.将map存入request对象中，通过request对象的setAttribute()方法进行存值</span></span><br><span class="line"><span class="code">							8.通过request对象转发到show.jsp界面中去</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">	</span></span><br><span class="line"></span><br><span class="line">工程名\src\com\dao\UserDAO.java</span><br><span class="line"></span><br><span class="line">UserDAO.java</span><br><span class="line"></span><br><span class="line">package com.dao;</span><br><span class="line"></span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.pojo.UserInfo;</span><br><span class="line">import com.util.DBUtil;</span><br><span class="line"></span><br><span class="line">public class UserDAO&#123;</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">			/*UserDAO.java类中现在只产生了一个方法也就是fenye(int page,int size)方法</span></span><br><span class="line"><span class="code">			方法的组成：访问修饰符+返回类型+方法名称+(方法的参数)+&#123;方法的主体&#125;</span></span><br><span class="line"><span class="code">			看上去这个方法很麻烦，但只要看清楚这个方法之后，就不再复杂了</span></span><br><span class="line"><span class="code">			该方法：</span></span><br><span class="line"><span class="code">				访问修饰符 public</span></span><br><span class="line"><span class="code">				返回类型 List&lt;UserInfo&gt;  </span></span><br><span class="line"><span class="code">							该返回类型说的是调用者调用该方法将会得到一个list集合类型的对象，</span></span><br><span class="line"><span class="code">							该list集合当中放置的元素全部都是从UserInfo.java类中产生的</span></span><br><span class="line"><span class="code">							也就是说返回的list集合中的所有元素的类型只能是UserInfo类型的对象</span></span><br><span class="line"><span class="code">						    	UserInfo userinfo = new UserInfo();</span></span><br><span class="line"><span class="code">							该操作叫做泛型[指明集合当中只能放置某种类型的元素]</span></span><br><span class="line"><span class="code">				方法的名字 fenye</span></span><br><span class="line"><span class="code">				方法的参数 (int page,int size)</span></span><br><span class="line"><span class="code">							为什么要传递两个参数过来</span></span><br><span class="line"><span class="code">							三个流程操作 </span></span><br><span class="line"><span class="code">								JSP界面</span></span><br><span class="line"><span class="code">								servlet文件(只负责页面之间的协调也就是传递参数，不再负责访问数据库操作)</span></span><br><span class="line"><span class="code">								DAO界面</span></span><br><span class="line"><span class="code">									(</span></span><br><span class="line"><span class="code">									负责访问数据库部分，</span></span><br><span class="line"><span class="code">									但真正访问数据库操作的部分是在DBUtil类中</span></span><br><span class="line"><span class="code">									原因DBUtil类中的jdbc步骤都写好了，就只差一个sql语句了</span></span><br><span class="line"><span class="code">									而DAO就只是需要将sql语句写好并调用DBUtil类当中的query方法就可以了</span></span><br><span class="line"><span class="code">									)</span></span><br><span class="line"><span class="code">							所以UserDAO.java类中就只需要写好sql语句就可以了，那么关两个参数什么事呢？</span></span><br><span class="line"><span class="code">							请注意：要进行查询的分页查询，也就是说查询出来的内容要以分页的形式显示出来</span></span><br><span class="line"><span class="code">								那么怎样怎样实现分类的操作？</span></span><br><span class="line"><span class="code">								要用到limit 限制</span></span><br><span class="line"><span class="code">								limit n 表示的是查询的记录只显示n条记录</span></span><br><span class="line"><span class="code">							  	limit m,n 表示的是查询的记录从下标为m的记录开始进行查询，查询n条记录</span></span><br><span class="line"><span class="code">								举例</span></span><br><span class="line"><span class="code">								有50条记录，每一页当中显示的条数为10条，那么总共的页数就会是50/10=5页</span></span><br><span class="line"><span class="code">								那么每一页的记录条数就将会显示成是</span></span><br><span class="line"><span class="code">											第一页	1，2，3，4，5，6，7，8，9，10</span></span><br><span class="line"><span class="code">											第二页	11，12，13，14，15，16，17，18，19，20</span></span><br><span class="line"><span class="code">											第三页	21，22，23，24，25，26，27，28，29，30</span></span><br><span class="line"><span class="code">											……		……</span></span><br><span class="line"><span class="code">								这50条记录都是从结果集当中取出来的</span></span><br><span class="line"><span class="code">						 		显而易见：结果集是一个集合，当中的数据第1条记录，也就是下标为0的记录</span></span><br><span class="line"><span class="code">									集合当中的数据排列都是以下标0开始的，</span></span><br><span class="line"><span class="code">									也就是说第0条记录就代表着第一条数据</span></span><br><span class="line"><span class="code">										显示出来的将会是</span></span><br><span class="line"><span class="code">											第一页	0，1，2，3，4，5，6，7，8，9</span></span><br><span class="line"><span class="code">											第二页	10，11，12，13，14，15，16，17，18，19</span></span><br><span class="line"><span class="code">											第三页	20，21，22，23，24，25，26，27，28，29</span></span><br><span class="line"><span class="code">											……		……</span></span><br><span class="line"><span class="code">									那么，如何判断页码呢</span></span><br><span class="line"><span class="code">									也就是说，怎样得知所处的页码是哪一个页码</span></span><br><span class="line"><span class="code">									每一个页码当中都只显示10条记录</span></span><br><span class="line"><span class="code">									记录是从下标为0开始计数起的</span></span><br><span class="line"><span class="code">									也就相当于说若该页码10条记录当中的第1条记录是为0(下标)的话，也就是在结果集数据当中的第1条数据</span></span><br><span class="line"><span class="code">									那么也就是说明了这就是第1页</span></span><br><span class="line"><span class="code">								   	如果有一页码10条记录当中的第1条记录是为10(下标)的话，也就是在结果即数据当中的第11条数据</span></span><br><span class="line"><span class="code">									那么也就是说明了这就是第2页</span></span><br><span class="line"><span class="code">									如果有一页码10条记录当中的第1条记录是为20(下标)的话，也就是在结果即数据当中的第21条数据</span></span><br><span class="line"><span class="code">									那么也就是说明了这就是第3页</span></span><br><span class="line"><span class="code">									也就有了一个规律</span></span><br><span class="line"><span class="code">										page(页数)	(page-1)*size（该页数当中的第一条[下标]记录数）</span></span><br><span class="line"><span class="code">										   1               （1-1）*10=0</span></span><br><span class="line"><span class="code">										   2               （2-1）*10=10</span></span><br><span class="line"><span class="code">										   3       	   （3-1）*10=20</span></span><br><span class="line"><span class="code">									也就是说limit (page-1)*size,size</span></span><br><span class="line"><span class="code">										记录数从(page-1)*size开始，并且该(page-1)*size也代表了现在处于的是哪一夜</span></span><br><span class="line"><span class="code">										size说的是该页面要显示多少条记录</span></span><br><span class="line"><span class="code">									所以需要传递这两个参数到DAO的界面中，完成sql语句的编写</span></span><br><span class="line"></span><br><span class="line"><span class="code">				方法的主题&#123;&#125;	</span></span><br><span class="line"><span class="code">				*/		</span></span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">			public List&lt;UserInfo&gt; fenye(int page,int size)&#123;</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="code">			//sql语句为从userinfo这张表当中进行查找用户名以及密码，并且从第下标为(page-1)*size的记录开始，在页面当中只显示size条记录</span></span><br><span class="line"></span><br><span class="line"><span class="code">			String sql="select username,password from userinfo limit ?,?";</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="code">			/*DAO界面只负责写好sql语句，</span></span><br><span class="line"><span class="code">			真正操刀数据库操作的是DBUtil.java类，</span></span><br><span class="line"><span class="code">			DBUtil.java类中所有的jdbc步骤都已经写好，</span></span><br><span class="line"><span class="code">			就只差一个sql语句以及给sql语句赋的值</span></span><br><span class="line"><span class="code">			给sql语句赋的值都放在Object...p不定参数数组p当中</span></span><br><span class="line"><span class="code">			Object...是不定参数数组的格式</span></span><br><span class="line"><span class="code">			p是不定参数数组的名称</span></span><br><span class="line"><span class="code">			该不定参数数组的类型是Object类型</span></span><br><span class="line"><span class="code">			*/</span></span><br><span class="line"></span><br><span class="line"><span class="code">			ResultSet rs = DBUtil.query(sql,(page-1)*size,size);</span></span><br><span class="line"></span><br><span class="line"><span class="code">	/*</span></span><br><span class="line"><span class="code">	UserDAO类中进行访问数据库的操作，</span></span><br><span class="line"><span class="code">	而真正进行访问数据库操作的其实是DBUtil类(DBUtil类中jdbc七大步骤已经全部写好，只欠sql语句未写)</span></span><br><span class="line"><span class="code">	当前UserDAO.java类用到了DBUtil类当中的query(String sql,Object...p)方法</span></span><br><span class="line"><span class="code">	需要该方法就写什么</span></span><br><span class="line"><span class="code">	所以此时就直接写DBUtil.java该类</span></span><br><span class="line"><span class="code">	也可以在写index.jsp之前就先写好DBUtil类</span></span><br><span class="line"><span class="code">	*/</span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="code">			/*	list接口 ArrayList是接口list的实现类</span></span><br><span class="line"><span class="code">				该语句的语法为接口的引用指向实现类</span></span><br><span class="line"><span class="code">			*/</span></span><br><span class="line"><span class="code">			List&lt;UserInfo&gt; list = new Array&lt;UserInfo&gt;();</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="code">			try&#123;</span></span><br><span class="line"><span class="code">				/* 从DBUtil.java类当中的query(String sql,Object...p)方法返回得到的是一个结果集</span></span><br><span class="line"><span class="code">				但需要的并不是一个结果集</span></span><br><span class="line"><span class="code">				所以进行一个转换</span></span><br><span class="line"><span class="code">				将结果集当中的所有记录转换成为一个个的对象</span></span><br><span class="line"><span class="code">				通过while(rs.next())指向下一条循环</span></span><br><span class="line"><span class="code">				循环一次就代表着有一条记录</span></span><br><span class="line"><span class="code">				有一条记录就代表着有一个对象</span></span><br><span class="line"><span class="code">				既然有一个对象就需要产生这个对象，</span></span><br><span class="line"><span class="code">				从UserInfo.java这个类当中去产生，数据库与java当中的数据是一一对应的关系(对象关系映射orm)</span></span><br><span class="line"><span class="code">				产生了对象之后就需要对这个对象进行赋值，只有赋值了的对象，才是我们真正所需要的对象</span></span><br><span class="line"><span class="code">				setUsername(String username);以及setPassword(String password)都是一个从UserInfo.java类当中产生的方法</span></span><br><span class="line"><span class="code">				在当前类当中去调用不是当前类的方法，有两个方法：</span></span><br><span class="line"><span class="code">										第一个通过产生那个方法的那个类去调用那个类中自己的方法</span></span><br><span class="line"><span class="code">										比如说</span></span><br><span class="line"><span class="code">											DBUtil.releaseConnection(rs.getStatement().getConnection());</span></span><br><span class="line"><span class="code">										第二个在当前类当中产生一个属于那个类中的对象，通过该对象去调用那个类中的方法</span></span><br><span class="line"><span class="code">										比如说</span></span><br><span class="line"><span class="code">											UserInfo userinfo = new UserInfo();</span></span><br><span class="line"><span class="code">											userinfo.setUsername(rs.getString(1));</span></span><br><span class="line"><span class="code">											userinfo.getPassword(rs.getString(2));</span></span><br><span class="line"><span class="code">				如果在当前类当中需要调用当前类中创建的一个方法，可直接进行调用，也就是说，不需要谁来调用，直接写</span></span><br><span class="line"><span class="code">										比如说：</span></span><br><span class="line"><span class="code">										在DBUtil类当中，有一个getConnection()方法</span></span><br><span class="line"><span class="code">										那么在zsg(String sql,Object...p)方法当中或者是query(String sql,Object...p)方法当中</span></span><br><span class="line"><span class="code">										去调用getConnection(),如何调用getConnection()方法的到Connection类型的对象？</span></span><br><span class="line"><span class="code">										Connection connection = getConnection();即可</span></span><br><span class="line"><span class="code">				*/</span></span><br><span class="line"><span class="code">				/*那么UserDAO.java返回给Servlet的就是一个对象(也就是查询的内容，只是从结果集中的一条记录变成了一个对象)，也甚至是很多个对象，</span></span><br><span class="line"><span class="code">				那么UserDAO.java将这些对象一个一个发送给UserServlet.java文件吗</span></span><br><span class="line"><span class="code">				那样将会变得很麻烦，浪费时间</span></span><br><span class="line"><span class="code">				所以就用了一个list集合</span></span><br><span class="line"><span class="code">				也就是说通过该list集合去将从UserInfo.java当中产生的对象一一添加到list集合当中去</span></span><br><span class="line"><span class="code">				由UserDAO.java发送到UserServlet.java中去的就是一个集合的形式，</span></span><br><span class="line"><span class="code">				就只需要发送一次，发送一个集合，</span></span><br><span class="line"><span class="code">				而该集合当中放置的也就是UserInfo.java产生的所有对象</span></span><br><span class="line"><span class="code">				也就是需要这一步骤的原因：List&lt;UserInfo&gt; list = new ArrayList&lt;UserInfo&gt;();</span></span><br><span class="line"><span class="code">							产生一个集合，泛型：该集合当中产生的所有元素都是从UserInfo.java类当中产生的对象</span></span><br><span class="line"><span class="code">				最后通过list对象的add()方法，将对象都添加到list集合当中去</span></span><br><span class="line"></span><br><span class="line"><span class="code">				当我们将ResultSet结果集当中的数据用尽之后就可以进行释放连接对象了</span></span><br><span class="line"><span class="code">				在DBUtil.java类当中的query()方法是并没有进行释放连接对象的，</span></span><br><span class="line"><span class="code">				因为在DBUtil类当中时，所返回的是一个结果集，但是这个结果集并没有被我们用到（也就是显示在浏览器界面当中去），</span></span><br><span class="line"><span class="code">				所以在DBUtil.java类当中时并没有进行释放连接对象的</span></span><br><span class="line"><span class="code">				因为一旦释放连接对象，那么所查询的内容还未被利用到connection对象就被返回到连接池当中去了，那么查询的内容也就不知所踪了(相当于查询了跟没有查询是一样的)</span></span><br><span class="line"></span><br><span class="line"><span class="code">				释放连接对象需要在finally&#123;&#125;块进行，原因：无论之前发生多大的一场，或者是报错等原因，finally&#123;&#125;块当中的内容都会被执行</span></span><br><span class="line"><span class="code">				再次做人要讲诚信</span></span><br><span class="line"><span class="code">				    做人要讲诚信</span></span><br><span class="line"><span class="code">				    做人要讲诚信</span></span><br><span class="line"><span class="code">				从连接池当中借的连接对象，就一定要还回去</span></span><br><span class="line"><span class="code">				若接连再三的不将连接对象还回去的话，</span></span><br><span class="line"><span class="code">				那么连接池当中的连接对象就会减少，</span></span><br><span class="line"><span class="code">				公用的连接对象也就变得越来越少，</span></span><br><span class="line"><span class="code">				直到连接池没有连接对象，</span></span><br><span class="line"><span class="code">				那么就无法取得公用的连接对象了，那么就与创建连接对象，又将其销毁(connection.close())是一样的本质了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">				最后返回一个list集合</span></span><br><span class="line"><span class="code">				若不返回该list集合该方法就将会报错</span></span><br><span class="line"><span class="code">				因为该方法当中的返回类型时List&lt;UserInfo&gt;,即要求该方法返回一个List类型的对象，对象list集合当中的元素必须时UserInfo.java该类中产生的对象</span></span><br><span class="line"><span class="code">				也可以返回的是对象，但如果由很多的记录/也就代表了由很多的对象，要一个一个对象的发送到UserServlet.java中去的话，将太过于麻烦</span></span><br><span class="line"><span class="code">				所以方法是将对象都放在list集合当中，一次性发送给UserServlet.java中去，既方便又快捷</span></span><br><span class="line"></span><br><span class="line"><span class="code">				所以UserDAO.java的内容到此就任务结束了</span></span><br><span class="line"><span class="code">				 UserDAO的步骤	0.写一个fenye(int page,int size)的方法</span></span><br><span class="line"><span class="code">						1.接收UserServlet.java传递过来的参数（int page, int size）</span></span><br><span class="line"><span class="code">						2.写好sql语句</span></span><br><span class="line"><span class="code">						3.调用DBUtil.java类当中的query(String sql,Object...p)方法进行到数据库当中查询操作</span></span><br><span class="line"><span class="code">						4.接收到DBUtil.java类中返回的结果集之后，</span></span><br><span class="line"><span class="code">						5.通过while(rs.next())指向下一条循环将结果集中的所有记录变成一个个的对象，且赋值，让其变成一个真正的对象</span></span><br><span class="line"><span class="code">						6.创建一个list集合对象，通过该list对象的add()方法将所有的对象都添加到集合中去</span></span><br><span class="line"><span class="code">						7.结果集的用处已经被用尽，所以进行释放连接</span></span><br><span class="line"><span class="code">						8.最后应返回类型List&lt;UserInfo&gt;,所以需要返回一个List类型的对象，对象中包含的元素必须是UserInfo.java该类中所产生的对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">				所以此时又要返回到UserServlet.java中去</span></span><br><span class="line"><span class="code">				*/</span></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">				while(rs.next())&#123;</span></span><br><span class="line"><span class="code">				UserInfo userinfo = new UserInfo();</span></span><br><span class="line"><span class="code">				info.serUsername(rs.getString(1));</span></span><br><span class="line"><span class="code">				info.serPassword(rs.getString(2));</span></span><br><span class="line"><span class="code">				list.add(info);</span></span><br><span class="line"><span class="code">					&#125;</span></span><br><span class="line"><span class="code">				&#125;catch(SQLException e)&#123;</span></span><br><span class="line"><span class="code">				e.printStackTrace();</span></span><br><span class="line"><span class="code">				&#125;finally&#123;</span></span><br><span class="line"><span class="code">				try&#123;</span></span><br><span class="line"><span class="code">					DBUtil.release(rs.getStatement().getConnection());</span></span><br><span class="line"><span class="code">					&#125;catch(SQLException e)&#123;</span></span><br><span class="line"><span class="code">					e.printStackTrace();</span></span><br><span class="line"><span class="code">					&#125;</span></span><br><span class="line"><span class="code">					return list;</span></span><br><span class="line"><span class="code">				&#125;</span></span><br><span class="line"><span class="code">			&#125;</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="code">	&#125;</span></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">工程名\src\cmo.util\DBUtil.java</span><br><span class="line"></span><br><span class="line">DBUtil.java</span><br><span class="line"></span><br><span class="line">package com.util;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLExcetion;</span><br><span class="line"></span><br><span class="line">import java.util.Vector;</span><br><span class="line"></span><br><span class="line">public class DBUtil&#123;</span><br><span class="line"></span><br><span class="line"><span class="code">	//1.实例化连接池</span></span><br><span class="line"><span class="code">	public static Vector&lt;Connection&gt; connectionPool = new Vector&lt;Connection&gt;();</span></span><br><span class="line"></span><br><span class="line"><span class="code">	//2.初始化连接池</span></span><br><span class="line"><span class="code">	static&#123;</span></span><br><span class="line"><span class="code">		try&#123;</span></span><br><span class="line"><span class="code">		Class.forName("com.mysql.jdbc.Driver");</span></span><br><span class="line"><span class="code">		//循环10次，往连接池当中添加10个连接对象</span></span><br><span class="line"><span class="code">		for(int i = 0;i &lt; 10; i++)&#123;</span></span><br><span class="line"><span class="code">				Connection connection = DriverManager.getConnection(</span></span><br><span class="line"><span class="code">				"jdbc；mysql://127.0.0.1:3306/s67",</span></span><br><span class="line"><span class="code">				"root",</span></span><br><span class="line"><span class="code">				"123"</span></span><br><span class="line"><span class="code">				);</span></span><br><span class="line"><span class="code">		connectionPool.add(connection);</span></span><br><span class="line"><span class="code">				&#125;</span></span><br><span class="line"><span class="code">			&#125;catch(Exception e)&#123;</span></span><br><span class="line"><span class="code">			e.printStackTrace();</span></span><br><span class="line"><span class="code">			&#125;</span></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"><span class="code">	//3.取连接</span></span><br><span class="line"><span class="code">	public static Connection getConnection()&#123;</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">	Connection connection = connectionPool.get(0);</span></span><br><span class="line"></span><br><span class="line"><span class="code">	connectionPool.remove(0);</span></span><br><span class="line"></span><br><span class="line"><span class="code">	return connection;</span></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">	//4.释放连接</span></span><br><span class="line"><span class="code">	public static void releaseConnection(Connection connection)&#123;</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">		connectionPool.add(connection);</span></span><br><span class="line"></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"><span class="code">	//5.增删改</span></span><br><span class="line"><span class="code">	public static int zsg(String sql,Object...p)&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="code">		Connection connection = getConnection();</span></span><br><span class="line"></span><br><span class="line"><span class="code">		int n = 0;</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="code">		try&#123;</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">			PreparedStatement ps = connection.prepareStatement(sql);</span></span><br><span class="line"><span class="code">			for(int i =0; i &lt; p.length; i++)&#123;</span></span><br><span class="line"><span class="code">				ps.setObject(i+1，p[i]);				</span></span><br><span class="line"><span class="code">				&#125;</span></span><br><span class="line"><span class="code">			n = ps.executeUpdate();</span></span><br><span class="line"><span class="code">			&#125;catch(SQLException e)&#123;</span></span><br><span class="line"><span class="code">			e.printStackTrace();</span></span><br><span class="line"><span class="code">			&#125;finally&#123;</span></span><br><span class="line"><span class="code">			releaseConnection(connection);</span></span><br><span class="line"><span class="code">			&#125;</span></span><br><span class="line"><span class="code">			return n;</span></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">	//6.查询</span></span><br><span class="line"><span class="code">	public static ResultSet query(String sql,Object...p)&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="code">		Connection connection = getConnection();</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="code">		ResultSet rs = null;</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="code">		try&#123;</span></span><br><span class="line"><span class="code">			PreparedStatement ps = connection.prepareStatement(sql);</span></span><br><span class="line"><span class="code">			for(int i = 0; i &lt; p.length;i++)&#123;</span></span><br><span class="line"><span class="code">				ps.setObject(i+1,p[i]);</span></span><br><span class="line"><span class="code">				&#125;</span></span><br><span class="line"><span class="code">			rs = ps.executeQuery();</span></span><br><span class="line"><span class="code">			&#125;catch(SQLException e)&#123;</span></span><br><span class="line"><span class="code">			e.printStackTrace();</span></span><br><span class="line"><span class="code">			&#125;</span></span><br><span class="line"><span class="code">			return rs;</span></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">	&#125;</span></span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="code">	/*</span></span><br><span class="line"><span class="code">	UserDAO类中进行访问数据库的操作，</span></span><br><span class="line"><span class="code">	而真正进行访问数据库操作的其实是DBUtil类(DBUtil类中jdbc七大步骤已经全部写好，只欠sql语句未写)</span></span><br><span class="line"><span class="code">	当前UserDAO.java类用到了DBUtil类当中的query(String sql,Object...p)方法</span></span><br><span class="line"><span class="code">	DBUtil类中的query(String sql,Object...p)方法的返回类型是一个ResultSet结果集</span></span><br><span class="line"><span class="code">	也就是说UserDAO接受到的是一个结果集，</span></span><br><span class="line"><span class="code">	但是</span></span><br><span class="line"><span class="code">		操作结果集/操作对象谁方便</span></span><br><span class="line"><span class="code">		有了以上的解释之后很显然是对象更容易操作</span></span><br><span class="line"><span class="code">		所以就有了将结果集当中的所有记录都转换成一个个的对象</span></span><br><span class="line"><span class="code">	那么这些对象从哪里产生？</span></span><br><span class="line"><span class="code">	数据库当中的一张表对应java当中的一个专门的类</span></span><br><span class="line"><span class="code">	数据库当中的一个字段对应java当中的一个属性</span></span><br><span class="line"><span class="code">	数据库当中的一条记录对应java当中的一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="code">	既是如此</span></span><br><span class="line"><span class="code">	那么就new一个与数据库当中相对应的表一致的.java类[Class]</span></span><br><span class="line"><span class="code">	数据库当中的表名叫做userinfo</span></span><br><span class="line"><span class="code">	那么该.java类的名字同样叫做UserInfo即可	</span></span><br><span class="line"></span><br><span class="line"><span class="code">	所以现在就要去写好UserInfo.java该类</span></span><br><span class="line"><span class="code">	*/</span></span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">工程名\src\com\pojo\UserInfo.java</span><br><span class="line"></span><br><span class="line">UserInfo.java</span><br><span class="line"></span><br><span class="line">package com.pojo;</span><br><span class="line"></span><br><span class="line">public class UserInfo&#123;</span><br><span class="line"><span class="code">			/*[数据库当中的数据与java当中的数据存在关系：对象关系映射orm(Object Relation Mapping)]</span></span><br><span class="line"><span class="code">			对象关系映射的体现：数据库当中的一张userinfo表代表java当中的一个UserInfo类</span></span><br><span class="line"><span class="code">					    数据库当中的一个username/password字段代表java当中的一个属性[private String username;/private String password;]</span></span><br><span class="line"><span class="code">					    数据库当中的一条记录username='张三'&amp;password='zhangsan'代表java当中的一个对象</span></span><br><span class="line"><span class="code">						[(select username,password from userinfo;)</span></span><br><span class="line"><span class="code">						UserInfo userinfo = new UserInfo();//此时产生的对象并不是真正的对象，只有该对象被赋了值之后，才是一个真正的对象</span></span><br><span class="line"><span class="code">						info.setUsername(rs.getString(1));//rs.getString(1)代表sql语句当中的第一个字段username</span></span><br><span class="line"><span class="code">						info.setPassword(rs.getString(2));//rs.getString(2)代表sql语句当中的第一个字段password</span></span><br><span class="line"><span class="code">						]</span></span><br><span class="line"><span class="code">			*/</span></span><br><span class="line"></span><br><span class="line"><span class="code">	private String username;</span></span><br><span class="line"><span class="code">	private String passward;</span></span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="code">			/* 以下的4个方法可以自己手动打/也可以通过快捷方法得到</span></span><br><span class="line"><span class="code">				快捷方式</span></span><br><span class="line"><span class="code">				在当前界面当中，右击找到Source</span></span><br><span class="line"><span class="code">				找到分界面当中的Generate Getters and Setters,并单击他</span></span><br><span class="line"><span class="code">				出现一个新的界面，找到Select All ,并单击他</span></span><br><span class="line"><span class="code">				最后Finish即可</span></span><br><span class="line"><span class="code">			*/</span></span><br><span class="line"><span class="code">			/* 以下该4个方法当中，有两个是取值的方法，有两个是赋值的方法</span></span><br><span class="line"><span class="code">				有多少个属性，那么就有多少个Getters以及多少个Setters方法</span></span><br><span class="line"><span class="code">				为什么要有setUsername(String name)&amp;setPassword(String password)方法</span></span><br><span class="line"><span class="code">				原因：结果集当中有一条记录代表着有多少个记录</span></span><br><span class="line"><span class="code">					有多少个记录也就代表着有多少个对象</span></span><br><span class="line"><span class="code">					也就是UserInfo userinfo = new UserInfo();</span></span><br><span class="line"><span class="code">					但是此时new出来的对象userinfo并不是我们真正想要的对象，</span></span><br><span class="line"><span class="code">					也就是说现在产生对象相当于只是产生了一个人，</span></span><br><span class="line"><span class="code">					却并没有给这个人进行ID编号，也没有给这个人取名字</span></span><br><span class="line"><span class="code">					也就是说现在的这个人还并不是一个完整的人</span></span><br><span class="line"></span><br><span class="line"><span class="code">					也就是说只有当给这个人赋予了ID编号，赋予了他姓名，这个人才真正完整了，才真正是一个人</span></span><br><span class="line"><span class="code">					对象也是如此</span></span><br><span class="line"><span class="code">					所以就有了setUsername(String username)以及setPassword(String password)方法</span></span><br><span class="line"><span class="code">					select username ,password from userinfo ;</span></span><br><span class="line"><span class="code">					rs.getString(1)代表的也就是从数据库当中查询找到的与之第一个字段相对应的字段值</span></span><br><span class="line"><span class="code">					rs.getString(2)代表的同样也就是从数据库当中查询找到的与之第二个字段相对应的字段值</span></span><br><span class="line"><span class="code">					info.setUsername(rs.getString(1));</span></span><br><span class="line"><span class="code">					info.setPassword(rs.getString(2));</span></span><br><span class="line"><span class="code">					完成了这个操作的对象，才是我们所需要的对象</span></span><br><span class="line"></span><br><span class="line"><span class="code">					</span></span><br><span class="line"><span class="code">				为什么要有getUsername()&amp;getPassword()方法	</span></span><br><span class="line"><span class="code">				原因：我们现在做的是最终还只是一个查询操作，只不过显示出来的内容进行了分页操作</span></span><br><span class="line"><span class="code">				进行的是一个查询操作，也就是说最终要显示在界面当中的是对象的属性，显示这些属性，也就说明了，有这么一个对象</span></span><br><span class="line"><span class="code">				(举例：也就是将对象的ID编号或者是对象的username账户或者是对象的password密码显示在页面当中去，代表了存在这么一条记录，这么一个对象)</span></span><br><span class="line"><span class="code">				</span></span><br><span class="line"><span class="code">				所以，有几个属性，就需要几个取值和赋值的方法</span></span><br><span class="line"><span class="code">				*/</span></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">					</span></span><br><span class="line"><span class="code">					</span></span><br><span class="line"><span class="code">	public String getUsername()&#123;	</span></span><br><span class="line"><span class="code">	return username;</span></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"><span class="code">	public setUsername(String username)&#123;</span></span><br><span class="line"><span class="code">	this.username = username;</span></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">	public String getPassword()&#123;</span></span><br><span class="line"><span class="code">	return password;</span></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"><span class="code">	public setPassword(String password)&#123;</span></span><br><span class="line"><span class="code">	this.password = password;</span></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">	&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">		/*</span></span><br><span class="line"><span class="code">			写完UserInfo.java界面当中的内容之后，现在就可以跳转到UserDAO.java类中去</span></span><br><span class="line"><span class="code">		        原因：是在UserDAO.java该类中将DBUtil.java中的query(String sql,Object...p)返回的ResultSet结果集变成了一个个的对象</span></span><br><span class="line"><span class="code">				产生该对象的类与数据库中的表相对应</span></span><br><span class="line"><span class="code">	 			产生该对象的属性与数据库当中的字段相对应</span></span><br><span class="line"><span class="code">				产生该对象与数据库当中的记录相对应</span></span><br><span class="line"><span class="code">				</span></span><br><span class="line"><span class="code">				也就是说UserDAO.java中产生的对象从该类UserInfo.java当中产生</span></span><br><span class="line"><span class="code">				也就是 UserInfo userinfo = new UserInfo();</span></span><br><span class="line"><span class="code">				</span></span><br><span class="line"><span class="code">				跳转到UserDAO.java当中去</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">WebRoot\show.jsp</span><br><span class="line"></span><br><span class="line">show.jsp</span><br><span class="line"></span><br><span class="line">&lt;%@ page import="com.pojo.UserInfo"%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page language="java" import="java.util.<span class="strong">*" pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="strong">/*</span> &lt;%@ 指令内容%&gt;指令   page页面指令 	import 导入的是com.pojo包中的UserInfo.java类</span><br><span class="line"><span class="code">	指令	page 页面指令	language 语言是java语言	import 导入的是java工程中的util包中的*所有类	pageEncoding 页面编码是UTF-8</span></span><br><span class="line"><span class="strong">*/</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">	/*</span>通过在request对象那辆自行车上存的map集合 </span><br><span class="line"><span class="code">	所以也是通过request对象中去取出在UserServlet.java类存入request对象的参数</span></span><br><span class="line"><span class="code">	在哪里放的，[request.setAttribute("map",map);存进去的map集合对象键值对的形式；是以一个对象Object类型存入map集合中]</span></span><br><span class="line"><span class="code">	也就到到哪里去取出来request.getAttribute("map")</span></span><br><span class="line"><span class="code">	[</span></span><br><span class="line"><span class="code">	request.getAttribute("对象的名称")；返回的是对应的Object类型的该对象</span></span><br><span class="line"><span class="code">	在request对象取出map集合对象是同样，</span></span><br><span class="line"><span class="code">	取出来的肯定也是一个Object类型的对象，</span></span><br><span class="line"><span class="code">	但需要的并不是一个对象，而是一个集合,</span></span><br><span class="line"><span class="code">	而Object是所有子类直接或间接的父类，大类型转小类型需要强转</span></span><br><span class="line"><span class="code">	所以也就出现了Map map = (Map)request.getAttribute("map");当中的小括号(Map)</span></span><br><span class="line"></span><br><span class="line"><span class="code">	同样list/page/size三者都是以键值对的形式存入map集合当中的，也就是说以该方式存入的都是以一个Object对象的类型存入map集合当中的</span></span><br><span class="line"><span class="code">	所以当取出的时候，也是以一个Object类型的对象取出的</span></span><br><span class="line"><span class="code">	但是真正需要的并不是一个Object类型的对象</span></span><br><span class="line"><span class="code">	Object类是所有子类的直接或间接的父类</span></span><br><span class="line"><span class="code">	大类型转小类型需要强转也就有了(List&lt;UserInfo&gt;)/(Integer)小括号的原因</span></span><br><span class="line"><span class="code">	从map对象中取出元素的方法为.get()方法</span></span><br><span class="line"><span class="code">	而从request对象中取出内容的方法是.getAttribute()方法</span></span><br><span class="line"><span class="code">	]</span></span><br><span class="line"><span class="code">	*/</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line">&lt;%</span><br><span class="line"><span class="code">	Map map = (Map)request.getAttribute("map");</span></span><br><span class="line"><span class="code">	List&lt;UserInfo&gt; list = (List&lt;UserInfo&gt;)map.get("list");</span></span><br><span class="line"><span class="code">	int currentpage = (Integer)map.get("page");//注意不能写成page,会报主键重复的错误[9大隐式对象中已经存在了一个page对象，为java对象的保留字，不能重名]</span></span><br><span class="line"><span class="code">	int size = (Integer)map.get("size");</span></span><br><span class="line">%&gt;</span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">		/*</span></span><br><span class="line"><span class="code">		list集合中放入的都是UserInfo.java类中产生的对象</span></span><br><span class="line"><span class="code">		如何将集合中的所有对象都显示在界面当中？</span></span><br><span class="line"><span class="code">		通过foreach循环遍历，再通过表达式进行输出</span></span><br><span class="line"><span class="code">		foreach循环遍历：</span></span><br><span class="line"><span class="code">				取一个UserInfo类中产生的对象info,并不是随意从哪一个类当中产生的对象</span></span><br><span class="line"><span class="code">				一定要是和list集合当中的元素的类型一样的对象，</span></span><br><span class="line"><span class="code">				也就是说list集合中所放入的对象的类型，以及要进行遍历的该对象的类型，两者的类型必须一致</span></span><br><span class="line"><span class="code">				才能进行遍历</span></span><br><span class="line"></span><br><span class="line"><span class="code">				info对象到list集合当中进行遍历，也就是说info对象一个一个代替list集合中的对象，进行输出</span></span><br><span class="line"><span class="code">				比方说</span></span><br><span class="line"><span class="code">				现在有一个集合，集合当中放的1，2，3，4，5，都是整数类型的元素</span></span><br><span class="line"><span class="code">				现在 自己也是一个int类型的数，也就是自己现在是被声明，但未被赋值</span></span><br><span class="line"><span class="code">				现在遍历该存有整数元素的集合</span></span><br><span class="line"><span class="code">				也就是现在自己代替集合中的1，也就是自己被1赋值，输出自己，也就是输出1</span></span><br><span class="line"><span class="code">					又一次代替集合中的2，也就是自己被2赋值，输出自己，也就是输出2</span></span><br><span class="line"><span class="code">						……</span></span><br><span class="line"><span class="code">			就成功的输出了所有的对象</span></span><br><span class="line"><span class="code">				*/</span></span><br><span class="line"></span><br><span class="line"><span class="code">		/* .getUsername()以及.getPassword()都是从UserInfo.java当中产生的方法</span></span><br><span class="line"><span class="code">			为的就是输出该对象的属性值（用户名以及密码）</span></span><br><span class="line"><span class="code">		*/</span></span><br><span class="line"><span class="code">					</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line">&lt;%for(UserInfo info : list)&#123; %&gt;</span><br><span class="line"><span class="code">	&lt;%=info.getUsername()%&gt;</span></span><br><span class="line"><span class="code">	&lt;%=info.getPassword()%&gt;</span></span><br><span class="line"><span class="code">	&lt;br&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="code">	/*写一个超链接，进行上一页/下一页操作</span></span><br><span class="line"><span class="code">	跳转到user.do界面中去，也就是UserServlet.java类中去，且带有参数method=fenye</span></span><br><span class="line"><span class="code">	并且该带有其他两个参数page/size</span></span><br><span class="line"><span class="code">	传递参数page以及size的原因</span></span><br><span class="line"><span class="code">				同样还是进行查询操作，还进行了一个分页操作</span></span><br><span class="line"><span class="code">				也就是说只是查询出来的内容的显示方式不同与要显示的页数/页码不同而已</span></span><br><span class="line"><span class="code">				所以需要传递参数page/size</span></span><br><span class="line"><span class="code">	格式：参数与参数之间用&amp;进行连接</span></span><br><span class="line"><span class="code">	上一页：也就是当前页的上一页，即为当前页数-1</span></span><br><span class="line"><span class="code">	下一页：也就是当前页的下一页，即为当前页数+1</span></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="code">	&lt;a href="user.do?method=fenye&amp;page=&lt;%=currentpage-1%&gt;&amp;size=&lt;%=size%&gt;"&gt;上一页&lt;/a&gt;</span></span><br><span class="line"><span class="code">   	&lt;a href="user.do?method=fenye&amp;page=&lt;%=currentpage+1%&gt;&amp;size=&lt;%=size%&gt;"&gt;下一页&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">			/*show.jsp 步骤</span></span><br><span class="line"><span class="code">					1.取出存在request对象中的map值，需要进行强转</span></span><br><span class="line"><span class="code">					2，取出存在map对象中的list/size/page,需要进行强转</span></span><br><span class="line"><span class="code">					3.通过foreach循环，将要显示再页面中的内容通过表达式进行输出对象info的属性值(getUsername()/getPassword())</span></span><br><span class="line"><span class="code">					4.上一页/下一页操作，传递参数method=fenye/page=?/size=?传递到user.do界面中去，进行重新查询</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>分页</tag>
        <tag>理解分析</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构绪论</title>
    <url>/2020/02/21/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA-01/</url>
    <content><![CDATA[<h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p><img src="/2020/02/21/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA-01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA-01.png" alt="数据结构绪论-01"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>PayPal 支付流程</title>
    <url>/2020/02/20/%E9%A2%86%E8%B5%AB/paypal%E6%94%AF%E4%BB%98%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="PayPal-交互示意图"><a href="#PayPal-交互示意图" class="headerlink" title="PayPal 交互示意图"></a>PayPal 交互示意图</h2><p>有一个关于paypal的交互图我得贡献出来，不知道从哪篇博客上保存下来的了，不太记得了。<br>通过这个交互图，然后再加上API文档更好理解一点。</p>
<p><img src="http://r.photo.store.qq.com/psc?/V13IdniL0W0T32/TCfiP1YaPeRT4Jil9RANX2e3FjuQJF1Z5tWbx.4FG5JL.HWnrtw7AHhlwZdbCbKOOk8Slh7k48Le*rSTcyj0OytedTNvnOyiYo.YjOMuSqQ!/r" alt="image"></p>
<p>分为四个端：一个是开发者端，一个是live端，一个是沙箱端，还有一个就是提工单的那个端</p>
<ul>
<li>提工单：<a href="https://www.paypal-support.com/s/contactsupport" target="_blank" rel="noopener">https://www.paypal-support.com/s/contactsupport</a></li>
<li>开发者：<a href="https://developer.paypal.com" target="_blank" rel="noopener">https://developer.paypal.com</a></li>
<li>沙箱：<a href="https://www.sandbox.paypal.com/" target="_blank" rel="noopener">https://www.sandbox.paypal.com/</a></li>
<li>live：<a href="https://www.paypal.com/c2/home" target="_blank" rel="noopener">https://www.paypal.com/c2/home</a></li>
</ul>
<h2 id="PayPal-maven依赖"><a href="#PayPal-maven依赖" class="headerlink" title="PayPal maven依赖"></a>PayPal maven依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.paypal.sdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rest-api-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;version&gt;1.4.2&lt;/version&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.14.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="PayPal-相关Code"><a href="#PayPal-相关Code" class="headerlink" title="PayPal 相关Code"></a>PayPal 相关Code</h2><blockquote>
<p>PaypalConfig，paypal相关配置  </p>
</blockquote>
<p>关于这个代码百度一下，有很多。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yourshares.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.<span class="keyword">JSONObject</span>;</span><br><span class="line"><span class="keyword">import</span> com.paypal.base.codec.<span class="built_in">binary</span>.Base64;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">BufferedReader</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">HashMap</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.paypal.base.rest.APIContext;</span><br><span class="line"><span class="keyword">import</span> com.paypal.base.rest.OAuthTokenCredential;</span><br><span class="line"><span class="keyword">import</span> com.paypal.base.rest.PayPalRESTException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line"><span class="keyword">public</span> class PaypalConfig&#123;</span><br><span class="line">    @Value(<span class="string">"$&#123;paypal.client.app&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> clientId;</span><br><span class="line">    @Value(<span class="string">"$&#123;paypal.client.secret&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> clientSecret;</span><br><span class="line">    @Value(<span class="string">"$&#123;paypal.mode&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> mode;</span><br><span class="line">    @Value(<span class="string">"$&#123;paypal.tokenurl&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> tokenurl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; paypalSdkConfig()&#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; sdkConfig = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">        sdkConfig.put(<span class="string">"mode"</span>, mode);</span><br><span class="line">        <span class="keyword">return</span> sdkConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> OAuthTokenCredential authTokenCredential()&#123;</span><br><span class="line">        OAuthTokenCredential oAuthTokenCredential=<span class="keyword">new</span> OAuthTokenCredential(clientId, clientSecret, paypalSdkConfig());</span><br><span class="line">        <span class="keyword">return</span> oAuthTokenCredential;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> APIContext apiContext() <span class="keyword">throws</span> PayPalRESTException&#123;</span><br><span class="line"><span class="comment">//        APIContext apiContext = new APIContext(authTokenCredential().getAccessToken());</span></span><br><span class="line">        APIContext apiContext = <span class="keyword">new</span> APIContext(clientId, clientSecret, <span class="string">"sandbox"</span>);</span><br><span class="line"><span class="comment">//        apiContext.setConfigurationMap(paypalSdkConfig());</span></span><br><span class="line">        <span class="keyword">return</span> apiContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> APIContext refreshToken(APIContext apiContext)&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"===========[refreshToken]==========="</span>);</span><br><span class="line">        apiContext=apiContext.setRefreshToken(getAccessToken());</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"===========[refreshToken END]==========="</span>);</span><br><span class="line">        <span class="keyword">return</span> apiContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    URL url = new URL(TOKEN_URL);</span></span><br><span class="line"><span class="comment">     *    String authorization = clientId+":"+secret;</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">String</span> getAccessToken()&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"===========[getAccessToken]==========="</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(tokenurl);</span><br><span class="line">            <span class="keyword">String</span> authorization = clientId+<span class="string">":"</span>+clientSecret;</span><br><span class="line">            authorization = Base64.encodeBase64String(authorization.getBytes());</span><br><span class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">            conn.setRequestMethod(<span class="string">"POST"</span>);<span class="comment">// 提交模式</span></span><br><span class="line">            <span class="comment">//设置请求头header</span></span><br><span class="line">            conn.setRequestProperty(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">            conn.setRequestProperty(<span class="string">"Accept-Language"</span>, <span class="string">"en_US"</span>);</span><br><span class="line">            conn.setRequestProperty(<span class="string">"Authorization"</span>, <span class="string">"Basic "</span>+authorization);</span><br><span class="line">            <span class="comment">// conn.setConnectTimeout(10000);//连接超时 单位毫秒</span></span><br><span class="line">            <span class="comment">// conn.setReadTimeout(2000);//读取超时 单位毫秒</span></span><br><span class="line">            conn.setDoOutput(<span class="keyword">true</span>);<span class="comment">// 是否输入参数</span></span><br><span class="line">            <span class="keyword">String</span> params = <span class="string">"grant_type=client_credentials"</span>;</span><br><span class="line">            conn.getOutputStream().write(params.getBytes());<span class="comment">// 输入参数</span></span><br><span class="line"></span><br><span class="line">            InputStreamReader inStream = <span class="keyword">new</span> InputStreamReader(conn.getInputStream());</span><br><span class="line">            <span class="keyword">BufferedReader</span> reader = <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(inStream);</span><br><span class="line">            StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">String</span> lineTxt = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((lineTxt = reader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                result.<span class="built_in">append</span>(lineTxt);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.close();</span><br><span class="line">            <span class="keyword">String</span> accessTokey = <span class="keyword">JSONObject</span>.parseObject(result.toString()).getString(<span class="string">"access_token"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"[getAccessToken]:"</span>+accessTokey);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"===========[getAccessToken END]==========="</span>);</span><br><span class="line">            <span class="keyword">return</span> accessTokey;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception err)&#123;</span><br><span class="line">            err.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>业务层Service接口</p>
</blockquote>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.yourshares.service.adminWeb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.paypal.api.payments.Payment;</span><br><span class="line"><span class="keyword">import</span> com.paypal.base.rest.PayPalRESTException;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.model.vo.PaypalPaymentIntent;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.model.vo.PaypalPaymentMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> interface PayService &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pay</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> throws IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">String</span> <span class="title">toPay</span><span class="params">(Double totalAmount,<span class="keyword">String</span> OutRepoOrderNo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Payment <span class="title">createPayment</span><span class="params">(Double total,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">String</span> currency,</span></span></span><br><span class="line"><span class="function"><span class="params">                          PaypalPaymentMethod method,</span></span></span><br><span class="line"><span class="function"><span class="params">                          PaypalPaymentIntent intent,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">String</span> description,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">String</span> cancelUrl,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">String</span> successUrl,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">String</span> outRepoOrderNo)</span>throws PayPalRESTException</span>;</span><br><span class="line">    <span class="function">Payment <span class="title">executePayment</span><span class="params">(<span class="keyword">String</span> paymentId, <span class="keyword">String</span> payerId)</span> throws PayPalRESTException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paypalCallback</span><span class="params">(Map params,HttpServletRequest request,HttpServletResponse response)</span>throws  IOException</span>;<span class="comment">//回调业务处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>业务层实现</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">package com.yourshares.service.adminWeb.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.util.StringUtil;</span><br><span class="line"><span class="keyword">import</span> com.paypal.api.payments.*;</span><br><span class="line"><span class="keyword">import</span> com.paypal.base.rest.APIContext;</span><br><span class="line"><span class="keyword">import</span> com.paypal.base.rest.PayPalRESTException;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.common.exception.BizException;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.model.vo.PaypalPaymentIntent;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.model.vo.PaypalPaymentMethod;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.common.tools.LogFileName;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.common.utils.Kits;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.common.utils.LoggerUtils;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.configuration.PaypalConfig;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.configuration.SpringDynamicCronTask;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.dao.TOutRepoOrderMapper;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.dao.TPaypalTransMapper;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.model.po.TOutRepoOrder;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.model.po.TPaypalTrans;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.service.TOutRepoOrderService;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.entity.service.TPaypalTransService;</span><br><span class="line"><span class="keyword">import</span> com.yourshares.service.adminWeb.PayService;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.interceptor.TransactionAspectSupport;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.entity.Condition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line">@<span class="type">Service</span></span><br><span class="line">@<span class="type">PropertySource</span>(value = &#123;<span class="string">"classpath:application-$&#123;spring.profiles.active&#125;.properties"</span>&#125;, encoding = <span class="string">"utf-8"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayServiceImpl</span> <span class="title">extends</span> <span class="title">BaseService</span> <span class="title">implements</span> <span class="title">PayService</span> </span>&#123;</span><br><span class="line">    <span class="type">Logger</span> logger = <span class="type">LoggerUtils</span>.<span class="type">Logger</span>(<span class="type">LogFileName</span>.<span class="type">API</span>);</span><br><span class="line"></span><br><span class="line">    @<span class="type">Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">APIContext</span> apiContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回调地址</span></span><br><span class="line">    @<span class="type">Value</span>(<span class="string">"$&#123;paypal.notifyurl&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> notifyurl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//支付成功页面地址</span></span><br><span class="line">    @<span class="type">Value</span>(<span class="string">"$&#123;paypal.successurl&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> successurl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//支付关闭页面地址</span></span><br><span class="line">    @<span class="type">Value</span>(<span class="string">"$&#123;paypal.cancleurl&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> cancleurl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ipn生产/沙箱地址</span></span><br><span class="line">    @<span class="type">Value</span>(<span class="string">"$&#123;paypal.ipnurl&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> ipnurl;</span><br><span class="line"></span><br><span class="line">    @<span class="type">Resource</span></span><br><span class="line">    <span class="type">TPaypalTransMapper</span> tPaypalTransMapper;</span><br><span class="line">    @<span class="type">Resource</span></span><br><span class="line">    <span class="type">TPaypalTransService</span> tPaypalTransService;</span><br><span class="line">    @<span class="type">Resource</span></span><br><span class="line">    <span class="type">TOutRepoOrderMapper</span> tOutRepoOrderMapper;</span><br><span class="line">    @<span class="type">Resource</span></span><br><span class="line">    <span class="type">TOutRepoOrderService</span> tOutRepoOrderService;</span><br><span class="line">    @<span class="type">Resource</span></span><br><span class="line">    <span class="type">PaypalConfig</span> paypalConfig;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="type">COMPLETED_STATUS</span>=<span class="string">"Completed"</span>;<span class="comment">//完成</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="type">REFUNDED_STATUS</span>=<span class="string">"refunded"</span>;<span class="comment">//退款</span></span><br><span class="line"></span><br><span class="line">    @<span class="type">Override</span></span><br><span class="line">    <span class="keyword">public</span> void pay(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        <span class="type">String</span> cancelUrl = cancleurl;<span class="comment">//关闭路径 URLUtils.getBaseURl(request) + "/api/v1/pay/cancle"</span></span><br><span class="line">        <span class="type">String</span> successUrl = successurl;<span class="comment">//成功路径 URLUtils.getBaseURl(request) + "/api/v1/pay/success"</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Payment</span> payment = createPayment(</span><br><span class="line">                    <span class="number">500.00</span>,</span><br><span class="line">                    <span class="string">"USD"</span>,</span><br><span class="line">                    <span class="type">PaypalPaymentMethod</span>.paypal,</span><br><span class="line">                    <span class="type">PaypalPaymentIntent</span>.sale,</span><br><span class="line">                    <span class="string">"payment description"</span>,</span><br><span class="line">                    cancelUrl,</span><br><span class="line">                    successUrl,<span class="string">"OUB"</span>+ <span class="type">Kits</span>.<span class="type">Date</span>.getyyyyMMddHHmmss());</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">Links</span> links : payment.getLinks())&#123;</span><br><span class="line">                <span class="keyword">if</span>(links.getRel().equals(<span class="string">"approval_url"</span>))&#123;</span><br><span class="line">                    logger.info(<span class="string">"======toPay redirect:[&#123;&#125;]"</span>,links.getHref());</span><br><span class="line">                    response.sendRedirect(links.getHref());</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    response:</span></span><br><span class="line"><span class="comment">                    &#123;"id":"PAYID-LYZJW5A74P54450UP962954B","intent":"sale","state":"created",</span></span><br><span class="line"><span class="comment">                    "payer":&#123;"payment_method":"paypal"&#125;,</span></span><br><span class="line"><span class="comment">                    "transactions":[&#123;"amount":&#123;"total":"500.00","currency":"USD"&#125;,</span></span><br><span class="line"><span class="comment">                    "description":"payment description","related_resources":[]&#125;],"create_time":"2020-01-30T09:01:40Z",</span></span><br><span class="line"><span class="comment">                    "links":[&#123;"href":"https://api.sandbox.paypal.com/v1/payments/payment/PAYID-LYZJW5A74P54450UP962954B",</span></span><br><span class="line"><span class="comment">                    "rel":"self","method":"GET"&#125;,</span></span><br><span class="line"><span class="comment">                    &#123;"href":"https://www.sandbox.paypal.com/cgi-bin/webscr?cmd=_express-checkout&amp;token=EC-7K413818TR837130E","rel":"approval_url","method":"REDIRECT"&#125;,&#123;"href":"https://api.sandbox.paypal.com/v1/payments/payment/PAYID-LYZJW5A74P54450UP962954B/execute","rel":"execute","method":"POST"&#125;]&#125;</span></span><br><span class="line"><span class="comment">2020-01-30 17:01:37.676  WARN 3644 -- [nio-8080-exec-7] c.y.c.GlobalExceptionResolver            : Resolved [java.lang.IllegalStateException: Cannot call sendRedirect() after the response has been committed]</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="type">PayPalRESTException</span> e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        response.sendRedirect(cancleurl);</span><br><span class="line"><span class="comment">//        response.getWriter().write("&lt;h1&gt;HELLO WORLLD&lt;/h1&gt;");</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取支付链接</p>
</blockquote>
<figure class="highlight golo"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public String toPay(Double totalAmount,String outRepoOrderNo) &#123;</span><br><span class="line">        String cancelUrl = cancleurl;//关闭路径</span><br><span class="line">        String successUrl =successurl;//成功路径</span><br><span class="line">        String url=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Payment payment = createPayment(</span><br><span class="line">                    totalAmount,</span><br><span class="line">                    <span class="string">"USD"</span>,</span><br><span class="line">                    PaypalPaymentMethod.paypal,</span><br><span class="line">                    PaypalPaymentIntent.sale,</span><br><span class="line">                    <span class="string">"领赫 - 账单(*^▽^*)"</span>,</span><br><span class="line">                    cancelUrl,</span><br><span class="line">                    successUrl,</span><br><span class="line">                    outRepoOrderNo);</span><br><span class="line">            <span class="keyword">for</span>(Links links : payment.getLinks())&#123;</span><br><span class="line">                <span class="keyword">if</span>(links.getRel().equals(<span class="string">"approval_url"</span>))&#123;</span><br><span class="line">                    logger.info(<span class="string">"======toPay redirect:[&#123;&#125;]"</span>,links.getHref());</span><br><span class="line">                    url=links.getHref();</span><br><span class="line">                    /*</span><br><span class="line">                    response:</span><br><span class="line">                    &#123;<span class="string">"id"</span>:<span class="string">"PAYID-LYZJW5A74P54450UP962954B"</span>,<span class="string">"intent"</span>:<span class="string">"sale"</span>,<span class="string">"state"</span>:<span class="string">"created"</span>,</span><br><span class="line">                    <span class="string">"payer"</span>:&#123;<span class="string">"payment_method"</span>:<span class="string">"paypal"</span>&#125;,</span><br><span class="line">                    <span class="string">"transactions"</span>:[&#123;<span class="string">"amount"</span>:&#123;<span class="string">"total"</span>:<span class="string">"500.00"</span>,<span class="string">"currency"</span>:<span class="string">"USD"</span>&#125;,</span><br><span class="line">                    <span class="string">"description"</span>:<span class="string">"payment description"</span>,<span class="string">"related_resources"</span>:[]&#125;],<span class="string">"create_time"</span>:<span class="string">"2020-01-30T09:01:40Z"</span>,</span><br><span class="line">                    <span class="string">"links"</span>:[&#123;<span class="string">"href"</span>:<span class="string">"https://api.sandbox.paypal.com/v1/payments/payment/PAYID-LYZJW5A74P54450UP962954B"</span>,</span><br><span class="line">                    <span class="string">"rel"</span>:<span class="string">"self"</span>,<span class="string">"method"</span>:<span class="string">"GET"</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">"href"</span>:<span class="string">"https://www.sandbox.paypal.com/cgi-bin/webscr?cmd=_express-checkout&amp;token=EC-7K413818TR837130E"</span>,<span class="string">"rel"</span>:<span class="string">"approval_url"</span>,<span class="string">"method"</span>:<span class="string">"REDIRECT"</span>&#125;,&#123;<span class="string">"href"</span>:<span class="string">"https://api.sandbox.paypal.com/v1/payments/payment/PAYID-LYZJW5A74P54450UP962954B/execute"</span>,<span class="string">"rel"</span>:<span class="string">"execute"</span>,<span class="string">"method"</span>:<span class="string">"POST"</span>&#125;]&#125;</span><br><span class="line"><span class="number">2020</span><span class="number">-01</span><span class="number">-30</span> <span class="number">17</span>:<span class="number">01</span>:<span class="number">37.676</span>  WARN <span class="number">3644</span> -- [nio<span class="number">-8080</span>-exec<span class="number">-7</span>] c.y.c.GlobalExceptionResolver            : Resolved [java.lang.IllegalStateException: Cannot call sendRedirect() after the response has been committed]</span><br><span class="line">                     */</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PayPalRESTException e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">            /*</span><br><span class="line">            david</span><br><span class="line">            设置有限刷新次数（&lt;<span class="number">10</span>次），如果多次失败，返回必须返回给上层应用，且把下次刷新时间设置为<span class="number">10</span>分钟之后。成功了就设置为<span class="number">10</span>个小时。</span><br><span class="line">            尝试次数你设置<span class="number">3</span>次吧,现在如果失败了，发送账单接口很久才能返回</span><br><span class="line">             */</span><br><span class="line">            //Error code : <span class="number">401</span> <span class="keyword">with</span> response : &#123;<span class="string">"error"</span>:<span class="string">"invalid_token"</span>,<span class="string">"error_description"</span>:<span class="string">"Access Token not found in cache"</span>&#125;</span><br><span class="line">            // Error code : <span class="number">400</span> <span class="keyword">with</span> response : &#123;<span class="string">"name"</span>:<span class="string">"VALIDATION_ERROR"</span>,<span class="string">"details"</span>:[&#123;<span class="string">"field"</span>:<span class="string">"transactions[0].amount"</span>,<span class="string">"issue"</span>:<span class="string">"Amount cannot be zero"</span>&#125;],<span class="string">"message"</span>:<span class="string">"Invalid request - see details"</span>,<span class="string">"information_link"</span>:<span class="string">"https://developer.paypal.com/docs/api/payments/#errors"</span>,<span class="string">"debug_id"</span>:<span class="string">"16ccf2387e7d9"</span>&#125;</span><br><span class="line">            //Error code : <span class="number">400</span> <span class="keyword">with</span> response : &#123;<span class="string">"name"</span>:<span class="string">"VALIDATION_ERROR"</span>,<span class="string">"message"</span>:<span class="string">"Invalid request - see details"</span>,<span class="string">"debug_id"</span>:<span class="string">"cf6130d18a99"</span>,<span class="string">"information_link"</span>:<span class="string">"https://developer.paypal.com/docs/api/payments/#errors"</span>,<span class="string">"details"</span>:[&#123;<span class="string">"field"</span>:<span class="string">"transactions[0].amount.total"</span>,<span class="string">"location"</span>:<span class="string">"body"</span>,<span class="string">"issue"</span>:<span class="string">"Currency amount must be non-negative number, contain exactly 2 decimal places separated by '.' (JPY contains 0 decimal places), optional thousands separator ',', limited to 7 digits before the decimal point and currency which is a valid ISO Currency Code"</span>&#125;,&#123;<span class="string">"field"</span>:<span class="string">"transactions[0].amount.total.value"</span>,<span class="string">"location"</span>:<span class="string">"body"</span>,<span class="string">"issue"</span>:<span class="string">"Value too long (max length 10)"</span>&#125;]&#125;</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isNotEmpty(e.getMessage()))&#123;</span><br><span class="line">                String responseDesc=e.getMessage();</span><br><span class="line">                String[] strings=responseDesc.split(<span class="string">"\\&#123;"</span>);</span><br><span class="line">                String json=<span class="string">"&#123;"</span>+strings[<span class="number">1</span>];</span><br><span class="line">                JSONObject response=JSONObject.parseObject(json);</span><br><span class="line">                logger.info(<span class="string">"打印response: "</span>+response.toString());</span><br><span class="line">                <span class="keyword">if</span>(response!=<span class="literal">null</span> &amp;&amp; response.getString(<span class="string">"error"</span>)!=<span class="literal">null</span> &amp;&amp; response.getString(<span class="string">"error"</span>).equalsIgnoreCase(<span class="string">"invalid_token"</span>))&#123;</span><br><span class="line">                    String newUrl=<span class="string">""</span>;</span><br><span class="line">                    <span class="keyword">for</span>(int n=<span class="number">0</span>;n&lt;<span class="number">3</span>;n++)&#123;</span><br><span class="line">                        //在更新了token之后重试</span><br><span class="line">                        logger.info(<span class="string">"token失效，更换新的token,原来的token: &#123;&#125;"</span>,apiContext.getAccessToken());</span><br><span class="line">//                        paypalConfig.refreshToken(apiContext);</span><br><span class="line">                        logger.info(<span class="string">"更换新的token:&#123;&#125;"</span>,apiContext.getAccessToken());</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Payment payment = createPayment(</span><br><span class="line">                                    totalAmount,</span><br><span class="line">                                    <span class="string">"USD"</span>,</span><br><span class="line">                                    PaypalPaymentMethod.paypal,</span><br><span class="line">                                    PaypalPaymentIntent.sale,</span><br><span class="line">                                    <span class="string">"领赫 - 账单(*^▽^*)"</span>,</span><br><span class="line">                                    cancelUrl,</span><br><span class="line">                                    successUrl,</span><br><span class="line">                                    outRepoOrderNo);</span><br><span class="line">                            <span class="keyword">for</span> (Links links : payment.getLinks()) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (links.getRel().equals(<span class="string">"approval_url"</span>)) &#123;</span><br><span class="line">                                    logger.info(<span class="string">"======toPay redirect:[&#123;&#125;]"</span>, links.getHref());</span><br><span class="line">                                    newUrl = links.getHref();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">catch</span> (PayPalRESTException e1)&#123;</span><br><span class="line">                            logger.error(e1.getMessage());</span><br><span class="line">                        &#125;</span><br><span class="line">                       <span class="keyword">if</span>(StringUtils.isNotEmpty(newUrl))&#123;//尝试三次当中存在有一次url不为空则断开循环</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                       &#125;<span class="keyword">else</span>&#123;//当次循环当中支付链接为空则跳出当次循环进入下一次循环</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(StringUtils.isEmpty(newUrl))&#123;//循环了三次之后如果newUrl还是空则抛出异常通知上层应用，说获取支付链接失败</span><br><span class="line">                        //且把下次刷新时间设置为<span class="number">10</span>分钟之后。成功了就设置为<span class="number">10</span>个小时。</span><br><span class="line">                        SpringDynamicCronTask.cron=<span class="string">"0/600 * * * * ?"</span>;//十分钟后再试</span><br><span class="line">                        <span class="keyword">throw</span> new BizException(<span class="string">"获取支付链接异常，请稍后重试"</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        url=newUrl;</span><br><span class="line">                        SpringDynamicCronTask.cron=<span class="string">"*/36000 * * * * ?"</span>;//十分钟后再试</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (response!=<span class="literal">null</span> &amp;&amp; response.getString(<span class="string">"name"</span>)!=<span class="literal">null</span> &amp;&amp;response.getString(<span class="string">"name"</span>).equalsIgnoreCase(<span class="string">"VALIDATION_ERROR"</span>))&#123;</span><br><span class="line">                    //金额无效</span><br><span class="line">                    url =<span class="literal">null</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    url=<span class="literal">null</span>;//<span class="string">"http://y22711s118.iask.in/pay/cancle.html"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            url=StringUtils.isEmpty(url)==<span class="literal">true</span>?<span class="literal">null</span>:url;//<span class="string">"http://y22711s118.iask.in/pay/cancle.html"</span></span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建支付</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="built_in">public</span> Payment createPayment(</span><br><span class="line">        <span class="type">Double</span> total,</span><br><span class="line">        String currency,</span><br><span class="line">        PaypalPaymentMethod <span class="keyword">method</span>,</span><br><span class="line">        PaypalPaymentIntent intent,</span><br><span class="line">        String description,</span><br><span class="line">        String cancelUrl,</span><br><span class="line">        String successUrl,</span><br><span class="line">        String outRepoOrderNo) throws PayPalRESTException &#123;</span><br><span class="line">    Amount amount = <span class="built_in">new</span> Amount();</span><br><span class="line">    amount.setCurrency(currency);</span><br><span class="line">    amount.setTotal(String.format("%.2f", total));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Transaction</span> <span class="keyword">transaction</span> = <span class="built_in">new</span> <span class="keyword">Transaction</span>();</span><br><span class="line">    <span class="keyword">transaction</span>.setDescription(description);</span><br><span class="line">    <span class="keyword">transaction</span>.setAmount(amount);</span><br><span class="line">    <span class="keyword">transaction</span>.setNotifyUrl(notifyurl);</span><br><span class="line">    <span class="keyword">transaction</span>.setCustom(outRepoOrderNo);//设置订单号<span class="comment">--就取自发货单好了</span></span><br><span class="line"></span><br><span class="line">    List&lt;<span class="keyword">Transaction</span>&gt; transactions = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    transactions.<span class="keyword">add</span>(<span class="keyword">transaction</span>);</span><br><span class="line"></span><br><span class="line">    Payer payer = <span class="built_in">new</span> Payer();</span><br><span class="line">    payer.setPaymentMethod(<span class="keyword">method</span>.toString());</span><br><span class="line"></span><br><span class="line">    Payment payment = <span class="built_in">new</span> Payment();</span><br><span class="line">    payment.setIntent(intent.toString());</span><br><span class="line">    payment.setPayer(payer);</span><br><span class="line">    payment.setTransactions(transactions);</span><br><span class="line">    RedirectUrls redirectUrls = <span class="built_in">new</span> RedirectUrls();</span><br><span class="line">    redirectUrls.setCancelUrl(cancelUrl);</span><br><span class="line">    redirectUrls.setReturnUrl(successUrl);</span><br><span class="line">    payment.setRedirectUrls(redirectUrls);</span><br><span class="line"></span><br><span class="line">    logger.<span class="keyword">info</span>("token: "+apiContext.getAccessToken());</span><br><span class="line">    <span class="keyword">return</span> payment.<span class="keyword">create</span>(apiContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行支付</p>
</blockquote>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Payment execute<span class="constructor">Payment(String <span class="params">paymentId</span>, String <span class="params">payerId</span>)</span> throws PayPalRESTException&#123;</span><br><span class="line">    Payment payment = <span class="keyword">new</span> <span class="constructor">Payment()</span>;</span><br><span class="line">    payment.set<span class="constructor">Id(<span class="params">paymentId</span>)</span>;</span><br><span class="line">    PaymentExecution paymentExecute = <span class="keyword">new</span> <span class="constructor">PaymentExecution()</span>;</span><br><span class="line">    paymentExecute.set<span class="constructor">PayerId(<span class="params">payerId</span>)</span>;</span><br><span class="line">    return payment.execute(apiContext, paymentExecute);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>paypal的ipn回调处理</p>
</blockquote>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">    @Transactional</span><br><span class="line">    @Override</span><br><span class="line">    public void paypal<span class="constructor">Callback(Map <span class="params">params</span>,HttpServletRequest <span class="params">request</span>,HttpServletResponse <span class="params">response</span>)</span> throws  IOException&#123;</span><br><span class="line">        logger.info(<span class="string">"paypalCallback &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 进入paypal后台支付通知"</span>);</span><br><span class="line">        PrintWriter out = response.get<span class="constructor">Writer()</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取paypal请求参数,并拼接验证参数  文档：https://developer.paypal.com/docs/ipn/integration-guide/ht-ipn/</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"打印一下姓氏："</span>+request.get<span class="constructor">Parameter(<span class="string">"first_name"</span>)</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; en = request.get<span class="constructor">ParameterNames()</span>;</span><br><span class="line">        String str = <span class="string">"cmd=_notify-validate"</span>;</span><br><span class="line">        <span class="keyword">while</span> (en.has<span class="constructor">MoreElements()</span>) &#123;</span><br><span class="line">            String paramName = en.next<span class="constructor">Element()</span>;</span><br><span class="line">            String paramValue = request.get<span class="constructor">Parameter(<span class="params">paramName</span>)</span>;<span class="comment">//通过参数名称获取参数值</span></span><br><span class="line">            <span class="comment">//此处的编码一定要和自己的网站编码一致，不然会出现乱码，paypal回复的通知为‘INVALID’</span></span><br><span class="line">            str = str + <span class="string">"&amp;"</span> + paramName + <span class="string">"="</span> + <span class="module-access"><span class="module"><span class="identifier">URLEncoder</span>.</span></span>encode(paramValue,<span class="string">"utf-8"</span>);<span class="comment">//utf-8 URLEncoder.encode(paramValue, "UTF-8")</span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"paramName: "</span>+paramName+<span class="string">"   paramValue:"</span>+paramValue);</span><br><span class="line">            logger.info(<span class="string">"paramName: "</span>+paramName+<span class="string">"   paramValue:"</span>+paramValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//建议在此将接受到的信息 str 记录到日志文件中以确认是否收到 IPN 信息</span></span><br><span class="line">        logger.info(<span class="string">"========================================================================================="</span>);</span><br><span class="line">        logger.info(<span class="string">"paypal传递过来的交易信息:"</span>+str);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将信息 POST 回给 PayPal 进行验证</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//验证地址测试环境和正式环境不一样配置在yml中</span></span><br><span class="line">        URL u = <span class="keyword">new</span> <span class="constructor">URL(<span class="params">ipnurl</span>)</span>;<span class="comment">//https://ipnpb.paypal.com/cgi-bin/webscr  https://ipnpb.sandbox.paypal.com/cgi-bin/webscr</span></span><br><span class="line">        HttpURLConnection uc = (HttpURLConnection) u.<span class="keyword">open</span><span class="constructor">Connection()</span>;</span><br><span class="line">        uc.set<span class="constructor">RequestMethod(<span class="string">"POST"</span>)</span>;</span><br><span class="line">        uc.set<span class="constructor">DoOutput(<span class="params">true</span>)</span>;</span><br><span class="line">        uc.set<span class="constructor">DoInput(<span class="params">true</span>)</span>;</span><br><span class="line">        uc.set<span class="constructor">UseCaches(<span class="params">false</span>)</span>;</span><br><span class="line">        <span class="comment">//设置 HTTP 的头信息</span></span><br><span class="line">        uc.set<span class="constructor">RequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span>;</span><br><span class="line">        PrintWriter pw = <span class="keyword">new</span> <span class="constructor">PrintWriter(<span class="params">uc</span>.<span class="params">getOutputStream</span>()</span>);</span><br><span class="line">        pw.println(str);</span><br><span class="line">        pw.close<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 接受 PayPal 对 IPN 回发的回复信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        BufferedReader <span class="keyword">in</span> = <span class="keyword">new</span> <span class="constructor">BufferedReader(<span class="params">new</span> InputStreamReader(<span class="params">uc</span>.<span class="params">getInputStream</span>()</span>));</span><br><span class="line">        String res = <span class="keyword">in</span>.read<span class="constructor">Line()</span>;</span><br><span class="line">        <span class="keyword">in</span>.close<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将 POST 信息分配给本地变量，可以根据您的需要添加</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String paymentStatus = request.get<span class="constructor">Parameter(<span class="string">"payment_status"</span>)</span>; <span class="comment">// 交易状态 Completed 代表交易成功</span></span><br><span class="line">        String paymentDate = request.get<span class="constructor">Parameter(<span class="string">"payment_date"</span>)</span>;<span class="comment">// 交易时间</span></span><br><span class="line">        String txnId = request.get<span class="constructor">Parameter(<span class="string">"txn_id"</span>)</span>; <span class="comment">// 交易id</span></span><br><span class="line">        String parentTxnId = request.get<span class="constructor">Parameter(<span class="string">"parent_txn_id"</span>)</span>; <span class="comment">// 父交易id</span></span><br><span class="line"><span class="comment">//        String receiverEmail = request.getParameter("receiver_email"); // 收款人email</span></span><br><span class="line"><span class="comment">//        String receiverId = request.getParameter("receiver_id"); // 收款人id</span></span><br><span class="line"><span class="comment">//        String payerEmail = request.getParameter("payer_email"); // 付款人email</span></span><br><span class="line"><span class="comment">//        String payerId = request.getParameter("payer_id");  // 付款人id</span></span><br><span class="line"><span class="comment">//        String mcGross = request.getParameter("mc_gross"); // 交易金额</span></span><br><span class="line">        String custom = request.get<span class="constructor">Parameter(<span class="string">"custom"</span>)</span>; <span class="comment">// 自定义字段，我们存放的订单ID</span></span><br><span class="line">        <span class="keyword">if</span> (res<span class="operator"> == </span>null<span class="operator"> || </span>res<span class="operator"> == </span><span class="string">""</span>) &#123;</span><br><span class="line">            res = <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">"res = "</span> + res);</span><br><span class="line">        logger.info(<span class="string">"paymentStatus = "</span> + paymentStatus);</span><br><span class="line">        logger.info(<span class="string">"txnI = "</span> + txnId);</span><br><span class="line">        logger.info(<span class="string">"parentTxnId = "</span> + parentTxnId);</span><br><span class="line">        logger.info(<span class="string">"custom = "</span> + custom);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取 PayPal 对回发信息的回复信息，判断刚才的通知是否为 PayPal 发出的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"VERIFIED"</span>.equals<span class="constructor">IgnoreCase(<span class="params">res</span>)</span>) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果 parentTxnId 不为空我们就认为是通知就不是第一次通知</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">StringUtil</span>.</span></span>is<span class="constructor">NotEmpty(<span class="params">parentTxnId</span>)</span>) &#123;</span><br><span class="line"><span class="comment">//                // 根据父支付交易号查询付款表数据</span></span><br><span class="line"><span class="comment">//                List&lt;ShopOrderPayment&gt; list = shopOrderPaymentService.getOrderPaymentByParentTxnId(parentTxnId);</span></span><br><span class="line">                Condition paypalTransCondition=<span class="keyword">new</span> <span class="constructor">Condition(TPaypalTrans.<span class="params">class</span>)</span>;</span><br><span class="line">                paypalTransCondition.create<span class="constructor">Criteria()</span>.<span class="keyword">and</span><span class="constructor">EqualTo(<span class="string">"parentTxnId"</span>,<span class="params">parentTxnId</span>)</span>;</span><br><span class="line">                List&lt;TPaypalTrans&gt; tPaypalTransList=tPaypalTransService.find<span class="constructor">ByCondition(<span class="params">paypalTransCondition</span>)</span>;</span><br><span class="line">                <span class="keyword">if</span> (null != tPaypalTransList<span class="operator"> &amp;&amp; </span>tPaypalTransList.size<span class="literal">()</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 保存支付历史记录数据</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    TPaypalTrans updateTPaypalTrans=<span class="keyword">new</span> <span class="constructor">TPaypalTrans()</span>;</span><br><span class="line">                    updateTPaypalTrans.set<span class="constructor">PaymentStatus(<span class="params">paymentStatus</span>)</span>;<span class="comment">//更新交易状态</span></span><br><span class="line">                    updateTPaypalTrans.set<span class="constructor">PaymentDate(<span class="params">paymentDate</span>)</span>;<span class="comment">//更新交易时间</span></span><br><span class="line">                    <span class="built_in">int</span> n=tPaypalTransService.update(updateTPaypalTrans,paypalTransCondition);</span><br><span class="line">                    <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        logger.info(<span class="string">"更新paypalTrans记录成功：[&#123;&#125;]"</span>,n);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        logger.info(<span class="string">"更新paypalTrans记录失败：[&#123;&#125;]"</span>,n);</span><br><span class="line">                        throw <span class="keyword">new</span> <span class="constructor">BizException(<span class="string">"更新paypalTrans记录失败"</span>)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="comment">//                    /**</span></span><br><span class="line"><span class="comment">//                     * 判断状态是complete则更新订单状态为待确认收货</span></span><br><span class="line"><span class="comment">//                     * 如果是refunded则更新订单状态为已完成</span></span><br><span class="line"><span class="comment">//                     */</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">COMPLETED_STATUS</span>.</span></span>equals<span class="constructor">IgnoreCase(<span class="params">paymentStatus</span>)</span><span class="operator"> &amp;&amp; </span><span class="module-access"><span class="module"><span class="identifier">StringUtils</span>.</span></span>is<span class="constructor">NotEmpty(<span class="params">custom</span>)</span>) &#123;</span><br><span class="line">                        <span class="comment">//状态是已经完成则进行更新发货表当中的状态OK  //进行更新发货单的状态为支付成功</span></span><br><span class="line">                        TOutRepoOrder tOutRepoOrder=<span class="keyword">new</span> <span class="constructor">TOutRepoOrder()</span>;</span><br><span class="line">                        tOutRepoOrder.set<span class="constructor">TakeDeliveryId(<span class="params">custom</span>)</span>;</span><br><span class="line">                        tOutRepoOrder=tOutRepoOrderService.find<span class="constructor">OneForUpdate(<span class="params">tOutRepoOrder</span>)</span>;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="number">1</span>==tOutRepoOrder.get<span class="constructor">FinanceStatus()</span>)&#123;</span><br><span class="line">                            <span class="comment">//已经更新为已支付无需再次更新下============================================</span></span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="comment">//进行更新为已支付</span></span><br><span class="line">                            TOutRepoOrder updateTOutRepoOrder=<span class="keyword">new</span> <span class="constructor">TOutRepoOrder()</span>;</span><br><span class="line">                            updateTOutRepoOrder.set<span class="constructor">FinanceStatus(1)</span>;<span class="comment">////财务状态0-待确认账单，1-等待支付，2-已支付/3-无需支付 david:还要把订单状态改为“待投入渠道</span></span><br><span class="line">                            updateTOutRepoOrder.set<span class="constructor">Status(2)</span>;<span class="comment">//0 :待发送账单/1:待放货/2:待投入渠道/3:已投入渠道/4：已完成 / 5：已取消*/</span></span><br><span class="line">                            updateTOutRepoOrder.set<span class="constructor">LastUpdateDate((System.<span class="params">currentTimeMillis</span>()</span>/<span class="number">1000L</span>));</span><br><span class="line">                            updateTOutRepoOrder.set<span class="constructor">ConfirmPaymentDate((System.<span class="params">currentTimeMillis</span>()</span>/<span class="number">1000L</span>));<span class="comment">//确认支付时间</span></span><br><span class="line">                            Condition updateOutRepoCondition=<span class="keyword">new</span> <span class="constructor">Condition(TOutRepoOrder.<span class="params">class</span>)</span>;</span><br><span class="line">                            updateOutRepoCondition.create<span class="constructor">Criteria()</span>.<span class="keyword">and</span><span class="constructor">EqualTo(<span class="string">"takeDeliveryId"</span>,<span class="params">custom</span>)</span>;</span><br><span class="line">                            <span class="built_in">int</span> m=tOutRepoOrderService.update(updateTOutRepoOrder,updateOutRepoCondition);</span><br><span class="line">                            <span class="keyword">if</span>(m&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                                logger.info(<span class="string">"更新发货单成功：[&#123;&#125;]"</span>,m);</span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                logger.info(<span class="string">"更新发货单失败：[&#123;&#125;]"</span>,m);</span><br><span class="line">                                <span class="module-access"><span class="module"><span class="identifier">TransactionAspectSupport</span>.</span></span>current<span class="constructor">TransactionStatus()</span>.set<span class="constructor">RollbackOnly()</span>;</span><br><span class="line">                                throw <span class="keyword">new</span> <span class="constructor">BizException(<span class="string">"更新发货单失败"</span>)</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">REFUNDED_STATUS</span>.</span></span>equals<span class="constructor">IgnoreCase(<span class="params">paymentStatus</span>)</span>) &#123;</span><br><span class="line">                    <span class="comment">//paypalService.updateOrderStatus(shopOrderPayment.getOrderId(), com.sunvalley.shop.order.constants.Constants.OrderStatus.STATUS_COMPLETE);</span></span><br><span class="line">                    <span class="comment">//暂时不处理，退款状态</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    logger.error(<span class="string">"父支付交易号："</span> + parentTxnId + <span class="string">" 在支付表中不存在"</span>);</span><br><span class="line">                    logger.error(<span class="string">"Class: "</span>+this.get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span>+<span class="string">" method: "</span>+</span><br><span class="line">                            <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">StackTrace()</span><span class="literal">[<span class="number">1</span>]</span>.get<span class="constructor">MethodName()</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 第一次回调通知,根据 txnId 查询。如果存在则表示支付实时返回结果已经记录了，不存在则表示实时返回结果没有记录到</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                TPaypalTrans tPaypalTrans=<span class="keyword">new</span> <span class="constructor">TPaypalTrans()</span>;</span><br><span class="line">                tPaypalTrans.set<span class="constructor">TxnId(<span class="params">txnId</span>)</span>;</span><br><span class="line">                tPaypalTrans=tPaypalTransService.find<span class="constructor">OneForUpdate(<span class="params">tPaypalTrans</span>)</span>;</span><br><span class="line">                <span class="keyword">if</span> (null != tPaypalTrans ) &#123;<span class="comment">//存在记录  &amp;&amp; paymentList.size() &gt; 0</span></span><br><span class="line">                    TPaypalTrans orderPaymentTmp = tPaypalTrans;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">COMPLETED_STATUS</span>.</span></span>equals<span class="constructor">IgnoreCase(<span class="params">orderPaymentTmp</span>.<span class="params">getPaymentStatus</span>()</span>)) &#123;</span><br><span class="line">                        logger.info(<span class="string">"================ 支付表数据已经是complete了，不需要更新 ================"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果回传的状态不是complete则更新我们的支付数据</span></span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 更新支付状态</span></span><br><span class="line"><span class="comment">                         * 保存支付历史记录数据</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        TPaypalTrans updateTPaypalTrans=<span class="keyword">new</span> <span class="constructor">TPaypalTrans()</span>;</span><br><span class="line">                        updateTPaypalTrans.set<span class="constructor">PaymentStatus(<span class="params">paymentStatus</span>)</span>;<span class="comment">//更新交易状态</span></span><br><span class="line">                        updateTPaypalTrans.set<span class="constructor">PaymentDate(<span class="params">paymentDate</span>)</span>;<span class="comment">//更新交易时间</span></span><br><span class="line">                        Condition updatePaypalCondition=<span class="keyword">new</span> <span class="constructor">Condition(TPaypalTrans.<span class="params">class</span>)</span>;</span><br><span class="line">                        updatePaypalCondition.create<span class="constructor">Criteria()</span>.<span class="keyword">and</span><span class="constructor">EqualTo(<span class="string">"txn_id"</span>,<span class="params">txnId</span>)</span>;</span><br><span class="line">                        <span class="built_in">int</span> n=tPaypalTransService.update(updateTPaypalTrans,updatePaypalCondition);</span><br><span class="line">                        <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                            logger.info(<span class="string">"更新paypal记录成功：[&#123;&#125;]"</span>,n);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            logger.info(<span class="string">"更新paypal记录失败：[&#123;&#125;]"</span>,n);</span><br><span class="line">                            throw <span class="keyword">new</span> <span class="constructor">BizException(<span class="string">"更新paypal记录失败"</span>)</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">COMPLETED_STATUS</span>.</span></span>equals<span class="constructor">IgnoreCase(<span class="params">paymentStatus</span>)</span><span class="operator"> &amp;&amp; </span><span class="module-access"><span class="module"><span class="identifier">StringUtils</span>.</span></span>is<span class="constructor">NotEmpty(<span class="params">custom</span>)</span>) &#123;</span><br><span class="line">                            <span class="comment">//进行更新发货单的状态为支付成功</span></span><br><span class="line">                            TOutRepoOrder tOutRepoOrder=<span class="keyword">new</span> <span class="constructor">TOutRepoOrder()</span>;</span><br><span class="line">                            tOutRepoOrder.set<span class="constructor">TakeDeliveryId(<span class="params">custom</span>)</span>;</span><br><span class="line">                            tOutRepoOrder=tOutRepoOrderService.find<span class="constructor">OneForUpdate(<span class="params">tOutRepoOrder</span>)</span>;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="number">3</span>==tOutRepoOrder.get<span class="constructor">FinanceStatus()</span>)&#123;</span><br><span class="line">                                <span class="comment">//已经更新为已支付无需再次更新下============================================</span></span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                <span class="comment">//进行更新为已支付</span></span><br><span class="line">                                TOutRepoOrder updateTOutRepoOrder=<span class="keyword">new</span> <span class="constructor">TOutRepoOrder()</span>;</span><br><span class="line">                                updateTOutRepoOrder.set<span class="constructor">FinanceStatus(1)</span>;<span class="comment">// 财务状态0-未支付，1-已支付</span></span><br><span class="line">                                updateTOutRepoOrder.set<span class="constructor">Status(2)</span>;<span class="comment">//0 :待发送账单/1:待放货/2:待投入渠道/3:已投入渠道/4：已完成 / 5：已取消*/</span></span><br><span class="line">                                updateTOutRepoOrder.set<span class="constructor">LastUpdateDate((System.<span class="params">currentTimeMillis</span>()</span>/<span class="number">1000L</span>));</span><br><span class="line">                                updateTOutRepoOrder.set<span class="constructor">ConfirmPaymentDate((System.<span class="params">currentTimeMillis</span>()</span>/<span class="number">1000L</span>));<span class="comment">//确认支付时间</span></span><br><span class="line">                                Condition updateOutRepoCondition=<span class="keyword">new</span> <span class="constructor">Condition(TOutRepoOrder.<span class="params">class</span>)</span>;</span><br><span class="line">                                updateOutRepoCondition.create<span class="constructor">Criteria()</span>.<span class="keyword">and</span><span class="constructor">EqualTo(<span class="string">"takeDeliveryId"</span>,<span class="params">custom</span>)</span>;</span><br><span class="line">                                <span class="built_in">int</span> m=tOutRepoOrderService.update(updateTOutRepoOrder,updateOutRepoCondition);</span><br><span class="line">                                <span class="keyword">if</span>(m&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                                    logger.info(<span class="string">"更新发货单成功：[&#123;&#125;]"</span>,m);</span><br><span class="line">                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                    logger.info(<span class="string">"更新发货单失败：[&#123;&#125;]"</span>,m);</span><br><span class="line">                                    <span class="module-access"><span class="module"><span class="identifier">TransactionAspectSupport</span>.</span></span>current<span class="constructor">TransactionStatus()</span>.set<span class="constructor">RollbackOnly()</span>;</span><br><span class="line">                                    throw <span class="keyword">new</span> <span class="constructor">BizException(<span class="string">"更新发货单失败"</span>)</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 保存支付信息   不存在记录</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">StringUtil</span>.</span></span>is<span class="constructor">NotEmpty(<span class="params">custom</span>)</span><span class="operator"> &amp;&amp; </span><span class="module-access"><span class="module"><span class="identifier">COMPLETED_STATUS</span>.</span></span>equals<span class="constructor">IgnoreCase(<span class="params">paymentStatus</span>)</span>) &#123; <span class="comment">//订单号为空则无法进行更新发货单状态</span></span><br><span class="line">                        <span class="comment">//进行判断如果paymentStatus为completed则进行更新</span></span><br><span class="line">                        TOutRepoOrder tOutRepoOrder=<span class="keyword">new</span> <span class="constructor">TOutRepoOrder()</span>;</span><br><span class="line">                        tOutRepoOrder.set<span class="constructor">TakeDeliveryId(<span class="params">custom</span>)</span>;</span><br><span class="line">                        tOutRepoOrder=tOutRepoOrderService.find<span class="constructor">OneForUpdate(<span class="params">tOutRepoOrder</span>)</span>;</span><br><span class="line">                        <span class="keyword">if</span>(tOutRepoOrder!=null)&#123;</span><br><span class="line">                            TOutRepoOrder updateTOutRepoOrder=<span class="keyword">new</span> <span class="constructor">TOutRepoOrder()</span>;</span><br><span class="line">                            updateTOutRepoOrder.set<span class="constructor">FinanceStatus(1)</span>;<span class="comment">////财务状态0-待确认账单，1-等待支付，2-已支付/3-无需支付</span></span><br><span class="line">                            updateTOutRepoOrder.set<span class="constructor">Status(2)</span>;<span class="comment">//0 :待发送账单/1:待放货/2:待投入渠道/3:已投入渠道/4：已完成 / 5：已取消*/</span></span><br><span class="line">                            updateTOutRepoOrder.set<span class="constructor">LastUpdateDate((System.<span class="params">currentTimeMillis</span>()</span>/<span class="number">1000L</span>));</span><br><span class="line">                            updateTOutRepoOrder.set<span class="constructor">ConfirmPaymentDate((System.<span class="params">currentTimeMillis</span>()</span>/<span class="number">1000L</span>));<span class="comment">//确认支付时间</span></span><br><span class="line">                            Condition updateOutRepoCondition=<span class="keyword">new</span> <span class="constructor">Condition(TOutRepoOrder.<span class="params">class</span>)</span>;</span><br><span class="line">                            updateOutRepoCondition.create<span class="constructor">Criteria()</span>.<span class="keyword">and</span><span class="constructor">EqualTo(<span class="string">"takeDeliveryId"</span>,<span class="params">custom</span>)</span>;</span><br><span class="line">                            <span class="built_in">int</span> m=tOutRepoOrderService.update(updateTOutRepoOrder,updateOutRepoCondition);</span><br><span class="line">                            <span class="keyword">if</span>(m&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                                logger.info(<span class="string">"更新发货单成功：[&#123;&#125;]"</span>,m);</span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                logger.info(<span class="string">"更新发货单失败：[&#123;&#125;]"</span>,m);</span><br><span class="line">                                <span class="module-access"><span class="module"><span class="identifier">TransactionAspectSupport</span>.</span></span>current<span class="constructor">TransactionStatus()</span>.set<span class="constructor">RollbackOnly()</span>;</span><br><span class="line">                                throw <span class="keyword">new</span> <span class="constructor">BizException(<span class="string">"更新发货单失败"</span>)</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="comment">//通过custom商户订单号在发货单当中查找不到</span></span><br><span class="line">                            logger.info(<span class="string">"商户订单号custom在发货单中不存在"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        logger.info(<span class="string">"***************** paypal回传的订单ID为空 **************"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    logger.info(<span class="string">"新增paypalTrans"</span>);</span><br><span class="line">                    TPaypalTrans insertTPaypalTrans= get<span class="constructor">Value(<span class="params">params</span>)</span>;<span class="comment">//调用赋值</span></span><br><span class="line">                    <span class="built_in">int</span> n=tPaypalTransMapper.add(insertTPaypalTrans);</span><br><span class="line">                    <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        logger.info(<span class="string">"新增paypal记录成功：[&#123;&#125;]"</span>,n);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        logger.info(<span class="string">"新增paypal记录失败：[&#123;&#125;]"</span>,n);</span><br><span class="line">                        throw <span class="keyword">new</span> <span class="constructor">BizException(<span class="string">"新增paypal记录失败"</span>)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    logger.info(<span class="string">"================= 支付信息保存成功，订单状态更新成待发货成功 ===================="</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"INVALID"</span>.equals<span class="constructor">IgnoreCase(<span class="params">res</span>)</span>) &#123;</span><br><span class="line">            <span class="comment">//非法信息，可以将此记录到您的日志文件中以备调查</span></span><br><span class="line">            logger.error(<span class="string">"paypal完成支付发送IPN通知返回状态非法，请联系管理员，请求参数："</span> + str);</span><br><span class="line">            logger.error(<span class="string">"Class: "</span>+this.get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span>+<span class="string">" method: "</span>+</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">StackTrace()</span><span class="literal">[<span class="number">1</span>]</span>.get<span class="constructor">MethodName()</span>);</span><br><span class="line">            out.println(<span class="string">"confirmError"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//处理其他错误</span></span><br><span class="line">            logger.error(<span class="string">"paypal完成支付发送IPN通知发生其他异常，请联系管理员，请求参数："</span> + str);</span><br><span class="line">            logger.error(<span class="string">"Class: "</span>+this.get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span>+<span class="string">" method: "</span>+</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">StackTrace()</span><span class="literal">[<span class="number">1</span>]</span>.get<span class="constructor">MethodName()</span>);</span><br><span class="line">            out.println(<span class="string">"confirmError"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"确认付款信息发生IO异常"</span> + e.get<span class="constructor">Message()</span>);</span><br><span class="line">        logger.error(<span class="string">"Class: "</span>+this.get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span>+<span class="string">" method: "</span>+</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">StackTrace()</span><span class="literal">[<span class="number">1</span>]</span>.get<span class="constructor">MethodName()</span>);</span><br><span class="line">        out.println(<span class="string">"confirmError"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        out.flush<span class="literal">()</span>;</span><br><span class="line">        out.close<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>反射</p>
</blockquote>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过参数获取paypaltrans</span></span><br><span class="line"><span class="comment">     * @param params</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public TPaypalTrans get<span class="constructor">Value(Map <span class="params">params</span>)</span> throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        Class&lt;?&gt; c =<span class="module-access"><span class="module"><span class="identifier">TPaypalTrans</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line">        Object obj = c.<span class="keyword">new</span><span class="constructor">Instance()</span>; <span class="comment">//使用字段（使用之前我们需要一个该类对象）</span></span><br><span class="line">        logger.info(<span class="string">"getValue - 获取实例"</span>);</span><br><span class="line">        Set&lt;Map.Entry&gt; set=params.entry<span class="constructor">Set()</span>;</span><br><span class="line">        for (Map.Entry entry:set)&#123;</span><br><span class="line">            String keyName=entry.get<span class="constructor">Key()</span>.<span class="keyword">to</span><span class="constructor">String()</span>;</span><br><span class="line"></span><br><span class="line">            StringBuffer stringBuffer=<span class="keyword">new</span> <span class="constructor">StringBuffer(<span class="string">""</span>)</span>;</span><br><span class="line">            String<span class="literal">[]</span> strings=keyName.split(<span class="string">"_"</span>);</span><br><span class="line">            for (<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;strings.length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                    stringBuffer.append(strings<span class="literal">[<span class="identifier">i</span>]</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    String start=strings<span class="literal">[<span class="identifier">i</span>]</span>.substring(<span class="number">0</span>,<span class="number">1</span>).<span class="keyword">to</span><span class="constructor">UpperCase()</span>;<span class="comment">//大写首位</span></span><br><span class="line">                    String <span class="keyword">end</span>=strings<span class="literal">[<span class="identifier">i</span>]</span>.substring(<span class="number">1</span>);<span class="comment">//截取后面的字符串</span></span><br><span class="line">                    stringBuffer.append(start).append(<span class="keyword">end</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(<span class="string">"keyName: "</span>+keyName+<span class="string">"     property: "</span>+stringBuffer.<span class="keyword">to</span><span class="constructor">String()</span>);</span><br><span class="line">            String valueStr=((String<span class="literal">[]</span>)entry.get<span class="constructor">Value()</span>)<span class="literal">[<span class="number">0</span>]</span>;</span><br><span class="line">            logger.info(<span class="string">"valueStr: "</span>+valueStr);</span><br><span class="line"></span><br><span class="line">            Field field = c.get<span class="constructor">DeclaredField(<span class="params">stringBuffer</span>.<span class="params">toString</span>()</span>);<span class="comment">//获取私有字段</span></span><br><span class="line"></span><br><span class="line">            field.set<span class="constructor">Accessible(<span class="params">true</span>)</span>;<span class="comment">//暴力访问  //使用set()方法设置字段值</span></span><br><span class="line">            field.set(obj, valueStr);</span><br><span class="line">        &#125;</span><br><span class="line">        TPaypalTrans tPaypalTrans =(TPaypalTrans)obj;</span><br><span class="line">        logger.info(<span class="string">"getValue - tPaypalTrans: "</span>+<span class="module-access"><span class="module"><span class="identifier">JSONObject</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">tPaypalTrans</span>)</span>);</span><br><span class="line">        return tPaypalTrans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>paypal的Ipn回调的响应内容</p>
</blockquote>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">       /*</span><br><span class="line">       Paypal回调的响应内容：</span><br><span class="line">20200221 11:23:19.734 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[mc_gross]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[500.00]</span></span><br><span class="line">20200221 11:23:19.734 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[protection_eligibility]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[Ineligible]</span></span><br><span class="line">20200221 11:23:19.734 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[address_status]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[confirmed]</span></span><br><span class="line">20200221 11:23:19.734 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[payer_id]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[ZEA54X9BSHDWQ]</span></span><br><span class="line">20200221 11:23:19.735 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[address_street]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[NO 1 Nan Jin Road]</span></span><br><span class="line">20200221 11:23:19.735 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[payment_date]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[19:23:08 Feb 20, 2020 PST]</span></span><br><span class="line">20200221 11:23:19.735 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[payment_status]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[Pending]</span></span><br><span class="line">20200221 11:23:19.735 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[charset]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[gb2312]</span></span><br><span class="line">20200221 11:23:19.735 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[address_zip]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[200000]</span></span><br><span class="line">20200221 11:23:19.735 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[first_name]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[sn]</span></span><br><span class="line">20200221 11:23:19.735 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[mc_fee]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[17.30]</span></span><br><span class="line">20200221 11:23:19.736 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[address_country_code]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[CN]</span></span><br><span class="line">20200221 11:23:19.736 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[address_name]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[F sn]</span></span><br><span class="line">20200221 11:23:19.736 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[notify_version]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[3.9]</span></span><br><span class="line">20200221 11:23:19.736 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[custom]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[OUB20200221112152]</span></span><br><span class="line">20200221 11:23:19.736 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[payer_status]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[verified]</span></span><br><span class="line">20200221 11:23:19.736 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[business]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[sb2@business.example.com]</span></span><br><span class="line">20200221 11:23:19.737 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[address_country]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[China]</span></span><br><span class="line">20200221 11:23:19.737 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[address_city]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[Shanghai]</span></span><br><span class="line">20200221 11:23:19.737 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[quantity]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[1]</span></span><br><span class="line">20200221 11:23:19.737 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[verify_sign]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[A739FTSMk8kYJ.miuYv3SfmM-AuZAiAh8kw3F81AGspKHFru4lpfnZ02]</span></span><br><span class="line">20200221 11:23:19.737 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[payer_email]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[sb1@personal.example.com]</span></span><br><span class="line">20200221 11:23:19.737 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[txn_id]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[67Y54097JV355643W]</span></span><br><span class="line">20200221 11:23:19.737 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[payment_type]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[instant]</span></span><br><span class="line">20200221 11:23:19.737 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[last_name]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[F]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[address_state]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[Shanghai]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[receiver_email]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[sb2@business.example.com]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[payment_fee]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[17.30]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[shipping_discount]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[0.00]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[insurance_amount]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[0.00]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[receiver_id]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[3L9GARBGYFZVS]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[pending_reason]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[paymentreview]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[txn_type]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[express_checkout]</span></span><br><span class="line">20200221 11:23:19.738 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[item_name]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[payment description]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[discount]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[0.00]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[mc_currency]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[USD]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[item_number]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[residence_country]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[CN]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[test_ipn]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[1]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[shipping_method]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[Default]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[transaction_subject]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[payment description]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[payment_gross]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[500.00]</span></span><br><span class="line">20200221 11:23:19.739 PayControl.java:84 INFO  - <span class="comment">[KEY]</span> :<span class="comment">[ipn_track_id]</span>  -  <span class="comment">[VALUE]</span> :<span class="comment">[95332aa3b4c2f]</span></span><br><span class="line">        */</span><br></pre></td></tr></table></figure>

<h2 id="与Paypal小哥的聊天记录"><a href="#与Paypal小哥的聊天记录" class="headerlink" title="与Paypal小哥的聊天记录"></a>与Paypal小哥的聊天记录</h2><p>为了对接这个paypal支付也是花了不少时间搞。<br>也不是说难点多，就是API文档是英文，所以我又不像david对着英文就可以搞，我还借助了谷歌的翻译，左看看右看看。<br>好了话不多说，看下我跟paypal小哥聊了些啥。<br>其实我怀疑这个Castle小哥是被我搞烦了。  </p>
<p>Castle：老是问老是问，不知道看API文档？官方文档干什么吃的，你老是问我，让官方文档一点尊严都没有。<br>我：o(╥﹏╥)o，对不起API文档。  </p>
<p>最终的一个paypal的一个token老是失效问题，Castle小哥让我换给jar包：<br>之前的jar包当中token没有自动更新需要自己去手动更新，然而我之前的想法就是还想着自己去更新下，我真是个傻逼。<br>从此Castle用血的教训告诉我要看官方文档。害，是我不争气，对不住了老哥。  </p>
<ol>
<li>这个是处理ipn回调的聊天，主要是ipn回调没调过来。</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">尊敬的商户</span> <span class="string">您好，</span></span><br><span class="line"></span><br><span class="line"><span class="attr">感谢您联系PayPal商家技术支持，我是技术工程师Castle，很高兴能有机会帮助您。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">我这边查看了一下您的sandbox账号fsn2915324940@163.com，发现IPN发送记录是正常的且发送地址为：http</span>:<span class="string">//y22711s118.iask.in/api/v1/pay/paypalCallBack</span></span><br><span class="line"></span><br><span class="line"><span class="meta">并且收到了来自您系统返回的200</span> <span class="string">response，以下是一条发送成功的IPN记录范例：</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Message</span> <span class="string">ID</span></span><br><span class="line"><span class="attr">30P16273JX693701F</span></span><br><span class="line"><span class="attr">Unencrypted</span> <span class="string">Message ID</span></span><br><span class="line"><span class="attr">249249217</span></span><br><span class="line"><span class="attr">Time</span> <span class="string">Created</span></span><br><span class="line"><span class="attr">Feb</span> <span class="string">5, 2020 06:25:36 PST</span></span><br><span class="line"><span class="attr">PayPal</span> <span class="string">Account</span></span><br><span class="line"><span class="attr">John</span> <span class="string">Doe's Test Store</span></span><br><span class="line"><span class="attr">Transaction</span> <span class="string">ID</span></span><br><span class="line"><span class="attr">6YS701801F562190A</span></span><br><span class="line"><span class="attr">Delivery</span> <span class="string">Status</span></span><br><span class="line"><span class="attr">Sent</span></span><br><span class="line"><span class="attr">HTTP</span> <span class="string">Response</span></span><br><span class="line"><span class="attr">200</span></span><br><span class="line"><span class="attr">Last</span> <span class="string">IPN send Attempt</span></span><br><span class="line"><span class="attr">Feb</span> <span class="string">5, 2020 06:43:16 PST</span></span><br><span class="line"><span class="attr">Destination</span> <span class="string">URL</span></span><br><span class="line"><span class="attr">http</span>:<span class="string">//y22711s118.iask.in/api/v1/pay/paypalCallBack</span></span><br><span class="line"><span class="attr">Number</span> <span class="string">of Retries</span></span><br><span class="line"><span class="attr">0</span></span><br><span class="line"><span class="attr">Type</span></span><br><span class="line"><span class="attr">Transaction</span> <span class="string">made</span></span><br><span class="line"></span><br><span class="line"><span class="attr">IPN</span> <span class="string">Text</span></span><br><span class="line"><span class="attr">mc_gross</span>=<span class="string">500.00&amp;protection_eligibility=Eligible&amp;address_status=confirmed&amp;</span></span><br><span class="line"><span class="attr">payer_id</span>=<span class="string">A2YKGTAGML7V4&amp;address_street=NO 1 Nan Jin Road&amp;</span></span><br><span class="line"><span class="attr">payment_date</span>=<span class="string">19:46:23 Feb 03, 2020 PST&amp;payment_status=Refunded&amp;charset=gb2312&amp;</span></span><br><span class="line"><span class="attr">address_zip</span>=<span class="string">200000&amp;first_name=莎娜&amp;mc_fee=17.30&amp;address_country_code=CN&amp;</span></span><br><span class="line"><span class="attr">address_name</span>=<span class="string">冯 莎娜&amp;notify_version=3.9&amp;custom=&amp;payer_status=verified&amp;</span></span><br><span class="line"><span class="attr">business</span>=<span class="string">fsn2915324940@163.com&amp;address_country=China&amp;address_city=Shanghai&amp;quantity=1&amp;</span></span><br><span class="line"><span class="attr">verify_sign</span>=<span class="string">AveljTgX9XcE.t0NAN3EYVNEITeVADrLxwEBMAJMMvQqLXMKbbzDQEck&amp;</span></span><br><span class="line"><span class="attr">payer_email</span>=<span class="string">198866436@qq.com&amp;txn_id=6YS701801F562190A&amp;payment_type=instant&amp;last_name=冯&amp;</span></span><br><span class="line"><span class="attr">address_state</span>=<span class="string">Shanghai&amp;receiver_email=fsn2915324940@163.com&amp;payment_fee=17.30&amp;</span></span><br><span class="line"><span class="attr">shipping_discount</span>=<span class="string">0.00&amp;insurance_amount=0.00&amp;receiver_id=DH7T6UAAXRMHQ&amp;</span></span><br><span class="line"><span class="attr">txn_type</span>=<span class="string">express_checkout&amp;item_name=payment description&amp;discount=0.00&amp;mc_currency=USD&amp;</span></span><br><span class="line"><span class="attr">item_number</span>=<span class="string">&amp;residence_country=CN&amp;test_ipn=1&amp;shipping_method=Default&amp;</span></span><br><span class="line"><span class="attr">transaction_subject</span>=<span class="string">payment description&amp;payment_gross=500.00&amp;ipn_track_id=ad78e05c1c28d</span></span><br><span class="line"></span><br><span class="line"><span class="attr">但由于前几天我们在sandbox环境有出现过IPN发送异常的系统错误，您遇到的问题可能与那个有关。那个问题目前已经修复了，请您再尝试一下，看现在能不能顺利收到IPN通知？</span></span><br><span class="line"></span><br><span class="line"><span class="attr">期待您的回复，如果您还有其他产品集成或者交易方面的问题，欢迎随时来信与我们联系。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">友情提醒，请注意如果您没有在该事件发起后的7天之内回复我们，那么该事件将会被自动关闭。届时如果您还有其他问题也可以重新提交一个Case。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">感谢您的耐心和理解，祝您工作顺利生活愉快。</span></span><br><span class="line"><span class="attr">谢谢</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Castle</span></span><br><span class="line"><span class="attr">PayPal</span> <span class="string">商家技术支持部</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ref</span>:<span class="string">_00D30LaY._5002E1WyRdd:ref</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>还是ipn回调问题</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">尊敬的商户 您好，</span><br><span class="line"></span><br><span class="line">感谢您联系PayPal商家技术支持，我是技术工程师Castle，很高兴能有机会帮助您。</span><br><span class="line"></span><br><span class="line">我查看了一下您的这个sandbox账号，确实目前最新的IPN消息也显示queue状态。这个可能是由于sandbox环境的一些内部错误所导致的。</span><br><span class="line">正常情况下IPN通知应该会在交易状态发生改变（如支付成功，或者退款成功等）时立即发出，有时由于网络原因或服务器负荷等因素，可能会有几秒钟到几分钟的延迟，但超过一小时的话一般都是有一些系统错误导致的。</span><br><span class="line"></span><br><span class="line">目前该问题已经上报给相关的产品研发部门，并且正在紧急修复中了。</span><br><span class="line">给您造成的不便我们非常抱歉，如果有任何进展我们会第一时间通知您，感谢您的耐心和理解。</span><br><span class="line"></span><br><span class="line">期待您的回复，如果您还有其他产品集成或者交易方面的问题，欢迎随时来信与我们联系。</span><br><span class="line"></span><br><span class="line">友情提醒，请注意如果您没有在该事件发起后的<span class="number">7</span>天之内回复我们，那么该事件将会被自动关闭。届时如果您还有其他问题也可以重新提交一个Case。</span><br><span class="line"></span><br><span class="line">感谢您的耐心和理解，祝您工作顺利生活愉快。</span><br><span class="line">谢谢</span><br><span class="line"></span><br><span class="line">Castle</span><br><span class="line">PayPal 商家技术支持部</span><br><span class="line"></span><br><span class="line"><span class="built_in">ref</span>:<span class="module-access"><span class="module"><span class="identifier">_00D30LaY</span>.</span><span class="module"><span class="identifier">_5002E1XCagT</span>:</span></span><span class="built_in">ref</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>关于订单查询</li>
</ol>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">您好， </span><br><span class="line">感谢您联系<span class="string">PayPal商</span>家技术支持中心，我是技术工程师<span class="string">Kevin，</span>很高兴能为您提供技术服务。</span><br><span class="line"></span><br><span class="line">关于查询订单以及订单详情的<span class="string">API，</span> 请参照以下<span class="string">URL。</span></span><br><span class="line"></span><br><span class="line">交易订单查询：</span><br><span class="line"><span class="string">https:</span>//<span class="string">developer.</span><span class="string">paypal.</span><span class="string">com/</span><span class="string">docs/</span><span class="string">archive/</span><span class="string">nvp-soap-</span><span class="string">api/</span><span class="string">merchant/</span><span class="string">transaction-search-</span><span class="string">nvp/</span></span><br><span class="line"></span><br><span class="line">交易订单详细：</span><br><span class="line"><span class="string">https:</span>//<span class="string">developer.</span><span class="string">paypal.</span><span class="string">com/</span><span class="string">docs/</span><span class="string">archive/</span><span class="string">nvp-soap-</span><span class="string">api/</span><span class="string">merchant/</span><span class="built_in">get-transaction-details-nvp/</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">以上，谢谢。</span></span><br><span class="line"><span class="built_in">祝您生活愉快。</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">Kevin</span></span><br><span class="line"><span class="built_in">PayPal商家技术支持</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">ref:_00D30LaY._5002E1XDl2l:ref</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>paypal支付链接是否能够失效</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">您好， </span><br><span class="line">感谢您联系PayPal商家技术支持中心。</span><br><span class="line"></span><br><span class="line">&gt;&gt;有能够是paypal支付链接失效的api文档吗，能发下吗 就是通过该paypal支付链接使客户端用户无法付款</span><br><span class="line">很抱歉，PayPal并没有相关的API让支付链接失效。</span><br><span class="line"></span><br><span class="line">感谢您的理解与支持。</span><br><span class="line"></span><br><span class="line">以上， 谢谢。</span><br><span class="line">祝您生活愉快！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PayPal商家技术支持</span><br><span class="line"></span><br><span class="line"><span class="built_in">ref</span>:<span class="module-access"><span class="module"><span class="identifier">_00D30LaY</span>.</span><span class="module"><span class="identifier">_5002E1XRqWK</span>:</span></span><span class="built_in">ref</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>ipn回调</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">尊敬的商户 您好，</span><br><span class="line"></span><br><span class="line">感谢您联系PayPal商家技术支持，我是技术工程师Castle，很高兴能有机会帮助您。</span><br><span class="line"></span><br><span class="line">根据您的描述，如果输入英文信息都能验证成功，但有中文信息就失败的话，应该是由于<span class="keyword">encoding</span>设置的原因导致验证无法成功。并且由于我们的商户设置页面更新的缘故，原来的入口发生了变化，所以找不到。</span><br><span class="line">请尝试通过以下步骤在您测试的商户账号中将<span class="keyword">encoding</span>设置改为UTF<span class="number">-8</span>应该就能解决：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>）登录您的PayPal账号后打开这个链接进入设置页面：https://www.paypal.com/cgi-bin/customerprofileweb?cmd=_profile-<span class="keyword">language</span>-<span class="keyword">encoding</span>，如果是sandbox账号的话请打开这个链接：https://www.sandbox.paypal.com/cgi-bin/customerprofileweb?cmd=_profile-<span class="keyword">language</span>-<span class="keyword">encoding</span></span><br><span class="line"><span class="number">2</span>）然后选择More <span class="keyword">Options</span>进入<span class="keyword">encoding</span>选择页面，一般选择UTF8</span><br><span class="line"><span class="number">3</span>）确保您的网站页面也是采用相同的字符编码（UTF8）就不会出错了。</span><br><span class="line"></span><br><span class="line">期待您的回复，如果您还有其他产品集成或者交易方面的问题，欢迎随时来信与我们联系。</span><br><span class="line"></span><br><span class="line">友情提醒，请注意如果您没有在该事件发起后的<span class="number">7</span>天之内回复我们，那么该事件将会被自动关闭。届时如果您还有其他问题也可以重新提交一个<span class="keyword">Case</span>。</span><br><span class="line"></span><br><span class="line">感谢您的耐心和理解，祝您工作顺利生活愉快。</span><br><span class="line">谢谢</span><br><span class="line"></span><br><span class="line">Castle</span><br><span class="line">PayPal 商家技术支持部</span><br><span class="line"></span><br><span class="line"><span class="keyword">ref</span>:_00D30LaY._5002E1XRp4f:<span class="keyword">ref</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>paypal token方面的执着</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">尊敬的商户 您好，</span><br><span class="line"></span><br><span class="line">感谢您联系PayPal商家技术支持，我是技术工程师Castle，很高兴能有机会帮助您。</span><br><span class="line"></span><br><span class="line">请问您是在调用REST API时遇到了<span class="keyword">access</span>-token过期的错误是么？</span><br><span class="line"></span><br><span class="line">需要注意的是，<span class="keyword">access</span>-token本身是有有效期的，大概是<span class="number">10</span>个小时左右，过期之后请重新使用client ID 和 Secret调用同样的方法再获取一下就可以了。具体方案可以参考文档：https://developer.paypal.com/docs/api/overview/#<span class="keyword">get</span>-an-<span class="keyword">access</span>-token</span><br><span class="line"></span><br><span class="line">期待您的回复，如果您还有其他产品集成或者交易方面的问题，欢迎随时来信与我们联系。</span><br><span class="line"></span><br><span class="line">友情提醒，请注意如果您没有在该事件发起后的<span class="number">7</span>天之内回复我们，那么该事件将会被自动关闭。届时如果您还有其他问题也可以重新提交一个<span class="keyword">Case</span>。</span><br><span class="line"></span><br><span class="line">感谢您的耐心和理解，祝您工作顺利生活愉快。</span><br><span class="line">谢谢</span><br><span class="line"></span><br><span class="line">Castle</span><br><span class="line">PayPal 商家技术支持部</span><br><span class="line"></span><br><span class="line"><span class="keyword">ref</span>:_00D30LaY._5002E1Xq5G0:<span class="keyword">ref</span></span><br></pre></td></tr></table></figure>








<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">尊敬的商户 您好，</span><br><span class="line">感谢您的回复。</span><br><span class="line"></span><br><span class="line">是的，您只要是使用SDK集成并且按照示例的方法调用来创建支付，应该是不需要额外去处理token过期这个情况的，SDK内部封装的方法会自动判断，如果过期的话重新获取，所以请不用担心。</span><br><span class="line"></span><br><span class="line">期待您的回复，如果您还有其他产品集成或者交易方面的问题，欢迎随时来信与我们联系。</span><br><span class="line">祝您周末愉快~</span><br><span class="line">谢谢</span><br><span class="line"></span><br><span class="line">Castle</span><br><span class="line">PayPal 商家技术支持部</span><br><span class="line"></span><br><span class="line"><span class="built_in">ref</span>:<span class="module-access"><span class="module"><span class="identifier">_00D30LaY</span>.</span><span class="module"><span class="identifier">_5002E1Z2WX6</span>:</span></span><span class="built_in">ref</span></span><br></pre></td></tr></table></figure>

<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">尊敬的商户 您好，</span><br><span class="line">感谢您的回复。</span><br><span class="line"></span><br><span class="line">不好意思前面有些事回复晚了，这个<span class="string">apiContext对</span>象确实只会<span class="string">new一</span>次，但内部封装了一套逻辑是会自动调用在<span class="string">token过</span>期的时候调用<span class="string">API来</span>获取新的<span class="string">token的</span>，应该不需要您这边额外进行处理。</span><br><span class="line"></span><br><span class="line">如果您想要手动获取<span class="string">access-token的</span>话，可以直接按照这个乏力，直接调用<span class="string">v1/</span><span class="string">oauth2/</span><span class="string">token接</span>口：<span class="string">https:</span>//<span class="string">developer.</span><span class="string">paypal.</span><span class="string">com/</span><span class="string">docs/</span><span class="string">api/</span><span class="built_in">get-an-access-token-curl/</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">请问您现在遇到关于token的具体问题是什么呢？</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">期待您的回复，如果您还有其他产品集成或者交易方面的问题，欢迎随时来信与我们联系。</span></span><br><span class="line"><span class="built_in">谢谢</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">Castle</span></span><br><span class="line"><span class="built_in">PayPal</span> 商家技术支持部</span><br><span class="line"></span><br><span class="line"><span class="string">ref:_00D30LaY.</span><span class="string">_5002E1Z2WX6:ref</span></span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">尊敬的商户 您好，</span><br><span class="line">感谢您的回复。</span><br><span class="line"></span><br><span class="line">由于相关的SDK各个版本比较多，麻烦请确认一下您使用的是这个SDK：https://github.com/paypal/PayPal-Java-SDK 么？</span><br><span class="line"></span><br><span class="line">如果是的话，您可以参考这里：https://github.com/paypal/PayPal-Java-SDK/wiki/Making-First-<span class="keyword">Call</span>#instructions，第三步：</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="keyword">Create</span> an APIContext <span class="keyword">object</span> <span class="keyword">with</span> proper configurations. Make sure <span class="keyword">to</span> <span class="keyword">create</span> one <span class="keyword">for</span> <span class="keyword">each</span> request. Make a <span class="keyword">create</span> <span class="keyword">call</span> <span class="keyword">and</span> use the createdPayment <span class="keyword">object</span> <span class="keyword">to</span> <span class="keyword">get</span> the approval URL.</span><br><span class="line">try &#123;</span><br><span class="line">    APIContext apiContext = <span class="built_in">new</span> APIContext(clientId, clientSecret, "sandbox");</span><br><span class="line">    Payment createdPayment = payment.<span class="keyword">create</span>(apiContext);</span><br><span class="line">    // <span class="keyword">For</span> <span class="keyword">debug</span> purposes <span class="keyword">only</span>: <span class="keyword">System</span>.<span class="keyword">out</span>.println(createdPayment.toString());</span><br><span class="line">&#125; catch (PayPalRESTException e) &#123;</span><br><span class="line">    // Handle errors</span><br><span class="line">&#125; catch (<span class="keyword">Exception</span> ex) &#123;</span><br><span class="line">    // Handle errors</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">这里获取的apiContext 对象应该就是包含<span class="keyword">access</span>-token的，您可以试一下。</span><br><span class="line"></span><br><span class="line">期待您的回复，如果您还有其他产品集成或者交易方面的问题，欢迎随时来信与我们联系。</span><br><span class="line">谢谢</span><br><span class="line"></span><br><span class="line">Castle</span><br><span class="line">PayPal 商家技术支持部</span><br><span class="line"></span><br><span class="line"><span class="keyword">ref</span>:_00D30LaY._5002E1Z2WX6:<span class="keyword">ref</span></span><br></pre></td></tr></table></figure>

<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">尊敬的商户 您好，</span><br><span class="line"></span><br><span class="line">感谢您联系PayPal商家技术支持，我是技术工程师Castle，很高兴能有机会帮助您。</span><br><span class="line"></span><br><span class="line">一般PayPal这边的REST API SDK都是有封装了获取token的方法的，但仅凭您提供的这个信息：</span><br><span class="line"></span><br><span class="line"><span class="params">&lt;dependency&gt;</span> <span class="params">&lt;groupId&gt;</span>com.paypal.sdk<span class="params">&lt;/groupId&gt;</span> <span class="params">&lt;artifactId&gt;</span>rest-api-sdk<span class="params">&lt;/artifactId&gt;</span> <span class="params">&lt;version&gt;</span><span class="number">1.4</span><span class="number">.2</span><span class="params">&lt;/version&gt;</span> <span class="params">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">我这边无法确定具体是哪个SDK，能否请您提供一下您使用的这个SDK的github地址，以便我确认一下源码？</span><br><span class="line"></span><br><span class="line">另外请求token的接口建议不要调用太过频繁，因为一个token的有效期至少有几个小时，在过期之前即使重复调用该接口获取到的也是同一个token，并且过于频繁的调用（比如一分钟内调用十几次）可能会导致PayPal的系统暂时block您的IP地址，所以建议等到一个token过期之后再调用接口获取新的，一般几个小时调用一次是没什么问题的。</span><br><span class="line"></span><br><span class="line">期待您的回复，如果您还有其他产品集成或者交易方面的问题，欢迎随时来信与我们联系。</span><br><span class="line"></span><br><span class="line">友情提醒，请注意如果您没有在该事件发起后的<span class="number">7</span>天之内回复我们，那么该事件将会被自动关闭。届时如果您还有其他问题也可以重新提交一个Case。</span><br><span class="line"></span><br><span class="line">感谢您的耐心和理解，祝您工作顺利生活愉快。</span><br><span class="line">谢谢</span><br><span class="line"></span><br><span class="line">Castle</span><br><span class="line">PayPal 商家技术支持部</span><br><span class="line"></span><br><span class="line"><span class="symbol">ref:</span>_00D30LaY._5002E1Z2WX6:ref</span><br></pre></td></tr></table></figure>

<h2 id="记录步骤"><a href="#记录步骤" class="headerlink" title="记录步骤"></a>记录步骤</h2><ul>
<li>浏览器【回车】：<a href="https://www.paypal.com/；就到了：https://www.paypal.com/c2/home界面" target="_blank" rel="noopener">https://www.paypal.com/；就到了：https://www.paypal.com/c2/home界面</a></li>
<li>点击右上方的【注册】按钮，就到了此界面：<a href="https://www.paypal.com/c2/webapps/mpp/account-selection" target="_blank" rel="noopener">https://www.paypal.com/c2/webapps/mpp/account-selection</a></li>
<li>选择【个人账户】，然后点击【下一步】</li>
<li>然后呢就还是该界面浏览器地址不变，标题栏（PayPal–安全快捷的收付款工具）个人账户，他要你选择一个类似身份选择的一个下拉框【选项有：1、线上购物者 2、个体卖家/自由职业者 3、以上都是 4、我不确定】，好我此处选择的是3以上都是，因为我只是想测试下而已。好此处选择好了点击【下一步】</li>
<li>然后跳到了这个界面：<a href="https://www.paypal.com/welcome/signup/#/name_address" target="_blank" rel="noopener">https://www.paypal.com/welcome/signup/#/name_address</a> 额就是让你填写下你的基本的个人信息，比如说身份证号码啊，姓甚名谁啊，联系方式啊，家住何方啊，年龄几何啊…. 然后呢把那个[激活One Touch]以及那个[我已阅读并同意PayPal的《用户协议》、《隐私政策》和《合理使用规则》。我有权添加以上输入的联系信息并了解PayPal可以通过电子邮件或邮寄信件与我联系]这两个单选框勾选上，最后点击按钮【同意并创建账户】，OK</li>
<li>然后我们就来到了此界面：<a href="https://www.paypal.com/welcome/signup/#/intent_selection" target="_blank" rel="noopener">https://www.paypal.com/welcome/signup/#/intent_selection</a> 他提示我们的账户已经创建了。他要我们添加信用卡，可惜啊可惜我没有信用卡，当然啦我是个小测试员也用不着用信用卡的地步啦，所以【开始购物】和【付款】我就都不选择啦，拉到底部，选择【不确定？添加卡以便日后使用】即可啦。点击它即可。</li>
<li>然后我们就来到了该界面：<a href="https://www.paypal.com/welcome/signup/#/add_card" target="_blank" rel="noopener">https://www.paypal.com/welcome/signup/#/add_card</a> 他还是十分强烈的希望我添加一下信用卡，可是我真的没有信用卡呗。我要是有我肯定为你服务几块钱，我数学不太好啊。当然啦，信用卡你不知道你可以【编辑】下账单地址也是OK的。好啦我们就不去关联这个信用卡啦，点击【我以后再执行此操作】即可。</li>
<li>我们就来到了已激活界面：<a href="https://www.paypal.com/welcome/signup/#/activation" target="_blank" rel="noopener">https://www.paypal.com/welcome/signup/#/activation</a>  activation这个不就是激活的意思吗？不过已经激活不是用那个actived?<br>activated 这个单词。标题【开始使用PayPal购物。】好啦，我们就不去购物啦，直奔主题而去，点击【前往您的账户】</li>
<li>到达账户界面：<a href="https://www.paypal.com/myaccount" target="_blank" rel="noopener">https://www.paypal.com/myaccount</a></li>
<li>此处建议，有钱的没钱的把蓝灯开一下：<a href="https://github.com/getlantern/lantern，因为paypal是国外的网站跨境，额反正就是需要翻墙，不要问再问就是不知道。你可以去站长之家看下这个paypal服务器分布在哪里，反正就是网速特慢，尤其是像我这种住乡下的人。" target="_blank" rel="noopener">https://github.com/getlantern/lantern，因为paypal是国外的网站跨境，额反正就是需要翻墙，不要问再问就是不知道。你可以去站长之家看下这个paypal服务器分布在哪里，反正就是网速特慢，尤其是像我这种住乡下的人。</a></li>
<li>打开子页面：<a href="https://developer.paypal.com/" target="_blank" rel="noopener">https://developer.paypal.com/</a> 开发者，点击右上角的【Log into Dashboard】登录进入控制台</li>
<li>登录好了的话，就会进入到 <a href="https://developer.paypal.com/developer/applications" target="_blank" rel="noopener">https://developer.paypal.com/developer/applications</a> 该页面，我已经受不了这垃圾网了。</li>
<li>每当网好了，我就宛如鸡犬升天了。</li>
<li>好，到了登录界面：<a href="https://www.paypal.com/signin?returnUri=https%3A%2F%2Fdeveloper.paypal.com%2Fdeveloper%2Fapplications" target="_blank" rel="noopener">https://www.paypal.com/signin?returnUri=https%3A%2F%2Fdeveloper.paypal.com%2Fdeveloper%2Fapplications</a></li>
<li>输入你的账号密码进行登录：<a href="mailto:198866436@qq.com">198866436@qq.com</a>/xxxxxxxxx</li>
<li>好啦登录成功之后，就又会跳转到：<a href="https://developer.paypal.com/developer/applications" target="_blank" rel="noopener">https://developer.paypal.com/developer/applications</a> 该界面来啦！</li>
<li>【My Apps &amp; Credentials】这个是标题，就跟支付宝一样，需要建一个属于自己的application</li>
<li>骚等，莫急慢慢来。sandbox即沙箱环境，live即生产环境，默认为sandbox环境，你要切换也可以的。我选择的是【sandbox】沙箱环境然后点击【Create App】,也就是创建一个application。他有一个默认的default app，我是用自己创建的。然后呢输入您的APP Name以及沙箱的卖家账号输入进去。随便搞一个邮箱即可的。这个邮箱就是用于在沙箱环境充当一个卖家的一个身份，就是别人付款你收钱的这样一个身份，明白了吧。好下面你会发现这个【Sandbox Business Account】没办法填写，而是只能够选择，所以呢我们现在再去返回回去，创建一下沙箱的卖家以及买家的账号，稍等。</li>
<li>你现在看到左侧有导航栏对吧，BASHBOARD就额你就认为他是控制台的意思好了。然后第二个菜单栏SANDBOX即沙箱，好那么我们就点击【SANDBOX】下面的第一个子菜单【Accounts】账号，点击这个【Accounts】</li>
<li>今天没时间，之后有时间再来完成这个流程的文档，我今天得先去测试回调流程发货，过几天就要测试了byebye</li>
</ul>
<p>今天遇到了一个问题<br>No tracked branch configured for branch developing or the branch doesn’t exist. To make your branch track a remote branch call, for example, git branch –set-upstream-to=origin/developing developing</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">oft Windows [版本 <span class="number">10.0</span>.<span class="number">17763.1039</span>]</span><br><span class="line">(<span class="keyword">c</span>) <span class="number">2018</span> Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;</span><br><span class="line">                       git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=origin/developing developing</span><br><span class="line">error: the requested upstream branch <span class="string">'origin/developing'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=origin/developing developing</span><br><span class="line">error: the requested upstream branch <span class="string">'origin/developing'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span> origin</span><br><span class="line">error: the requested upstream branch <span class="string">'origin'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span> origin</span><br><span class="line">error: the requested upstream branch <span class="string">'origin'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span> origin/developing</span><br><span class="line">error: the requested upstream branch <span class="string">'origin/developing'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=origin/developing developing</span><br><span class="line">error: the requested upstream branch <span class="string">'origin/developing'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git fetch</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git push -<span class="keyword">u</span></span><br><span class="line">fata<span class="variable">l:</span> No configured push destination.</span><br><span class="line">Either specify the URL from the <span class="keyword">command</span>-<span class="built_in">line</span> <span class="built_in">or</span> configure <span class="keyword">a</span> remote repository using</span><br><span class="line"></span><br><span class="line">    git remote <span class="built_in">add</span> <span class="symbol">&lt;name&gt;</span> <span class="symbol">&lt;url&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">and</span> then push using the remote name</span><br><span class="line"></span><br><span class="line">    git push <span class="symbol">&lt;name&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line"><span class="string">'hint:'</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line"><span class="string">'hint:'</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line"><span class="string">'hint:'</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=origin/developing developing</span><br><span class="line">error: the requested upstream branch <span class="string">'origin/developing'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span></span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span></span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git fetch</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git fetch</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span> origin/developing developing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;</span><br><span class="line">F:\Project\Lingo\lingo&gt;</span><br><span class="line">F:\Project\Lingo\lingo&gt;</span><br><span class="line">F:\Project\Lingo\lingo&gt;</span><br><span class="line">F:\Project\Lingo\lingo&gt;</span><br><span class="line">F:\Project\Lingo\lingo&gt;</span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=origin/developing developing</span><br><span class="line">error: the requested upstream branch <span class="string">'origin/developing'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git fetch</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git push -<span class="keyword">u</span> developing</span><br><span class="line">fata<span class="variable">l:</span> The current branch developing <span class="built_in">has</span> <span class="keyword">no</span> upstream branch.</span><br><span class="line">To push the current branch <span class="built_in">and</span> <span class="keyword">set</span> the remote <span class="keyword">as</span> upstream, use</span><br><span class="line"></span><br><span class="line">    git push --<span class="keyword">set</span>-upstream developing developing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git push --<span class="keyword">set</span>-upstream developing developing</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'/c/Users/ASUS/.ssh/id_rsa'</span>:</span><br><span class="line">Everything <span class="keyword">up</span>-<span class="keyword">to</span>-date</span><br><span class="line">Branch <span class="string">'developing'</span> <span class="keyword">set</span> <span class="keyword">up</span> <span class="keyword">to</span> track remote branch <span class="string">'developing'</span> from <span class="string">'developing'</span>.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=origin/developing developing</span><br><span class="line">error: the requested upstream branch <span class="string">'origin/developing'</span> does not exist</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">on</span> basing your work <span class="keyword">on</span> <span class="keyword">an</span> upstream</span><br><span class="line">hin<span class="variable">t:</span> branch that already <span class="built_in">exists</span> at the remote, you may need <span class="keyword">to</span></span><br><span class="line">hin<span class="variable">t:</span> run <span class="string">"git fetch"</span> <span class="keyword">to</span> retrieve it.</span><br><span class="line">hin<span class="variable">t:</span> </span><br><span class="line">hin<span class="variable">t:</span> If you are planning <span class="keyword">to</span> push out <span class="keyword">a</span> <span class="keyword">new</span> local branch that</span><br><span class="line">hin<span class="variable">t:</span> will track its remote counterpart, you may want <span class="keyword">to</span> use</span><br><span class="line">hin<span class="variable">t:</span> <span class="string">"git push -u"</span> <span class="keyword">to</span> <span class="keyword">set</span> the upstream config <span class="keyword">as</span> you push.</span><br><span class="line"></span><br><span class="line">F:\Project\Lingo\lingo&gt;^A</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>领赫</category>
      </categories>
      <tags>
        <tag>领赫</tag>
        <tag>支付</tag>
        <tag>PayPal</tag>
      </tags>
  </entry>
  <entry>
    <title>自我梳理一下成品仓库存发货</title>
    <url>/2020/02/18/%E9%A2%86%E8%B5%AB/%E8%87%AA%E6%88%91%E6%A2%B3%E7%90%86%E4%B8%80%E4%B8%8B%E6%88%90%E5%93%81%E4%BB%93%E5%BA%93%E5%AD%98%E5%8F%91%E8%B4%A7/</url>
    <content><![CDATA[<h2 id="梳理过程"><a href="#梳理过程" class="headerlink" title="梳理过程"></a>梳理过程</h2><p>我就觉得自己是个沙雕，没有原因。</p>
<p>新增了之后下面我们 来减一下库存然后呢新增下库存的出库记录<br>david说一个一个先进先出发货…….我的妈怎么一个先进先出<br>现在已知的是 产品的箱数也就是发货箱数，通过productAttr的packingNum*这个发货箱数=发货产品数<br>好，那么现在从t_stock_product当中取出该产品 按道理，其实应该上送他取自的是成品库存当中的哪个产品的，不然我不好搞呗<br>现在请注意是从成品仓库存当中进行发货，我这个傻逼我在做什么。。。。本来就是从成品仓库存当中取货出来，我还在想去哪里获得这个产品id????卧槽<br>我要疯了</p>
<p>好通过看原型图，我明白了，成品仓库存发货</p>
<ol>
<li>首先，因为是成品仓库存发货，我可以直接拿到t_stock_product主键</li>
<li>现在前端上送了发货单bean参数上来了，那么我的妈，现在是每一个t_stock_product记录都可以进行发货，那么里面的那个产品的选择意思是可以选择其他的产品还是说只能是该库存产品嘞。我觉得，管他嘞，就，按照不同的处理，反正他要给我上送，我觉得这个地方额，我等会问下david</li>
<li>前端上送该t_stock_product当中也就是这个产品的box_num发货箱数，然后我在后台嘞就可以得到他的发货产品数，t_product_attr.packing_num*box_num=quantity</li>
<li>好得到这个发货箱数以及发货的产品数量之后，那么这个t_stock_product对应的需要减去一下box_num箱数，嗯，还有就是产品数量，完美，就是不知道对不对</li>
<li>好现在t_stock_product处理并更新了，然后我们要处理下，先进先出的这样一个逻辑，那么就是t_stock_box_number,就是这个产品的库存有多少数量那么，他在t_stock_box_number当中就有多少数量，那么我们现在要做的就是额，stock_no为当前该库存id的并且status!=1,然后order by id asc，升序排列下，就这样。更新t_stock_box_number当中的数量为前端发货的产品数量，也就是，box_num*packing_num=quantity,也就是quantity这个数量。ok，又被我知道了。</li>
<li>好接近尾声，我们来处理下出入库记录。也就是t_out_put_repo_recored，状态肯定是出库啦，然后吧稍等我看下原型图。这个出库箱数也就是box_num,入库箱数为空，入库产品数量为空，结余箱数，额也就是原来的t_stock_product当中的box_num减去前端上送的这个box_num，这里要做下数据有效性处理。以及结余产品数量，也就是原来的t_stock_product当中的quantity减去前端上送的box_num*product_attr.packing_num=quantity这个数，也需要做下数据有效性处理。好啦就这样。</li>
</ol>
<p>日常看原型图自闭。香菇。。。<br>今天让何玉洁日常催我更新接口。我实在太懒了，就是吧我已经把闹钟调好就放在那里了，然后吧我，我真是个人才，我起床了，然后关了闹钟把其他的闹钟也给关了，然后吧，我倒头就继续睡去了。我本来壮志满满打算好看虚拟机。一想到这个虚拟机我就脑壳痛。<br>噫吁嚱，危乎难哉！我想好了，每天起床要是还这样就给自己两巴掌。就这样。</p>
<p>最后还有件事情，就是千万记得加锁，千事万事都要记得要事加把锁。</p>
<p>今天发现了两首新歌，还可以；<br>推荐下，骚等莫急我发下163的链接：</p>
<ul>
<li><a href="http://music.163.com/song/media/outer/url?id=503426999.mp3" target="_blank" rel="noopener">http://music.163.com/song/media/outer/url?id=503426999.mp3</a></li>
<li><a href="http://music.163.com/song/media/outer/url?id=1386737147.mp3" target="_blank" rel="noopener">http://music.163.com/song/media/outer/url?id=1386737147.mp3</a></li>
</ul>
<p>刚刚呼唤他人，估计是掉线了。</p>
<p>要不我再看下其他的逻辑。看下原型图。<br>我家的这个网我真的很想吐槽。<br>哦哦对了这个账单发送啊，对这个逻辑我得再去看看。<br>找个时间贴下paypal以及sendgrid</p>
]]></content>
      <categories>
        <category>领赫</category>
      </categories>
      <tags>
        <tag>领赫</tag>
      </tags>
  </entry>
  <entry>
    <title>信666工作交接</title>
    <url>/2020/02/17/%E4%BF%A1666/%E5%B7%A5%E4%BD%9C%E4%BA%A4%E6%8E%A5/</url>
    <content><![CDATA[<h2 id="情况"><a href="#情况" class="headerlink" title="情况"></a>情况</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">二进哥：</span><br><span class="line">你们进件有问题，渠道费率不对</span><br><span class="line">这个问题你们不解决还会陆续出现</span><br><span class="line">就是费率的问题</span><br><span class="line">商户是<span class="number">0.65</span>，后面又有个进件是<span class="number">0.75</span></span><br><span class="line">商户本来是<span class="number">0.65</span>，但是后面用另一张卡在同一个渠道号进件了<span class="number">0.75</span>，渠道就会按照最后一次进件时的费率扣费</span><br><span class="line">商户在系统上是<span class="number">0.65</span>，但是渠道是<span class="number">0.75</span>，已经是扣了<span class="number">0.75</span>额手续费</span><br></pre></td></tr></table></figure>

<blockquote>
<p>用户消费成功的交易记录</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">12069588</span>	iOS202002162051153743	cps202002165904242	<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span> <span class="number">20</span>:<span class="number">51</span>:<span class="number">15</span>	<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span> <span class="number">20</span>:<span class="number">51</span>:<span class="number">18</span>	<span class="number">20200216</span>	<span class="number">78</span> - 极速收款	张海<span class="number">-10006384</span>	P0000002-卡帮	<span class="number">70930010</span>-畅捷新无卡(<span class="number">7093</span>)C	<span class="number">3</span>,<span class="number">116.00</span>	<span class="number">22.26</span>	<span class="number">3090.63</span>	交易成功	<span class="number">15273677367</span>	交易成功</span><br></pre></td></tr></table></figure>
<blockquote>
<p>渠道记录</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">cps202002165904242	<span class="number">2020</span><span class="number">-02</span><span class="number">-16</span> <span class="number">20</span>:<span class="number">51</span>:<span class="number">16</span>	<span class="number">20200216</span>	银联快捷	<span class="number">000001001845896</span>-张海	P0000001- 平安汇-信管家	<span class="number">3</span>,<span class="number">116.00</span>	<span class="number">20.26</span>	<span class="number">3095.74</span>	交易成功	交易成功	补单 明细</span><br></pre></td></tr></table></figure>
<p>这个是消费记录，从中看得到用户在该渠道上送的费率是3116<em>0.0065=20.254；好，那么易支付渠道系统这么计算费率的，也就是第三位小数，不管数额大小，直接进位。也就是20.26.这个也就是单独的交易金额</em>费率；还没有加每笔的这个手续费的钱；因为这个用户的费率是0.65+2，所以呢也就是（交易金额*费率0.0065）+2=22.26；这个也就是自己系统当中算出来的这个手续费，第三位不关乎数额大小直接进位；那么这个22.26也就是算出来的手续费，然后（交易金额-手续费）=商户结算金额。这个是本系统记录。</p>
<p>渠道系统的记录；3116*0.0065=20.254,由于进位方式即第三位小数不管数额大小直接进位的处理方式，手续费=20.26；那么交易金额（3116）-手续费（20.26）=商户结算金额（3095.74），此时的消费是按照0.65+2进行处理的。</p>
<p>也就是这两块的手续费在渠道手里。</p>
<p>此时是正常的。</p>
<p>怪就怪在消费结算的时候，爆粗口，另外一张卡也在这个渠道进件了。然后吧我们这个奇葩系统吧就在这个渠道修改了费率。应该是高费率的银行（比如光大、交通、浦发、招商这种高级银行）然后费率就变成了高费率进行上送到该渠道。<br>然后呢这个渠道，这个渠道叫做畅捷。他的规则是这个样子的，也就是二进哥所说：渠道就会按照最后一次进件时的费率扣费。这下好了。原本一个低费率的消费，变成了要高费率的还款。亏了。也就是说，畅捷该渠道，不是以每一次的消费费率来进行计算他的，不是还款，是结算的费率，而是以最新修改的费率为基准进行计算他的结算费率。<br>二进哥的意思是，以最后一次修改的费率为准进行计算所有的这个结算费率，也就是说，我在本系统进行上送交易的时候，交易金额，需要是我能够代付出来的金额，也就是真正商户能够结算出来的金额，因为这个费率重新上送了，此时在渠道真正的结算金额就变成了，交易金额（3116）<em>费率（0.0075）=手续费（23.37）+每笔（2元）=手续费（25.37）；<br>也就是交易金额（3116）</em>手续费（25.37）=商户结算金额（3090.63），这个金额也就是我们本系统在该用户进行消费的交易记录时，修改他的商户结算金额为3090.63即可。<br>然后发起结算，结算的交易记录即为交易金额为消费交易记录的商户结算金额，商户结算金额也为消费时的商户结算金额。</p>
<blockquote>
<p>本系统结算记录</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">12070999</span>	O202002171810078DsQ	df202002172108952	<span class="number">2020</span><span class="number">-02</span><span class="number">-17</span> <span class="number">18</span>:<span class="number">10</span>:<span class="number">09</span>	<span class="number">2020</span><span class="number">-02</span><span class="number">-17</span> <span class="number">18</span>:<span class="number">10</span>:<span class="number">30</span>	<span class="number">20200217</span>	<span class="number">79</span> - 极速收款结算	张海<span class="number">-10006384</span>	P0000002-卡帮	<span class="number">70930010</span>-畅捷新无卡(<span class="number">7093</span>)C	<span class="number">3</span>,<span class="number">090.63</span>	<span class="number">0.00</span>	<span class="number">3090.63</span>	交易成功	<span class="number">15273677367</span>	交易成功	补单 明细</span><br></pre></td></tr></table></figure>

<blockquote>
<p>渠道结算记录</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">df202002172108952	<span class="number">2020</span><span class="number">-02</span><span class="number">-17</span> <span class="number">18</span>:<span class="number">10</span>:<span class="number">10</span>	<span class="number">20200217</span>	银联快捷T1结算	<span class="number">000001001845896</span>-张海	P0000001- 平安汇-信管家	<span class="number">3</span>,<span class="number">090.63</span>	<span class="number">2.00</span>	<span class="number">3092.63</span>	<span class="number">1</span>	交易成功	<span class="number">0000</span>	交易成功	明细</span><br></pre></td></tr></table></figure>

<p>然后此时七哥又说了，每次消费前呢，都进行修改一次费率。<br>我的妈。</p>
<p>希望以后的每天的状态</p>
<ul>
<li>windows+r</li>
<li>cmd</li>
<li>f:</li>
<li>cd Hexo</li>
<li>cd fsnBlog</li>
<li>hexo clean</li>
<li>hexo generate</li>
<li>hexo deploy</li>
</ul>
]]></content>
      <categories>
        <category>信666工作交接</category>
      </categories>
      <tags>
        <tag>信666工作交接</tag>
      </tags>
  </entry>
  <entry>
    <title>心情</title>
    <url>/2020/02/15/%E5%BF%83%E6%83%85/%E5%BF%83%E6%83%853/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Hey, password is required here." /><label>Hey, password is required here.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="9d0ac9e505d5d520847f0adfb84a4d86e037728f972eaea6c3ddf06f109487f7">f3a30fa1650751270770a2daf627a562e879711d975c1492d9865c05f15414b1</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>心情</title>
    <url>/2020/02/15/%E5%BF%83%E6%83%85/%E5%BF%83%E6%83%852/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Hey, password is required here." /><label>Hey, password is required here.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="e15458c1413da596b068016b7dad64a34c20a8ff50737245763ac9d4b7826401">c34c053c9e71f6d22ae7e6ea020ea24784845fffaef239a17a9104d59d5c62e55921fd655acc35e4cc1509a36b159febd6dc3f7b1e59633e97162e4f585d53a1310b65a4bb61520a4e806566fbc81caca217b0b878e442d699710205367c7d63a97a7bcdad224f1ce431175fb3f44f49c705728eb113c5409a1f703727858b8ec6ba563f65c4f7889c70c7bf6e5cbf7d1b070f16ce4e5791af310bd94a7eefaa2c5903e315fe1aee12d8486c6594b65a59d47722c5adcaa2882f09f557dd21f474d2b1fcb3237c8a2f4d9eec6adcf8dc1b44309683263cb15380bbc7ca82fadec1a6633eb71783c9f0ec7d389c66aff585536fe34e4dc6346887a8642727517b055d9da2bb0809f1fec9c8b5273393b96a8388c72192885cdd5a7309abe69b4f787e9d3d841e0984716f532c3212bb9439d2af1029fdf83d2ddfa38a73d2a6b12ff84c227686cda9f543054e53a71443725a4e4da493a304a13b6a6cc668830312f2bf4185bbc5673b93b21a1f27ebacc81d5d5a65469e4ef704fa3559fe36f990e5064f8a863e3337d9e14d6948ba245d6e0b8f6e19d5419500c6af49a2bfe60d6144bf5f21aacabcfdd56528e9ee1214f945b6d11faad842420d52ac0f49919382de8d4572d5b9da0279b622eaee3b9f48cc35071b652f458995c731fbe1c89a45c5a4cb4087ea041a80b304cbd3cb1efa1fd8861f0fa45dd772f510e784ef2e7ad58ac9bd8f1d4d0307536f9a388e9e7973a550fa9ff1ee69ca38ba2f8f9db37724d1dea207bcf6780bac024a03ef306ca75c794f60d902d954ee9da59ce1a0f0be1f971f13a3ccc9a2442ed6d890758fb769386188a235d10bf5e157ce158479e558a64c354af1d879423855d0fce5ed0ff4d8366a3e702871f98b33544060f92c8bbadce16f73645e72f34bc976dc3ec7a64fb618180f492c7bd77fcd616b4b13ea2f8f5a506a51c73f7109714793b5b6c5fe63dbea4f691d86af839c6998582700a65181e11902a3c2300a720fcb9b67531abc545c3461c04ebf18f037bb3fa02abcb32c3adc84fdfe112102bab798fe46813ed01dae319611d56c58327e60394eb80d04c11abb7c643b98ea02137bb105686e447a24a9f7bedd4a06afc2a4b94b4e4b6fb0cd2be638b6a436553e1b3b1ef902d0c517937dc538764753</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>心情</title>
    <url>/2020/02/12/%E5%BF%83%E6%83%85/%E5%BF%83%E6%83%85/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please.[哦，这是无效的密码。请检查并重试。]" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.[哦，这些解密的内容无法验证，但是您仍然可以看一下。]"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Hey, password is required here.[嘿，这里需要密码。]" /><label>Hey, password is required here.[嘿，这里需要密码。]</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="0df9f7458118c74b98d27a8f00b7fa9d7314de2f8dd04bfd5ebb35e83673e839">d29c7427e79f166bdd9a2eecd30126a4afbb659fffca77667544da19048a6f0fcdfd1131e3b3f6a318e9aeb0ae17491aa014fcc31fca74bb1e321e9453490b52b5ce358f8a90cae5103bb008bed208f4d5037a9ba8621e83535341e6f22d19c8eb27a24caec0b5dcd9fb9ed96e067861220382dcfc688f5bb10b80ba93d9a3cd2efbe4eb619124cc075d49c05901af10642a433634245475e98a09141fd1381c390e688f48661f25d4c6d8b055bd5302004ff1bb7bcfc7af12031fa479a0c0643770425c8719fbc0e5c8f8d940cb04cf2c17d259524f24156578e5e02d32cd59a271e880b7029860c15004e3cfc836cb682f6ce26039c94e1788b32d420d588ba2bb835f77b0ce2b73e8094b52363e05f31a0f70ad100820a067a36fb8b4951dac0d9d8f142c47f8fcc0edca5e1c696243fdcb5355aa0b4faf83e28e42312ff72d5412c4df0990b95b7e5f1b29f564b0b72aa6d8c3352e4990514657c5f3711f8923d335a445544e73c2947dbe0164a664ded0b28e0446de83b295fa5ac47991c9814363cc40c16ee9b1a15bb902eb6a421779e750c667aa76a324442dd6a778c67b2465dea20d7685bf53cf3c2755d70164575c7826f264be965f42185ca8639c412426bc4716e69e794eca0d827b8c3bac956a38323c8f3174dacc91f62a35733e8b8e39f9f3cc7213efe9b42e40a09a2363444381d19a58f00d53362d8b329d4a8c4eb92b60189d8ddb0f2d9c244d45c6fb8a2249d8fbaf342dce19eab97f2b8ff333274af0dc6985835dfd9d5b5a64a3a05e3ca04156876225ffb909a333a2e09866398fed36a799f65989f67d2971d1f28571d5f881d39fff2dab2ee5a4b3e856136e2cbffa94f7636c63744ad7d05f5468ab6ddd629fed0a6556d2f37be066ef156c72d674790ec346153d96638dfe2c8355cabb6a552fbf43974773a99ddd1bac3ac33299b110b34be679d88249a9aad4a3b79571577caf6eabc6f322c8cc449a6cd4271c90cc20e7012ba64b11d26d7a522316cfa400ab9960245887a86f708742ebf98a6fa8e08c5be65e64e06db8f5fde3a723326cfdbe2ae8a613cbabc3b16c37716640859877975c5237c8f94b80a1ed4bb82454f1329e42f213e891d085234429d2851cffcddd55cadb941be892d108a8ff5f17118638c91840525ccb954253a158019330531ab467900165e427dc4f3be6ed12c33109e17ac2638cffc966d7a629ac2bf448b6a63ea7a955c9dc39a94045e0705d8db0829bbaf0b28aac4ffc8f4c23b27b4f5c78ec3a80f31c1326db92a6ca0d0d5cd4a75c9a6ab6b47858e34084b3a2847b5d0548f0fe6b659c415be33264ec129b3a3be818</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>微信公众号</title>
    <url>/2020/02/11/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>有道： <a href="http://note.youdao.com/noteshare?id=808f14124df9ed7797ac983b8a794f2b" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=808f14124df9ed7797ac983b8a794f2b</a><br>微信公众平台-测试号<br>沙箱环境登录管理平台：<br>配置信息：<br><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index</a><br>appID ： wx7b787880dd748935<br>appsecret :    31a353cb37d7d700b64439b5f514ff95</p>
<p>该url当中的域名使用的是natapp软件</p>
<p>电脑-属性-配置natapp.exe的环境变量<br>Win+R调起cmd–输入命令：natapp -authtoken 秘钥<br>参考博客进行配置内网穿透：<a href="https://blog.csdn.net/weixin_39927967/article/details/80552535" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39927967/article/details/80552535</a><br>该url当中除去域名为 springboot当中的接口<br>URL  ：  <a href="http://fainuk.natappfree.cc/apiservice/weChat/get/gzh/openid" target="_blank" rel="noopener">http://fainuk.natappfree.cc/apiservice/weChat/get/gzh/openid</a><br>接口内容具体如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"apiservice/weChat"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"get/gzh/openid"</span>)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String GetGZHOpenid(HttpServletRequest request,</span><br><span class="line">                           <span class="meta">@RequestParam(required = false)</span> String echostr,</span><br><span class="line">                           <span class="meta">@RequestParam(required = false)</span> String signature,</span><br><span class="line">                           <span class="meta">@RequestParam(required = false)</span> String timestamp,</span><br><span class="line">                           <span class="meta">@RequestParam(required =false)</span> String nonce) throws IOException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//只需要把微信请求的 echostr, 返回给微信就可以了</span></span><br><span class="line">        logger.info(<span class="string">"测试来过==================="</span> + echostr);</span><br><span class="line">        logger.info(<span class="string">"测试来过==================="</span> + signature);</span><br><span class="line">        logger.info(<span class="string">"测试来过==================="</span> + timestamp);</span><br><span class="line">        logger.info(<span class="string">"测试来过==================="</span> + nonce);</span><br><span class="line">        <span class="keyword">return</span> echostr;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.info(<span class="string">"测试微信公众号的接口配置信息发生异常："</span>, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"错误！！！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如需要获取openId，则访问路径<br>测试公众号静默授权地址更换参数<br>APPID进行相对应参数的替换<br>redirectUrl为回调地址，需要进行urlEncode编码<br>具体参考博客：<a href="https://blog.csdn.net/baidu_28997655/article/details/81459134" target="_blank" rel="noopener">https://blog.csdn.net/baidu_28997655/article/details/81459134</a><br>http%3a%2f%2ffainuk.natappfree.cc%2fapiservice%2fweChat%2fget%2fgzh%2ftest<br>springboot当中的接口，即获取openId的接口，以下url不仅可以获取openi还可获取access_token；但是需要注意的是此access_token无法用于获取用户信息<br><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx7b787880dd748935&amp;redirect_uri=http%3a%2f%2ffainuk.natappfree.cc%2fapiservice%2fweChat%2fget%2fgzh%2ftest&amp;response_type=code&amp;scope=snsapi_base&amp;state=STATE#wechat_redirect" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx7b787880dd748935&amp;redirect_uri=http%3a%2f%2ffainuk.natappfree.cc%2fapiservice%2fweChat%2fget%2fgzh%2ftest&amp;response_type=code&amp;scope=snsapi_base&amp;state=STATE#wechat_redirect</a><br>访问地址进行urlEncode:<a href="http://tool.chinaz.com/tools/urlencode.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/tools/urlencode.aspx</a><br>接口代码（此处拿该access_token来获取用户信息显然是无法获取得到的）：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@RequestMapping("get/gzh/test")</span><br><span class="line">@ResponseBody</span><br><span class="line"><span class="built_in">public</span> String test(HttpServletRequest request) throws IOException &#123;</span><br><span class="line">    logger.<span class="keyword">info</span>("test-------------");</span><br><span class="line">    try &#123;</span><br><span class="line">        String code =  request.getParameter("code");//request.getParameter("code");</span><br><span class="line">        logger.<span class="keyword">info</span>("code打印："+code);</span><br><span class="line">        <span class="keyword">if</span> (code != <span class="keyword">null</span>) &#123;</span><br><span class="line">            //获取openid和access_token的连接</span><br><span class="line">            String getOpenIdUrl = "https://api.weixin.qq.com/sns/oauth2/access_token?appid="+"wx7b787880dd748935"+"&amp;secret="+"31a353cb37d7d700b64439b5f514ff95"+"&amp;code=CODE&amp;grant_type=authorization_code";</span><br><span class="line">            //获取返回的code</span><br><span class="line">            String requestUrl = getOpenIdUrl.replace("CODE", code);</span><br><span class="line">            HttpClient httpClient = <span class="built_in">new</span> DefaultHttpClient();</span><br><span class="line">            HttpGet httpGet = <span class="built_in">new</span> HttpGet(requestUrl);</span><br><span class="line">            ResponseHandler&lt;String&gt; responseHandler = <span class="built_in">new</span> BasicResponseHandler();</span><br><span class="line">            //向微信发送请求并获取response</span><br><span class="line">            String response = httpClient.<span class="keyword">execute</span>(httpGet,responseHandler);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("=========================获取token===================");</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(response);</span><br><span class="line">            JsonParser parser = <span class="built_in">new</span> JsonParser();</span><br><span class="line">            JsonObject jsonObject = (JsonObject) <span class="keyword">parser</span>.parse(response);</span><br><span class="line">            String access_token = jsonObject.<span class="keyword">get</span>("access_token").getAsString();</span><br><span class="line">            String openId = jsonObject.<span class="keyword">get</span>("openid").getAsString();</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("=======================用户access_token==============");</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(access_token);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(openId);</span><br><span class="line">            //获取用户基本信息的连接</span><br><span class="line">            String getUserInfo = "https://api.weixin.qq.com/cgi-bin/user/info?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN";</span><br><span class="line">            String userInfoUrl = getUserInfo.replace("ACCESS_TOKEN", access_token).replace("OPENID", openId);</span><br><span class="line">            HttpGet httpGetUserInfo = <span class="built_in">new</span> HttpGet(userInfoUrl);</span><br><span class="line">            String userInfo = httpClient.<span class="keyword">execute</span>(httpGetUserInfo,responseHandler);</span><br><span class="line">            //微信那边采用的编码方式为ISO8859<span class="number">-1</span>所以需要转化</span><br><span class="line">            String <span class="type">json</span> = <span class="built_in">new</span> String(userInfo.getBytes("ISO-8859-1"),"UTF-8");</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("====================userInfo==============================");</span><br><span class="line">            JsonObject jsonObject1 = (JsonObject) <span class="keyword">parser</span>.parse(<span class="type">json</span>);</span><br><span class="line">            String nickname = jsonObject1.<span class="keyword">get</span>("nickname").getAsString();</span><br><span class="line">            String city = jsonObject1.<span class="keyword">get</span>("city").getAsString();</span><br><span class="line">            String province = jsonObject1.<span class="keyword">get</span>("province").getAsString();</span><br><span class="line">            String country = jsonObject1.<span class="keyword">get</span>("country").getAsString();</span><br><span class="line">            String headimgurl = jsonObject1.<span class="keyword">get</span>("headimgurl").getAsString();</span><br><span class="line">            //性别  <span class="number">1</span> 男  <span class="number">2</span> 女  <span class="number">0</span> 未知</span><br><span class="line">            <span class="type">Integer</span> sex = jsonObject1.<span class="keyword">get</span>("sex").getAsInt();</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("昵称"+nickname);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("城市"+city);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("省"+province);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("国家"+country);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("头像"+headimgurl);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("性别"+sex);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(userInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> "ok";</span><br><span class="line">    &#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">        logger.<span class="keyword">info</span>("测试微信公众号的接口配置信息发生异常：", e);</span><br><span class="line">        <span class="keyword">return</span> "错误！！！";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果需要获取用户信息接口则可以看文档或者百度<br>测试接口开发工具也有<br>测试接口开发工具链接：<a href="https://mp.weixin.qq.com/debug/" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/</a><br>当中的<br><a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx7b787880dd748935&amp;secret=31a353cb37d7d700b64439b5f514ff95" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx7b787880dd748935&amp;secret=31a353cb37d7d700b64439b5f514ff95</a><br>所返回的access_token才能用于获取用户信息</p>
<ul>
<li>请一定要仔细：<a href="https://blog.csdn.net/mmd1234520/article/details/80798344" target="_blank" rel="noopener">https://blog.csdn.net/mmd1234520/article/details/80798344</a></li>
</ul>
<p>API文档：<a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html</a><br>要么就百度</p>
<p>要注意一下微信的接口，不同的接口不同的用处</p>
<p>通过在测试的微信公众号当中进行访问静默授权地址<br>然后redirectUrl当中该接口就会有反应，微信服务器就会给以你一个附带的CODE给你<br>然后你就可以 用这个CODE来进行访问链接<br>“<a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;+&quot;wx7b787880dd748935&quot;+&quot;&amp;secret=&quot;+&quot;31a353cb37d7d700b64439b5f514ff95&quot;+&quot;&amp;code=CODE&amp;grant_type=authorization_code&quot;" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;+&quot;wx7b787880dd748935&quot;+&quot;&amp;secret=&quot;+&quot;31a353cb37d7d700b64439b5f514ff95&quot;+&quot;&amp;code=CODE&amp;grant_type=authorization_code&quot;</a>;</p>
<p>替换一下当中的参数<br>进行访问该链接静默授权，就可以获取得到用户的openId了</p>
<p>如果想要获取用户的信息，则需要访问接口，替换一下参数，拿取得到此链接返回的access_token<br><a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx7b787880dd748935&amp;secret=31a353cb37d7d700b64439b5f514ff95" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx7b787880dd748935&amp;secret=31a353cb37d7d700b64439b5f514ff95</a></p>
<p>然后通过此链接返回的access_token以及链接<br>String getOpenIdUrl = “<a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;+&quot;wx7b787880dd748935&quot;+&quot;&amp;secret=&quot;+&quot;31a353cb37d7d700b64439b5f514ff95&quot;+&quot;&amp;code=CODE&amp;grant_type=authorization_code&quot;" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;+&quot;wx7b787880dd748935&quot;+&quot;&amp;secret=&quot;+&quot;31a353cb37d7d700b64439b5f514ff95&quot;+&quot;&amp;code=CODE&amp;grant_type=authorization_code&quot;</a>;</p>
<p>返回的openid一起访问<br>该链接<br><a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx7b787880dd748935&amp;secret=31a353cb37d7d700b64439b5f514ff95" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx7b787880dd748935&amp;secret=31a353cb37d7d700b64439b5f514ff95</a></p>
<p>就可以获取得到用户基本信息了</p>
<p>还是得多学着看官方API文档，以及百度<br>API文档会看也是很厉害</p>
<p>测试微信付款到零钱<br>替换一下参数即可上路<br>参考博客链接：<br><a href="https://www.cnblogs.com/angryjj/p/11252254.html" target="_blank" rel="noopener">https://www.cnblogs.com/angryjj/p/11252254.html</a><br>API文档：<br><a href="https://pay.weixin.qq.com/wiki/doc/api/tools/mch_pay.php?chapter=24_1&amp;index=1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/tools/mch_pay.php?chapter=24_1&amp;index=1</a></p>
<p>还有就是.nb3数据库文件恢复数据库，这个不会…<br>于是我就发个navicat了<br>参考博客：<a href="https://blog.csdn.net/wqq1027/article/details/100769763" target="_blank" rel="noopener">https://blog.csdn.net/wqq1027/article/details/100769763</a><br>于是知道了Schema就是数据库的意思</p>
<p><a href="https://mail.qq.com/cgi-bin/frame_html?sid=w8_vGU3Hyw-ngi9y&amp;t=newwin_frame&amp;url=%2fcgi-bin%2freadmail%3fmailid%3dZC3205-xcmTiNxWJuIKvhNOedPoT9c%26need_textcontent%3dtrue%26s%3dnotify%26newwin%3Dtrue%26t%3dreadmail&amp;r=42de175966e02fd718fee32c16caa2b1" target="_blank" rel="noopener">https://mail.qq.com/cgi-bin/frame_html?sid=w8_vGU3Hyw-ngi9y&amp;t=newwin_frame&amp;url=%2fcgi-bin%2freadmail%3fmailid%3dZC3205-xcmTiNxWJuIKvhNOedPoT9c%26need_textcontent%3dtrue%26s%3dnotify%26newwin%3Dtrue%26t%3dreadmail&amp;r=42de175966e02fd718fee32c16caa2b1</a></p>
]]></content>
      <categories>
        <category>微信公众号</category>
      </categories>
      <tags>
        <tag>微信公众号</tag>
      </tags>
  </entry>
  <entry>
    <title>原型图-发货</title>
    <url>/2020/02/09/%E9%A2%86%E8%B5%AB/%E5%8E%9F%E5%9E%8B%E5%9B%BE-%E5%8F%91%E8%B4%A7/</url>
    <content><![CDATA[<h2 id="捋一捋生成发货单流程业务逻辑"><a href="#捋一捋生成发货单流程业务逻辑" class="headerlink" title="捋一捋生成发货单流程业务逻辑"></a>捋一捋生成发货单流程业务逻辑</h2><p>努力看下原型图</p>
<p>客户操作通知发货，自动生成发货单<br>这个流程的业务逻辑</p>
<ul>
<li><p>中台 — 直发提货列表/直发提货详情页/通知发货</p>
<pre><code>操作：
状态：操作
待接受报价更新---&gt;接收报价
待通知发货---&gt;通知发货
取消提货操作在安排提货（等待到货状态）之前存在，之后就不能取消提货了</code></pre></li>
<li><p>中台 — 我的库存-成品仓库存/批量发货、发货</p>
</li>
<li><p>中台 — 我的库存-Prep仓库存/无发货功能<br>（直发提货-&gt;直发库存/Prep提货-&gt;Prep库存/Prep单-&gt;成品库存）</p>
</li>
</ul>
<p>david:</p>
<blockquote>
<p>前端发货有两种方式</p>
</blockquote>
<ul>
<li><p>1、直接给你直发提货单ID， 你根据这个ID查询直发提货管理的库存，去库存拿内部子单号发货。</p>
</li>
<li><p>2、告诉你成品库存号，已经发货的数量，后台去成品仓库，根据入库的时间先入先出，获取箱子（也就内部子单号）进行发货</p>
</li>
<li><p>t_stock_box_number这里里面记录了箱子信息，一个提货单入库一个箱子商品之后，会在这个里面添加一条记录，出库的时候出一个商品，除了减掉t_stock_box_number中的箱子t_stock_prudoct中记录的数量和箱子数也要减掉</p>
</li>
<li><p>还是我昨天说的，出库有2种方式。这个t_stock_box_number里面记录了每个提货单最终入库之后生产了哪些箱子，然后对应这发出去就可以了。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>领赫</category>
      </categories>
      <tags>
        <tag>领赫</tag>
      </tags>
  </entry>
  <entry>
    <title>david-prep单新增编辑逻辑</title>
    <url>/2020/02/09/%E9%A2%86%E8%B5%AB/david-prep%E5%8D%95%E6%96%B0%E5%A2%9E%E7%BC%96%E8%BE%91%E9%80%BB%E8%BE%91/</url>
    <content><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><h3 id="david"><a href="#david" class="headerlink" title="david"></a>david</h3><p>昨天说，提货 生产入库单的时候根据箱子数量要拆成一个个箱入库<br>也就是说后面出入库会一箱子为单位<br>这里主要针对直发提货和成品仓库的产品。 对于Prep仓库的产品出入库只考虑数量。<br>为了简单 入库单商品变成库存的时候可以统一处理，或者Prep单的商品入库的时候只需要改库存商品，不要管箱子数量。<br>也就是说Prep库存的出入库是数量，直发和成品是以箱子为单位出入库。<br>直发和成品仓库，才考虑 箱数<br>注意直发,Prep提货和Prep入库，的时候，先都统一拆成一箱一箱入库。只是箱子对Prep提货库存没什么用</p>
<blockquote>
<p>重点提醒：麻烦多看原型图以及数据库表字段设计</p>
</blockquote>
<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>通过临时表传递两个存储过程之间的数据不是很好的方式。临时表最好在一个存储过程中使用，不要跨多个存储过程。</p>
]]></content>
      <categories>
        <category>领赫</category>
      </categories>
      <tags>
        <tag>领赫</tag>
      </tags>
  </entry>
  <entry>
    <title>渠道跟进单以及发货相关理解</title>
    <url>/2020/02/07/%E9%A2%86%E8%B5%AB/%E6%B8%A0%E9%81%93%E8%B7%9F%E8%BF%9B%E5%8D%95%E5%8F%91%E8%B4%A7%E7%9B%B8%E5%85%B3%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>发货  渠道跟进单 业务<br>生成订单发给客户<br>生成支付连接 发给客户<br>注意<br>我们原来入库的时候 有个地方有问题<br>提货单提货有很多商品<br>比如商品<br>我们从提货单生成入库单 要把每一个箱子都要生成一个单号 内部子单号<br>同一个商品有10箱，生成10个箱子序号，也就是内部子单号，箱子序号<br>入库单–前端这里有问题</p>
<p>库存虽然显示的是商品，<br>库存有两箱，内部子单号就有两条<br>发货也是一个先入先出的一个规则，客户中台不需要知道这个规则<br>优先入库的先发<br>prep不存在发货<br>直发提货发货的时候以一个提货单为单位发货<br>prep的商品通过prep单转变成成品的时候<br>10箱商品对应了<br>成品仓库发10箱<br>入库单搞错了<br>加了一个表 t_stock_box_number<br>库存有10箱，该表就有10条记录，<br>t_repo_order_product<br>box_number 箱数没什么意义<br>入库单生成提货单的时候，根据箱子数拆成一条一条记录<br>库存<br>发货的时候，发货的过程 用户在直发提货假如说已经入库了，点击发货<br>直发提货对应入库单，入库单是直发货来的<br>直发提货点击入库，根据直发提货根据内部子单号去发货<br>箱子里面有产品<br>成品仓库里面发货<br>选择对应的商品去发货</p>
<p>直发提货 当中有固定的商品<br>成品仓库里面是选择商品，并且多少个去发，<br>商品prep提货，prep提货商品也会放到库存，prep商品需要加工，加工好了，prep仓库会生成prep单，转变成成品仓库当中的商品</p>
<p>prep提货<br>内部子单号需要贴标签，线下需要做仓库管理的<br>发货完以后就会做一些操作，比如说把这些，付款以后，就会生成投入到渠道，开始运输，有个地方需要注意，关联发货单中的商品，渠道跟进单，主要是哪个渠道，<br>渠道拆分，渠道单的时候，发个渠道单，里面是很多的发货单<br>生成两个发货单，投入一个渠道<br>而渠道，<br>多个发货单，投入一个渠道<br>某个发货单的商品<br>生成两个一模一样的单，把一些单放到另外一些渠道里面<br>发货发两批货，刀和鞋子同一批运输，分批运输，拆分渠道跟进单，刀扣留海关，沟通过再发货。<br>卸货清点，跟进单当中的商品，是否已提货</p>
<p>david:<br>Prep单，很简单。就是客户下一个订单，加一些商品，然后把商品入库到库存。<br>开始 待Prep状态，这个时候可以做3个动作，【编辑】【查看】【标记完成】—-&gt;标记完成之后，变成待入库，这个时候可以操作的动作有【编辑】【查看】【入库】—–&gt;入库之后编号才能了待确认入库，这个时候只能【查看】<br>入库之后就会在【入库单】生成一条记录，然后去入库单去确认入库<br>如果超过三个动作就显示【查看】和【更多】，更多里面包括编辑和标记完成，参照直发提货。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li><p>t_out_repo_order表为发货表主表，原型图当中发货单，点击投入渠道当中，单据状态处于待投入渠道状态，这个待投入渠道状态==确认放货状态==无款放货状态？ 确认放货状态以及无款放货状态是读物的哪个字段的取值？发货表主表当中的status无此取值，还有就是这个无款放货是什么意思，是类似支付宝，先收货再付款吗？</p>
</li>
<li><p>投入渠道需要注意点，勾选的单据，也就是t_out_repo_order记录的状态需要是等于状态2待投入渠道状态，符合条件一（ 0 :待发送账单/1:待放货/2:待投入渠道/3:已投入渠道/4：已完成）；</p>
</li>
<li><p>选择的单据与投入的渠道需要目的地国家是一致的，也就是t_out_repo_order记录当中的des_country；</p>
</li>
<li><p>运输方式是否一致，也就是t_out_repo_order记录当中的transport_type_id是否与选择的渠道的运输方式是一致的；<br>这个投入渠道，跟选择费用模板，差不多，也是一个路由是吧？</p>
</li>
<li><p>这三点条件无法满足则相当于路由失败，无渠道可走，就跟我们系统的交易所走渠道一样，满足交易金额区间，交易时间，所支持银行，所支持收款/代还业务一样。</p>
</li>
<li><p>产品类型为成品（报关件）时，才出现报关件的标签；这个标签的出现，不是，这个产品的类型这个字段 t_out_repo_order_product表当中无status字段，显然也不是产品管理当中的类型；当产品成为成品，那就意味着该产品可能从prep仓库加工到了成品仓库当中了，有什么标记吗？哦哦哦哦哦，发货单当中任意单据当中的产品，都是出自库存，也就是t_repo_product，无论是其当中的产品都做了仓库标记，即type(库存类型 0：直发仓库存/1: Prep仓库存/2: 成品仓库存)，所以，额，要么t_out_repo_order_product就直接有标记是什么仓库，要么就是，当查询发货单列表的时候，我还得去查询一下，该发货单记录当中的该产品出自哪个仓库?也就是查询一下t_repo_product?他的类型是0？1？2？然后前端对产品的仓库类型做判断如果为2则前端样式进行显示？<br>为什么(产品类型为成品（报关件）时，出现此标签) 这样做有什么用意？当我的产品是出自直发仓库存，以及prep仓库存的时候，可能还要加工？只有出自成品仓库存才能够真正发货？</p>
</li>
<li><p>存在linked_taker_delivery_id/linked_put_repo_order/linked_put_repo_inner_order三个字段的原因在于，发货单当中的产品可能不完全出自于库存 t_repo_product类型为2的产品，规范一点，叫做，不完全出自于成品库存？也有可能产品出自于put_repo_order prep单入库产品</p>
</li>
<li><p>发货单当中的产品，出自库存，记录在发货单，对一条发货单记录进行编辑的时候，（成品仓库存发货时，按照先入先出的原则，取先入库的箱子进行发货。） 添加了发货单产品1，以及他对应的箱数10，那么就会在t_out_repo_product发货产品表当中box_num记录箱数，以及对应产品信息，以及还有一个inner_order字段内部子单号，该内部子单号来自于对应库存，这个地方与上面就有点撞，不完全就是发货产品全出自于库存，则该t_out_repo_order_product当中的inner_order字段</p>
</li>
<li><p>捋一捋稍等稍等</p>
</li>
<li><p>直发提货相关表<br>  t_delivery_order直发提货单<br>  t_delivery_arrived_info直发提货到货信息<br>  t_delivery_arrived_product直发提货到货产品<br>  t_delivery_order_expense直发提货费用信息<br>  t_delivery_order_file直发提货单相关文件<br>  t_delivery_order_plan直发提货规划<br>  t_delivery_order_product直发提货产品</p>
</li>
</ul>
<h3 id="三种不同流程的发货流程"><a href="#三种不同流程的发货流程" class="headerlink" title="三种不同流程的发货流程"></a>三种不同流程的发货流程</h3><p>直发提货的流程根据status状态<br> 0 :待联系工厂/1:待核准报价/2:待接受报价更新/3:待安排提货/4:等待到货/5:待入库/6:待确认入库/7待通知发货/8发货准备/9:已发货/10:已取消/11:已终止<br>prep提货单相关表prep提货流程根据status状态<br>prep状态 0-待安排提货/1-等待到货/2-待入库/3-待确认入库/4-已入库/5-已取消/6-已终止/7-已删除<br>prep单相关表prep单流程根据status状态<br>状态 0：待Prep/1：待入库/2：待确认入库/3已入库</p>
<p>都有一个相同的步骤，即待确认入库，则该待确认入库，录入需要入库的来自各个不同发货流程的入库信息到t_put_repo_order根据不同的发货流程入不同的仓库，即真正入库到t_stock_product表中</p>
<p>额，简单点，也就是<br>t_delivery_order/t_prep_delivery_order/t_prep_order（准备产品）—-&gt;t_put_repo_order（录入入库信息）—–&gt;t_stock_product（仓库）表当中；<br>有一个新建的表，t_stock_box_number表，该表为跟随t_stock_product表，两张表当中有重复字段repo_order_id即入库单号重复。<br>t_stock_box_number当中的inner_sub_no理解，即t_put_repo_order_product表入库产品当中的inner_sub_no，t_put_repo_order入库表当中的内部单号即产品种类，t_put_repo_order_product当中的内部子单号即，对该种产品种类做了细化，即产品不同规格的区分。<br>而t_stock_box_number做的即为，t_stock_product当中box_num字段箱数取值多少，对应t_stock_box_number当中生成多少条记录，并做序号区分以便做到发货时（成品仓库存发货时，按照先入先出的原则，取先入库的箱子进行发货。）。<br>这个应该是入库的一个流程；</p>
<h3 id="接下来就是发货的一个流程"><a href="#接下来就是发货的一个流程" class="headerlink" title="接下来就是发货的一个流程"></a>接下来就是发货的一个流程</h3><p>现在再来看 linked_take_delivery_id/linked_put_repo_order/linked_put_repo_inner_order 这三个字段。发货单当中的产品应当取自于t_stock_product表，也就是从0：直发库存/1：Prep库存/2:成品库存；<br>直发提货所入的库存为0：直发库存<br>prep提货所入的库存为1：prep库存<br>prep单所入的库存为1：prep库存<br>（通过Prep提货入库的产品，入的是Prep仓库）<br>那么成品库存，是通过哪个操作入的成品库存？<br>还有就是，之前说过，prep等通过加工后会转变为成品，也就是会入成品仓库？那么相关原型图的操作界面在哪里？</p>
<p>先不管这个。<br>现在发货单当中的产品有从库存当中t_stock_product type:0/1/2当中来取产品，实质应该是从t_stock_box_number这个来取产品？ 因为是通过箱数，一箱一箱的来进行发货的；<br>也可以从t_put_repo_order当中来取，也就是从入库单中来取产品，该产品还未入库，也就是还可以从还未入库当中的产品中来进行取？<br>linked_take_delivery_id/linked_put_repo_order/linked_put_repo_inner_order</p>
<p>好，现在我通过各个条件过滤下，选择了渠道，现在需要发货的产品我也选择了，填写了发货相关的账单信息、文件….信息，我开始发送账单给相关对应的客户，通过邮件服务，我将该账单发送到客户的邮箱当中，此时该发货单order,他的finance_status 财务状态是待确认账单，当回调成功的时候，会有一个payment_id即相当于渠道订单号，这个订单号，我想这个可能需要一张表来记录一下，即我们系统的订单号，也就是发货单order号所对应的渠道订单号，相关信息…或许不用吧…  额当支付成功成功回调之后，进行更新发货单即t_out_repo_order的财务状态为已支付，此时支付成功了之后，也就意味着可以进行真正意义上的发货了。</p>
<p>也就有了渠道跟进单。<br>渠道跟进单的生成应该是，回调支付成功后或者是额手工确认支付成功后，也就是线下支付成功后，然后主动触发去生成这个渠道跟进单？</p>
<p>也就是 prep提货—&gt;prep单—-&gt;成品<br>所以在新建prep单的时候去减了相对应prep仓库当中的产品数量<br>也就是prep单当中编辑的时候，参与prep的产品为【选择库存管理-prep仓库里该客户的库存产品】的原因。</p>
<p>david:<br>发送账单之后，就变成了待放货的状态<br>这个时候，实际上客户有两种选择，一种线上付款，另一种线下付款。而无款放货，就是后台人员直接操作，就是客户不要线上支付了<br>这个时候考虑一下财务状态，财务状态开始是带确认账单，发送了账号之后变成了，待支付<br>待支付变成已支付有两种可能，1、客户线上支付，paypal回调，然后我们改状态。 2、无款放货，改这个状态<br>这个财务状态，再加个状态吧， 如果是线上支付就是，已支付。如果是无款放货，状态就变成 ，无需支付吧，数据库字段说明我改一下。<br>这个待确认账单，是指在发送账单之前，也就是说，生成发货单时，财务状态即待确认账单状态 ，这个理解没毛病<br>这个支付信息，我t_out_rep_order表加了一些字段包括，说明时间支付的。你看要不要结合paypal，再加一张表记录具体的财务新，比如谁，什么邮箱，什么时间点支付了多少钱。其实这些财务信息paypal也有，当然我们系统也可以考虑记录<br>这个你可以考虑，虽然现在系统没有财务这个，但是完善的系统可以记录的，这个你可以把握一下。</p>
<p>投入渠道的订单，首先要判断文件状态，财务状态，和出货单状态<br>所有的出货单，如果一起投入渠道，文件必须是已确认， 财务必须是已支付，或者无需支付，订单状态必须是待投入渠道。<br>当然，目的国家，运输渠道也的一样，参照原型<br>选择的单据与投入的渠道需要目的地国家是一致的，也就是t_out_repo_order记录当中的des_country； 这个就是你的理解<br>(运输方式是否一致，也就是t_out_repo_order记录当中的transport_type_id是否与选择的渠道的运输方式是一致的；)</p>
<p>这里首先<br>1、需要提供一个接口，根据运输方式，和目的地国家，查询出来可以用的渠道<br>2、选择的所有出货单的运输方式，和目的地国家必须相同<br>前端会控制，后台接口应该也要控制</p>
<p>成品-这个是产品的属性，添加产品的时候应该有这个<br>嗯，我们现在订单的产品表只保存了product_attr_id，可能得根据这个去查询管理的产品表，把产品类型的查出来<br>我们现在订单的产品表只保存了product_attr_id，可能得根据这个关联t_product_attr表，然后根据t_product_attr表中的product_id关联t_product表把产品类型的查出来<br>prep单入的是成品仓库<br>prep单就是减少prep仓库的数量，增加成品仓库的数量<br>直发提货，去发货的时候实际上减少的是直发仓库的产品。到时接口要根据直发提货单，找到这个单对应入库的商品，然后参与发货就可以了<br>找到参与发货的商品后和成品仓库发货是一样额，只是选择发货的商品方式不一样而已。<br>直发提货，发货的时候，前端只会告诉你哪个直发提货单要发货<br>成品仓库发货的时候，会告诉你发货多少个数量等等<br>客户手动去主动发起通知发货<br>通知发货，实际上后台就是去创建发货订单<br>发货的的生成，是通知发货这个动作产生的<br>通知发货之后，生成发货订单，生成发货订单，后台才会给客户发送支付账单。。<br>只有入库了，客户就可以通知发货了。然后就是走发货流程<br>支付是在发货流程中</p>
]]></content>
      <categories>
        <category>领赫</category>
      </categories>
      <tags>
        <tag>领赫</tag>
      </tags>
  </entry>
  <entry>
    <title>Choosing a Gift</title>
    <url>/2020/02/01/%E8%8B%B1%E8%AF%AD/lesson2/</url>
    <content><![CDATA[<h2 id="Learn-amp-Talk-I"><a href="#Learn-amp-Talk-I" class="headerlink" title="Learn &amp; Talk I"></a>Learn &amp; Talk I</h2><h3 id="Chapter-1-Shopping"><a href="#Chapter-1-Shopping" class="headerlink" title="Chapter 1 Shopping"></a>Chapter 1 Shopping</h3><h4 id="Lesson-2-Choosing-a-Gift"><a href="#Lesson-2-Choosing-a-Gift" class="headerlink" title="Lesson 2 Choosing a Gift"></a>Lesson 2 Choosing a Gift</h4><blockquote>
<p>at the bottom of the following pages:T1=teaching instructions;T=teacher;S=student</p>
</blockquote>
<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul>
<li><p>part <big>A</big>. Let’s Learn (12 mins)</p>
</li>
<li><p>part <big>B</big>. Let’s Talk (12 mins)</p>
</li>
<li><p>part <big>C</big>. Review (1 min)</p>
</li>
</ul>
<blockquote>
<p>Learning Objectives</p>
</blockquote>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">学习目标：</span><br><span class="line"><span class="number">4</span> <span class="built_in">words</span> <span class="keyword">about</span> <span class="string">"choosing a gift"</span> | <span class="number">4</span>个和<span class="string">"挑礼物"</span>相关的单词</span><br><span class="line">Expressions <span class="keyword">for</span> <span class="string">"choosing a gift"</span> | <span class="string">"挑礼物"</span>常用表达</span><br><span class="line">How <span class="keyword">to</span> talk <span class="keyword">about</span> topics related <span class="keyword">to</span> <span class="string">"choosing a gift"</span> | 谈论和<span class="string">"挑礼物"</span>相关的话题</span><br></pre></td></tr></table></figure>

<h2 id="part-A-Let’s-Learn"><a href="#part-A-Let’s-Learn" class="headerlink" title="part A. Let’s Learn"></a>part A. Let’s Learn</h2><h3 id="Vocabulary-4-mins"><a href="#Vocabulary-4-mins" class="headerlink" title="Vocabulary (4 mins)"></a>Vocabulary (4 mins)</h3><table>
<thead>
<tr>
<th>vocabulary</th>
<th>means</th>
<th>sentense</th>
<th>etc</th>
</tr>
</thead>
<tbody><tr>
<td>look for</td>
<td>to try to find something or someone 寻找（某物/某人）</td>
<td>e.g. They’re <u><strong>looking for</strong></u> insects in the field.</td>
<td></td>
</tr>
<tr>
<td>have something in mind</td>
<td>to think of (想起，有…想法)</td>
<td>e.g. What do you <u><strong>have in mind</strong></u> ?</td>
<td></td>
</tr>
<tr>
<td>how about (doing) something</td>
<td>used to introduce a new subject which you think is relevant to the conversation …怎么样</td>
<td>e.g. 1.<u><strong><em>How about</em></strong></u> a cup of coffee ? 2.<u><strong><em>How about</em></strong></u> going to the cinema ?</td>
<td></td>
</tr>
<tr>
<td>gift-wrap</td>
<td>to wrap as a gift,with decorative pape,ribbon,etc（used as verb）</td>
<td>e.g. She’s <u><strong><em>gift-wrapping</em></strong></u> the chocolate.</td>
<td>gift wrapping 礼品的包装（动名词） 、 wrapping paper 礼品包装纸</td>
</tr>
</tbody></table>
<h3 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h3><h4 id="Role-play-the-dialog-with-your-teacher-twice-and-learn-the-highlighted-expressions-by-heart-和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达"><a href="#Role-play-the-dialog-with-your-teacher-twice-and-learn-the-highlighted-expressions-by-heart-和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达" class="headerlink" title="Role-play the dialog with your teacher twice,and learn the highlighted expressions by heart.和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达"></a>Role-play the dialog with your teacher twice,and learn the highlighted expressions by heart.和老师一起分角色朗读两遍一下对话。熟记标亮部分的短语和表达</h4><h5 id="（Mark-is-choosing-a-gift-for-His-girlfriend-in-a-jewelry-珠宝-store-）"><a href="#（Mark-is-choosing-a-gift-for-His-girlfriend-in-a-jewelry-珠宝-store-）" class="headerlink" title="（Mark is choosing a gift for His girlfriend in a jewelry(珠宝) store.）"></a>（Mark is choosing a gift for His girlfriend in a jewelry(珠宝) store.）</h5><ul>
<li><strong><em>Salesman:</em></strong> Good evening, sir, can i help you ?</li>
<li><strong><em>Mark:</em></strong> Yeah! I’m looking for a gift for my girlfriend.</li>
<li><strong><em>Salesman:</em></strong> Do you have something in mind ?</li>
<li><strong><em>Mark:</em></strong> I think a necklace(项链) would be perfect.</li>
<li><strong><em>Salesman:</em></strong> How about this one ? It sells very well.</li>
<li><strong><em>Mark:</em></strong> Sounds good, but could you gift-wrap this,please ?</li>
<li><strong><em>Salesman:</em></strong> Sure.</li>
</ul>
<h2 id="part-B-Let’s-Talk"><a href="#part-B-Let’s-Talk" class="headerlink" title="part B. Let’s Talk"></a>part B. Let’s Talk</h2><h3 id="Conversation"><a href="#Conversation" class="headerlink" title="Conversation"></a>Conversation</h3><h4 id="Suppose-you’re-choosing-a-gift-in-a-jewelry-store-Use-th-vocabulary-and-expressions-you’ve-learned-in-part-A-to-complete-the-following-conversation-假设你在商店里挑礼物。运用在第一部分学到的词汇和表达将一下情境对话补充完整"><a href="#Suppose-you’re-choosing-a-gift-in-a-jewelry-store-Use-th-vocabulary-and-expressions-you’ve-learned-in-part-A-to-complete-the-following-conversation-假设你在商店里挑礼物。运用在第一部分学到的词汇和表达将一下情境对话补充完整" class="headerlink" title="Suppose you’re choosing a gift in a jewelry store. Use th vocabulary and expressions you’ve learned in part A to complete the following conversation. 假设你在商店里挑礼物。运用在第一部分学到的词汇和表达将一下情境对话补充完整"></a>Suppose you’re choosing a gift in a jewelry store. Use th vocabulary and expressions you’ve learned in part A to complete the following conversation. 假设你在商店里挑礼物。运用在第一部分学到的词汇和表达将一下情境对话补充完整</h4><blockquote>
<p>Hints<br><strong><em>Could you gift-wrap this?</em></strong><br><strong><em>How about this necklace?</em></strong><br><strong><em>look for</em></strong><br><strong><em>(not)have anything in mind</em></strong></p>
</blockquote>
<ul>
<li><strong><em>A:</em></strong> Can I help you, sir/madam?</li>
<li><strong><em>B:</em></strong> Yes,I’m look for a gift for my mother, but i don’t have anything in mind.</li>
<li><strong><em>A:</em></strong> How about this necklace? It;s beautiful and perfect as a gift.</li>
<li><strong><em>B:</em></strong> Could you gift-wrap this?</li>
<li><strong><em>A:</em></strong> Sure. We offer free gift wrapping.</li>
<li><strong><em>B:</em></strong> Fine. I’ll take it.</li>
</ul>
<h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><h4 id="Talk-with-your-teacher-about-the-following-question-Refer-to-the-hints-if-necessary-和老师一起讨论一下问题。可以参考方框中的提示。"><a href="#Talk-with-your-teacher-about-the-following-question-Refer-to-the-hints-if-necessary-和老师一起讨论一下问题。可以参考方框中的提示。" class="headerlink" title="Talk with your teacher about the following question. Refer to the hints if necessary.和老师一起讨论一下问题。可以参考方框中的提示。"></a>Talk with your teacher about the following question. Refer to the hints if necessary.和老师一起讨论一下问题。可以参考方框中的提示。</h4><ul>
<li>1.Describe a gift that you sent to someone recently(最近) or in the past.</li>
</ul>
<blockquote>
<p>Hints:<br><strong><em>What was the gift?</em></strong><br><strong><em>Who did you send th gift to?</em></strong><br><strong><em>When did you send th gift?</em></strong></p>
</blockquote>
<ul>
<li>2.Describe a gift that you ever received.</li>
</ul>
<blockquote>
<p>Hints:<br><strong><em>What was the gift?</em></strong><br><strong><em>Who gave it to you?</em></strong><br><strong><em>When did he/she send you the gift?</em></strong><br><strong><em>Do you like it? Why or why not?</em></strong></p>
</blockquote>
<ul>
<li>Do you think gifts should be wrapped? Why or why not?</li>
</ul>
<blockquote>
<p>Hints:<br><strong><em>yes-&gt;more beautiful / give somebody a surprice…</em></strong><br><strong><em>no-&gt;useless(没用的)/a waste of papre…</em></strong></p>
</blockquote>
<h2 id="part-c-Review"><a href="#part-c-Review" class="headerlink" title="part c. Review"></a>part c. Review</h2><p>In this lesson,you’ve learned</p>
<ul>
<li>5 phrases about “choosing a gift”</li>
</ul>
<blockquote>
<p>look for<br>have something in mind<br>how about(doing) something<br>gift-wrap</p>
</blockquote>
<ul>
<li>commonly used expressions for buying gifts</li>
</ul>
<blockquote>
<p>How about this one?<br>Could you gift-wrap this,please?</p>
</blockquote>
<ul>
<li>how to talk about topics related to “choosing a gift”</li>
</ul>
<h2 id="Further-Study"><a href="#Further-Study" class="headerlink" title="Further Study"></a>Further Study</h2><h3 id="Listen-and-Learn"><a href="#Listen-and-Learn" class="headerlink" title="Listen and Learn"></a>Listen and Learn</h3><blockquote>
<p>loacl handcrafts 当地的手工艺品<br>handmade candles 手工蜡烛<br>handmade pillow 手工枕头<br>jewelry box 珠宝盒<br>wood carving 木雕刻品</p>
</blockquote>
<ul>
<li>These words are all countable!</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">hello,teacher</span><br><span class="line">ok ,i am introducing myself <span class="keyword">to</span> you.</span><br><span class="line"><span class="keyword">first</span>,<span class="keyword">my</span> chinese <span class="built_in">name</span> <span class="keyword">is</span> fengshana,i am <span class="keyword">not</span> have englishname,so,you can call <span class="keyword">me</span> shana.</span><br><span class="line">i am twenty yeas old.</span><br><span class="line">i am a girl. i like reading <span class="keyword">some</span> books.  </span><br><span class="line">now, i am working. i am occuping programing.</span><br><span class="line"><span class="keyword">but</span>,i am look <span class="keyword">for</span> a new job.beacuse ,this <span class="built_in">year</span>,<span class="keyword">in</span> february,i have leaved office. because, i think <span class="keyword">that</span> i am unhappy <span class="keyword">in</span> work <span class="built_in">time</span> ,i fear <span class="keyword">my</span> state <span class="keyword">that</span>  will impact others.so , i leave <span class="keyword">my</span> office.</span><br><span class="line">now, i live <span class="keyword">in</span> china - country,Guangdong province,shenzhen city,longgang distinguish,i <span class="keyword">with</span> <span class="keyword">my</span> friend,she names <span class="keyword">is</span> xielihong ,you can call her lihong,li <span class="keyword">is</span> beautiful mean,hong <span class="keyword">is</span> red. i think her <span class="built_in">name</span> like a beauty.lihong <span class="keyword">with</span> her boyfriend <span class="keyword">in</span> five floors,i like <span class="keyword">in</span> four floors. i live <span class="keyword">on</span> <span class="keyword">my</span> own <span class="keyword">in</span> a studio flat.<span class="keyword">my</span> room <span class="keyword">with</span> a balcony,<span class="keyword">and</span> <span class="keyword">the</span> balcony look out ,have red ,pink,orange colors flower,so beautiful,because ,now <span class="keyword">the</span> season <span class="keyword">is</span> spring.all grass <span class="keyword">is</span> green.<span class="keyword">the</span> wind blowing,sky <span class="keyword">is</span> bule,flowers <span class="keyword">and</span> grass,<span class="keyword">and</span> other grass <span class="keyword">that</span> i can't call these names.<span class="keyword">and</span> <span class="keyword">in</span> <span class="keyword">the</span> morning,<span class="keyword">or</span> now, outside <span class="keyword">of</span> a window,have <span class="keyword">some</span> birds <span class="keyword">that</span> are twittering,peeping. could you imagine <span class="keyword">the</span> picture <span class="keyword">in</span> your mind?</span><br><span class="line"></span><br><span class="line">long ago,<span class="keyword">in</span> <span class="keyword">last</span> <span class="built_in">year</span>, <span class="keyword">in</span> fact, i haved a <span class="built_in">class</span>.later,i haven't a <span class="built_in">class</span>, i think <span class="keyword">that</span> i have more reason,<span class="keyword">but</span>,all reasons <span class="keyword">is</span> used <span class="keyword">as</span> an excuse;so i feel so sorry. teacher.</span><br><span class="line">recently, i have seven  classes. there are classes <span class="keyword">about</span> self-confidence <span class="keyword">and</span>  feelings manager.<span class="keyword">that</span>'s sounds good. <span class="keyword">the</span> teacher <span class="keyword">is</span> chinese.i think these classes are good <span class="keyword">for</span> <span class="keyword">me</span>. i am thanks <span class="keyword">to</span> him.</span><br><span class="line">ok,introducing ,now <span class="keyword">is</span> ending.</span><br></pre></td></tr></table></figure>






<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">recently,long long age, like <span class="keyword">last</span> <span class="built_in">year</span>.i send <span class="keyword">the</span> gift <span class="keyword">to</span> <span class="keyword">my</span> friend. <span class="keyword">my</span> friend, just,<span class="keyword">in</span> introducing, referred lihong. <span class="keyword">the</span> gift <span class="keyword">is</span> a cloth. <span class="keyword">the</span> cloth <span class="keyword">that</span> <span class="keyword">it</span>'s <span class="keyword">back</span> have <span class="keyword">some</span> flowers.these flowers <span class="keyword">is</span> pink, <span class="keyword">the</span> cloth <span class="keyword">is</span> a cappa ,similar <span class="keyword">to</span> a cloak,<span class="keyword">but</span> <span class="keyword">it</span> <span class="keyword">is</span> usually long <span class="keyword">and</span> too thin. just <span class="keyword">as</span> lihong' <span class="built_in">name</span>, <span class="keyword">the</span> cloth <span class="keyword">that</span> i think <span class="keyword">is</span> add a beautiful thing <span class="keyword">to</span> a contrasting beautiful girl .<span class="keyword">but</span> ,i hear <span class="keyword">that</span> her <span class="keyword">try</span> <span class="keyword">on</span> <span class="keyword">the</span> cloth looks like long. so ,advice her can take <span class="keyword">in</span> <span class="keyword">that</span> cloth.</span><br></pre></td></tr></table></figure>

<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">last</span> <span class="built_in">year</span>,i received a gift <span class="keyword">is</span> a bracelet. <span class="keyword">the</span> bracelet have a rabbit <span class="keyword">that</span> <span class="keyword">is</span> small <span class="keyword">and</span> white.<span class="keyword">it</span> <span class="keyword">is</span> very delicate.<span class="keyword">but</span> <span class="keyword">it</span> <span class="keyword">is</span> <span class="keyword">not</span> expensive.<span class="keyword">in</span> price field,<span class="keyword">it</span> <span class="keyword">is</span> just so so. <span class="keyword">the</span> bracelet <span class="keyword">with</span> <span class="keyword">some</span> flowers <span class="keyword">and</span> twining vines,branches <span class="keyword">and</span> green leaves. i think <span class="keyword">that</span> <span class="keyword">is</span> beautiful.</span><br><span class="line"></span><br><span class="line"><span class="keyword">isn't</span> someone gave <span class="keyword">it</span> <span class="keyword">to</span> <span class="keyword">me</span>.contrary,<span class="keyword">is</span> one ,two ,three ,four,group <span class="keyword">of</span> people <span class="keyword">that</span> <span class="keyword">is</span> <span class="keyword">my</span> sister <span class="keyword">and</span> her classmates.</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">last</span> <span class="built_in">year</span> ,they send <span class="keyword">me</span> <span class="keyword">the</span> gift.i like <span class="keyword">it</span>.<span class="keyword">but</span> i don't like <span class="keyword">some</span> ,<span class="keyword">for</span> example,necklace,jewelry,ornaments.i don't like wearing jewelry. so ,<span class="keyword">the</span> gift was collected <span class="keyword">by</span> <span class="keyword">me</span>.</span><br><span class="line"><span class="keyword">the</span> gift,<span class="keyword">not</span> <span class="keyword">in</span> <span class="keyword">my</span> birthday send <span class="keyword">to</span> <span class="keyword">me</span>,neither <span class="keyword">in</span> <span class="keyword">some</span> festival send <span class="keyword">to</span> <span class="keyword">me</span>.</span><br><span class="line">because,<span class="keyword">my</span> sister <span class="keyword">and</span> her classmates <span class="keyword">in</span> senior <span class="keyword">middle</span> school have a dancing show.<span class="keyword">my</span> sister <span class="keyword">is</span> one <span class="keyword">of</span> them <span class="keyword">as</span> a leader dancer.she request <span class="keyword">me</span> <span class="keyword">that</span> whether <span class="keyword">or</span> <span class="keyword">not</span> have <span class="keyword">some</span> free <span class="built_in">time</span> help them make a background video.them shows <span class="keyword">that</span> <span class="keyword">the</span> dancing content <span class="keyword">is</span> ,<span class="keyword">in</span> english, <span class="keyword">is</span> beauty walk. <span class="keyword">in</span> chinese, call show's <span class="built_in">name</span> <span class="keyword">is</span> lirenxing. <span class="keyword">the</span> show model <span class="keyword">from</span> tang dynasty <span class="keyword">in</span> china. when i make <span class="keyword">the</span> video later,i  am very expect <span class="keyword">the</span> show. <span class="keyword">my</span> sister think <span class="keyword">that</span> her afraid audience will prefer <span class="keyword">the</span> video than  them shows. <span class="keyword">the</span> show, i also invite <span class="keyword">my</span> parents <span class="keyword">to</span> <span class="keyword">my</span> sister school <span class="keyword">as</span> audience.<span class="keyword">that</span> point <span class="keyword">of</span> <span class="built_in">time</span> <span class="keyword">is</span> <span class="keyword">my</span> sister school's art festival. <span class="keyword">the</span> show <span class="keyword">is</span> finished successfully.<span class="keyword">my</span> sister <span class="keyword">and</span> her classmates are very thankful <span class="keyword">to</span> <span class="keyword">me</span>,so ,them together discusses an idea <span class="keyword">that</span> send <span class="keyword">me</span> a bracelet.<span class="keyword">it</span> <span class="keyword">is</span> a surprise <span class="keyword">to</span> <span class="keyword">me</span>. <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">time</span>, i even feel <span class="keyword">that</span> i like <span class="keyword">the</span> gift far exceed <span class="keyword">my</span> twenty years birthday. i like <span class="keyword">the</span> gift ,<span class="keyword">but</span> <span class="keyword">not</span> just <span class="keyword">the</span> gift.contrary,i prefer <span class="keyword">to</span> them kindly feelings.<span class="keyword">the</span> point <span class="keyword">is</span> very important.</span><br></pre></td></tr></table></figure>


<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">the</span> <span class="keyword">above</span>-mentioned bracelet <span class="keyword">that</span> was wrapped.</span><br><span class="line">i think <span class="keyword">the</span> gifts whether <span class="keyword">or</span> <span class="keyword">not</span> should be wrapped need observe <span class="keyword">the</span> gift itself.because <span class="keyword">some</span> gift <span class="keyword">is</span> easy broken <span class="keyword">or</span> need <span class="keyword">to</span> take lightly.so, <span class="keyword">in</span> this  situation, <span class="keyword">the</span> gift should be wrapped. others, have <span class="keyword">some</span> big gift,itself haven been wrapped , <span class="keyword">in</span> this condition,so,we needn't <span class="keyword">to</span> wrap <span class="keyword">it</span>.</span><br><span class="line"><span class="keyword">last</span> <span class="keyword">but</span> <span class="keyword">not</span> least,i think <span class="keyword">the</span> gift should be wrapped ,this topic,<span class="keyword">it</span> would <span class="keyword">by</span> best <span class="keyword">not</span> wrapped. because this way <span class="keyword">that</span> i think <span class="keyword">is</span> protect <span class="keyword">the</span> environment. shouldn't wrapped <span class="keyword">the</span> gift <span class="keyword">not</span> <span class="keyword">is</span> useless,contrary,<span class="keyword">if</span> <span class="keyword">the</span> gift have been wrapped,<span class="keyword">it</span> <span class="keyword">is</span> will bring receiver a good impression.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>教案 LT1 Glossary 单词表</title>
    <url>/2020/01/31/%E8%8B%B1%E8%AF%AD/%E6%95%99%E6%A1%88LT1Clossary%E5%8D%95%E8%AF%8D%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="GLOSSARY"><a href="#GLOSSARY" class="headerlink" title="GLOSSARY"></a>GLOSSARY</h1><h2 id="Chapter-1-Shopping-购物"><a href="#Chapter-1-Shopping-购物" class="headerlink" title="Chapter 1 Shopping 购物"></a>Chapter 1 Shopping 购物</h2><h3 id="L1-Buying-Clothes-买衣服"><a href="#L1-Buying-Clothes-买衣服" class="headerlink" title="L1 Buying Clothes 买衣服"></a>L1 Buying Clothes 买衣服</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>on sale</td>
<td>减价的，降价出售的</td>
</tr>
<tr>
<td>try on</td>
<td>试穿</td>
</tr>
<tr>
<td>out of stock</td>
<td>缺货的，售罄的</td>
</tr>
<tr>
<td>take in</td>
<td>将（衣物）改小</td>
</tr>
</tbody></table>
<h3 id="L2-Choosing-a-Gift-挑选礼物"><a href="#L2-Choosing-a-Gift-挑选礼物" class="headerlink" title="L2 Choosing a Gift 挑选礼物"></a>L2 Choosing a Gift 挑选礼物</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>look for</td>
<td>寻找（某人/某物）</td>
</tr>
<tr>
<td>have something in mind</td>
<td>想起，有…的想法</td>
</tr>
<tr>
<td>how about (doing) something</td>
<td>…怎么样</td>
</tr>
<tr>
<td>gift wrap</td>
<td>礼品包装</td>
</tr>
</tbody></table>
<h3 id="L3-In-the-supermarket-在超市"><a href="#L3-In-the-supermarket-在超市" class="headerlink" title="L3 In the supermarket 在超市"></a>L3 In the supermarket 在超市</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>toothbrush</td>
<td>n.牙刷</td>
</tr>
<tr>
<td>promote</td>
<td>v.促销</td>
</tr>
</tbody></table>
<h3 id="L4-Shopping-for-a-TV-买台电视"><a href="#L4-Shopping-for-a-TV-买台电视" class="headerlink" title="L4 Shopping for a TV 买台电视"></a>L4 Shopping for a TV 买台电视</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>warranty</td>
<td>n.保修单，保修卡</td>
</tr>
<tr>
<td>best-seller</td>
<td>n.热卖品，畅销品</td>
</tr>
<tr>
<td>offer</td>
<td>v.提供</td>
</tr>
<tr>
<td>delivery</td>
<td>n.运送，递送</td>
</tr>
</tbody></table>
<h3 id="L5-Buying-a-Smartphone-买部手机"><a href="#L5-Buying-a-Smartphone-买部手机" class="headerlink" title="L5 Buying a Smartphone 买部手机"></a>L5 Buying a Smartphone 买部手机</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>top-of-the-line</td>
<td>adj.最具水准的，顶级的</td>
</tr>
<tr>
<td>have access to</td>
<td>可以使用，可以访问</td>
</tr>
<tr>
<td>out of credit</td>
<td>（手机）没话费，（银行）没存款</td>
</tr>
<tr>
<td>top up</td>
<td>给…加满，充值</td>
</tr>
</tbody></table>
<h3 id="L6-Bargaining-讨价还价"><a href="#L6-Bargaining-讨价还价" class="headerlink" title="L6 Bargaining 讨价还价"></a>L6 Bargaining 讨价还价</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>bargain</td>
<td>n.便宜货，交易 v.讨价还价</td>
</tr>
<tr>
<td>windfall</td>
<td>n.被风吹落的过时，意外之财</td>
</tr>
<tr>
<td>set somebody back</td>
<td>使花费</td>
</tr>
<tr>
<td>make an exception</td>
<td>破例，作为例外</td>
</tr>
</tbody></table>
<h3 id="L7-Checking-Out-结账"><a href="#L7-Checking-Out-结账" class="headerlink" title="L7 Checking Out 结账"></a>L7 Checking Out 结账</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>check out</td>
<td>结账离开</td>
</tr>
<tr>
<td>error</td>
<td>n.错误</td>
</tr>
<tr>
<td>credit card</td>
<td>信用卡</td>
</tr>
<tr>
<td>password</td>
<td>n.口令；密码</td>
</tr>
<tr>
<td>change</td>
<td>n.找头，找给的零钱</td>
</tr>
<tr>
<td>receipt</td>
<td>n.发票，收据</td>
</tr>
</tbody></table>
<h3 id="L8-Return-amp-Refund-归还-and-退款"><a href="#L8-Return-amp-Refund-归还-and-退款" class="headerlink" title="L8 Return &amp; Refund 归还 and 退款"></a>L8 Return &amp; Refund 归还 and 退款</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>return</td>
<td>v.归还</td>
</tr>
<tr>
<td>refund</td>
<td>v.退款</td>
</tr>
<tr>
<td>turn off</td>
<td>关闭，关掉</td>
</tr>
<tr>
<td>take care of</td>
<td>处理；照顾；注意</td>
</tr>
<tr>
<td>on one’s own</td>
<td>独自</td>
</tr>
</tbody></table>
<h3 id="L9-Online-Shopping-网上购物"><a href="#L9-Online-Shopping-网上购物" class="headerlink" title="L9 Online Shopping 网上购物"></a>L9 Online Shopping 网上购物</h3><table>
<thead>
<tr>
<th>word</th>
<th>shopping</th>
</tr>
</thead>
<tbody><tr>
<td>order</td>
<td>v.订购</td>
</tr>
<tr>
<td>deal</td>
<td>n.交易</td>
</tr>
<tr>
<td>discount</td>
<td>n.折扣</td>
</tr>
<tr>
<td>original</td>
<td>adj.原始的，最初的，独创的</td>
</tr>
</tbody></table>
<h2 id="Chapter-2-Dining-吃饭"><a href="#Chapter-2-Dining-吃饭" class="headerlink" title="Chapter 2 Dining 吃饭"></a>Chapter 2 Dining 吃饭</h2><h3 id="L12-In-a-Restaurant-在旅馆"><a href="#L12-In-a-Restaurant-在旅馆" class="headerlink" title="L12 In a Restaurant 在旅馆"></a>L12 In a Restaurant 在旅馆</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>free of charge</td>
<td>免费</td>
</tr>
<tr>
<td>main course</td>
<td>主菜，大菜</td>
</tr>
<tr>
<td>special</td>
<td>n.特色菜</td>
</tr>
<tr>
<td>offer</td>
<td>v.提供，供应</td>
</tr>
</tbody></table>
<h3 id="L13-In-the-Food-Court"><a href="#L13-In-the-Food-Court" class="headerlink" title="L13 In the Food Court"></a>L13 In the Food Court</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>be in the mood(for something…/to do something)</td>
<td>想要做</td>
</tr>
<tr>
<td>department store</td>
<td>百货公司，商场</td>
</tr>
<tr>
<td>enormous</td>
<td>adj.（尺寸，数量）巨大的，庞大的</td>
</tr>
<tr>
<td>food court</td>
<td>(商场内)饮食区，美食街</td>
</tr>
<tr>
<td>review</td>
<td>v.评论，复习</td>
</tr>
<tr>
<td>appetite</td>
<td>n.食欲，胃口，喜爱</td>
</tr>
</tbody></table>
<h3 id="L14-At-the-Cafe-在咖啡厅"><a href="#L14-At-the-Cafe-在咖啡厅" class="headerlink" title="L14 At the Cafe 在咖啡厅"></a>L14 At the Cafe 在咖啡厅</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>mocha</td>
<td>n.摩卡咖啡，摩卡</td>
</tr>
<tr>
<td>cappuccino</td>
<td>n.卡布奇诺咖啡</td>
</tr>
<tr>
<td>espresso</td>
<td>n.浓咖啡</td>
</tr>
<tr>
<td>brownie</td>
<td>n.布朗尼</td>
</tr>
</tbody></table>
<h3 id="L15-Eating-Junk-Food-吃垃圾食品"><a href="#L15-Eating-Junk-Food-吃垃圾食品" class="headerlink" title="L15 Eating Junk Food 吃垃圾食品"></a>L15 Eating Junk Food 吃垃圾食品</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>on a diet</td>
<td>节食减肥</td>
</tr>
<tr>
<td>junk food</td>
<td>垃圾食品</td>
</tr>
<tr>
<td>lolly</td>
<td>n.棒棒糖</td>
</tr>
<tr>
<td>addictive</td>
<td>adj.上瘾的</td>
</tr>
<tr>
<td>moderation</td>
<td>n.适度</td>
</tr>
</tbody></table>
<h3 id="L16-Chinese-Food"><a href="#L16-Chinese-Food" class="headerlink" title="L16 Chinese Food"></a>L16 Chinese Food</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>divide</td>
<td>v.把…分成</td>
</tr>
<tr>
<td>cuisine</td>
<td>n.烹调</td>
</tr>
<tr>
<td>Mapo Bean Curd</td>
<td>麻婆豆腐</td>
</tr>
<tr>
<td>Yuxiang Shredded Pork</td>
<td>鱼香肉丝</td>
</tr>
<tr>
<td>recommendation</td>
<td>n.建议，推荐</td>
</tr>
<tr>
<td>light</td>
<td>adj.淡的</td>
</tr>
</tbody></table>
<h3 id="L17-Ordering-Food-by-Phone"><a href="#L17-Ordering-Food-by-Phone" class="headerlink" title="L17 Ordering Food by Phone"></a>L17 Ordering Food by Phone</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>grocery</td>
<td>n.食品杂货</td>
</tr>
<tr>
<td>vanilla</td>
<td>n.香草（adj.香草味的）</td>
</tr>
<tr>
<td>syrup</td>
<td>n.糖浆</td>
</tr>
<tr>
<td>delivery boy</td>
<td>送货员</td>
</tr>
</tbody></table>
<h3 id="L18-Reserving-a-Table-at-a-Restaurant"><a href="#L18-Reserving-a-Table-at-a-Restaurant" class="headerlink" title="L18 Reserving a Table at a Restaurant"></a>L18 Reserving a Table at a Restaurant</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>assist</td>
<td>v.帮助</td>
</tr>
<tr>
<td>reservation</td>
<td>n.预购，预定</td>
</tr>
</tbody></table>
<h2 id="Chapter-3-Traveling"><a href="#Chapter-3-Traveling" class="headerlink" title="Chapter 3 Traveling"></a>Chapter 3 Traveling</h2><h3 id="L21-A-Pleasant-Journey"><a href="#L21-A-Pleasant-Journey" class="headerlink" title="L21 A Pleasant Journey"></a>L21 A Pleasant Journey</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>peaceful</td>
<td>adj.平静的，安静的</td>
</tr>
<tr>
<td>relaxing</td>
<td>adj.令人放松的，轻松的，有助于休息的</td>
</tr>
<tr>
<td>tight</td>
<td>adj.紧的，拮据的</td>
</tr>
<tr>
<td>upload</td>
<td>v.上传（程序或信息）</td>
</tr>
</tbody></table>
<h3 id="L22-Getting-a-License"><a href="#L22-Getting-a-License" class="headerlink" title="L22 Getting a License"></a>L22 Getting a License</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>driver’s license</td>
<td>驾照</td>
</tr>
<tr>
<td>gas</td>
<td>n.汽油，气体，瓦斯，毒气</td>
</tr>
<tr>
<td>maintenance</td>
<td>n.维修，保养</td>
</tr>
<tr>
<td>insurance</td>
<td>n.保险</td>
</tr>
<tr>
<td>public transport</td>
<td>公共交通</td>
</tr>
<tr>
<td>road trip</td>
<td>开车长途旅行</td>
</tr>
</tbody></table>
<h3 id="L23-Asking-for-Directions"><a href="#L23-Asking-for-Directions" class="headerlink" title="L23 Asking for Directions"></a>L23 Asking for Directions</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>distant</td>
<td>adj.遥远的</td>
</tr>
<tr>
<td>straight</td>
<td>adv.直地</td>
</tr>
<tr>
<td>intersection</td>
<td>n.十字路口</td>
</tr>
<tr>
<td>block</td>
<td>n.街区</td>
</tr>
</tbody></table>
<h3 id="L24-Applying-for-a-Passport"><a href="#L24-Applying-for-a-Passport" class="headerlink" title="L24 Applying for a Passport"></a>L24 Applying for a Passport</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>figure out</td>
<td>弄清楚；解决</td>
</tr>
<tr>
<td>document</td>
<td>n.文件</td>
</tr>
<tr>
<td>submit</td>
<td>v.提交，呈送</td>
</tr>
<tr>
<td>fill out</td>
<td>填写</td>
</tr>
<tr>
<td>apply</td>
<td>v.申请</td>
</tr>
</tbody></table>
<h3 id="L25-Checking-in"><a href="#L25-Checking-in" class="headerlink" title="L25 Checking in"></a>L25 Checking in</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>check in</td>
<td>(在旅馆、机场等)登记，报到</td>
</tr>
<tr>
<td>reservation</td>
<td>n.预约，预定</td>
</tr>
<tr>
<td>request</td>
<td>n.(礼貌、正式的)要求，请求</td>
</tr>
<tr>
<td>departure</td>
<td>n.(人、交通工具等)离开；启程，出发</td>
</tr>
</tbody></table>
<h3 id="L26-Room-Service"><a href="#L26-Room-Service" class="headerlink" title="L26 Room Service"></a>L26 Room Service</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>Department</td>
<td>n.部，局，处，系</td>
</tr>
<tr>
<td>order</td>
<td>v.(尤其指在饭店或者商店)点（饭菜），订购</td>
</tr>
<tr>
<td>a set of</td>
<td>套，副</td>
</tr>
<tr>
<td>serve</td>
<td>v.提供（食物或者饮料）</td>
</tr>
</tbody></table>
<h3 id="L27-At-the-Airport"><a href="#L27-At-the-Airport" class="headerlink" title="L27 At the Airport"></a>L27 At the Airport</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>passport</td>
<td>n.护照</td>
</tr>
<tr>
<td>visa</td>
<td>n.签证</td>
</tr>
<tr>
<td>stopover</td>
<td>n.中途停留</td>
</tr>
<tr>
<td>board</td>
<td>v.上船（或火车、飞机）</td>
</tr>
<tr>
<td>delightful</td>
<td>adj.令人愉快的</td>
</tr>
<tr>
<td>assistance</td>
<td>n.帮助，援助，扶持</td>
</tr>
</tbody></table>
<h2 id="Chapter-4-Daily-Life"><a href="#Chapter-4-Daily-Life" class="headerlink" title="Chapter 4 Daily Life"></a>Chapter 4 Daily Life</h2><h3 id="L30-Finding-a-Book-at-the-Bookstore"><a href="#L30-Finding-a-Book-at-the-Bookstore" class="headerlink" title="L30 Finding a Book at the Bookstore"></a>L30 Finding a Book at the Bookstore</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>fiction</td>
<td>n.小说</td>
</tr>
<tr>
<td>release</td>
<td>v.发布（新书等）</td>
</tr>
<tr>
<td>title</td>
<td>n.题目，标题，名字</td>
</tr>
<tr>
<td>bestseller</td>
<td>n.畅销书</td>
</tr>
</tbody></table>
<h3 id="L31-Renting-an-Apartment"><a href="#L31-Renting-an-Apartment" class="headerlink" title="L31 Renting an Apartment"></a>L31 Renting an Apartment</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>apartment</td>
<td>n.公寓套房</td>
</tr>
<tr>
<td>location</td>
<td>n.地点，位置</td>
</tr>
<tr>
<td>magnificent</td>
<td>adj.极好的，壮丽的，令人羡慕的</td>
</tr>
<tr>
<td>lease</td>
<td>n.租借，租约</td>
</tr>
</tbody></table>
<h3 id="L32-Opening-a-Bank-Account"><a href="#L32-Opening-a-Bank-Account" class="headerlink" title="L32 Opening a Bank Account"></a>L32 Opening a Bank Account</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>valid</td>
<td>adj.(票或其他文件)有效的，正式认可的</td>
</tr>
<tr>
<td>initial</td>
<td>adj.开始的，最初的</td>
</tr>
<tr>
<td>deposit</td>
<td>v.将（钱）存入银行，存储</td>
</tr>
<tr>
<td>account</td>
<td>n.账户，户头</td>
</tr>
</tbody></table>
<h3 id="L33-Making-Phone-Calls"><a href="#L33-Making-Phone-Calls" class="headerlink" title="L33 Making Phone Calls"></a>L33 Making Phone Calls</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>appointment</td>
<td>n.约会，预约，约定</td>
</tr>
<tr>
<td>be able to</td>
<td>能够做某事</td>
</tr>
<tr>
<td>available</td>
<td>adj.可获得的，可用的</td>
</tr>
<tr>
<td>pass on</td>
<td>将…传给，将…交给</td>
</tr>
<tr>
<td>apology</td>
<td>n.道歉，认错谢罪</td>
</tr>
</tbody></table>
<h3 id="L34-A-Visit-to-the-Hospital"><a href="#L34-A-Visit-to-the-Hospital" class="headerlink" title="L34 A Visit to the Hospital"></a>L34 A Visit to the Hospital</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>temperature</td>
<td>n.温度，体温</td>
</tr>
<tr>
<td>flu</td>
<td>n.流行性感冒，流感</td>
</tr>
<tr>
<td>medicine</td>
<td>n.药，药物，药剂</td>
</tr>
<tr>
<td>pharmacy</td>
<td>n.药店，药房，（商店的）药品部</td>
</tr>
</tbody></table>
<h3 id="L35-At-the-Amusement-Park"><a href="#L35-At-the-Amusement-Park" class="headerlink" title="L35 At the Amusement Park"></a>L35 At the Amusement Park</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>roller coaster</td>
<td>过山车</td>
</tr>
<tr>
<td>thrill</td>
<td>n.兴奋，激动，紧张感</td>
</tr>
<tr>
<td>adventure</td>
<td>n.冒险，历险，奇遇</td>
</tr>
<tr>
<td>confess</td>
<td>v.坦白，供认，招认，承认（错误或者罪行）</td>
</tr>
<tr>
<td>scared</td>
<td>adj.惊恐的，恐惧的，害怕的</td>
</tr>
</tbody></table>
<h2 id="Chapter5-Entertainment"><a href="#Chapter5-Entertainment" class="headerlink" title="Chapter5 Entertainment"></a>Chapter5 Entertainment</h2><h3 id="L38-Going-to-the-Movies"><a href="#L38-Going-to-the-Movies" class="headerlink" title="L38 Going to the Movies"></a>L38 Going to the Movies</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>scary</td>
<td>adj.令人恐怖的</td>
</tr>
<tr>
<td>comedy</td>
<td>n.喜剧，喜剧片</td>
</tr>
<tr>
<td>action movie</td>
<td>动作片</td>
</tr>
<tr>
<td>pick somebody up</td>
<td>(通常指开车)接载，取走</td>
</tr>
</tbody></table>
<h3 id="L39-A-Visit-to-the-Zoo"><a href="#L39-A-Visit-to-the-Zoo" class="headerlink" title="L39 A Visit to the Zoo"></a>L39 A Visit to the Zoo</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>captivity</td>
<td>n.关押，囚禁</td>
</tr>
<tr>
<td>upside</td>
<td>n.优点，好处，有利的一面</td>
</tr>
<tr>
<td>check out</td>
<td>看一看，瞧瞧（某物，尤其指新的事物）</td>
</tr>
<tr>
<td>alpaca</td>
<td>n.(南美的)羊驼</td>
</tr>
</tbody></table>
<h3 id="L40-Working-out-at-the-Gym"><a href="#L40-Working-out-at-the-Gym" class="headerlink" title="L40 Working out at the Gym"></a>L40 Working out at the Gym</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>gym</td>
<td>n.健身俱乐部</td>
</tr>
<tr>
<td>instructor</td>
<td>n.教练</td>
</tr>
<tr>
<td>wonder</td>
<td>v.疑惑，想知道</td>
</tr>
<tr>
<td>cardio</td>
<td>n.有氧运动</td>
</tr>
</tbody></table>
<h3 id="L41-Visiting-a-Museum"><a href="#L41-Visiting-a-Museum" class="headerlink" title="L41 Visiting a Museum"></a>L41 Visiting a Museum</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>audio</td>
<td>adj.声音的，录音的，播音的，音频的</td>
</tr>
<tr>
<td>permanent</td>
<td>adj.长久的，永久的，永恒的</td>
</tr>
<tr>
<td>except for</td>
<td>除…之外</td>
</tr>
<tr>
<td>photography</td>
<td>n.照相术，摄影</td>
</tr>
</tbody></table>
<h3 id="L42-The-Concert"><a href="#L42-The-Concert" class="headerlink" title="L42 The Concert"></a>L42 The Concert</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>successful</td>
<td>adj.成功的，达到目的的</td>
</tr>
<tr>
<td>concert</td>
<td>n.现场演出，演唱会</td>
</tr>
<tr>
<td>row</td>
<td>n.一排，一行，一列</td>
</tr>
<tr>
<td>sell out</td>
<td>卖光</td>
</tr>
</tbody></table>
<h3 id="L43-Going-to-a-Book-Fair"><a href="#L43-Going-to-a-Book-Fair" class="headerlink" title="L43 Going to a Book Fair"></a>L43 Going to a Book Fair</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>fair</td>
<td>n.商品展销会，商品交易会</td>
</tr>
<tr>
<td>illustrator</td>
<td>n.(尤其指书籍的)插图画家</td>
</tr>
<tr>
<td>line up</td>
<td>排队</td>
</tr>
<tr>
<td>be crowded with</td>
<td>充满，拥挤，挤满</td>
</tr>
<tr>
<td>signature</td>
<td>n.签名</td>
</tr>
<tr>
<td>dawn</td>
<td>n.拂晓，破晓，黎明</td>
</tr>
</tbody></table>
<h2 id="Chapter-6-Education"><a href="#Chapter-6-Education" class="headerlink" title="Chapter 6 Education"></a>Chapter 6 Education</h2><h3 id="L46-At-the-Library"><a href="#L46-At-the-Library" class="headerlink" title="L46 At the Library"></a>L46 At the Library</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>procedure</td>
<td>n.流程，手续</td>
</tr>
<tr>
<td>librarian</td>
<td>n.图书管理员，图书馆馆长</td>
</tr>
<tr>
<td>check out</td>
<td>借出（书籍等）</td>
</tr>
<tr>
<td>wing</td>
<td>n.(建筑的)侧厅，厢房</td>
</tr>
<tr>
<td>hand in</td>
<td>递交，提交</td>
</tr>
</tbody></table>
<h3 id="L47-In-the-Dorm"><a href="#L47-In-the-Dorm" class="headerlink" title="L47 In the Dorm"></a>L47 In the Dorm</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>roommate</td>
<td>n.室友</td>
</tr>
<tr>
<td>berth</td>
<td>n.床位，铺位</td>
</tr>
<tr>
<td>dorm</td>
<td>n.宿舍</td>
</tr>
<tr>
<td>by the way</td>
<td>顺带一提</td>
</tr>
<tr>
<td>work out</td>
<td>(顺利)发展，进行</td>
</tr>
</tbody></table>
<h3 id="L48-Taking-an-Exam"><a href="#L48-Taking-an-Exam" class="headerlink" title="L48 Taking an Exam"></a>L48 Taking an Exam</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>tough</td>
<td>adj.难熬的</td>
</tr>
<tr>
<td>paper</td>
<td>n.论文</td>
</tr>
<tr>
<td>due</td>
<td>adj.到期的，应上交的</td>
</tr>
<tr>
<td>percentage</td>
<td>n.百分比</td>
</tr>
<tr>
<td>pull an all-nighter</td>
<td>熬夜，开夜车（学习）</td>
</tr>
</tbody></table>
<h3 id="L49-University-Classes"><a href="#L49-University-Classes" class="headerlink" title="L49 University Classes"></a>L49 University Classes</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>available</td>
<td>adj.可选的，可用的</td>
</tr>
<tr>
<td>register (for…)</td>
<td>v.注册，选（课）</td>
</tr>
<tr>
<td>instructor</td>
<td>n.讲师，教员</td>
</tr>
<tr>
<td>fail</td>
<td>v.挂（科）</td>
</tr>
<tr>
<td>easy grader</td>
<td>给分宽的教授/老师</td>
</tr>
</tbody></table>
<h3 id="L50-Studying-Abroad"><a href="#L50-Studying-Abroad" class="headerlink" title="L50 Studying Abroad"></a>L50 Studying Abroad</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>abroad</td>
<td>adv.在国外，到国外</td>
</tr>
<tr>
<td>upcoming</td>
<td>adj.即将到来的</td>
</tr>
<tr>
<td>sort of</td>
<td>有一点，稍微</td>
</tr>
<tr>
<td>terribly</td>
<td>adv.非常，极度</td>
</tr>
<tr>
<td>make up one’s mind</td>
<td>下定决心</td>
</tr>
</tbody></table>
<h3 id="L51-Studying-Online"><a href="#L51-Studying-Online" class="headerlink" title="L51 Studying Online"></a>L51 Studying Online</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>face to face</td>
<td>adj.面对面的 adv.面对面地</td>
</tr>
<tr>
<td>to be frank</td>
<td>坦白说</td>
</tr>
<tr>
<td>people person</td>
<td>喜欢和人打交道的人</td>
</tr>
<tr>
<td>affordable</td>
<td>adj.便宜的</td>
</tr>
<tr>
<td>make sense</td>
<td>说得通，有道理</td>
</tr>
</tbody></table>
<h2 id="Chapter-7-Work"><a href="#Chapter-7-Work" class="headerlink" title="Chapter 7 Work"></a>Chapter 7 Work</h2><h3 id="L54-Job-hunting"><a href="#L54-Job-hunting" class="headerlink" title="L54 Job hunting"></a>L54 Job hunting</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>hunt(for…)</td>
<td>v.搜索，寻找</td>
</tr>
<tr>
<td>resume</td>
<td>n.简历</td>
</tr>
<tr>
<td>follow up</td>
<td>跟进</td>
</tr>
<tr>
<td>initiative</td>
<td>n.主动性，进取心</td>
</tr>
<tr>
<td>on a roll</td>
<td>好运连连</td>
</tr>
</tbody></table>
<h3 id="L55-Job-Interview"><a href="#L55-Job-Interview" class="headerlink" title="L55 Job Interview"></a>L55 Job Interview</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>employer</td>
<td>n.雇主，公司</td>
</tr>
<tr>
<td>tend to (do something)</td>
<td>倾向于，往往会做（某事）</td>
</tr>
<tr>
<td>strength</td>
<td>n.强项，长处</td>
</tr>
<tr>
<td>weakness</td>
<td>n.弱点</td>
</tr>
<tr>
<td>have trouble (doing something)</td>
<td>(做某事)有困难，有麻烦</td>
</tr>
</tbody></table>
<h3 id="L56-Arriving-Late"><a href="#L56-Arriving-Late" class="headerlink" title="L56 Arriving Late"></a>L56 Arriving Late</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>continual</td>
<td>adj.连续的，频繁的</td>
</tr>
<tr>
<td>hold up</td>
<td>阻碍，使停滞</td>
</tr>
<tr>
<td>anticipate</td>
<td>v.预测，预料</td>
</tr>
<tr>
<td>promise</td>
<td>v.承诺</td>
</tr>
<tr>
<td>plan on (doing something) 计划，打算（做某事）</td>
<td></td>
</tr>
</tbody></table>
<h3 id="L57-Asking-for-a-Leave"><a href="#L57-Asking-for-a-Leave" class="headerlink" title="L57 Asking for a Leave"></a>L57 Asking for a Leave</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>flu</td>
<td>n.流感</td>
</tr>
<tr>
<td>log</td>
<td>v.登记，记录</td>
</tr>
<tr>
<td>cover</td>
<td>v.照料，处理</td>
</tr>
<tr>
<td>urgent</td>
<td>adj.紧急的</td>
</tr>
<tr>
<td>sick day</td>
<td>病假日</td>
</tr>
</tbody></table>
<h3 id="L58-Working-Overtine"><a href="#L58-Working-Overtine" class="headerlink" title="L58 Working Overtine"></a>L58 Working Overtine</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>punch out</td>
<td>打卡（下班）</td>
</tr>
<tr>
<td>no way</td>
<td>没门儿，想得美</td>
</tr>
<tr>
<td>first thing</td>
<td>首先，一大早</td>
</tr>
<tr>
<td>deadline</td>
<td>n.截止日期，交付期限</td>
</tr>
<tr>
<td>have had enough of</td>
<td>受够了</td>
</tr>
</tbody></table>
<h3 id="L59-Meetings"><a href="#L59-Meetings" class="headerlink" title="L59 Meetings"></a>L59 Meetings</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>regular meeting</td>
<td>例会</td>
</tr>
<tr>
<td>brief</td>
<td>简短的，简洁的</td>
</tr>
<tr>
<td>client</td>
<td>n.客户</td>
</tr>
<tr>
<td>behind schedule</td>
<td>(进度)落后</td>
</tr>
<tr>
<td>halfway through</td>
<td>到一半，到中途</td>
</tr>
</tbody></table>
<h3 id="L60-Asking-for-a-Rise"><a href="#L60-Asking-for-a-Rise" class="headerlink" title="L60 Asking for a Rise"></a>L60 Asking for a Rise</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>salary</td>
<td>n.薪水，工资</td>
</tr>
<tr>
<td>raise</td>
<td>n.加薪</td>
</tr>
<tr>
<td>lay off</td>
<td>解雇，开除</td>
</tr>
<tr>
<td>exception</td>
<td>n.例外</td>
</tr>
<tr>
<td>take on</td>
<td>承担</td>
</tr>
</tbody></table>
<h3 id="L61-Promotion"><a href="#L61-Promotion" class="headerlink" title="L61 Promotion"></a>L61 Promotion</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>replacement</td>
<td>n.替代，替补</td>
</tr>
<tr>
<td>post</td>
<td>v.张贴，公布</td>
</tr>
<tr>
<td>internal</td>
<td>adj.内部的</td>
</tr>
<tr>
<td>let (someone) down</td>
<td>使（某人）失望</td>
</tr>
<tr>
<td>apply (for…)</td>
<td>v.申请</td>
</tr>
</tbody></table>
<h3 id="L63-Starting-a-Business"><a href="#L63-Starting-a-Business" class="headerlink" title="L63 Starting a Business"></a>L63 Starting a Business</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>abandon</td>
<td>v.放弃，抛弃</td>
</tr>
<tr>
<td>regulation</td>
<td>n.规章，制度</td>
</tr>
<tr>
<td>themed</td>
<td>adj.(以…为)主题的</td>
</tr>
<tr>
<td>start-up</td>
<td>adj.初创的，启动的</td>
</tr>
<tr>
<td>one of a kind</td>
<td>独一无二的</td>
</tr>
</tbody></table>
<h2 id="Chapter-8-Health"><a href="#Chapter-8-Health" class="headerlink" title="Chapter 8 Health"></a>Chapter 8 Health</h2><h3 id="L65-Sports"><a href="#L65-Sports" class="headerlink" title="L65 Sports"></a>L65 Sports</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>cycling</td>
<td>n.骑行</td>
</tr>
<tr>
<td>cyclist</td>
<td>n.骑自行车的人</td>
</tr>
<tr>
<td>court</td>
<td>n.球场</td>
</tr>
<tr>
<td>pavement</td>
<td>n.人行道</td>
</tr>
<tr>
<td>running track</td>
<td>跑道</td>
</tr>
</tbody></table>
<h3 id="L66-Weight-Control"><a href="#L66-Weight-Control" class="headerlink" title="L66 Weight Control"></a>L66 Weight Control</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>diet</td>
<td>n.规定饮食，节食</td>
</tr>
<tr>
<td>fat</td>
<td>n.脂肪</td>
</tr>
<tr>
<td>metabolism</td>
<td>n.新陈代谢</td>
</tr>
<tr>
<td>speed up</td>
<td>加速，使…加速</td>
</tr>
<tr>
<td>incorporate</td>
<td>v.融入，结合</td>
</tr>
</tbody></table>
<h3 id="L67-Aches-and-Pains"><a href="#L67-Aches-and-Pains" class="headerlink" title="L67 Aches and Pains"></a>L67 Aches and Pains</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>limp</td>
<td>v.跛行，一瘸一拐</td>
</tr>
<tr>
<td>ache</td>
<td>n./v. 疼，痛</td>
</tr>
<tr>
<td>sore</td>
<td>adj.酸痛的</td>
</tr>
<tr>
<td>butt</td>
<td>n.臀部，屁股</td>
</tr>
<tr>
<td>cramp</td>
<td>n.痉挛，抽筋，绞痛</td>
</tr>
</tbody></table>
<h3 id="L68-Medical-Check-up"><a href="#L68-Medical-Check-up" class="headerlink" title="L68 Medical Check-up"></a>L68 Medical Check-up</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>check-up</td>
<td>n.体检，健康检查</td>
</tr>
<tr>
<td>at least</td>
<td>至少</td>
</tr>
<tr>
<td>cause</td>
<td>n.(尤其指不好的事情发生)原因，起因</td>
</tr>
<tr>
<td>medicine</td>
<td>n.药，药物，药剂</td>
</tr>
<tr>
<td>quit</td>
<td>v.停止，放弃</td>
</tr>
</tbody></table>
<h3 id="L69-Seeing-a-Doctor"><a href="#L69-Seeing-a-Doctor" class="headerlink" title="L69 Seeing a Doctor"></a>L69 Seeing a Doctor</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>nauseous</td>
<td>adj.感到恶心的，想呕吐的</td>
</tr>
<tr>
<td>discomfort</td>
<td>n.不适，不安，不舒服</td>
</tr>
<tr>
<td>on and off</td>
<td>时断时续地，间歇的</td>
</tr>
<tr>
<td>recover</td>
<td>v.(在疾病或受伤之后)完全恢复健康</td>
</tr>
<tr>
<td>allergic</td>
<td>adj.过敏的</td>
</tr>
</tbody></table>
<h3 id="L70-At-the-Drugstore"><a href="#L70-At-the-Drugstore" class="headerlink" title="L70 At the Drugstore"></a>L70 At the Drugstore</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>pill</td>
<td>n.药片</td>
</tr>
<tr>
<td>treatment</td>
<td>n.治疗手段，疗法</td>
</tr>
<tr>
<td>symptom</td>
<td>n.症状</td>
</tr>
<tr>
<td>prescription</td>
<td>n.处方</td>
</tr>
<tr>
<td>suffer (from…)</td>
<td>v.饱受…之苦</td>
</tr>
</tbody></table>
<h3 id="L71-Chinese-Medicine"><a href="#L71-Chinese-Medicine" class="headerlink" title="L71 Chinese Medicine"></a>L71 Chinese Medicine</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>acupuncture</td>
<td>n.针灸</td>
</tr>
<tr>
<td>traditional</td>
<td>adj.传统的</td>
</tr>
<tr>
<td>occurrence</td>
<td>n.发生</td>
</tr>
<tr>
<td>herb</td>
<td>n.药草</td>
</tr>
<tr>
<td>mineral</td>
<td>n.矿物，矿物质</td>
</tr>
</tbody></table>
<h3 id="L72-Plastic-Surgery"><a href="#L72-Plastic-Surgery" class="headerlink" title="L72 Plastic Surgery"></a>L72 Plastic Surgery</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>plastic surgery</td>
<td>整容手术</td>
</tr>
<tr>
<td>wrinkle</td>
<td>n.皱纹</td>
</tr>
<tr>
<td>ridiculous</td>
<td>adj.荒唐的，胡闹的</td>
</tr>
<tr>
<td>weird</td>
<td>adj.古怪的</td>
</tr>
<tr>
<td>black and blue</td>
<td>青一块紫一块，遍体鳞伤</td>
</tr>
</tbody></table>
<h3 id="L73-Staying-Up-Late"><a href="#L73-Staying-Up-Late" class="headerlink" title="L73 Staying Up Late"></a>L73 Staying Up Late</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>average</td>
<td>adj.平均的</td>
</tr>
<tr>
<td>stay up</td>
<td>熬夜</td>
</tr>
<tr>
<td>nervous</td>
<td>adj.紧张的</td>
</tr>
<tr>
<td>fall asleep</td>
<td>睡着，进入梦乡</td>
</tr>
<tr>
<td>condition</td>
<td>n.条件，环境</td>
</tr>
</tbody></table>
<h2 id="Chapter-9-Social"><a href="#Chapter-9-Social" class="headerlink" title="Chapter 9 Social"></a>Chapter 9 Social</h2><h3 id="L76-The-Only-Child"><a href="#L76-The-Only-Child" class="headerlink" title="L76 The Only Child"></a>L76 The Only Child</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>dedicate</td>
<td>v. 努力，奉献</td>
</tr>
<tr>
<td>attention</td>
<td>n.关注</td>
</tr>
<tr>
<td>deserve</td>
<td>v.应得</td>
</tr>
<tr>
<td>sibling</td>
<td>n.兄弟姐妹</td>
</tr>
<tr>
<td>share</td>
<td>v.分享</td>
</tr>
</tbody></table>
<h3 id="L77-Arguing-with-Your-Friend"><a href="#L77-Arguing-with-Your-Friend" class="headerlink" title="L77 Arguing with Your Friend"></a>L77 Arguing with Your Friend</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>argument</td>
<td>n.争吵</td>
</tr>
<tr>
<td>disagreemet</td>
<td>n.不一致，争论，意见不同</td>
</tr>
<tr>
<td>patch up</td>
<td>修补</td>
</tr>
<tr>
<td>ruin</td>
<td>v.毁灭</td>
</tr>
</tbody></table>
<h3 id="L78-Taking-Part-in-a-Party"><a href="#L78-Taking-Part-in-a-Party" class="headerlink" title="L78 Taking Part in a Party"></a>L78 Taking Part in a Party</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>turn up</td>
<td>出现</td>
</tr>
<tr>
<td>squeeze</td>
<td>n.拥挤</td>
</tr>
<tr>
<td>look forward to</td>
<td>期待</td>
</tr>
<tr>
<td>blast</td>
<td>n.热闹的聚会</td>
</tr>
</tbody></table>
<h3 id="L79-Talking-about-Weather"><a href="#L79-Talking-about-Weather" class="headerlink" title="L79 Talking about Weather"></a>L79 Talking about Weather</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>be raining cats and dogs</td>
<td>倾盆大雨</td>
</tr>
<tr>
<td>miserable</td>
<td>adj.令人痛苦的</td>
</tr>
<tr>
<td>drought</td>
<td>n.干旱</td>
</tr>
<tr>
<td>forecaster</td>
<td>n.预报员</td>
</tr>
<tr>
<td>predict</td>
<td>v.预报</td>
</tr>
</tbody></table>
<h3 id="L80-Talking-about-Hobbies"><a href="#L80-Talking-about-Hobbies" class="headerlink" title="L80 Talking about Hobbies"></a>L80 Talking about Hobbies</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>in one’s spare time</td>
<td>空闲时间</td>
</tr>
<tr>
<td>get into</td>
<td>开始对…感兴趣</td>
</tr>
<tr>
<td>leisure</td>
<td>n.空闲</td>
</tr>
<tr>
<td>be occupied with doing</td>
<td>忙于</td>
</tr>
<tr>
<td>take up</td>
<td>开始从事</td>
</tr>
</tbody></table>
<h3 id="L81-Talking-about-Future-Plans"><a href="#L81-Talking-about-Future-Plans" class="headerlink" title="L81 Talking about Future Plans"></a>L81 Talking about Future Plans</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>graduate</td>
<td>v.毕业</td>
</tr>
<tr>
<td>overcome</td>
<td>v.克服</td>
</tr>
<tr>
<td>ambition</td>
<td>n.抱负，志向</td>
</tr>
<tr>
<td>realistic</td>
<td>adj.实事求是的</td>
</tr>
</tbody></table>
<h3 id="L82-Chatting-with-the-Neighbor"><a href="#L82-Chatting-with-the-Neighbor" class="headerlink" title="L82 Chatting with the Neighbor"></a>L82 Chatting with the Neighbor</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>community</td>
<td>社区</td>
</tr>
<tr>
<td>stop by</td>
<td>顺便拜访</td>
</tr>
<tr>
<td>make one’s acquanintance</td>
<td>初次相识</td>
</tr>
<tr>
<td>convenient</td>
<td>adj.方便的</td>
</tr>
<tr>
<td>show sb. around</td>
<td>带（某人）参观</td>
</tr>
</tbody></table>
<h3 id="L83-Giving-Suggestions"><a href="#L83-Giving-Suggestions" class="headerlink" title="L83 Giving Suggestions"></a>L83 Giving Suggestions</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>give ab. a hand</td>
<td>帮助</td>
</tr>
<tr>
<td>essential</td>
<td>adj.必要的</td>
</tr>
<tr>
<td>definitely</td>
<td>adv.肯定，当然</td>
</tr>
<tr>
<td>eye-catching</td>
<td>adj.引人注目的</td>
</tr>
<tr>
<td>work on</td>
<td>改善</td>
</tr>
</tbody></table>
<h3 id="L84-Body-Language"><a href="#L84-Body-Language" class="headerlink" title="L84 Body Language"></a>L84 Body Language</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>impressive</td>
<td>adj.给人留下深刻印象的</td>
</tr>
<tr>
<td>make eye contact with</td>
<td>眼神接触</td>
</tr>
<tr>
<td>slouch</td>
<td>v.低头垂肩地站（或者坐、走）</td>
</tr>
<tr>
<td>posture</td>
<td>n.姿态</td>
</tr>
<tr>
<td>body language</td>
<td>肢体语言</td>
</tr>
</tbody></table>
<h2 id="Chapter-10-Holidays"><a href="#Chapter-10-Holidays" class="headerlink" title="Chapter 10 Holidays"></a>Chapter 10 Holidays</h2><h3 id="L87-April-Fool’s-Day"><a href="#L87-April-Fool’s-Day" class="headerlink" title="L87 April Fool’s Day"></a>L87 April Fool’s Day</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>prank</td>
<td>n.恶作剧</td>
</tr>
<tr>
<td>gullible</td>
<td>adj.容易上当的</td>
</tr>
<tr>
<td>hoax</td>
<td>n.恶作剧，骗局</td>
</tr>
<tr>
<td>make fool of</td>
<td>愚弄</td>
</tr>
<tr>
<td>lighten up</td>
<td>使…放松，使…缓和</td>
</tr>
</tbody></table>
<h3 id="L88-Thanksgiving-Day"><a href="#L88-Thanksgiving-Day" class="headerlink" title="L88 Thanksgiving Day"></a>L88 Thanksgiving Day</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>harvest</td>
<td>n.收货，收成</td>
</tr>
<tr>
<td>gratitude</td>
<td>n.感谢</td>
</tr>
<tr>
<td>tasty</td>
<td>adj.美味的</td>
</tr>
<tr>
<td>turkey</td>
<td>n.火鸡</td>
</tr>
</tbody></table>
<h3 id="L89-Halloween"><a href="#L89-Halloween" class="headerlink" title="L89 Halloween"></a>L89 Halloween</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>dress up</td>
<td>装扮</td>
</tr>
<tr>
<td>costume</td>
<td>n.化妆服</td>
</tr>
<tr>
<td>decorate</td>
<td>v.装饰</td>
</tr>
<tr>
<td>spooky</td>
<td>adj.怪异的，诡异的</td>
</tr>
<tr>
<td>get under sb’s skin</td>
<td>激怒某人</td>
</tr>
</tbody></table>
<h3 id="L90-Christmas"><a href="#L90-Christmas" class="headerlink" title="L90 Christmas"></a>L90 Christmas</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>date back to</td>
<td>追溯</td>
</tr>
<tr>
<td>ornament</td>
<td>n.装饰品</td>
</tr>
<tr>
<td>chimney</td>
<td>n.烟囱</td>
</tr>
<tr>
<td>Santa Claus</td>
<td>圣诞老人</td>
</tr>
<tr>
<td>prominent</td>
<td>adj.显眼的</td>
</tr>
</tbody></table>
<h3 id="L91-Mother’s-Day"><a href="#L91-Mother’s-Day" class="headerlink" title="L91 Mother’s Day"></a>L91 Mother’s Day</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>carnation</td>
<td>n.康乃馨</td>
</tr>
<tr>
<td>put up with</td>
<td>忍受，忍耐</td>
</tr>
<tr>
<td>give birth to</td>
<td>分娩</td>
</tr>
<tr>
<td>pregnancy</td>
<td>n.分娩</td>
</tr>
<tr>
<td>contribute…to…</td>
<td>奉献</td>
</tr>
</tbody></table>
<h3 id="L92-New-Year"><a href="#L92-New-Year" class="headerlink" title="L92 New Year"></a>L92 New Year</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>be about to</td>
<td>即将，刚要，正打算</td>
</tr>
<tr>
<td>clean slate</td>
<td>空白</td>
</tr>
<tr>
<td>resolution</td>
<td>n.决心</td>
</tr>
<tr>
<td>spectacular</td>
<td>adj.壮观的，壮丽的，令人惊叹的</td>
</tr>
<tr>
<td>countdown</td>
<td>n.倒计时</td>
</tr>
</tbody></table>
<h3 id="L93-Spring-Festival"><a href="#L93-Spring-Festival" class="headerlink" title="L93 Spring Festival"></a>L93 Spring Festival</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>couplet</td>
<td>n.对句</td>
</tr>
<tr>
<td>sweep away</td>
<td>一扫而空</td>
</tr>
<tr>
<td>gala</td>
<td>n.庆典，盛会</td>
</tr>
<tr>
<td>set off</td>
<td>使爆炸</td>
</tr>
<tr>
<td>firecracker</td>
<td>n.爆竹</td>
</tr>
</tbody></table>
<h3 id="L94-Mid-Autumn-Festival"><a href="#L94-Mid-Autumn-Festival" class="headerlink" title="L94 Mid-Autumn Festival"></a>L94 Mid-Autumn Festival</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>lunar calendar</td>
<td>阴历</td>
</tr>
<tr>
<td>reunion</td>
<td>n.团聚</td>
</tr>
<tr>
<td>riddle</td>
<td>n.谜语</td>
</tr>
<tr>
<td>lantern</td>
<td>n.灯笼</td>
</tr>
<tr>
<td>mooncake</td>
<td>n.月饼</td>
</tr>
</tbody></table>
<h3 id="L95-Dragon-Boat-Festival"><a href="#L95-Dragon-Boat-Festival" class="headerlink" title="L95 Dragon Boat Festival"></a>L95 Dragon Boat Festival</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>commemorate</td>
<td>v.纪念，缅怀</td>
</tr>
<tr>
<td>glutinous rice</td>
<td>糯米</td>
</tr>
<tr>
<td>participate in</td>
<td>参与</td>
</tr>
<tr>
<td>take the lead</td>
<td>领先</td>
</tr>
<tr>
<td>fervent</td>
<td>adj.热情的</td>
</tr>
</tbody></table>
<h2 id="Chapter-11-Emotions-and-Attitudes"><a href="#Chapter-11-Emotions-and-Attitudes" class="headerlink" title="Chapter 11 Emotions and Attitudes"></a>Chapter 11 Emotions and Attitudes</h2><h3 id="L98-Delight"><a href="#L98-Delight" class="headerlink" title="L98 Delight"></a>L98 Delight</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>on cloud nine</td>
<td>非常高兴</td>
</tr>
<tr>
<td>can’t help doing</td>
<td>不禁</td>
</tr>
<tr>
<td>over the moon</td>
<td>欣喜若狂</td>
</tr>
<tr>
<td>terrific</td>
<td>adj.极好的</td>
</tr>
<tr>
<td>rejoice</td>
<td>v.高兴</td>
</tr>
</tbody></table>
<h3 id="L99-Sadness"><a href="#L99-Sadness" class="headerlink" title="L99 Sadness"></a>L99 Sadness</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>out of sorts</td>
<td>心情不佳，身体不适</td>
</tr>
<tr>
<td>discouraged</td>
<td>adj.心灰意冷的</td>
</tr>
<tr>
<td>bummer</td>
<td>n.令人不快的事</td>
</tr>
<tr>
<td>gloomy</td>
<td>adj.忧郁的</td>
</tr>
<tr>
<td>grief</td>
<td>n.悲伤</td>
</tr>
</tbody></table>
<h3 id="L100-Anger"><a href="#L100-Anger" class="headerlink" title="L100 Anger"></a>L100 Anger</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>flare up</td>
<td>突然发怒</td>
</tr>
<tr>
<td>enrage</td>
<td>v.激怒</td>
</tr>
<tr>
<td>short-tempered</td>
<td>adj.易怒的</td>
</tr>
<tr>
<td>piss somebody off</td>
<td>使恼火</td>
</tr>
<tr>
<td>blow a fuse</td>
<td>勃然大怒</td>
</tr>
</tbody></table>
<h3 id="L101-Complaint"><a href="#L101-Complaint" class="headerlink" title="L101 Complaint"></a>L101 Complaint</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>complaint</td>
<td>n.抱怨</td>
</tr>
<tr>
<td>make a fuss</td>
<td>大惊小怪</td>
</tr>
<tr>
<td>pass the buck</td>
<td>推卸责任</td>
</tr>
<tr>
<td>negligence</td>
<td>n.疏漏</td>
</tr>
<tr>
<td>lose heart</td>
<td>失望</td>
</tr>
</tbody></table>
<h3 id="L102-Compliment"><a href="#L102-Compliment" class="headerlink" title="L102 Compliment"></a>L102 Compliment</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>gifted</td>
<td>adj.有天赋的</td>
</tr>
<tr>
<td>compliment</td>
<td>n.赞美</td>
</tr>
<tr>
<td>flatter</td>
<td>v.奉承</td>
</tr>
<tr>
<td>diligent</td>
<td>adj.认真刻苦</td>
</tr>
<tr>
<td>pay off</td>
<td>取得成功</td>
</tr>
</tbody></table>
<h3 id="L103-Apology"><a href="#L103-Apology" class="headerlink" title="L103 Apology"></a>L103 Apology</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>yell at</td>
<td>吼叫</td>
</tr>
<tr>
<td>apologize</td>
<td>v.道歉</td>
</tr>
<tr>
<td>after all</td>
<td>毕竟</td>
</tr>
<tr>
<td>slip somebody’s mind</td>
<td>忘记</td>
</tr>
<tr>
<td>make up for</td>
<td>补偿</td>
</tr>
</tbody></table>
<h2 id="Chapter-12-Enviroment"><a href="#Chapter-12-Enviroment" class="headerlink" title="Chapter 12 Enviroment"></a>Chapter 12 Enviroment</h2><h3 id="L106-Air-Pollution"><a href="#L106-Air-Pollution" class="headerlink" title="L106 Air Pollution"></a>L106 Air Pollution</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>smog</td>
<td>n.雾霾</td>
</tr>
<tr>
<td>emission</td>
<td>n.排放</td>
</tr>
<tr>
<td>exhaust fume</td>
<td>尾气</td>
</tr>
<tr>
<td>bacteria</td>
<td>n.细菌</td>
</tr>
<tr>
<td>suburb</td>
<td>n.郊区</td>
</tr>
</tbody></table>
<h3 id="L107-Global-Warming"><a href="#L107-Global-Warming" class="headerlink" title="L107 Global Warming"></a>L107 Global Warming</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>carbon dioxide</td>
<td>二氧化碳</td>
</tr>
<tr>
<td>global warming</td>
<td>全球变暖</td>
</tr>
<tr>
<td>greenhouse effect</td>
<td>温室效应</td>
</tr>
<tr>
<td>glacier</td>
<td>n.冰川</td>
</tr>
<tr>
<td>in jeopardy</td>
<td>处于危险之中</td>
</tr>
</tbody></table>
<h3 id="L108-Desertification"><a href="#L108-Desertification" class="headerlink" title="L108 Desertification"></a>L108 Desertification</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>desertification</td>
<td>n.荒漠化</td>
</tr>
<tr>
<td>expansion</td>
<td>n.扩大，增加，扩展</td>
</tr>
<tr>
<td>fertile</td>
<td>adj.肥沃的</td>
</tr>
<tr>
<td>soil</td>
<td>n.土壤</td>
</tr>
<tr>
<td>delicate</td>
<td>adj.脆弱的</td>
</tr>
</tbody></table>
<h3 id="L109-Energy"><a href="#L109-Energy" class="headerlink" title="L109 Energy"></a>L109 Energy</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>sustainable</td>
<td>adj.可持续的</td>
</tr>
<tr>
<td>alternative</td>
<td>adj.可替代的</td>
</tr>
<tr>
<td>recycle</td>
<td>v.回收再用</td>
</tr>
<tr>
<td>pervade</td>
<td>v.渗透</td>
</tr>
<tr>
<td>properly</td>
<td>adv.正确地，合适地</td>
</tr>
</tbody></table>
<h3 id="L110-Extinction"><a href="#L110-Extinction" class="headerlink" title="L110 Extinction"></a>L110 Extinction</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>extinction</td>
<td>n.灭绝</td>
</tr>
<tr>
<td>trafficking</td>
<td>n.非法交易</td>
</tr>
<tr>
<td>conservation</td>
<td>n.(对动植物、自然地区、历史建筑等的)保护</td>
</tr>
<tr>
<td>species</td>
<td>n.种，物种</td>
</tr>
<tr>
<td>habitat</td>
<td>n.栖息地</td>
</tr>
</tbody></table>
<h3 id="L111-Green-Living"><a href="#L111-Green-Living" class="headerlink" title="L111 Green Living"></a>L111 Green Living</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>devastation</td>
<td>n.毁灭</td>
</tr>
<tr>
<td>green living</td>
<td>绿色生活</td>
</tr>
<tr>
<td>unleaded petrol</td>
<td>无铅汽油</td>
</tr>
<tr>
<td>renewable energy</td>
<td>可再生能源</td>
</tr>
<tr>
<td>devoid</td>
<td>adj.缺乏的</td>
</tr>
</tbody></table>
<h2 id="Chapter-13-Society"><a href="#Chapter-13-Society" class="headerlink" title="Chapter 13 Society"></a>Chapter 13 Society</h2><h3 id="L114-Food-Safety"><a href="#L114-Food-Safety" class="headerlink" title="L114 Food Safety"></a>L114 Food Safety</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>scandal</td>
<td>n.丑闻</td>
</tr>
<tr>
<td>expose</td>
<td>v.使曝光</td>
</tr>
<tr>
<td>supervision</td>
<td>n.监督，管理</td>
</tr>
<tr>
<td>expired</td>
<td>adj.过期的</td>
</tr>
<tr>
<td>additive</td>
<td>n.添加剂</td>
</tr>
</tbody></table>
<h3 id="L115-Social-Security"><a href="#L115-Social-Security" class="headerlink" title="L115 Social Security"></a>L115 Social Security</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>social security</td>
<td>社保</td>
</tr>
<tr>
<td>put away</td>
<td>存钱</td>
</tr>
<tr>
<td>retirement</td>
<td>n.退休</td>
</tr>
<tr>
<td>deduct</td>
<td>v.减去</td>
</tr>
<tr>
<td>nest egg</td>
<td>备用的钱，备用金</td>
</tr>
</tbody></table>
<h3 id="L116-Aging-Population"><a href="#L116-Aging-Population" class="headerlink" title="L116 Aging Population"></a>L116 Aging Population</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>proportion</td>
<td>n.比率，比例</td>
</tr>
<tr>
<td>fertility</td>
<td>n.(动植物的)生殖力</td>
</tr>
<tr>
<td>longevity</td>
<td>n.长寿</td>
</tr>
<tr>
<td>adequate</td>
<td>adj.足够的，合格的</td>
</tr>
<tr>
<td>demographic</td>
<td>adj.人口的</td>
</tr>
</tbody></table>
<h3 id="L117-Artificial-Intelligence"><a href="#L117-Artificial-Intelligence" class="headerlink" title="L117 Artificial Intelligence"></a>L117 Artificial Intelligence</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>artificial intelligence</td>
<td>人工智能</td>
</tr>
<tr>
<td>sophisticated</td>
<td>adj.精密的，复杂的，高级的</td>
</tr>
<tr>
<td>advanced</td>
<td>adj.先进的</td>
</tr>
<tr>
<td>complex</td>
<td>adj.复杂的</td>
</tr>
<tr>
<td>unmanned</td>
<td>adj.无人的</td>
</tr>
</tbody></table>
<h3 id="L118-Sharing-Economy"><a href="#L118-Sharing-Economy" class="headerlink" title="L118 Sharing Economy"></a>L118 Sharing Economy</h3><table>
<thead>
<tr>
<th>word</th>
<th>chinese</th>
</tr>
</thead>
<tbody><tr>
<td>scan the QR code</td>
<td>扫二维码</td>
</tr>
<tr>
<td>sharing economy</td>
<td>共享经济</td>
</tr>
<tr>
<td>thumb a nose</td>
<td>对…嗤之以鼻，蔑视</td>
</tr>
<tr>
<td>circulation</td>
<td>n.流通</td>
</tr>
<tr>
<td>comply with</td>
<td>服从，遵守，依从</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>口语</tag>
      </tags>
  </entry>
  <entry>
    <title>教案 Contents</title>
    <url>/2020/01/31/%E8%8B%B1%E8%AF%AD/%E6%95%99%E6%A1%88/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><table>
<thead>
<tr>
<th>chapter</th>
<th>Lesson</th>
<th>title</th>
</tr>
</thead>
<tbody><tr>
<td>chapter 1 Shopping 购物</td>
<td>Lesson1</td>
<td>Buying Clothes</td>
</tr>
<tr>
<td></td>
<td>Lesson2</td>
<td>Choosing A Gift</td>
</tr>
<tr>
<td></td>
<td>Lesson3</td>
<td>Daily Supplies</td>
</tr>
<tr>
<td></td>
<td>Lesson4</td>
<td>Shopping for Appliances</td>
</tr>
<tr>
<td></td>
<td>Lesson5</td>
<td>Buying a Smartphone</td>
</tr>
<tr>
<td></td>
<td>Lesson6</td>
<td>Bargaining</td>
</tr>
<tr>
<td></td>
<td>Lesson7</td>
<td>Checking out</td>
</tr>
<tr>
<td></td>
<td>Lesson8</td>
<td>Return &amp; Refund</td>
</tr>
<tr>
<td></td>
<td>Lesson9</td>
<td>Online Shopping</td>
</tr>
<tr>
<td></td>
<td>Lesson10</td>
<td>Revision One</td>
</tr>
<tr>
<td></td>
<td>Lesson11</td>
<td>Achievement Test One</td>
</tr>
<tr>
<td>chapter 2 Dining 吃饭</td>
<td>Lesson12</td>
<td>In A Restaurant</td>
</tr>
<tr>
<td></td>
<td>Lesson13</td>
<td>In the Food Court</td>
</tr>
<tr>
<td></td>
<td>Lesson14</td>
<td>At the Cafe</td>
</tr>
<tr>
<td></td>
<td>Lesson15</td>
<td>Eating Junk Food</td>
</tr>
<tr>
<td></td>
<td>Lesson16</td>
<td>Chinese Food</td>
</tr>
<tr>
<td></td>
<td>Lesson17</td>
<td>Ordering Food By Phone</td>
</tr>
<tr>
<td></td>
<td>Lesson18</td>
<td>Reserving a Table at a Restaurant</td>
</tr>
<tr>
<td></td>
<td>Lesson19</td>
<td>Revision Two</td>
</tr>
<tr>
<td></td>
<td>Lesson20</td>
<td>Achievement Test Two</td>
</tr>
<tr>
<td>chapter 3 Traveling 旅行</td>
<td>Lesson21</td>
<td>A Pleasant Journey</td>
</tr>
<tr>
<td></td>
<td>Lesson22</td>
<td>Getting A License</td>
</tr>
<tr>
<td></td>
<td>Lesson23</td>
<td>Asking for Directions</td>
</tr>
<tr>
<td></td>
<td>Lesson24</td>
<td>Applying for A Passport</td>
</tr>
<tr>
<td></td>
<td>Lesson25</td>
<td>Checking In</td>
</tr>
<tr>
<td></td>
<td>Lesson26</td>
<td>Room Service</td>
</tr>
<tr>
<td></td>
<td>Lesson27</td>
<td>At the Airport</td>
</tr>
<tr>
<td></td>
<td>Lesson28</td>
<td>Revision Three</td>
</tr>
<tr>
<td></td>
<td>Lesson29</td>
<td>Achievement Test Three</td>
</tr>
<tr>
<td>chapter 4 Daily Life 每日生活</td>
<td>Lesson30</td>
<td>Finding a Book at the Bookstore</td>
</tr>
<tr>
<td></td>
<td>Lesson31</td>
<td>Renting An Apartment</td>
</tr>
<tr>
<td></td>
<td>Lesson32</td>
<td>Opening A Bank Account</td>
</tr>
<tr>
<td></td>
<td>Lesson33</td>
<td>Making Phone Calls</td>
</tr>
<tr>
<td></td>
<td>Lesson34</td>
<td>A Visit to the Hospital</td>
</tr>
<tr>
<td></td>
<td>Lesson35</td>
<td>At the Amusement Park</td>
</tr>
<tr>
<td></td>
<td>Lesson36</td>
<td>Revision Four</td>
</tr>
<tr>
<td></td>
<td>Lesson37</td>
<td>Achievement Test Four</td>
</tr>
<tr>
<td>chapter 5 Entertainment 娱乐</td>
<td>Lesson38</td>
<td>Going to the Movies</td>
</tr>
<tr>
<td></td>
<td>Lesson39</td>
<td>A Visit to the Zoo</td>
</tr>
<tr>
<td></td>
<td>Lesson40</td>
<td>Working out at the Gym</td>
</tr>
<tr>
<td></td>
<td>Lesson41</td>
<td>Visiting a Museum</td>
</tr>
<tr>
<td></td>
<td>Lesson42</td>
<td>The Concerts</td>
</tr>
<tr>
<td></td>
<td>Lesson43</td>
<td>Going to a Book Fair</td>
</tr>
<tr>
<td></td>
<td>Lesson44</td>
<td>Revision Five</td>
</tr>
<tr>
<td></td>
<td>Lesson45</td>
<td>Achievement Test Five</td>
</tr>
<tr>
<td>chapter 6 Education 教育</td>
<td>Lesson46</td>
<td>At the Library</td>
</tr>
<tr>
<td></td>
<td>Lesson47</td>
<td>In the Dorm</td>
</tr>
<tr>
<td></td>
<td>Lesson48</td>
<td>Taking An Exam</td>
</tr>
<tr>
<td></td>
<td>Lesson49</td>
<td>University Classes</td>
</tr>
<tr>
<td></td>
<td>Lesson50</td>
<td>Studying Abroad</td>
</tr>
<tr>
<td></td>
<td>Lesson51</td>
<td>Studying Online</td>
</tr>
<tr>
<td></td>
<td>Lesson52</td>
<td>Revision Six</td>
</tr>
<tr>
<td></td>
<td>Lesson53</td>
<td>Achievement Test Six</td>
</tr>
<tr>
<td>chapter 7 Work 工作</td>
<td>Lesson54</td>
<td>Job Hunting</td>
</tr>
<tr>
<td></td>
<td>Lesson55</td>
<td>Job Interview</td>
</tr>
<tr>
<td></td>
<td>Lesson56</td>
<td>Arriving Late</td>
</tr>
<tr>
<td></td>
<td>Lesson57</td>
<td>Asking for a Leave</td>
</tr>
<tr>
<td></td>
<td>Lesson58</td>
<td>Working Overtime</td>
</tr>
<tr>
<td></td>
<td>Lesson59</td>
<td>Meetings</td>
</tr>
<tr>
<td></td>
<td>Lesson60</td>
<td>Asking for a Raise</td>
</tr>
<tr>
<td></td>
<td>Lesson61</td>
<td>Promotion</td>
</tr>
<tr>
<td></td>
<td>Lesson62</td>
<td>Starting a Business</td>
</tr>
<tr>
<td></td>
<td>Lesson63</td>
<td>Revision Seven</td>
</tr>
<tr>
<td></td>
<td>Lesson64</td>
<td>Achievement Test Seven</td>
</tr>
<tr>
<td>chapter 8 Health 健康</td>
<td>Lesson65</td>
<td>Sports</td>
</tr>
<tr>
<td></td>
<td>Lesson66</td>
<td>Weight Control</td>
</tr>
<tr>
<td></td>
<td>Lesson67</td>
<td>Aches and Pains</td>
</tr>
<tr>
<td></td>
<td>Lesson68</td>
<td>Medical Check-Up</td>
</tr>
<tr>
<td></td>
<td>Lesson69</td>
<td>Seeing A Doctor</td>
</tr>
<tr>
<td></td>
<td>Lesson70</td>
<td>At the Drugstore</td>
</tr>
<tr>
<td></td>
<td>Lesson71</td>
<td>Chinese Medicine</td>
</tr>
<tr>
<td></td>
<td>Lesson72</td>
<td>Plastic Surgery</td>
</tr>
<tr>
<td></td>
<td>Lesson73</td>
<td>Staying Up Late</td>
</tr>
<tr>
<td></td>
<td>Lesson74</td>
<td>Revision Eight</td>
</tr>
<tr>
<td></td>
<td>Lesson75</td>
<td>Achievement Test Eight</td>
</tr>
<tr>
<td>chapter 9 Social 社交</td>
<td>Lesson76</td>
<td>The Only Child</td>
</tr>
<tr>
<td></td>
<td>Lesson77</td>
<td>Arguing with Your Friend</td>
</tr>
<tr>
<td></td>
<td>Lesson78</td>
<td>Taking Part in a Party</td>
</tr>
<tr>
<td></td>
<td>Lesson79</td>
<td>Talking about Weather</td>
</tr>
<tr>
<td></td>
<td>Lesson80</td>
<td>Talking about Hobbies</td>
</tr>
<tr>
<td></td>
<td>Lesson81</td>
<td>Talking about Future Plans</td>
</tr>
<tr>
<td></td>
<td>Lesson82</td>
<td>Chatting with the Neighbor</td>
</tr>
<tr>
<td></td>
<td>Lesson83</td>
<td>Giving Suggestions</td>
</tr>
<tr>
<td></td>
<td>Lesson84</td>
<td>Body Language</td>
</tr>
<tr>
<td></td>
<td>Lesson85</td>
<td>Revision Nine</td>
</tr>
<tr>
<td></td>
<td>Lesson86</td>
<td>Achievement Test Nine</td>
</tr>
<tr>
<td>chapter 10 Holidays 节假日</td>
<td>Lesson87</td>
<td>April Fool’s Day</td>
</tr>
<tr>
<td></td>
<td>Lesson88</td>
<td>Thanksgiving Day</td>
</tr>
<tr>
<td></td>
<td>Lesson89</td>
<td>Halloween</td>
</tr>
<tr>
<td></td>
<td>Lesson90</td>
<td>Christmas Day</td>
</tr>
<tr>
<td></td>
<td>Lesson91</td>
<td>Mother’s Day</td>
</tr>
<tr>
<td></td>
<td>Lesson92</td>
<td>New Year’s</td>
</tr>
<tr>
<td></td>
<td>Lesson93</td>
<td>Spring Festival</td>
</tr>
<tr>
<td></td>
<td>Lesson94</td>
<td>Mid-Autumn Festival</td>
</tr>
<tr>
<td></td>
<td>Lesson95</td>
<td>Dragon Boat Festival</td>
</tr>
<tr>
<td></td>
<td>Lesson96</td>
<td>Revision Ten</td>
</tr>
<tr>
<td></td>
<td>Lesson97</td>
<td>Achievement Test Ten</td>
</tr>
<tr>
<td>chapter 11 Emotions and Attitudes 情感和态度</td>
<td>Lesson98</td>
<td>Delight</td>
</tr>
<tr>
<td></td>
<td>Lesson99</td>
<td>Sadness</td>
</tr>
<tr>
<td></td>
<td>Lesson100</td>
<td>Anger</td>
</tr>
<tr>
<td></td>
<td>Lesson101</td>
<td>Complaint</td>
</tr>
<tr>
<td></td>
<td>Lesson102</td>
<td>Compliment</td>
</tr>
<tr>
<td></td>
<td>Lesson103</td>
<td>Apology</td>
</tr>
<tr>
<td></td>
<td>Lesson104</td>
<td>Revision Eleven</td>
</tr>
<tr>
<td></td>
<td>Lesson105</td>
<td>Achievement Test Eleven</td>
</tr>
<tr>
<td>chapter 12 Environment 环境</td>
<td>Lesson106</td>
<td>Air Pollution</td>
</tr>
<tr>
<td></td>
<td>Lesson107</td>
<td>Global Warming</td>
</tr>
<tr>
<td></td>
<td>Lesson108</td>
<td>Desertification</td>
</tr>
<tr>
<td></td>
<td>Lesson109</td>
<td>Energy</td>
</tr>
<tr>
<td></td>
<td>Lesson110</td>
<td>Animal Extinction</td>
</tr>
<tr>
<td></td>
<td>Lesson111</td>
<td>Green Living</td>
</tr>
<tr>
<td></td>
<td>Lesson112</td>
<td>Revision Twelve</td>
</tr>
<tr>
<td></td>
<td>Lesson113</td>
<td>Achievement Test Twelve</td>
</tr>
<tr>
<td>chapter 13 Society 社会</td>
<td>Lesson114</td>
<td>Food Safety</td>
</tr>
<tr>
<td></td>
<td>Lesson115</td>
<td>Social Security</td>
</tr>
<tr>
<td></td>
<td>Lesson116</td>
<td>Aging Population</td>
</tr>
<tr>
<td></td>
<td>Lesson117</td>
<td>Artificial Intelligence</td>
</tr>
<tr>
<td></td>
<td>Lesson118</td>
<td>Sharing Economy</td>
</tr>
<tr>
<td></td>
<td>Lesson119</td>
<td>Revision Thirteen</td>
</tr>
<tr>
<td></td>
<td>Lesson120</td>
<td>Achievement Test Thirteen</td>
</tr>
<tr>
<td></td>
<td>Lesson121</td>
<td>Final Test</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>口语</tag>
      </tags>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间27</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B427/</url>
    <content><![CDATA[<p>投入产出比</p>
<p>学姐说过，学理财投资是一件极其必要、性价比极高的事情，不学理财投资，简直是人生第一大浪费。</p>
<p>可是很多小伙伴会说，我没钱，怎么理财呢</p>
<p>但实际上，理财是一种思维方式，像富人一样思考，和你现在有没有钱没有太大的关系。</p>
<p>学姐今天告诉你，第一个财富秘诀：“投入产出比！”</p>
<p>What，这是什么鬼？听起来这么抽象，我不要听，不要听</p>
<p>要是我告诉你，懂得这个秘诀，可以减肥成功、泡妞到手，还可以在职场上纵横无敌，加薪升职，你是不是就会比较有兴趣了呢？</p>
<p>其实投入产出比简单来说。就是你投入资源，产出一些效果。效果除以资源，就叫投入产出比</p>
<p>大部分情况下，投入产出比越高越好，也就意味着在产出固定的情况下，投入越小越好。在投入固定的情况下，产出越大越好。</p>
<p>什么？还是不明白。</p>
<p>我们举个例子</p>
<p>你投入100元的钱，买了一只股票，最后赚了10元。你的投入产出比就是 （100+10）/100 *100%= 110%</p>
<p>假设你投入100元的钱，也买了股票，最后赚了50元钱。 那么你的投入产出比就是 （100+50）/100 *100%= 150%</p>
<p>那么假设你亏了呢？ 你投入100元钱，买了第三只股票，最后亏了50元，那么你的投入产出比就是 （100-50）/100 *100%= 50%</p>
<p>这些你明白了吧，同样是100元钱，投入产出比越高，证明赚得越多，也就意味着这100元最有效率。</p>
<p>我们班很多学生宝宝，那我们拿学英语来举例</p>
<p>很多人从大学开始就花大量的时间和金钱来学习英语，还有很多人工作后也会花很多时间参加英语学习</p>
<p>因为我们觉得学好英语就能找一份更好的工作，挣一份更高的薪水，职业发展也会比英语不好的人更有前途。</p>
<p>因此，绝大多数人觉得英语是一项投资回报率不错的投资</p>
<p>那学习投资呢，学习投资你能得到的回报又是多少呢，我们用一个实际的例子来比较一下学习英语和投资。</p>
<p>先解释一个概念，叫做“终身财富总值”，其实也很简单，就是你一辈子能赚到的钱的总数</p>
<p>让我们来看下面这张表格</p>
<p>这里为了简便运算，我们就不算你过年收到的压岁钱啊、买彩票中的500万奖金了。另外呢，为了计算简单，这里也不提开支的事。</p>
<p>那么让我们先来看灰色那一列。 </p>
<p>假设同样是大学毕业找到的第一份工作，不学习英语的话，可能起薪只有4000元。即他工作开始时的最低工资</p>
<p>那么假设这个人的工资一直是线性增长的，到退休的时候最高工资是每个月3万5千元。</p>
<p>那么假设他从25岁工作到60岁退休，一共工作35年。那么他一辈子赚到的钱是760万元。</p>
<p>如果我们学习了英语技能呢，那么有可能找到一个稍微高大上一点的工作</p>
<p>外企薪水可能高一点，那么假设一样是大学毕业，就比没有英语技能的同学的</p>
<p>资要高一点，达到了每个月5000元。到退休的时候，最高工资也比较高，达到了每个月5万元</p>
<p>也是从25岁工作到60岁，那么这个英语比较好的人，他一辈子能赚多少钱呢？</p>
<p>初步计算一下，大概是1千1百万元。要比那个没有英语技能的人赚的钱，提高了30%。</p>
<p>那么为了这提高的30%，你需要付出多少时间和金钱呢？</p>
<p>每个人肯定都不一样，我觉得按每天1个小时的投入，学个3年，差不多也要1000个小时。</p>
<p>那么你要花多少钱呢？买个学习资料，去新东方上个课什么的，四级六级还要参加个辅导班什么的，1万元不算多吧？</p>
<p>好了，那我们再来看看黄色的这一列</p>
<p>也就是假设说你没有英语技能，你大学毕业的时候也只能赚4000元的薪水，然后到你退休的时候，最高工资也就只有3万5千元</p>
<p>不过别慌，你还学习到了一种新的技能，叫做投资技能。 </p>
<p>假设你每年投资收益达到了8%。那么你这一辈子能赚多少钱呢？ </p>
<p>粗算一下，大约是2400万元。也就是比你没有英语技能的那个同学足足翻了3倍。 即便是比起你那个英语很好的，薪水比你高的同学来，你还是比他多了将近1倍。 </p>
<p>如果你的技能再高一点，能够达到每年收益10%的话。乖乖不得了，你的一辈子能赚到的钱已经上升到了3500万元。 </p>
<p>如果每年收益能够到达15%的话，那么你就比一般的同学多赚了10倍还不止</p>
<p>怎么样，现在感觉很爽了吧。，学习投资原来是投入产出比这么高的事情啊</p>
<p>好啦，学姐讲完了，你们好好消化一下，想想自己以后到底应该做什么才能迎娶白富美，走上人生巅峰吧~</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间28</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B428/</url>
    <content><![CDATA[<p>SARS与投资</p>
<p>大家通过新闻也都知道了，咱们的祖国目前冠状肺炎疫情严重，股市也受到了影响。但我们17年前经历过SARS，两件事有一些共同之处，今天学姐就在这里给大家做些分析。</p>
<p>我们先来梳理一下当年的SARS。<br>最早的病例，是出现在02年11月的广东顺德。<br>其实在03年2月前，病症都还只是在大陆地区，不曾出国“战斗”。当时大家普遍认为疫情不严重，甚至还举办了中国队和巴西队的友谊赛，现场球迷爆满。<br>但从03年2月后，病情开始蔓延到香港、越南等周围地区和国家，世卫组织在3月发出全球警告。</p>
<p>直到03年4月前，各地还都基本都处于不重视、瞒报的状态。但是当时广东民间传言已经沸沸扬扬，导致大量的人逃离家乡，到其他地方躲避，加剧了病毒的扩散。当时的卫生部长张文康，说了各种安抚民心的话，却一再隐瞒事实，最后被撤职。</p>
<p>03年4月，可以说在“SARS保卫战”中是个重大的转折点。<br>当时的老百姓对国内报导普遍都是一种不信任的状态，国家也意识到了问题的严重性，于是2003年4月17日，温家宝总理正式警告地方官员，瞒报疫情要受处分。同时，全国大规模公开防治就在这个月正式推动。</p>
<p>从事后的SARS统计来看，大规模防治后，大陆地区的感染人数就急剧下降。基本上到7月份，整个疫情就平息了。从大规模公开防治到事件进入尾声，其实只花了3个来月。</p>
<p>而整个事情的转折点，就是不再躲躲藏藏遮遮掩掩，快速推进全国范围内大规模的公开防治。当年经历过的人都应该还历历在目。</p>
<p>那SARS跟股票的关系是什么呢？<br>先抛一个比较大的结论：当年的SARS事件，构成了极好的投资机会。<br>时间拉长到2003年全年来看，当时的上证、深证、恒生指数表现，其实并没有受到巨大的影响。</p>
<p>那一整年，其实恒生指数涨了34.9%，上证指数涨10.3%，深证综指跌了2.6%。</p>
<p>受SARS影响，恒生指数从9600一路下跌，2003年4月25日，恒生指数跌到了8332，随后开启了轰轰烈烈的牛市，年底时已经涨到了12600。</p>
<p>进一步分析起来，当年SARS事件的时候跌幅比较显著的，都是被疫情实质性的影响的板块。<br>在港股市场里，疫情扩散期间（03年年初到4月底前），地产建筑业是杀跌主力。地产建筑业在这个期间，跌了15%。<br>而表现很好的，行业明显跟当时疫情关系不大的，像能源业，公用事业，工业，股价是非常坚挺的。</p>
<p>等到SARS开始被控制后，整个港股下半年的涨幅相当惊人！像能源、原材料这种行业，乘着中国经济的东风，涨幅超过100%！尤其是部分原材料类的，7个来月就涨了250%。</p>
<p>值得说一下，巴菲特在03年4月疫情最猛的时候，抄底了港股的中石油，赚得盆满钵满，成为投资中国的经典案例。还记得巴菲特老爷子说的吗？“在别人恐惧的时候我贪婪”，他真正做到了知行合一，所以他才被人称为股神。</p>
<p>我们再来看A股，当年却并没有那么美好，而且整个走势完全是跟恒生指数反着来的。03年上半年疫情最猛的时候，股价还涨了不少，反而从4月疫情开始被控制的时候，股价就开始下跌。</p>
<p>当时A股有1100多家公司，整个2003年，A股的平均跌幅达到18%，有大批股票跌幅超50%，是个非常惨烈的熊市。</p>
<p>那为什么港股开启了牛市，而A股却跌得这么惨呢？<br>答案就是估值。</p>
<p>当时的A股，无论是上证、还是深证，早已经吹响了重逢的号角，来了一拨上攻，估值都是非常非常高的，市盈率分别是45倍和179倍。但是，当时的恒生指数，只有16倍。</p>
<p>SARS那么大的疫情，在对股价的影响上，远没有估值对股价的影响大。这也再次说明，估值才是影响股市的第一大因素。<br>同样的，这次疫情也会对股市造成短期的影响，但长期来看，估值才是决定未来涨跌的重要因素。<br>所以格雷厄姆才说，股票，短期来看只是投票机，长期来看才是称重机。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间29</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B429/</url>
    <content><![CDATA[<p>永远为大家保驾护航</p>
<p>咱们19年国庆黄金档，三部电影《我和我的祖国》，《攀登者》《中国机长》</p>
<p>有哪位小伙伴看过这三部电影呀</p>
<p>给大家聊聊《中国机长》吧</p>
<p>这个电影呢是根据真实事件改编的</p>
<p>原本学姐是去看美丽的空姐的，结果真真的是震撼到了学姐，深刻体会到，这里面太多来自你我他的小缩影，学姐想简单和大家分享一下。</p>
<p>简单的讲一下剧情哈</p>
<p>电影开始的时候呢就是各种人物介绍以及背后的故事，机组人员到飞机之后就是进行各种安全检查什么的。后来镜头拍到了候机室。</p>
<p>有背着锅铲要去拉萨打工的夫妇，有要去探望战友的老兵，有失恋心情沮丧去散心的美女，也有和父母闹矛盾和朋友出去玩耍不回父母信息的小姑娘，有准备回拉萨家人团聚的母子，还有一位聋哑女生和他的朋友等等各种各样的人群，哦，对了，还有暴躁的暴发户</p>
<p>他们像极了生活中的你我，也仿佛就是我们自己某个阶段的状态</p>
<p>或者喜悦，或者期待，又或者赌气</p>
<p>但是大家都乘坐了同一辆航班 四川8633 都是去往拉萨</p>
<p>近万米高空，飞机右侧内风挡突然出现裂纹；紧接着，副驾驶（欧豪饰）面前的挡风玻璃骤然脱落。</p>
<p>瞬间的释压使副驾驶半个身子被吸出舱外</p>
<p>一瞬间，驾驶舱温度骤降、缺氧，紧跟着就是各种仪器失灵。客舱内，餐车打翻，一片狼藉</p>
<p>危机突至，机舱瞬间释压、温度骤降、大风灌入。</p>
<p>全机人员面临严重缺氧，整班飞机陷入极端罕见的危险处境……几十分钟，空中惊魂。</p>
<p>在那段被无限伸长的时间里，机组人员作出了最专业的回应</p>
<p>空中遇险，驾驶舱风挡碎裂，座舱释压、低温、大风、缺氧等一系列连锁高危反应。</p>
<p>这还不止——挡风玻璃脱落那一刻，飞机正在海拔近万米的高度巡航。</p>
<p>这是个什么概念？</p>
<p>珠峰的高度才不过8844米！</p>
<p>比南极还寒冷，比珠峰还缺氧。</p>
<p>8633遇险的环境，是9800米的高空，800公里的时速，零下40度的温度而且没有氧气！</p>
<p>想一下这样的场景：冬天，你在零下四五十度的大街上，从保暖内衣到羽绒服里三层外三层，骑个自行车，风像刀子一样刮在你脸上，估计早就冻哭十次了</p>
<p>而机长立即紧急处理，却在返航备降过程中突然遇到恶劣天气，黑云密布，为了保障所有乘客的安全，临危不惧，利用自己的专业及经验克服重重困难，最终成功！</p>
<p>他说这条航线我最少飞了上百次了吧</p>
<p>如果是学姐遇见了，大概就和那群乘客一样吧。惊慌失措，觉得自己可能真的回不去了，丧失理智，只想叫唤着：我要回家</p>
<p>因为那个时候家可能是最向往的吧</p>
<p>我记得有个男的解开安全带朝着机舱冲过去吵吵的时候，乘务长说 ：飞机给你，你会开吗？</p>
<p>最令人感动的是袁泉在电影中的一段话：“请相信我们，我们受过专业的训练，有信心，有能力，保证您的安全。不要恐慌，听从指令。”</p>
<p>这些危难时刻的人群也反映了我们人性的劣根性。</p>
<p>自己对自己的盲目，对专业知识的不敬畏</p>
<p>似乎一点一点的在吞噬着我们</p>
<p>是啊，飞机给你，你会开吗？</p>
<p>你知道那里各种按钮是干嘛的吗？</p>
<p>你知道外面的云层是怎样的吗？</p>
<p>你知道高山是在哪里吗？</p>
<p>你知道该如何拉动手柄，找到方向吗？</p>
<p>你统统都不知道，你有的只有一腔无处发泄的情绪。有的只有对专业的不信任</p>
<p>就如同很多人来告诉学姐，你直接给我代码啊，我要赚钱</p>
<p>好，我给你代码。</p>
<p>可是你知道怎么买吗？知道什么时候买入卖出吗？</p>
<p>你知道你买的这个公司现在是什么状态吗？</p>
<p>你知道现在他是挡风玻璃坏了，还是一个发动机废了呢？</p>
<p>很多时候我们大家就是这个样子，即便什么都不知道，也想冒死去试试。</p>
<p>可是，我们长投学堂是专业的，我们也是权威的（自豪脸）</p>
<p>我们获得了长投2018回响中国年度教育盛典两项大奖！</p>
<p>18年完成A轮融资，目前正在融B轮，可以毫不夸张的说，我们就是中国财商教育的领头羊，我们长投学堂就是最专业的</p>
<p>我们有信心，有能力带你实现年化12%-15%的收益，带你改变现状，走出困境</p>
<p>对，每一位乘客都想回家，每一个人都不想死</p>
<p>就如同当下每一个想去赚钱的人一样，没有谁是想亏钱的</p>
<p>大家都想赚钱，可是自己不专业，不清楚，不了解就真的敢入场吗?</p>
<p>不是我们坐过几次飞机就会开飞机了</p>
<p>也不是我们知道些概念我们就会买卖了</p>
<p>人家机长这条航线飞了上百次，人家机长本身就是开轰炸机的，受过了及其严格专业的训练</p>
<p>虽然可能在他的职业生涯中只会遇到有且仅有一次的这种困难。</p>
<p>因为我们的民航足够安全，但是这一次足以让他再无可能。</p>
<p>但是他足够强大的专业以及背后有一千多人团队的保驾护航，塔台，指挥，医疗，消防，军方等等所有团队的努力，才支撑他安全顺利的抵达</p>
<p>就像学姐之前和大家分享的，A股近十年，整体是向上的，是获利的。</p>
<p>可是我们依旧不能盲目入场，因为一次的意外足以要你身价性命，更何况你还是孤军奋战</p>
<p>当你准备入场时，你有没有具备专业的素养，能不能分析周遭的环境，以及对你要上的这辆车（公司）足够了解。</p>
<p>什么样子的性能？能承受的最大风险是？</p>
<p>关键时刻保命符（比如氧气罩55分钟的时间），能否扭转，保全自身！</p>
<p>没有？那真的毫不夸张的讲，是在不断的在死亡边缘试探</p>
<p>可能真的在接近死亡的那一刻我们才会想到我们最亲近的人，才会意识到原来我们还有那么多的事情没有做到</p>
<p>原来对喜欢的女生还没有表白</p>
<p>原来和妈妈的电话真的还没有讲完</p>
<p>可是我们现实中却又有多少人败给了等这个字</p>
<p>等我以后有时间，等我以后有钱了</p>
<p>等我忙过了这阵</p>
<p>可是很多情况下，真的没有以后了</p>
<p>人总是在失去后才懂得珍惜，尤其经历生死关头</p>
<p>其实人活这一辈子，能有多少机会给到自己呢？</p>
<p>每次面对的时候都错过。等来等去，再也回不到当初了</p>
<p>明天和意外你不知道什么时候会来临</p>
<p>更何况有可能是下一秒呢？</p>
<p>咱们班大多数人都是为人父，为人母</p>
<p>就像袁泉说：“我们也是儿子，女儿，爸爸，妈妈，和你们一样。”</p>
<p>那我们真的能给我们的子女，父母，老公老婆带去什么？</p>
<p>要后悔当初的等等再说我喜欢你吗</p>
<p>人要有敬畏之心，要勇于担起责任</p>
<p>很多东西是我们等不来的</p>
<p>也有很多东西是我们转身就不会再拥有的</p>
<p>有记者问过刘传健，作为一名机长，究竟意味着什么？</p>
<p>他的回答是：“就是用百分之百的努力，对付万分之一的隐患。”</p>
<p>我们当下的每一天，每一分每一秒都要拼尽全力的去活着</p>
<p>当下的每一个阶段要做的事情就要立马去做，不要再觉得我自己可以等</p>
<p>也不要认为我的能力足够强，我一个人可以面对风雨，面对种种挫折</p>
<p>如果不是足够的专业，如果不是团队足够的强大，或许这个历史事件就会有其他的结局</p>
<p>长投学堂的专业性以及团队的凝聚力和强大，足以为我们每一个人保驾护航</p>
<p>真实事件颁奖词里有这样一段话：</p>
<p>“在万里高空的险情中如此从容，别问怎么做到的，每一个传奇背后，隐藏着坚守和执着。”</p>
<p>如同我们遨游在跌宕起伏的股市一样</p>
<p>所有的从容和淡定背后，一定是隐藏着足够的专业和努力，一定是有着强大的团队为我们支撑</p>
<p>长投学堂的专业，决定了我们能飞多高，但我们百分百的努力，和不断创新学习，决定了我们可以飞多远</p>
<p>虽然是一部简简单单的电影，但是却真的反映了我们自身的生活状态</p>
<p>长投学堂是一架极其专业且强大的飞机，小白营则是一架小飞机。接下来的大风大浪如何面对就取决于我们自己的选择了</p>
<p>班班和学姐永远都在这里为大家保驾护航~</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间30</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B430/</url>
    <content><![CDATA[<p>大家好！我是西柚学姐，今天都要毕业了，那学姐就来讲一些不一样的东西!</p>
<p>不说经历，也不说干货，因为班班把该讲的都讲了</p>
<p>我觉得你们应该好好感谢下你们自己，因为是你们给了自己这个机会</p>
<p>来到训练营，接触了理财这个人生课题</p>
<p>今天呢我要问大家两个问题</p>
<p>第一个问题就是人生什么最重要？</p>
<p>大家可以思考一下，你觉得人生什么最重要呢？</p>
<p>学姐来说说自己的答案</p>
<p>是选择最重要！</p>
<p>我们的一生都是在选择中度过的</p>
<p>上大学选专业，毕业选工作，适婚年龄选择和谁结婚，如果创业的话选择什么项目，等有闲钱了选择什么投资，这些都是我们人生面临的重大选择。</p>
<p>刚才大家说的健康、家人，我觉得这些也是在选择的基础之上的</p>
<p>当你选择有规律的生活你就拥有健康，选择合适的伴侣你才能够幸福</p>
<p>虽然我们的父母不能选择，但我们可以让自己变得更优秀，让我们的下一代有得选。</p>
<p>选择真的决定了我们人生的轨迹，路都是自己选的，选得好路就会走得顺畅，选错了，就会艰难很多。</p>
<p>加入长投学习理财，让我生活得更自信，对我来说就是做出了最好的选择。</p>
<p>相信你们也一样，加入训练营就是你们作出的一个正确选择，当你们看着自己的账户里的财富增加，对你来说那不只是金钱带来的满足感，更是一种自我肯定。</p>
<p>如果你的选择是正确的，即使慢点也没关系，但是如果你选择错了，效率越高后果越严重。</p>
<p>刚才学姐说了第一个问题，现在我来说第二个问题，进入一个圈子最重要的是什么？</p>
<p>大家想3s，不用回答，然后我来给出我的答案</p>
<p>当我想明白这个问题之后，进步速度比之前快了太多。</p>
<p>答案是：<br>进入一个圈子最重要的是我能为这个圈子里的人提供什么价值！</p>
<p>如果你只是去一个圈子里得到什么，抱歉很可能事倍功半！</p>
<p>但如果你换一条路，多为别人做点什么，多给别人价值，你的成长速度真的会快很多。</p>
<p>其实很简单，大家都不喜欢跟索取者打交道，而乐于付出的人肯定有更多可能性。</p>
<p>去年一年，我在网上付费学了很多课程，包括写作课程，在得到里面付费听书。但是当我来这里当助教之后，我的进步飞快，正所谓教是最好的学，就是这个道理。</p>
<p>如果我只是自己学，我觉得把这个知识点掌握就好了，但是如果让我把这个东西讲给别人听，并且让对方能够听懂，我就会学不止一遍，可能就要学十遍。</p>
<p>输出是最好的学习方式，就像我来训练营给大家做助教，我就必须自己学得很透彻之后，我才能给大家讲懂。</p>
<p>所以我说做了助教之后我的进步飞快。</p>
<p>在这里我深刻地体会到了一句话，就是懂得那么多道理却又过不好这一生。</p>
<p>当你们第一次加入训练营的时候，大家的目标都是一样的，都是想学习理财知识来的，还有人是奔着财富自由来的</p>
<p>但是短短14天的时间，有的人选择了退出，有的人选择了观望，而有的人已经在学习初级课了，你们说是不是选择决定了你以后的人生？</p>
<p>虽然大家都懂得这个道理，但是还是有人选择继续等，所以今天我深刻地体会到了那句话。</p>
<p>好了，学姐就说这么多吧，希望你们通过正确的选择，努力地生活，一定可以实现你的梦想！</p>
<p>大家要好好去做选择，去坚持学习，2020年加油！</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间26</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B426/</url>
    <content><![CDATA[<p>宝贝们鸭<del>吃过饭了吗？今天我们不整那么严肃，给大家讲两个小故事，逗个乐儿</del>要是从中间听出了什么感悟呢，那说明你一定是个炒鸡聪明的小可爱哦</p>
<p>第一个故事：【上门开锁换锁】<br>歪歪三年时间一共被锁门外6次<br>第一次被锁外面<br>“喂，开锁师傅吗？我被锁门外面了，开个锁大约多少钱？”<br>“有反锁吗？”<br>“没有反锁。”<br>“100。”<br>单纯的我还以为开锁是很有技术含量的活，所以觉得100也不是太贵，就欣然答应了<br>15分钟后，师傅上门来了，拿了一张小塑料卡片，花了10秒钟，就把门打开了。<br>当时开锁师傅的表情是这样的</p>
<p>而我呢？</p>
<p>第二次被锁外面。<br>经过上一次的教训，我决定开始讨价还价。<br>“师傅，上门开锁多少钱啊？”<br>“100”<br>“50还不行啊？我家没反锁。”<br>“我们是全市统一价，不还价的。”<br>“你们不是带个塑料卡片就能开了么，怎么要这么贵啊？”<br>“就是100，50你找别人开去。”<br>对，这个行业就是这么横！我试图打了四五个开锁电话，全是要价100。<br>我还是不甘心，决定自己开锁。不就是小卡片么？难不倒我的！<br>半个小时过去后…..<br>“师傅，100就100，你快上门吧。”<br>当时师傅的表情是这样的</p>
<p>而我</p>
<p>第三次 第四次 第五次 我直接倒地不反抗了。<br>这个故事告诉我们一个什么道理啊<br>人家靠技术吃饭的，你看着三两下就搞定，但你不知道为了这三两下，人家练了多久，也不知这三两下是多少下之后，化繁为简的精华。<br>开营的时候，记不清哪位跟我说，长投没啥啊，有了录音，记了课程，我也可以复制，有没有训练营都无所谓。<br>就像故事里第二次开门的“我”，<br>专业的事情就要交给专业的人来做，总有一天你躺在生活面前，不再反抗。。。<br>说好是故事会，大家乐乐呵呵的，听点儿笑话，如果在笑声里有收获，那是我分享的价值啦~<br>开始，……继续讲故事</p>
<p>第二个故事【救人】<br>我们假设一下，在一列火车上，你的邻座老爷爷突然心脏病发作了<br>他的家人惊慌失措，这时你说你要开始抢救，要求他的家人马上按你说的做，并准备了小刀，计划马上开始手术。<br>这时他的家人问，你是医生吗？<br>不是。<br>那你一定是学医的人吧？<br>不是，我完全没有学过医<br>但我是一个好人，是一个诚实的人，我上班从来不迟到。我还是一个孝顺的孩子，业余生活丰富，生活非常富足。我从不说脏话，小学时还是三好学生呢~<br>（咳咳，这TM是我讲过的最不靠谱的故事了）<br>WTF，这特么和现在要抢救老爷爷有什么关系吗？你到底是干嘛的，你能抢救得了吗，你凭什么啊？<br>我索这位先森，你能不能不要这么肤浅呢？你难道不在乎我的优良品德么？我不是刚和你说了我扶盲人老大爷过马路的故事吗？<br>我有辣么多辣么多优良品质，你为什么就抓着我不会做手术这个问题不放呢？<br>我想在这种荒诞的情况下，对方家人一定已经要疯了，他会用双手用力摇晃你的肩膀，大喊道：“废话！你说的那些优良品质都是屁话，因为老子现在需要的是一个医生，能抢救的医生！你这个神经病给我滚！”<br>故事讲好了，有点荒诞不经，但其实我们天天都身处于上述的情况之中。<br>为什么社会对我们的努力不屑一顾，或者为什么我们得不到想要的尊重？<br>因为这社会只在乎你在特殊情况下是否具备解决问题的特殊技能，除此以外都是浮云。<br>战场上不会因为一名士兵记得女友的生日、记得纪念日并精心准备礼物，而让子弹绕过这位有情郎；<br>生意场上也不会因为哪个新手是大学优秀班干部而说放他一马，让他打个折亏损吧；<br>在家人需要用钱时呢，你也不能因为自己是劳模标兵，还曾经拾金不昧得到领导表扬而让医院免除高额医疗费。<br>这是一样的道理<br>你的好，你的优秀，和社会需要的无关，所以努力常是徒劳。<br>最近看到一段话：当你攒足了钱，这个世界就会对你很温柔，你也就不再会患得患失，生怕被人辜负;<br>即便有钱不一定幸福，但离开谁你都能从容开始。钱虽然很俗，但这个世界都为钱让路，它会令你底气十足。<br>好啦，故事讲完啦，希望小伙伴有自己的思考，虽然不能暴富，但是可以一起抱富~</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间25</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B425/</url>
    <content><![CDATA[<p>思考题解析–小胖该选择入股哪家公司合适？</p>
<p>下午学姐在班级群发了一道思考题给大家，都还记得吗</p>
<p>现在针对这道思考题，详细讲解一下</p>
<p>现在我把这套思考题重新发一遍：</p>
<p>小胖手上有一部分的闲钱，小胖想做点生意，发点小财，自己创业吧，没有门路，市场竞争又如此激烈，在各种担心之下。此时有三家公司找上门来，想拉小胖入伙。</p>
<p>在小胖犹豫不决，不知该选哪家公司的时候，刚好有人提供了相关数据如下：</p>
<p>假如你是小胖，你会选择哪一家公司？并且说出理由</p>
<p>好了，思考的差不多啦，西柚来给大家，细细讲解一下这道选择题</p>
<p>这道题的答案，正确答案是a</p>
<p>为什么选择a呢？那我们分别来看一下这三家公司，a公司是一个中等企业，b公司是一家名声在外的超级大公司，c公司是一家小型企业。</p>
<p>既然是入伙做生意，是不是看哪家公司赚钱就入伙那家？如果都比较赚钱，那么我们就看谁赚的更多？哪家公司最赚钱？我们就选择参与哪家公司的生意。大家说，是不是这个理？</p>
<p>好了，现在，我们来分析一下，到底哪家公司比较赚钱呢？</p>
<p>我们先来看一下最大的那家公司，B公司，2010年它的资产合计是10万亿多一点，到了2018年b公司的资产合计是19万亿多一点，9年的时间，资产扩大了90%，我们再来看一下，b公司的股东权益，B公司2010年股东权益合计是6700多亿，到了2015年，他的股东权益合计是13,500多亿，到了2018年的时候，b公司的股东权益合计17,200多亿，</p>
<p>9年的时间股东权益合计，总共增加了127%</p>
<p>什么叫股东权益呢？其实就是所有者权益，就是可以按照一定的持股比例分配给股东的资产。</p>
<p>也就是说，经过了9年的发展，属于股东的合法资产增加了1.27倍</p>
<p>这样算起来，这家公司还是有钱赚的。</p>
<p>接下来我们再看一下中型企业a公司，A公司的资产从2010年的7200多亿，发展到2018年的 34000多亿，也就是说经过9年的发展，这家公司的资产扩大到了4倍多一点。</p>
<p>再看一下股东权益，股东权益从2010年的331亿，发展到2018年的2400亿，哇，足足增加了6倍多，是不是好会赚钱？</p>
<p>下面我们来分析一下最后一家公司，C公司从2010年的38亿资产，发展到2018年的37亿资产，好像公司规模越做越小了，这家公司的股东权益，从2010年的28亿，到2018年的29.9亿，经过9年的发展，好像感觉没有太大的变化。估计这家公司赚的钱，只够支付公司的各种费用，以及发工资等，勉强维持公司正常运转，是一家不死不活的公司。</p>
<p>通过以上对比，我们很快就能够发现，A公司是小胖最好的考虑目标。</p>
<p>好了，如果a公司是一家没有上市的公司，那么小胖想要参与这家公司的生意，需要跟公司老板签订合同，约定出资数额，以及所占股权比例，然后打款给公司，将来按所占股权比例分红。</p>
<p>但是现在情况不一样了，这三家公司其实都是已经上市的公司，想要参与这家公司的生意，入股这家公司，最简单的办法，就是按照市场价，购买这家公司在股市里流通的股票。你能买多少就买多少，只要有人愿意卖。如果你能够从市场上买到这家公司1/10的股票数量，那么你就拥有了A公司1/10的股权，可以享受到公司1/10的利润分配。</p>
<p>购买一家好公司的股票，不仅可以享受到现金利润分红，股权分红，而且还可以享受到股价上涨带来的收益</p>
<p>这又怎么理解呢？其实只要一家公司他的生意非常红火，赚钱能力非常强，我们就没有必要去担心它的股价不会上涨，同样的还是拿这三家公司举例，刚才说了这三家公司其实都是已经上市的公司，那么我们看一下这9年来他们的股价变化情况</p>
<p>先看A公司</p>
<p>9年来，A公司股票上涨了将近4倍，如果加上现金和股权分红的话，赚了六七倍都不止了，前面我们也算过，他的股东权益合计，这9年来刚好也是扩大了六七倍的。</p>
<p>B公司，9年来股价上涨了一倍多，是不是和b公司的财务数据比较接近？略微上涨，但不是很多</p>
<p>这一家公司赚钱能力稍微差一点，当然它的利润分红也就没有a公司那么多</p>
<p>最后我们看一下第三家公司，C公司，无论是从公司规模，还是从股东权益方面，这9年来几乎没有发生太大的变化，</p>
<p>于是乎，这家公司9年来，虽然他的股价中间也跌宕起伏过，但从头到尾也几乎没有发生太大的变化，公司不赚钱，更谈不上什么现金分红和股权分红了，所以了，如果投资这家公司的股票，无论是五年，八年，还是十年，都是赚不到钱的</p>
<p>学姐刚才举例的，判断这几家公司业绩好坏的标准，并不是唯一的标准，分析一家公司营业能力是否强劲，需要通过很多方面去综合求证。而且不同的行业有不同的分析方法，不同的行业判断标准也会有所差异，但是我们知道，它是有逻辑可循的</p>
<p>通过这三家公司的分析，不知道伙伴们有没有发现一个规律？</p>
<p>什么规律呢？</p>
<p>那就是股票价格的涨跌从长期来看，跟公司的赚钱能力大小是成正比的。无论股价中间如何的跌宕起伏，最终都要回归公司的实际价值。一家公司的股票在未来能不能继续增值，跟公司未来是否能够保持强劲的盈利能力息息相关</p>
<p>那么a公司的股票在未来到底值不值得投资呢？这就需要更多的财务数据，通过收集多方面的信息，从各方面去分析a公司，在未来是否能够持续赚大钱</p>
<p>但至少目前来说是最佳选择</p>
<p>所以学会并掌握分析公司的能力，非常重要。所以说，投资股票，说白了就是投资公司，从长期来看，股票赚不赚钱，就看这家公司的生意赚不赚钱，这才是投资股票的本质。要想在股市赚到钱，学会价值投资才是关键。</p>
<p>同学们，有没有感觉今天学姐说的这些，已经颠覆了大家对股市的传统认知</p>
<p>班班和学姐们非常努力地通过小白训练营，帮助大家树立正确的理财投资思维。希望大家通过小白训练营的熏陶，能够真正得到成长，包括观念，思维，行动上都能够得到成长</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间04</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B404/</url>
    <content><![CDATA[<p>不做卡奴，班班带你玩转信用卡</p>
<p>这几天里，班班发现，咱们群里有很多小伙伴都有欠着信用卡的债务，而且还不低，几万的、十几万的、二十几万的都有。</p>
<p>所以，学姐申请给大家安排了这节课，给大家讲一讲信用卡的使用，教大家如何来玩转信用卡。</p>
<p>当然，有些朋友小伙伴可能用的是花呗，一样的哈！花呗和信用卡本质上是一样的，咱们一起说。</p>
<p>第一、 信用卡是什么？<br>信用卡是一种个人、小额、短期、无息、消费贷款工具。关键词：无息贷款。</p>
<p>第二、信用卡的三大特征及使用方法<br>首先要明确信用卡三个特点：“无息贷款”、“优惠”、“积分”，这是信用卡最明显的三个特征，下面我来一一讲解。</p>
<p>带着疑问来听课，会学到更多东西哦</p>
<ol>
<li>无息贷款。<br>信用卡最主要的特点是什么？<br>答曰：无息贷款。</li>
</ol>
<p>信用卡持卡人在一个消费周期内，短则20天，长则55天的时间内，使用信用卡消费，是“免息”的，相当于获得一笔银行的小额无息贷款，很有诱惑力，有木有？</p>
<p>而上面我提到的这个无息贷款的额度，是根据你的信用额度来的。</p>
<p>信用卡，有两个比较重要的日子。一是账单日，二是还款日。</p>
<p>账单日，告诉你这个记账周期里你花了多少；还款日，是截止该时间内，你需要把钱还进去。</p>
<p>从“账单日到还款日”之间的这段时间就是免息还款期，大白话讲就是不收利息的借款期。</p>
<p>我用人话来演绎一下哈。账单日就是银行来通知你：“歪，你是小王吧？（啊呸？你才是小王八<del>）你这个月信用卡该还啦，XXX块，要在还款日之前还清哦</del>（如果没钱，赶紧想办法去准备吧） ”。这时候，你不用出钱，继续装死~</p>
<p>一般20多天之后就是还款日，还款日就是要掏钱的时候啦~</p>
<p>打个比方：我的工商信用卡账单日为每个月的12日，最后还款日为次月的5日。那么，每个月12号之前刷卡消费了多少钱，下个月的5号之前就需要还款了。注意：还款日是出帐单日的下一个月。</p>
<p>每个月13号之后消费，账单不计入本月，而是计入下个月的账单中，那么这笔交易就会是下下个月5日还款，最长免息还款期则为55天。</p>
<p>举例：<br>我的信用卡是12号账单日，次月5号还款。然后，我1月13号花5000元办了健身卡，2月12日出账单，3月5号我才真正付出了这5000元。</p>
<p>1月13号到3月5号，这50多天的时间就是免息期，这么长的时间，甚至都可以去做个短期理财了。我一般是存余额宝或者微信理财通里，当然也有其他的方式可以选择，比如国债逆回购，薅点小羊毛。</p>
<p>所以，很多人的付款的优先级顺序已经发展成：信用卡&gt;银行卡&gt;余额宝。</p>
<p>当然，这省得并不多，1万元1天也就1块钱左右，但是只是改变一下付款方式就能让钱自己生钱，也可以积少成多哦，也就是我们说的薅羊毛。</p>
<p>这个如果有点不会算可以课后再复习一下~</p>
<p>免息期很美好，下一个特点就不那么美好了<del>也就是很多人有点怕用信用卡的原因</del> </p>
<p>这个特点就是高利率。如果信用卡使用不恰当，很有可能会变成高利贷。</p>
<p>信用卡的利率是每日万分之五，看起来是不是不高？但实际上，如果转化成年化利率，那就是18%。日 息是0.05%，一共有365天，那一年就是0.05%*365=18.25%</p>
<p>刚才我们说了，如果使用不当，才会变成高利贷。那哪些情况下，信用卡会变成高利贷呢？</p>
<p>首先，是逾期未还，就是还款日的时候你还没还上钱。信用卡是按日计息的，晚还一天，都会产生逾期费用，同时还会对征信造成污点，影响购房贷款等其他贷款的审批。所以，千万不要忘记还款呀~！<br>其次，就是每月只还最低还款额。只还最低还款额不影响征信，但是会产生大量的高额利息支出。并且这些利息支出是算入账单的，也就是说，这些利息会越滚越多，属于利滚利,即利息再产生利息–复利。真正的高利贷！</p>
<p>最后，就是分期付款。分期付款不影响征信，也不存在利滚利，但是账单总额会按18%的年利率来计算利息。不过，现在有些银行会打折，利率会相对低一些，但基本上也有8%左右。银行一般会告诉你，是月0.7%左右，不会告诉你年8%，因为这个0.7与8的差别实在是有些大，所以人家把单位给换了下。【偷笑】</p>
<p>大家都学习了复利，8%的利率已经足够让你5年之内把别人甩出十万八千里了~ </p>
<p>很多人迫于还款压力，可能会选择最低还款或分期付款。我之前有同学几千块办了个12期分期，然后几万块的额度因为已经有了分期就没法再办了。也就是说，一旦有了分期付款，这个期间就没法再给你升额度了，而且再使用的时候 ，要先扣掉分期的款。</p>
<p>比如： 我的信用卡可以刷5万，但是我1月份花了1.2万元作了12个月的分期。 本来我可以申请把额度升为8万的，但是这一年里就不能升了。而且我1月只能再刷3.8万块，2月的时候如果还上当期的1000元（每月的还款额），可以刷卡4万元（因为2月份的时候，我已经还了2个1000元了，还欠着银行1万元）。</p>
<p>《小狗钱钱》里也有相应的内容，在这里班班来和大家简单说明一下，该如何选择。</p>
<p>如果你的账单总额非常大，超过了3个月的收入。那我建议你可以选择分期付款，减轻每期的还款压力，同时控制刷卡消费。</p>
<p>如果你的账单金额不是那么大，比如，只相当于1个月的收入。那你可以选择最低还款，同样地要控制刷卡消费，保证在第二个月全额还款。</p>
<p>也正是因为信用卡的高利率使很多人成为卡奴，让信用卡成了某些人眼中的洪水猛兽。</p>
<p>那信用卡是不是真的是洪水猛兽呢？班班可以肯定地说：当然不是啦！</p>
<p>合理使用，不仅可以增加个人信用，为我们的生活带来很多便利。甚至还可以用来薅羊毛。</p>
<p>接下来讲讲如何合理使用。</p>
<p>⑴合理用好免费期</p>
<p>如果小伙伴们【有买大件物品的需求】的话，建议在账单日之后购买，这样能获得更长的免息期。</p>
<p>玩法一：比如上面举的我自己的例子，因为我的帐单日是12号，所以我选择在13号刷卡。假设1月12号出帐单，那么1月13号—2月12号里，所有的消费都统一在2月12号出帐单，统一在3月5号还款。所以，1月13号与2月12号刷卡的区别，就是多了一个月的免费使用期。</p>
<p>玩法二：班班上班的公司，每到过节时，总有一定的过节额度给自己的客户，大家都懂的是什么意思哈。我们公司一般是不需要个人垫付钱的。在过节之前，我们向公司打完申请后，钱就会到帐了。一般情况下，我就会直接把钱转到微信财富通或者余额宝。真正买东西时，我还是选择信用卡支付，这样一来会拿到更长时间的利息。要是额度大的话，也很可观的。10万元的话放三个月，也会有差不多900元上下的利息的哦。</p>
<p>玩法三：班班去外面买大件的时候，如果商家有可以免费的分期付款时，一般会选择分期支付。然后，把钱放到余额宝，选择每月自动付款。比如，买了个6000元的电脑，分12期付款，到年底还完帐单的时候，你会发现还剩下100多元。因为第一个月里，你是从余额宝里拿到6000元的利息。第二个月，帐户里还有5500元，你可以拿到5500元的利息。依次推下去，一年下来的利息收入就是100多。而这些利息就是你白得的。当然，这样操作的前提是，你手里有这部分钱，并且商家保证分期没有任何的手续费与利息费。</p>
<p>(2)巧用信用额度<br>高信用额度可以干嘛？必要时，提现金额高、刷卡消费上限高、办理签证可以当做一种资产担保、快速审批房贷、车贷等等……同时也说明你的信用良好。<br>如果你没有这么高的额度，又想提升额度，很简单，日常的消费都放在信用卡刷卡。比如超市消费，不但可以享受有些商超和银行的联合优惠折扣，还能同时提高信用额度，一举两得~~</p>
<p>当然，你也可以帮身边的朋友代刷，或者单位大宗采购时，如果恰好经过你的手，你也可以代刷一下，既提升额度又能套现，也是一举两得。</p>
<p>总之，提升信用额度，就一个办法，多刷卡！刷的越多信用额度也就提升的越快。</p>
<p>再来，很多人应该都会有房贷的需求，或者有些人有时候会有信贷的需求，但是这些贷款都有个基本要求：需要查询个人征信。信用卡的使用可以积累个人信用，更容易申请住房贷款，也可以在需要的时候迅速贷到款。</p>
<p>这里给大家说一个词叫【白户】，指的就是没有信用记录的人。住房贷款因其政策特殊性，白户也是可以申请的，但是过程就会比较慢，而市场上的信贷是不贷给白户的，就是基本审核都过不去。</p>
<p>所以积累个人信用记录，这也是信用卡非常重要的一个作用。<br>这里班班要强调一点：用信用卡理财，一定要对“刷卡日”，“还款日”，“工资发放日”，“免息期”了如指掌！了如指掌！了如指掌！</p>
<p>如果迟了会影响信征的。</p>
<p>2.优惠<br>各大银行为了推广信用卡业务，和很多商家都有合作</p>
<p>小伙伴们可以根据自己的需求，选择各种偏向的信用卡，能够给自己生活带来很多实惠。</p>
<p>比如：我现在主要使用的就是广发的信用卡，因为我在生活上的需要比较多，所以对比了一下，觉得很适合我，它家的信用卡有个“星期五支付半价”的活动，在生活中的实用性也不错</p>
<p>这里多说一句，大家使用哪家的信用卡，最好下载哪家的APP，时常关注一些优惠，至少做到心中有数。</p>
<p>3.积分<br>通过信用卡消费，就可以得到积分</p>
<p>在办卡的时候就要关注一下积分活动，到底有什么作用，实用性强不强，有的时候能发现不少比较实惠或者适合你的</p>
<p>同样的建议，一定要多关注积分优惠，也能带来很多比较不错的生活优惠喔。</p>
<p>比如：我就曾经通过积分活动，换过一个新XX的拉杆箱和双XX的菜刀哦,还有现在我与母亲大人用的HelloXXXX的母子保暖杯。（避免广告，手动打马赛克）</p>
<p>除了信用卡的优惠部分，使用信用卡也有几个【雷区】</p>
<p>一、 不要用信用卡套现。<br>比如：办的信用卡透支额度是 2 万，套现就是说，把 2 万取出来变成现金，利用一个月的还款期，用这 2 万元进行投资，到还款日时再把这 2 万元还上，那么这一个月时间之内,用 2万赚的钱就是信用卡套现，通俗的讲就叫空手套白狼。</p>
<p>信用卡套现的风险在于：</p>
<p>A、有的小商户和持有信用卡的人约定刷卡，商户挣手续费和银行返点，持卡人获得套现，比如透支额度为 1 万，商户挣手续费 50 元，咱们算算 1 万投资什么一个月能挣 50 元？50*12/10000=6%, 所以小额套现得不偿失，因为你本金小而且时间短根本挣不回来。</p>
<p>B、而大额套现，银行的信用卡系统有信用卡套现风险预警，一旦银行系统认定这笔消费属于套现，那么就会上银行的征信黑名单，以后使用金融服务比如银行贷款，简直举步维艰，实在是得不偿失。<br>而且恶意套现属于违法违规行为，一旦被发现，还会面临法律的处罚。</p>
<p>所以，小伙伴们切记不要套现！不要套现！不要套现！重要的事情说三遍！</p>
<p>二、尽量不要用信用卡分期借款<br>这里说的信用卡分期，与商家提供的分期付款是不一样的哦。信用卡给你的分期是一定会有手续费的，因为你占用人家的资金了。而商家可以做到不收手续费，因为钱已经从你买的货物的利润中赚到了。</p>
<p>有信用卡的小伙伴们有没有计算过分期的借款成本有多高？</p>
<p>关于这点，大家可以拿起笔算一算。</p>
<p>银行是从来不会跟你说年利率是多少的，都是告诉你说，每天万分之五，但是你们自己去算一下。万分之五乘以三百六十五是多少？1 万块钱一天利息是 5 块，一年就是 5*365=1825，年化利率就是 1825/10000=18.25%，不算不知道，一算吓一跳！分期付款，借利率为年化 18%。<br>如果要覆盖掉信用卡的借款成本，意味着我们的年化收益率要高于18%</p>
<p>大家知道巴菲特的年化收益率是多少吗？<br>20%…<br>​​.<br>巴菲特的年化收益率平均只有 20%，看起来不起眼，但是他凭着这不起眼的 20%做到了世界首富</p>
<p>大家不要以为这个数字很低，可能大家都会经常听到，某某5年通过炒股，就从几万赚了几百万的事情。一两年的投资收益率高，很容易办到，但长期投资收益率要达到18%以上是很难的一件事情。</p>
<p>如果说，十年的复合收益率达到20%，算是百里挑一，那么坚持二十年就是万里挑一。</p>
<p>而坚持五十年以上的概率是百亿分之一，达到这个级别的人，全世界只有巴菲特一人(为老爷子鼓掌)。</p>
<p>要不然银行怎么会天天推荐办信用卡，然后还有积分兑换礼物这种好事。赚的就是这一部分的钱。</p>
<p>三：如何处理溢缴款</p>
<p>溢缴款，大白话就是，一不小心还款时还多了，多出来的部分就是溢缴款。</p>
<p>有些小伙伴有多张信用卡，还款也很及时，但是误把还A卡的钱还到B卡里了，这时，B卡里的钱就成了我这个信用卡的“溢缴款”</p>
<p>很多人，一开始认为既然钱是我自己的，又存在我自己的卡里，就算是信用卡取出来也应该不需要费用吧。</p>
<p>事实并非如此，我把钱误存到信用卡不仅没有利息可收，换作【以前】，大部分银行取现的时候，还需要按照信用卡透支取现一样的收取手续费。</p>
<p>只是由于这部分溢缴款的体量和金额都比较小，对于银行来说并不是很好的利润点，渐渐地有些银行就取消了这部分的取现手续费用。</p>
<p>虽然大部分银行可以免费提现溢缴款了，但如果不想消费掉的话，应该怎么提现出来也是一个问题。</p>
<p>一般来讲，银行都可以免费让客户对溢缴款进行提现，一般有三种方式。<br>第一，直接到柜台取现；<br>第二，提现到该行的储蓄卡，比如通过招行的APP直接提现到本人招行的储蓄卡里面<br>第三，只有极少银行可以支持本地甚至异地ATM取现，比如广发还能够到其他行的ATM进行异地取款，免收任何手续费。</p>
<p>不过提醒，即便个别银行可以支持异地提现溢缴款，但是记住提现的时候，不要超出溢缴款的总金额，要不然也会被当成“透支取现”处理进行收费，费用包括手续费和利息。</p>
<p>也有的国有银行比如农行，只能靠消费“提现”，而不支持任何其他方式的提现。也就是说，我只能去花掉了，没法把钱取出来。</p>
<p>如果溢缴款的数额不大，不拿出来也可以，直接拿来消费，反正到时信用卡每月还款时，会优先把账户中的溢缴款部分进行扣除。</p>
<p>下面我们讲讲信用卡使用的tips</p>
<p>tip1，尽可能利用它的免息还款期，即采用全额还款模式。并尽量等到还款日来临再还款。这一块相当于免费的贷款</p>
<p>tip2，利用免息还款期高阶玩法，可以办理不同银行的信用卡，并错开它们的账单日。每次刷卡优先选择刚过账单日的那张卡。</p>
<p>tip3，将信用卡的免息期和货币基金搭配使用，许多货币基金都提供信用卡还款功能。</p>
<p>我们在消费时采用信用卡，对应的流动资金则暂时安放在货币基金里，到还款日，通过货币基金还款。采用这种搭配模式可以赚取一段时间的货基收益。<br>以上三个小tip就是使用信用卡的正确姿势。</p>
<p>最后科普一下，如何知道上不上征信？<br>如果你习惯读合同，可直接看合同里有没有这样的名称：授权XX向金融信用信息基础数据库发送、查询、使用、保存个人信用信息BLABLABLA…这个很拗口的金融信用信息基础数据库，就是央行的征信系统了，上面保存的你的信息，就是你的个人征信报告。出现它，妥妥的就会上征信。</p>
<p>以上，就是今天分享的全部内容</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间05</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B405/</url>
    <content><![CDATA[<p>极限挑战之》没有伞的孩子更要努力奔跑</p>
<p>出身决定命运？《极限挑战》6问“人生起跑线”，我们的孩子凭什么实现阶层跃升？</p>
<p>如果有一个标准能够评判，你觉得自己孩子的人生起跑线与同龄人比较在哪个位置？</p>
<p>如果你说不好，问你几个问题。</p>
<p>问题的答案为“是”就给自己的孩子加6分。</p>
<p>“你和丈夫／妻子都接受过大学以上教育吗？”</p>
<p>“你给孩子请过一对一家教吗？”</p>
<p>“你是否正在让孩子持续的学习功课以外的一门特长，而且会让其保持一定水准？”</p>
<p>“读万卷书不如行万里路，如果孩子在从小到大的旅行经历中，是否有过一次出国经历？”</p>
<p>“你是否承诺过孩子要送他出国留学？”</p>
<p>“从小到大孩子是不是你心中的骄傲，你是不是一直在朋友和亲友面前夸耀并炫耀他？”</p>
<p>不知道你的孩子最后得分是多少？</p>
<p>这些分数，就是我们给到我们孩子的人生“起跑线”的起点。</p>
<p>这一季的《极限挑战》，看哭了很多人。</p>
<p>在节目中</p>
<p>上面的6个问题</p>
<p>问的是还有100天就将参加高考的考生</p>
<p>他们今年18岁，刚刚是成人的年纪，也是即将步入大学的年纪。</p>
<p>每一个问题</p>
<p>如果是肯定答案</p>
<p>孩子将向前大跨步地走6步</p>
<p>达到前一条距离终点更近的起跑线</p>
<p>6个问题过去了</p>
<p>他们有些得分为0</p>
<p>神态略显窘迫地站在原点</p>
<p>有些则需要回头才能看到其他人</p>
<p>他们现在站在的位置</p>
<p>是家庭给到他们的人生起跑线</p>
<p>相信你也看出来了，这些问题都和“钱”有关。谈钱是件很俗的事情，可它真的决定了一个人的底气。<br>你没穷过你不懂，那种看着别人肆意买零食、玩具，自己却只能眼巴巴看着的委屈；那种在敏感的青春期，别人光鲜亮丽而自己暗淡无光的心酸；还有那种，不敢肆意花钱，只能一点一滴省钱的无奈……都说原生家庭是一个人的后盾，但对另一些人来说，可能恰恰相反。<br>最后这一个问题，和前几个问题都有点不太一样。父母是否一直视你为骄傲？<br>​​</p>
<p>家庭氛围好的孩子特别幸运，因为见过好的感情是什么样子的，所以能够很轻松地学习和模仿，也能收获更多的温暖和爱。经常被父母表扬和赞赏的孩子，也会更加自信和开朗。那么家庭氛围不好的孩子呢？“我很感谢父母让我成长为独立自由的人格，但与此同时也会觉得可惜，我知道自己错过了人与人之间很重要的东西，表达和接受爱的能力和勇气。”关于“爱”这件事，有的人一出生就已经会了，有的人却要靠自己摸爬滚打。中国式的教育：不打不成器。父母很少夸奖孩子，总是用批评激励孩子努力。但用力过猛，孩子就会自卑胆小，不能喜欢自己。原生家庭对一个人的影响，就是这么残酷又直接吧。人生也许本来就不太公平，有些人拼尽全力才能得到的一切，对于某些人来说，是与生俱来的。</p>
<p>​​</p>
<p>也许看到这里，你也会感到绝望：注定落在后面的孩子，难道只能认命了吗？当然不是。就像视频里，起跑枪响的那一刻，所有的孩子都在往前冲，但越是落在后面的，越是拼命。那些差距在一些人看来是致命伤，在另一些人眼里就是努力向前的决心。<br>原生家庭的差距固然存在，我们无法改变差距，但我们可以改变自己。<br>在这里讲这个不是让我们否认自己的原生家庭，因为父母给了你生命，把你带到这个世界上，就已经足够感激终生了。我是希望大家：学着接受一些事实，但更要学着对自己负责，对孩子负责。因为从枪声响起的那一刻起，你在那里就已经决定了，你要做的就是拼命向前跑。<br>所谓成长，其实就是越来越接受自己本来的样子，不再怨天尤人，而是学会了什么叫天道酬勤。<br>我们这一生，懂得接纳原生家庭的不完美，也就学会了创造自己的再生家庭。<br>那些原生家庭亏欠于你的钱，你要靠自己的努力，一点点补偿给自己；<br>那些原生家庭亏欠于你的爱，你要在往后的时光里，一点点温暖自己。<br>更别忘了，你的再生家庭，也将是下一代的原生家庭。<br>就像节目里，那些看着孩子奔跑的父母们。<br>他们坐在室内，通过大屏幕看着自己的孩子，被别人一步步超越，原因不是孩子们不够努力，而是自己的问题……<br>这种感觉，该是多么心酸啊。<br>所以，如果你也和班班一样，也曾是那个没有伞也要努力奔跑的孩子，也尝过独自一人打拼的痛苦和心酸，那么可不可以，让我们的下一代站在更高的起点呢？</p>
<p>我们已经不能改变我们的原生家庭了，但是当我们组成家庭了，是不是该让我们自己的孩子享受到好一点的原生家庭。<br>特别喜欢黄磊在最后说的那句话：<br>有起跑的比赛都是短跑，可人生是场马拉松。而没有任何一场马拉松，是由起跑好坏决定的。<br>​​</p>
<p>年轻时有父母遮风挡雨，不能不说是幸运。可人生长河里的狂风暴雨，永远需要自己去面对。那些命里注定要跌倒的跤、要接受的挑战，谁都无法逃避。</p>
<p>而我们要做的，就是无论起跑线在哪儿，无论自己落后多少，都要咬紧牙，不管不顾向前飞奔，直到旭日东升，雨过天晴。<br>终有一天你会发现，那些因为没有伞而拼命努力的孩子，最后都找到了属于自己的屋檐。</p>
<p>竹子用了4年的时间，仅仅长了3cm，</p>
<p>​​</p>
<p>从第五年开始，以每天30cm的速度疯狂地生长，仅仅用了六周的时间就长到了15米。</p>
<p>其实，在前面的四年，竹子将根在土壤里延伸了数百平米。</p>
<p>​​</p>
<p>做人做事亦是如此，不要担心你此时此刻的付出得不到回报，因为这些付出都是为了扎根。人生需要储备！多少人，没能熬过那三厘米！竹子告诉你，什么叫价值！什么叫价值？</p>
<p>同是两根竹子，一支做成了笛子，一支做成了晾衣杠。晾衣杠不服气的问笛子：“我们都是同一片山上的竹子，凭什么我天天日晒雨淋，不值一文，而你却价值千金呢？”笛子：“因为你只挨了一刀，<br>而我却经历了千刀万剐，精雕细做。”晾衣杠此时沉默了……</p>
<p>人生亦是如此，经得起打磨，耐得起寂寞，扛得起责任，肩负起使命！人生才会有价值！看见别人辉煌的时候，不要嫉妒，因为别人付出的比你多！<br>看下富裕家庭的孩子的教育：<br>​​<br>美国第一女儿伊万卡，她的人生可看作是一本行走的财商教科书。</p>
<p>​​<br>李嘉诚每次给孩子零用钱时，先按10%的比例扣下一部分，名曰所得税。孩子上学后，他为孩子专门设立了完成学业的基金账户，孩子如果想用这个账户里的钱，必须得写报告申请才可以。这样，孩子从小就懂得“贷款”的概念，花钱时就要先仔细盘算，做一个全盘和长久的打算。<br>富裕家庭本身拥有更多资源，但是真正对孩子未来起作用的却是思维和眼界。<br>在北美，每逢周末路过居民区，你都能见到这样的景象：<br>​​<br>孩子们在卖自制的柠檬水<br>​<br>女孩们卖唇膏<br>​​<br>在家门口卖闲置的玩具和摆件<br>在我们的孩子还只会缠着爸妈各种买买买的时候，别人家的孩子可以自己赚钱。懂得钱怎么来。<br>如果你追溯那些负债月光的人他们的生活，你会发现，很多人的小时候，都是物质匮乏的。都是父母一直教导的要勤俭节约。<br>但是从拿到第一笔工资开始，就开始买买买，开始弥补这么多年无法自己支配金钱的遗憾。<br>因为之前爸妈管着，现在自己做主了，所以过度的消费负债就开始挥之不去了。</p>
<p>再次我给大家分享一下我的一些不成熟的小建议：<br>第一，给他们创造一个好的家庭氛围，一个好的家庭条件，让他们从小就能够接受到良好的教育，能够有更多的机会去接触优秀的人、去更广阔的天空看看。</p>
<p>第二，除了重视他们的智商，学习成绩，还要看中他们的情商、财商、以及面对挫折的逆商。可能智商决定了他们的高考，但是情商、财商、逆商，决定了他们以后面对的人生。<br>很多孩子在失恋中不能走出来，面对感情脆弱，不能面对失败，就是因为情商和逆商缺失</p>
<p>第三，我们这一代压力之所以那么大，因为除了孩子的养育，我们还要承担起父母的养老工作，2个大人，1个或者2个孩子，4个老人，压力太大，所以我们尽早给自己配置保险，为自己储蓄下养老金，为以后也要为人父母的孩子们减轻一些负担。</p>
<p>第四，成为他们的榜样、偶像，不要放弃自我的成长，越不放弃自我成长的家长和孩子，家庭关系越和谐。要记住父母是孩子的第一任老师，你想要他们成为什么样子，你就要先成为什么样子。</p>
<p>第五,把孩子当朋友，和他们平等交流，多给他们自己做选择的机会，让他们有试错的机会，以及可以为自己的人生负责的机会。<br>我知道不少父母周末都会陪伴孩子，所以希望大家高效的度过我们的亲子时光。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间06</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B406/</url>
    <content><![CDATA[<p>靠基金定投，33岁就退休</p>
<p>这是一本台湾的书，国内买不到，所以听我讲讲就好了。<br>学姐的私货哟~</p>
<p>给大家看下作者一家。作者Winne是左边的女生，台湾人；右边是她老公，美国人。</p>
<p>夫妻二人在十年前去泰国穷游，于是有了环游世界的梦想。但是，如果等到60岁退休再去环游世界，可能很多地方都去不了，很多苦都吃不了。</p>
<p>所以作者就给自己定了一个目标：在40岁之前退休，实现财务自由，环游全世界。</p>
<p>开始的时候，作者是想“边旅游边打工”的形式实现，她老公甚至想过当潜水教练、英语老师。后来在查找资料的过程中，两个人认识到，可以通过投资来实现财务自由。</p>
<p>通过作者的研究，最后确定了一个路线，那就是通过定投指数基金，和“4%法则”，来实现财务自由。</p>
<p>4%法则，是麻省理工学院的学者威廉班根在1994年提出的理论：<br>“通过投资股票资产，每年从退休金中提取不超过4.2%的金额用来支付生活所需，那到自己去世，退休金都花不完的。因为股票资产自己会增值。”</p>
<p>换句话说，如果一年需要开销10万，那就需要：10/4%＝250万。把这250万投资到指数基金上，就可以满足生活开销，实现财务自由。</p>
<p>一定要注意，这是美国的法则，不完全适用于中国，只是给大家一个参考。</p>
<p>Winne觉得自己需要3000万台币，也就是约650万人民币，就可以实现财务自由的目标，去环游全世界啦。</p>
<p>所以在大学毕业的那一天，作者和他的老公，就立下了“10年内退休”的计划。目标，就是在10年内，通过定投指数基金，积累下价值650万人民币的指数基金资产。之后每年从指数基金中提取不超过4%的钱用来生活、环游世界。</p>
<p>（不过他们好像忘记了通货膨胀这件事……）</p>
<p>Winne是怎么做到的呢？老一套：节流、开源、依靠基金分红建立被动收入来源。</p>
<p>这真的是我见过的最狠的节流。</p>
<p>家庭开支最大的就是房租/房贷、伙食费、交通费。如果要尽早实现定投的目标，最快的方法就是把这3大项支出减少到最低。</p>
<p>房子住最便宜的学生公寓，公寓旁有块空地，自己种菜。</p>
<p>车？不要，地铁都不坐，自己踩脚踏车。</p>
<p>手机？不要，两人共用一部手机打电话就行了</p>
<p>结婚？不买婚戒、不拍婚纱照、没有喜宴。蜜月旅行是徒步穿越西雅图附近的雷尼尔山10天之旅，只花了几百元。</p>
<p>他们每个月的收入，至少存下70%用于投资，最高的时候甚至能达到90%。</p>
<p>为了省钱，他们还自创了非常绝的一招——给消费贴上“生命标签”：比如说税后月收入5000元。一个月工作22天，每天24小时，那么一小时价值10元左右。</p>
<p>在消费前，给这笔消费贴上生命标签，看看值不值。</p>
<p>比如说一杯星巴克咖啡＝3小时生命。一部新iphone手机＝800小时生命。问问自己这些真的值么？</p>
<p>开源的部分，我觉得他们做得不是太好，主要就是依靠工资。</p>
<p>但是通过认真工作，10年后准备“退休”的时候，Winne的工资收入已经是刚开始工作时的3-4倍了。</p>
<p>作者的老公创立了自己的旅行博客，接入广告，每个月可以获得一定的被动广告收入（当时博客还比较流行，就相当于现在的公众号吧）。</p>
<p>好了，接下来就是基金定投的部分了。</p>
<p>Winne两夫妇，真的是非常狠。什么四个账户，通通不要！</p>
<p>她把家庭中99%的钱都放在指数基金中。刚定投不久就遇到股灾，一晚上10万美元就不见了，吓得够呛。</p>
<p>不过再后来发现，股灾的时候往往是很好的投资机会。这个时候很多指数基金股息率是很高的。（美国情况）</p>
<p>我们知道投资股票，获取的收益是：分红+低买高卖。所以股票型基金也是一样的。</p>
<p>开始的时候分红金额很少，但是慢慢的，分红金额能抵得上很大比例的生活费，最后生活费全部由基金分红负担。财务自由也就实现了。</p>
<p>因为作者是在美国生活，所以主要投资的是美股指数基金。</p>
<p>而他们的计划就是坚持持有指数基金30年以上，因此只赚分后的钱，不赚低买高卖的差价。（其实也就是我们说的傻傻定投，无脑定投，并不是最佳投资方式）</p>
<p>但是即使这样，他们也真的用了10年的时间，实现了自己“提前退休、环游世界”的梦想</p>
<p>别忘了这个时候他们的基金仍然在继续运作。仍然在获取复利，复利的图还记得吗？是有时间魔力，越往后越高的。</p>
<p>所以他们在做旅游计划的时候也有安排：先去开销小的地区玩（中南美洲和东南亚），再去开销大的地区玩（欧洲）。</p>
<p>这一点大家也可以参考，不要一开始就恨不得各种高大上，要去欧洲、去美国，其实没必要。</p>
<p>他们还有更狠的一招——去旅游之前把家里的东西都卖了，换来的钱投资到指数基金里。反正出去玩的时候这些东西都闲着，不如投资到指数基金让它们复利滚动着。</p>
<p>同时他们也一直这样教育孩子，孩子也跟着一起投资，对孩子的财商培养也很到位。</p>
<p>作者给了10个提前退休的小秘诀和七步规划财务自由的方法：</p>
<ol>
<li>立刻开始存钱。哪怕是小钱。</li>
<li>设立一个大目标。有目标才有动力。</li>
<li>享受不用随着收入升级。</li>
<li>不关注涨跌、股评。</li>
<li>学着骑自行车或公共交通上下班。</li>
<li>在家做菜。</li>
<li>别把黄金岁月献给房贷。他们始终没有买房，都是租房。出去旅游就把房子给退了</li>
<li>建立共同兴趣的朋友圈。跟有同样价值观的人交往。</li>
<li>培养有益身心的兴趣。</li>
<li>心动就马上采取行动。</li>
</ol>
<p>然后呢，作者还给出了“七步规划财务自由”：<br>第一步：记账。<br>知道自己每一块钱花在哪里。音频课也反复强调了有没有？我自己也是受益者</p>
<p>第二步：推算财务自由需要多少钱。<br>作者用的是4%法则。比如说每年需要10万，那就是10/4%＝250万，需要250万的资金来实现财务自由。</p>
<p>我自己还没有算过，不确定是否适合中国国情。大家可以自己算一算，量化思维、目标导向嘛。</p>
<p>第三步：至少存下50%的收入（作者达到了70%-90%）<br>第四步：减少三大支出。也就是减少房租房贷、伙食费、交通费。<br>第五步：认清想要和需要。这也是我们在强调的。<br>第六步：长期稳健的投资。寻找稳健的投资方法，例如定投指数基金。<br>第七步：设法增加收入。</p>
<p>他们用极尽抠门、近乎自虐的攒钱方式，用了10年时间，从2003年到2013年实现了积累下650万元指数基金的目标，开始环游世界。</p>
<p>其实从2003年到2013年，美国股市整体收益非常一般般。而且中间还经历了2008年的大股灾，华尔街大批公司破产。</p>
<p>十年间，美国最重要的指数之一，标普500指数，从2003年的1000点左右，涨到2700点左右。涨幅并不怎么样。</p>
<p>美国标普500走势图<br>请大家注意看2008年那么剧烈的震荡，就算这样，作者也是利用定投实现了财富自由，这就是定投的好处。</p>
<p>美国标普500，牛长熊短，其实并不利于定投。</p>
<p>假设这个作者能懂得基金投资的策略，能做到低买、高卖、和不定期置换更利于定投的基金，用他们这种攒钱方式，可以积累下接近1000万元指数基金的目标。</p>
<p>作者这么自虐，我相信大部分人是没法完全学习的。但是想通过这个故事告诉大家：<br>一、创造财富没有捷径，开源节流始终是要点，越是在早期，越是要对自己狠一点。<br>二、基金定投是个很好的投资品，坚持投资会给你很大的回报。就怕有人看到跌了几天就受不了要割肉。<br>三、如果能懂得基金定投策略，明白如何挑选基金，明白怎么买、怎么卖、怎么换，定投的收益率将是非常可观的。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间07</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B407/</url>
    <content><![CDATA[<p>我有长发齐腰，给我一把剪刀</p>
<pre><code>前几天班班收到以前的一位学员的喜讯，有点感慨，想跟大家唠唠，大家就权当听故事吧~
这是一位前学员发来的截图，我给打上马赛克，给大家看看


说起来我从做助教到现在接触的学员至少有一千个，她是很特别的一个，让我一直都印象深刻。
她是2019年3月底参加的训练营，我第一次做助教的学员。讲真，人不是很聪明，学习悟性也一般，嗯...应该说很一般吧。她平时找我聊天，都是在吐槽。
说对自己工作不满意，收入也比较低，一个月2000不到，1500多点的样子，说自己因为收入低，在家里没什么地位，婆媳关系也不太好。她婆婆天天训斥她，口口声声说她只会花老公的钱，说她没用，这让她很压抑。她的情绪一直很负面，因此，我也没对她在学习上抱有什么期待。
最后临近毕业，她竟然跟我说要报名初级课继续学习，但是自己没钱需要想办法，让我无论如何找班班要留个名额给她。当时我也就随口答应了，只是没觉得她真会报名。因为我的印象中的她就是那种每天囿于家庭琐事，没有什么大格局的人，应该不会对学习有什么执着。
但是截止的最后一天她真的来找我了，一口气报了三门课。我就好奇的问她，哪来的钱？她说，长发给卖了，一剪刀剪到底！！！卖了700多块钱，又去借了一些。这真的震撼到我了！有这样决心的人不成功都难。
我有点替她心疼，她说“学姐，一点都不心疼，还觉得少了个累赘。以前洗头发吹头发要花一个多小时，太浪费时间了。现在正好可以用这个时间来学习。”
听她说这话我有点惭愧，觉得不该随随便便给人贴标签。
我当时决定要狠狠地鼓励她一番，其实想说很多，什么格局放大一点啊，不要像以前那样啊，要加油啊什么的。但是都没说出口，最后只说了一句“XX，以后一定要变得很牛逼啊！” 我想，这句话就包含了所有我想说的了，我一直记到现在。
之后也没有什么联系了，她忙着学习，我忙着带班。直到前几天，突然有个有点眼熟的头像标了个红圈圈，点开就是这么一张“红色”喜讯和一张开心的笑脸。
她跟我说起了最近的改变，这几个月以来自己边投资边养鹅，已经有了小两万的市值，搁以前，她是从来也不敢想的。而且她也把之前混吃等死千八百块一个月的工作给辞了，又找了份自己很喜欢的工作，虽然工资也就一个月三千五左右，但是已经是之前的二倍了。
特别搞笑的是，她说有一天她婆婆被卖保险的忽悠，等那人走了，她过去跟婆婆有理有据的分析计算了一番，把她婆婆震住了。然后还时不时的让她婆婆看自己的投资成绩，老太太现在已经很信任的把家里的财政大权交给她了。
简直是现实版的甄嬛逆袭呀，现在她在家里的地位大大提升，已经不能同日而语了。
长投带给她的不仅仅是课程知识，还有更大的视野。她说报名初级课以后，那个月穷得只能吃土，也许报名之后会穷一阵子，但不报名不去改变就要穷一辈子！我很震撼！现在想想，她的决心真的不是一般的大。
投资自己这件事情不能等，短短几个月过去，人就可以发生翻天覆地的变化。她下一步的目标已经是进军股票圈了，那里是抄作业的圣地。
而当初跟她同一期的学员很多毕业后就又回到了起点，甚至是那些本身比她优秀，学的比她好的同学。
那些说忙完这一阵子再来继续学习的，最后没有一个会继续的。在训练营的这段时间里，我接触的这1000多个小伙伴，每个人都告诉我，我很想变得有钱，我很想摆脱现在的困境。但是真正开始去做的，只有不到10%。很多事情是谁做谁牛逼，而不是谁牛逼谁做。
人有时候特别爱给自己找理由：什么忙啊！穷啊！作为一个特别爱钱的人，我特别不喜欢听到别人说自己穷，因为从贫穷这两个字来讲，贫，只是经济上的不富裕，而穷，是心灵上的枷锁。如果一个人给自己带上了穷的标签，就很难再去翻身，因为他骨子里就觉得自己可能永远都赚不到钱，永远都会这么穷。
很多小伙伴在加入训练营以后，激情满满，我要赚钱理财，我要实现财富自由，我要……结果呢，过了一周，两周，甚至很多人连音频课都没打开过。前几天我给一个小朋友的朋友圈留言，让他来学习，他回信息跟我说，班班，我觉得我不适合赚钱.....这句话让我感到蜜汁疑惑。不赚钱，难道要靠一口仙气生活吗？
只有大半的小伙伴能够继续坚持学习，能够坚持学到最后的，可能不过30%，能够继续在理财这条路走下去的，最后可能也不过20%。放弃的那批人理由也很多：
哎呀，害怕自己学不懂 
哎呀，最近事情很多，抽不出时间
哎呀，我想再等等看
哎呀，我最近没钱(其实转头就看到他朋友圈里去吃fo锅)
这些理由的来源并不是自己真的面临那么多实际问题，而很多人对于赚钱的渴望，对财富自由的渴望，远没有自己以为的那么强烈，更多时候，只是看着那些行动力强、又赚了钱的人，羡慕的说一句：他运气比我好。
一个人现在钱少、穷，都不可怕，可怕的是心穷，还不想办法，天天做白日梦，傻等。有的宝宝很困惑，说“班班我没钱怎么实现财务自由？”我想说，如果你不去努力工作、不提高自己价值、也不学习投资理财知识，只是空想要拥有自己的资产，那么就只能一直穷下去了。
不要对贫穷的忍耐程度那么高好吗？
还有一些学生宝宝，也喜欢张口就说“我是学生，我没钱，我忙。”在这里，班班想提个醒：其实一个人大学时候的思想和精神面貌，和走进社会之后是一脉相承的，如果你现在说因为是学生就理所应当的穷，那么步入社会后大概率也一样会穷。
之前在网上乱逛，看到一个故事。
有个人说他家境不好，但是又特别希望能够在大学里多学习多进步。但学习是需要钱的呀，于是他边学习边赚钱。参加各种培训学习花了3.5万，但自己打工赚了3万，等于没花钱白白成长。再回过头看他的同学们，吃吃喝喝的钱和时间都有，买衣服化妆的钱和时间都有，一说到花时间花钱学习就牙疼喊穷，说自己忙。
这个故事让我印象特别深刻，我想，这么勤奋上进、愿意自己想办法的年轻人应该会很受欢迎，那么他的毕业前景应该会比同龄人好很多！
说这么多是想表达什么意思呢？就是不要天天把“我穷，我没钱，我没财可理，我忙我没时间”挂在嘴上，要去想办法、要勤奋、要改变、要舍得投资自己，才能在将来收获更美好的自己！
不要再傻等，说“等我怎么样 我就怎么样”，事实上，“等”字一出，基本就等于再也不会去做了！“等”是世界上最容易欺骗人的一个字。
大家一定要记住：如果你说什么事，一提到“等”字，请立马警惕起来！因为你很可能马上就要自己欺骗自己啦！改变思维，马上行动，改变现状，这是我们的出路！各位，加油！
最后，以一个故事来结尾吧！
基督耶稣传授三个人理财赚钱的方法：他给第一个人五袋金子，给第二个人两袋金子，给第三个人一袋金子，然后给他们设定偿还的期限，看他们如何利用这些金子来赚取财富。
第一个人利用五袋金子做了投资，很快又净赚了五袋金子。
第二个人利用两袋金子做生意，也净赚两袋金子。
第三个人为了保证安全，把金子埋在了地下。
结果怎么样呢？大家猜猜
期限到了以后，三个人都来到耶稣面前汇报自己的结果。耶稣对前面两个人进行了奖赏，让他们尽情地享受天国的快乐。耶稣问第三个人，你为什么没有收获呢？   
第三个人说，我知道你到期后肯定还要收回金子，还要收我的利息，你是不劳而获，我才不给你效力呢。
耶稣说，你是个懒惰的人，是个不可救助的人。你既然知道我要收回金子，那我就收回吧！
结果是，第三个人沦为了穷困落魄的人。
有人不解地问耶稣，为什么你让有钱的人更富有？让没有钱的人更贫穷呢？耶稣回答说，上帝赐给每一个人的机会都是平等的。那个人的贫穷是他自找的。贫穷是一种罪恶，上帝不鼓励罪恶！
这是马太福音中的一个故事，马太效应就来源于此。机会都是均等的，贫穷是自己造成的，富有也是自己创造的，各位宝贝，加油吧！</code></pre>]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间08</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B408/</url>
    <content><![CDATA[<p>大韭菜小韭菜的故事</p>
<p>看到大家的输出，班班想到一个关于股票的小故事呦~讲给大家听[呲牙]</p>
<p>话说大韭菜呢，有5套房，不上班，靠收房租生活</p>
<p>小韭菜呢，有1套房，上班赚工资</p>
<p>小镰刀呢，没有房子，租房住，在菜场卖菜为生</p>
<p>3个人有不同的生活方式</p>
<p>突然有一天要收房产税了[发呆]</p>
<p>小镰刀说：太好了，我没房，收那帮炒房人的税，我全力支持！房价大跌了，我就可以买房了[得意]</p>
<p>大韭菜：哦，房产税多少？1%对吧，下个月房租涨5%！</p>
<p>房租上涨了，小镰刀很郁闷，想换个房子，发现大家房租都涨了，只好忍。。。</p>
<p>忍字头上一把刀，心想总有一天我要割你们[敲打]</p>
<p>不过我小镰刀也不能吃亏啊，明天菜价也涨5%，嗯，就这么干！哼哼哼～～～～</p>
<p>看看谁厉害[悠闲][悠闲]</p>
<p>大韭菜和小韭菜去买菜，发现菜价涨了，很郁闷，想换个菜场，发现菜价都涨了[难过]</p>
<p>只好少吃点儿了，刚好减肥（主要是不舍得💰）</p>
<p>于是乎，生活水平就这样下降了。但是，房价和租金都涨了。。。</p>
<p>这就是我们通货膨胀的一个缩影噢…是不是很形象了~生活中每时每刻都在发生着类似的事情[机智][机智]</p>
<p>为什么讲这个故事呢~今天有同学问了我一个问题，说股票收益不是只有分红跟高买低卖吗？跟通货膨胀有啥关系</p>
<p>你们觉得股票和通胀有关系吗?</p>
<p>还记得我们之前跟大家说要买股权类投资品对抗通胀吗？</p>
<p>嗯，通货膨胀主要是说物价上涨，钱越来越不值钱嘛，那首先说物价上涨的话，那么提供产品和服务的公司的收入就会变多了嘛，对吧？</p>
<p>还有另一方面就是钱越来越不值钱，那么大家倾向于就把现在的钱花掉，那些公司的销量就会上涨，让盈利其实相对来说也是会上涨[耶]</p>
<p>有资产的人呢，他可以把通货膨胀其实转移到消费者身上。比如刚刚楼上小韭菜的故事。</p>
<p>房东在房子投资上，成本涨了，他其实是可以涨房租的，对吧？</p>
<p>如果说只有消费没有投资的话，那就永远只能说替自己或者别人的通货膨胀买单了</p>
<p>突发奇想就跟大家说一下，生活当中发现的一些事情，跟投资上的关系[奸笑]</p>
<p>大家还记得之前西柚学姐讲的涪陵榨菜的故事吧？</p>
<p>每年涪陵榨菜的涨幅接近18%，[偷笑]是不是有点刺激[机智]一包涪陵榨菜连续10年上涨18%</p>
<p>话说咱们的工资每年涨18%吗？[奸笑]</p>
<p>是不是严重的被通胀打击了[捂脸]，我也是啊，物价才是真真反映通胀的呀，这都…………何止官方统计的5%呀[衰]</p>
<p>但是先不要紧张嘛，咱不是学了投资嘛，回来我就看了一下，它涨价这么好，是不是要研究一下呢？</p>
<p>看了一下这个公司上市了，然后涪陵榨菜的股价6.5年之内上涨了差不多10倍</p>
<p>年化收益率达到了40%以上😍😍</p>
<p>惊不惊喜？刺不刺激[奸笑]</p>
<p>如果谁在2012年就买了他们家的股票，持有到现在真的是赚大发了。</p>
<p>⚠郑重声明这些不构成推荐哈，我只是简单举例子哈，落实到投资还是得具体分析的，哪怕是好公司也得低价买入才赚钱</p>
<p>今年双十一破了2000亿，你们想想自己双十一双十二贡献了多少[奸笑]</p>
<p>优秀的公司双11成交会越多，而持股的投资者就越有利</p>
<p>为啥呢？这些优秀的公司都是财富的收割机，而你，如果持有他们的股票。也会跟着收益呀~~</p>
<p>大家要成为这样的投资者，还是当做被收割的韭菜呢[偷笑]</p>
<p>说起投资我们就绕不开股票，大部分人对股票都有误区，还没学就上手，听谁说好就去买，追涨杀跌，最后当了韭菜[机智]</p>
<p>而有的人觉得钱攥在手里才踏实，还记得通胀小怪兽不，啃你的鹅可是不会和你商量滴</p>
<p>还有人说那红红绿绿的柱子看着就眼睛疼，要知道，我们买股票就是买公司呀，可不看这些，知道股票是怎么赚钱的吗？</p>
<p>今天就分享到这里啦[呲牙]</p>
<p>所以你们一定要好好学习呀[拳头][拳头]</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间09</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B409/</url>
    <content><![CDATA[<p>负债更要理财-桥儿督导</p>
<p>各位小伙伴，大家好，先做个自我介绍，我叫桥儿，是本期的督导，坐标广西南宁，前一份工作做了5年的广告公司的客服，18年6月换行业，目前的工作是房地产公司品牌经理，我比大家早学习理财投资一年多，所以也是大家的师姐啦。<br>你们班班说咱班里有很多同学都是负债，月光，对于理财怎么起步，比较困惑<del>很不巧，师姐也是这样过来的</del>那今晚就给大家分享下我的经验吧。<br>其实我呢，从小生活在农村。爸妈呢，都是农民，文化水平不高，也没有正式工作，就是从三轮车到开小面包车拉客来养家糊口。上有 4 位老人，下有我姐弟三人， 2个人干活养活 7 口人。压力贼大。<br>4 位老人的赡养。我们三姐弟的教育费用，生活费用等等。家里长年都是入不敷出。我们家开个学，换个面包车，治病，建个新房子，买点家具，都是借借借。从小到大，爸妈为了钱的问题，这吵架就没停过。<br>从小导致了我对钱的极度渴望。渴望足够的财富，能带来家庭的和平。<br>所以我从小就盼望自己快点长大，以为自己有了能力，就能结束这一切。从小到大都瞎想自己学业有成，工作牛逼，升值加薪，遇到高富帅。<br>典型的，小说看多了。现实就是，学习成绩差，混了大专毕业，就出来上班了。<br>刚上班那会，就进入本地一家最好的地产广告公司上班。当时月薪很低，起步工资才 1300 元。<br>勤勤恳恳做了 2 年多，工资也才勉强从 1300 升到了 3000 元（小地方）。勉强还完自己上大学的助学贷款。15 年中离职来到了一家刚起步的小广告公司，15 年到18年，工资才从 4000 元涨到<br>6000 左右。<br>但其实省吃兼用其实还是够的。但是坏就坏在，穷怕了之后，财务观念很扭曲。<br>以前日子苦，很多东西被延迟满足了。一到自己做主财务，就是淘宝在手，天下我有。衣服打折，买一下吧，反正才50嘛，反正才30嘛。于是，最后的结果就是等搬家了一看，好多买来没穿过的。<br>苹果手机?别人都有，我想要呢，刷信用卡买！年假了，别人都去韩国呀，毛里求斯啊，去各地玩呀~朋友圈里看得各种心热。怎么办？ 15年，我想着好不容易的假期，狠了把心，继续刷信用卡，去丽江。<br>更别提为了让我妈感觉我出息啦，经常打肿脸充胖子，给家里也买买买点啥，给她钱呀。<br>这就是理财之前的我，苦日子虽然给了我吃苦耐劳的性格，但是并没有教会我财务管理。再加上缺失补偿心理，财务观念很有问题。一步步走向负债的深渊。<br>（蹲角落反省一下）<br>我天真了，总指望明天的自己为今天买单。殊不知，明天的自己，哪有一夜暴富的本事啊。工作4年，月薪6千，负债6万，每月不够还信用卡最低。<br>这就是17年的真实状态，当时多焦虑啊。身边人家买房买车结婚生子，我只有负债。<br>低学历，家境贫寒，个子不高，真的很自卑。就连遇到好一点的男孩子示好，都觉得自己配不上。<br>每次深夜加班，孑然一身回到家，面对满室清冷，都觉得自己活该。工作与感情，都看不到未来，年纪越大，生活留给自己选择越来越少。那时候很丧，甚至觉得，可能这辈子呢，就这样了。。。</p>
<p>在17年 8 月底某个深夜加班回来，睡前在关注的几百个公众号里，偶然点开了“剽悍一只猫”，刚好是猫叔在推荐“14 天小白理财训练营”。一看到“小白理财”这个字眼，想到自己的债务问题，就果断报名了~</p>
<p>于是我报上了32期的小白营。刚开班的第一周，就遇上了公司集体去泰国旅游，到处跑，也没得好好的学习，别人在做作业做笔记的时候，我都没做，就只有晚上回到酒店了，爬个楼。当时作业还是需要做成文档提交，又无法下载手机版文档。导致作业一作业二都没按时交，从泰国回来后马上狂补作业，差点被踢出班级群!<br>我工作忙，加班也多，入门营的内容我学得很浅，就记住了资产和负债还有家庭资产配置。<br>原来我穷我负债还真是，，，活该。。。十分的活该！<br>为什么这么说呢？手上的钱不多，还不知道珍惜，工作四年多也不会什么很有竞争力的技能，钱又都拿去买化妆品，买衣服，买返还险以为自己在强制存钱，买一些其实没那么重要的东西，买负债。</p>
<p>9块钱的小白营，对我来说，是买回来一个醒悟和人生重启的机会。<br>对，人生重启。对我来说真的觉得是一个人生重启的机会，一个新的圈子，一段新的生活。<br>17年9月小白营毕业后，10月8号上了基金训练营。12月学了股票课。从2017年9月理财到12月，其实我就每个月强制自己存500块钱在基金定投里，到17年12月也才2000元左右~ 理财刚开始改变更多的是状态，虽然没有多少钱，但是起码我养成了储蓄习惯~<br>其实开始我压根没钱投资股票，但是还是想先学。等机会。但是它的确让我！赚！到！了！钱！~<br>广告公司嘛，客户来来往往，我在17年4月份时候服务过一个餐饮客户，那时候关系也不错，后来结束服务后，她又找到我，说，我还是想找人帮我做这个店面的策划以及新店的筹备。但是不想和我们公司合作了，因为感觉性价比不高。<br>以往呢，我对广告可能还懂一些些，但是对钱对营销，就懵，不敢说自己接这个单。经过对股票的学习，分析过上市公司之后，再来看一家小店，那种自上而下的视角，才知道原来真的不难的（股票给我带来的是清晰的量化计算方式）。后来我和一个设计师合作，给了个方案过去，他负责设计我负责策划和营销这块。<br>1月份，赚到了我的第一个1W。我的第一笔股票投资，也是从这里开始。<br>课程里也有教白马股组合选股方式。然后我果断上车，拿着第一笔钱就去浪了<del>肯定有人会问，这样投资真的不会亏吗？我不知道你们理解的亏是不是跌哈。起初其实我也不自信，怀疑这个办法真的能赚钱吗？但是我还是义务反顾的上阵了，毕竟想着钱不多，拿着练经验吧。<br>开始时候1-3月，都是浮亏，浮盈，5%左右的幅度，到18年4月底</del>诶呀厉害了，就几个交易日蹭蹭蹭~15.35%</p>
<p>这是模拟盘，跟我实盘同步的，我卖了才想起来没截图实盘。我才终于相信，估值的魅力。我的白马股组合2018年1月12建仓，18年4月底到这个收益我就卖了。<br>然后通过合理的开源节流，我17年9月到18年底为止，一年零3个月的时间，攒下9万块钱（中间换了工作，待会说），投资在股票和基金里，也留了点应急金。信用卡负债从6万降到了4万。不过我已经不着急了，就慢慢还<del>（待会会讲我具体的负债缓解方法）<br>其实我这9万的存款，应该是算从18年1月才开始存起来的。在2017年的8-12月这段时间里，我所做的事情。都是在想着怎么喂饱我的脑袋。<br>18年12月，公司有员工购房的首付分期福利，我卖了基金和股票，分期首付了一套89㎡的三房。也拿了股票投资思维来分析和衡量了南宁的房价，我买的那个地段的房价，加上员工福利，确实还不错。两个逻辑，一是价值上涨，我如果有更好的投资标的，我就卖掉，二是，如果不涨。自住也是不错的。我算过，如果我卖的话</del>首付成本大概是21万，加上涨价部分，应该有6-8万的一个收益<del>算起来也大概有26万的资产</del><br>目前我决定就是留着自住。<br>有了理财知识以后，也更清晰了自己以后的路应该怎么走，做好计划之后，也没有那么焦虑了。<br>不管是工作也好，开源也好，投资也好，都是先喂饱了脑袋，然后它才会加速的为你赚到钱。<br>大家可能还没这感觉，你越往下走，目标就会越清晰，越是渴望知识。这世道，真的要足够的强大，才能好好的保护自己和家人。<br>当然。可能是作为圈子里第一个吃螃蟹的人吧<del>受到的冷眼较多。别人都觉得理财不可信不靠谱。我最好一个闺蜜，当时我学完基金定投课，就给她算钱，说孩子，我们一起开始存钱吧，我找到一个存钱的好方法啦</del>兴奋的拿我自己算的定投结果给她看。<br>结果，各种冷水泼来。如下图：</p>
<p>当时内心的是非常崩溃的，一盆冷水浇下来。透心凉，想解释嘛？说不清楚啊。<br>事实就是，她所谓说的4万在我理财后的。我的脑袋帮我在一年内，赚到了~<br>还有另外一个朋友，也是这个闺蜜的朋友，简直有毒！<br>听说我在学股票，就是一堆风凉话，”我以前也玩过的，现在市场不好做啦””现在股市就是吃散户的，你又没有什么人脉，没什么内部消息”“我之前有人带的，刚开始挺赚的，后来还不是亏完啦”“劝你别玩什么股票啦”<br>其实不能一味的听父母朋友的话，他们只会在自己的认知里给你建议<del>理财这个事情，本身他们就认知有限，他们也没理过</del>或者也不懂。那他们就会成为我们的天花板。<br>不服输的我想着，解释什么呢？心里暗戳戳的想，等我用结果证明吧！</p>
<p>说完那个让我差点想放弃自己的坑货闺蜜和闺蜜的友仔。再来说说那些在投资路上对我意义重大的朋友们吧<del>在长投里遇到的人很多，都是很棒的伙伴，说起来可能要三天三夜吧</del>挑一个我觉得对我警醒意义最大的来说。</p>
<p>一个快60岁的阿姨，嗯，还是称呼为姐吧，我们圈子里的人都叫她黄姐。<br>长投的圈子有，小白营，初级营，进阶群，各地分舵，长投圈，分析师群，班主任的小圈子，黄姐是我在我们长投南宁线下分舵活动时候认识的。<br>当时是赤血危机小哥哥（一个大三的股票分析师）心血来潮给我们开分享会。然后我就认识了黄姐，其实在我的认知里，像她这个年纪，投资点基金应该就可以了。我们当时是聊股票的。我很好奇，就过去和她聊天~<br>这才知道，黄姐学理财比我早半年，是第二批入门营的学员。她说她那会，其实连电脑都不会用，为了学理财，还是让她儿子教她用电脑。<br>我就很好奇，我说那你为什么还是想学呢？<br>黄姐说，不想落伍，财商是她缺了快60年的东西，既然有机会学，那就一定要学。她是快40岁高龄那会才生了一个儿子，她说想和儿子一起成长，她会了就能教儿子理财。学股票学分析，一个是要会投资，自己从经济上照顾好自己，尽量不拖累孩子。二是想当一个能帮孩子出谋划策的家长，以后一起分析股票也有得聊~<br>我真的很佩服。她现在的投资和经验比我丰富。她说她准备退休了，退休下来就专门来做班主任，教人理财。一个快60岁，从不会用电脑到股票投资收益15%+的阿姐。<br>这才是，活生生的，人生不设限呀~</p>
<p>最后重点说学投资对工作的影响吧<br>17年我妈肾结石，需要住院动手术，刷爆信用卡，在医院走廊偷偷哭，没钱给我妈治病这件事，让我认清了自己，广告公司这个一望到头的工作，18年2月底，辞掉了。<br>几个原因：<br>一、月薪6000，每天上班10小时+（广告狗加班是日常），时薪27块钱。<br>二、行业天花板，我总监也才拿八千多，那到她的程度，加班不比我少，划算吗？人脉没有资源没有。。。<br>三、18年开年那会，工资一点涨幅也没有，蔬菜水果都涨价了！（我自己悄悄算公司的收入和支出，总营业额增加了，但是支出更大了，那我涨薪估计也无望了）<br>那离职之后呢？<br>上了理财这条路，脑子里对钱的事情清晰多了，比较信任我的那个客户让我帮忙。只需要做1个项目每天也只要花2<del>3个小时而已就有在公司10个小时的收入了。<br>还有时间带训练营。每次带班也了一次些朋友，多一份人脉，多个圈子。当然顺带也多加一份小小的收入。就这样做了3个月的自由职业者</del><br>再然后。<br>就是前面说的，18年6月份开始上班的新工作，一个上市房企的南宁区域品牌经理。<br>这个工作机会是怎么来的呢？<br>因为前老板也比较认可我，他朋友我现在的领导刚好说招人，他就介绍了我。面试时候和领导聊天，简单聊了下对中国房企的认知还有对品牌的见解<br>。这些认知和见解，大部分来源于我平常对股票的分析，年初刚好分析了上市房企的一个行业现状，还有几家较大型房企的股票。也算是冥冥之中的一种缘分吧，我分析的时候也只是想买点股票。<br>有句话叫做“把自己打磨成一个容器，机会来临才能接得住“我真的相信~<br>我最大的感受说，学习下股票，就算不是说要马上去投资，从分析公司的角度去分析自己的职业有没有发展也还是很有利的。找到更好的公司工资才高啊，好职业决定一个人的命运~<br>其实这份工作压力不小，为什么我选择，还是因为圈子。上市房企的员工积极性非常高，而且大家都很优秀，很能帮助自己的成长。当然，这份工作薪资也翻了差不多一倍。工作的第五年，终于可以是一个论年薪的人。</p>
<p>划重点！！！现在我们做的是为3年5年后的日子铺路。<br>我之前给自己铺的路，现在慢慢发生了效果，现在呢，冷静思考，这个工作或者现在做的决定，对3年5年后的自己有什么样的影响。我能给别人带去什么价值？我又能从这个公司里得到什么？想明白了，就知道路怎么选了。<br>如果当初我的想法是，我没钱，我负债，我怕我学不会，等我忙完先再学，或者对课程有怀疑（当然我不是没怀疑过，但是我都负债这么严重了，就只能勇敢尝试下）。。。如果不尝试，我应该还是会像13-17年一样，加班加班加班无尽加班~<br>当初我真的特别的忙，学习课程的时候都总是加班，我的小组长，一直没放弃我，催呀催呀，总算没掉队。我经常是晚上12点之后开始学习。很感激这个圈子，总有一些人愿意带着我前行。这一路走来，收获了分析能力，收获了行动力，收获了很多正能量，收获了一大票志同道合的朋友。<br>讲到忙，真的，现在这个时代，大多数人都是活得特别忙，如我以前一样。越是忙，越要想，为什么我这么忙？我的忙是否有意义？怎么做才能不忙啊？越忙越警惕~我也是因为忙才更加想要理财，去走出另外一条路。<br>把现在的收获，都归结在学了这几门课程。实在话，那不可能，很多也有前些年我踏实工作的积累。但是理财算是我的成长加速器，触发器，也让我换了个人生跑道。这个加速器，让我用不到一年时间，实现了月薪6000到本职收入月收入一万多。<br>（真正的理财真的不是说马上让你一夜暴富，那是骗子的手段，理财更多时候让你换个视角看事情，换个方式来生活，发现生活里的赚钱机会）</p>
<p>这是5月工资收入+5月收到的4月帮别人做品牌策划案兼职收入</p>
<p>我的股票基金之前都卖了拿去买房了，只有我和弟弟共同的给爸妈定投的养老基金<del>可以给大家看看，这个是我弟弟上上个月给我的截图了</del></p>
<p>我爸妈51岁了<del>他们也干不了几年活了，我和弟弟三个人每人一个月500，存了6到7个月吧</del>对我们现在也以后压力都不大。不然以后我们有家庭了，一下子掏几万几十万来给爸妈过日子，或者治病，我们真的可能就很难<br>等我爸妈60岁，我预计会有40万左右，怎么也能养老吧<del>它还会持续产生利息呢</del><br>我的本金不大，收益不多，但是起码赚了一年多的投资经验，我觉得经验还蛮值钱的~<br>其实大家看看~投资或许很多人都会，但是怎么通过分配自己的钱，哪一笔是为什么而准备，这个智慧，还是学会做好资产配置才行。</p>
<p>这里我想说的是：你的天花板在哪里，就在你心里。</p>
<p>说下具体【针对月光、资金不清的、负债的】解决方式吧~<br>1、月光的，资金不清的，不用说啦。做下收支规划就好了~比如我限制好自己每月的固定开支，放在微信零钱通里。看着余额决定我的支配。<br>2、对于负债金额比较大的小伙伴。首先要分，是有息负债还是无息负债(有息负债如，信用卡，小额贷款，无息就是借亲戚朋友那种)<br>如果是有息负债，比如信用卡，我的建议就是：一半储蓄，一半还债。<br>什么意思呢？就是小狗钱钱里说的，减少每个月的还款额，延长借款期限。那么少还的那些钱用来做什么？做还债基金定投计划。<br>假设你的还债时间是4年以上的，通过这种方式，加上正确的投资策略的引导，只要达到年化10%的收益，你的还债年限会减少一年以上。<br>我给大家举例子量化计算一下吧：如果说你有10万的贷款，每个月要还2000。如果你把2000块钱全部用来还款，你需要4.2年还清。<br>年收益达到10%，一个月还1000，一个月定投1000，还款的期限是3.8年。<br>这个不清晰的你们可以用复利定投器算一下。<br><a href="http://www.cebbank.com/site/gryw/jsq/jjsyljsq/jjdtsyljsq/index.html#md_01" target="_blank" rel="noopener">http://www.cebbank.com/site/gryw/jsq/jjsyljsq/jjdtsyljsq/index.html#md_01</a></p>
<p>很多小伙伴都会跟我说，我想尽快还清贷款。其实做还债基金定投计划这个方式，才是最快的方式。从另一方面说，通货膨胀有利于借债的人，而不利于债主。<br>信用卡是比较高利率的借款，如果金额不是很大，建议先还。不过如果是金额太大，还是需要延长借款期限的。延长借款期限的方式，我个人总结出来的方法有以下几点：<br>1、把有息负债，转成无息或者更低利息的负债。比如，身边有一些有存款暂时不急用的亲戚朋友，可以真诚和和她们谈谈自己的处境。像他们借款，比如打好借条定好年限，像他们支付银行定存或余额宝的年化利率。<br>2、可以采取专业还款人代还款，每月支付利息。如果办法一不适用，可以考虑下这个，虽然我知道有些小伙伴会很纠结，说我要白白支付这些利息，不甘心。<br>但是，如果自己每个月都想着怎么还信用卡这个怪圈里。只会耗尽你所有精力，并且思维受限。不如缓一缓。给自己一个喘息的机会。更好的去投入工作，学习如何提升技能，开源，节流，提高收入，用每月的收入结余来进行投资。相信我一年执行下来，这些进步和实在的收入提升，远远会超过你支付的利息。要是不理解的可以参考我的情况呀~<br>3、如果你觉得专业还款人信不过或者找不到。自己拿一台刷卡机，自己每月过账。这个的思路是同上，但是必须自己要理清楚账目往来。这个方案是极为考验自己的自控力。<br>以上所有对负债的解决办法，都是办法。最最最重要的是，搞清楚自己负债的原因，以后从根源上避免。所以在还没产生负债的时候，就不要过度放纵自己的消费欲望哦。<br>其实我这个思路还是在分析招商地产时候领悟的~<br>为什么说是分析招商得到的思路呢？因为我对比了同行业他负债率很高，但是，无息负债率很高，意思是很多借的钱没利息<del>是良性负债<br>这个月我已经交完21万房子首付，下半年，我给自己定了今年的目标。通过储蓄+理财，达到10万投资本金。<br>一年多的理财，确实让我换了一种生活，换了圈子。当你身边都是一群积极向上的人呢，彼此的经验分享，知识互通，相互促进，这种财富是不可估量的。当然，也期待明年你们也来和班班和督导分享你们的生活变化</del></p>
<p>好了，桥儿督导的分享就到这里，你的的绾绾班班又回来啦</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间10</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B410/</url>
    <content><![CDATA[<p>初次见面，提前祝大家新年好。我是糖葫芦，2019年5月加入的小白营，灵伶班班的首届学生，也是各位的师兄。但我是个不合格的师兄。这话从何说起呢？</p>
<p>我是个八零后宝爸，在海南一家外企工作，月收入平均18000，之前有十几万的存款。老婆是全职宝妈，但我们没房贷车贷，所以日子过的也还不错。</p>
<p>刚开始来学习的时候，其实我并不是很相信那些课程，也不怎么相信班班和学姐的话。虽然我自己也知道，钱放在银行虽然会损失一些，但是我更怕因为不懂乱操作，而造成更大的损失。</p>
<p>好在灵伶班班并没有嫌弃我，她耐心地为我解答各种疑惑，国债逆回购这种实操我迷迷糊糊的，她也手把手教；不但如此，她对我生活中的问题，也给予了很多的建议和意见，使我不但对课程的理解更进一步，还收获了一个生活上的好朋友，好导师。</p>
<p>其实我一开始没报名，我老婆说让我在家自学，怕我花钱。我闷着头啃了好几天书，太难了，没人问没人讲，看不懂还是不敢投资。犹豫再三，还是报名了。</p>
<p>学完课程，开了证券账户，因为查阅投资方面的信息比较多，大数据给推荐的很多信息都是和炒股相关的，也没怎么在意。后来就总是接到一些电话说有老师可以带着我们一起买股票赚钱，1个月翻倍。</p>
<p>一开始我也拒绝的很果断，因为不管是小白营还是基金股票初级课的班班学姐都告诫过我们，荐股群都是套路，是骗人的。但多了几次，就觉得反正自己也学了基金股票了，也懂得分析了，才不会上这些当，就去看看他们到底都有些啥名堂（还是高估了自己的智商，觉得以自己的能力完全可以去做卧底，结果……）。</p>
<p>进了群，最开始就看见大家各种晒收益，今天几千，明天几万，看不少人都在晒，人多了，自己的也慢慢的动摇了，这么多人都能赚，我也想试试。</p>
<p>要不先投少一点？于是当群主公布了当天的股票代码，我就跟投了两万，第一次两天下来赚了一千多。</p>
<p>慢慢的，因为尝到了甜头，胆子也大了。就把自己手里的余钱都投了进去。又赚了不少。钱来的这么快，简直是捡钱！所以我把自己学完实操课筛选后购买的基金股票全卖了，第二天一进账就全投了进去。</p>
<p>之前只进来看看的想法早已经被抛到了九霄云外，现在只想着这样挣钱来的太快太爽了。虽然我经济还算宽裕，但谁会嫌钱多呢？投进去后又是一顿猛涨，看的自己心潮澎湃，直跟老婆炫耀，还鼓动老婆把自己手里的私房钱也拿来跟着投，反正放着也是被通胀啃，拿来赚钱，多爽。于是，我老婆也上船了，比我投的还起劲儿。</p>
<p>看着钱快速增长，心里那个高兴呀，就跟自己中了大奖一样，觉得投上一段时间，自己就能成百万富翁了，别提有多开心了。</p>
<p>意外总是来的猝不及防，那天群主推荐了新的代码，和老婆商量好，我们把手里有的钱全都投了进去（之前多少都有一定的保留），毕竟试了这么久，收益也确实都不错，相信不会有什么问题。</p>
<p>但偏偏就是那天，一下子赔了一半多。钱没了大半，心一下子慌了，看到群主自己也亏了，我就更慌了。群主说最近因为中美贸易战，所以股市变动太大，不太适合投资。如果想翻身的话，我们就要改投别的投资品，问大家想不想一起干。</p>
<p>一下子赔了那么多钱，心里乱糟糟的，看到有同样赔钱还想办法带大家翻身的群主，心里觉得特别亲切，也就继续加入了。</p>
<p>随后，他推荐了比特币给大家，这次我耍了点儿小聪明（也可以说是被吓到了），只投了1万进去，前面的日子都不错，收益都挺好的。观察了差不多一个月，都没什么问题，紧绷的神经也就慢慢松懈了下来。这次就不仅仅是我和老婆，还带着一个朋友也跟着玩了起来。</p>
<p>因为之前投股票掉坑，现在已经没什么钱了，但投资需要本金，而且本金越多，收益也就越多，所以我想尽办法的筹钱往里投，就是希望可以早日把自己亏的钱赚回来。</p>
<p>身边的朋友也都拖家带口的，借钱也借不了多少，亲戚那边一借就可能惊动父母，所以我去银行做了贷款。贷的钱也都投了进去，想着赚了就还，可能也就两三个月的事儿。</p>
<p>理想很丰满，现实很骨感，钱投进去了，但没多久就又再次遇到了暴跌，这次投进去的钱直接爆仓，一分不剩！</p>
<p>跟着我入坑的朋友也赔了个底掉，老婆的私房钱也赔的干干净净。这次亏损的人多，钱的数目也更大，大家都逼着群主帮忙追回来，群主却火速解散了群，还拉黑了好友…</p>
<p>朋友没说什么，只是默默的不联系了，连其他的一些平时朋友圈互相点赞的同学也不给我点赞了。老婆要求不管怎样，每个月该给的钱还照以前一样给，不能降低她和孩子的生活质量，甚至她还去韩国旅游了一趟…想起之前她不让我花钱学习，我却带着她亏掉更多，感觉我们都是彼此的猪队友！！一个目光短浅，舍不得花钱，另一个能力不足，缺自视过高。</p>
<p>每个月的各种债务，家庭花销，压的自己快喘不过气来。各种信用卡开会周转，无助的时候又打开华泰软件，看着自己以前卖掉的股票和基金，要是坚持到现在都已经收益颇丰。</p>
<p>现在每个月吭哧吭哧的上班，还需要父母补贴几千才能周转，父母眼里的失望溢于言表，扎的自己的心也鲜血淋漓。</p>
<p>我不知道该怎么办，打电话给灵伶班班求助。那天是1月10号，应该是你们刚进来学习的日子，我听见电话那边她的电脑叮叮咚咚响，我想应该是很忙。但仍然抽出时间和我聊了一个多小时。听完我这一整串猪操作，她先是劈头盖脸骂了我一顿，估计是被我气得不行。</p>
<p>想想也是，我这么不听话的学生，明明自己学过了，还要去跳坑，也难怪她生气。但生气归生气，她还是重新给我讲了负债也要理财的方法，也安慰我说还年轻，既然学习过了，知识还能再捡起来，还能重新用。</p>
<p>  就这样，在灵伶班班的建议和帮助之下，我又重新树立了信心，梳理了自己的钱财和自身技能，从0起步，开始做一些定投、股票和开源变现。</p>
<p>这十几天里，日子稍微有了一点点好转，父母看到我的改变也很欣慰，给了我一笔钱暂时拿去还债，以后一点一点还给他们。<br>这里，我想要给大家几点我亲身经历之后的小建议：</p>
<p>第1，开拓自己的眼界，提高自己的格局，多听听高质量圈子的建议，不要投机；</p>
<p>不要相信天上会掉馅饼，更不要相信掉下的馅饼会轻易让你捡到不经过努力的馅饼，里面都包含了石头；</p>
<p>一定要牢牢记住：你赚不到超出你能力的钱，你赚不到超出你能力的钱，你赚不到超出你能力的钱！！！</p>
<p>最后我想说的是，投资，是一辈子的事，坚持学习，稳扎稳打，步步为营，切记不要急功近利。只有这样，才是赚钱的不二法宝。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间11</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B411/</url>
    <content><![CDATA[<p>孩子拿到压岁钱就花完？聪明爸妈这样管孩子压岁钱<br>                                                                                    爬楼密码：新年压岁钱</p>
<p>逢年过节，亲戚们总是会给孩子很多压岁钱，怎么处理这笔突如其来的“巨款”确实是让很多爸妈感到头疼的一件事。</p>
<p>我问过很多有宝宝的朋友，她们会怎么处理孩子的压岁钱。</p>
<p>有的朋友说，“不管压岁钱金额多少，逢年过节的压岁钱只不过是父母亲戚们的礼尚往来。别的家长给了你，我们也给了别的孩子，所以这笔钱不算孩子的，要归公。”</p>
<p>有的朋友则说，“虽然钱还是孩子的，但金额比较大，还是我们帮他存起来比较好，这样他能养成好的储蓄习惯。”</p>
<p>而只有很少的朋友把钱交给孩子自己支配，他们的孩子对于金钱的支配能力也确实更强。<br> 01<br>第一：压岁钱究竟该怎么管？由谁管？</p>
<p>大多中国家庭对于压岁钱的处理方式是：“把你的压岁钱交给妈妈，我帮你存着，回头给你用。”这对孩子的影响分为两种：</p>
<p>第一种：只是把孩子的钱“骗”到手，其实从来没有孩子的单独账户。</p>
<p>家长通常不会认为自己拿走孩子的压岁钱是在“欺骗”孩子，最多只能称之为“哄骗”孩子！但“哄骗”也是骗。这种行为的负面影响不只是让孩子对父母失去信任。<br>美国加州大学圣地亚哥分校的心理学家Chelsea Hays曾用实验证明：经常被大人欺骗的孩子更倾向于歪曲事实。</p>
<p>更严重的是，有的父母拿走了孩子的压岁钱，没有存起来，而是用来再给亲戚的孩子发压岁钱，甚至花掉。</p>
<p>根据我国《民法通则》第十八条第一款表明，监护人应当履行监护职责，保护被监护人的人身、财产及其他合法权益，除为被监护人的利益外，不得处理被监护人的财产。</p>
<p>那这种用掉孩子压岁钱的做法就非常危险了。</p>
<p>第二种：真的把孩子的压岁钱存入了孩子的账户，一直到十八岁。</p>
<p>这看起来没什么错误，可压岁钱本来就是孩子的钱，是孩子收到的祝福，家长应该和孩子共同商量如何安排，或者引导孩子自己安排。</p>
<p>在弗洛伊德的理论里，弗洛伊德是将：金钱、自控能力以及独立能力联系在一起的。</p>
<p>你自认为是在孩子18岁给了他一笔财富，实际却是错过了培养孩子金钱处理能力和独立意识的绝佳时机。</p>
<p>那么，“压岁钱是你的，想怎么花就怎么花！”这样可以吗？</p>
<p>这也是非常不可取的做法！</p>
<p>压岁钱是孩子的，这是否意味着此后对孩子如何处理这笔钱不管不顾呢？</p>
<p>显然不是，无论在法律上或者道义上，父母都有义务去引导孩子如何科学支配这笔钱。<br>第二：压岁钱是财商启蒙的好时机</p>
<p>我们都希望孩子有良好的储蓄能力和消费习惯，可以做到不把压岁钱花完。</p>
<p>但是，帮孩子保管压岁钱只是我们在强制孩子储蓄，无法提升他们的财商，更难以让他们具备处置金钱的能力。</p>
<p>让孩子自己管理压岁钱是极好的提升孩子财商的机会。</p>
<p>因为，只有真的感受到这个钱是自己的，他们才会开始认真对待这笔钱。</p>
<p>想想我们自己小时候，在花父母的钱时从来不会心疼，但如果自己意外得到一些奖励的钱，就会看得特别宝贵。</p>
<p>所以，让孩子自己支配钱的过程，可以让他们面对很多真实的选择：<br>这个东西要不要买，买了的话，我的钱还剩多少？<br>如果这些钱存起来，会怎么样呢？</p>
<p>在孩子真实地面对这些问题，解决问题的过程中，家长对孩子进行财商教育，比讲再多道理都管用。</p>
<p>清崎先生曾在《富爸爸，穷爸爸》中说过，只要孩子一开始对钱感兴趣，就该教他们理财了。</p>
<p>所以，不用怕孩子乱花钱，试着把压岁钱交给孩子，让孩子开始面对真实的财富世界。<br> 03<br>第三：怎样管理压岁钱</p>
<p>那么，父母应该如何处理孩子的压岁钱，才能让孩子对金钱有正向的认知呢？</p>
<p>首先，把压岁钱的所有权还给孩子。</p>
<p>我认识一个宝妈，她在引导孩子支配压岁钱方面就做得十分到位。</p>
<p>比如，在孩子两岁的时候，她带着孩子去银行办了一张卡，并告诉孩子压岁钱存在里面。</p>
<p>在孩子大一些的时候，她会根据孩子本身的意愿去和孩子协调怎么处理这笔小财富。</p>
<p>比如她和孩子协商，除了学费是父母教育孩子必须支撑的义务，孩子的课外兴趣班、或者毕业旅游等，这些是属于孩子额外的精神需求，那么就要孩子自己买单。</p>
<p>而所有收入和支出，她也会监督孩子做好账本记录。</p>
<p>在这个过程中，孩子锻炼出了极强的规划能力，也更懂得遵守规则。</p>
<p>甚至在孩子上了高中之后，孩子自然而然已经树立了多种渠道的金钱观念，会主动提出拿一部分钱去做公益。</p>
<p>爱德华·罗伯特·布尔沃说：管理金钱，很大程度上就是管理自己。</p>
<p>如果一个孩子能从小在金钱方面得到父母的科学引导，他就能以更平和的心态去看待钱财，从而获得真正的自在；</p>
<p>更能明白钱只是一种工具，它既能满足人的某种需求，也能达成“给予”，帮助到他人。</p>
<p>更重要的是，孩子从中学会了自律和舍得，他成为了欲望的主人。<br> 04<br>第四：基于压岁钱这个话题，我们可以和孩子聊什么？</p>
<p>有些宝妈提出，我认可把压岁钱交给孩子管理，由孩子支配，但是这毕竟是一笔“巨款”，如果没有规划，孩子难免乱花。</p>
<p>压岁钱做为财商教育的好时机，除了可以放权给孩子，让孩子通过花钱、管钱,知道怎么合理规划自己的零花钱，还可以和孩子聊什么呢？</p>
<p>首先，从培养孩子的账户、储蓄和预算意识的角度，可以与孩子一起将压岁钱开设四个账户：</p>
<p>1、日常花销帐户<br>这个账户用于孩子的日常花钱，如购买生活中常用的必需品，如学习用品、生活用品等，这笔钱可以是孩子每周的零花钱，让孩子自己决定怎么花，通过花钱，学习区分必需品和想要的物品。</p>
<p>在花钱的过程中，可以让孩子思考：</p>
<p>1）这个东西是必需要买的吗？<br>2）买了这个东西，我还有多少钱？<br>3）是不是有其他可以替代的玩具，还是一定需要买一个新玩具？</p>
<p>2、“梦想”账户<br>除了日常花钱，孩子可能还会希望买一些想要的东西，比如新玩具。我们可以再设置一个“梦想”帐户。</p>
<p>规定好，这个帐户的钱可以用来买孩子想要的一些东西，可以分为近期的和远期的。起初时，可以设置得偏低一些，如孩子想要的小玩具等，让孩子体会付出努力后，为自己”梦想“买单。</p>
<p>3、投资账户<br>压岁钱做为孩子收到的第一笔人生巨款，除了教孩子怎么花钱，我们还可以适当引入”钱生钱“的概念，为孩子设立投资帐户。</p>
<p>投资帐户，顾名思义是帮孩子赚钱的帐户，起初可以由父母代为打理，购买理财产品，定期告知孩子投资账户的收益情况。需要和孩子明确的是，这个账户的钱是用来赚钱的，让钱越来越多，因此，这个账户的钱，最好不要轻易挪动。</p>
<p>4、储蓄账户<br>最后，还可以为孩子设立一个储蓄账户，和孩子约定好，这笔钱用于平时的不时之需，比如物价上涨了、意外损耗等。这笔钱可以存在银行里，方便存取，应对日常生活。</p>
<p>这个环节，我们可以带孩子一起去存钱，教他们认识银行，知道银行的作用。</p>
<p>我们可以告诉孩子这些知识：银行就是一个可以让大家存钱和取钱的地方。</p>
<p>把钱存进去呢，有 2 个好处：</p>
<p>第一，它像个大保险柜一样，很安全，不用担心钱放在家里被偷走。</p>
<p>你看妈妈出去买东西一般都很少拿钱，这就是因为银行会给妈妈一张银行卡作为证明，需要花钱的时候，妈妈拿卡或者拿绑定卡的手机一刷，钱就付掉了，不用去银行一张张取出钱来，也不用担心钱包丢掉了。</p>
<p>第二，我们把钱存到银行里后，银行会付给我们利息。压岁钱可以帮我们赚钱。</p>
<p>注意：开银行账户需要孩子户口簿或身份证，监护人身份证，监护人和孩子的关系证明（类似独生子女证一类）。</p>
<p>不同银行可能略有不同，可以提前拨打银行客服电话咨询。</p>
<p>带孩子一起去存钱，让孩子看到自己的钱，并把钱存进去。会让孩子对存钱这个动作更有感知，对压岁钱有多少更有印象，而不仅仅是一串数字。</p>
<p>另外，现在手机支付比较方便，孩子们接触到真正的钱的机会相对较少，我们就着管理压岁钱这样的机会，可以让孩子对钱的数量有宏观的理解。</p>
<p>通过对压岁钱四个账户的管理，可以培养孩子的财商和自我管理的能力。</p>
<p>四个账户的比例分配，建议根据每个孩子的实际情况以及红包的金额进行分配。然后结合日常支配需求，设立银行帐户进行管理。</p>
<p>最后，金钱本身是中立的，既然孩子收到了大笔压岁钱，作为家长，我们要做的就是引导孩子正确面对这笔大钱，合理使用这笔压岁钱。如果家长做得好，完全可以成为一次很好的儿童财商教育机会。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间12</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B412/</url>
    <content><![CDATA[<p>股票的正确学习和投资姿势<br>爬楼密码：20200127午<br>【午间茶馆】<br>跟着班班和学姐升级打怪多日，准备了量化思维、富人思维、复利的干粮，跨过了投资陷阱的坑，打败了通胀这个大魔王，学习了各类投资品，终于要开始我们的投资之路。今天为你揭晓股票的正确学习和投资的姿势，跟我来。</p>
<p>一、股票投资就像维修电器一样，需要讲究科学讲究方法<br>在座的亲朋好友，经过这几天的学习，大家都认识到了股票这两个词。据我所知，大家知道更多的是“炒股”两个字。我会通过今天中午的时间来解释，股票真不用来炒的，也不是用来蒸的，是用来投资的。<br>开始前，我先问大家一个生活中的事情：你们见过一种螺丝刀吗，就是只有一个把柄，然后有很多不同的钻头。</p>
<p>比如长这样的。<br>修自行车和修电脑时，会找对应的不同的旋头去维修。我想说，股票投资也是这个理。<br>通过之前的课程，你们知道了，投资股票前，需要先分析公司，然后做估值。最后拿这估值对比现在它的现价，如果现价远低于估值，那就买入，因为这时候相当于打折价。<br>那问题来了，分析要怎么分析，估值要怎么估值呢？<br>就像拿不同的旋头去维修不同的电器是一样的原理，我们要拿不同的指标去量化分析和量化估值。<br>不同的行业需要不同的指标，同行业不同的公司也需要不同的指标，同公司在不同的时间也需要不同的指标。<br>所以，股票投资，就像是一门维修电器的技能，拿不同的工具（指标）去维修（量化）不同的电器（公司）。<br>你们需要的是不断的获取新指标的方法。这不难，但是需要不断的学习，我们都知道任何一门技能都是学无止境的。<br>掌握越多的方法，自然风险就越低，收益越高，下面我拿其中一个指标，来举一个例子。</p>
<p>二、PE是个什么鬼<br>现在，班班要开始讲讲PE的那回事了。<br>这是用来估值的其中一个工具，利器哦：pe，市盈率的简称。<br>市盈率=市值/盈利（市值就是这家公司值多少钱，盈利就是这家公司一年能赚多少钱）<br>市值=股价*股数，也就是公司在市场上的报价，卖价。<br>盈利（净利润），就是公司一年的净利润。<br>pe的意思，就是，假如我把这家公司全部买回来，就靠它给我赚钱，几年以后能够回本。<br>换句话说，pe的作用之一，就是帮我们简单地评估公司是贵还是便宜。<br>这就是PE，可以明白不？<br>还记得我们课程讲的步骤不，先分析，后估值，再买卖投资。<br>先分析公司，如果是好公司的情况下，我们进行估值，如果高估了就不买，如果低估了就可以买入。所以估值是一个很重要的步骤，让所有的分析落地。<br>而PE就是最通常用的估值公式哦。当然，所有新手都会遇到的问题，就是不知从何下手，所以我截了个图来。</p>
<p>市盈率竟然是负的？为什么？知道为什么不？来，吱一声。知道为什么不？<br>还记得刚才讲的，什么是市盈率呢？在什么情况下，市盈率会是负数的？市盈率=市值/盈利。<br>也就是说，当一家公司是亏损的情况下，也就是这个公式的分母为负数了，那市盈率就会为负的。<br>所以，上图是一家亏损中的公司。再来看另一家公司</p>
<p>还记得刚才说的吗，市盈率，简单来说就是，多少年可以回本。</p>
<p>像这种需要171年才能回本的公司，你敢要吗？<br>这是买了一支股要传给几代人的节奏哇。所以这个PE（市盈率），你们知道怎么用了哦？<br>在大千股海三千多支股票里，你就用这个公式就可以剔除大部分烂股了。<br>股市里有一句话说：七亏二平一赚。因为大多股民选股都是道听途说的，那跟随机选一支股是没什么差别的。不但没什么差别，其实还更严重，大多数人在讨论的股说明已经涨得蛮高了，跌的可能性是很大的。<br>假如，A同学，现在从三千多个股票中随机购买一只股票，那他的盈亏概率是七亏二平一赚，而现在B同学，学会了PE，从三千多支股票中，剔除了一半的负数PE，以及超过30年回本的公司，那剩下多少公司呢，我们来看一下</p>
<p>看左下角</p>
<p>剔除了70%的不好的公司，那他的盈利的概率是不是就会高很多？<br>所以，之前我不断的重复一句话，风险跟投资什么无关，跟自己掌握的知识量有关，收益率也是。<br>就像上面举的维修电器的例子，你拥有越多的工具，你就能办越多的事。<br>我很喜欢把股票投资的知识说成筛选机制。<br>什么意思呢，就是，你每懂一个知识点，你盈利的概率就高一点，收益率就高一点，风险就低一点。<br>我们利用不同的指标，去分析，去对比同行等等，都是一种知识点，都是在做筛选，剔除不好的公司。<br>你们觉得难吗？<br>这种实用的技能，就像变魔术一样，不会轻易让大家知道的。知道了的人会觉得，怎么这么简单，不知道的人就是猜不透。一直墙外站着，就没办法真正了解一个领域。</p>
<p>就像PE只是众多指标中的一个，指标当然是不能完全看一个的啦，一个公司需要综合很多指标去衡量</p>
<p>所以难不难这个事，其实就像行内行外人一样的道理。你在这个行业里，会觉得不就这么回事嘛，但是在外行人看来就好像很难<br>没有真正难到学不会的知识，就是看自己想不想学进去，如果一直学不会，那可能是想得不够</p>
<p>有些小伙伴可能会问啦，这种数据是普通股民都能接触到的吗？<br>其实大多数股民是知道的，但是他们并不懂。而且也有许多专业的网站可以获取这些数据，关键就在于如何去运用、分析这些数据才能在几千家公司里找到最优质的那几个。<br>现实生活中，我们总是希望得到明确的建议，我要买哪个保险好，我要买哪个股票好。。<br>但是我们忽略了，世界唯一不变的就是变化，这个世界不存在永远的正确。建议，永远是别人的，而思维方式和自己的投资体系，才是一套符合自己的有利于自己的。</p>
<p>也可能还有宝贝会问，报名股票的课，会把所有的的指标都学会吗，能学到什么程度？<br>答：指标这个东西，只有更多没有最多，并且这也要看你学完怎么应用了，比如说同样是股票课一起学习的同学，平时我们讨论如何分析时，有些人就懒懒的，一直找借口这忙那忙，就是不愿意自己分析。等我们在讨论和分析时他就凑过来，断章取义，并且拿去投资了，最后的结果就是有的赚有的亏了，瞎折腾了大半年。<br>所以课程能学到什么程度，值不值这个事，我的看法是，课程只是一个学习资源，看你们的需要，问自己，你需要吗？你愿意花多少时间和金钱去学习？多问自己哦。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间13</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B413/</url>
    <content><![CDATA[<p>种一棵树，成就全新的自己<br>大家中午好，再正式自我介绍一下，我是西柚<del>你们的学姐，在校大学生一枚。一个喜欢美食，热爱旅游的00年小姐姐，坐标江苏。看到我的年龄大家不要惊讶哦</del>毕竟长投最小的学员才9岁，学姐已经嫌弃自己开始的太晚啦~</p>
<p>如果对我感到好奇，或者因为我年轻对我有质疑，欢迎来撩，我用专业技能捕获你的心~专业之余，也有一颗少女心哦，可盐可甜，来找我谈人生谈理想也是没错的！</p>
<p>好啦，话不多说，正式开始我的分享~</p>
<p>我出生于南京江宁的一个小农村，别看南京是省会，跟我这个偏远小农村没啥关系、、距离我家最近的公交车站还有四五公里的路程，每次去坐车都费老大劲儿。家庭经济条件不好，母亲在娃娃厂上班，父亲是木匠，给私人老板做工，没有保障。</p>
<p>我的父母都是小学毕业，没什么文化，就更别提从小培养我的财商教育了，小时候就很羡慕别的同学有零花钱，别的同学有不懂的问题可以问爸爸妈妈，别的同学可以去学习钢琴等特长，而我的家庭条件却不允许我这样。</p>
<p>2012年，一场飞来横祸让我的家庭近乎崩溃。父亲在晚归的路上遭遇了车祸，肇事者逃逸。那个时候穷，没有手机，幸得父亲在昏迷前借到了别人的手机才联系上家人并打了120，送到医院抢救，又连夜转到市里大医院，医生说再迟一点就保不住命了。</p>
<p>虽然保了命，但也废了一条腿，昂贵的治疗费用是我们承担不起的重荷，家里的一切人似乎都在一夜之间白了头。爷爷奶奶心疼担心之下双双病倒，母亲辞职照顾父亲、爷爷奶奶妈妈三个人，取出全部没到期的银行存款，借遍所有亲戚，凑了十几万去交手术费住院费。后来因为恢复不好，又进行了二次手术。</p>
<p>当时这件事情对我小升初是有一定影响的，平常就争气好强的我考上了市里一所比较好的私立中学，我一度担心家里人会因为学费昂贵而不让我去。<br>没想到我妈妈考虑到“在外面上学住校可以给她省不少心，也免了上下学路上来来回回的风险”竟然同意了。看来我妈真的被我爸的意外吓坏了，她担心我再出点什么事。</p>
<p>从那之后，父亲手术费、住院费和我每年雷打不动的昂贵学费，成为了我们家沉重的负担，走上了心酸的还债路。</p>
<p>到了城里上学之后，接触到了所谓“富人的孩子”，他们有穿不完的好看衣服和鞋子，而我只有每个月精打细算的几百块伙食费和一堆穿了很久的地摊货。<br>那个时候，我才真切的意识到人与人之间是有差距的，而且从出生那一刻就有。<br>我知道我不能怪罪我的父母，我也尽量让自己不卑不亢，但是没办法，人家那种与生俱来的优越感不是你想回避就能回避的了的，也许我可以表现得很自信，但是下意识的还是会有些自卑。</p>
<p>初中开家长会的时候，我妈因为担心扣工资和全勤奖而不去参加。好不容易放寒暑假了，别的孩子都欢呼雀跃，我的父母也因为要工作对我置之不理。<br>眼睁睁的看着身边的同学在家长的陪同下回家了，我还要装作若无其事的样子，自己整理床单被褥、衣服脸盆等，然后用我弱小的身体驮着它们一步步挪到公交车站，坐上好几个小时的公交车，再想办法应对从车站到家的那四五公里的路。心里止不住的委屈，抬头望望天，好像泪水就能不流出来……</p>
<p>那个时候，我十三岁，我学会了独自面对一切。</p>
<p>后来，我发奋学习，升入这所学校的高中部，还因为成绩比较好，只按公办学校收费，给父母省了一笔钱。但是高中内容变得深奥起来，跟那些从小身边就有很好的资源、经常上辅导班的孩子相比，我真的比不过他们，学得非常吃力。经过自己的努力，平时也能取得不错的成绩，偶尔也能冲个前十。但是当我表现好，有了自己的小突破时，我妈总跟我说“就你那个成绩，还能前十？肯定是人家没有发挥好，你踩狗屎运了”<br>……</p>
<p>当时我的内心就差不多是这个样子，一万只草泥马奔腾。从小到大，从来不会夸奖我，只会变着法儿的贬低我，是我太谦虚了，还是我不配？真的没有办法沟通，我开始变得叛逆，不愿意跟她交流。</p>
<p>高三的那一年，压力很大，我经常生病，我开始变得很消极。我知道我父母把他们所有的希望都寄托在我身上，我就是他们的未来，而我真的不堪重负。我消极到了很糟糕的地步，经常发表消极言论。</p>
<p>这是我当时发的微博，压力真的很大，一次考试失利就让我觉得很不堪，一次考好了也不能代表最终会考好。</p>
<p>没想到，经过那么多努力，我的高考竟然还是一塌糊涂，平时我成绩最差也在一本以上，结果最后只刚到二本分数线。也许因为从小身边教育资源的匮乏，也许因为见识浅薄，也许是因为自卑心态作祟，总之，一败涂地。我感觉我是一个罪人，没能够出。</p>
<p>那些天我真的不想见人，我的父母也觉得他们的希望破灭了，这是我人生的第一大低谷期。</p>
<p>现在我学习的是新能源专业，当时以为跟环境有关很有前景，没想到却是妥妥的理工科，每天各种数学物理，搞得我头大，什么都学，又什么都不够深入。且不说我对这个专业有没有兴趣，但我学的这些东西基本上跟社会是脱节的，我不知道这些理论有什么用，我更不知道我学习的这些东西跟赚钱有什么直接的关系，我非常迷茫。大一的第一学期，我执着于各种等级考试，拿到了不少证书，假装忙碌来逃避未知的未来。</p>
<p>那个时候我还一门心思想赚钱，摆脱自己的现状，但又不想影响正常上课，所以就做网络兼职，帮别人刷单，结果……结果可想而知，因为自己太急于求成了，选择了这种方式，被骗了五六千（有三千是我高中毕业的暑假自己兼职赚的，剩下的是生活费和花呗），而那时候，我才大一，我就背上了负债，我又没办法跟父母说。</p>
<p>这个事件太惨痛，我找不到相关图片和报案之后公安局的处理结果了，只能找到支付宝走账的一部分，图片上的最高点就是受骗的支出。</p>
<p>我向舍友借了300当伙食费，然后那个月疯狂出去兼职，但是兼职待遇很差，时薪才7块钱，为了钱我经常逃课，没日没夜的兼职，商场导购、饭店服务员我都干，打了不止一份工，好不容易凑齐了钱还款。</p>
<p>这差不多可以说是我的人生第二大低谷期了。一个女孩子独自面临这一切，没有人倾诉。</p>
<p>那以后，我开始动不动就陷入低潮，动不动就烦躁，看书看不进去，学习学不动，智商和能力完全发挥不了。开始疯狂逛公众号看鸡汤文，日复一日。看似积极向上，实则是一种堕落，一种逃避，自我感觉良好，实际生活没有任何改变，期末甚至迎来了人生第一次挂科。</p>
<p>几个月前，就在我刷公号文章的不经意间，像现在群里的各位小伙伴一样，我看到了长投小白营的课程，“长投学堂，你财富的起点”，只要9块钱。我当时就在想啊，我要变得有钱，我不想一直过得那么憋屈，我不要一直低人一等，我更不想我的下一代跟我一样！</p>
<p>我有点激动，我的不安分的小心脏开始扑通乱跳，我很害怕这又是一次骗局，对小白营持有非常大的怀疑，但我想抓住这一根救命稻草，不就9块嘛，我还是付得起的！</p>
<p>估计你们大多数人也是这么想的，所以才会聚在这里，哈哈~</p>
<p>报名之后，加了班班的微信，按照指引读了小狗钱钱，并且主动写了笔记交给班班，当时班班夸我的字好看，不知道为啥，好开心。</p>
<p>刚开始有点懵逼，后来发现每天都有晨读和晚分享，偶尔午间有加餐，还有亲切的班班和学姐答疑、催作业，感觉回到了小学时期一样，有班主任督促自己学习的感觉真好，大学都没人管。那个时候是6点30晨读，有时候懒，不想起床，但是之后还是会及时爬楼学习，及时输出感悟。</p>
<p>就从那天起，我明白了穷人和富人思维有什么不同，认知发生了颠覆性的转变。我发现，原来穷人思维已经根深蒂固的霸占了我的头脑，当然这很大一部分是受我的父母影响，只会存钱不会赚钱，还总跟我说，“以后就靠你了，你要混出点名堂出来”，突然想起了一个笑话，给大家看一下</p>
<p>虽然感觉有点不大妥当，但我觉得我的父母就是这第三种……</p>
<p>所以我要从现在开始改变，我不要当第三种笨鸟，我要让我的下一代得到良好的经济基础和家庭教育，我不能把自己经历过的一直延续下去！</p>
<p>我开始思考，我要多花点钱投资自己的大脑，多学点有用的东西。我删了长投以外的大部分公号，专心养我的小金鹅~</p>
<p>学习了保险之后，我意识到家里的保险配置很成问题，像我爸的那场意外原本就是一份保险可以解决的！但就是因为没有保险意识，在遇到困难时才会如此艰辛、束手无策！越穷，越是需要保险！</p>
<p>几天的小白营体验后，我开始爱上长投这个大家庭，积极向上，团结友爱，给我带来了太多的正能量。</p>
<p>虽然我作为学生没有什么钱，但班班经常说：没钱才要理财，钱是越理越多的，你不理财，财不理你。我觉得班班说的特别有道理，我的父母就是不会理财，只知道攒钱，只知道存银行，所以才会穷的那么稳定，因为根本没办法跑赢通货膨胀！</p>
<p>我发现穷人之所以穷的很稳定，是有原因的！因为根本没有理财的意识，根本不会去想如何赚钱，只会一遍又一遍的强调自己穷！就像我的爸妈，每学期都让我申请助学金，这让我很反感（也是我自卑的一部分原因），难道这些钱就真的赚不来吗？转变这种穷人思维真的特别重要！</p>
<p>我再一次动用花呗，报名了后面的实操课。</p>
<p>当时好不容易抢到了优惠名额，差一点就赶不上了，多亏了班班给我留了一个，而我也感觉自己做出了一个史无前例重大的决定，暗暗下定决心要学出一番成就！</p>
<p>小白营快结束的时候，我是唯一一个在班级群做分享的学员，感到非常的荣幸和开心。当时还非常的青涩，有些不好意思。</p>
<p>学习的这段时间让我感到异常充实，再也不抱着手机刷剧了~</p>
<p>实操课我首先学习了保险，想早点给家里配置好保险，转移风险，不想让爸爸的悲剧在生活中以另一种形式再次上演！保险课讲得很详细，学完就可以自己根据自己的情况选保险了，我学的很认真，恨不得每一个字都记下来。我发现越年轻买保险越便宜，而像我爸这种情况再想买保险就很难了，有非常多的条条框框，所以我决定先给妈妈配置保险。</p>
<p>我跟她打了好久的视频电话，帮她分析了自己的保险，又给她推荐了适合她的保险~干完这件事情我舒心多了，终于不是裸奔了，少了很多后顾之忧。</p>
<p>基金训练营我面试了班委，班班有什么好东西都想着我们，赚了不少鸡腿~</p>
<p>股票训练营，遇见了我非常喜欢的星空班班，一个非常温柔的男人，有问必答。</p>
<p>我每天认真听课，认真记笔记，一天不落，班班给我颁发了一个超级星空大奖，仅此一份，绝无其他！</p>
<p>课程学的差不多了，就要开始下水啦~但我没有本金。怎么办呢？开源呗！继续利用空闲时间兼职，现在可长心眼了，做的都是靠谱的兼职，再加上因为学习了开源课程，也给我提供了很多思路！除了短期兼职，也开始着手准备有长远发展的兼职工作。</p>
<p>可能有很多人觉得自己没有接触过基金股票这些东西，觉得很难，又或者有人觉得没有钱学了这个有啥用？但是我想说的是，在你没有尝试之前，请不要轻易给一件事情下定论！我作为一个学生，没有什么生活阅历，银行都没去过两次，只会用微信支付宝，其他啥也不懂，对于基金股票这种东西更应该是一窍不通的，但我在学习的时候却并没有觉得晦涩难懂！而且作为一个学生，真的是穷的叮当响，但学了富人思维的我，会为了达成一个目标去想办法，去开源，而不是一味的去否定自己，去怀疑自己，去抱怨人生不公平。</p>
<p>第一次实操的时候我还有些紧张，不太敢，也拿不准主意，就去问了相应的班班，他们都很耐心的给我解答。我知道我能在这条路上坚持下来，很大程度上是这个圈子给我带来的鼓励和陪伴，一个人可以走的更快，一群人可以走的更远。如果不是有人在旁边鼓励我、指导我，就算我学会了所有的估值方法，我也不敢轻易去买入！</p>
<p>大家看我的星空奖杯，可以看出来我学习完还没有多久，说白了就是比你们早一点而已，但我已经开开心心赚回了学费。</p>
<p>我的投资还没有长投的一些大神那么牛逼，本金也比较少，但是你们可以从收益率看出来，已经远远超过了余额宝和通货膨胀率，再想想看我的投资也就才开始了一两个月而已。</p>
<p>如果说，投资理财可以一步登天，一夜暴富，那是妥妥的骗人，钱都是需要慢慢积累的，让复利发挥作用，从几百块钱开始，从一个月开始，慢慢滚雪球，让钱生钱~</p>
<p>学习基金和股票带给我的除了收益，更多的是对公司和市场的分析能力，这对我将来的事业规划有了很大的帮助，让我更加清楚的知道自己将来要干什么，从此不再迷茫。</p>
<p>可能很多人会好奇我为什么要来做助教，我以前小白营的同学也问过我这样的问题。这是因为我特别喜欢我的小白营班班，听了她的建议，并且我想要去帮助更多的人正确认识理财！这是一份富有使命感的工作！</p>
<p>图片里面语音的转换内容是“你给我说说你当助教的经历呗，然后你是把所有课程，就是基础的课程全学完了之后去当助教的，然后为什么要选小白营的助教，为什么不进入股初（股票初级）或者基初（基金初级）的助教呢”</p>
<p>这个发语音的人我们都叫他“洒脱大哥”，因为他的微信昵称是“洒脱”，他现在基金进阶已经学完了，股票进阶快毕业了，班班已经把这个群转给他，他是我们的群主。这个群是我们的交流小天地，大家互相督促着一起进步，这可能也是圈子的力量，这样我们一群人会走得更远。</p>
<p>我感觉，是长投成就了全新的我。</p>
<p>现在的我，每天都很充实，情绪稳定，持续进步。对自己的人生有了明确的学业规划、职业规划，不会为了学历、为了逃避工作、为了随波逐流而刻意去读研。也不会一味地顺从父母的意愿，循规蹈矩，找一份他们认为的好工作，谈一个他们认为好的恋爱。</p>
<p>因为我清楚自己正在干什么，我知道自己的目标和彼岸在什么地方，我知道如何走的更远！</p>
<p>我很清楚地明白，今天，我种下了一颗树，他日，我的树会为我遮风避雨！</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间14</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B414/</url>
    <content><![CDATA[<p>拆读小狗钱钱</p>
<p>今天学姐收到了好多小狗钱钱的笔记，好开心呀</p>
<p>晚分享前，我给大家撸顺一下，这本书是关于什么的？为什么要让大家在上课前听这本书热身~</p>
<p>《小狗钱钱》是一本以12岁小女生为故事主角的理财入门书，在这本书为什么说它很好，柚子随便给大家聊两句<del>让心急打不开链接的同学也可以先听着“抵饱”</del></p>
<p>《小狗钱钱》的第一章：白色的拉布拉多犬<br>这一章写的内容表面看是简单介绍主人公的生活基本环境，还有一些经历，还有和小狗钱钱的神奇相遇。</p>
<p>钱钱表面上在说一条狗的神奇故事，但里面本质是要和你说一个更加深远的问题—-【家庭教育问题】</p>
<p>事实上，大家琢磨一下会发现，这本书贯穿始终都有说家庭教育问题，而家庭教育，决定了一个人根本上的思维状态，甚至是财富观。</p>
<p>文章主人公一开始没遇到钱钱之前只是被动接受家里教育，而且整体家庭生活氛围就是悲观 ~ 逃避困难~ 找借口，对于钱的问题上，这个家庭一直逃避，悲观。</p>
<p>大家可以思考一下自己的财务观，和对待钱的态度。是不是大多由我们父母那儿得来？父母从小交我们的大多是省钱，存钱，但是怎么对待钱，大多是没有的。</p>
<p>一个孩子在什么都不懂的情况下，一开始他只会记住周围人说的话，记住之后在长年累月的时间中慢慢思考，而有些是没思考然后直接被加入到潜意识中。</p>
<p>比如，父母一谈到钱就愁眉苦脸的，甚至出现家庭暴力，那么他们对钱一般不会有什么好印象</p>
<p>其次，还有一个关于心理学的观点，就是孩子在小时候就会开始模仿父母。最先开始模仿的是脾气，后面的岁月孩子模仿的是父母的行为。</p>
<p>可以说，父母的言行，日积月累，对孩子有巨大的影响</p>
<p>钱钱刚开始说话时就指出：“因为你的爸爸妈妈出现了很多财务问题，而且我还知道你也正要犯同样的错误，步他们的后尘。一个人能否安排好自己的花费，是在他人生的早期就决定了的。”</p>
<p>所以这一章给大家介绍的是一个家庭教育和家庭环境对一个孩子的影响。财商教育也是从小开始更好的。</p>
<p>我们的小学中学大学一系列教育中，缺失了一堂课，叫理财课。</p>
<p>接下来就由班班和学姐们带领大家补上这门课<del>让大家重新认识钱，认识理财，认识生活</del></p>
<p>点击链接<a href="https://jinshuju.net/f/I7ZUX9" target="_blank" rel="noopener">https://jinshuju.net/f/I7ZUX9</a> 进去学习吧，可以看文字，也可以听书，记得写笔记噢，笔记不限形式，发送给我可以解锁第二本~</p>
<p>至于刚才有同学私聊我说，这本书挺幼稚的，我个人觉得确实，大白话，看起来没什么技术含量，但是更适合更多的理财小白来读，来理解，东西不是难才有用，理论看起来高大上，没有具体的接地气实操，一样不会。大道至简~</p>
<p>之后的课程，我也会尽量有“人话”给大家讲理财的知识。我们不是大学的干巴巴课堂，要的是寓教于乐，让你们持续学习下去，发现理财知识的有趣。</p>
<p>好了，对小狗钱钱的简单介绍就到这里，咱们期待一下班班晚上的分享吧~</p>
<p>以上，over~</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间15</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B415/</url>
    <content><![CDATA[<p>穿衣购物养娃-投资经<br>从大家提交的入营链接里绾绾看到，大部分小伙伴是理财小白，而群数据表示60%的宝贝是女孩子，女生占了大多数，班班这里要为各位小仙女理财意识的觉醒而鼓掌，希望各位小仙女都能够学会理财投资，成为白富美，教出白富美，实现财富自由~<br>当然为数不多的小鲜肉也一样哈，绾绾不会偏心哒~<br>我作为曾经的剁手党，现在的小富婆，永远的美少女，非常理解大家控制不住自己买买买的洪荒之力。<br>来了这里，绾绾就力争帮各位渡劫，因为大家都是要做女神/男神的人嘛，自然是少不了一番形象升级计划。衣服包包口红，每一样都不能少。<br>但是大家真的会买衣服吗？是不是很多时候都是买回来一堆并不必要的东西？<br>曾几何时，我也是这样的，逛一圈豆瓣，被种草一大片，然后愉快的去淘宝买买买，最后衣柜被塞的满满当当的，第二天早上依旧觉得自己今天不知道该穿什么，然后接着去买买买。<br>尤其是到各种购物节，什么618，双11，双12，提前几天就开始加购物车，前一天晚上一到凌晨零点，马上开始付款。每年双十一的几百亿销售额中都有我贡献的一份力量。小伙伴们有没有这种体验呢？<br>后来加入了长投之后，我才发现，原来我一直都陷入一个恶性循环之中，购买时只考虑感情因素，而没有进行量化思维。对，就是之前讲到的量化思维。<br>这是大部分美少女们和美妈们缺少的思维方式，然而这却是理财学习当中的一个难点及重点。<br>买衣服跟投资在不少地方还挺相似的呢。<br>在很多女生心里，投资跟天体物理，宇宙黑洞，薛定谔的猫，泡利不相容原理一样冷艳高贵，不可接近。<br>不过我猜没有一个女生不会买衣服，所以用买衣来解释投资道理，恐怕大家就觉得薛定谔的猫突然变成隔壁咖啡馆的短毛猫了，俏皮可爱萌意十足。<br>感觉理财学习也变得萌萌哒。尤其跟着这么一个萌萌哒班班学理财，更加萌萌哒~<br>下面小伙伴可以掏出小本本记笔记啦！<br>买衣投资经第一条：不要买你不想穿3年的衣服，投资也一样！<br>在最近整理衣橱的过程中，我深深地发现，原来我曾经买过那么多乱七八糟的衣服：含毛量低的要命的大衣，各种所谓的明星同款。<br>当时的我是怎么想的呢，我想的是“嗯，好像还不错，说不定偶尔可以穿穿”。结果买回来之后，经常就是一次也没有穿过。<br>痛定思痛之后，我给自己立下一个规定，买衣服的时候先问自己一个问题：“这件衣服会不会陪我3年甚至更久？” 然后再决定要不要买。<br>因为这个规定，我的衣柜里多了很多经典款的衣服，而不是流行款。对于我这种懒得搭配懒得逛街的人来说，这个问题可以把大部分冲动消费扼杀在摇篮里。<br>然后我开始学习一些搭配，又养成了一个习惯，买衣服之前在脑海里过一下这件衣服和自己已有衣服的可能搭配有几套，低于三种可能性我也是不会买的。<br>比如白衬衣，和黑色阔腿裤搭就有点时尚职场风；和包裙搭，就是女人职场风；和黑色烟管裤搭，就是中性风；搭蕾丝长裙就是复古风。像这样过一遍，就可以知道这件衣服我的利用率到底能有多高啦。<br>所以我逛街时，通常会有这样的自我对话：<br>“当季流行色？”没错是很好看，可是下一季它就不流行了，不符合陪我3年甚至更久的标准，PASS<br>“蕾丝花边？”没错很公主，可是很难搭配，而且一旧就特别难看，不符合陪我3年甚至更久的标准，PASS<br>在这样的选择标准之下，最后我买的都是简单大方并且有品质的经典款式。贵一点也没关系，因为我打算要穿很长的时间。而且贵的衣服质感，版型，各方面的确会更衬托人的气质，有木有！所以贵一点也是值得的~<br>偶尔再搭配一些当季流行元素，每天出门都感觉自己美美哒，自信满满哒。<br>其实投资也一样，面对一个投资标的，想着“好像周围人说还不错，说不定会涨上去哦。”然后买入的，通常都会让你后悔。<br>巴菲特曾经说过，“如果你不愿意持有一只股票十年，请不要考虑拥有它十分钟”。巴菲特大神的意思就是说，不要仅仅是因为“有可能涨上去”就冲动做决定，否则一定会后悔。<br>好像，听说，大概，可能这些词都是投资大忌！<br>另外再说一点，任何投资，无论是投资自己还是投资其他，都要学会将目光放长远。<br>200块的衣服看上去很便宜，但实际只能穿一季，1000块的衣服，乍一看很贵，但却可以穿好几年。<br>从量化的角度我们来算一下。<br>200元的衣服穿一季，每月的实际花费=200元/3=66.67元<br>1000元的衣服穿3年，每月的实际花费=2000元/18=55.56元。（百搭质量好的衣服一年穿两季没问题吧？）<br>通过数字对比，我们就知道，很明显买1000元的衣服更“便宜”。<br>而且，经典款的衣服，肯定不止穿3年！同时，衣橱里也不再是乱糟糟的。最重要的是，比较贵的衣服还更有质感，是不是一举N得，要不要给绾绾点赞呢？<br>这里就又强调量化思维啦，通过数字来比较，而不是通过感觉。<br>投资自己也是这个样子的，碎片化学习看似是免费的，但却会给你带来不系统、松鼠症、信息焦虑等一系列负面效应。<br>更重要的是，免费的碎片化学习因为免费而不承担责任，所以错误很多，很多时候会误导我们~<br>最常见的就是盗版书，对吧？所以很多学习的工具书非常贵，因为我们知道，这种东西宁愿多花钱也不能买有错误的盗版~<br>反之，几千元的培训班看起来好像很“贵”，但是经过系统化的学习之后，所带来的收益，及思维的改变，将使你受益终身。<br>以下是我的肺腑之言：请大家记住，免费的才是最贵的，因为免费的信息会消耗大量的时间，而时间却是最宝贵的。</p>
<p>买衣投资经第二条：挑你信任的店去买衣服，投资也一样。<br>很多选择困难症都有像我一样的痛苦，面对街上几十家店铺，某宝上几万家店铺，虽耗费了无数的时间和精力去选择，仍然不免有选错的时候。<br>我的解决办法也很简单，只挑我信任的店去买。<br>我有一家常去的小店，专卖日单的衣服，他家的衣服质地都非常好，纯棉纯麻的，穿着非常舒服，价格也很宜人，所以从第一次之后，我就成为了常客。<br>我当然知道这家店卖的肯定不是最好的衣服，也不是性价比最高的衣服，但是就冲着它为我节省了无数的时间和精力这一点上，我就觉得它确实是对我十分有利的。<br>在投资上也是一样的，那些靠提供优质的产品和服务来赚钱的好公司就像我信任的店一样。<br>股票的背后是公司，投资股票重要的是知道公司的价值几何。我们的投资目标就是那些能赚钱的好公司。<br>很多人都是在牛市末期的时候冲进股市的，为什么？因为他们看到别人在赚钱，就觉得自己再不进去就没机会了，于是纷纷冲进去当了接盘侠。<br>他们对于如何分析公司，如何对股票估值一窍不通，那不亏钱才怪呢。听消息跟风投资就和赌博没什么差别了~关于股票的知识开营后的第三节课会讲到。<br>所以，投资的第一步永远是先学习，不懂的不要碰。记住：投资的第一步永远是先学习，不懂的不要碰。投资的第一步永远是先学习，不懂的不要碰。<br>重要的事情说三遍。</p>
<p>买衣投资经第三条：趁着打折的时候买衣服，投资也一样。<br>每年的淘宝双十一交易额都在刷新纪录，去年，也就是2019年的交易额更是达到了2684亿，大家为什么对双十一如此疯狂呢？因为打折。<br>有句话戏说，不为打折疯狂的女性，简直不能称之为女性，尤其是当你明白其价值所在的品牌服装。虽然这是一句玩笑，但却是不少女性的真实写照~<br>我说的不是那些虽然写着7折，但把原价改成2倍价格的衣服，我是指那些高大上很少打折的品牌服装，每到库存或者换季打折，店内的状况真的只能用“惨烈”两个字来形容。<br>为什么要趁着打折买衣服，如果这件5000的衣服确实就是你要买的，那干嘛不以3000的打折价格买下来呢？省下2000，又是一条鹅腿！<br>投资也一样，难道说投资也可以买打折产品？！嘿嘿，你没看错，答案是当然能。<br>      大家应该都听过巴菲特，股神嘛，但是不知道大家知道不知道价值投资？<br>价值投资就是买入价格低于其内在价值的股票，实际上就是在股票打折的时候买入。<br>但是对于一个投资产品来说，还不像衣服一样有过季的问题，如果明白其内在价值的话，干嘛不趁着打折的时候买入呢？<br>但是买打折有个前提，你得知道商品的内在价值。<br>现在我们都知道了，很多双11的商品都是在之前提价然后再降价的，甚至比平时价格还要高。那么平时不太关注价格的小伙伴，也许稀里糊涂就买下了。这就是不了解内在价值，最终的结果呢？就是吃亏上当啦！<br>买衣服是过几天一看，啊呀，刚买就降价。<br>到了股市中就是，啊呀，刚买就套牢。<br>说完这三条买衣投资经，女生朋友是不是觉得立刻大大松了一口气啊？！原来投资并没有想象的那么神秘厉害，原来买投资产品跟买衣服也有很多相似之处。<br>当然，要再次提醒的是，不要冲动消费，买衣如此，投资也是如此啊！<br>我们再总结一下：其实投资没那么难的，就好像买衣服，只要花些时间和精力学习，人人都可以掌握哦。<br>今天我们讲到了投资必备的两个武器：1了解内在价值。2 培养量化思维。晕晕乎乎的小伙伴不用担心，后面我们还会反复学习哒！<br>好啦，购物的量化讲完啦，我们来讲讲培养孩子的财商问题。<br>还未成家的小伙伴可以提前学习一下，哈哈。<br>大家有没有这样的经历，孩子哭闹就要某样东西，不给就闹呀，实在是伤不起。<br>    所以绾绾要讲讲水湄姐是如何培养孩子财商、教育孩子的。</p>
<pre><code>水湄姐有3个孩子，一个儿子和一对双胞胎女儿。她一边带娃一边管理3家公司，非常牛，我辈楷模~</code></pre><p>水湄姐带娃去商场，有一家小店门口摆了一排小汽车和玩具，她看嘟嘟腿都挪不开的样子，提醒说，“今天可以买玩具，不过只能买一件，可以么？”<br>“可以。”嘟嘟爽快地答应了。然后嘟嘟绕着小店的玩具看了两圈，走过汽车的时候，目光恋恋不舍，还试探地问水湄姐说“不能买汽车，对么？”<br>“可以买汽车，也可以买其它的玩具，但只能选一件”。<br>然后嘟嘟看到了一件玩具，感觉就是廉价的塑料制品，不过小孩的心思是猜不透的~<br>“妈妈，我有一点点想买这个玩具”，最近嘟嘟在玩套路，喜欢用“一点点”这个词语掩饰他的真实意图。<br>比如说，“妈妈，我有一点点口渴了”（路过饮料自动贩卖机）<br>“妈妈，我肚子有一点点饿了”（路过香味四溢的面包店）<br>总之，一点点就是他试探的典型语句。<br>大家的孩子会不会这样呀？<br>“你已经买了一件玩具了，所以今天你不能再买玩具了”，狠心的水湄姐提醒嘟嘟。<br>“可是我很喜欢这个玩具啊！”嘟嘟看起来有点委屈了。<br>接下来水湄姐是怎么回答的呢？<br>她先问嘟嘟“你是不是有点后悔那么早买了玩具？”嘟嘟点点头。<br>“而且妈妈告诉你，你在楼下买的玩具，孩之宝也有，还便宜了10元呢”<br>“便宜10 元是什么意思？”嘟嘟问。<br>“意思就是本来午饭妈妈可以给你多点一个布丁的”嘟嘟沉默了一下，他很喜欢吃布丁。<br>“而且，孩之宝里面除了你买的那个绿色的，还有紫色和蓝色的对么？他们的价格是一样的”<br>“对啊，那个蓝色的比我买的那个还要大”嘟嘟有点不甘心。<br>“而且妈妈还看见有个很棒的消防车，如果你前面没有买爆裂飞车现在就可以买了，你是不是更喜欢消防车啊？”水湄姐继续打击他。<br>“但是因为你很早就买好了玩具，所以就没有办法选择其它的玩具了，如果你可以多一点点耐心，你就可以选一个你最喜欢的玩具了”。<br>对于孩子来说，这是一个宝贵的消费经验，大家可以试试。<br>慢慢的，他会懂得如何选择。<br>培养孩子财商要从小做起，一步步，学会合理消费，体谅父母的艰辛、金钱的来之不易，让他以后面对人生选择时会思考更多，更理智。<br>我们都知道言传身教很重要，所以我们自己先要有理财意识。孩子从小耳濡目染，长大后会更加明白如何发挥金钱的力量。<br>如果我们都不重视财商教育，孩子的财商教育是不是就等于无解了？<br>为啥呢？学校不教，老师不教，连课外辅导也没有财商教育哇~<br>所以财商教育，理财知识的学习，从我们做起，一起加油！<br>好啦，今天的分享就到这里啦<del>希望大家有所收获</del></p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间16</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B416/</url>
    <content><![CDATA[<p>荷花定律<br>今晚咱们讲复利，学姐给大家先带来一个小故事~</p>
<p>大家知道荷花多久可以开满池塘吗？</p>
<p>其实荷花第一天开放的只是一小部分，到了第二天，它们就会以前一天的两倍速度开放，到了第30天，就开满了整个池塘。</p>
<p>很多人认为，到第15天时，荷花会开放了一半。然而并非如此！到第29天时荷花仅仅开满了一半，直到最后一天才会开满另一半。</p>
<p>最后一天的开放数最多，等于前29天的总和。</p>
<p>但是也有更多的人，倒在了第29天，没有继续坚持。</p>
<p>透过“荷花定律”我们看到，任何事情，越到最后，事情越关键，越重要。也许只差一天，我们就会与成功失之交臂。</p>
<p>飞蛾破茧，小鸟出壳，都需要前期重要的积累，以及最后一天加速的破茧而出。</p>
<p>在处事上，我们何尝不如此？任何事情只要做到位，哪有做不好的呢？没有做不好的事情，只有做不到位的事情！</p>
<p>“行百里者半九十”，此话一点也不假，执行的关键往往是在最后的10%，最后的“十里”完成了，执行就成功了，反之则不成功，甚至前功尽弃。</p>
<p>而理财也是这样，从小钱开始，默默积聚自己的力量，在复利的威力下，总有一天会像第三十天的荷花一样，满湖绽放，胜景无限。</p>
<p>关于复利大家可以提前先看看这个小视频了解一下</p>
<p>（请看群内小视频）</p>
<p>小可爱们休息一下，准备八点班班的分享哦</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间17</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B417/</url>
    <content><![CDATA[<p>大家好，学姐来啦~班班下午留的思考题大家还记得吗？<br>在我们不具备投资经验时，如何避开投资陷阱？<br>回答这个问题之前，学姐先和大家科普一点投资理财的常识，很简单，但十分有用<br>如果能把这个常识牢记心间，不敢说能帮大家赚钱，但一定可以帮大家避免很多坑。<br>这个常识是什么呢？就是接下来要给大家分享的主题了<br>投资的不可能三角<br>什么意思呢？简单来说就是：<br>投资理财的目标当中，收益性、安全性与流动性三者往往不可兼得，最多只能占两个。<br>​​<br>那什么是收益性，安全性，流动性呢？<br>收益性，就是这个投资能带来多少回报，一年5%还是一年50%？<br>安全性，反过来说叫风险性，就是这个投资靠不靠谱，会不会亏损？老板会不会拿钱跑路？<br>流动性，指的是把投资品再变回现金的速度和能力。<br>这里有两个要素：一是时间，时间不能太久。二是价格，价格不能偏离市场价格太多。<br>我们来看投资的不可能三角。<br>1）满足收益性和安全性的资产，不能满足流动性。<br>比如说房子，房产在过去一直是中国老百姓最爱投资的资产，但房子的流动性天然就比较差，再加上现在大量城市推出的各种调控措施，包括最直接的限售，让投资房子的流动性几乎被完全打掉。<br>2）满足安全性和流动性的资产，不能满足收益性。<br>最简单的例子是活期存款，货币基金等。这些产品足够安全，也随时可以转化成现金，但是收益较低。<br>3）满足收益性和流动性的资产，不能满足安全性。<br>最典型的是部分P2P，在没爆雷之前，流动性和收益性都比较好，因此吸引了大量资金进入。然而，它并不能满足安全性，一旦出现危机，就是致命的风险。<br>因此，当你遇到一个投资品，宣传收益高，又安全，还能随时提现，这个时候就要多长一个心眼，十有八九是遇到投资骗局了。<br>如何判断一个投资品种是否靠谱呢，可以从分析资产的三性开始。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间18</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B418/</url>
    <content><![CDATA[<p>西柚的鸡腿小剧场又来喽~</p>
<p>自从我进入小白营之后，发现了一个很奇怪的现象，我分享给你们听一下哈</p>
<p>现在的人买个钢铁做的车，上保险，每跑几千公里还去保养，稍有磕碰损伤，心痛无比。<br>可对自已的身体这辆血肉做成的“车”，却从来没想过去维护，只知道踩足油门、风雨无阻的走在路上。</p>
<p>然而，每当朋友圈隔一阵就出现校友、同事的亲人、朋友的同学发起的各种疾病的筹款链接，我们脆弱的神经开始一次又一次的被敲打着，焦虑一阵后，忘记了这回事，继续开着“生命的敞篷小车”前行。</p>
<p>但事实是，无论自己愿意与否、高兴与否，“生病”这件事终究是回避不了的。</p>
<p>所以，别只想着给你的车上保险，做保养，自己的重疾险能买的趁早买，不要等患病了，才来后悔，因为我们的命比想象的更值钱。</p>
<p>买归买，当然也不能瞎买，还是要系统学习之后好好挑选，找到适合自己的，性价比高的产品</p>
<p>我给大家说一个典型的穷人思维：不投资也不想学投资，没有任何保险防护，一旦家庭出现问题，只能借钱，看看网上有多少众筹就知道了</p>
<p>不懂得转移风险，不懂得投资让钱生钱，只有工资收入这一条路，努力一生也无法实现财务自由，一旦家庭出现一点小的打击，整个家庭就垮了</p>
<p>因为我们国家对保险的从业人员要求比较低，所以这么多年大家对于保险是有误解的。保险是用来保障的。不是用来投资的。<br>这一层家庭防护是必须要有的，如果没有保险，那么就等于是在裸奔，你挣再多的钱也抵不过一场大病带来的家庭损失。</p>
<p>说到这里，大家有没有很震惊呢？</p>
<p>是什么导致买了保险保障却落实不到位？追根究底还是因为我们自己不懂啊！如果自己懂了，就不用怕营销人员的吹嘘了，我们可以自己判断。</p>
<p>好啦，话就说这么多，希望大家能有一个正确的思维对待保险。我们期待班班晚上8点的进一步分享吧~</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间19</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B419/</url>
    <content><![CDATA[<p>还记得下午留的题目吗？学姐来给大家解答啦~</p>
<p>你觉得以下哪种风险小?</p>
<p>A.稳定的工作</p>
<p>B.创业</p>
<p>C. 买股票</p>
<p>看了大家的回答很多同学选了工作</p>
<p>我们先来分析一下，如果你只有一份工作收入的话。</p>
<p>比如说你一个月有1万块钱收入。</p>
<p>你攒了好多年，可能买套房就没了，变成负债，但每个人的人生总会经历一些波折，比如生病，家人生病，或者其他状况，需要钱。</p>
<p>当你遇到事情的时候，那这些工资是远远不够的。比如说生病了，请三个月病假的话，那你就收入马上就没有了，对不对？</p>
<p>如果我们老了没有收入来源了，或者下岗了，公司倒闭了，连主动收入都没有了</p>
<p>也就是说如果你只能靠出卖自己体力、脑力和时间去工作赚钱，风险是非常高的。</p>
<p>有句话人不能一辈子赚钱，但需要一辈子花钱。</p>
<p>那创业的风险如何呢？</p>
<p>创业需要你投入成本，如果成功的话会给你带来源源不断的收入。所以人们都很向往去创业。</p>
<p>很多人喜欢去开个饭店，开个咖啡店，那这种生意怎么样呢？</p>
<p>细算一下，就算生意很好的饭店，他的收益也是很有限的，因为吃饭的时间点儿是有限的</p>
<p>餐厅容纳的人数是有限的，所以即便是所有桌子人都坐满了，多翻几次台，比如午饭时间翻台四次，很了不起吧</p>
<p>但是如果生意不好没有人来吃饭的话，房租，水电，员工薪水等等这些开支，每天都要支付这些成本。</p>
<p>付出的钱是一个无底洞，但是收入却是有限的</p>
<p>我知道同学们肯定会问了，好生意是什么样子的呢？</p>
<p>就是投入不是特别多，但是一旦成功获得的收益是没有上限的。</p>
<p>比如酿酒，那粮食和水是成本极其低的，但是酒，是比水贵很多的东西如果再加上品牌</p>
<p>麦当劳也是饭店，大家觉得麦当劳是好生意还是坏生意？</p>
<p>哈哈，其实麦当劳卖的不是汉堡，不是薯条，不是可乐，是把自己的店包装成了一个产品</p>
<p>一个店几百万的加盟费，给你的是厚厚一打纸，一套麦当劳的标准。</p>
<p>他就靠这个麦当劳品牌，就开始赚钱了，而且加盟店每卖出一个汉堡，麦当劳公司都赚钱。</p>
<p>全世界各地的加盟商是麦当劳源源不断的印钞机。</p>
<p>这个时候麦当劳就不仅仅是一个快餐店了</p>
<p>因为很多人对创业这个事情不去学习，不去思考，很多人拍着脑门儿就去创业了</p>
<p>那么他们选择的创业方式往往是那种投入很大，但是收入有限的创业。最后亏了好多钱</p>
<p>再问一个行业，大家觉得婚纱影楼是好生意吗？</p>
<p>现在生产酒的，卖瓜子的，卖鸭脖子的都上市了，但没有发现一家婚纱影楼上市</p>
<p>因为婚纱影楼是一锤子的买卖，因为每一个来这里拍婚纱照的人，大概率是唯一一次。几乎没有回头客，我们不能经常结婚对吧</p>
<p>如果是离婚再拍婚纱照，你可能不会选择这家影楼对不对，你不可能跟上次拍的同一个风格对不对？</p>
<p>但是你的获客成本很高，你打出去的广告，你的化妆师，你的那个摄影师。这些成本均摊到每一个客户身上，这些不断支出的成本都是不可避免的。</p>
<p>很多人的创业方向是有问题的，所以导致了创业风险很高，因为你不断的去在支出非常昂贵的成本，但收益却极其有限。</p>
<p>所以如果大家想创业的话，那么你一定要选择这种好生意，</p>
<p>付出的成本是有限的，也就是说亏钱最多就亏这么多，一旦成功收益是无限的。</p>
<p>前提是你有这方面的知识</p>
<p>而大部分人的创业的状态是什么呢？是拍个脑门儿，我觉得这个东西很好，就去做了，然后亏了底儿掉，然后回来，回头来又后悔。</p>
<p>咱们说第三个投资股票</p>
<p>投资股票，咱们的音频课程已经讲过了，股票投资其实是投资上市公司的股权。我们要选择投好公司的股权</p>
<p>首先你应该具备分析能力，分析出这个公司的生意，是好生意还是坏生意。</p>
<p>比如你持有腾讯的股票，你和马化腾的区别只在于马化腾的持有腾讯的股权多，你持有腾讯的股权少。大股东和小股东的区别</p>
<p>而且股市没有一夫一妻制，你是可以投资很多家好的上市公司的，可以成为很多优秀公司的股东，就分散了投资风险</p>
<p>这样的话，即使你不工作了，还能给你带来公司股权的收入，也就是说公司股票上涨的这部分空间，还有就是公司每年的分红。</p>
<p>也相当于你创办了一个非常成功的公司可以给你带来源源不断的被动收入。那其实整体分析下来，投资好公司的股权是风险最低。</p>
<p>但是任何赚钱能力的习得都不是轻而易举的，都需要系统的学习找到那些做好生意的公司</p>
<p>用低成本持有它的股权，对我们才能够实现躺赚有被动收益，有一批优秀的公司不断的去为你赚钱。</p>
<p>我姐家也算是创业的，但以前从来没有分析过，学完股票自己进行了分析，发现当初的选择并不是很好，只能算是一门糊口的生意</p>
<p>用《穷爸爸富爸爸》里的话说就是这只是一个职业，而不能是自己的资产，因为没人打理的时候就不能正常带来收入了</p>
<p>分析完了，大家早点吃饭，晚上8点来看看选股票和选对象之间的关系</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间20</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B420/</url>
    <content><![CDATA[<p>学姐今天来给大家讲个故事~~<br>故事的名字呀，叫：老和尚与股票<br>从前有一座庙，庙里有一个老和尚(学姐编的)，这个老和尚是个佛法高深的主持。</p>
<p>庙在山上，山下不远有一个证券公司，两边遥遥相对。</p>
<p>一天，庙里来了许多炒股的香客，在菩萨面前烧了许多香，苦苦哀求，要菩萨保佑他们脱离苦海。老和尚心善，问是怎么回事。</p>
<p>香客们说，股票大跌，我们深度套牢，赔进了许多钱，不知怎么才能脱离苦海。</p>
<p>老和尚心想股票真是个坏东西，害了这么多人，我佛慈悲，以救人为怀，快把那些人救出来吧。</p>
<p>于是他就倾庙中所有的香火钱，抱着我不入地狱谁入地狱的心态，出来解救众生，慷慨地接入了所有散户卖出的一切筹码，买进股票。</p>
<p>结果接入后，股市大涨了起来。</p>
<p>好多日子过去了，香客们又来庙中烧香，一个个都情绪激动，眼里放出狼一般的光亮，求股票快涨多涨，还有的人抱怨自己买不到股票。</p>
<p>老和尚不明白了，怎么股票又成了好东西了？既然善男信女都要股票，那普度众生，卖给他们吧。</p>
<p>于是来到股票市场，把所有股票都卖个精光，其后股市大跌.</p>
<p>几个来回，老和尚赚了很多钱，大家纷纷向老和尚讨教炒股秘诀。</p>
<p>老和尚说：“哪有什么秘诀，我只是无欲无求，抱着一颗善心而已！</p>
<p>说到底，人与人之间生理上的差异是很小的，智商上的差异也不会太大，但投资股票的结果却有天壤之别。</p>
<p>面对同样的股市，有的人赚得盆满钵盈，有的人的钱却越炒越少；这是为什么？</p>
<p>1，买股的细心，捂股的耐心，卖股的决心，良好的心态，缺一不可，哪一个环节出了问题，都会影响收益，真正聪明的投资者，以逸待劳；而貌似聪明的投资者，却劳而无功。</p>
<p>2，有人说，股市中的人90%以上是聪明的，但是聪明的投资者却不一定能赚到钱，倒是一些“傻子”大获其利，而所谓的“傻子”，其实是一些在估值基础上坚定持有，不频繁操作的人</p>
<p>财富就是这样一种怪东西，你费尽心机，甚至卑躬屈膝追逐，反而所获寥寥。淡然平和处之，反而滚滚而来。</p>
<p>3，别人恐惧时要贪婪，别人贪婪时要恐惧</p>
<p>这是股神巴菲特的名言</p>
<p>大概意思就是讲我们在投资过程中，要克服人性的弱点<br>比如股市进入牛市的时候，整体上涨，大家都在说赚钱，连卖菜大妈都侃侃而谈自己赚了多少，这是大家都在贪婪的时候。</p>
<p>而这时候，我们应该认识到，很多公司的股价已经被助推到一个很高的价位，往往已经远高于公司的内在价值，我们应该保持的是恐慌的心态，及时止盈，落袋为安。</p>
<p>反之熊市时也是这样</p>
<p>比如现在，其实就是一个相对不错的入场时机。</p>
<p>突然间，学姐挥动了一下仙女棒，把咱们班的小可爱们都变成了每天上班的白领~</p>
<p>开始有关白领的小故事</p>
<p>学姐今天去超市买零食了（吃货一枚）</p>
<p>在我结账的时候，我前面有好多人，但是我一看他们手里面拿的东西，呀，有戏啊</p>
<p>什么伊利的酸奶呀，蒙牛的牛奶呀，海天的酱油呀，我还看到一个阿姨买了一个美的电饭煲</p>
<p>这个时候我就想到了大家问我的一个问题最好的回答方法</p>
<p>好多同学都问我，如果大家都不买基金，不买股票，我们怎么割的韭菜？</p>
<p>还记得班班说过，每一只股票背后对应的都是一家公司，大家认同吧？</p>
<p>公司想要好，难道他们卖空气吗？肯定是产品质量过关呀，对吧</p>
<p>我们生活中的很多东西，其实它背后都对应着一个上市公司，只是你可能不知道而已</p>
<p>学姐就来帮你回忆一下</p>
<p>我们先把视角放回到我们自己的日常生活上，看看普通的我们的如何度过一天的</p>
<p>记住，我们现在是一名普通的白领~</p>
<p>铃铃铃。。。一阵刺耳的声音传来。</p>
<p>你按掉了苹果手机上6点的闹铃，极不情愿地起了床，走进卫生间用云南白药的牙膏开始刷牙~</p>
<p>接着，你走进厨房拿了两个双汇火腿肠，给自己做了一个煎饼果子，从海尔冰箱里拿出一瓶伊利酸奶，开始享受美味的早餐</p>
<p>在餐前你用微信发了一条朋友圈，炫耀自己厨艺大涨</p>
<p>吃完早餐，你下楼坐进你的上海大众的小汽车，开出万科小区，上班去了</p>
<p>走进办公室，打开惠普电脑开始工作，中午休息你和同事去星巴克喝了一杯咖啡。</p>
<p>今天家里要来客人，下班了，你去了家附近的沃尔玛超市买了六个核桃、茅台酒，结账的时候你刷了招商银行的信用卡</p>
<p>回到家，你开始用美的电饭锅煮了米饭，炒菜的时候你打开了老板牌抽油烟机，拍个黄瓜加了点海天酱油</p>
<p>和朋友吃完饭，你觉得有点累，由于天气太冷你打开了格力空调。躺在床上就这样满足的睡着了</p>
<p>一名普通白领的一天就这样结束啦，别光顾着听故事，我要考考你们啦</p>
<p>抢答~</p>
<p>请问刚刚出现了多少家上市公司</p>
<p>1分钟时间</p>
<p>不卖关子了，在刚刚白领的一天当中接触到的股票包括以下这些</p>
<p>【苹果】<br>【云南白药】<br>【双汇发展】<br>【海尔电器】<br>【伊利股份】<br>【腾讯控股】<br>【万科A】<br>【上汽集团】<br>【惠普】<br>【星巴克】<br>【沃尔玛】<br>【养元饮品】<br>【贵州茅台】<br>【招商银行】<br>【美的集团】<br>【老板电器】<br>【海天味业】<br>【格力空调】</p>
<p>答对了没？</p>
<p>这些都是我们身边比较常见也比较著名的上市公司啦</p>
<p>所以呢，我们以后也可以说自己每天与多家上市公司发生业务往来，也是没毛病滴</p>
<p>了解了出现在我们身边的股票之后。小伙伴们会发现，其实我们的生活是跟股票分不开的，我们是这些上市公司的消费者~</p>
<p>所以提问题的小伙伴们，是不是有答案了呢</p>
<p>所以我们要做股东，当看到别人去超市买东西的时候，你心里面就在想，多买吧，多买吧，多买一点，买完了之后我好分红</p>
<p>学姐自从学习了股票之后，每一次去逛街呀，或者是逛超市啊，都会想到的是，哎呀！这个东西卖的这么畅销，是不是上市了呢？公司哪一家啊？股票代码多少啊？</p>
<p>这就是生活，理财就是理生活</p>
<p>我最喜欢的一句话</p>
<p>好啦，大家吃饭去吧，学姐也要开始补充能量啦！</p>
<p>我的能量超乎你想象</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间21</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B421/</url>
    <content><![CDATA[<p>还记得昨天学姐去超市买零食的嘛，</p>
<p>然后逛超市的时候看到有人买榨菜，我又发现一个股票相关的事儿</p>
<p>那个榨菜嘛，我也是蛮喜欢吃的，涪陵榨菜，大家吃过吗</p>
<p>你们可能想说，咱们不是理财群吗？你给我说一包榨菜干嘛例</p>
<p>说回理财来，回！</p>
<p>主要是我记得大概十年前吧，买涪陵榨菜，大概也就是5毛钱左右一包，问那包榨菜主人，已经卖2块6一包了</p>
<p>其实我们说物价 还蛮能反应通胀水平的</p>
<p>先声明，这个收益率公式是课程里边会分享的，谁问我原理我跟谁急</p>
<p>带你们来算一算，涪陵榨菜10年间的增长率呀</p>
<p>用5.2开10次方，算出来后－1</p>
<p>我们看下，每年涪陵榨菜的涨幅接近18%</p>
<p>一包涪陵榨菜连续10年上涨18%</p>
<p>大家工资有连续上涨18%吗！！</p>
<p>是不是严重的被通胀打击了，我也是啊，物价才是真真反映通胀的呀，这都…………拿才止官方统计的5%呀</p>
<p>还好我学了投资呀，刚刚就想，它涨这么好，我得研究下它，一查，诶，上市了耶</p>
<p>然后我发现，涪陵榨菜的股价在6.5年内它涨了10倍！！</p>
<p>再带你们计算下她的年化增长，还是直接套公式，来来来</p>
<p>年化收益率达到了42.5%</p>
<p>哇咔咔，如果谁2012年买了他家股票，持有到现在真是赚大发了呀</p>
<p>这是长投一位班班持有的股票，但是现在已经马上翻倍啦</p>
<p>我说这个不是打击大家，是想告诉你们，我们身边处处有机会</p>
<p>这个也是去逛超市发现的</p>
<p>所以，咱们需要的是好好学习<br>而且真的蛮神奇的，我现在出去都会用不同角度去看公司和发展啦</p>
<p>虽然还达不到大神拿着分析报告去求职，但是视野确实开拓蛮多的</p>
<p>给大家说一个我们灵伶班班之前小白营的学员</p>
<p>—–以下用第一人称叙述—–</p>
<p>那时候她刚生完娃，还在做月子，一孕傻三年说的就是她，红涨绿跌都不知道。</p>
<p>那时候她问，她可以学会投资吗，我说当然可以，每个人都可以学会的</p>
<p>于是她在我的鼓励下，学完小白营又继续学习了四门打包实操课程<br>前两天给我晒收益，真心为她高兴</p>
<p>才投资几个月能有这样的收益真的超级棒了</p>
<p>我真心为她感到开心，她本来是家庭主妇，财政大权不归她管，学了投资后老公把财政大权交给她</p>
<p>而且夫妻之间也没那么多矛盾了，因为她现在忙着赚钱，哪还有空吵架呀</p>
<p>我想说，当你自己值钱了，能够为别人创造价值的时候，赚钱也就是自然而然的事情，要想赚钱可以先思考下自己是否能够持续值钱『保持学习，保持投资自己』</p>
<p>比起兼职收入，我觉得班班这种老师的自豪感，能实现人生价值，帮助别人更让我安心和踏实~</p>
<p>———–转述结束———-</p>
<p>学姐来这里也是为了改变，是因为知道自己想要成为什么样的人，所以拼了命的去靠拢，然后才有了一次次的转变进步。</p>
<p>走到人生的某一阶段，你想要成为什么样的人，就决定了你的行动，而行动又决定了结果。在人生这场长跑中，我希望我们未来都能成为自己的赢家</p>
<p>大家如果对这些小知识点感兴趣的话，我以后就多给大家分享一点<br>大家都快去吃饭吧，晚上8：00准时相见</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间22</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B422/</url>
    <content><![CDATA[<p>西柚学姐又来给大家讲故事啦~</p>
<p>曾看过这样一则报道</p>
<p>在名校，当保安，宿管，甚至是清洁工，都比同行业同岗位的其他人，更有前途</p>
<p>不知道你们见过这类新闻没有？</p>
<p>比如，在清华的食堂，曾经有一名厨师，张立勇，他每天的工作，就是捡煤球，蒸馒头</p>
<p>但看着年龄与他相仿的同学们，各个都是精英，他感到很自卑，于是从此以后决定奋发图强</p>
<p>他连高中都没毕业，但在满分670分的英语托福考试中获得630分，最后去干了与英语有关的工作</p>
<p>比如，北大曾有一名保安，张君成，当时有几个老外进校，他因为不会英语，受到嘲笑，最后他决定努力学习</p>
<p>并且在一位教授的帮助下，拿下北大法律成人高考的专科文凭，后来到一所民办中专担任常务副校长</p>
<p>据不完全统计，在这两所学校，通过读书，彻底改变命运的校区服务人员，有接近一百五十名左右</p>
<p>其实这跟名校的光环，声望，名气等，并没有太大的联系，而是取决于，名校所拥有的尖端人才，较高平台，精神底蕴等</p>
<p>当一个人在一个充满正能量的圈子里，就会耳濡目染，受到熏陶和感化，甚至可以激发斗志</p>
<p>有句话说，跟对人很重要；衡量是否需要换一个圈子，重新认识一批朋友的指标，是自己的成长速度</p>
<p>当你发现自己，一直在一个圈子里，没有进步，甚至倒退时，就要考虑一下，是否该换一个环境</p>
<p>因为跟你共事的人，他们的言行举止，谈吐思维，心态状态等，都会在潜移默化中，逐渐同化你</p>
<p>打工心态者的圈子，谈论的是闲事，赚的是工资，想的拿到手的钱怎么花掉</p>
<p>专心于生意者的圈子，谈论的是项目，赚的是利润，想的是下一年</p>
<p>立志做事业者的圈子，谈论的是机会，赚的是财富，想到的是未来和传承</p>
<p>智者的圈子，谈论是给予，交流是的奉献，尊道而行，一切将会自然富足</p>
<p>可以自己画一个以你为中心的人脉分析图，盘点一下自己这些年的社交时间都花在什么圈子与朋友身上了</p>
<p>再结合自己目前的现状，你就知道，是什么成就了今天的你</p>
<p>王小波也说：“假如你什么都不学习，就只能活在现时现世的一个小圈子，狭隘得很。”</p>
<p>普通人赚钱少的一个最大根源就是忽视关系的生产力，往往只是为了人情去社交，没有商业社交思维，缺乏互惠互利双赢思维和格局。大家可以思考一下是不是这样</p>
<p>来看一个小视频，关于圈子（看群消息记录）</p>
<p>猫叔有一句话我印象深刻：让自己变得更好，是解决一切问题的关键<br>成为圈内人，说起来难，却也不难，但需要有规划。</p>
<p>每个人都有自己的优势，这个优势就是我们与别人不同的地方，也叫差异。在工作中，学习中建立自己的个人品牌，打造差异化的竞争优势。从自己的特长出发，培养这种能力。当我们在一个群体中表现出无可替代的潜质时，资源就开始向我们倾斜</p>
<p>很多人都知道，中国有个顶级富豪商会：华夏同学会，这个圈子里面有马云、马化腾、李彦宏、刘永好、王健林等大佬。</p>
<p>三聚氰胺事件后，蒙牛董事长牛根生为了防止蒙牛被境外机构恶意收购，当晚向同学会发出资金倡议</p>
<p>柳传志、俞敏洪、江南春等老大立马送出3亿资金，熟悉境外股市的欧亚平立刻安排操盘手买进蒙牛股票，保证股价不被境外恶意买家操控</p>
<p>这就是优质圈子的威力，关键时刻，它是能保命的</p>
<p>如果没有足够的定力，没有明确的目标，就会深陷其中不自知，说的好听叫合群，说的难听叫自我放弃</p>
<p>除了工作场所，还有生活圈子，这些都影响着我们的观念、认知、行为……</p>
<p>乔布斯说他的成功，就离不开他的生长环境，从小就在硅谷长大，周围邻居都是硅谷元老，他们在事业上给了他很多帮助</p>
<p>高晓松从小就在清华大院长大，梁思成和林徽因就住在他家前面的院子，小时候他遇到什么问题，家里人就写一张字条，说你去问谁谁谁。这些谁谁谁，很多都是中国头把交椅。他随便踹开一家的门，进去聊会天就很长知识</p>
<p>说这些不是让我感叹自己没有生活在硅谷，也没有在清华大院，而是让我们思考，为人父母的我们，是否能给孩子一个更好的圈子</p>
<p>理财理生活，人脉就是钱脉，没有圈子意识的人，就忽视了你人生中的一大笔财富</p>
<p>在中国，普通人通过自己的努力还是有很多的机会可以达到新的人生高度，给自己给孩子们创造更好的未来，比起阶层固化更可怕的是思想固化</p>
<p>尤其是做为女性，你的思维和行为都深深的影响着你的孩子</p>
<p>昨天晚餐后我去附近的生鲜超市买水果，身边有一对母女的对话正巧被我听到，女儿说，妈妈你为什么这么慢的挑菜</p>
<p>那位妈妈说，不小心挑，把不好的挑回去，你伯母又该说我买的菜乱七八糟了</p>
<p>怨气十足的数落了一大堆，实在让人听不下去，这样的妈妈带出来的孩子也多少都会有这种思维模式</p>
<p>很多家长重视孩子教育，但并不真正用心的领会真正的好教育其实是从自身开始的</p>
<p>我曾听猫叔讲过他一个小粉丝的故事，一次他去北京出差，有个粉丝联系他说自己就在北京希望能帮上他的忙，在北京见面后，猫叔才发现是一个很年轻的小孩，但这个小孩的几句话就让猫叔刮目相看</p>
<p>这个小粉丝的父母在他上大学的时候就给他一大笔钱，多少我不记得了，好象是100万，让他请牛人吃饭，交朋友，近距离跟牛人学习</p>
<p>当时猫叔就特别地震憾，这就是家庭观念对孩子的影响力，这样的家庭是富裕的，不仅在物质上，还在于见识上</p>
<p>有钱人给孩子钱花的不少，但给孩子传承见识与格局的极少</p>
<p>愿我们每位同学都成为终身学习者，成长者，不断地影响着吸引着更多优秀的人来到身边</p>
<p>好啦，故事就讲这么多，希望大家能有所思所感~<br>晚上8点我们必见不散</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间24</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B424/</url>
    <content><![CDATA[<p>学姐发现咱们班有很多小阔爱的保险意识还不够强，也有很多小阔爱踩了保险的坑，所以学姐想再给你们说说保险的重要性！</p>
<p>前段时间，一篇名为《我的女儿，绝不嫁给一个没有保险的家庭》的文章被朋友圈刷屏。不知道大家看过没有</p>
<p>文章是这么说的，几位刚升级为爸爸的男人在医院里聊天，他们有的生的儿子，有的生的女儿，聊着聊着，就聊到了将来孩子婚娶婚嫁的事情上了</p>
<p>一位父亲说：我的女儿，未来绝不会让她嫁到一个没有保险的家庭。没有商业保险，充分证明这个家庭跟社会永远脱节，他们的孩子孝顺与否，都不可以</p>
<p>孝顺，证明这个孩子今后辛苦赚来的每一分钱，都会因为父母的生病，全部交给医院，（这和学姐想说的，不要前半生用命换钱，后半生用钱换命，道理一样）</p>
<p>不孝顺，那就更没有资格娶我的女儿</p>
<p>另一位父亲说：我的儿子，未来绝不会让他娶一个来自没有保险家庭的女儿</p>
<p>如果没有保险，我儿子辛苦赚来的钱，都会交给媳妇，去给她的父母看病，养老……</p>
<p>如果不给，心理上受谴责，他们夫妻也不会有和睦的好日子，不断争吵，不会幸福</p>
<p>要知道，无论你现在挣得钱再多，最后总是要交给医院很多，无论你现在多么不喜欢医院，临终的时候，你一定也是在医院~</p>
<p>就像没人愿意生病，医院照样人满为患</p>
<p>没人愿意出意外，交警队天天都会处理事故</p>
<p>因为，人活着就是风险，因为，没人躲的开“生老病死“</p>
<p>最后他们得到了共识：与其未来拖累儿子、媳妇、女儿、女婿，不如放下既有观念，认认真真的了解保险，拥有保险，让保险为以后的幸福买单！</p>
<p>一个家庭最好的家风是爱与责任，既然活着，就应担起生存的职责，不是因为执着，而是因为值得</p>
<p>不必太美，只要有人深爱；不必太富，只要过得幸福</p>
<p>不必太强，只要活的有尊严！</p>
<p>没有谁的一生，阳光朗月永相随；没有谁的一生，欢声笑语永相伴，无论是谁，都选择不了命运，总有一些困难，一些痛苦，需要我们去经受，去承担<br>从出生那天起，我们并不是为自己活着，从出生那天起，我们就承载着来到这个世界的责任，对父母的责任，对爱人的责任，对下一代的责任，因为这些责任，所以我们不是只为自己而活着</p>
<p>其实人活一辈子，就两句话： 年轻的时候，不拖累父母；年老的时候，不拖累子女</p>
<p>学姐说人话就是，为父母，为儿女负责，就是作为家庭支柱的你，重视保险，配置好保险</p>
<p>最后给大家带来一个视频（在群记录里面查看呦）</p>
<p>好啦，加餐加完了，学姐还想趁这个时间给大家分享一个好消息~</p>
<p>来自学姐第一次跟班的学员报喜</p>
<p>最近三个月的收益<br>买年货的钱 妥妥的准备好了</p>
<p>这位学员95年的，家里经济条件不差，父母比较宠溺他，他没来小白营学习之前，已经是一名炒股几年的股民，但是股票收益嘛…</p>
<p>亏了接近10万</p>
<p>现在本金只剩下不到3万在股票账户里</p>
<p>他就琢磨怎么把亏的 赚回来</p>
<p>后来就来到小白营上课</p>
<p>在上课期间发言不多，但是每次作业是按时高质量的完成</p>
<p>在后期的学习，跟着班班和学姐的节奏，学会了打新。这个收益主要来源是打新的收益</p>
<p>咱们后面也会教报名实操的小阔爱们提前学打新，抓住机会赚学费</p>
<p>这两天学姐听说学姐他在血洗进阶的和内容了</p>
<p>学姐没想到他的学习速度这么快</p>
<p>就问了他一些学习情况</p>
<p>原来他是基金初级和股票初级一起上的，然后现在又基金进阶和股票进阶一起上</p>
<p>学姐实在佩服他的双开模式，就问他为什么这么拼</p>
<p>他说因为尝到了甜头，觉得课程非常实用能赚钱，所以想一气呵成，形成健全的投资体系，把握住更多的投资机会，大大提高自己的被动收入率</p>
<p>现在他不单单在投资市场有稳健的收益，他的圈子也在扩大</p>
<p>我们现在经常交换一些信息，寻找投资市场上的机会</p>
<p>而且他股票账面的亏损也慢慢填回来</p>
<p>我现在已经感觉他把我远远拍在沙滩上了，比我厉害太多了</p>
<p>他现在经常跟学姐说的一句是幸好遇到小白营，不然会白白错过这个投资市场的红利期。</p>
<p>学姐听到他这句话真的替他开心，随喜他的学习收获和收益</p>
<p>所以~学姐也期待收到你们的收益报喜哦</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间23</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B423/</url>
    <content><![CDATA[<p>视频（在班级群查看呦）</p>
<p>你有了省钱的脑子，就无法培养一个赚钱的脑子了</p>
<p>这句话什么意思呢？</p>
<p>我举个例子哈</p>
<p>塞德希尔·穆来纳森曾研究过，并得出了一个模型。</p>
<p>首先，他先在一个印度的小城市发现，在非常繁荣的蔬菜市场里，那些做小生意的商贩们，商业模式却很简单。</p>
<p>一般情况下，他们每天早晨会购买价值1000卢比的货物，如果当天卖完，便能进账1100卢比，那么在这样的买卖中，小贩们便能获得100卢比的利润</p>
<p>但问题是，绝大多数的小贩都没有这笔原始资本金。</p>
<p>于是，为了得到进货的资本金，他们每天只能向其他人借钱。</p>
<p>假如这笔贷款每天的利息是5%，这意味着小贩们要将每日收入的50卢比，用来支付利息，实际的收入则是50卢比。</p>
<p>作为哈佛有名的经济学家，纳森教授了解了这些情况后，便教给了小贩们一个更好的办法</p>
<p>他告诉他们，只需从每天赚取的50卢比中抽出10%，即5卢比，攒起来，坚持200天后就能攒到1000卢比，他们便不用再去借那笔进货的钱了。</p>
<p>也就是说他们只需要在这200天内，每天增加一个行动，生意不仅照常进行，还能在之后获得1000卢比的资本金。</p>
<p>这看起来的确是非常好的办法，但结果却与纳森教授所预想的大相径庭。</p>
<p>因为在半年后，绝大部分的小贩仍然回到了原来借钱进货做买卖的状态，只有不到10%的人用了他的办法。</p>
<p>这也让纳森教授大为吃惊：当只需要增加一个简单的行为，就能够改变你现在的资金状况时，为什么90%的人选择了拒绝?</p>
<p>经过研究他发现，这90%的小贩们之所以没有那样做，是因为他们为了满足生活所需，每天不得不精打细算，根本没有时间和心力去思考明天，甚至200天后的事情</p>
<p>这会使得印度小贩们形成一个共同的思维特质。</p>
<p>长期的资源短缺，他们被培养出了一个短缺的头脑模式，而正是这种模式，导致了他们失去决策所需的心力。<br>对于这个“心力”，纳森教授将之称为“带宽</p>
<p>印度小贩们过于忙碌的生活状态，导致他们没有任何的带宽去思考投资和发展的适宜。</p>
<p>而愿意投资的那10%的人，也因此最终在这个蔬菜市场中脱颖而出，逆袭成功。</p>
<p>因此，纳森教授提出了一个结论——我们的一生资源稀缺并不可怕，可怕的是你有一个稀缺的心态</p>
<p>我想很多人都还或多或少的再思考着如何才能获得更好的生活，赚更多的钱</p>
<p>但是实际上如果思维方式出错了</p>
<p>梦想都只能是梦想了</p>
<p>普通的白领、公务员等等，大家每天虽忙碌于自己的工作，但也会日思夜想，希望摆脱现在的状况，进入到一个更好的阶层中。</p>
<p>但是我们同时也发现这个梦想是很难在一夜之间达成的</p>
<p>就像那些印度小贩们，他们非常渴望拥有1000卢比的本金，不需要每天去向别人借贷，但他们却很少想到要去解决这1000卢比的问题，更不用说去做出改变——就算只需每天投入那5个卢比。</p>
<p>所以不仅仅是要忙碌的走路，还需要时不时的看看天空<br>看看更长远的未来</p>
<p>想想什么才是那改变你未来命运的5个卢比。</p>
<p>你有在为了这5个卢比去展开行动吗？</p>
<p>多小伙伴现在都还陷入到我没钱怎么理财的误区里</p>
<p>这就是短视的行为</p>
<p>没钱不是更应该学会理财吗？</p>
<p>你没钱说明以前的生活方式不能给你带来美好未来</p>
<p>那不是想着改变，抱怨又没用了</p>
<p>有抱怨的功夫都可以听完两节课程，汰换掉旧的思维了，不是吗</p>
<p>没钱——所以要花时间赚钱——没时间学习——没提升还是没钱</p>
<p>这不就是个恶性循环的圈吗？</p>
<p>没钱你有想过是什么原因吗？你堵上那个源头了吗<br>你每个月少抽一支烟，少喝一杯奶茶</p>
<p>一个月怎么样都可以省下来100-200吧</p>
<p>100-200不足以严重的降低你的生活质量的对吧</p>
<p>每个月100，一年下来也有1200元，如果200，每年也有2400元</p>
<p>如果还有合理的投资知识的话，再加上一个保守的10%的年化收益，是不是又多了点呢？</p>
<p>当然10%通过基金定投是轻轻松松可以实现的</p>
<p>那如果你还能开源为自己找到几个不严重依靠出卖时间的管道收入</p>
<p>大家去考证学英语等等的不都是给自己镀金吗？</p>
<p>所以归根结底，理财投资的学习，赶早不赶晚</p>
<p>你推迟投资的每一天，复利的负向影响都在抢走你的财富</p>
<p>比穷更残忍的，是你越来越穷</p>
<p>现在的阶层固化越来越严重</p>
<p>你想三代人都在最底层被压榨吗？我们不是富二代，拆二代。就不能做个富一代吗？</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间03</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B403/</url>
    <content><![CDATA[<p>她从打游戏起步，如今开源月入5万</p>
<p>嘉琳是长投学堂的一位班班，从小就喜欢玩游戏。很多人都说玩物丧志，认为玩游戏没出息。</p>
<p>但是嘉琳就因为游戏玩得好，2008年成为了腾讯新游皇家记者团记者和腾讯QQ三国官方版主，开始用玩游戏来赚钱。</p>
<p>不玩网游或者年纪小的小伙伴可能不知道版主和皇家记者团记者是干什么的。</p>
<p>简单来说，皇家记者团就相当于某个游戏的特聘玩家，可以给游戏里的风云玩家做采访，可以播报比赛的赛况和结果，可以写在游戏中听见的看见的趣事，可以写别人还不知道的游戏经验，也可以写游戏为背景的小说……</p>
<p>只要是游戏中的点点滴滴，都可以成为笔下的素材，丰富游戏的内涵和周边文化。</p>
<p>写出的内容可以帮助新手更深入的了解游戏、打怪升级，也能帮助游戏公司生产很多游戏相关的资料。</p>
<p>​​<br>（qq三国官方资料站）</p>
<p>游戏版主就是游戏官方论坛的管理员，可以管理玩家发布的帖子，比如删帖，加精贴，对违规玩家封号，是管理和维护论坛正常秩序的人。</p>
<p>这两份工作的报酬，都是按稿件数量发放的，是嘉琳的第一份开源收入。</p>
<p>一开始，嘉琳也像其他人一样玩游戏，在网上找攻略，再自己跟着攻略里的指导玩。</p>
<p>后来，她发现，官网上的这些攻略很多署名都是皇家记者团，当时她还不知道这是什么，于是上网搜了一下，就看到了皇家记者团的招聘信息。</p>
<p>招聘信息里解释了皇家记者团就是特聘的游戏玩家，除了能先于其他玩家体验新出的游戏，还可以约稿发稿，并且会有报酬。</p>
<p>这时候，她就有了进入皇家记者团的念头。</p>
<p>有想法就要行动起来。</p>
<p>行动力超强的嘉琳仔细地研究了一遍皇家记者团招聘信息里的具体要求，又去看了很多之前记者写出的稿子，对稿件的质量和内容有了个大致的把握——这些稿子难度都不是很大，而且只要是和游戏有关的内容都可以写，素材很多，而且对写作的要求也不像真的记者那么专业，通顺、有趣就行。</p>
<p>了解了这个情况，嘉琳觉得自己很有优势，因为自己游戏玩得不错，特别擅长带领团队作战，战术上很有一套，而且自己有些文字功底，她觉得这两点是她的优势。于是，她尝试着写了三篇解读游戏战略的稿子，打磨了一两个星期，就准备好自己的资料去报名参加竞选了。</p>
<p>经过精心的准备和摸底，结果可想而知，嘉琳如愿成为了腾讯新游皇家记者团的一员，开启了自己的开源之旅。</p>
<p>在之后的2009年，嘉琳发现网络小说平台很火，很多人在上面追小说，被签约的作者可以赚到不少稿费，而且因为刚刚发展起来，当时小说的发表门槛还不算高，嘉琳觉得这也是个开源的机会。</p>
<p>想了想自己的经验，嘉琳一下子来了灵感，自己可以写游戏为背景的小说啊！</p>
<p>有现成的人物、故事脉络，还有现成的游戏玩家可以成为第一批粉丝，相比起从0开始，要简单得多，而且原来记者团里就有很多写游戏小说的人，自己为什么不可以试一试呢？</p>
<p>于是，嘉琳开始构思小说的框架，决定在起点中文网试试水。</p>
<p>想要成为签约作者并不简单，需要写满3万字，每天至少1500字，嘉琳每天下了班，就要加班加点写小说，而且还得在12点之前更新好。</p>
<p>这种每天更新的日子持续了一个多月，终于等来了网站发出的签约邀请，随后挣到了上万的稿费。</p>
<p>嘉琳充分利用了自己写作的爱好，将写作和游戏交叉结合，产生了不一样的化学反应，进而从这个游戏群体中脱颖而出。</p>
<p>到2012年的时候，嘉琳又签约了腾讯原创，赚了3万多稿费。</p>
<p>虽然玩游戏的人很多，但是能从游戏里找到赚钱方法的人却很少。</p>
<p>不过，大家看到的都是嘉琳通过游戏开源挣到好几万元的风光，却忽视了背后她做出的努力和行动。</p>
<p>有句话叫做，机会总是给有准备的人。</p>
<p>嘉琳能够抓住各种机会，她准备的是什么呢？</p>
<p>一是发现商机的思维和眼光，<br>二是快速学习和模仿的能力，<br>三是不懈的行动。</p>
<p>首先一个是思维和眼光。</p>
<p>当知道了自身的能力和优势在哪里之后，用不一样的视角看待周围的事物，会发现各种机会。</p>
<p>很多人知道写作可以赚钱，但是能想到“游戏+写作”结合的人却寥寥无几，大部分人可能根本不会把这两件事情结合起来。</p>
<p>而嘉琳，她却会在玩游戏刷论坛的时候有这个意识，就是别人写的这个东西我也可以写，而且我能通过游戏写作这个途径挣到钱。</p>
<p>这是由人的眼光决定的，眼光被局限住，就像青蛙坐井观天，四海之内有再多的赚钱渠道，这种人也看不到。</p>
<p>二是有快速学习和模仿的能力。</p>
<p>当需要用到某项技能，而自己又不太擅长的时候，最好的办法就是模仿厉害的人，站在巨人的肩膀上看世界。</p>
<p>比如，嘉琳在应聘皇家记者团之前，就有意识地去大量看和学习已经发表出来的稿件，揣摩要领，再模仿着自己来写。</p>
<p>因此，要尝试某一方面的开源时，不妨找几个做得好的先行者来学习和模仿，再加入自己的创新和特色。</p>
<p>第三是行动。</p>
<p>如果问写稿子能不能赚钱，大部分人都会说能，但是具体到行动上，真正去实践的人却很少。</p>
<p>大部分人可能第一反应就是，“不行不行，我又没写过，也没人教我，肯定做不来，人家那么厉害，自己肯定不行。”</p>
<p>嘉琳的优点就是，她想到了写稿子、写小说，就立马去行动、去尝试，不轻易停下自己的行动，这样才有成功的机会。</p>
<p>要知道，任何事，不去尝试，不去做，永远没结果。</p>
<p>嘉琳现在还一直保持着玩网络游戏的爱好，前不久，她突然想到了拍游戏视频的点子。于是就自学了一个多月，自己写剧本，自己拍，自己剪辑，自己配音，然后发布到视频网站上，受到了很多人的追捧。</p>
<p>有人看到她的作品后，把她的视频发给了这款游戏的官方视频宣传组。</p>
<p>视频宣传组的领导十分赞赏她的视频，决定破格邀请她进入视频组，做官方导演。当然，拍的官方宣传片也会按件给钱。</p>
<p>你看，会赚钱的人绝不止一条赚钱的途径，只要有了开源的思维，到处都埋藏着财富。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间02</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B402/</url>
    <content><![CDATA[<p>小伙伴们中午好呀，今天的午间茶馆又开张啦，今天班班带大家整理一下《月光负债如何理财》</p>
<p>这两天陆续有一些小伙伴，私聊跟我咨询解决负债的问题。<br>可能有些小伙伴，也有一样的疑问，我把思路再做了一次整理，在这里用【月光负债如何理财】这个话题简单的给大家讲一下。</p>
<p>从原因来看，80%的小伙伴都是因为无财务观念而消费不当造成的负债或者月光。还有一些是因为家里人发生疾病、自己创业失败、投资失败这些缘故造成的负债。</p>
<p>这些反应出来的，其实都是财务或者投资观念造成的后果。</p>
<p>很多人都在想着我要是能通过一个什么，马上解决这个情况就好了。我真的受够了这种糟糕的情况。有没有一夜暴富的办法呀?或者快一点的办法？</p>
<p>我这么来比喻吧。就像我们身体疾病，某天的爆发出来的症状其实都是长期累积的结果，当我们“疼痛难忍”，总是想有一剂良药马上见效。但是我相信大家都感冒发烧过，就一个小感冒，吃药后，看各个人的情况，完全恢复的时间都要5-20天。</p>
<p>所以~快速能解决负债的方式我没有，但是我们可以通过学习理财技能、节流、开源来慢慢解决月光负债问题</p>
<p>我们先来说一下对于负债金额比较大的小伙伴呢</p>
<p>首先要分，是有息负债还是无息负债(有息负债如，信用卡，小额贷款，无息就是借亲戚朋友那种)</p>
<p>如果是无息负债，而这笔资金对也不是很急用的，建议是可以商量好一个还债时间。然后通过定投还债，量化计算自己每个月定投多少，就可以在预计年限偿还欠款。</p>
<p>如果是有息负债，比如信用卡，我的建议就是：一半储蓄，一半还债。</p>
<p>什么意思呢？ 就是小狗钱钱里说的，减少每个月的还款额，延长借款期限。那么少还的那些钱用来做什么？可以做还债基金定投计划。</p>
<p>假设你的还债时间是4年以上的，通过这种方式，加上正确的投资策略的引导，只要达到年化10%的收益，你的还债年限会减少一年以上。</p>
<p>我给大家举例子量化计算一下吧：</p>
<p>如果说你有10万的贷款，每个月要还2000。如果你把2000块钱全部用来还款，你需要4.2年还清。</p>
<p>年收益达到10%，一个月还1000，一个月定投1000，还款的期限是3.7年。</p>
<p>这个不清晰的大家可以用复利定投器算一下。<br><a href="http://www.cebbank.com/site/gryw/jsq/jjsyljsq/jjdtsyljsq/index.html#md_01" target="_blank" rel="noopener">http://www.cebbank.com/site/gryw/jsq/jjsyljsq/jjdtsyljsq/index.html#md_01</a> </p>
<p>有的小伙伴都会跟我说，我想尽快还清贷款。</p>
<p>其实做还债基金定投计划这个方式，才是最快的方式。</p>
<p>信用卡是比较高利率的借款，如果金额不是很大，还是建议先还。</p>
<p>不过如果是金额太大，还是需要延长借款期限的。延长借款期限的方式，我个人总结出来的方法有以下几点：</p>
<p>1、把有息负债，转成无息或者更低利息的负债。比如，身边有一些有存款暂时不急用的亲戚朋友，可以真诚和和她们谈谈自己的处境。像他们借款，比如打好借条定好年限，向他们支付银行定存或余额宝的年化利率。</p>
<p>2.可以向银行申请分期还款，这样可以在不影响生活的情况下，降低我们的压力。分期的话会多付一些利息</p>
<p>虽然我知道有些小伙伴会很纠结，说我要白白支付这些利息，不甘心。</p>
<p>但是，如果自己每个月都陷入怎么还信用卡这个怪圈里。只会耗尽你所有精力，并且思维受限。不如缓一缓。</p>
<p>给自己一个喘息的机会。更好的去投入工作，学习如何提升技能，开源，节流，提高收入，用每月的收入结余来进行投资。相信我一年执行下来，这些进步和实在的收入提升，远远会超过你支付的利息。</p>
<p>以上是对负债的小伙伴的的解决办法，最最最重要的是，首先搞清楚自己负债的原因，以后从根源上避免。 所以在还没产生负债的时候，就不要过度放纵自己的消费欲望哦。<br>其实这个缓解负债的方法是我学习了股票之后，自己领悟的。当时是学到看公司的负债，用来判断一家公司的财务安全。</p>
<p>然后我研究到万科，就发现，万科的这个小机灵，在地产股里面是负债率最高的。然后我想，难道它这么不安全？风险极高？后来研究了下，才知道，负债也分有息负债和无息负债</p>
<p>万科就是无息负债高，有息负债其实比其他的同行还低 这鸡贼的公司~</p>
<p>所以对你们来说。负债也分，是什么原因导致的负债。如果是房贷这种刚性负债，其实也不是问题。</p>
<p>所以，看了《小狗钱钱》我想大家对于负债应该有了更深刻的认识，负债不可怕，可怕的是陷入了恶性循环，让自己一直负债，吉娜的父母把所有钱拿去还债了，结果每天的生活焦头烂额，差点把房子卖掉，当拿出一部分还债的钱用于其他事物时情况马上就好转了，在你身上也一样，如果你现在只想着赚一点就去还信用卡，那就会陷入这样一个恶性循环，如果可以少还一些，拿一部分出来，提高自己的专业技能，学习理财投资知识，增加自己的收益，短期看可能还债时间要增长，长远看却是对你一生都有益的。</p>
<p>如果大家有负债其实是更加要学习理财的，出现负债就是因为你没有合理支配资产，面对这种情况，开源就尤为重要了，开源有2个途径，一是提高主动收入，二是提高被动收入，课前阅读《小狗钱钱》里面有提到过最低还款额度这个概念，就是说我们不必一下子把全部的钱全部用于还款，只需把最低的还款额度还上即可，那么剩下的钱，我们该怎么先处理呢？</p>
<p>当然不能让它白白放着啊，我们可以通过定投来进行强制储蓄，不仅避免了你乱花钱的习惯，还能提高自己的收益，何乐而不为呢。</p>
<p>咱们班也有小伙伴在用基金定投强制储蓄，每个月五百块，现在也小有成效。所以说，基金定投是负债月光的小伙伴的一个好办法。</p>
<p>不过呢，班班这里温馨提示哈，基金也是分很多种的，不同的基金类型，风险和收益也是不一样的。所以小伙伴们一定要谨记，不懂不碰哦</p>
<p>大概总结一下哈：<br>【节流】：相信经过前面将近一周的学习，大家对这块应该有意识了。恭喜大家~当我们意识到我们“疾病”的来源后，调整以前的不良习惯，你就已经是断了“病灶”了<br>【开源】：开源的话，三个方向。一是本职如何升值加薪（看看自己在公司的竞争力如何提升）；二是有发展瓶颈的，尝试重新分析是否更换；三是，工作不合适更换或者也没有升值加薪的空间的。利用上班之外的时间，挖掘自己的其他优势能力。或许用自己某个现成的能力去兼职。<br>班班带大家看看咱们长投学堂的小伙伴们都是怎样开源的：有的换了工作，有的升职了，有的培养了写作技能，有人是在乡下的，卖起了特产，卖起烧卤肉。也有的，把家里的干货店、五金店做得红红火火，现金流增加。</p>
<p>其实还有很多，班班就不一一往出发了。<br>每个人的能力和身边拥有的资源是不同，如果一时半会找不到也不要心急，我也是慢慢摸索，在有了思维之后，慢慢花时间来寻找。但是这种思维你们先放在脑袋里。上面那些小伙伴也是在理财学习中找到了那些开源的方式。</p>
<p>3.【通过投资强制储蓄】<br>最重要的是~仅仅是开源根本不行的，挣多少都还债了，然后继续月光。最好是同步100元起，开始投资，用投资来帮助我们培养储蓄习惯。顺便不断锻炼我们的投资技能，累积越多有效投资经验为未来做准备。</p>
<p>系统的打理财务，学习系统的知识，很多知识都是相辅相成。<br>投资理财思维在债务，消费，挣钱赚钱上都是非常重要的。月光负债看消费，赚钱看理财。</p>
<p>昨日因今日果，今日因明日果<del>未来的1年，3年，5年，都是由我们的选择来决定。想要在秋天收获果实，就在春天先播种哟</del></p>
]]></content>
  </entry>
  <entry>
    <title>理财/午间茶馆/午间01</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E5%8D%88%E9%97%B4%E8%8C%B6%E9%A6%86/%E5%8D%88%E9%97%B401/</url>
    <content><![CDATA[<p>死胖子告诉我们的投资哲理<br>爬楼密码：20200115午</p>
<p>《一个普通人怎样早早赚到100万，每个人都可以》，这篇文章在我初学理财时深深地震撼到了我，所以想拆读给小伙伴听。<br>班班很喜欢这篇文章，因为，死胖子很普通，普通的家世，普通的学校，普通的工作，就像我们每一个人。<br>所以他的经历对于我们来说，借鉴和参考的价值会更大。<br>接下来，我们就一起来看看我们如何一步步走向百万富翁~<br>目标设定</p>
<p>他给自己定了一个目标，毕业10年内赚到100万。<br>训练营第一课作业就是让大家制定三个小目标，为什么要在第一课作业做这样的设置？<br>其实就跟死胖子当初的想法一样，迈出步子之前，需要知道自己要走向什么地方。我们同样也希望通过第一课作业让大家梳理，自己学习理财的目标究竟是什么，避免大家因盲目赶路而忘记初心！<br>死胖子这里就是个很好的例子，如果不是大学时代就设定了这样一个毕业后10年内赚够100万的目标，可能他就会像大多数人一样混下去，浑浑噩噩，没心没肺。<br>在财务自由的道路上也是如此，看似遥远，但如果你连将目标指向那里的勇气和决心都没有，那就更是无稽之谈。<br>看过小狗钱钱的一定知道，只有你想得到，才会拥有，但是没有一蹴而就的成功，只有一点一滴的靠近。<br>死胖子就是用一个又一个500块来逐步实现他的梦想的。<br>财富自由也是分阶段的，我们就是这么一个阶段一个阶段逐渐去实现的。所以，大家的第一阶段目标，就是打好思维基础，迈出投资第一步。我们训练营后期还会给大家讲开户，并且带领大家进行简单的实操，千万别错过~<br>2、储蓄</p>
<p>著名的哈佛教条有一条，先把每月收入的30%存起来，剩余的再消费。<br>储蓄并不是让大家成为葛朗台，而是要让我们减少一些不必要的开销。<br>也许你觉得100块没什么，但每个月100，一年就是1200,10年就是12000，再小的雪球，那也是雪球<del>也是可以滚的</del>！如果加上投资，钱其实会累积得更快！<br>每个月多花200和少花200，都是非常容易的事情，就像一个胖子和一个瘦子，可能也就是每天多吃了一口与少吃一口在日积月累下形成的差距。<br>两种思维：一种是先存钱，然后花剩下的。另一种是先花钱，然后把剩下的存起来。没做过的人看似没有区别，但真的那么做以后，区别真的很大。<br>第一种，能把钱存下来，第二种，经常会疑惑，我的钱都到哪里去了呢？<br>储蓄不仅仅只是表面的大钱小钱的问题，更深层次是人生的机会成本的问题。<br>什么叫机会成本呢？<br>机会成本是指为了得到某种东西而所要放弃另一些东西的最大价值，举个例子，比如你今天很想吃炸鸡+啤酒，但是又很想吃酸辣火锅，可是你的食量就这么大，吃了其中一个另一个就吃不下了。<br>如果你选择了吃麻辣火锅，那没有吃的炸鸡+啤酒就是你的机会成本，反之亦然。<br>人生中的机会成本那可就不是吃炸鸡还是吃酸辣火锅这么简单的了。想象一下，如果有一天你考虑去留学或者换工作，但是你身上却羁绊着各种消费贷款，你会有底气去做这些事吗？<br>在面临这些人生选择的时候你只能被动退缩，很可能你以前的一个冲动消费的就是你现在换工作的一个机会成本。<br>所以，那一点看似不多的储蓄带来的不只是表面的金钱数字，重要的是它还可能是一次摆脱现状的机会。<br>文章的最后死胖子和他的妻子双双辞职去追求他们的生活，他们积攒的机会成本发挥了价值。这些机会都是他慢慢堆砌出来的。<br>所以大家想想自己想要过哪种生活呢？全在于自己的每一次选择。机会只青睐有准备的人，这句话被说烂了，但却依旧是真理。<br>也许你觉得你现在没钱没办法投资，就不用学不用想，但与此同时你也只能在一次次的机遇面前，无奈地说，我不行，我不会，我还没准备好。<br>拖着拖着梦想没了，生活平淡了，也就甘于现状了，就真的成了路人甲，还是没钱的路人甲。<br>扯远了，我们回来哈。</p>
<p>3、对待消费的态度<br>作者举了买车的例子。</p>
<p>死胖子认为：买房、投资、创业或者读书在他看来都优先于买车。我当然不是反对大家买车哈，这里只是说这个消费分析方法！因为我也了解车对于工作、生活有时的确是必须，我们后边也会讲，车用的好，也可以是资产。<br>所以这又回到了之前我们强调的，区分必要、需要和想要。<br>如果车属于必要，那你买，如果仅仅是需要，那我建议你可以想想有没有更高性价比的交通方式可以替代。<br>而仅仅是想要的话，就是说这东西可有可无，仅仅是你觉得有了好开心，那建议你搁置这个东西，延迟欲望实现！<br>考虑一下这笔钱能否用在更用价值的地方！比如投资自己提升自己的技能，从而带来收入的增加，或者是进一步储蓄积累本金或是别的什么的。<br>消费和储蓄也是一样的，人没钱的时候攒下的1万元存款，和有了100万时候的1万元存款，有着截然不同的作用。<br>人生的第一个1万，第一个10万，第一个100万，会打开不一样的机会之门，在没有这些储蓄的时候，很多事情是不会去想，也是不可能去做的。<br>1万在需要的时候能支撑一个人辞职1年，而这1年对这个人来说可能改变一生。<br>可连1万储蓄都没有的人，很少会去想脱产不工作，甚至很少会去想换一个自己真正热爱的行业踏踏实实从底层重新开始这种事情，失业以后一定会焦急地寻找下一份工作，即便这份工作极有可能完全不适合自己。<br>越是接近0的资产，所产生的收益越大，效用越大。以前的农民遇到天灾后，最需要1万元去买第二年的种子和肥料。所以如果能用好年景富裕的一点钱，去换大灾年的这第一个1万有着最高的收益和效用。<br>所以就买车的事情来说，大家几乎没钱的时候花20万去贷款买的车，和有了一定储蓄后花20万买的车，虽然金额相同，但实际是根本不一样的成本。前者花的是自己“第一个馒头”，而对后者而言，只是可有可无的一个馒头。</p>
<p>4、对保险的态度</p>
<p>死胖子这里也谈到了保险的重要性。<br>觉得买保险没有用、如果没出事儿就是白白浪费钱这种想法的小伙伴恐怕并不少吧。<br>在之前的APP课程学习和班班的晚分享答疑中，都说到了家庭配置保险是非常必要而且重要的。这是一种非常重要的风险控制措施，是一旦发生意外用来救命的第一个馒头，在我国，配置保险尤为重要，因为高昂的医疗费用会消耗尽你的一切。<br>     有些小伙伴会说，我现在没钱买保险，等我准备好了再学习再买。还是那句话，意外和疾病都不会等你准备好了再来。<br>所以建议每个小伙伴都掌握保险知识，不仅为了不被保险公司忽悠，更是为了保护自己所爱的人，不要等到饿疯了，才想起来为什么当初不做好粮食储备，随意的消耗你的第一个馒头。<br>保险一交就是几十年，根据年龄不同，需要交十几万到几十万。<br>买到不适合的，白白浪费钱不说，最可怕的是还达不到保障的目的。<br>只有经过学习，懂得保险知识，才不会被坑，为家人和自己做好保障，咱们留爱不留债。</p>
<p>5、对待股市的态度</p>
<p>不要想着把股市当成提款机，而是把股市当成了储蓄罐。这个思维方式真的非常重要。<br>大多数人在股市无法赚钱，就是因为他们把股市当成了短期投机的工具，他们短期的压力特别大，进而开始频繁操作，且不说是否能盈利，手续费都够他受的。<br>但是反过来把股市当成储蓄罐，则心态就完全不一样，你不会想着今天存了1000，明天要变成1500，而是会想着以后每个月都存1000，那五年以后就能有6万了。你的短期压力就很小了，对于股市的波动也会比较适应。<br>死胖子和作者的持股是相似的，但是因为有这种思想，所以他不怕下跌，可以从容不迫地坚定持股，坚持定投。当然了，前提是你有知识的支撑。</p>
<p>6、打折的思维</p>
<p>这个思维其实就是价值投资的思维，永远在寻找价格低于价值的公司。只是买入好公司不一定能赚钱，只要买入价格低于价值的好公司才能赚钱。低估是最好的进攻！</p>
<p>7、开源</p>
<p>在小狗钱钱中，也有讲到，开源节流，节流很重要，但开源更重要，利用自己的兴趣赚钱，是一件多么幸福的事啊。当然，如果你还没发觉自己的兴趣，那就先做好当下，比如学习理财投资。<br>学理财让你的眼界和思维与他人不同，更容易看得见赚钱的机会</p>
<p>8、运气</p>
<p>不是因为运气好而成功，而是因为一直在做准备，每一步都早那么一点点，每一步又都踏在合适的节拍上。<br>好运气的光临也是需要你做好准备的。最典型的例子就是牛市来临的时候，你是否已经准备好了呢？<br>以死胖子的价值观投资观，即便上天没有给很好的运气，没有15年股市的大牛市，没有能在刚买完房后房价就暴涨，我相信他的生活依然会比绝大部分人好，而那份运气早晚也会到的。</p>
<p>今天早上看了晨读，好几个小伙伴找班班，要学习股票，要向死胖子学习<br>有些小伙伴班班还没来及回复，大家别急哦<br>家庭资产配置咱们还没讲，班班简单跟大家说说<br>关于指数，分为宽基指数和行业指数，即便你只想定投基金，你也是需要懂得一些股票知识的<br>股票知识里的商业逻辑，可以让你知道一个行业怎么赚钱，钱从哪里来<br>行业有天生的优劣之分，有些就是好行业，有些就是差行业<br>如果你懂一些股票知识，你就可以选择一些好行业低估买入，它会让你获得远超过大盘或者说是定投宽基指数的收益<br>只想学基金，那如果你因为股票知识的盲点，你选了一个差行业指数基金，你也可能4、5年都赚不了钱<br>努力定投基金不是为了多年后回本<br>是为了能跑赢通胀，追求更好的收益<br>基金和股票本质是相同的，两者同时投资并不矛盾，反而加深你对整个市场的认识，因为长投教的是指数基金定投反映的就是整个市场，而且定投作为一个超长期投资，作为你股票投资的补充，是一个非常好的品种<br>只学股票，可能你刚刚学完的时候并不一定能找到可以买入的，这个时候百爪挠心很容易冲动交易<br>保险的话，我们都知道是一个用小资金撬动高杠杆的品种<br>保险是用来给家庭收入或资产上保险的，那同理，你的可投资资产也可以上个保险，有类似原理的品种，具体什么，太深，不做具体介绍，后边给大家讲股票投资降低风险的五中方法哦<br>这里想说的是，股票、基金、保险，开源作为投资的黄金组合，其实它的很多知识都会相通，有交岔，都学了，才能让你搭建一个完整的投资体系<br>而且这四门作为投资学习的基础，你懂了它们，再去涉猎其他品种，也容易的多<br>基金适合做定投，比较安全，收益稳定，股票是印钞机，赚钱比较多，是我们的前锋，保险呢是我们的后盾，再加上开源给我们提供本金，多条腿赚钱，这四个是一个体系，就像我们的资产配置的四个账户<br>我们常说，投资机会稍纵即逝，在一个投资机会来临的时候，你发现你只会一个品种也是不行<br>因为可能恰好你会的这个品种，此时不是个好标的，那你知道这个机会，仅仅因为品种限制，就溜掉了，也未免可惜<br>有时候，你会的这个品种，比如股票此时不是个好的介入机会，但是这个时候，有合适的基金介入机会，也是常有的事<br>比如，前段时间科创板，50万门槛，你可能望科创板兴叹<br>但是，股票达不到门槛，此时基金还是有机会的<br>如果你只会股票，不懂基金，可就浪费了一个很好的机会<br>我们的课程是实操+理论相结合的，以实操为导向，理论为基础，你学完就会操作，股票课会教你搭建两个投资组合，搭建投资组合中遇到的软件还会教你怎么用，你学完就自己会操作了，课程中还加入了一定的理论知识，让你理解股票投资的原理，你学完，不仅可以实操，理论知识也不落<br>基金课会教你制定基金定投计划，在指数基金为主的基础上，还会教你其他品类的基金，比如债基等,学完你就会选择各品种基金，也会对指数进行初步估值,一步一步教下来，学完你就会自己选基金，自己买入<br>保险课会教你规划家庭保险，如何选择意外险、重疾险、寿险等,买多少保额，怎么看条款，手把手教你规划和分析,学完你就可以自己规划家庭保险方案，挑选产品了<br>开源课主要从如何开拓市场，如何建立人脉，如何拓展开源渠道，讲怎么增加现金流<br>开源课访谈了近100个有成功开源经验的普通人，收集了50多个开源案例，将之归类整理，从专业的角度系统地总结出了各种开源的思路和方法，帮助想要开源却不知从何入手的小伙伴，能够找到适合自己的开源方法，并知道如何行动起来。帮我们找到一种合适自己的开源赚钱路子<br>这四门课是一个体系，保险是后方保障，基金是中方稳定，股票是前方进攻，开源是积累本金<br>它们四个的作用分别是：守住现在的生活，保持稳步增长，获取高收益，积累你的资金池，让你钱持续增长<br>今天晚上就是大家心心念念的股票课了，不过这几天也一直有小伙伴问过我一些奇怪的问题，其中有人说中国很多公司的财报都是虚假的，能投资吗？<br>     我想应该很多人都想知道答案，所以趁着中午这段时间大家就来看看长投创始人：【加餐阅读】亲爱的卧底熊系列我把文章发在这里了，大家自行学习找答案</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享04</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB04/</url>
    <content><![CDATA[<p>通货膨胀&amp;投资陷阱<br>                                  爬楼密码：20200113晚</p>
<p>在开始今晚的分享之前，班班先来总结一下今早晨读的要点，帮大家稍加复习<br>1 通胀每时每刻都在蚕食着我们的财产，这是自然规律，我们没法躲避，只能想办法抵抗，投资就是最好的方式<br>2 不理财最大的风险就是通胀。父母们会告诉我们存钱，但是他们也不知道，钱存在银行里就是以很高的速度在亏损<br>宝贝们觉得投资有风险，其实不投资风险更大<br>通过学习，掌握正确的投资知识和策略，大概率是可以资产增值的，但是什么都不做，只存银行。100%是亏钱的，每年都在亏。<br>是学习理财让你的钱生钱，还是存在银行让你的钱喂通胀。这道选择题应该没有悬念吧？<br>早上的晨读，咱们了解到通胀是上古神兽，啃起我们的小钱钱比较斯文，是一口一口的，但他也不肯停，你看着也没办法<br>但是投资陷阱这个老妖怪，可是吃人不吐骨头的~今天班班就分别来和大家讲讲如何降妖除魔<br>第一部分：通货膨胀<br>1、什么是通货膨胀<br>举个例子，假设整个中国市场上只有100个西瓜，同时市场上流通着1000元人民币，每个西瓜价值10元。第二年央行多印了1000元人民币，等于流通着2000元人民币，但是生产力提高地没有那么快，只生产了150个西瓜，每个西瓜就变成了13元一个。<br>大家从这张图上可以很直观的看到，100元，在不同的年份，可以买到的东西。</p>
<p>通货膨胀的意思就是流通的货币过多，超过经济运行的需求，导致钱不值钱，钱的购买力下降了，相应地物价就上涨了。<br>知识点：通货膨胀的意思就是货币的增长速度快过商品增长速度。<br>2、为什么会发生通货膨胀？<br>造成通货膨胀的直接原因，是国家财政需求<br>正常来讲，政府本身是不创造财富的，需要靠税收来维持运行的，包括给公务员发工资、医保社保、基础建设、军事、外交等，政府花钱的地方很多，需要很多很多钱。<br>如果税收太高了，老百姓会不高兴，企业也不容易赚钱，经济发展不起来。而太低了，政府又没钱花，或者花钱不痛快。<br>那怎么办？最简单的办法，就是扩大货币发行规模，自己印钱自己花(好像听起来有点机智？)。<br>这种方式其实就是“抢劫”了民间财富。<br>因为社会财富只能是通过生产和交换来创造，不可能通过印钱来增加，多印出来的钱等于是瓜分了部分社会财富。更重要的是，通过这种方式法增加政府收入，又隐蔽又安全，而且简单易行，成本低廉。只要需要，想要多少就有多少。<br>以美国为例，从未发生过恶性通胀，但1800年以来美元已经贬值了95%。今天的1美元，相当于当年的5美分。<br>我们要承认通货膨胀，这是我们没有办法控制的，我们无法逃避，只能直面这个现实。（真的勇士，敢于直面不可抵抗的通胀！）<br>3、通货膨胀的影响<br>    我们先来看什么是CPI<br>    CPI是消费者物价指数(Consumer Price Index)的简称，是选取一篮子消费品和劳务，以他们在消费者支出中的比重为权数来衡量的市场价格变动率，主要反映消费者支付商品和劳务的价格变化情况。<br>    这句话是照着念出来的，读着都累。<br>    翻译成人话就是，用一些商品价格的变动率来反映整体的物价变化情况。</p>
<p>这是CPI的构成和比重，俗称8大类，其中食品的比重比较大，占了约1/3，所以有的时候猪肉涨价，老百姓就会感觉物价上涨明显。尤其是去年年底，那猪肉涨的，别提了。</p>
<p>这是最近20年的通胀率和猪肉涨幅，可以看到猪肉的涨幅和CPI的涨幅基本同步，所以食品在CPI中的影响非常明显<br>但是注意：居住中不包含住房！所以，国内的房价猛涨，但是CPI却没有这么大的涨幅。这也是为什么，我们感知的通胀会和官方数据不一样呢，实际的通胀率比官方数据要高一些。<br>可能有小伙伴想问，CPI为什么不包括房价呢？<br>按照官方的说法，购买商品房属于投资行为，而不是消费行为，而cpi是消费者物价指数，自然不能把投资算进去喽~</p>
<p>这是从1980年起的CPI统计数据，标红的是恶性通胀时期，大家感受下。<br>可能有些人会觉得很多时候也不是很高，那我想告诉你，这只是国家公布的数据，其实真实的通货膨胀率远比这个要高得多<br>按照国家公布的数据算下来，平均每年通胀5%左右<br>通货膨胀最直接的影响就是财富的缩水，CPI每年上涨5%，相当于你的财富每年缩水。举个例子，今年有1万，通胀率5%，也就是说物价上涨了5%，到明年就变成了10000/（1+5%）=9524元，钱还是1万，数额没有变化，购买力直接少了将近500元。<br>有人可能会说，我把钱存银行，还有利息呢，嗯，现在一年期银行定存利率是1.75%，1万元存1年：10000*（1+1.75%）=10175元。但通胀率5%，实际的购买力：10175/（1+5%）=9690元，还是少了300多~<br>小时候万元户是土豪大户。现在1万块，也就够看一场王菲的演唱会。<br>所以说通货膨胀是财富的隐形杀手，这句话一点都没错。<br>4、最后一个问题，我们该怎么办啊？<br>    何以解忧，唯有暴富，何以暴富，唯有投资！<br>    哈哈，开玩笑，一夜暴富大概率不可能，但是抱富还是可以的。我们的目标是保持财富的稳步增长。<br>    总结一下：通胀是不可避免的，唯有投资才能拯救自己的财富，接下来这个小怪兽就是可以避免的了~</p>
<pre><code>听完通货膨胀，大家可能会想，不能让通胀吞噬我的财富，我要赶紧投资！
有句话不知你们听过没有：不投资是等死，乱投资呢，找死！
通胀我们get正确的投资姿势后可以打败，但投资陷阱这个老妖怪可是吃人不吐骨头的。
这里灵伶带大家扩展了解一下相关知识，这样大家在以后的理财过程中可以正确的避开这些投资陷阱。</code></pre><p>1、要投资，但不能乱投资。<br>投资的正确姿势是什么呢？<br>    巴菲特老爷子曾经说过投资的原则，在这里我也送给大家。<br>    第一，不要亏损，第二，不要亏损，第三，不要亏损！<br>    我们理财是为了养鹅，假设你已经有鹅了，第一件事就是不要让你的鹅变瘦甚至死去。<br>    很多人把投资看成是赌博，希望搏一把，然后就一夜暴富！但事实的真相是，从来没有一夜暴富，那些期望一夜暴富的人很容易都会遇到投资骗局，真是一夜回到解放前！<br>    金融行业离钱最近，但是金融骗局也层出不穷，e租宝，善心汇，MMM平台，IGFOX，以及被定性为非法集资的ICO。</p>
<pre><code>说起MMM平台，还真的是一个奇葩的存在。MMM的本质是一个典型的庞氏骗局，通过高额回报来吸引投资者，并用发展下线的方式来支付前面的投资者。当没有新人加入，或者加入的新人不够支撑之前的人的利润时，这个游戏就玩不下了，崩盘是迟早的事。
崩盘了怎么办呢？
它有一招很奇葩但很有效的模式——重启。
重启是什么意思呢？就是这个系统玩不转了，我们宣布系统要重启，如果你还想要拿回你原来的钱，那你要再往里面投新的钱，重启的实质，就是继续骗钱。
如果是你，你会不会再投钱进去？这比耍流氓恶心百倍千倍啊！
但是有人会继续投入，其中有两个心理在起作用：
一是侥幸心理。万一我能拿回来呢？要不试试。
二是无法舍弃沉没成本。我已经投了这么多钱了，如果不试试，那这些钱都拿不回来了。</code></pre><p>侥幸心理大家都懂，那沉没成本又是什么呢？沉没成本是指已经发生且不可收回的支出，无论现在或未来做什么决策，都无法改变的成本。（注意：是无法改变的成本。）那些骗子就是利用这些人的心理反复地重启，反复地骗钱。<br>执着于沉没成本是投资决策中一个非常严重的干扰心理。<br>比如：很多人买了一只烂股，然后被套了，不甘心损失，就不断地补仓，结果越套越深。就比如乐S网~<br>不得不感慨一下，A股真是一个培养韭菜的好地方，韭菜割了一茬又一茬。在这样的市场做投资，有这样的对手真的是非常幸福，市场越无效，价值投资能获取的利润越大。<br>再比如：很多人发现买了不适合自己的保险，也是这个心理，已经交了这么多钱，退保就要赔好多呢！可是不退，后面几十年还得继续交，更心塞。</p>
<p>2、 那如何防范投资骗局？</p>
<pre><code>第一、弄清楚每一个投资背后的原理，你赚的是谁的钱？
大家要去想一想，我投资的项目，到底靠什么赚钱的呢？一个产品，一个公司，不是靠自己的产品优质和服务周到来赚取利润，而是通过不断发展下线来赚取利润，大家觉得靠谱吗？
还是拿刚刚通货膨胀说过的西瓜举例。我们分析一个西瓜的价值的时候，靠的是分析今年西瓜的产量，往年西瓜的销量，今年的天气等等客观因素去估值。
那么西瓜公司赚钱靠的是自己的西瓜皮薄多汁，香甜可口。
但是有一个西瓜公司，它没有西瓜，只有西瓜皮！！
他先是鼓吹他的西瓜皮特别好吃，然后只有会员才能吃，不仅能吃，还能卖，并且可以赚很多钱，然后每找一个人来做会员，就能得到一笔钱，也就是俗称的拉下线。但是实际上这个西瓜皮根本就一文不值（我说西瓜皮大家知道一文不值，但是换到生活中，大家可能就辨别不了了呢）。
庞氏骗局更过分一点，连西瓜皮都没有，就是假装有一个西瓜皮，只要你来入会，就有了这个很赚钱的西瓜皮。
其实，我个人是把传销，直销，都当成骗局的，差异无非是：直销确实有个西瓜，但是卖出了金子的价格，法律还允许这么卖。
传销是把西瓜皮卖出金子价格，但是国家不允许。
庞氏骗局就是连西瓜皮都没有！！！
大家要记住，一个东西，你要支付超过它本身价值的好几倍，然后完全只能靠发展下线来得到回报，不是传销就是骗子。

第二、我们要先学习再投资
投资并不简单，并不是随随便便就可以赚钱的。
大家想想啊，咱们学习游泳，有教练；开车上路，有驾校；职场技能，有蓝翔技校……那么到了股票上，到了投资这种复杂系统上，这种事关大量钱财的问题上，不是更应该学习吗？
我们要学习分析公司是如何盈利的，要学习如何才能找到那些好公司（或者投资标的），让它为我们赚钱。
我们自己辛辛苦苦工作赚来的血汗钱，千万别丢给了通胀和骗子。

第三、我们要知道投资的风险在哪里
2018年A股上市公司中净资产收益率（可以简单理解为年收益率）超过20%的公司只有318家，而现在A股全部上市公司超过3700家，也就是说，不到十分之一的公司可以赚取20%的利润。上市公司基本上是整个社会中最能赚钱的群体了，它们的赚钱能力也不过如此。
被尊为股神的巴菲特累计45年年化收益率为20.5%，20%+的收益率好像不起眼，但是他凭着这不起眼的收益率干到了世界首富。
动不动一年翻倍神马的，大家就要留神了~所以，大家一定要明白，过高的收益率是不可持续的。并且如果你不知道风险在哪里，那就一定要警惕，不知道的风险才是最大的风险
总结一下：
第一、弄清楚每一个投资背后的原理，你赚的是谁的钱？
第二、我们要先学习再投资
第三、你要知道投资的风险在哪里
划重点，避坑要义，牢记这三条，这就是我们防范投资骗局的方法。
希望大家能够仔细思考骗局的逻辑，从而避开投资陷阱~并且通过学习走上正确的投资之路~抵御通胀

另外今天我私聊小伙伴催作业，很多小伙伴说，班班你不要催，我忙着上班呢，我的收入有限，我得先赚钱才能跟你学理财！关于收入有限，又有负债，不知道怎么办的，班班就来聊一下收入的三种模式。
要开拓高价值的工作，首先要把工作分类，按照时间价值来区分，工作可以分为三类：</code></pre><p>将每一份时间卖得更贵；<br>将每一份时间卖出更多次；<br>将每一份时间按比率卖出。<br>你们觉得那种方式更好？<br>    大部分人执着于模式一，也就是将时间卖的更贵。然而模式一有天然的天花板，比如律师或高管已经算是模式一的顶峰了，但是他们每小时的时间仍然有天花板。他们当前收益（税后），一般一小时能到1000元（税后年收入250万）已经到顶了。</p>
<pre><code>模式二 ——将每一份时间卖出更多次
举个例子，作家就是这样。写一本书比如花了他1000个小时，一年的时间。然后他的书可以反复的出售，每多出售一本书，他完全不需要花更多的时间。这样，他的单位时间就加上杠杆了。
互联网的出现，让模式二可以大量的出现。比如，我相信大家都在心仪的公众号中看到过广告吧，但你可能不知道一篇阅读数10万加的公号广告，收费一般在30万以上，而一篇阅读数只有1000的公号广告，收费只有几百元。但是对于经营公众号的人来说，他们花在这上面的心血和时间却相差不大。
大公众号的大V等于给自己的时间加上了杠杆，更多的人看意味着时间卖出了更多次，在模式二下，当前收益可以轻松突破1000元每小时。

模式三 ——将每一份时间按比率卖出
投资就是这样一种模式，当年的投资能力达到一定程度，你的年化平均收益率提高到比如说15%左右。
如果你有1万元本金，一年就能赚1500元。这听上去很少，对吧？但是如果你有100万元，一年就能赚15万，已经超过大部分人的工资了。那如果你有700万元呢？一年就赚100万了，在北上广深等一线城市也属于收入最高的1%了。
在模式三中，你的时间价值不再是一个固定值，而是一个比率，那你的时间价值随着你的本金上升而不断上升，而且是没有天花板的。所以说，投资是我们最值得学习的能力了。</code></pre>]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享03</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB03/</url>
    <content><![CDATA[<p>世界第八大奇迹——复利<br>爬楼密码：20200112晚<br>大家晚上好，我们的晚分享就要开始喽，今天我们来说说普通人变成富人的捷径。</p>
<p>我来问个问题：<br>一张纸厚1毫米，假设它足够大，能够无限次对折，请问，对折多少次之后能够超过珠穆朗玛峰的高度？班班给大家三个选项：<br>A.24次  B.240次  C.2400次</p>
<p>不用计算哦，凭感觉回答就行<br>大家开始抢答：<br>——————————————<br>班班公布答案啦，答案是A。对折24次就可以超过珠穆朗玛峰的高度了。<br>有木有很震惊鸭？</p>
<p>珠穆朗玛峰高是8844米。一张纸对折23次的时候就已经8388米，很接近啦；等到对折24次的时候，高度是16777米，快赶上两座珠穆朗玛峰摞起来的高度了。<br>答错的小伙伴自罚三杯吧。<br>折纸24次超过珠峰，其中的奥秘就是复利。<br>第一部分：复利的正向作用<br>2500年前，腓尼基旅行家昂蒂帕克写下了炫人耳目的七大奇迹清单：埃及吉札金字塔、奥林匹亚宙斯巨像、阿耳忒弥斯神庙、摩索拉斯陵墓、亚历山大灯塔、巴比伦空中花园和罗德港巨人雕像。<br>而被爱因斯坦称为第八大奇迹的，是“复利”。<br>今天以前你或许听过这个名词，或许没有。但你一定听过这个故事：<br>舍罕王打算奖赏国际象棋的发明人——宰相西萨·班·达依尔。<br>国王问他想要什么，他对国王说：<br>陛下，请您在这张棋盘的第1个小格里，赏给我1粒麦子，在第2个小格里给2粒，第3小格给4粒，以后每一小格都比前一小格加一倍。请您把这样摆满了棋盘上所有64个格的麦粒，都赏给您的仆人吧！<br>国王觉得这要求太容易满足了，就命令给他这些麦粒。<br>当人们把一袋一袋的麦子搬来开始计数时，国王才发现：就是把全印度甚至全世界的麦粒全拿来，也满足不了这个要求。<br>什么？你听过了？那，咱们换一个。</p>
<p>有一个农民，给地主打工，地主说：你帮我干活，我每个月给你一旦米；农民就说：我有一个大胆的想法，你这样吧，我们弄一个棋盘，你第一天给我一粒米，第二天给我两粒，第三天给我四粒，第四天给我8粒，后面就是隔一天翻一倍；地主想：农民傻了吧，要这么少，一粒、两粒、四粒的要，就答应了。</p>
<p>你们觉得谁更机智，是农民更机智，还是地主更机智？</p>
<p>很多人觉得农民更机智是吧？这个故事的结局是这样子的，农民在坚持了七天之后就饿死了。你们都知道复利嘛，但是坚持了七天这也才几百粒米啊，他饿死了。</p>
<p>所以，事情并没有那么简单。投资的事情也是这样子的，没有大家想的那么简单。很多时候不是我们以为怎么样就会怎么样的。<br>这个故事告诉大家，做事情不要只有一个模式，要多想一想，冷静下来，要考虑到各种场景以及各种因素。</p>
<p>我们都知道，这里面的知识点大家关注的都是一粒、两粒、四粒的复利增长上，却忘了这里面有个场景，就是农民是要靠米吃饭的啊。</p>
<p>所以，应急金很重要，而固定思维不可要。</p>
<p>我们来说第二个结局。假设农民自己本身有米，顺利的度过了前期。很快地主就发现，即使将自己所有的粮食都给他，也不够百分之一。</p>
<p>故事往往到这里就结束了，然后说什么,这就是复利的力量巴拉巴拉之类的。</p>
<p>我们搞投资的人，喜欢讲数据！谁知道你国库有多少粮食呢？是不是放满真的要很多呢？我们来算一下。很简单，拉一张Excel表就可以算出来，有兴趣的小伙伴可以课后自己算一下。<br>班班已经算好了，为了方便大家查看，我就把最后10行的数据贴出来。<br>​​<br>大家看最后一行，18446744073709600000这个数字是多少呢？1844亿亿！！是不是没什么概念？没关系，我们来换算成重量。<br>1公斤麦子约4万粒。把1844亿亿换算成吨的话，约4611亿吨！<br>大家知道我们国家一年的粮食产量是多少吗？<br>​​<br>这是我国近几年年全年粮食产量的统计图，2018年是6.58亿吨。4611亿吨相当于我国701年的粮食总产量， 还真的是整个国家的粮食都不够啊。<br>复利的公式是： 最终收益=本金<em>（1+收益率）^时间<br>这个棋盘故事里面，后一个格子是前一个的一倍，相当于就是收益率100%。所以，你要是听到什么投资一年翻好几倍的，肯定是骗人的。<br>​​<br>这个图，就充分说明了复利和单利的巨大区别。<br>复利和单利，在初期的时候，差别还不是很大。同样是投资10万元，到第10年的时候，也只是相差5.9万，可是随着时间的拉长，差别越来越大，第50年的时候，单利是60万，而复利是1174万，简直是天壤之别。<br>这就是复利的神奇之处：在刚开始的时候复利效应是很微小的、不易察觉的，但当发展到一定阶段就会产生非常惊人的效果。<br>现在大家知道了复利的威力，那么影响复利的因素有哪些？<br>再来复习一下，复利的公式是 最终收益=本金</em>（1+收益率）^时间<br>第一个就是本金啦，本金越多，最终收益越大，但其实本金的影响其实没有那么大，而且本金在短期内是很难改变的。<br>第二个因素，影响非常大，就是收益率，一年赚3%和一年赚10%，差别是显而易见的，我们在本金不多的情况下，就要努力提高自己的投资能力，提高自己的收益率啦。<br>​​<br>如上图所示，从100万开始，收益率1%、5%、10%、15%，30年后的差异，大家应该都能从曲线就可以看到。<br>第三个因素其实影响更大，就是时间。年复利，和每天复利，后者要高很多，迭代的次数越多，复利威力越大，真是恨不得每一秒都在复利。<br>相信大多数普通人是依赖工资结余进行投资的，而我们年轻时可能犯的最大的错误就是，总想着还有明天，想把一切责任都交给明天的自己。<br>22岁、27岁、32岁开始投资的人到底有多大区别呢？也许你认为5年在漫漫人生路上，连1/10都不到，即使错过5年，只要抓紧时间，就能够迎头赶上。<br>我们还是拿数据说话。<br>假设有小明和小强两个人，小明的理财意识觉醒得比较早，20岁的时候就开始投资。小强呢，要稍微晚一点，25岁才开始投资。看起来只是差了5年，差距不是很大，只要抓紧时间，就能迎头赶上，可是，事实的真相是什么呢？<br>假设两人都是每月定投1000元，每年的收益率为12%（历史数据回溯定投指数基金能够达到这个水平）。<br>小明从20岁开始投资，共投资10年，到31岁的时候就不再投入本金。<br>小强从25岁开始投资，一直投入本金直到60岁。<br>我们来看一下，当他们到60岁的时候各自都有多少钱呢？<br>​​<br>60岁的时候，小明有822万，小强有733万，即使小强的投入本金是小明的3.5倍，最终也还是没有追上小明。并且，我们可以看到，在人生的各个阶段，小强始终落后于小明，仅仅就是因为相差了五年。<br>复利的的魔法在漫长的时间中发挥了魔力，如果你行动时间晚了一点，那么你的投资回报就会少得多。所以执行力强的人往往会提前行动，争取时间，让复利发挥出最大的力量。<br>复利有正向的影响，也会有反向的影响。<br>你可能要问，反向的影响是什么呢？很简单，通货膨胀啊。<br>我们的资产一直在被通胀吞噬着，还是用最典型的例子来说明，90年代的万元户是有钱人，现在只有一万元就是扶贫对象。<br>重点：你推迟投资的每一天，通货膨胀都会发挥复利的反向作用，与别人的差距也会越来越大。<br>班班曾经碰到有很多年轻人说，我没钱理财，以后再说吧。<br>我想说这个观念相当错误，年轻人最大的资本就是时间。<br>20岁的100块，和30岁的100块能一样么？20岁的100块可以积累10年的复利，越早开始越轻松。<br>再拿准备养老金为例<br>​​<br>如果从年轻的时候就开始，其实是很轻松的。等到到了40岁，50岁的时候，再想着准备养老金，那就很吃力了。<br>有的人说，我已经晚了，怎么办呢？那就要想办法利用复利来缩短差距。<br>要么你有足够的本金，要么你开始要比别人早。如果这两个都没有，那么你就只能提高自己的投资能力。<br>相对增加本金和趁早开始来说，我们已经错过了太多。那提高自己的收益率，才是我们可以快速赶超别人的方法！<br>无论我们是打工，做生意还是创业，其实你一生的财富终值都会跟我们的投资能力有关，跟投资收益率有关。<br>为什么这么说呢？<br>我们来看看穷人与富人的差别：<br>​​<br>作为一般的普通人，如果你的投资收益率只有3%，也就是余额宝的收益率，那这辈子大概率会成为一个穷人。有人说我就安贫乐道，但是也别忘了，贫贱夫妻百事哀。<br>如果你的收益率是5%，也就是银行理财的收益率。那最多就是一个中产，中年危机最大的一群人就是中产。<br>如果你的收益率能达到10%及以上，那么恭喜你，你已经进入富人阶层。<br>可能有人觉得我说得有点夸张，那我们来看一下各个国家和地区的首富，他们的收益率。<br>​​<br>大家看一下他们的初始本金，菲律宾首富施至成的本金是最少的，只有0.1万，李嘉诚的本金也只有0.7万，但是这并不妨碍他们成为世界首富，所以，本金的影响并没有你想象的那么大。<br>这些世界首富身处各行各业，有零售业，有科技业，有开赌场的，也有投资的。<br>很多人认为巴菲特老爷子是炒股的，其实这位投资大师也是一位企业家，他经营的企业就是伯克希尔哈撒韦。<br>很多人认为李嘉诚是企业家，但其实他也是投资家，投资了很多行业和公司。<br>有钱人都是多元化发展的<br>​​<br>所以，他们本质上做的都是同一件事，那就是投资。为什么有钱人越来越有钱呢？就是因为他们理解复利法则，懂得用投资来使自己的财富增值。<br>再看一下上面的表格，收益率最高的是比尔盖茨，达到了35.5%，最低的是何鸿燊，只有17.8%。大部分都是20%～30%之间。<br>这些收益率不是很高吧？我们努努力，20%可能做不到，10%还是可以达到的吧。10%意味着什么呢？意味着地区首富！<br>各位未来的首富~让班班抱紧你们的大腿<br>穷人和中产为什么不能跨越阶层呢？因为很多人懒，懒得学习，懒得行动，懒得努力。贫穷的原因很大一部分是因为懒惰。时间会帮你干掉大部分对手。<br>他们虽然知道钱放在银行会贬值，会让通货膨胀吃掉，但是他们懒得行动，不愿意花费一些时间去改变自己，每天躺在舒适区。有天父母需要养老金，孩子需要一大笔教育金，自己生病需要一大笔钱的时候，难道只能怪自己穷吗？<br>来到训练营的小伙伴都是希望学会投资，最终能够财富自由的。你是希望自己和家人成为富人还是穷人呢？就取决于你现在的决定。<br>其实复利没那么难理解，后面我们讲到基金的时候会给大家展示复利在基金上的最佳展现，以及它为什么可以使我们定投基金成为千万富翁。<br>那么，复利仅仅体现在投资么？<br>不，我认为复利是这个世界上最重要的法则，在很多地方都发挥着重要的作用。<br>就以身体健康做例子好了。<br>你的每一次饮食，每一次锻炼，每一个与健康有关的选择，其实都是加在你健康上的复利因子，有正的，也有负的。<br>复利有什么特点？就是最开始毫无声息，后面就爆发了。请看这张图。<br>​​<br>这个是常见重疾的发病率，是不是跟复利曲线一模一样的呢？一些作用在你身上对健康不利的因子，常年累月地，按照复利的规律影响你的健康，这就是为什么很多人，平时也很健康的，突然就垮了。<br>大部分年轻人很少有想到买保险的，觉得自己身体倍棒，那是因为他还在这个曲线的前面，不知道自己总归是会走到曲线后面的。<br>因此班班在这里郑重提醒：一定要配置保险，因为到最后风险的释放几乎是必然的。<br>投资、身体健康都是按照复利规律发展的。那么，人生呢？为什么小学同学都是差不多的，到了中年后却千差万别？<br>你的每一个选择，都是作用在你人生上的复利因子，有正的，有负的，起初看不出来变化，就像棋盘里面第一格，第二格的麦粒。但是后面巨大的收获如果没有前面这第一格，第二格麦粒，又从何谈起呢？<br>人通常都看不起，或者不在意微小的进步，其实，正是这些点点滴滴的进步，才能给你想要的未来。<br>这个世界从来没有什么一步登天，我相信复利的力量，也相信投资的必要性。<br>       最后，用一个复利小故事来结束今天的晚分享。</p>
<pre><code>故事的名字叫做--诺贝尔奖金始终发不完</code></pre><p>诺贝尔基金会成立于1896年，由诺贝尔捐献980万美元建立。<br>基金会成立初期，章程中明确规定这笔资金被限制只能投资在银行存款与公债上，不允许用于有风险的投资。<br>随着每年奖金的发放与基金会运作的开销，历经50多年后，诺贝尔基金的资产流失了近2/3，到了1953年，该基金会的资产只剩下300多万美元。<br>而且因为通货膨胀，300万美元只相当于1896年的30万美元，原定的奖金数额显得越来越可怜。眼看着诺贝尔基金走向破产，诺贝尔基金会的理事们于是求教麦肯锡，将仅有的300万美元银行存款转成资本，聘请专业人员投资股票和房地产。<br>新的理财观一举扭转了整个诺贝尔基金的命运，基金不但没有再减少过，而且到了2005年，基金总资产还增长到了5.41亿美元。<br>从1901年至今的一百多年里，诺奖发放的奖金总额早已远远超过诺贝尔的遗产。诺贝尔基金会长线投资的历史，追求复利收益的历史，伴随着人类的各种天灾人祸和战争。可是一路走来，长线仍有可观复利收益。估算可知，从1953年到现在，诺贝尔基金的年平均复利速度超过20%。<br>       怎么样未来的首富们，有没有怦然心动了呢？</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享05</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB05/</url>
    <content><![CDATA[<p>保险，留爱不留债<br>爬楼密码：20200114晚</p>
<p>今早的晨读大家都看过了吧~灵伶再来唠叨几句：</p>
<p>保险是我们每个人都需要的，但是非常多的人不重视。</p>
<p>我给大家算一笔账，如果你现在手里有30万，年收益率30%（已经很高了），一年赚到9万。先别忙着为9万激动，3年还不到30万。</p>
<p>对于重疾来说，30万光治疗都不够，更别说营养和康复了，还有失业导致的经济损失。</p>
<p>如果你能拿出来三四千块为自己配置一套保险，那情况就大不相同了<del>而且如果你还年轻，那么保费还会更低</del></p>
<p>所以咱们不能只盯着赚钱，更要想办法让自己可能受到的损失降低：比如避开投资陷阱，比如为自己和家人配置一份保险。</p>
<p>这样才能用少量的钱稳固自己的大后方，让你的子弹在股市里尽情地飞~</p>
<p>好啦，我们进入今晚的正题：保险~</p>
<p>可能有人会想，理财怎么和保险扯上关系了呢？殊不知，保险才是你能够安心理财的重要保障啊！</p>
<p>保险是防守，股票基金是进攻，缺一不可！</p>
<p>提到保险，不知道大家都有什么看法？很多宝贝可能觉得保险不太靠谱，特别是各种保险推销电话，让大家对保险避之唯恐不及。</p>
<p>别说你们啦，就连我以前接到推销保险的电话，也往往会一脸嫌弃地挂掉。</p>
<p>我们经常会在朋友圈里看到轻松筹一类的众筹信息、某某亲人重病，急需帮助，请求大家献个爱心或者被身边的亲戚朋友同事的事件触动，才恍然意识到，好像疾病和意外离自己这么近。</p>
<p>我也曾经在某筹上帮助过一些人，后来了解到平台抽成很高、且某些人骗钱，就不再理会这就消息了。</p>
<p>人的本性是逐利，特别是这种0成本的投资，某些人的行为导致真正需要帮助的人得不到救援，已是常有的事。</p>
<p>所以大家能来到这里，希望大家能够真的对保险重视起来，这是一把伞，阳光灿烂的时候想不起来，但是下雨的时候它很有用。</p>
<p>说到保险，我又要提起《欢乐颂》里的樊大姐了，有多少人还记得下面这张图？</p>
<p>樊胜美的父亲中风住院，急需10万元做手术。</p>
<p>由于平时没有积蓄，她只能求爷爷告奶奶地找人借钱，但无人肯借，最后只好卖房子，想想还真是悲哀。</p>
<p>樊胜美的家庭没有保险规划，遇到了重大疾病的风险，只能靠借钱或卖房子来解决燃眉之急。</p>
<p>但如果她配置了保险的话，只需要花少量的保费，就可以把风险转移到保险公司，完全不用走到卖房子这一步。</p>
<p>请再次给刷剧都不忘吸取经验教训的班班点赞！</p>
<p>这里先强调一下，训练营不会提到任何具体的保险公司/产品，请宝贝们也遵守规矩哦~</p>
<p>第一个问题：什么是保险？<br>保险的本质是一份商业合同。保险不是护身符，也不能保平安，也不能避免风险的发生，但是保险能够转移风险！！</p>
<p>那转移的是什么风险呢？</p>
<p>财务风险。</p>
<p>保险的核心作用就是风险事故【发生后】的家庭收入【损失补偿】。</p>
<p>说白了，就是当一个人发生意外或者疾病，需要一大笔钱的时候，能有人（保险公司）帮忙出钱。不至于让本不富裕的家庭陷入经济危机</p>
<p>我们来看一个例子，有个年轻人，姑且叫他小A。</p>
<p>小A在30岁的不幸患上了某重大疾病，需要50万的医疗费。但是他一下子拿不出这么多钱，他的父母当然不会见死不救，于是拿出了自己的养老钱给儿子治病。</p>
<p>好不容易治完病，但是风险的影响还没有结束。</p>
<p>根据数据统计，重大疾病5年存活率可以达到70%。换句话说，要痊愈，得花个三五年，这几年的花销、营养费，又是一笔开支。</p>
<p>同时小A因为治病耽误的一年多的工作，在养病期间是没有收入的。公司在得知他患重大疾病之后劝其在家“安心休养”，等于是变相劝退。虽然很无情，但这就是现实，公司是不会养闲人的。</p>
<p>因为得病，他的事业也毁了。</p>
<p>失业的打击、经济的压力让他无法安心休养，他的病情开始恶化，最终上演了一场白发人送黑发人的人间悲剧。</p>
<p>但是悲剧还没有结束。</p>
<p>两位老人不仅送走了自己的孩子，他们的积蓄也所剩不多，可以预见，他们惨淡的老年生活才刚刚开始。</p>
<p>简直不敢想了，也不愿意想了，太惨了！所以，就让小A永远活在故事里吧~</p>
<p>因病欠债、因病返贫的例子不胜枚举。要是给大家机会讲讲自己身边的例子，估计能讲一晚上。如果时间回到过去，小A缺的，可能仅仅是在此之前，买一份重大疾病保险。</p>
<p>通过上面的例子我们可以明白：保险的核心作用：在风险事故发生后，对家庭收入的损失进行补偿，避免发生财务危机。</p>
<p>第二个问题：为什么要买保险？<br>让我们来举个栗子。假设存在这么一个人叫小板栗，小板栗可能是我，可能是你，也可能是茫茫人海中的某一个人。那他的身上会有什么风险呢？</p>
<p>1.疾病的风险</p>
<p>患重大疾病是一种风险。</p>
<p>小板栗作为一个人类，吃的是五谷杂粮，他有可能会患重大疾病，也有可能不会。这种风险就属于第一类风险，不知道是否会发生。</p>
<p>有传闻说根据卫生部的发病概率表进行数据统计，人一生的罹患重疾的概率高达72%。</p>
<p>数据真假暂且不提，但随着环境的恶化以及生活方式的改变，这个概率今后将越来越高。可以说小板栗必定会患重大疾病，只是什么时候患上的问题。</p>
<p>2.意外的风险</p>
<p>意外伤害就是典型的第二类风险。</p>
<p>小板栗一生中几乎一定会遭遇意外，只是伤害程度大小的问题，但是他并不知道意外什么时候会发生，也不知道发生意外风险之后的后果有多严重，所以根本无从预防。这一类的风险还有死亡、重大自然灾害等等。</p>
<p>有的人可能会说，我有社保。</p>
<p>社保就像白衬衫，天气好的时候穿着挺清爽，寒冬腊月，谁冷谁尴尬。</p>
<p>社保只能应对一些小病小灾。因受起付线、封顶线、社保报销目录的限制，社会医保的实际报销比例不高，很多情况下不超过50%。</p>
<p>如果你看到上面的话头大如斗，你只需要记住一句话，一旦重疾发生，社保局就会告诉你：这个药不能报，那个检查不能报！而这些药和检查往往都是很贵很贵滴~</p>
<p>而且社会保险对于个人而言还是很有必要的，因为它跟很多政策相关的东西绑定在一起，包括买房、统筹医疗、上户口、子女入学等等，但社保只是国家最基础的一种保障机制。</p>
<p>直接记住结论：想有全面的保障，最佳配置方案就是社保+商业保险！</p>
<p>第三个问题：怎么买保险？</p>
<p>今天的音频课大家有没有认真听呢，上有老，下有小，我们应该先保谁？</p>
<p>答案是家庭经济支柱。</p>
<p>比如，一个40岁的父亲，不幸意外去世，如果他购买了足额的保险，即使他离开了，但是因为有足额的保险金，他的妻儿就可以靠着这笔钱继续生活下去。</p>
<p>这里，保险就起到了顶梁柱的作用，虽然无法长时间支撑整个家庭，但是短期内顶一顶还是可以的，足够让这个家庭走上正轨。</p>
<p>就像今早绾绾班班发的视频中的那个爸爸~ <a href="http://m.iqiyi.com/v_19rr9p1tm4.html?fromvsogou=1" target="_blank" rel="noopener">http://m.iqiyi.com/v_19rr9p1tm4.html?fromvsogou=1</a></p>
<p>如果我们优先保障了孩子，一旦孩子发生意外，我们是可以用到保险，但即使没有保险，家里还有一对年轻的夫妇可以赚钱养家，家庭经济不会受到致命的打击，灾难过后还能很快再继续站起来。</p>
<p>但是如果很不幸，这对年轻的夫妇出了意外，还没有保险，这个家庭的财务状况瞬间就崩溃了。家里的老人和孩子的生活就得不到保障了，如果这时候还有一份孩子的教育险需要交纳，就更是雪上加霜了。</p>
<p>退保吧，只能拿回很少的一点钱了，跟当初交的根本无法比，不退吧，生活都成困难了，还怎么交保险？</p>
<p>大家现在明白了吗？保险不能转移风险，而是在作为家庭经济支柱的我们倒下之后能够给剩下的家人留一笔钱，帮他们渡过经济的困难期~ </p>
<p>这就是保险第一原则：先大人后小孩，优先家庭经济支柱！</p>
<p>知道的优先投保对象，那我们应该配置哪些保险呢？</p>
<p>我们面对的风险主要有三种，意外，重疾和死亡。因此我们需要配置的保险也有三种，就是意外险，重疾险和寿险。</p>
<p>经过上面的讲解，大家知道了疾病和意外离我们并不远，因此在配置保险的时候要考虑重疾险和意外险。</p>
<p>好多宝贝奇怪，那为什么还有寿险呢？</p>
<p>因为重疾和意外所承担的责任，都只是人身保险的其中一个部分，而有一些风险并不属于重疾和意外。</p>
<p>举个例子，跑马拉松猝死，平时锻炼不够，或者因为一些其他原因，导致的死亡。加班加太多猝死的，比如连续通宵直播的主播。</p>
<p>在保险条例上，猝死不算重疾也不算意外。那这个时候，如果我们只有重疾和意外，是得不到赔偿的。</p>
<p>另外还有就是，如果我们去蹦极、漂流、做极限运动，如果出现事故，自己“作死”那种，意外险也是不赔的。但是这个时候，寿险会赔。</p>
<p>也就是说，只有重疾和意外，做不到风险的全面保障。所以必须配置寿险，寿险的赔付条件就是死亡。</p>
<p>我知道还有人要问：班班你把医疗险置于何处了？？我用下面两张图简单来解释一下重疾险和医疗险的关系蛤！</p>
<p>所以保险的第二个原则是：保障要全面，组合配置，而不是单独只买一种。</p>
<p>以前班班讲到这里，会有宝贝问：XX保险好吗？</p>
<p>这样的问题其实没有什么意义。就像病人去医院看病，没有哪个病人会一开口就问医生某某药好吗，肯定是要先知道自己的情况，再对症下药。</p>
<p>买保险不是买白菜，看哪个便宜性价比高就买哪个，那样选到的不一定是适合自己的，当然，也不是越贵就越好！更重要的是要去分析你当下的需求和主要面临的风险，通过不同的组合来满足不同阶段的重点。</p>
<p>记住，保险的核心是保障功能。</p>
<p>班班针对不太清楚自己投保应该从哪些方面考虑，特给各个阶段做了配置建议。</p>
<p>对年轻的宝贝：<br>没有建立家庭，主要考虑意外伤害和疾病对家人带来的影响，而这个阶段大家的收入又有限，因此首先应该考虑购买价格较低、保障较高的意外险或定期寿险，如果有经济余力的，可考虑购买健康医疗险。</p>
<p>对有家庭的宝贝：<br>应该开始投保一些长期寿险。有小孩的家庭如何配置呢？这里有个误区，大家仔细听。如果有小孩的宝贝，在给自己配备了保险之后，可以给自己的孩子购买健康医疗类及意外险。不少人就先给子女买，而没有给自己买啦，你才是养家的人，你倒下了，子女的保险没人交也就失效了，所以一定是先保挣钱的人呦！</p>
<p>对老年朋友：<br>可以购买一些网销型的意外险和防癌险，现在有很多摔伤、骨折的老人险。</p>
<p>关于保期：<br>如果大家是有经济能力买长期的终身型的就先买长期终身型，当然更重要的是量力而行，要根据自己的经济能力去选择。</p>
<p>以上建议作为参考，具体的要根据每个人的情况，不能完全照搬！如果要为自己配置合适的“衣服”，就要要多学习，多了解。那么配置起来才更合适，让保险即不是经济负担，还能成为重要保障。</p>
<p>第四个问题：分红型或返还型保险到底划不划算？</p>
<p>我们来看一下《30岁前的每一天》中的一个案例。</p>
<p>看完这个保险的内容，大家直观感觉这款产品如何？好像还挺划算的吧。</p>
<p>合算不合算我们来算一下就知道。</p>
<p>有两个数据先假设一下：</p>
<p>1.银行5年期定期储蓄的利率，目前基本处于2.75-4%之间。我们按3%算（我们假设保险公司都是笨蛋，他们拿了我们的钱只会存银行）</p>
<p>2.中国男性的平均年龄是71岁，女性则是74岁，我们拿70岁来算，至于100岁……这个我们暂时不考虑。</p>
<p>接下来，我们来拆解一下，这个保险方案可以分为三个阶段：</p>
<p>30-50岁，每年投资18000元，即每年2万减去返还的2000。</p>
<p>50-60岁，每年领2000元。</p>
<p>60-70岁，60岁的时候一次性领40万（即返还本金），同时每年领2万加分红，我们算2.1万，实际上保险公司的分红不是确定的，我们拿到多少也不知道，姑且就按1000算。</p>
<p>第一阶段，30-50岁，每年投资18000元，收益率3%，投资20年。</p>
<p>20年后也就是50岁这一年，保险公司放在银行的收益已经到了50万。</p>
<p>第二阶段，51-60岁，每年领2000元。对于保险公司来说，本金就是50万（即上图的加粗项），同时每年投入-2000，收益率3%，投资10年。到了60岁这年，保险公司在银行的本息和到了63万。</p>
<p>第三阶段，60-70岁，60岁的时候一次性领40万，同时每年领2.1万。对于保险公司来说，本金就是63万-40万=23万，同时每年投入-21000，收益率3%，投资10年。</p>
<p>到了70岁这年，保险公司在银行的本息和是8.7万。</p>
<p>这8.7万其实就是保险公司从客户身上赚到的利润。</p>
<p>注意：这还是保险公司傻到只会放在银行，我们都知道，保险公司肯定不傻，他们肯定会去找高收益的投资的。</p>
<p>假设保险公司略微具备一点投资知识（这几乎是肯定的），年收益率达到6%的话会怎样呢？到70岁那年，保险公司从客户身上赚到的利润将达到119万。</p>
<p>再假如保险公司的年收益率达到10%呢？到70岁那年，保险公司从客户身上赚到的利润将达到613万！！</p>
<p>如果到了100岁……这个数字会达到1个亿！！</p>
<p>所以你想，保险公司给你区区每年2.1万很划算吗？羊毛出在羊身上呢。顺便说一下，在后面的课程我们会介绍指数基金，从指数基金30年历史来看，10%的年化收益率真的不算非常难。</p>
<p>对于没有理财知识的人来说，返还型保险也未尝不可，但对于来上小白营的你们来说，大家都有理财意识，接下来培养自己的理财能力，战胜保险理财收益是妥妥的。所以就别指望保险给你生钱啦，你拿钱去投资，比它的回报要多得多！</p>
<p>保险第三原则：保险最重要的是保障，而非投资。</p>
<p>我知道很多宝贝对于买保险一事，会担心其中有坑。灵伶在这里和大家说道说道。</p>
<p>保险是一个严格的法律合同，涉及到法律问题，就会有法律条文条款。实际上保险条款也是经过律师审核出来的，不同的人对不同文字的理解肯定会有歧义，如果有明显歧义的话，就比如说同一条法案或保险条款，保险公司的说法跟我们为客户的理解不一样。</p>
<p>然后大家的解释都有道理，都情有可原，都能解释得通，那么如果这种情况发生的话，法院和仲裁机构他们的判决，一般都是倾向于投保人和被保险人的利益，也就是我们客户的利益。</p>
<p>嗯，也就是正常情况下，我们是可以得到赔偿的。当然，通过保险的系统学习，大家会了解的更多，就更不用去畏惧这些条文这些陷阱。</p>
<p>灵伶也曾经和从事保险代理人的朋友交流过，当客户投诉、跟保险公司对簿公堂的时候，保险公司很少情况下会胜出，那保险公司其实也很不愿意跟客户打官司，因为这样会明显地影响到公司的声誉，无论是保险公司赢了还是客户赢了，那对保险公司声誉都不好。所以大家对这个问题不用太担心。</p>
<p>其实在购买保险一事上，我们更需要担心的是，不专业的代理人，或者是各种渠道有意无意给我们带来的错误的信息。这才是最大的坑。</p>
<p>就比如说不专业的代理人，他们可能会为了销售告诉你一些错误的信息，那其实是很容易误导我们的，让我们有错误的认识。条款没有错，但是却会有一些误读条款的人。</p>
<p>2018年第一季度，银保监会数据显示保险投诉率达到41.63%。</p>
<p>投诉的主要内容就是部分营销人员片面解释产品条款，故意隐瞒免赔额、除外责任等.</p>
<p>最后，班班再次温馨提醒大家一下：</p>
<p>1、保险不是有了，买了就万事大吉了，一定要切切实实起到保障作用。<br>举个例子，我妈妈一个朋友说她买了保险，我一看，保额10万。要是真出了什么事，10万够干嘛的？这份保险其实根本起不到保障的作用。</p>
<p>2、保险的配置不是一劳永逸的。而是一个动态的过程。</p>
<p>继续举例子。假设你今年刚大学毕业，一人吃饱全家不饿。你买了一套保险。</p>
<p>那等你成家之后呢？有孩子之后呢？买房子背着房贷呢？房贷还完孩子长大呢？还有，通货膨胀呢？</p>
<p>我们一生的保险需求，要考虑伴随年龄的变化，自身的的经济结构，资产结构，收益目标，保险利益，对应的家庭责任以及生活品质的要求，所需要的保险产品都将随之发生极其大的变化。</p>
<p>3、买保险就跟买衣服一样的，要根据不同家庭的经济和风险情况，量体裁衣，合理设计。</p>
<p>再举个例子，你的朋友和你说，她最近用的某某精华效果特别好。你看看她的皮肤，好像是好了不少。于是兴冲冲去买了回来，结果爆了满脸痘~咋回事？朋友干性皮肤，你是油性皮肤。</p>
<p>保险其实也一样，最忌讳的就是听说别人买什么，你也买什么，每个人的情况不同，需要自己学会如何配置。任何资产配置的核心都是以当前实际情况为依托综合考量的结果。</p>
<p>可能有一些有意识的宝贝也会去看一些网络平台上大V的介绍。在这里班班也要提醒一下，不要盲目的听从一些理论讲解，偏听偏信，不管是保险配置还是投资理财甚至是其他的决断，都应该独立自主，从自身的需求出发去选择。</p>
<p>况且很多人经常是抛开条款来说的，然而保险最重要的就是条款。</p>
<p>但是很多宝贝可能就会根据一篇文章的介绍就去买了一个保险产品。</p>
<p>很多人也许都遇到过不靠谱的保险代理人，也买到了根本不适合自己的保险产品，其实还是因为我们自己不具备辨别的能力。</p>
<p>在这里班班也要强调一下，不管是保险配置还是投资理财甚至是其他的决断，都应该独立自主，从自身的需求出发去选择。</p>
<p>能够来到14天训练营学习的宝贝们，相信大家都是非常理性，非常正能量，有很强学习能力的。</p>
<p>如果大家要想要科学合理的配置自己的保险，除了选到一个专业的保险代理人，也需要做到自身能够懂得保险的正确理念和正统的基础知识，不说做到精深，至少要做到有概念会识别吧。如果我们自己一脸懵逼，那就是保险经纪眼里的软柿子。</p>
<p>但是只要我们知道自己需要买哪几类保险，怎么缴费，多少保额，需要在什么方面取得保障<del>分别应对的是什么风险</del></p>
<p>当保险代理人再想要忽悠你的时候，你就可以用你犀利的眼神告诉他：小样，你当我真是软柿子么？！</p>
<p>另外还有个关于小朋友的教育保险要不要买的问题 </p>
<p>这一点我和班主任团队的其他妈妈们都是不建议买的，因为教育保险的年化收益率赶不上通货膨胀 </p>
<p>其实目前看来教育金最好的储存方式是基金定投，这个下周一会讲到</p>
<p>在孩子长大一点后慢慢告诉他这笔基金是怎么操作的，让他们逐渐开始自己操作 </p>
<p>这样既可以从小培养孩子的财商，也可以为孩子积累一笔教育费用，简直是赢在了起跑线上。  </p>
<p>今晚的分享就要结束了，班班先带领大家回顾一下今晚的重点内容：</p>
<ol>
<li><p>保险作用：在风险发生后，转移风险，为我们兜底付钱，避免发生财务危机。</p>
</li>
<li><p>保险要优先考虑经济支柱，且保险要全面：意外、疾病及寿险。</p>
</li>
<li><p>要根据自身情况配置合适的保险，保险最重要的是保障，而非投资。</p>
</li>
</ol>
<p>班班再补充一下，我们为什么要学习保险知识</p>
<p>第一：为了防骗防坑，无论你是找保险代理人还是经纪人还是自己在网上买保险，都可能发现一些误导或者说是为了销售而刻意隐瞒的情况；</p>
<p>第二：为了更好的沟通，当然也不是说所有的保险代理人的宣传都会误导我们，只有我们学习了保险知识之后才可以真真听懂那些是即专业又可靠的建议，从而发现哪些是好的产品而哪些产品会更适合自己；</p>
<p>第三：以节省保费，除了通过线下代理人以外的渠道购买保险外，我们在网上购买保险已经是非常非常方便了，网上因产品丰富，选择到更合适的机率会更大些。</p>
<p>以上就是今天的全部内容了，谢谢大家。</p>
<p>愿认真学习理财的我们：活着是台印钞机，倒下是堆人民币！</p>
<p>答疑:<br>「买的商业保险交费几年了，亲戚介绍买的，感觉有点坑。是及时止损？还是继续交？」</p>
<hr>
<p>已经买过的保险，我不建议退保，可以咨询保险公司能不能减保缴清</p>
<p>「减保缴清？」</p>
<hr>
<p>减保缴清的意思就是说你的保费只交到现在为止，相对应的返还按比例下调。具体可不可以要具体看你的合同</p>
<p>「班班，我听了今天的音频课，看到有保险实战课，是学习了这门课就能自己搞明白保险条款挑选保险了吗？」</p>
<hr>
<p>是的，保险实战课的实例非常多，对保险合同哪里该看，怎样看作出详细的说明，并且教会大家如何根据自身的情况计算保费，经过系统的学习之后就可以自己挑选合适的保险产品</p>
<p>「学到了很多，但我还是不知道要买什么保险」</p>
<hr>
<p>「存的钱又会变少了的感觉」</p>
<hr>
<p>这个要看你的年龄，和你目前所处的家庭环境，买什么类型的保险一定要从自身的情况出发。<br>至于存的钱变少了，我不这么认为花一点小钱，提高自己的身价，简直不要太划算。万一有个风险来临，你没有保险，不是存款变少的问题，也许直接就没存款或者负债了</p>
<p>「没结婚前给自己配置险种推荐顺序是啥」</p>
<hr>
<p>给自己配置保险没有先后顺序，你并不能判定是意外险来还是疾病先来，所以最好一起进行配置</p>
<p>「那班班你会帮我看在手的合同吗？」</p>
<hr>
<p>保险课你们学完以后是自己就能看得懂，你可以自己分析一遍找我帮你参考，但是我不支持代写作业哦</p>
<p>「我身体健康，怕是只有意外险可以买了」</p>
<hr>
<p>你这个瓜娃子。。。。现在身体健康，不代表以后不会生病鸭，而且一旦患上了重疾，以后将没有保险可以购买！！！身体健康的时候是你挑保险，等生了病，你就再也高攀不起保险了。<br>趁现在身体健康，保费便宜，保障时间长，抓紧时间去配置你的保险，不要想着自己不会生病，你可以去医院肿瘤病房溜达一圈，没有任何一个人觉得自己会得肿瘤</p>
<p>「我咨询过朋友（代理人）跟我说消费型的保险没有保终身的，都是一年一年买的」</p>
<hr>
<p>可能你朋友的培训里，也是这么跟她说，事实是，消费型保险有终身的，只是利润太低，你朋友他们公司不卖而已</p>
<p>「班班，你早上说有优惠券，还有吗？」</p>
<hr>
<p>不多了，手快的白天已经找过我了，你需要的话私聊我</p>
<p>「年龄越大保费越大吗」</p>
<hr>
<p>没错，年龄越长大，保费也就水涨船高</p>
<p>「我已经买了两年了，但是保额有点低。我需要怎么办？」</p>
<hr>
<p>保额低说明的问题：你不具备专业的保险知识。我的建议是，尽快进行学习，然后去增加保障，缺哪儿补哪儿<br>不要再听忽悠了，给你自己一份合理的配置</p>
<p>「班班，我爸妈现在52岁，不知道还可以给他们买什么保险？有建议吗？」</p>
<hr>
<p>父母年纪大的，像50岁以上的，其实已经没有多少选择了。能买防癌险和意外险，医疗险可咨询下，如果保费能承受可以考虑。保险更需要未雨绸缪。比如我爸妈就是这个情况，年龄大了没有其他保险可以买，那我就是买了防癌和意外险。然后我计算了下，觉得自己得在5年后，给他们预备最少30万的医疗费用。现在就开始专门投资股票和基金，希望以后这30万的本金产出的利息补充部分的日常支出。如果要治病，那起码也不会一点准备也没有</p>
<p>「我也想给家人买保险，只是这个东西还是自己去了解，班班说的对。适合自己的才是最好的，反正是学习吧。希望明年上半年能把保险搞定，除了小白营还有课程推荐吗？」</p>
<hr>
<p>咱们小白营的同学有股票、基金、保险和开源四门实操课的优惠，现在优惠券不太多了，你可以来私聊我</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享06</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB06/</url>
    <content><![CDATA[<p>价值投资的基础&amp;选股票就是选对象<br>                                    爬楼密码：20200115晚<br>今天的音频课，大家都听了没？都听懂了吗？</p>
<p>作为立志要活成女王般女人的灵伶，来跟大家聊聊找对象的事情吧？</p>
<p>叮当，不要大意哦，知识点让你应接不暇！</p>
<p>是不是觉得很新奇，认为股票跟选男票（女票）有什么关系？这不是瞎来呐？男票（女票）是独一无二哒！ </p>
<p>当然了，我也知道有很多小阔爱，已经选择好了此生的独一无二珍品版，且已加盖印章（领证结婚），并且拷贝了复制品（娃），但是这个道理是通用滴嘛。</p>
<p>第一部分：选股票与找对象的关系</p>
<p>股票是什么，它究竟有怎样的魔力，总让我们爱恨交加，想要不敢要，想留不能留。</p>
<p>股票给人的感觉一直是很复杂，晦涩难懂，其实我们完全可以用一种轻松、有趣的方式从另一个角度进看穿股票，进而掌握它，比如选对象，如果你是个情场高手，那选股票对你来说也不会太难。</p>
<p>有些宝贝肯定蜜汁疑问了：班班，选股票和选对象他俩儿有啥关系呢？</p>
<p>灵伶先问大家哈，当大家提到股票的时候，第一反应是什么？</p>
<p>我猜很多同学提到股票就会想到“风险”两个字，那大家觉得风险究竟是何方神圣？<br>可能会有一部分人联想到套牢，倾家荡产；<br>可能会有一部分人想到红绿色盲；<br>还有一部分人可能会想到天台……</p>
<p>好像几乎所有人对“风险”的理解都停留在了不好的一面上。</p>
<p>当你跟别人讲到某某东西有风险的时候，大多数人都是会有害怕和恐惧的心理，从而拒绝去了解了，灵伶以前也是这样。</p>
<p>因为害怕所以拒绝，因为拒绝所以无知，从而更害怕，听起来就是令人毛骨悚然的恶性循环。</p>
<p>正因为如此，我们才更要一鼓作气去扒开它，看看里面的骨架。</p>
<p>风险未必就是危险，我学完以后，发现股票也没有我们想象中的那么可怕啊</p>
<p>我们常常比喻，买股票就像找对象，从茫茫人海中挑选了一个人来谈恋爱（挑选并购买股票）。</p>
<p>在恋爱的过程中，也许会随着深入了解，从而使你们的感情升温，进而修成正果，结婚生子（获得盈利）。</p>
<p>但同时也会遇到一些挫折，比如你发现他手机里一条异性发来的暧昧信息，你很生气。然后你们吵架，感情迅速降温（股价下跌），这就是风险了。</p>
<p>你们吵架，有可能回去冷静一下就好了，也有可能你们再也回不到过去了，这就是未知与不确定。所以，风险是一种不确定性。</p>
<p>投资股票确实具有不确定性，但是，历史证明，长期来看,中国的上证指数，1991年到现在，增长31倍多，年化收益率超过14%。而实际上，从中国股市成立那天起，任何一个时点进场，持有十年，最终都有不菲的收益！所以，作为长期品种，股票具有很强的投资价值。相信大家听过app的课程后,对股票已经有了全新的认识。</p>
<p>因此，对于风险，我们不能一味的恐惧害怕，也不能一味的忽视。我们股市的定律是7亏2平1赚，全国1.2亿股民，大概有1200万人可以从中赚钱，也是一个不小的数量啊。</p>
<p>再比如说，我们辞职创业，可能小富即安，可能碌碌无为，也可能一不小心就做成了大事业，这就是一种不确定性。如果你不愿意面对风险，那么你可能本身就在风险之中，只是还没有意识到。</p>
<p>真正的风险是什么？</p>
<p>真正风险的不是风险本身，而是你不知道风险在哪。就像渣男不可怕，你不知道渣男是渣男才是真的可怕！昂当然也有渣女，班班要为男同胞们争取一点点尊严！</p>
<p>很多人连股票究竟是什么，为什么股票的价格会涨涨跌跌都不知道，就一头脑的扎了进去，不亏你亏谁呢？</p>
<p>我们都说投资有风险，但是你不投资就没有风险了吗？<br>​​<br>有一种投资风险叫做：你什么都没有做，但是你的财富也在不断蒸发，这就是我们的通货膨胀（看上图）。</p>
<p>我们已经讲过通货膨胀和货币贬值。</p>
<p>对于还年轻力壮、尚有收入的我们来说，如果因为畏惧风险，而将所有资产放在银行存款中，从表面上看是避免了损失的可能性，但是却遭受着通货膨胀的侵蚀，财富不仅没有增长反而不断缩水。这，本身也是风险，只是很多人并没有意识到。</p>
<p>什么叫逆水行舟、不进则退，就是酱紫</p>
<p>更重要的是我们需要理性的去识别这个风险，而不是畏惧他，盲目决绝也是一种不正确的做法</p>
<p>记得一位投资大牛说过这么一句话:任何一次投资决策的失误都是由于投资知识的不过关导致的。反过来说，我们只有有了过硬的投资基础知识，加之良好的心态，才能在投资市场占得一席之地！</p>
<p>有的宝贝看过app课程，还要预设心理障碍。</p>
<p>常有人会问我，班班股票会不会很难呀？</p>
<p>在我看来，这就要回到恋爱中去找答案了，为啥这么说呢？</p>
<p>因为找股票就像找对象，不懂的不碰。</p>
<p>你是要找一个长相厮守的人的，而不是找一个临时依靠。<br>只有优秀的人才能让你的生活滋润又省心（获得长期收益），万一遇到渣男泼妇就是毁了自己一辈子，（本金又亏损了）。</p>
<p>所以，大家在前期恋爱（选股）的时候，最好仔仔细细地了解清楚，TA是不是单身、是不是有能力，是不是对你好，这样才能降低未来婚姻不幸福的风险。</p>
<p>就像投资股票，长期绩优、收益稳定的好公司才是我们的首选，因为好公司能够不断成长、盈利，所以我们能享受分红和股价上涨带来的收益。</p>
<p>当然，是股票就有风险，但是一贯表现良好的白马王子出现的可能，可比那些青蛙变成的王子（偶尔几年盈利的公司）低得多啊！</p>
<p>而且好在，投资股票和恋爱结婚也有点不同。怎么说呢？</p>
<p>按照社会的道德约束，恋爱结婚，你只能选一个人，就像所有的鸡蛋放在一个篮子里，篮子翻了自然血本无归，就算即使止损（卖出股票离场），也未必能全身而退。</p>
<p>不过股票就不同了，你可以一次性选四五六七八只，甚至二十只，也没有人说你花心，毕竟收益是我们的第一要义。鸡蛋分开几个篮子放，万一其中一个出了意外翻了，没关系，其他的都还好好的。</p>
<p>所以，老祖宗的智慧真是博大精深啊！</p>
<p>“鸡蛋不要放在一个篮子里”这一句，就道出了规避股票风险的精髓——分散风险。</p>
<p>这里，我们可以随意假设一下：</p>
<p>有一天，你穿越回了古代，当上了乾隆爷，武则天~</p>
<p>嗯，这次，你通过仔细筛选，挑出了十个爱妃，并成功将他们一次揽入怀中（买入股票组合）。</p>
<p>当然，在一起（持有）的基础一定是对方的发展能满足你的期待，在以后的生活里（公司不断发展的过程），难免遇到挫折。</p>
<p>比如，其中有一个人事业发展不顺利（股价下跌），等了一段时间后也完全没有好转的迹象（不再持续盈利），甚至还被你发现居然和其他人非常暧昧，欺骗你的感情（美化财务报表），这种情况，你是选择分手还是选择坚守？</p>
<p>通常情况下，小两口吵架，有的人选择就此拜拜彻底离开他（卖出），有的人选择自己冷静一下，再给他一次机会看看以后如何（继续持有）。</p>
<p>但是注意，现在我们可是有10个人啊！</p>
<p>两条腿的青蛙不好找，两条腿的白马王子/白富美可不止他一个！</p>
<p>1个出了问题，我们还有其他9个啊，其他9个人可是一直优秀地成长着，还对你特别好（收益回报），完全不用着急。</p>
<p>所以说，既然投资一只股票的风险很大，那很简单，我们可以通过分析、筛选，选入一组好股票来分散风险。</p>
<p>万一哪个变心了、变坏了（公司亏损、股价下跌），没关系，其他股票的表现也很棒，足以弥补这一两只的损失了。</p>
<p>划重点：选择高回报的投资组合，是省心又省力的好方法</p>
<p>第二部分：价值投资的基础概念</p>
<p>在讲价值投资之前，我先来讲一个很著名的故事——沙丁鱼罐头的故事。</p>
<p>这是华尔街很经典的一个故事。几位炒家在交易一罐沙丁鱼罐头时，每次交易，一方都以更高的价钱从另一方手中买进这罐沙丁鱼罐头，不断交易下来，大家都赚了不少钱。有一天，其中一位决定打开这罐沙丁鱼罐头看看，了解一下为什么一罐沙丁鱼罐头要卖这么高的价钱。知道他发现了什么吗？他发现这是一罐已变质发臭的沙丁鱼罐头。他以此指责对方卖假货，对方却回答说：谁要你打开的？这是用来交易的，不是用来吃的！</p>
<p>大家觉得这个故事好玩吗？</p>
<p>其实，这里的沙丁鱼罐头就是股票，因为股票可以交易，就像沙丁鱼罐头一样，很多人只盯着价格，而忘记了它背后的价值，这些人就是投机者。沙丁鱼头罐头就是沙丁鱼罐头，怎么炒作，也不会变成别的。投机者们买入，也只是因为指望有人以更高的价格接手。</p>
<p>投机的着眼点，就是价格。投资和投机有时候不是很容易界定。投机也不是说就不好，但是最可怕的是我们把投机当做投资。</p>
<p>我们投资股票，通过对上市公司盈利能力的分析，例如：可以在年报三表中通过小熊定理、商业逻辑等，找到能赚钱的好公司，因为能够不断盈利，所以我们能享受分红和盈利带来的股价上涨。</p>
<p>而投机，是通过判断市场走势来采取相应行动，是通过价格变动来追涨杀跌（涨的时候买进，跌的时候卖出）。投机并不在乎内在价值，只寄希望于有人以更高的价格接手，俗称博杀（杀即傻）。</p>
<p>大家想一想，股市听消息到底算不算一种投机？</p>
<p>投机者们关注的只是股价是否会上涨。那到底是什么使股价上涨呢？短时间的上涨可能是公司放出的利好消息，可能是政策因素，但更多时候，我们不知道为什么。也许有人说，是不是有庄家在操作的，拉抬股价忽悠小散接盘？不然为什么每次我一买就跌、一卖就涨？</p>
<p>2015年年中的时候，A股发生了崩盘。为什么？因为股市估值太贵了。尽管证监会使出了九牛二虎之力，为了保住股市不跌想了很多办法，甚至成立了国家队，筹集了1.2万亿的资金，堪称是最大的庄家，结果呢？最终还是泥沙俱下，反而因为当时规定的不可减持禁令一出，导致2016年6月的再次大跌。</p>
<p>不否认庄家的操纵确实能使股价一时涨跌，但是长期来看，价格是必然回归价值的。任凭你财报作假也好，找人做局也好，政策救市也好，情绪狂热也好，都是不持久的。</p>
<p>有些人就说，我自己听消息无法判断，那我听荐股群的好了，我朋友说有个荐股群特别准。</p>
<p>在这里跟大家说一下荐股群的运作方式。</p>
<p>首先,他随机给10000个人发邮件，有一半邮件预测明天股市跌，另一半邮件预测明天股市涨，反正股市就只有涨和跌这两种情况。然后,到了第二天，他又发邮件给他预测成功的那5000个人，同样是一半涨，一半跌，以此类推。</p>
<p>人的心理都是这样的，要是连续很多次都预测正确，就会无比相信，觉得遇到股神了。最后，差不多剩几百个人的时候，他就发邮件告诉大家要成立荐股群，那么大家就对他深信不疑了，自然而然就会参加，有赚钱的机会当然要去。</p>
<p>当然,大师失手一两次也是意外嘛，况且在牛市里真是买什么都涨。这个就是荐股群的真相。</p>
<p>所以，以后有朋友或同事给你推荐荐股群的时候，千万不要上！当！受！骗！哦！这就是一个概率游戏。另外，荐股群多存在于牛市。这就是幸存者偏差，现在微信上很多美女加好友，也是类似的手法。</p>
<p>荐股群不可信？有些小伙伴可能会说：我不信荐股群，那我听专家的，电视上的股评家很专业。这里要说到之前看到的一则新闻。这则新闻，说的是上海破获首例『抢帽子』操纵证券市场案。<br>​​<br>大家先自己看一下这个新闻。</p>
<p>像我们这样的小散，要是不懂自己独立判断，遇上朱某这样的股评家，就惨了。他还是个小级别的。为啥班班这么说？再看下这张图。</p>
<p>看到这些曝光时，真是觉得（韭菜）处境堪忧。这样的事件发生的并不少。总结起来，你把股评家当老师，他们却把你当成韭菜割。</p>
<p>第三部分什么是价值投资</p>
<p>大部分老司机都以为自己买卖股票是这个样子的。这也是所谓的最佳买入点和卖出点。买在最低点，卖在最高点。<br>​​</p>
<p>但是实际情况是这个样子的:<br>​​</p>
<p>为什么他们会判断错误？大家想一下这个问题。</p>
<p>因为不知道其真正的价值，他们无法判断股票的贵贱。这里我讲一个价值投资非常基本的东西——估值，这是整个价值投资派的核心。</p>
<p>比如一个西瓜，你通过了解历史价格、今年的产量、今年夏天的天气温度等因素，估计一个西瓜价值3元钱。但是，市场这个时候开始宣传一种论调，吃了西瓜长生不老，西瓜的价格被炒到了30元，而且据说还会涨价，西瓜是无价之宝，买入后可以传到曾孙子那一代。小阔爱们，你们买不买？</p>
<p>因为你已经知道这个西瓜只值3元，你会说肯定不买，但如果不是西瓜，可能是别的什么产品呢？还能清醒的分辨，能保持清醒和理智吗？</p>
<p>如果你已经知道这个西瓜只值3元了，但仍然选择听消息去购买一个根本不值这么多钱的东西，其实这是非常不理性的，这就是人性的贪婪。而这些听消息派，往往是在股市，甚至整个投资市场死的最惨的人，就是我们喜闻乐见的韭菜了。(PS:股市中的“割韭菜”的意思是一部分革命先烈亏本离场，新生力量又加入股市，就像韭菜一样，割一茬很快又长一茬）</p>
<p>那么反过来，今年大旱，西瓜收成不多，天气又炎热，你估计一个西瓜价值10元。这个时候市场又传来消息，西瓜吃了会肾虚啊，会得癌症啊之类的，西瓜的价格被压到了5元。你买吗？</p>
<p>如果你在5元买入以后，价格继续跌到3元，甚至1元呢？你会选择卖出吗？一个西瓜就值10元，因为市场暂时的不理性导致的下跌，不是我们卖出的理由。如果我们再次分析，西瓜确实价值10元，那么跌到1元的时候，应该再多买一些，当然，西瓜只是一个代称。</p>
<p>在实际生活中，大部分人都是无法做到上面大家所说的“卖或者不卖”。他们会在下跌时割肉，特别是恐慌式下跌，这就是人性的恐惧。</p>
<p>巴菲特有一句名言:在别人恐惧时贪婪,在别人贪婪时恐惧，讲的就是如何克服人性的弱点。</p>
<p>你首先要学会怎么分析一个西瓜的价值。如果你不懂西瓜的产量，评估不了今年的消费，那么就很容易被贪婪和恐惧左右了，不是吗？投资的前提就是我们要学会估值，这是核心。如果没有估值这个前提，那么所有的一切都是空的。所以，大家的重点就是要学习如何估值，我们学习投资理财就是要学习如何正确的估值。</p>
<p>第四部分：价值投资如何赚钱</p>
<p>说完了什么是价值投资，接下来讲一下价值投资赚的是谁的钱？</p>
<p>我们在讲投资骗局的时候分析过，如何防范骗局，就是看赚的到底是谁的钱。</p>
<p>那价值投资赚的是谁的钱呢？</p>
<p>先给大家一个公式：资产的收益=通货膨胀+自身产出+价格的波动</p>
<p>价值投资者赚的就是以上三部分的钱<br>一、通货膨胀，是央行放水的钱。<br>二、自身产出，是优秀上市公司发展盈利带来的钱。<br>三、价格波动，就是割韭菜的钱。</p>
<p>分别解释一下：<br>一、央行放水，导致大量的钱涌入股市，助推股价高涨，通常发生在降息周期。同时央行放水，导致通货膨胀，最终导致资产价格的上涨。所以对抗通胀最好的办法是买入资产。</p>
<p>二、优秀上市公司发展盈利带来的钱，这个很好理解。企业盈利之后的分红，公司净资产增加导致的股价上涨都是这部分钱。</p>
<p>三、割韭菜的钱。<br>格雷厄姆把股市比作市场先生，市场先生一会情绪高涨，一会情绪低落，反映到股价上，就是价格的波动，有时也叫牛熊市的转换。正是因为市场的波动，给了价值投资者在低估时买入和高估时卖出的机会，从而取得超额收益。</p>
<p>我们不要做韭菜，而要做收割机</p>
<p>化繁就简，我们只需在低估的时候买进，高估的时候卖出就可以了。因为大多数人并不是用理性在决定买入和卖出，而是任由自己被贪婪和恐惧控制。他们做出不理性的决定，就会导致股价上窜下跳，有时候出现不合理的高估和低估。</p>
<p>如果你懂得去给公司估值，明白一个公司的真实价值，就可以在股票价格低于公司估值时买入，高于公司估值时卖出。不管股价是否波动，也能安心持有，享受公司增长本身带来的收益，安安心心做个股东。投资者着眼于长期的利益，而投机活动只着眼于短期的价格涨落，以谋取短期利益。</p>
<p>我们选择价值投资，需要量化分析的能力，也需要平和的心态，并且有持有的耐心，而最终我们将收获安全的超额收益。这个道理，放在股票也好，放在基金也好，都是一样的。</p>
<p> 再具体到如何分析一家公司？最重要的，就是看财报！<br>分析三表的各项重要指标，财务报表是上市公司交出的体检表，我们需要给通过体检表的各项数据来分析判断，这家公司是不是健康的？是不是有哪些指标存在问题，偏离了合理的范围？财报上面有投资者关注的各项数据，包括营业收入、营业成本、净利润、净资产收益等。在财报的开头，往往还提供了公司一年的发展情况，以及未来的发展目标，这很大程度上，反应了公司管理层的市场敏锐度和战略眼光。</p>
<p>也有小伙伴可能会问，财报是过去的数据，而股价反应的是当下和未来的发展，会不会不准？</p>
<p>大家要明白财报对投资的意义主要在哪里。</p>
<p>第一，罗马不是一天建成的，公司也不是一夜之间变好或者变坏的。<br>公司的发展是一个逐渐变化的过程，就像苹果是慢慢腐烂的，苍天大树也是从树苗长起来的。如果一家上市公司的产品好，有市场，有竞争优势，我们就可以在财报中看到营业收入的逐步增长。如果竞争大，日子不好过，我们也可以在财报中看到利润逐步下滑，应收账款逐渐增多的过程。通过观察过去财报变化的趋势，可以使我们当下的判断更准确！</p>
<p>第二，财报的意义<br>财报在一定程度上，可以检验上市公司在行业内的竞争能力和所处水平。跟同行业的财报对比，这家公司的营业收入怎么样，占了多少比例？利润与同行相比怎么样？是不是成本更低更有优势？在一个班级里找到一个好学生，成功的概率会更大。</p>
<p>第三，一年的财务数据漂亮并不能说明什么问题。<br>但如果公司最近三年、五年、十年的数据都很亮眼，那么至少说明，这家公司在过去十年里都是一个“好学生”。好学生拿高分的概率，比成绩差的学生拿高分的概率总要来的大。这就是我们通过分析财报，来判断一家公司股票投资价值的大体思路。具体在股票实操课里，会教我们用投资者视角，来分析财报的方法</p>
<p>很多小伙伴说，很多财报都是虚假的，能看吗？准确吗？美国50年代的时候，巴菲特成名的时代，也是年报大量作假的年代，但是巴菲特照样每年30%的收益。像巴菲特和格雷厄姆这样的价值投资者，都遇到过年报作假的问题。财报作假，并不会、也不可能妨碍价值投资赚钱。</p>
<p>而且，我们会有各种指标去判断一家公司的财报是不是作假了</p>
<p>比如，一家公司一整年的营业收入全部都是应收账款，没有一分钱是实际拿回来的，就说明这家公司存在一定的问题。那么，即使这家公司的利润再高，盈利能力再强，我们也要再三考虑</p>
<p>怎么判断一只股票现在适合买入？<br>首先，我们需要知道股价是怎么来的！股市是股票交易的地方，有很多人买，也有很多人卖。只要有人愿意卖，有人愿意买，就可以成交。就好比拍卖会，如果一个东西大家都想要，这时候卖的人就要提高价格，因为都想多赚钱。你愿意买，我比你更愿意买，我报更高的价格，我就买到了，你却没买到。因为要的人多，报价就抬高，就容易成交。反之，谁都不想买，都想尽快出手，就得降低价格出售。</p>
<p>这跟菜市场一个道理，下午菜便宜，为啥？因为卖菜人今天不卖，明天行情不好，价格会更低，还不如今天低一点卖。问题是，你想卖掉，我也想卖掉，所以我的卖价必须低于你的才能更容易出手，这样价格就越来越低。</p>
<p>因此，短期来看，股价是由供求决定的。但长期来看，是由它的内在价值决定的。</p>
<p>那么，如何判断是否适合买入？<br>股票的价格谁说了也不算，只能依靠它本身的内在价值。价格低于内在价值，那就是低了，可以考虑买入。如果价格高于内在价值，那就是高了，这个时候买就会很危险！</p>
<p>那么，这里就需要用到估值了。</p>
<p>估值就是根据财报的数据，用各种方法去判断这家公司到底值不值得投资？值多少钱？什么时候可以买？</p>
<p>前面已经用西瓜的例子详细阐述过了估值的过程了哦。</p>
<p>第五部分：价值投资的其他应用</p>
<p>估值和财报分析，除了可以应用在对人的分析上外，大家想想看还可以用在哪里呢？</p>
<p>价值投资，本来就是用来分析公司的，现在班班告诉你们，它还可以应用于很多方面。</p>
<p>比如创业，你需要知道这个行业的前景如何，赚钱的商业逻辑、要招人、要控制成本，要拓展和维护客户等。</p>
<p>比如应聘或者跳槽，你就要了解你应聘公司的情况、像赚钱的逻辑、发展前景、业务水平、薪酬待遇、晋升空间等等。这些都是需要分析的。</p>
<p>再比如，找对象，都可以用估值来进行的哦。</p>
<p>下面给大家再讲一个故事吧，我们长投帅气分析师墨子乔的故事，讲讲他如何通过价值投资分析找到了自己的职业规划。</p>
<p>分析师墨子乔，以前也是从小白开始，一口气把股票的初级、进阶、实战课程全部都上完了（大神，班班比不了比不了）。</p>
<p>大家知道，我们价值投资最重要的一件事就是给公司估值，而分析财报又是估值的重要一环。</p>
<p>这位大神看中了一支股票，是一家高科技企业，然后分析了公司的年报、护城河等等所有可以搜集到的信息，然后分析完了之后，他就买买买啦，大概是15块钱买的，最后涨到了40。</p>
<p>嘿嘿，有没有小伙伴表示特羡慕的？更离奇的是，他在分析这家公司的时候，发现了这家公司的很多优点，竟从而更改了自己的职业规划。他拿着自己的分析结果去参加了该公司的面试，这公司HR惊的差点掉了下巴，可能公司自己的财务和市场运营都没有如此彻底的分析过自己公司吧？</p>
<p>这其实就是价值投资的另一个好处，那就是：通过分析，你对行业能够有更深刻的了解，从而能够找到这个行业的痛点。</p>
<p>如果能拿着这样一件大杀器去求职，还具备那么强的分析能力，基本你的求职结果是不用愁了。强大的分析能力，不仅是投资时的厉害武器，也是几乎任何工作中，都会用得到并且非常重要的能力。</p>
<p>投资股票，分析年报，其实不仅仅能够说，我们能够找到好公司好股票。在这个过程中，你会发现你本来从下往上的视角，变成了从上往下看。那些学生时代的盲点，行业的发展前景怎么样，自己所在公司怎么赚钱的，自己所在部门在公司的地位，都可以通过你的分析获得答案。你会把初入职场时只想着的升职加薪，学生时代只想着的找份稳定或者所谓的好工作，切换思维，变成你怎么看你们公司和部门，判断出自身的价值和天花板在哪里，这就是跳出你的圈子去思考。</p>
<p>我们学习价值投资的两个重要理由：<br>1、能够从分析中获得量化数据，理性投资获得收益；<br>2、能够运用到自己的工作生活中，找到属于自己的位置。</p>
<p>好了，今晚的分享结束啦，大家对股票是不是有新的认识了呢？</p>
<p>答疑：<br>「班班财报在哪看」</p>
<hr>
<p>「用什么APP」</p>
<hr>
<p>财报不是APP上看的哈，各家公司的官网有他自己的财报可以看，我们可以借助一些专业的工具来提取财报的数据做出筛选和对比</p>
<p>「好像乐视就是作假了？」</p>
<hr>
<p>嗯哼，假的不能再假了~~其实我上实操课的时候，老师带我们分析过乐视网的栗子，在他倒下之前两年就不会选择去买他了</p>
<p>「选股票之前有哪些指标和数据是必须得看的呢？」</p>
<hr>
<p>选股票需要看的数据还是挺多的，比如PE、PB、ROE、应收账款等，而且只看一年的也没啥用，需要连续看几年的，看的时候还有规则和技巧<del>这些在实操课中都会讲得非常清楚，数据也有可以直接获取的地方，只要下载一个excel就可以搞定啦</del></p>
<p>「这股票课用不用天天看啊，我朋友炒股就是时刻关注着情况，我没有时间的，小白营都是挤着时间学」</p>
<hr>
<p>对于我们班的小可爱们学会当然绰绰有余啦～而且肯定不会教大家每天都盯盘哦，一是时间不充裕，如果这样耗时耗力，我的老板估计早就赏我炒鱿鱼了。选股的方法很重要，到底怎么估值怎么买卖，买多少，要花多少钱才是我们要学的核心内容呀</p>
<p>「我想问一下实操课咋上呢？是不是跟现在一样的？」</p>
<hr>
<p>咱们实操课一共是四门，股票基金保险开源，其中股票和基金与现在的训练营的模式一样，音频课+微信群授课，保险、开源是纯音频课，随时激活随时听，据我所知已经有小宝贝开始听保险课了</p>
<p>「咱们不是还没毕业呢吗？这么早就开始学实操课？」</p>
<hr>
<p>团购优惠券少呀，名额反正就那么多，没了就没了，而且现在实操课排期靠前的都抢完了，周一的时候还有过年期间的课，现在就只有2月10号的课了，再等毕业emmm~你比别人就起步晚了</p>
<p>「感觉先慢慢听完小白营比较好」</p>
<hr>
<p>当然可以呀，本来就是先学完小白营，再学实操课的。小白营我们学的是一整套的理论基础以及一些基本的投资心态，那我们小白营学完之后，后面的实操课就是开始实践了<br>只是说报名现在已经开始了，我们班已经有不少小阔爱报好了，他们报的是2月10日的基金课，还有3月6日的股票课<br>因为现在是有68折，将近800块钱的优惠，这个优惠不是无限量的。后面的实操课，需要专业的班班跟助教一对一的去服务大家，优质的老师资源有限，所以只能针对咱们班的作业提交量分来一些固定的名额，那这个名额用完之后你可能就要去原价报名了<br>不过我建议大家一定要一鼓作气，学习这种事情不要去耽搁。我11月的学员到现在学费都赚回来了，那些说自己忙自己穷一直没学习的到现在也还是忙还是穷一个月的收益就够终身可以用的技能，错过就会有点亏</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享07</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB07/</url>
    <content><![CDATA[<p>做自己的阳光<br>                             –灵伶班班的涅槃重生<br>爬楼密码：20200116晚</p>
<p>各位宝贝，晚上好鸭~接触了这么多天，不知道你们对我有没有一点好奇呢？今天啊，灵伶想给大家讲讲我自己的故事。</p>
<p>先从我个人简介说起吧，其实你们应该都已经对我很熟悉了吧，灵伶，女，坐标九朝古都，34岁，身上的标签特别多，国企职工/小白营班主任/保险规划师/麻将馆小老板，妥妥的斜杠青年，还是个已经当姥姥的单身阿姨。</p>
<p>纳尼？你们有没有惊掉了下巴？姥姥吗？？快把嘴闭上哈，我们家呀，平辈之中我最小，我表哥家的闺女–我侄女都32岁啦，还有个不到3岁的娃娃，所以每年，我这压岁钱出的哗哗的，还没有收回来的机会，熏疼~</p>
<p>我出生在一个普通家庭，吃喝不愁，猫狗双全，人生赢家；初中时是个问题少女，把老妈吓得给我转学，高中以后转型成了老师眼里“聪明但不用功”的孩子，随便学学考个差不多的分数还挺沾沾自喜，混着混着就上了大学。</p>
<p>20多年要风得风要雨得雨，一路走到迈进工作大门。还有俩月才毕业，工作父母就已经安排好了，国企，稳定，离家近，走个面试过程就上班去了。工资水平不咋地，基本够花，也基本月光，但是很清闲。爸爸妈妈还给我全款买了车房，妥妥的人生赢家既视感吧？？对，我以前也这么想的，每天的生活就是跟朋友聚会，打打麻将，唱唱歌喝喝酒什么的，潇洒得不行。现在想来，我浪费了太多太多的时间成本。</p>
<p>关于投资观念萌芽，我只想过买房。第一次跟父母提起买房大概是初中的时候，哈哈，是不是还挺有先见的<del>后面也提过几次，但是父母都是国企职工，每次就一句，房子够住就行了，要那么多干什么？剩下的就是教育我，要好好工作，挣一个花一个最多了，要是能存半个，更好。千万不要挣一个花俩，blablabla</del>这就是我父母对我财商的全部启蒙。不得不说，这么多年我再难也没欠过债，就是得益于此。但也，仅限于此。</p>
<p>这头一稳定下来，噔噔噔噔，surprise！！！以前知道我早恋想把我活剥了的父母开始各种物色人选给我相亲，恨不得今天相亲，明天结婚，三年抱俩。</p>
<p>Emmmm，听到这里你们有没有觉得有一丝无聊？别急，大龄奇葩小姐姐马上就要出事故了</p>
<p>相亲相到28，感觉免费逛了好几年动物园。有一句话怎么说的来着？根据你相亲对象的水平，就能知道在介绍人眼中你大概是个什么货色。</p>
<p>看到这句话后，我对自己产生了深深的怀疑。我赶脚我爸妈是不是生了个伪劣产品。</p>
<p>可能相比咱们班一些宝宝来说，我的前半生简直幸福到起飞，没有遇到过太坏的人，也没有经历过太坏的事。造成的后果就是我这人没什么心眼儿，碰到对我好的人就恨不得掏心窝子，完全不懂社会险恶。虽然是个女孩儿，但是性格叛逆，倔强，自己看好的路总想去试一试。免不了要跟父母吵架，觉得他们不懂我。</p>
<p>28岁那年相亲，终于遇到一个看起来基本顺眼的，除了家庭条件比我家差点以外，其他方面可能势均力敌。我是说可能。为啥呢？因为我俩就是super叛逆女以及超级妈宝男的组合。以我现在的眼光看这件事儿绝对是有问题的，当然，那时候，我一无所知。<br>​​<br>谈了一年恋爱的我(当时我都谈了点啥？？净顾着玩儿了吧！！)在29岁那一年一脚踏进了黑洞。</p>
<p>相比起恋爱期间的“乖宝你跟我妈之间有啥问题，你跟我说，我去解决”，到婚后的“我妈不就是XXXX，你还想咋”，我这颗傻白甜的心经历了无数次的摧毁。</p>
<p>平常上班不在家，我买了个扫地机器人，白天代替我在屋子里转悠转悠，婆婆话里话外的挤兑说我不做家务；我们没住在一起，但每天都要求老公回家吃饭，甚至连我朋友结婚婆婆都打电话说“她同学结婚你让她一个人去吧”；饭后老公刷一次碗，婆婆就吊黑脸，还要私下里跟他说，别惯着我……<br>后来我妈妈看着扫地机器人挺好用，又让我买了个，我跟老公说顺便给婆婆也买一个吧，谁知她不要也就罢了，还说我妈妈不活动活动人就变懒了。简直是喵了个咪？？活动就只能做家务吗？我就想让我家老太太出去玩儿，有空了逛逛公园旅旅游不好吗？公公的态度也差不太多，据说我们婚礼那天儿子第一次没在家住，还大哭了一场。</p>
<p>这样的事几乎每天都在发生，婆婆每次训我的时候老公都是一个坚定的沉默者，回家了还要对我说“我妈也没说啥呀，你想咋样？”</p>
<p>当每做一件事都要被他们指手画脚后，我，协议离婚了。</p>
<p>离婚可以说是人生中的一件大事，但对于我来说，简直是跳出火海凤凰涅槃，用投资方面的术语来讲，应该叫及时止损了。</p>
<p>幸运的是，离婚这件事我收到了家人朋友的全票赞同，不幸的是，离婚手续办完后一个星期，我前婆婆带着我前夫他二姨找到了我的家。她们来干嘛呢？她们来要谈恋爱的时候前夫给我买的3000多块的金首饰。</p>
<p>为什么要这3000多块的金首饰呢？因为结婚除了订婚彩礼2W元，结婚当天改口费2W元，我只要了一个40分的钻戒。大概8000多块吧，总共不到5W元。我爸妈改口费回礼1.5W，并且车房装修，都是我的。父母当时说，不求钱，只求对我好。</p>
<p>共同生活只有两个多月，前夫的钱我一分都没要过，没花过。反而是离婚时，他说他没有积蓄，我给了他1.5W元，只求尽快离婚，一别两宽。</p>
<p>我仔细想想，大概真的想不出什么能来找我要钱的借口了。</p>
<p>离婚后我一个人生活，值钱的物件基本都寄存在母亲那里。面对我前婆婆那张脸，我实在是气笑了，3000多块的金子，我看不到眼里去。但说正经的，晚上10点多跑来找我要，我也拿不出来。我总不能为了这点东西大晚上跑回父母家去让他们担心吧？</p>
<p>于是我把扔在角落里的钻戒拿出来了。我说你们要的金子，我拿不出来，那也不值钱，这个钻戒更贵，你们拿走吧，以后不要来了。</p>
<p>拿了东西就走了吗？没有。</p>
<p>对方在我家门口骂大街，什么难听说什么。我是真的气急了，冲过去跟他们理论，推搡了起来。不得不说，干了一辈子工人的两个50多岁的老太太，比起我这种天天坐办公室还不爱运动的(胖)渣渣，战斗力强了不是一点半点，很快，我就脑震荡趴地上了。俩老太太打一枪换一个地方，警察还没到就跑了。警察来了之后把趴在地上的我送到了医院。</p>
<p>完事儿了吗？没有。</p>
<p>第二天我前夫他二姨去公安局报案，说我把她腿打骨裂了，要我赔她15W。然后就是一次接一次的问询和笔录。家里一片愁云惨雾。我没打她，我心里清楚，警察看了监控，她好好的自己走回了家，没什么证据，也抓不了我。</p>
<p>只是后来我的律师说，从医学上来讲，骨裂的患者一开始有可能没有剧烈的痛感，所以第二天才发现受伤，就可以用这个讹我。谁知道她回家路上有没有自己摔一跤呢？局面对我很不利。</p>
<p>我做好了所有准备，请好律师，打官司也好什么也好，死也要跟他们磕到底。</p>
<p>但这件事儿每天都在折磨着我父母的神经。</p>
<p>小时候我觉得我爸是个英雄，什么问题都能解决。可这次我爸偷偷把钱赔了。还哭着跟我说，爸爸挣钱都是为了你们娘俩，从出了事儿，你俩连笑都没笑过一下。如果不能让我的家人过得好，我要钱有什么用呢？</p>
<p>我突然意识到，我爸老了。</p>
<p>我妥协了。</p>
<p>钱赔了，结束了吗？还是没有，这些人真的一再刷新我的三观下限。</p>
<p>对方家人找了无数三姑六婆，在我单位散布谣言，说我让他儿子净身出户，说我把他家亲戚打到住院。我坐在办公室里都有人来“参观”我，说想看看这么恶毒的女人长什么样儿，我每天觉得自己像是一只困在玻璃房里的黑猩猩。我的同事极力解释，并没有人相信。</p>
<p>过了半年吧，终于没人来了。</p>
<p>那时候我真想辞职啊，可几年的国企生活让我瞻前顾后。并没有一技之长和存款的我，辞职了该怎么生活呢？难道20多岁了还要去啃老吗？再说，我爸替我赔的钱，我，想还给他。</p>
<p>生活让我在开场抓了一手好牌，却被我打了个稀烂。无数次夜里做着噩梦醒来，总是质问自己，为什么把生活过成了这个样子？也想过从27楼一跃而下，最后败给了对父母的牵挂。但我开始抑郁、焦虑，大把大把脱发，看着窗户就想不自觉地走过去。我每天在心里对自己说，还没到最后，我不能这样退场，我要先把爸爸妈妈照顾好。</p>
<p>2014年年末，我赶上了一波牛市。就像课程里说的那样，连街边的卖菜大妈都在讨论股票。那时候我的全部积蓄只有3万元。我思考了一下，跟我妈说，妈，我想炒股。</p>
<p>你们看，韭菜就是这样炼成的。</p>
<p>在很多不懂股票的家庭里，炒股无异于洪水猛兽，会有各色各样的人来告诉你，都是圈套，都是骗钱的。可我妈这个老股民连眼皮子都没抬一下，说，去炒吧，趁年轻，想做什么就去做，还催着我去开户。同事也都非常支持我，给我讲解了一些股票基本规则，包括打新。在那时申购新股是要提前准备资金的，我妈给了我10W块，让我申购新股用。到2015年6月，半年内，我的13W总资产变成了近20W。我飘了。</p>
<p>因为离婚后那件事造成的影响，我开始放纵自己花钱，出去逛街买一次衣服一万多不眨眼，总想着自己不花，到最后不知道便宜了哪个王八蛋。况且，我觉得我还挺能挣钱的。我会挣到更多的钱，我会过得很好。</p>
<p>那时候对于股票，我什么都不懂。关注了许多大咖，也加过荐股群，同事说什么股票好我就买什么，你们能想到的坑我几乎都踩过。总的来说算是运气不错。但运气并不会一直存在，尤其是在闭着眼都能赚钱的牛市，我的战绩并不值得一提。</p>
<p>很快，熊市来了。好运大概也都在前半生用了个七七八八。眼看着自己操作下账户缩水，我开始迷信大咖。下重仓买大咖推荐的股票。然而并没能起到什么好的作用。</p>
<p>比起赔的连裤子都不剩的老股民来说，我算是幸运的，大亏过，也大赚过。虽说总体亏钱并不算太多，但我的投资信心开始崩塌，退出了股市。相信我们班有很多宝贝也是这样，亏了，就彻底离场。</p>
<p>在很多情况下，免费的，真的是最贵的。贸然下水赔进去的，都是真金白银，这种操作无异于杀掉自己的鹅。</p>
<p>自己的赚钱水平维持不住了，但消费却维持了牛市时的高水平。到2018年下半年，终于我的账户里，连市值带现金，余额已不足6W。</p>
<p>从20W到6W，宝贝们可以想想，我心里大写的感叹号。</p>
<p>有天我回家，我妈捧着计算器和存折在算钱。我问她算钱干什么？我妈说，我和你爸的养老钱基本上攒够了，以后我会开始给你存钱。我怕等你老了，没人照顾你，也没有钱花。我没说话，我怕一张口就流泪。</p>
<p>这都几年过去了，说到这里我还是会不停流泪。所以我特别理解母亲们，虽然我自己没有孩子，妈妈们都是超人。</p>
<p>我再次陷入了焦虑，除了那一份死工资我身无长物。在我的教育体系中欠债和啃老是不被允许的。可生活不会仅靠焦虑感就有所改变。我不知道自己该做些什么。</p>
<p>2018年11月底的某天晚上，偶然的机会我来到了小白营。我从来没想到自己的能有9块钱花的这么值得。在训练营的14天可以说是我最充实的14天，过往的生活中很多我自己想不明白的事情，在这里我终于找到了答案。</p>
<p>在14天里，可以说我的思想天翻地覆的改变了。</p>
<p>我学会了量化思维，我给我的工资做了计算，平均到我一天能花多少钱；学会了注重时间成本，用我的时间获得更大的产出；提高了自己的行动力，控制花销，在必要、需要和想要之前优先满足前两样。不怕你们笑话，2019年初的春节，我一件衣服都没买给自己。</p>
<p>小白营毕业后我继续学习了基金保险股票的课程，给我自己制定了基金定投计划。要是放在以前，我根本就想不到，每个月3000多元这么低的工资，我居然还能抽出1000元来定投，为自己养老做准备。而且不知从什么时候开始，家里大开着的窗户再也没有吸引过我的目光。</p>
<p>学完了基金股票之后，我陆陆续续开了三个账户，用自己学到的方法分别去实践，赚点钱就投投投，变成股票基金，下面这个账户是我刚学完的时候赶上的一小波行情，6W总资金，不到一年赚了将近50%，其中一只股票的净利润达到了将近140%。你们能看到，也有亏损的，也有不怎么赚钱的，但这并不影响大局。</p>
<p>前几天给你们看的近50%利润的那只股票，去年7.8月份刚买入的那天，我的客户经理还打电话给我，说发现我的账户有变动，问我在做什么股票，我把代码报给他，对方沉默了几秒说，这只股有压力啊，大约25.4元左右你要卖掉哦~~你TM是在逗我？？我23.2刚买的就有压力？果然，没两天就冲破了他所说的压力位，一路飘红。<br>​​</p>
<p>而我真金白银定投的指数基金，最辉煌的时候收益达到了30%，即便是前一段大盘上上下下，我的收益也在15%以上，还捡便宜多买入了一些。</p>
<p>给自己配置保险的时候更是有点好笑，当时学完保险课后，联系了我一个经纪人朋友，我按照课程上的内容规划了我的保险方案，和她一起看合同，挑选合适的保险产品，我至今仍记得第一次她听到保险术语从我口中蹦出来时，惊愕的口气~隔着屏幕我都脑补了她脸上的表情<br>​​<br>之后她就一再感叹，希望能多一些我这样的客户，实在是太好沟通了，后来她自己也来学习了长投的课程，她说觉得自己作为一名保险经纪人，应该多站在客户的角度上考虑，到底什么样的方案才能贴近用户的心，带给他们最全面的保障。</p>
<p>最让我欣喜的是，随着眼界的提升，除了被动收入，我还找到了各种开源方式~现在的我看起来好像还是那个清闲的国企员工，但实际上我还做着小白营的班班，不带班的时候我是一名保险规划师，约客户谈方案，因为口碑好，我的咨询费用已经涨到了一个人800元。</p>
<p>你们可能会问，诶班班，你不是说你还是一个麻将馆小老板吗？那时候刚学完开源课，我开始整理自己身边的资源，本职工作的收入天花板对于我来讲太低了，我想赚更多的钱。某一天一个朋友和我一起吃饭的时候说，他家附近一个门面房租客马上就到期了，没有转让费，有没有什么项目可以一起做的？我悄咪咪去现场连续观察了一周，那是一家已经开了5年，有稳定客源的小麻将馆，回家我按照开源课教的方法结合自己的经验，计算了每个月需要支出的项目，比如人工(平常我上班，需要雇人)水电等经营成本，也计算了按当时的客流量能带来的收益，再加上我自己能带来的新的客源，没有犹豫，和他一起接下了这家小麻将馆。因为没有转让费，所以前期投入并不大，朋友平常看店有工资，另外又雇了个人，所以利润减少了，目前我每个月也就赚三四千块吧，但是我付出的劳动只是每周去盘一次账而已。现在各大企业都在裁员，这一份稳定的收入，起码能保证我平常基本生活无忧了。</p>
<p>现在的我这四份职业再加上被动收入，五条腿走路，越走越顺当。</p>
<p>2019年十一我去了成都，在熊猫邮局给5年后的我自己寄了一封信，信上只有一句话，我会永远爱你。</p>
<p>有人问我，你不累吗？当然累啊，半夜两点我还在备课，早上6点我起床遛狗上班，每周去一趟麻将馆盘账，不带班的时候约客户谈保险方案规划，我真的累！那又怎样呢？一切都是为了努力赚钱，让父母过上更好的生活，也希望自己能早点退休，做自己喜欢做的事情。不是曾经有人说过吗？人活着就得折腾~</p>
<p>我深深地明白了，爱钱不该被嘲笑，没钱却又满口说着不在乎钱才最可悲。上小白营到现在，3个月内我学完了四门课，一年多一点的时间我的总资产增加了近30W。我从来没想过自己会爆发出这么惊人的能量。毕竟上学的时候，我只是个不怎么用功的学渣而已。</p>
<p>我重新分析了自己失败的婚姻：</p>
<ol>
<li><p>两个人家庭思想差异很大，我认为结婚是组建新的家庭，但他的父母认为，我抢了他们的孩子，和本该放在他们身上的注意力与爱(我前公公的原话)</p>
</li>
<li><p>结婚太仓促，大家都是在年龄到了，就找了个人娶了和嫁了，本质上我们并没有尊重婚姻</p>
</li>
<li><p>因为感情基础薄弱，并且本身的性格是两种极端，看似互补，实际上三观严重不合，很难找出双方都认同的对策去抵御生活中的各种风险</p>
</li>
<li><p>要有稳定的收入，有一定的积蓄，有理财的能力。手心向上朝人要钱的日子不好过，女性的经济独立无比重要，即便离婚，即便受伤，底气仍在</p>
</li>
<li><p>防人之心不可无，但仍要心存善念，不为别人，善良是对自己的滋养</p>
</li>
<li><p>生活和投资一样，不懂的地方就要去学，找到你喜欢并擅长的领域，发光发热，像太阳。</p>
</li>
</ol>
<p>说句题外话，前一段我前夫跟一个我俩共同的朋友打听我的近况，并且隐晦的表达了想复婚的念头。我可……去他的大西瓜！有人曾经跟我说，我应该感谢他，是他带给我的苦难才能让我有今天的成功与自信，但我觉得这话很可笑。苦难就是苦难，我今天的一切都是靠我付出努力拼搏而来的，跟他有半毛钱关系吗？</p>
<p>能用现在这么好的自己，遇到你们，我非常高兴。</p>
<p>最后我想说，生活的路是自己一步一步走出来的，迷茫过，彷徨过，都没关系。学习，能提高生产力。也许目前你有可以依靠的港湾，又或者你已独自拼杀多年。但在理财这条路上，你并不孤单，有我与你们共同前行。让我们在未来的某个时间，阳光温暖，抱富相见。望诸君努力。</p>
<p>以上，就是我这个没事儿就发发语音，每天都开开心心的小姐姐，今天的全部分享。谢谢大家的鼓励和支持</p>
<p>答疑<br>「班班我学完实操课也能像你一样厉害吗？」</p>
<hr>
<p>一般的班班可能会对你说当然可以了，但是作为我，长投最优秀的班主任之一，我要说，当然不能，你又不是我。我学习的时候笔记做了好几本，知识点再简单也不放过，班班讲的每一个步骤都反复练习十几遍</p>
<p>厉不厉害是靠你的努力而来的，你要是能好好做笔记，多练习实操，你比我还牛，毕竟你比我年轻，时间成本更多</p>
<p>「班班的个人故事前段让人心疼，后面很精彩，很励志。我想问一下长投学院那些课程一共要多少钱？我全报了，给打什么折？」<br>「那我今年什么事都做不了了，我天天在家奋发图强了」</p>
<hr>
<p>总共就4门课，基金股票是训练营形式，14天，保险开源是音频课，碎片时间学习，说今年太夸张了</p>
<p>「不是每一门还有什么入门啊，进阶呀，高级的嘛，4门课每门分三个阶段」</p>
<hr>
<p> 实操课就是对应的初级课，进阶和高级是以前我们分析师自己上的课，后来有的同学想斩获更高的收益，就放开了。实际上学完初级课就够上手实操了</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享08</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB08/</url>
    <content><![CDATA[<p>MBA大课—幸福人生的资产配置<br>爬楼密码：20200117晚</p>
<p>在小白训练营的学习过程中，班班发现很多小伙伴只知道把钱放在余额宝或者其他货币基金、银行存款中，不清楚资产配置的概念和价值，也不知道如何合理的安排自己的资产。今天，我们就来看看怎么进行资产配置吧。</p>
<p>投资的领域很广，品类很多，银行存款，理财产品，信托，P2P，商品期货，基金，股票，房产……</p>
<p>单单说股票，A股市场现在就有3000多家上市公司，更不用提其他领域的投资品了</p>
<p>每天加班加成狗，理财投资对我们大多数人来说，是实现资产增值的工具。</p>
<p>面对几乎无穷多的信息，我们不能做到像专业的投资者一样花很多的时间去研究，可是又不甘心把钱放在银行贬值。</p>
<p>有没有简单易懂好操作还不需要花太多时间的投资方法，只需要掌握各个投资领域的基本的方法就能让自己的资产保值增值？（这真是个美好的梦想啊哈哈哈哈）</p>
<p>今天你们的灵伶班班就来告诉大家实现这个美梦的方法，这是理财投资中很重要的一个环节-资产配置</p>
<p>什么叫做资产配置呢？<br>就是对自己的资金在各个资产之间进行合理安排的一个过程，能做到进可攻退可守，前攻后防，做好合理的资金安排，在突如其来的风险面前也能保障家庭财务的稳定，不影响正常生活，又能够不断的让钱生钱，逐步实现财务自由。</p>
<p>说人话说就是把鸡蛋放在不同的篮子里来保证咱们每个人每个家庭的经济情况能够持续，稳定的增长，并且可以应对危机。</p>
<p>给大家看一张图</p>
<p>这张图叫做标准普尔家庭资产象限图，在这张图上，把钱的用途分成了四份：要花的钱、保命的钱、生钱的钱、保本升值的钱。</p>
<p>不过这个图的比例仅供参考，假设你一个月收入3000元，让你拿出10%来花。你肯定要说班班毫无人性了~</p>
<p>但是这张图告诉我们一个家庭的钱应该分成以下四个部分。</p>
<p>第一部分钱用来作为短期消费，平时吃饭逛街买衣服看电影，偶尔出去旅行一次，钱都从这里出。</p>
<p>第二部分钱应该用来买保险，作为家庭的保护伞~</p>
<p>剩下的钱可以用来投资，一部分追求稳定可持续的收益。</p>
<p>而另外一部分资金可以用来买股票这种高风险资产，追求高收益。</p>
<p>这四个账户作用不同，所以资金的投资渠道也各不相同。只有拥有这四个账户，并且按照【合理】的比例进行分配才能保证家庭资产长期、持续、稳健的增长。注意我框出来的两个字，合理。所以这个比例是根据自己的情况进行调整的。大家切记。</p>
<p>接下来我们逐一来拆解这四个账户。</p>
<p>第一个账户是日常开销账户。<br>也就是要花的钱，一般为家庭或者个人3-6个月的生活费，放在活期储蓄的银行卡、能够随取所用的货币基金中。</p>
<p>1.银行卡一定要放一点，不能全都放到货币基金里。万一用钱的时候平台抽风呢？凡事都要考虑到一些特殊情况，这叫留出安全边际。</p>
<p>2.准备金也要根据家庭情况的不同来准备。比如你在家吃住，靠近父母，其实完全不必要准备6个月的准备金。</p>
<p>这个账户保障我们的短期开销，应急金、梦想基金（比如投资自己学习），短期内用到的钱等等，都应该从这个账户中支出。</p>
<p>这个账户每一个小伙伴肯定有的，但是我们最容易出现的问题是占比过高，很多时候也正是因为这个账户花销过多，而没有钱准备其他账户。</p>
<p>我知道你这会正在心底暗暗点头，嗯，我就是这样的……</p>
<p>第一个账户的要点：短期消费，3—6个月的生活费。一般放在银行活期存款，货币基金中。</p>
<p>第二个账户是杠杆账户。<br>也就是保命的钱，为的是以小博大，专门解决突发的大额开销。</p>
<p>这个账户保障突发大额开销，一定要【专款专用】，保障在家庭成员出现意外的情况时，有足够的钱来保命。</p>
<p>这个账户主要是保险，因为只有保险才能以小搏大，平时不占用太多钱，用时又有大笔的钱，所以保险很重要！（反复说过很多次了）</p>
<p>这个账户平时看不到什么作用，但是到了关键的时刻，只有它才能保障我们不会为了急用钱到处借钱，不会在疾病或者意外发生的时候，让家庭一夜返贫。</p>
<p>如果没有这个账户，那我们的资产就随时面临风险。我们常说没保险就是裸奔~没有的小伙伴要考虑下把这个账户建起来哦，我们在保险分享中讲过，保险的钱是对风险的转移，能发挥巨大的作用。</p>
<p>了解懂得保险的基础知识，会辨别保险的坑，就能够用更少的钱为自己的家庭配置更合适的保险！</p>
<p>第二个账户的要点就是：意外重疾保障，专款专用，解决家庭突发的大开支。</p>
<p>有了保险，咱们就可以甩开膀子投投投了~</p>
<p>第三个账户是投资收益账户<br>接下来我们来看下第三个账户是投资收益账户，也就是生钱的钱(这个账户是我的最爱)。</p>
<p>这个账户的钱，为我们创造收益的，用有风险的投资创造高回报。</p>
<p>创造高收益，往往是通过我们的智慧和知识，用我们最擅长的方式为家庭赚钱，包括我们的投资的股票、基金等。</p>
<p>这个账户关键在于合理的占比，也就是要赚得起也要亏得起，无论盈亏对我们的资产不能有致命性的打击，这样我们才能从容的抉择。</p>
<p>这也就是我们常说的不要借钱炒股！</p>
<p>当然也不能没有这个账户，我们不能不投资，因为你不理财，财不理你。</p>
<p>这句话说起来是老生常谈，同学们都能倒背如流，但是看在眼里，记在心里，能不能够落实在行动上，可是两码事情。</p>
<p>第三个账户的要点：重在收益。</p>
<p>这个账户最大的问题是很多人会具有偏向性</p>
<p>很多家庭买股票第一年占比30%。然后赚了很多钱，这时候就会开始忽视风险，第二年就用90%的钱去买股票了。然后股灾了，然后就跳楼了。</p>
<p>正经点说，如果中间遇到什么需要急用钱的时候，就会导致家庭资产的各种问题了，结果可想而知。</p>
<p>在这个账户中，我们可以采用50:50的简单配置法则，啥意思嘞？</p>
<p>就是把我们手中可以用于投资的闲钱平均分成两半。一半投资于股票市场买入股票或者股票型基金，一半投资风险较低的固定收益类产品。</p>
<p>当然随着时间的变化，这个50：50的平衡是会被打破的。</p>
<p>举个例子来说，胖胖同学有10万元，在2016年初拿5万买了股票，拿5万买了债券基金。</p>
<p>很不幸的是那年的债券基金表现不好，但是幸运的是股票表现不错，获得了大约10%的收益，于是到12月份的时候，胖胖同学的这10万元是这样分布的：债券亏损15%，只剩4.25万元，股票盈利10%，有5.5万元；总资产是9.75万元，债券基金就只占到约44%，而股票占到56%。</p>
<p>如果胖胖同学的动态平衡是一年一次的话，那这个时候他就需要卖掉一部分股票，买入一部分债券基金，让股票和债券的部分继续保持50：50。</p>
<p>在这里，灵伶再讲一个自己的心得。</p>
<p>对于一些年轻的小伙伴来说，如果按照50,50配比，可能不太合适，可以适当增加高风险比例的投资。理由有以下几个~</p>
<p>年轻，赚钱能力强，风险承受能力强<br>2、本金相对比较少，50%赚得少<br>3、50%放手里容易被花掉<br>4、家庭责任不重。</p>
<p>所以说，投资体系真的是很个人的事情，咱们只有自己下水了，才能找到适合自己的投资方式~</p>
<p>大家可能有些不解，为什么要把资产在高风险和低风险的资产中进行分配我了解，可是为什么还要做动态平衡，把更赚钱的卖掉去买不赚钱的呢？</p>
<p>还记得之前我们说过的巴菲特的名言吗？</p>
<p>别人贪婪的时候我恐惧，别人恐惧的时候我贪婪。</p>
<p>在市场中，人们往往舍不得卖掉上涨的资产，总是期待它能涨得更高一点。而当某个资产下跌的时候，即便理智上大家可能会意识到这是一个好的机会，但是因为恐惧，没有几个人能够真正做到果断买入。</p>
<p>所以动态平衡就强迫我们做到了一件平时大家很难做到的事情，就是——低买高卖！</p>
<p>有很多经济逻辑，就是违背我们的常规思维，如果我们没有去学习这些基础知识，用普通人的角度去看待经济学上的很多问题，得到的答案往往是与赚钱相背离。</p>
<p>当股票一跌再跌，在我们的资产占比中越来越小，我们就得不断的补仓，买入更多的股票。</p>
<p>这样当牛市来的时候，我们就比那些入市晚的人有更大的优势，因为我们买入的价格低，成本也就低，这样也就获得了更大的收益。</p>
<p>而遇到牛市的时候，别人都在一个劲的追涨，可是我们却卖出股票买入了低风险的资产，所以当熊市来的时候我们的损失也会比别人小。</p>
<p>这就是一个完整的经济学逻辑。</p>
<p>如果你没有这些基础知识，你是不是就是路边的韭菜了？</p>
<p>当然，我们是没有办法预测市场的，我们这些普通的投资者能够做的就是用这种方式来以不变应万变，反正都一半一半嘛。</p>
<p>股市涨，那我也赚到，股市跌，我也不怕，因为还有低风险的资产，更何况跌了，说不定意味着更好的机会呢。</p>
<p>不过这种方式能够获得较好收益的前提是：我们必须掌握股票、股票型基金、债券基金的基本投资知识。</p>
<p>要想赚到钱还必须学习怎么选到好的股票、基金啦，通过相应的投资策略提高收益，降低风险。</p>
<p>投资有风险，并不是人人都能赚到钱的，如果随便投一个就能赚钱，那我们人人都是百万千万富翁啦！</p>
<p>关键还是要掌握正确的方法。</p>
<p>要用正确的方法、策略投资才能达到保值增值的目的哦。</p>
<p>好，下面就到我们的第四个账户啦。</p>
<p>第四个账户是长期收益账户，也就是保本升值的钱。<br>为保障家庭成员的养老金、子女教育金、留给子女的钱等。</p>
<p>这是一定要有，并需要提前准备的钱。这个账户为保本升值的钱，一定要保证本金不能损失，并要抵御通货膨胀的侵蚀，所以收益不一定很高，但却是长期稳定的。</p>
<p>这个账户最重要的是专属。</p>
<p>1、不能随意取出使用。很多家庭说是要存养老金，但是经常被买车或者装修用掉了。</p>
<p>2、每年或每月有固定的钱进入这个账户，才能积少成多，不然就随手花掉了。</p>
<p>我们常听到很多人年轻时如何如何风光，老了却身无分文穷困潦倒，就是因为没有这个账户。</p>
<p>第四个账户很适合基金定投之类的投资，就是一个很好的储蓄方式，像之前我们分享的晨读文章里面的死胖子，一个和我们差不多的普通人就用基金定投做储蓄，股票做升值，进而很早就有了人生的第一个100W</p>
<p>第四个账户的要点：保本升值，本金安全、收益稳定、持续成长。</p>
<p>这四个账户就像桌子的四条腿，少了任何一个就随时有倒下的危险，所以一定要及时准备。</p>
<p>当然这四个账户，很多小伙伴现在可能还是只有其中一个到两个，并不是说我们每个人一开始就会有四个账户，而是通过我们财商的觉醒，然后一点一点的完善起来的，所以同学们不要沮丧，从咱们小白营出去的人，这点自信还是要有的。</p>
<p>另外，我再强调一下普尔象限的比例标准，不要生搬硬套哦~<br>全球资产配置之父加里•布林森说过：长远看99%的投资收益来自于成功的资产配置。</p>
<p>到今天为止，我们已经学习了一周了，班班想问问大家，你们觉得投资到底是人生的选修课还是必修课？</p>
<p>可能还有人会觉得这辈子有投资收益，会让生活过的更加轻松。如果没有投资，那么生活无非是艰难一些，过的累一些罢了……</p>
<p>其实这个想法是错的。对于我们这一代人，投资不是选修课，而是你必须精通的一项技能，一项刚需技能！</p>
<p>为什么要这么说呢？不懂投资难道就不能好好过日子了么？恐怕……是这样的。如果不懂得投资，未来你的生活很可能寸步难行。</p>
<p>可能有人会问，你这么说是不是危言耸听了啊？我想说的是，并没有。</p>
<p>如果你是独生子女，你的爱人也是独生子女，那么不好意思，很可能你真的就是最近一百年以来中年生活危机最严重的那一代人。</p>
<p>那么家庭结构很可能是在人类历史上最最最特别的，但是在如今最最最普遍的421家庭，或者422家庭，甚至我们班有些小朋友，是423家庭。</p>
<p>什么是421或是422呢？</p>
<p>就是上面四个老人，中间是独生子女一代的夫妻小两口，下面是一个孩子或者是二胎政策开放后的两个孩子。</p>
<p>如果用比较官方的话语来说，家庭结构当中的劳动人口，小于了50%，甚至在422家庭中，劳动人口只有可怜的25%。</p>
<p>一个大家庭八口人，处于青壮年不需要人照顾的只有两个人……这个数据是一个细思极恐的事情。</p>
<p>同时对于事业上不太成功的人来说（补个刀，多数人是不成功的），到了中年阶段，会遇到各种各样的生活危机。</p>
<p>比如中年人的父母大都70岁上下，需要人照顾，孩子大都在中学，也需要人陪读照顾，事业上定型，很难再有上升机会等等问题集中爆发的一个时期。</p>
<p>大家知道中兴程序员坠楼事件吧，中年四十，不知道的找找新闻</p>
<p>大家要注意到，现在的中年危机的一批人，很多可都是当年国家鼓励生育的那一代人哦！</p>
<p>灵伶的母亲兄弟姐妹有6个人，也就是说对于我的姥姥姥爷，养老的家庭责任，我母亲也只需要承担六分之一就好。</p>
<p>设想一下，十年后当独生子女这一代人步入中年，四个老人两个孩子，只有小两口照顾时……会是怎样一个情景？</p>
<p>我们用小板栗举个例子：</p>
<p>小板栗的岳父做手术，需要切除胆囊（这对于现代人来说，是个非常小的手术了）。</p>
<p>为了照顾老人，他个人请假一个月。当然，这还是在他岳母身体不错的情况下~~岳母和他们小两口在医院足足折腾了一个月之久。</p>
<p>板栗夫人怀孕照顾人不太方便，同样还是在他母亲身体还不错的情况下，他母亲请了两个月的假，而他请了一个月的假……</p>
<p>当他给我讲这段经历的时候，班班突然意识到，对于十年后的我们来说，很可能当步入中年的那个时候，各种“身不由己”甚至会让我丧失掉依靠出卖自己时间（上班）去换取收入的机会！</p>
<p>所以很多上班族，不敢请假不敢病。这也是我们这一代人，共同需要面对的问题。</p>
<p>以前像是“人口老龄化”这些词语，可能我们只会在一些新闻中听见，或者在大学的政治简答题上为了应付老师准备类似的答题材料</p>
<p>可是真的当我意识到自己身处中国这一代老龄化的社会环境之下，才真切的感觉到这个特殊的时代背景，对于我们每个身处其中的人带来的生活压力有多大。</p>
<p>我曾经问自己一个问题：等到十年后因为需要照顾家庭，我没有大把时间去赚钱的时候，我依靠什么去支撑自己的家庭不出问题？</p>
<p>我们步入老年期，到60岁以后，就基本上不能通过工作来赚钱了，晚年的生活费用主要来自年轻时的积累。“养儿防老”这句话现在已经过时了，如果儿子不“啃老”就已经是你的造化了，因此，你要想晚年生活无忧，就必须提早做好准备。那我们怎么才能安度晚年呢？我发现我能做到的，也只有依靠投资</p>
<p>当依靠出卖时间换取金钱的“主动收入”无法再有效的时候，我们这一代人能够仰仗的，可能真的就只有投资带来的“被动收入”了。</p>
<p>巴菲特这句话应该改一下，如果你没有找到一个当你睡觉时还能赚钱的方法，未来你可能无钱可赚……</p>
<p>如果你现在还不开始学习投资，等到你不得不投资的时候，你将面临怎样的窘境？投资不仅是为了跑赢通胀，不仅是为了避免投资陷阱，更是以后生活的根本。</p>
<p>不要把投资当做一个可有可无的选修课了。投资这件事在我看来是非常重要的必修课，真的会关系到你家庭未来十年到二十年的幸福。</p>
<p>有的人说，我已经晚了，怎么办呢？那就要想办法利用复利来缩短差距。</p>
<p>要么，你有足够的本金，要么你开始要比别人早。如果这两个都没有，那么你就只能提高自己的投资能力</p>
<p>相对增加本金和趁早开始来说，我们已经错过了太多。</p>
<p>那提高自己的收益率，才是我们可以快速赶超别人的方法。</p>
<p>晚分享就要结束了，我们来总结下今天的内容吧：</p>
<p>1、资产配置的四个账户就像桌子的四条腿，少了任何一个就随时有倒下的危险，所以一定要及时准备。当然这四个账户，很多小伙伴现在可能还是只有其中一个到两个，这其实很正常。并不是说我们每个人一开始就会有四个账户，而是通过我们财商的觉醒，然后一点一点去完善。</p>
<p>2、投资是人生的必修课，越早开始越早收益，如果你已经起步晚了，那么必须系统学习来提高自己的投资收益率来加倍赶上</p>
<p>今晚的分享就到这里啦，你们都get到资产配置的正确姿势了吗，做好我们的资产配置，前攻后防，既能抵御风险，又能实现增值，赚安稳的钱，才能快乐的过上小日子。</p>
<p>祝爱学习的大家，被这个世界温柔对待。</p>
<p>答疑整理<br>Q：我想知道班班现在有几个账户了？</p>
<p>A：我现在配了4个了，股票基金保险都有</p>
<p>Q：班班，你说保险是第二个账户，如果我的资金不太够，可以先通过股票盈利一部分钱，再来置办保险这一块吗？也就是把保险和投资这两个账户的顺序来互换一下。还是得严格遵守那个顺利来置办自己的账户？</p>
<p>A：如果可以的话先投资股票股组合吧，组合的风险相对低。我自己验证下来，平均年化15%还是比较容易的。而且不费什么时间。当然还是希望你先配保险，因为早一年，晚一年，这个保费区别很大。</p>
<p>Q：课程会推荐买哪只股吗？感觉选最麻烦</p>
<p>A：很这个不麻烦的，也就用条件筛选，大概1个小时搞定了，然后一个季度或者再估值看看，估值高的卖了，再选进来估值低的，以此类推的调仓~具体是哪只这个就要看当前你入手时候哪个是低估的，自己选下，并不麻烦。</p>
<p>Q：那是报名了就立刻开始上课了吗？</p>
<p>A：不是哦，时间自由安排。目前2月、3月都有班级可以选。</p>
<p>Q：保险也重要的，像我就是要用的时候才发现没来得及配置？</p>
<p>A：对的，真的是不吃过亏不知道保险很重要，大家一定要觉醒这个意识，不要觉得自己还年轻身体还很好，梁静茹都不会给你们这么大的勇气啊</p>
<p>Q：保险的占比是多少呢？</p>
<p>A：一般来说用你年收入的最低10%-20%来配置保险的蛤，太低了保障不足，太高了负担很重</p>
<p>Q：班班，我家里还有两个宝宝，还要上班，真的怕自己忙不过来，分析股票花时间吗？</p>
<p>A：不花什么时间的，我就是花了一个多小时筛选好，然后买入，一个季度重新估值下，适当调仓。我这么忙，都是比较佛系投资<del>像基金定投，股票组合都是我的佛系投资选择</del></p>
<p>Q：课程会不会教我们分析股市行情？<br>A：咱们不用看行情哦，长投讲的是价值投资，咱们只要找到那些价格低于价值的好公司来投资就对啦</p>
<p>Q：会给分析一下好一点的基金定投？</p>
<p>A：安排，学会分析基金，市面上辣么多基金，我们找最优质的那一只</p>
<p>Q：股市那个需要学什么k线图吗？</p>
<p>A：不用哦，那个是技术流的方法，咱们是价值流派哦</p>
<p>Q：那技术流学会了k线图会玩股票玩的更好么？</p>
<p>不能说哪个好，哪个不好，每个流派有每个流派的特点，相对来讲技术流太费时间，每天看盘，分析，不适合我这种佛系玩家，你也可以选择两种都学习以后，结合玩法</p>
<p>Q：班班其实我就想学一个基金，基金相对于股票来说风险低，而且收益年华也能达到10%，为什么还会有那么多人去碰股票呢？</p>
<p>A：学习基金知识确实很好，孩子的教育金，自己的养老金，父母的养老金都可以通过基金定投的形式实现，但是从资产配置的角度来说基金的收益太慢了<br>而且比股票的收益低，所以高收益的那部分还得靠股票</p>
<p>另外股票知识在理财投资中还是蛮基础的知识，学了以后可以发现更多的投资机会啊，比如A股打新这种低风险高收益的东西</p>
<p>我曾经也觉得股票好吓人啊，那么多人亏，但是后来通过学习才慢慢知道，为什么那么多人会亏损呢，主要是还是无知造成的</p>
<p>大多数人就是什么都不懂一股脑地冲进了股市，他不亏谁亏，所以做任何投资还是得有正确得知识做支撑才行</p>
<p>A股市场上90%+的股票都不值得投资，学完实操课就能帮我们避开这些地雷股<br>以前长投有位我认识的师兄学股票两年赚到老爸一辈子的收入，股票确实是有风险，但是我们只要学习，A股有3000家赚钱的公司，只要找到30家你就发财了，而且是发大财</p>
<p>学习投资，最关键的就是要学习如何投资股票，股票课教的不是如何炒股，而是如何分析公司，这对于投资能力的锻炼非常重要<br>这么说吧，只有学习了股票课，才算是投资入门了</p>
<p>Q：买的基金有的提示是中高风险的是什么意思？</p>
<p>A：基金的风险等级是不一样的，比如说货币基金是最低风险的，那么有些基金在基金这个范围内横向对比它属于高风险</p>
<p>Q：但是整体基金得风险还是要比股票小很多，收益也会低很多，是这样么？</p>
<p>A：不能完全这么说，基金就是一篮子股票的构成，然后呢，股票你单只去看的时候，这个涨那个跌过山车一样，它就会很很吓人，就像我们做的股票组合一样，这个涨那个跌，但只要总体的收益是好的就可以了。</p>
<p>那当然，说股票的收益会更高，但是我想说收益更高，风险相对来说要大一些，只是相对，那我们之所以做组合，就是为了分散风险降低风险</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享09</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB09/</url>
    <content><![CDATA[<p>长投的前世今生</p>
<p>爬楼密码：20200118晚</p>
<p>今天周末啦，宝贝们的小白训练营已经上了一小半了哦。很多小伙伴在私下里问我，长投是个什么样的公司？我觉得非常有必要跟大家介绍一下长投了。</p>
<p>咱们班里的小伙伴来自五湖四海，是什么把我们相聚在这里呢？是理财投资，是长投。那长投到底是个什么样的存在呢？灵伶跟大家介绍一下长投，也好让大家都可以安心的学习。</p>
<p>长投哪一年出生的？几岁啦？爸妈是谁？怎么长大的？……</p>
<p>长投学堂的前身—长期资本管理论坛，2011年正式上线。至今，长投已经是第10个年头。十年间，长投学堂为四百多万人普及了理财知识，改变了无数人的生活。远远早于市面上各种投资理财LIVE、FM等知识付费课程。<br>​​</p>
<p>也有幸被越来越多的人信任和认可，一起奔着财富自由的共同目标，携手共进。过程中，有笑也有泪，但我们一步步在往更好的方向走。</p>
<p>灵伶觉得这是一个非常成熟的学习平台，而且这里面有很丰富、很成熟的圈子。相比于其他平台上面的学习，它更加的立体，更加的全面化。这也是我当初选择在长投兼职的原因</p>
<p>2011年，长投学堂前身——长期资本管理论坛上线。为什么会有这个论坛呢？</p>
<p>小熊老师最初是在英国工作，在英国学习了价值投资。回国之后，看到了很多中国散户严苛的生存环境，总想为中国的中小投资者做点什么。就像比尔米勒的雷格梅森论坛帮助了很多美国投资者一样，小熊老师也希望创造一个交流场所对中国小投资者有所帮助，于是就萌发了创立论坛的想法。</p>
<p>在中国，价值投资者一直是一个孤独的群体。每一个价值投资者都忍受过“今天跌这么厉害，你是不是又亏了？”这样的嘲讽。也忍受过“我打赌，明天这个肯定是涨停板”这样的讨论。</p>
<p>小熊老师因为投资美股的关系，参加过“价值投资者俱乐部”。这是著名的私募基金经理-乔尔格林布拉特（我男神之一）创立的。在这个俱乐部中，每一位加入俱乐部的成员，每半年都必须要对一家公司写一篇分析文章，然后由所有成员评分，如果合格，则可以再获得半年的成员资格。这样的游戏规则，使得一群志同道合的价值投资者，能得以分享共同的理念和信息，变得不那么孤独</p>
<p>小熊老师在这个俱乐部中受益良多，回国后一直在想：为什么中国的投资者没有这样一个俱乐部？因此他发起了投资论坛。所以，长投网最初并不是一个投资教育网站。而是一个论坛，最初这个论坛的名字叫长期资本管理论坛。</p>
<p>当时成立论坛的初衷，是小熊老师希望聚集一批理念相合的投资高手，大家可以讨论和交换投资心得。一个人的精力毕竟有限，眼前聚焦一个好机会。再出现其他的，也只能放过，无法深究。但如果再来一个投资高手，两人交换，就有了两个赚钱的好机会。相互提点，多多益善</p>
<p>论坛建好了，小熊老师希望的是，能在里面讨论投资，同时最好能发现一些投资机会。但是，事情似乎并没有向着小熊老师想的方向发展。几个月过去了，这样的投资高手寥寥无几。</p>
<p>大概是中国特色的教育下，财商一直被忽视甚至是轻视，致使很多人，思维过于简单粗暴，一说投资就想到炒股，上来就问：“买哪只能赚钱？”若是亏本就割肉离场，从此与投资相忘于江湖。</p>
<p>论坛里面聚集的大多都是一些，嗯，你们懂得，反正就是看线，抓趋势，涨了就开心，跌了就骂娘，听消息……反正，没人踏踏实实的研究投资，想的都是怎么样通过股市“暴富”</p>
<p>所以，这个论坛，做的并不成功，里面也没有什么有含金量的信息。毕竟能踏实学投资、理性看待投资的人，太少了。</p>
<p>话说回来，这也是为啥这个少数群体能赚钱的原因。</p>
<p>有一次，论坛里貌似发生了一些“不太愉快”的事情，就是那些“投机”派和“价值投资派”理念上发生了冲突。</p>
<p>最后，小熊老师一生气，说：既然论坛里没有做价值投资的人，那干脆我自己培养一群价值投资者吧！（非原话，但是，大概就是这个意思）如果我们能培养出十个小熊，不就能够盯住投资的各个方面吗？这样大家就能互通有无，一起走向财富自由之路。</p>
<p>在中国，既然还没有人深耕财商教育，那不如我们来做吧！</p>
<p>后来，小熊老师和水湄物语，联合小熊老师巴克莱银行的同事Robin，组成了3个人的公司。办公地点就在上海浦东图书馆，办公设备就是人手一台手提电脑。</p>
<p>​​<br>这是长投最初的办公室—浦东图书馆<br>​​<br>这是长投早期的办公室——简单的一室一厅，也是老板娘水湄和老板小熊老师的婚房。</p>
<p>2012年2月14日，情人节，长投学堂上线了。<br>​​<br>长投学堂是什么？针对零基础小白的理财投资在线教育网站。</p>
<p>当时，已经是豆瓣理财红人的水湄姐在豆瓣发了个帖子，宣布理财教育网的成立，顿时无数人响应。略显简陋的网站，一门股票投资初级课，刚刚诞生的长投学堂。就这样，帮很多人打开了理财投资的新世界。短短一个月的时间，大家的学习热情爆棚（其实这也从侧面折射出中国财商教育的缺失和必要性）。<br>​​</p>
<p>股神巴菲特说过：“年轻人最好的投资就是自己的能力”。</p>
<p>所以，小熊老师经常说，自己的能力中，最值得投资的就是自己的投资能力，因为这个能力决定了，你的终身财富总值是不是多一个零，甚至多几个零。</p>
<p>水湄也说过：“长投学堂对于我跟小熊来说，是一个寄托理想的地方，我们希望能通过这样一种方式，改变一点点人的观念，改变一小部分人的生活。我总觉得这要比做社交网站、游戏公司，有意义得太多了。投资是真的能改变人的生活的，我跟小熊就是最好的例子。”<br>​​</p>
<p>2012年10月，一个普通学员注册长投网并学习了入门课。此后，她沿着股票初级课、进阶课的路径，一直到进入长投圈，投资获益颇丰。后来，她在长投QQ群里响应小熊老师的兼职招聘启事，开始运营长投公号。再后来，她从兼职做到全职，成为了长投的网红讲师——百合学姐<br>​​<br>她是小白训练营的创始人</p>
<p>2013年，长投股票进阶课上线。线下活动开启，成都、广州、北京、上海，武汉，深圳，每一座城市，都留下了满满的回忆</p>
<p>2014年，长投课程体系逐渐完善。也是同一年，第一届长投年会在上海举办，全国各地院生齐聚上海。从此之后，每年10月的年会就成了小伙伴们欢聚的大趴体。<br>​​​​</p>
<p>2015年，长投做了很多新尝试，像我们现在在学的14天小白训练营的这种社群学习模式就是15年开始的，由班主任和学姐、学长们手把手带大家学习。<br>此时的长投，早已不是开始的“三人帮”，从二十多人的小团队发展到了现在几百个人的创业团队，办公地点也因为人员的快速扩张，从图书馆转移到小区的别墅楼王，再到现在的张江高科技园。</p>
<p>2016年，长投的课程体系更加完善。2017年，长投又对初级课程进行全新的改版升级，上线了全新的基金、股票训练营、股票进阶训练营，不仅学习知识，还有班主任手把手带领大家实操、分析，让大家更容易做出行动改变，希望更多的人能真正的把学到的投资知识做到会用。</p>
<p>2017年10月，长投7周岁的年会，主题是——何以解忧，唯有“抱”富！抱住那些有富人思维的人，和他们做朋友；抱住那些未来可能是千万亿万富翁的人，一起学习、一起进步；抱住市场上那些优质的投资机会，像巴菲特说的一样——慢慢图之，稳稳变富。</p>
<p>前几个月，长投新的办公地点也刚刚启用，长投从此走进了宽敞的写字楼。目前最新的办公地址在上海张江弘源科创大厦。</p>
<p>从上海的大别墅区搬到了一个高端大气、宽敞明亮、清香怡人、独具一格的写字楼里。。。<br>​​</p>
<p>2018年4月，继续在南宁，成都，武汉，北京，上海，深圳等城市举办线下活动。长投的线下活动呈现如火如荼之势，每个城市都有一群好学上进、热心分享的小伙伴，通过长投结交这样一群志同道合的朋友，真的是最大的收获哦。</p>
<p>​​<br>​​<br>​​</p>
<p>2018年10月20号与21号，在上海举办了长投八周年的年会。主题是：长投8年，向“钱”出发。两天的时间，8场拓展投资思维的主题分享，带大家全方位的学习理财知识。</p>
<p>长投八周年，迎来了A轮融资1个亿。<br><a href="https://sh.sina.cn/news/2018-09-05/detail-ihitesuy5569553.d.html" target="_blank" rel="noopener">https://sh.sina.cn/news/2018-09-05/detail-ihitesuy5569553.d.html</a></p>
<p>​​<br>​​<br>这是长投创始人和投资人与1000名用户的合影</p>
<p>去年的年会一共去了将近1000人，门票在3个半小里时抢空。<br>​​</p>
<p>年会，这是长投每年最重要的盛会，就是每年10月都会举行的长投年会。</p>
<p>2017年的年会一共去了将近400人，整个会场坐的满满当当。而2018年的年会现场是1000人。<br>​​<br>这是去年的年会现场，上千人的会场满满的全是人。</p>
<p>都是什么样的人呢？真的是天南海北，老少齐聚。<br>最年轻的小伙伴，98年；<br>最年长的大伙伴，60后；<br>最北边，来自黑龙江的；<br>最南边，来自海南岛的；<br>最西边，来自西藏，新疆的；<br>最东边，哦对，好像上海就是最东边……</p>
<p>为什么大家愿意不顾路途遥远，牺牲两天双休的时间也要参加年会呢？</p>
<p>理由其实不少：</p>
<p>第一、 学干货。<br>每年的年会都会邀请到不少投资领域的大咖来做主题分享，如果能把这些内容认真消化和实践，投资能力一定会大大提高。</p>
<p>比如，去年的内容涉及到在如今的大经济环境下该如何投资、如何看待中美贸易战、财商教育、可转债、如何看待房市、还有小熊老师对未来职业发展的建议等等。<br>​​<br>​​<br>​​</p>
<p>专业的人从专业的角度来分析，总会有些不一样的看法。年会时，有小伙伴说，现在不是投资股票的好机会，但是因为中美贸易战的原因，有很多好公司都处于低估值的状态，到底是不是一个投资的好机会呢？</p>
<p>年会讨论这个话题的时候，小熊老师说，是不是春天不重要，重要的是我们用合理的价格买到了好公司。与其去猜测什么时候进场，还不如提升能力、知晓卖出的点。</p>
<p>年会时相信小熊老师等的人，这一年又过去了，都已经大赚一笔。</p>
<p>第二、面基。<br>每一次年会，都是把线上的小伙伴变成线下好基友的最好机会。话说我们班主任每年争破头的要去参加年会，很大的一个原因就是这个。</p>
<p>看着以前熟悉的长投ID或者QQ昵称，变成一个又一个真实的妹纸或者汉纸站在你面前，晚上一起聊投资、聊人生、聊理想、睡大神，这种奇妙的感觉只有参加过年会的小伙伴才能感受到。</p>
<p>第三、寻找改变或者前进的动力。<br>在年会，你会发现有些老师年轻到让你吃惊，他们也不是一开始就是金融专业毕业，也是靠学习走上理财投资这条路；</p>
<p>你也会发现投资其实是一件可以做一辈子的事，有些老师已经退休，但仍然在量化投资这条路上不断精进；</p>
<p>你更会发现98年的妹纸，都已经有了理财投资的意识，<br>​​</p>
<p>蓝色衣服的小姑娘是98年的在校大学生，目前是长投小白营的一名兼职班班。虽然年纪小，投资的理财产品可不少，不仅有基金、股票、可转债，还有港股打新。</p>
<p>不要误会，小姑娘家里没有矿，就是因为家庭条件不好，才会重力的投资自己，她从高中开始自己做兼职赚学费，目前投资的钱也都是自己做兼职赚来的。</p>
<p>小姑娘旁边的是一位94年的督导，也是一位理财达人，经常在小群里给班班们讲保险方面的知识。</p>
<p>有钱的，工作单位好的，年纪比你小的都在投资，自己如果再不行动起来，那就会辜负一日又一日的好时光。</p>
<p>下面来跟大家讲一下年会的两个小故事</p>
<p>第一个故事的主人公叫圈圈。</p>
<p>为什么叫圈圈呢？因为肚子上的肉一圈一圈的。圈圈是一个妹子，24岁，家里做家具生意。她说在大学时，钱从来都不是她的追求，直到大学毕业被老爸抓去盯家里的生意后，情况发生了变化。</p>
<p>她的原话是：本来想着老爸是老板，作为女儿，我怎么也是个小老板吧，结果…你能想像，一个妹子，开着大货车，拖着一车家具，在山路歪七扭八拐来绕去送家具么？？？？！！！到了目的地还得当搬运工，帮人卸下来，回到工厂，还得扫地，煮饭，打小杂…</p>
<p>于是，我开始认真思考人生，我想我能干的绝不仅限于此。</p>
<p>碰巧看到一则广告，误打误撞来到了长投学堂，然后学习股票初级课，学会了如何分析公司。几个月后，终于学到了名堂。</p>
<p>她家在西藏林芝，因为市场因素，当地的家具厂都开始降价竞争，低价又形成低质产品。但是，她建议老爸，家里生产的家具一定要保证质量，同时还要做自家的品牌，代工绝不是出路。</p>
<p>一家好公司应该有护城河，最好有定价权。她用在股票初级课中学到的内容，分析了一遍自家的家具厂</p>
<p>老爸一看，得，是那回事，那你去办吧。然后就一路试试试。圈圈家的代工厂注册成了一家公司，开始打造自己的品牌，当同质竞争越来越严重时，别家降价血拼，而她家产品已经有了品牌，也慢慢有了名气，许多人慕名而来。</p>
<p>那些想得到老公认可、婆家认可的伙伴们，看明白了吗? 价值、实力说话，才是硬道理</p>
<p>经过时间的洗礼，她家的家具开始走得更远，现年24岁的她，也正承担更重要的职位与责任，不再是那个闹着找爸爸要零花钱的小女孩了。</p>
<p>贴一张圈圈的图给你们看看<br>​​</p>
<p>第二个故事的主人公是挠背侠。</p>
<p>挠背侠在2014年之前，他是一名跑户外的地表勘测工程师，接触长投，接触投资之后，整个人生轨迹发生了变化。</p>
<p>学投资前，是这样的<br>​​<br>形象请脑补…极似胖版的…</p>
<p>自从学习了投资理财，他经历了跨行业、跨专业、跨层级的改变。</p>
<p>现在，他专职于投资，发展出了自己的投资体系，同时也是果壳万有青年会的演讲嘉宾。</p>
<p>现在他长这样<br>​​<br>现状极似…请自行脑补</p>
<p>皮一下开心开心，这才是真人哈<br>​​<br>如何变得又瘦又高又帅，宛若重新投胎滴…？？？<br>人家笑笑答：因为学了投资理财啊…</p>
<p>最后呢，班班来猜测一下：为什么这么多人半路学投资？</p>
<p>1.某个诱因</p>
<p>半路学投资，都是在某一刻有些迷茫。要么是职场受挫，要么是突然需要用钱，要么是其它，总有一个因素推动了你，让你去选择改变。</p>
<p>当你的思维出现改变，只要动力足够强，你的行动也随之改变。<br>当你意识到你要学习投资，你一定觉得缺少第一桶金，而你要去赚到第一桶金，你得保证你的主业收入更多，再去拓宽副业。</p>
<p>2.正向反馈</p>
<p>主业的收入要变多，你得表现得更优秀，你会更勤奋，更上进，更自信；副业的收入要变多，你得努力去拓宽圈子，结识更多的人，创造更多的可能性，你的视野会变宽广</p>
<p>你慢慢就变成了最好的自己，这种正向的反馈，在你有钱有闲时变得越来越明显。你的好结果告诉你，做的事情是对的。加大做正确的事，获得正确的结果，你又会变得越来越有钱、有闲。</p>
<p>如果你没有意识到钱重要时，你就看不见它，你看不见它，它也看不见你。如果你意识到钱重要时，你就开始重视它，你重视它，它就重视你。<br>这压根儿不是什么心理暗示。</p>
<p>如果你认为考100分很重要，你时时刻刻想考100分，你就会想办法去考100分，即便最后你没考到100分，至少会比你没想考好时要考得好。</p>
<p>这是一种目标与执行力的因果关系。</p>
<p>3.门槛很低</p>
<p>理财不受技能限制，不受年龄限制，不受种族限制，它比职业的路要宽许多，只要你想开始，永远都不晚。</p>
<p>它的低门槛会让想试的人都能进去试一试，而成功的可能性，只在于你花了多少时间，花了多少心思。</p>
<p>年会上还听到一句令人感动的话，是一位分析师说的。<br>他说：我想，成功如果要10000小时，那我就认真做好记录，今天花了2小时，明天花了2小时。 又分别学到了什么？总结到了什么？是不是有了自己的投资体系？去试错，去更正，然后成功。</p>
<p>你是不是花了至少10000小时，让自己成了理财领域的专家？</p>
<p>4.受用一辈子</p>
<p>很少有东西可以用上一辈子，学历不能，衣服不能，家具不能…<br>而投资，只要你有了自己的分析体系，只要股市还开着盘，你可以玩一辈子。</p>
<p>嗯，这也是灵伶坚定要把投资这条路走下去的原因。我在自己身上投资了那么多东西，使用时间最久的就是理财投资的能力了。</p>
<p>你想，从A股到港股到美股再到台股，再到任何你想玩的股市，你都可以无缝迁移，无非是术语略有区别，好公司的标准全球几乎都差不多。</p>
<p>正如《穷查理宝典》中序言所说：芒格从未去过比亚迪，从未和比亚迪高层聊过，只看财报，他就能精准判断出比亚迪究竟有哪些问题，一语中的<br>财报无国界，投资体系无国界。</p>
<p>为什么这么多人半路学投资？<br>还有一个更好的理由是：别人那么富，我得去看看。。。<br>​​<br>作为长投班班的福利，长投的大V们会不定期给班班们上点小灶哦。</p>
<p>上次，水湄在班主任群给我们分享了融资的事情，收益匪浅呢。能与长投一起成长，是一件非常有成就感的事情。人生前（钱）路漫漫，希望我们能继续并肩前行，变得越来越好。</p>
<p>之前知道长投A轮融资成功，班班悄悄的在心里打着小算盘，要拼尽全力的傍住小熊老师的大腿，争取在长投上市之前，从老板手里买点原始股出来。那个时候，宝贝们，你们的班班就不做有钱有才有貌妖精了，要改做神仙姐姐去普渡众生了哈。</p>
<p>另外，再补充分享一段话。</p>
<p>你接近什么样的人就会走什么样的路，穷人会教你如何节衣缩食，小人会教你如何坑蒙拐骗，而成功的人只会教你如何取得成功。</p>
<p>人生最大的运气，不是捡钱，也不是中奖，而是有人可以鼓励你，指引你，帮助你，发现更好的自己，走向更高的平台。</p>
<p>其实限制你发展的，往往不是智商和学历，而是你所处的生活圈及工作圈。所谓贵人，并不是直接给你带来利益的人，而是开拓你的眼界，纠正你的格局，给你正能量。</p>
<p>并且你还要明白，所有浪费了的日子都是要还的。</p>
<p>未来的日子，长投会贡献更多更优质的课程与资源，带大家进行更好的学习体验，掌握更多有效的投资策略；</p>
<p>当然还有，更大的野心——联结一群有趣、热爱理财投资、敢于挑战、喜欢折腾的你们，碰撞思维的火花，让理财投资的学习、实践变成一件幸福感倍增的事儿！</p>
<p>聪明的学习者，会想尽一切办法，联结更多更优秀的人和更优质的资源，让自己以更快的加速度成长。</p>
<p>来到长投训练营，我发自内心的恭喜大家，这是一个非常温暖又靠谱的大集体，大家可以放心在这里学习、成长，班班和学姐学长们会尽全力为大家保驾护航，我们一起努力，迈向财务自由！</p>
<p>在长投有一群好学上进，热心分享的小伙伴，通过长投结交这样一群志同道合的朋友，真的是我最大的收获。</p>
<p>最后，再来几张大神的照片吧</p>
<p>长投创始人之一：毒舌犀利的小熊老师<br>​​</p>
<p>长投创始人之一水湄物语，就是《30岁前每一天》的作者<br>​​</p>
<p>保险实战课&amp;基金训练营的讲师，小白训练营的创始人：百合学姐<br>    ​​</p>
<p>长投的分析师微光破晓（左）和火云鞋神（右）两位老师<br>​​<br>火云鞋神在年会《快问快答》环节说，房产不会超过他总资产的5%，你们猜猜他有多少资产？</p>
<p>今晚的分享就到这里啦，感谢大家！下面进入答疑时间~</p>
<p>答疑 ：<br>1.班班，我们能去年会吗？</p>
<hr>
<p>我去年在带班都没有去成呢，长投的年会都是在9月或者10月份，不过我建议大家有了理财的基础之后再去听，年会讲的内容比较深，不先学习的话去了也听不懂鸭~~今年咱们约起来一起去呗</p>
<p>2.我有没有必要在学习实操课之前先学习一下股票入门课呢？想把基础打牢了</p>
<hr>
<p>学了小白营就不需要学习入门课了。至于把基础打牢这个说法吧，在投资这里不太成立。投资是一门实践技能，需要通过实践去领悟的<br>初级实操课就会手把手教你如何实操了，跟着走一遍，很多东西你就无师自通了。反之，等你所谓的“基础打牢”了再去，可能投资机会就被你错过了。错过的都是钱啊！</p>
<p>3.长投学堂已经上市的话，那我们后期是不是可以买入基金（股票）了</p>
<hr>
<p>现在还没有上市哦~~在谈B轮融资上次A轮融资之后学费就涨价了，我估计B轮谈好以后也要涨</p>
<p>4.初级训练营就是实战课吧？</p>
<hr>
<p>嗯哼<del>就是实操课啦</del>话说你的保险课听了吗</p>
<p>5.A轮融资是什么时候谈妥的来着？</p>
<hr>
<p>2018年9月谈好的</p>
<p>6.看样子B轮融资应该快了</p>
<hr>
<p>现在正在组织实验班，下次我就去带实验班了，涨价的那种</p>
<p>7.那进阶班呢</p>
<hr>
<p>之前进阶和高级是给想当分析师的小朋友学的，后来大家想斩获更高的收益，强烈要求开放，就放开了</p>
<p>8.我前天看了你的个人分享，今天又看了长投的故事，觉得好棒啊，我也要加入这个圈子！直接找你报名实操课吗？</p>
<hr>
<p>私聊我就可以啦。人生最大的运气，不是捡钱，也不是中奖，而是有人可以鼓励你，指引你，帮助你，发现更好的自己，走向更高的平台，目前，这个人就是我</p>
<p>9.班班，看到你这样说我就明白了，投资还是得一群人一起相互交流才行。所以长投最有价值的，我觉得是这个不断一起进步的圈子，班班你说吧？</p>
<hr>
<p>是的呢~<br>长投有什么好？别的我也不敢说，我只敢说的是，圈子里的人，几乎都是有问必答<br>投资不是一阵子的事情，是一辈子的事情，我们为什么把原本的音频课变成训练营，就是想把投资变成一个普通人都能学得会的事情<br>而且圈子里人多，你随便一个问题也会有不同层次的人给你解答。当一些赚钱的机会来临，可能你也能一起获知<br>甚至有时候一个赚钱的机会，就不知道让你赚回多少的收益。或者一次善意的提醒，就能你避免多少损失</p>
<p>10.我还是挺怕我学不会的，不怕你笑话，我是高中毕业的。都三十好几了，我 也知道生活不易，但是也怕学不会浪费钱啊，一直都很犹豫。而且我小白课还有很多感觉没理解透的</p>
<hr>
<p>我学习的时候，有的同学从怎么用网页都是班主任一点点耐心的教的，我的每次实战作业，都有我的班主任精心点评。我构建的股票组合，班主任也有给指导。其实如果没有他们的这些帮助，我其实就是学了课程也不一定敢投资。这些是我觉得是这个圈子最可贵的地方<br>这些，才是我当初愿意付费学习，现在愿意来当班主任的原因。</p>
<p>11.「我有一个疑惑，班班你们都这么厉害，包括长投创始人他们。那这么厉害干嘛还要教别人？」</p>
<hr>
<p>emmmm，我觉得用另一种情景翻译你的话是：高中老师教学生干嘛，他自己为什么不去考清华呢<br>长投学堂教大家的是巴菲特、格雷厄姆等价值投资大师的投资原理<br>本杰明·格雷厄姆(被誉为 “现代证券分析之父”“华尔街教父”，价值投资理论奠基人，其在投资界的地位，相当于物理学界的爱因斯坦，生物学界的达尔文<br>作为一代宗师，他的投资哲学为“股神”巴菲特、“市盈率鼻祖”约翰.内夫、“指数基金教父”约翰.博格等大批顶级投资大师所推崇，如今活跃在华尔街的数十位资产规模上亿的投资管理人都自称为他的徒弟<br> 我们的目的是让大家掌握正确的投资方法，世界这么大，价值投资在任何一个投资市场都适用，无非就是低估的时候买入，高估的时候卖出，把钱投资给盈利能力强的好公司<br>我们投资赚钱，和我教别人方法，同样的原理去投资，并不矛盾，并且这是一种多赢，没人有空免费安利别人的</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享10</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB10/</url>
    <content><![CDATA[<p>股市小韭菜之快速亏掉100万的方法<br> 爬楼密码：20200119晚</p>
<p>一、股票投资的必要</p>
<p>今天教大家几个如何快速亏掉100万的方法。估计有小伙伴要在心里犯嘀咕，我是为了赚钱才进股市，你却教我如何亏钱？what？</p>
<p>查理·芒格说过：如果我知道我将死在哪，那我一辈子都不会去那。</p>
<p>可能有很多小伙伴还不了解查理·芒格，我简单介绍一下：查理·芒格，活着的最伟大的投资家之一，老爷子90+年纪啦，影响并改变了比他更著名的投资家巴菲特。巴菲特认为芒格有本事在两分钟之内说清楚一个复杂的商业本质。</p>
<p>有多少人抱着赚100万的念头进的股市，却亏的连底裤都不剩？</p>
<p>查理·芒格用逆向思维的方式来告诉我们投资的逻辑，当然，也是大多数亏钱的人的逻辑。</p>
<p>开始之前先说个题外话，有些同学和我说，股票我摸不透，不明白为什么会亏损，我不敢碰。这里想跟大家说说为什么不建议大家错过股票这个投资品。</p>
<p>第一个理由：因为股票是最具增长潜力的资产，只有投资股票才能享受人类发展的红利。</p>
<p>为什么这么说呢？</p>
<p>因为股票的背后是公司，只要人类文明继续发展，人类创造的财富，就会不断积累，而这些财富最重要的载体，就是公司。如果一个普通人一生都不投资股票，那他就错过了人类文明进步带来的财富福利。</p>
<p>第二个理由：我们想要财富自由。进入训练营的同学，应该都有财富自由的梦。想要财富自由必须要依靠资产，股票就是非常好的资产。</p>
<p>二、投资股票的误区</p>
<p>很多小白进股市常常是在牛市中后期。那时候，隔壁家的二愣子天天跟你讲，他昨天赚了800，今天赚了1000。</p>
<p>很多宝贝就开始心痒痒，他就一二愣子都能赚钱，我比他学历高，比他聪明，赚起钱来还不是轻飘飘的，然后就打开自己的小金库，想想要不拿5000块去试试，接着就风风火火的杀进去了。</p>
<p>当然了，这时候由于是牛市中后期，你的股票总会涨一涨，然后今天赚个300，明儿个赚500，没半个月，赚50%了，然后顿时觉得我特喵的就是巴菲特呀。</p>
<p>然后加大投入，继续涨，直到把全部身家都投进去了，结果，哗，股灾来了，割韭菜的活动得到顺利圆满地实施，下一波韭菜还要培养7年。</p>
<p>有没有同学不知道割韭菜的意思的呀？应该都知道吧？</p>
<p>下面我们来说说，纯韭菜的选股误区：</p>
<p>快速亏损100万方法一：以名取人</p>
<p>小白们在一脸懵逼、怀着一定要赢过隔壁二愣子的心态进入股市的时候，常常面临的第一个问题，我选哪个？</p>
<p>这时候常干的就是以名取人，比如这个叫中国建筑、这个叫中国平安，当然，还有其他各种，比如中国XX。哇塞，带着中国二字，好高大上！！！一定是个牛逼的公司。</p>
<p>当然，以名取人，也可以换种比喻。</p>
<p>就像一个男孩子，听到女孩子的名字叫张丽，李淑，王靓，就以为是美女、淑女一样，以为妹纸长这样。</p>
<p>美女，淑女，仙女，这是个超级棒的股票，一听名字就知道，而实际长这样</p>
<p>然后什么都不懂的，呃，被套了。被套了怎么办？最常见的—-装死。</p>
<p>就当我没这笔钱还不行嘛，我不看账户了还不行嘛，然后，就开始骂了，股市特喵的就是个骗子。</p>
<p>当然，看名字除了字面上的名字，还有一种叫做追热点，乐视有宝贝知道么？</p>
<p>给大家讲一下长投院生韩乔恩的故事。在2015年的时候，韩乔恩的女朋友挤破脑袋抢到手20万市值的乐视股票。当时买入的价格是30元/股；等到2015年，牛市结束，股价降到了20元/股。不肯卖出，虽然亏损了1/3，但是，乐视前景好呀~而且还准备进军手机，汽车，电子商务等等这些行业呢，怎么能卖呢？</p>
<p>然后发生了什么呢？</p>
<p>乐视发生了危机，贾跃亭“去”了国外度假，股价跌倒了十几块。相比于买入时的30块，已经腰斩了。你以为这就结束了吗？ NO，too young too simple。</p>
<p>韩同学的女朋友认为，再忍忍就好了，说不定会反弹呢？<br>后来呢？</p>
<p>股价只剩下不到3块，20万小金库蒸发了将近90%，还被暂停交易，至今无法卖出。</p>
<p>如何快速亏掉100万？</p>
<p>一定要追热点！越热越好！而且买了一定不要卖！不然，怎么实现亏损100万的小目标。</p>
<p>这样事情不止一次，2016年11月份的美国大选，不知道有没有宝贝关注过这两者的关联</p>
<p>川普当选那天咱们的A股市场有三只股票受到美国大选的影响，大涨或大跌，大家能猜到是哪三家么？</p>
<p>是川大智胜，还有两只分别是西仪和万科。</p>
<p>为什么会受影响呢？川大智胜是因为有川普大胜的意思；而西仪则是希拉里阿姨大败所以大跌了。</p>
<p>万科就更神奇了，是因为川普的女儿英文名发音是爱万科。</p>
<p>这就是A股很多投资者的神奇的投资逻辑——概念股~</p>
<p>这是3月27日的一个概念股新闻，上市公司澄清了，我们没有大麻，股民说：闭嘴，你有！</p>
<p>市场上的投资者就是这么不理智，大家想想看，这些人买入这些股票，真的知道这背后的公司是怎么样的么？大多数人就冲着一个名字就去买了，但是过后，就会死的很惨。</p>
<p>懂得价值投资的人们就会窃喜：都是肥嫩嫩的韭菜呀，我喜欢！</p>
<p>其实以市场上大多数投资者的智障水平，还没有到需要我们拼智商的时候。</p>
<p>不过大家换个角度看问题——如果在市场上大部分人都是这样投资的，那我们学习过的人，用靠谱的方式去寻找好公司的人，是不是赚钱的概率更大呢？</p>
<p>所以对我们来说，市场上的韭菜多其实这是一件好事，我们努力的成为一个理性的投资者，是一件很有价值的事情，而不是凭着感觉去追这种所谓的热点。</p>
<p>投资的门槛很低，几百块钱就可以进入了，但是很多人却不知道，投资是需要学习的，至少学过14天课程的人，就不会去追这种概念股。</p>
<p>大家要是去追，就别说是我教的人呀。学到这一点，今天的分享也有一半作用了。</p>
<p>快速亏损100万方法二：投资价格低的股票</p>
<p>我和一个朋友吃饭，她说她入市了。我说你挑了哪只，怎么挑的，她说，她挑的便宜的。</p>
<p>我说，怎么个便宜法……<br>她说，这只股票只要3元，我找了一圈，就它最便宜。</p>
<p>实际上，这是第二种误区，我们选股所谓的便宜，看的是市值有没有低于估值，而不是看单股价格。</p>
<p>但是，很多人以为这是逛菜市场，今儿芹菜贵不贵，冬瓜贵不贵，如果天天在菜市场逛，当然知道芹菜贵了，还是冬瓜贵了。可又不天天跟股市逛，你怎么知道他贵了还是便宜了？？？</p>
<p>如果我们以买青菜的心态入市，那最终钱就被自个儿吃肚子里了。别问账户为啥缩水了，吃肚子里，只能补补脑。当然，营养非常少。</p>
<p>快速亏损100万方法三：听人推荐选股</p>
<p>嗯~除了250地看名字和看价格选股，还有之前提到过的听人推荐选股。</p>
<p>听人荐股，假如你跟一个韭菜，那你只能是韭菜……韭菜带韭菜。</p>
<p>假如你跟一个，比如长投的某位前辈或老师，你可能选股和买点都可以抄到，但有一个问题，你不知道卖点。就是不知道何时卖。</p>
<p>然后，错过卖点，要么损失部分利润，要么就埋里面了……总之，完全不懂，只跟风，都是非常危险的！</p>
<p>最起码说，我们要知道买入卖出的逻辑，然后知道买点和卖点。说得理论点，就是会估值，懂这家公司的定性分析。</p>
<p>快速亏损100万方法四：不清楚股票买卖点</p>
<p>除了以上三个方法以外呢，还有一种</p>
<p>一个班班曾经讲过，她先生在14-15年那波牛市初就进入了股市，而且非常幸运地买了两只中小板股票。</p>
<p>于是在投入四万元之后，他们房子的首付就挣回来了，股票恨不得天天涨。然后，这位牛人在股市崩盘后，不仅没卖手中的股票，还学人家补仓。接着，到手的首付又还回去了。</p>
<p>她先生说，也不知道为什么赚钱，就看着它天天涨。</p>
<p>不知道怎么赚的，也不知道怎么亏的。所以，财富如过眼云烟呐。</p>
<p>为什么说他很幸运的选了中小板股票呢？因为那次牛市主要就是中小板板块带起来的。但是股灾来了的时候，受灾最重的就是中小板。</p>
<p>重到什么程度？买盘为0，你天天挂跌停价，也没人买，不是你想卖就能卖。</p>
<p>这里科普一下：股市是有人买有人卖才能交易，如果你挂出一个价没有人买，也是无法成交的。</p>
<p>所以说，不知道怎么赚来的钱，往往会莫名其妙地亏掉。人人都想投资盈利，但是投资也是要有相匹配的知识</p>
<p>上面说的就是韭菜常犯的4个误区里的事，今天来学习的大家，以后一定要避免</p>
<p>股市中可以赚钱，而且也有很多赚钱机会。只不过你如果没有足够的知识储备，了解存在的误区，那么很难去发现并抓住这个机会。</p>
<p>有的小可爱说，我不用自己发现，我有圈子。这种想法很不错哦，除了你个人去发现，也可以混圈子</p>
<p>比如说，小熊老师会和长投的分析师们的圈子。目前我的水平还达不到，所以我们混中级的圈子</p>
<p>毕竟，投资水平这个事儿，永远没有100分，只看你在0和100之间的哪个段位，照着中国韭菜的0投资水平，各位只要有个十分、二十分，就可以打败他们了，我们系统学习一下，就可以实现。</p>
<p>给大家讲个故事：有一对兄弟，去丛林里散步。走着走着，半路杀出一只猛虎。哥哥见状，拔腿就跑。弟弟愣了两秒，也立马跑去追哥哥。好不容易追上了，弟弟高喊：“别跑了，你是傻吗？它是老虎，我们是人，咱俩怎么跑也跑不过它的！”</p>
<p>哥哥头也不回地一边加速奔跑一边回答道：“你才是傻瓜，我不需要跑得比老虎快，我跑得比你快就行了”。</p>
<p>所以训练营的宝贝们，我们只需要比别人，每天多迈一小步，那你就比市场上的韭菜要高出一大截。</p>
<p>这几个就是今天的关于股市肥嫩嫩的韭菜们的故事。当然啦，更加希望大家以后可以组团去割韭菜</p>
<p>对了，大家有没有听过追涨杀跌这个词，对这个行为理解吗？</p>
<p>突然想到一只股票，可以跟大家分析一下这个，大家有兴趣听吗？</p>
<p>之前大火的战狼2大家有看不？</p>
<p>当时它的票房不是一路飙升么，然后它背后的传媒公司叫做北京文化</p>
<p>在7.26号这个低点他们的股价只有13块多</p>
<p>然后因为战狼2的刺激，股价瞬间飙升，这时候许多小散（韭菜）跟风进去，造成股价进一步上升，大家想想，他们有分析过这家公司吗？</p>
<p>并没有，纯粹是跟风、炒作！</p>
<p>我这里有个成交额的表格大家可以看一下</p>
<p>阶段一这几天如果你追涨进去，跑得快说不定还赚了一笔，贪心继续拿着<br>但是阶段二这几天，成交额高达四十三亿，这时候进去的基本全部被套牢，这群人就成了名副其实的接盘侠</p>
<p>后面一路大跌，除了因为本身这家公司的价值没有这么高，还有一个很重要的原因是因为很多小散看到一直跌就割肉了，大量卖出导致进一步下跌</p>
<p>所以为什么不建议追涨杀跌？<br>因为你没办法判断你跟风进去的这个点是不是会当接盘侠。</p>
<p>为什么会有那么多追涨杀跌？<br>因为很多人根本没有对股票进行过估值，全凭心情或听消息买入，不知道它的价值究竟是多少，所以当股价起起跌跌的时候会很慌，一有风吹草动就会频繁买卖。</p>
<p>最后总结一句，股票本身并不可怕，我们恐惧的往往不是事物本身，而是未知。</p>
<p>最后，我打算以唠嗑的形式给大家唠一下咱们班的同学提出的问题~</p>
<p>你们不知道，这几天，有好几个小伙伴偷偷问我~。注意，是“偷偷”，说非常喜欢班班，怕给班班添麻烦，不敢直接班级问</p>
<p>问我说：班班，如果长投的实操课真的像你说的那么好，那岂不是所有人都能赚钱，都能财富自由啦？</p>
<p>那所有人都可以通过实操课实践赚钱不赔，我们还能赚谁的钱呢？</p>
<p>你们有没有想过啊？</p>
<p>反正我当年也是思考过这个问题的，后来我自己想明白了~<br>真是一个非常有哲理的问题，也是很多很多同学关心的</p>
<p>我说，吼~这样小熊老师岂不是乐疯了，遍地长投院生</p>
<p>我说，等等，我先打断一下小伙伴的美好祝愿</p>
<p>你们看啊，报名小白营来咱们班学习的三百多人，现在有多少，你有没有觉得小白营真的学到知识了，真的有用？</p>
<p>他说，确实很有用。</p>
<p>我说那就对了，小白营，我会推荐给很多人都有必要学一学，但是真正来学的，减少了一部分，坚持学习的，又少了一部分，继续实操课学习的，嗯，绝对不会超过20%的</p>
<p>这不仅仅是二八定律在起作用，学姐刚才给大家的加餐讲了，巴菲特老爷子有一句话：当你有了省钱的脑子，就无法培养一个赚钱的脑子。</p>
<p>本身小贩们只要坚持200天，攒够了1000卢比，从此，他们收入就会节节攀升，这样美好的结果，几乎是触手可及（像不像实操课的诱惑？这是真实存在的）</p>
<p>BUT！只有不到10%的小商贩这样做，他们都不听不听<br>小贩们宁可每天去借钱度日，也不肯相信经济学家的建议，不肯从本钱中拿出一部分做长期投资</p>
<p>有时候想想，道理真的是相通的</p>
<p>我当年是懵懂的小白的时候，也想过这个问题。如果XXX这么好，所有人都可以赚钱啦！！</p>
<p>凭什么这种好事会落在我头上？我能不考虑一下是不是陷阱是不是危险是不是大坑呢？</p>
<p>事实看来，有很多人在这道证明题上都失败了。</p>
<p>“如果xx能够赚钱，那人人都是有钱人了，所以xx是没有用的”</p>
<p>如果上学能够赚钱，那人人都是有钱人了，所以上学是没有用的？</p>
<p>所以，别怕自己去学习有坑，你不去学习，不去实践，那就永远留在原地</p>
<p>当然啦，一起留下的，还有剩余的80%大多数穷人来<del>正好可以抱团</del></p>
<p>然后就会有娃动摇了，说，哎那我去学习，我报实操课，可是如果小白训练营的大家都去报名学习了，那我们怎么办啊？</p>
<p>我说，嗯，咱们长投创立以来啊，第九年了，实操课呢，也还好，大家听着500万实操课院生，觉得很多，压力很大，竞争对手多<br>但是你们知道，我们收割的韭菜有多少吗？</p>
<p>看一下大牛市的时候，跟风在高点开户进入股市做接盘侠的韭菜们有多少~</p>
<p>看看这些数据，后面的我没截。越来越多，只是在股票消息还不那么大众化的十几年前，短短5个月</p>
<p>算一下是多少？</p>
<p>342+127+404+675+791=</p>
<p>5个月，韭菜2339万，这是2007年</p>
<p>所以，灵伶还是非常有信心滴，长投的实操课是经过专业系统的实践检验出来的，也是小熊老师带领无数个分析师，设计出来的，绝对不会比“教授”差。</p>
<p>我也相信，学习了实操课，并且按照课程内容去实践操作，你是真的真的真的可以赚钱哒。</p>
<p>相信与否？</p>
<p>我想，在座的信我的也只不过20%吧？</p>
<p>当然啦，大家也不用认为说，自己短视才拒绝了这次学习机会，就算是大佬们，商业巨擘也难免有看走眼的时候。</p>
<p>大家都知道马云哈，刚开始创建四处碰壁，没钱，干不到半年，马云就发不起工资了</p>
<p>马云只好四处去融资，找到了联想的柳传志。柳传志婉拒了：“互联网，我看不懂。”</p>
<p>找到金山雷军。雷军拒绝了：“长得贼眉鼠眼，满嘴跑回车，以前是干传销的吧。”</p>
<p>于是，马云被无数大佬拒绝了37次，才有了今天的成就</p>
<p>这事告诉咱，不仅仅是普通人，就连大佬也有看走眼的时候，所以我们偶然短视犯个错误还是可以的，嗯，半年后，看到咱们其他同学有钱了，股票收益了，小伙伴们可以这样安慰一下自己~</p>
<p>还有些同学跟我说，班班我现在信心满满，准备冲进去大干一场！！</p>
<p>What？？？</p>
<p>班班温馨提示：不懂不碰，要是因为上了小白营，激活了一颗在投资上不安分的心，又不想花时间、花精力去投资自己，市场的学费很贵，多少人血本无归，劝大家不要重蹈覆辙。</p>
<p>答疑整理<br>1、我觉得这是心理战啊<br>答：没错，所有的投资，最后都是投资心态的较量，这个实操课也会教大家的</p>
<p>2、我想挖坑，种韭菜<br>答：股市从来不缺韭菜，其实割韭菜这种事情每个月都在上演，12月份有几天不是涨涨跌跌的吗？涨一段时间大家就觉得小牛市要来了，然后突然跌了几天，很多人就害怕再跌回去，再涨上来的时候很多人就卖出了，但是在他们卖出的当天，就是自己人在砸盘，无缘无故的，外资一直在买入。其实韭菜他是不知道价值，所以他恐慌，他看到自己富盈由多变少，就想着落袋为安，卖出后，发现还在涨，就哭晕在厕所了。</p>
<p>3、最好一直是熊市<br>答：学完就是这种状态，并不期待牛市明天就来，因为咱们需要时间准备筹码。但是距离2015年的牛市过去五年了，熊牛是有周期的，还剩多少时间给我们，真的说不好，我们等不起，也拖不起。不少人说，班班学姐，未来半年我都在忙，六七月我再来学习，你一月把未来半年的忙碌都预测了，等到六月份，你该预测下半年的忙碌了，还是没时间呀，股票实操课主要是组合选股的思路，其实比较适合没有时间深入研究的人，通过持有多个篮子的鸡蛋，组合选股，这个你要是能忍住，一年一看都可以。比如基金定投，你学习以后一个月看一次十分钟就行，每天的学习并不会花费太多时间，反而人如果只知道本职工作，其实风险会更大。现在是个发展多种技能的社会，切换思维能力越强，过得越好。<br>基金和股票每天30分钟上下班就学完了，晚上有群里的答疑和分享，两门课程分别只要14天就能上手实操，我遇过一个北京的公务员，她为了听课就不开车上下班了，坐地铁，可以听课，因为她自己晚上非常忙，还有MBA的课程要上，基本上回到家就是12点以后还要在群里跟同学讨论方案。<br>时间管理就是这样，你把人生大事放进去，其他的小事还可以无限的添加，但是你把小事放进去，想要再安排大事，基本上是不可能的，因为你已经被琐事缠身了</p>
<p>4、免费的知识和付费的知识最简单的区别就是付费是干货<br>答：免费的也有干货，但是需要咱们花时间精力去挑选，后边要付出什么怎么根本摸不透，因为谁也不是大闲人，做无偿的知识服务。</p>
<p>5、我简单说一下我的分析，付费和免费的区别，举个例子免费的知识通过昂网络，大部分知识都找得到，因此没必要为知识付费。 问题来了，既然知识付费不需要了，那从幼儿园到大学的教育体系是不是可以抛弃了？为什么这些教育体系和衍生出来的培训班、辅导班还在大把挣钱呢？岂不是从小教孩子上知乎、搜百度就行了，还上学干嘛呢？ 知识都有，找个好的图书馆，加上百度和维基百科，理论上可以满足绝大部分的知识需求。就好比把一个人丢到大森林里，照理说到处都是食材，但绝大部分人还是会饿死。他们并不掌握寻找、获得、处理、加工食材，进而从中获得营养的技能。而教会学生掌握这些技能，或者把食材加工好端到他们面前，这是教育要解决的问题。也是知识付费要解决的问题。（优秀的思考）<br>答：这个思考让我刮目相看呀，几乎没人让孩子在家自学，但是到了投资上，瞎琢磨的人真的是不少，这也给了咱们割韭菜的机会，学了也不一定敢实操，但是学习的最终目的就是为我所用，达不到这个目标，都是徒劳</p>
<p>6、 现在说的只是框框，没有实质性的具体东西<br>答：股票分析是一个系统的课程，不是一两句能说清，长投的股票课程有四门，衔接小白营的是实操课程，就算是实操课程也是要14天才能学完，而且要去实操的，就是一步步筛选分析，一两节课肯定说不完，也不可能学会的</p>
<p>7、那怎么看财报？怎么分析估值？<br>答：财报通过官网或者巨潮咨询网都可以下载到，基金和股票课都会教大家怎么看，选那些数字怎么计算，然后在进行估值，再说年报一份就几百页，自己去看肯定会看晕的，这些都需要系统的从头学。估值是要从年报查看开始的，不是我说个方法你们就可以去算了，而且还有前提，就是用工具把垃圾股剔除掉，如果人工去做这件事，上市公司超过3000家，真的会先疯掉，咱们要善用工具，我们可能跑不过豹子，但是咱们可以开车，坐飞机呀</p>
<p>8、学了实操课还用不用学进阶课呢？<br>答：我今天仔细点说吧，要看咱们的需求，如果只是家庭财务的保值增值，实操课足够了，如果对收益有更高的要求，等学完初级再考虑。我自己是学了实操课，现在已经过去一年了，刚开始去进阶，我不能一直停留在原地。所以，实操课完全可以实操，综合年化收益10-20%，如果对这个收益满足了，学初级就可以啦。长投还有高级课的，这是培养分析师的，很烧脑，建议大家如果没有这方面的规划，不要去学习<br>可能很多人看到有很多课，怕一级一级要求去上，这就跟咱们上学一样，大专毕业、本科毕业，研究生毕业都可以找工作，都能养活自己，但是待遇不一样，咱们来学习的同学，大部分都是奔着跑赢通胀，合理规划家庭资产，实现资产的保值增值来的，实操课足矣</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享11</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB11/</url>
    <content><![CDATA[<p>定投出来的千万富翁<br>爬楼密码：20200120<br>股神巴菲特大家都认识吧？为了照顾不认识巴菲特的同学，班班首先简单介绍一下这位传奇的老头子，先放上一张老头子的靓照，还挺帅的有木有。</p>
<p>他最大的成就，是在50多年间不断投资收购好公司的股票，让自己公司的股票增值了超过3.7万倍！他的公司，伯克希尔哈撒韦，也成为了股票界的一股清流，每股股价高达约31万美元，折合人民币是213万。一份股票，就足够我们在二三线城市买套房子了。<br>话说巴菲特在17年致股东的一封信里面讲了一个关于赌注的故事：<br>2005年，巴菲特向所有主动股票基金经理下了一个战书，以10年为限，赌没有一个主动基金能够打败标普500指数基金，赌注是50万美金。<br>赌局一开，整个华尔街居然沉默了，没有人敢来应战.<br>直到2008年，普罗蒂杰公司的投资经理泰德·西德斯精选了5只基金，要在未来10年与巴菲特的标普500指数基金一决高下。<br>截止到2017年，9年过去了，巴菲特的标普500指数基金收益为85.4%；而同期泰德.西德斯的五只基金收益率从2.9%到62.8%不等，组合收益率只有22%。</p>
<p>西德斯在2017年5月5日也主动认输了。他说：“虽然赌局还有八个月，但本质上一切都结束了，我输了。”<br>大家觉得为何巴菲特敢挑起这个赌局呢？下面，我们就来揭开指数基金的神秘面纱。</p>
<p>第一部分、什么是指数基金?</p>
<p>1、什么是股票基金<br>我们先来了解什么是股票型基金。货币基金是专门投资于银行间存款,债券基金是专门投资债券，那股票基金就是专门投资股票的基金。<br>现在A股共有三千多只股票，大部分人是分辨不出来好坏的。于是基金经理出场了，大家把钱交给他，他来帮我们买股票。<br>所以股票型基金就是买了一揽子的股票，我们买基金，就是在买这只基金的持仓股票。<br>也就是说，我们买股票型基金，本质就是买股票。这也就是为什么班班会说，基金股票不分家<br>相对来说股票型基金比我们直接买股票风险小一点，因为我们买了很多只股票嘛，即使其中一只出了很严重的问题，也不至于太惨。<br>基金可以分成主动型基金和被动型基金，通常我们说的股票基金都是指主动型基金，而被动型基金就是指数基金</p>
<p>2、主动基金vs被动基金（指数基金）<br>主动基金就是由基金经理自己选股的基金，基金的业绩取决于基金经理的能力。<br>而被动基金呢，就是不由基金经理来选股，那怎么决定持仓股呢？答案是指数。<br>指数是一个通常由交易所制定的指标，用来反映市场的平均水平。<br>大家刚接触到它可能有点懵，班班来给大家举个例子。<br>比如我们现在要在市里选300个优秀学生，首先定个标准，考试成绩在全市前300名。再定个标准，体育成绩在80分以上，德智体美劳嘛。再根据每个学校的水平（比如全市第一中学的名额多于第二中学），以及文理分科（比如文理占比为4：6）等等标准。<br>然后就能选出来我们想要的这一批优秀学生。<br>那么，这一系列的标准就叫指数，通过一系列的标准选出来的股票（学生）就叫成分股。去追踪购买这些成分股的基金，就叫做指数基金。</p>
<p>历史数据证明，将近80%的主动基金都跑不过指数基金。<br>所以巴菲特这个从来不推荐任何具体投资标的的老头子，20年间一共向普通投资者推荐过十几次指数基金</p>
<p>3、指数基金的优势<br>为何巴菲特笃信指数基金会战胜主动基金呢？<br>首先是由于主动基金的缺点——无法摆脱人性的弱点。按道理，投资要在熊市买进，在牛市卖出。<br>基金经理明白这个道理，但是他们表示：臣妾做不到啊。因为客户做不到。那些基民都是在牛市申购，熊市赎回，基金经理也不得不在熊市卖出，牛市买进。所以80%的基金跑不赢指数也就不足为奇了。这也是为什么有人定投了好多年基金，还是亏损的<br>其次则是指数基金的优点：<br>①.灭绝人性。<br>指数每年根据规则定期调整成分股，指数基金也机械地跟着调整持仓股票，所以能够摆脱恐惧和贪婪的影响，不会干追涨杀跌这种事情。<br>②.长生不老。<br>公司会死亡，会消失，但是指数不会，它通过定期调整成分股，通过引入新公司，剔除老公司的方式实现了真正意义上的长生不老。<br>举个栗子，美国的道琼斯指数：</p>
<p>这个指数（上图）也是经历了很多曲折和磨难的。最初大量的财报作假，安然公司丑闻，因为战争的休市，以及08年金融危机等等，然而经过了九九八十一难的指数依然在茁壮成长。<br>真正是铁打的营盘流水的兵，我们买指数，相当于买营盘，买具体股票，就等于买某个士兵，士兵可能阵亡，但是营盘会在那儿。<br>③.永远上涨。<br>这是在200年间，各个资产的涨幅。股票从1美元涨到了755163美元，也就是涨了755163倍。</p>
<p>我们来看看中国的情况。</p>
<p>这是恒生指数近25年的走势（也就是港指）。<br>恒生指数诞生于1964年，最初是100点，现在已经28000多点了，53年上涨270倍。</p>
<p>这是上证指数近30年的走势，说到这我不得不为A股来正名了，谁说A股不赚钱了。<br>尽管只诞生了不到30年，中间也经历了起起落落，但从1991年初的100点，上涨到现在的3100点左右，28年上涨了约31倍。年化收益率达到12%+。<br>指数为什么会永远上涨呢？<br>因为指数的背后是公司，指数会定期调仓，把赚钱能力强的公司选入指数，淘汰赚钱能力弱的公司，所以，指数必然是长期上涨的。<br>巴菲特说过（又把巴菲特拎出来了），买指数基金就是买国运。只要相信国家经济能继续发展，指数基金就能长期上涨，我们就能分享国家经济增长带来的收益了。</p>
<p>第二部分、定投</p>
<p>我们了解了指数基金，接下来我们讲讲我们的千万富翁计划。<br>计算器：<a href="https://h5.ichangtou.com/AssetsGame/indexGames.html?code=071aCdxq0ndwum1bjZtq0tLrxq0aCdxe&amp;state=landing#/CompoundInterest/Calculator" target="_blank" rel="noopener">https://h5.ichangtou.com/AssetsGame/indexGames.html?code=071aCdxq0ndwum1bjZtq0tLrxq0aCdxe&amp;state=landing#/CompoundInterest/Calculator</a></p>
<p>先来给大家放班班这张千万富翁计划，大家能看出班班的千万富翁是利用什么样的投资方式达成目标吗？<br>对，基金定投，确切的说是指数基金定投。<br>那么是不是所有的基金定投都可以获得这么好的收益呢？有的小伙伴说，我现在知道要选择指数基金了，那么我就选择一个指数基金投就好了。<br>有人说：每月固定投资额，按时定投，不管大盘。我们把这种定投成为傻瓜式定投，简称“无脑定投”。<br>我们来看无脑定投的效果。我们来看图，这个是班班随意选取的一个指数基金510500(只用于教学，不构成投资建议)，我们从2014年11月开始去定投，一直到2017年7月。</p>
<p>是谁说指数基金定投就一定可以赚钱的？我亏啦！我亏啦！我亏啦！<br>没有跑赢通货膨胀就算了，还亏啦！那么为什么亏了呢？因为走过了一个哭泣路径。如下图</p>
<p>是从1到2，再到3的！<br>那么指数基金怎么赚钱？其实指数基金赚钱的最好的路径是走一个微笑曲线的路径。 </p>
<p>从1开始投，经历2，再到3，走出来一个笑脸。如下图这就是一个笑脸路径的结果</p>
<p>定投同一只基金，半年收益49%！有没有羡慕嫉妒恨？<br>好，现在大家知道了定投的微笑曲线，我们放一个大盘走势图大家来判断一下从哪里到哪里是微笑曲线<br>哭泣曲线呢？</p>
<p>大家都说对了，ABC是哭泣，BCDE是微笑。大家看着图都知道，这个叫上帝视角，开了挂的当然知道了。<br>现实情况下，我们怎么能知道接下来走的是微笑曲线还是哭泣曲线？<br>也就是说我们怎么知道是处在A点还是处在B点？我们怎么判断？根据指数涨跌吗？还是根据指数点位？3000点进场，6000点离场？<br>答案是无法判断，谁也不能预测市场<br>连股神巴菲特老人家(还是巴菲特)都说，我们永远不要去预测股市<br>所以我们不判断它！<br>在过去长达6年的时间里，指数点位大部分时间都在3000点以下，如果真的3000点进场，大部分时间都是亏损的。<br>所以，正确答案是：估值。我们要做的是学会估值，根据估值来决定是否进场！<br>如果当前的估值比较低，也就是说价格是低于基金的内在价值的，那么我们这个时候就要买入。<br>打个比方，一篮子打包好的菜，价值100元，某一天市场冷清菜卖不了，降价处理为80元，这个时候价格80小于价值100，就要果断买入！<br>关于如何辨认高估和低估，有一些估值指标，比如市净率，市盈率等。波动越大的指数越容易出现低估和高估。<br>这是因为波动来自于两个方面：<br>一个是业绩的波动，一个是人心的波动。<br>两个叠加，就会出现低估买入的机会和高估卖出的机会</p>
<p>一下子看不懂也没事，可以先把笔记记下来慢慢理解，另外基金实操课也会手把手教大家根据估值和策略定投的。更重要还在于找到最便宜的的指数买，也就是当前价格远远低于其内在价值的指数基金去买。</p>
<p>A股的长期历史回报率在10%左右，也就是说，从长期来看，就算无脑定投，也能获得一个10%的平均收益。<br>那你可能说，那我自己定投好啦，干嘛要花一千多块的学费呢，10%我就满足了。<br>那我们就要说回到复利三要素了：本金、时间、收益率。<br>1、我们的本金，是因人而异的，没办法选择，只能在后面两项下功夫。<br>2、再来看收益率的影响。我们先假设大家自己定投，去选基金，去选买入和卖出的点，没有买到牛市顶点，能获得年化10%的收益。<br>那么每月定投2000，那么30年后，我们将有多少资金？456万</p>
<p>如果是15%年化收益呢？1402万<br>5%的差异，30年后我们的收益会相差300+%哦<br>还有同学说，我自己也可以投资，每年达到7%的收益，我也很满足了<br>那么我们来看看</p>
<p>怎么样？7%收益，30年后，才有245万，而15%的收益，30年后，有了1402万。8%的差异，30年后我们的收益会相差好几倍哦，而之所以有这么大的差距，也仅仅是因为，我30年前比你多系统学习了一些而已。<br>所以这钱值不值得用来提升这8%的收益，大家自己衡量啦。假设投资这项技还能用40年，那量化思维，每天只需要一毛钱。<br>买个衣柜衣服睡，买个车库车子睡，反正比我聪明的人多的是，投资学习就是拥有未来的财富和梦想，哈哈。<br>另外，大部分人自己定投是凭感觉的，凭感觉的定投缺点是什么呢？就是你不知道自己做对没有，很可能一次大跌，你是定投不下去的，最后能获得7%的收益就不错了。</p>
<p>3、再来看下时间因素。</p>
<p>每相差5年，最终收益都会相差2倍以上，仅仅5年而已。<br>人的寿命是有限的，20岁就开始投资的人必定会比30岁才开始的人累积更多的财富。那么，你今天还不开始，还在等别人把你甩得更远吗？<br>有时候人和人的差别，就在于当初的选择。<br>今天来参加训练营的小伙伴，很大一部分只会成为一个过客，毕业后依然回到自己原来的生活轨道中去。因为他很难走出自己的舒适区域，也不愿意相信自己可以改变。<br>而另一少部分人，会选择一条新的道路，认识新的朋友，看到新的世界。<br>在很多时候，我们大多数人的精力要放在升职加薪，在职场上获得更多工资上。如果选择定投指数基金，那么在达到市场平均收益的情况下，这时候实际上比很多人都要高了，也可以让自己变得更加轻松。</p>
<p>那么，我们说回来，什么样人的适合定投？<br>如果大家自己或家人属于那种平常带孩子比较忙的妈妈们、经常加班的上班族们，以及喜好中低风险的投资者，那么基金定投都是非常优秀的投资方式。<br>尤其适合十几年后孩子上大学的教育费用、为二十年后准备的养老金。提早以定投的方式来积累这些未来会花到的大额资金，能让每月的小钱在未来变成大钱。<br>我就是通过指数基金来配置养老金的。<br>当然还有月光族，对于想要摆脱月光一族的朋友，基金定投可以充当强制我们储蓄的管家，以此来培养我们良好的理财习惯。</p>
<p>今晚的分享就要结束了，班班先带领大家回顾一下今晚的重点内容：<br>1、基金分为主动基金和被动基金（指数基金），指数基金曾被股神巴菲特设赌，最终，指数基金获利极大的胜利；<br>2、指数基金的特点为：灭绝人性、长生不老、永远上涨，买指数就是买国运；<br>3、定投指数基金要选择微笑曲线，而决定何时入场，就得学会估值；<br>4、相同本金及相同定投的情况下，每年投资收益与人相差5%，在复利的作用下，30年后的差距可能相关近千万。</p>
<p>班班最后唠叨一句：生活中很多事情，并没有那么多的“刚好合适”，也不存在什么“伺机而动”。<br>生活的真相是：只有行动才会创造机会，要想改变，从行动开始！有很多同学已经开始行动，剩下的同学，你们准备等到什么时候呢？</p>
<p>今晚的分享就到这里啦</p>
<p>答疑：<br> 1、支付宝的基金到底怎么样？ </p>
<hr>
<p>咱班同学很多在支付宝定投基金，可能觉得基金损失也不大，就试试水。但是你们要知道，首先为什么这么多基金，支付宝要推荐这只给你？最重要的原因是，基金公司为这些基金出了广告费。</p>
<p>为什么要额外出广告费？有这么几个因素：1、这是一只新基金，刚刚诞生，基金公司要大力宣传，不然没有人买，就没有资金来运作。但是，新基金是绝对不推荐投资的，风险系数太大，不管你买的是货基还是股票基金，投资基金最少要选已经上市3-5年的。这是选基金的一个要素。</p>
<p>第二个原因更坑爹了：这是一只滞销的基金，没人买，快运作不下去了，那就投点广告费来推广一下。 这种滞销品，哪来的投资价值呢？</p>
<p>还有一种原因，不是基金公司主动推广。而是平台靠大数据抓包，通过某种算法，发现这只基金最近涨势很猛啊，赶紧推出来。大部分追涨杀跌的人一看，能赚钱、买！这样平台也能多吸引用户、多收手续费。</p>
<p>2、一般基金定投的周期是多久呀？</p>
<hr>
<p>没有周期的，是根据估值来判断，达到一定估值就卖出落袋为安</p>
<p>3、那这样说和股票的操作概念是一样的咯？</p>
<hr>
<p>不一样的，基金主要是筛选估值，股票要分析公司，也要用到估值，重点是构建股票组合，学的要深一些</p>
<p>4、班班，基金定投起步多少呀？</p>
<hr>
<p>一两百就可以了，咱家学姐最早也是没钱，就从200块开始，总是要开始才会有后面的~</p>
<p>5、班班，指数基金怎么投？实操课会教的吗？</p>
<hr>
<p>对，基金训练营会教的</p>
<p>6、教完自己就会定投了吗？</p>
<hr>
<p>是的，学会定投策略，就可以开始定投了</p>
<p>7、是报名了就立刻开始上课了吗？</p>
<hr>
<p>不是哦，时间自由安排，目前2月，3月都有班级可以选</p>
<p>8、我还想学股票，是怎么上呢？</p>
<hr>
<p>和基金营差不多的。有人带领，时间自由安排</p>
<p>9、保险和开源呢？</p>
<hr>
<p>保险和开源是在app听音频课，保险课学员你就可以自己配置保险方案了，学习期间时间可以自由安排</p>
<p>10、那很好，我很想继续学习，就怕时间冲突。那优惠是个什么情况呢？为什么不能公开说呢？</p>
<hr>
<p>没啥不能公开的，之前不公开是因为长投年会后知名度迅速上升，没有上过小白营直接通过公号原价报名的人非常多，一下子接待不过来啦，所以优惠名额只能控制了。今天我正准备通知大家，咱们班优惠名额只剩下8个，打算继续学习的可以来找我了</p>
<p>11、啊，那么少啊？我还想等上完小白营来报名呢  </p>
<hr>
<p>咱们名额是按作业分配的，我天天催作业有人都不写，哪儿有名额可分？</p>
<p>12、基金营股票营也要写作业吗？</p>
<hr>
<p>对哒，也有作业的~</p>
<p>13、那我暂时没钱，怎么实操？</p>
<hr>
<p>实操就是教给大家如何制定定投计划，如何选股，暂时没钱可以不投的。不过话说回来，一两百块就可以定投了，你和我说没钱过分了点哦？</p>
<p>14、班班，我也要报名的，在等钱到账，求留一个优惠名额</p>
<hr>
<p>名额都不够分，怎么留得住啊！你钱什么时候能到账啊？</p>
<p>15、优惠名额是什么啊？</p>
<hr>
<p>就是接下来的实操课，找班班报名有优惠的~</p>
<p>16、我还是不太理解，我看基金的评价方式一般都是利率，即使是股基也不应该是按股价算的，这个微笑曲线按理说纵轴也应该是类似股价的概念才成立，如果纵轴是利率，那么哭泣曲线岂不是收益更好？</p>
<hr>
<p>纵轴是你买入的价格</p>
<p>17、等于说股基就是分篮子放的股票，他的股价也收多只指股的综合影响。估值也应该是由指数判断多只实时股票的综合结果，这么理解全面么？</p>
<hr>
<p>你理解的不对蛤，股票型基金一般就是我们说的主动型基金</p>
<p>18、还有指数基金相较与其他基金的劣势在哪？</p>
<hr>
<p>首先要明确你说的是其他什么样的基金。如果是主动性基金，那么指数基金几乎没有劣势，如果是货币基金、债券基金，他们的收益率更是比不上指数基金了，但是在实际生活中他们起到的作用是不一样的，比如说，货币基金用来存放家庭应急金就很合适</p>
<p>19、那既然指数基金这么优秀，为什么还有其他基金存在，不应该优胜劣汰么？</p>
<hr>
<p>很多人根本就不知道指数型基金与增强型、其他型的分别，来学理财的人本身就是小众群体，学习实操课的更是少之又少，你觉得有多少人会筛选呢</p>
<p>20、年利率会一直不变么？会有变动吧</p>
<hr>
<p>利率每时每刻都在浮动，从你买入的时候，到你卖出的时候收益多少，来计算年化综合收益率，比如5年收益60%，那么年化综合收益率就是12%</p>
<p>21、对标A股指数的基金也是指数基金吗？适合定投吗？</p>
<hr>
<p> 对，是哒，也是指数基金，但是a股3000多家公司，好公司才多少，直接针对整个a股的指数进行定投，那收益率就没那么高啦</p>
<p>22、现金分红，红利再投资主要区别</p>
<hr>
<p>现金分红就是分红变成现金回到手里~红利再投资就是红利变成本金继续进去生钱</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享13</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB13/</url>
    <content><![CDATA[<p>课前故事</p>
<p>从前有一个人，非常信仰上帝。一次发大洪水，他被困在屋顶上，他相信上帝一定会来救他。这时，来了一艘小船，船上的人让他上船，他不去，说：上帝一定会来救我的！小船走了。过了一会儿，又来了一艘大船，他看了看，说：上帝一定会来救我的！水很快就要漫过屋顶了，这时,来了一架直升飞机，垂下绳子来让他上去，他还是没有接受，说：上帝一定会来救我的！最后,这个人被淹死了。</p>
<p>死后，他到了天堂，见到了上帝。他问上帝：我那么相信你，你为什么没有来救我呢？上帝说：小船，大船和直升飞机都是我派去救你的，可是你不接受啊。就算是上帝也无可奈何。我们现在有这么好的机会摆在面前，希望大家都能抓住它，使自己获得新生。</p>
<p>那些稍纵即逝的投资机会</p>
<pre><code>爬楼密码：20200122</code></pre><p>小伙伴们，今天晚上我们来讲讲关于投资机会的那些事儿</p>
<p>之前班班看过一部泰国电影，《天才枪手》。故事很简单，我用一句话就可以概括了。</p>
<p>一个出身平凡的天才少女为了钱，帮助一群富二代在考场上作弊取得好成绩。电影是泰国人拍的，但据说原型发生在中国。</p>
<p>2015年5月30日，美国一家华人网站报道，一名中国留学生特地从美国德州飞往加州南部参加托福考试，因为全美同一天的托福考试使用同一套题，且在同一时间开始考试。当处于中部时间(EST)的德州于上午10:00开考时，处于太平洋时间(PST)只处于上午8:00，距离开考还有2个小时。德州的考生可以利用中途休息，想办法将题目和答案传给位于加州的考生。而且，身在中国大陆的考生，有的甚至不远千里前往泰国、越南、新加坡等东南亚国家进行作弊。</p>
<p>我相信这个作弊的方法肯定不是第一年使用。在被发现之前，已经有不少人通过这种方法获得了美好的成绩和美好的人生。</p>
<p>有钱可以为所欲为，富二代可以用钱让穷二代帮自己作弊。</p>
<p>如果作弊这种方法大家不可以接受，那么高考移民呢？那么民族加分呢？那么换个国籍成为归国华侨呢？</p>
<p>还是那句话：有钱，真的可以为所欲为。</p>
<p>每一个漏洞被封堵住之前，都有大量的人利用这个漏洞，获得超额收益。</p>
<p>这就是这个社会的游戏规则。</p>
<p>那这个跟我们投资有什么关系呢？</p>
<p>最近几年投资赚钱比较多的时候是2014年到2015年，大家知道是为啥吗？</p>
<p>2014年到2015年是股市的大牛市，而且，那时候，市场上有很多有意思的投资品种可以获得不错的投资收益，比如可转债</p>
<p>大家可能不知道什么是可转债，我稍微解释一下，可转债的本质是一种债券，但是呢，这种债券可以在一定条件下转换成股票，比如面值100元的可转债，约定你可以以25元1股的价格转换为股票这样，那么如果你90元买了一家公司面值100元的可转债，可能会出现3种结果：</p>
<p>如果这家公司的股票价格一直在25元以下，那么等这个债券到期了，债券兑现，你赚了100-90=10元还有债券到期的利息；</p>
<p>如果股票涨到了30元，那你可以以25元的价格转换这家公司的股票，转了4股，那么你可以赚30*4-90=30元。</p>
<p>而往往股票价格上涨也会带动这家公司可转债价格的上涨，所以你也可以选择在可转债的价格涨到100以上的时候卖出</p>
<p>这样大家能大致理解吗？</p>
<p>可以说，投资可转债因为有债券的性质，又有转股的功能，基本稳赚，下有保底，上不封顶，是不是感觉很爽呢？</p>
<p>可惜的是2015年-2017年的时候这种投资机会已经基本找不到，那段时间可转债的价格基本都在100元以上了</p>
<p>而在2017年9月25日，可转债市场出了新玩法，这是第一只信用申购的可转债发行申购日，开启了全民申购转债的时代，这就是典型利用漏洞的投资机会的例子。</p>
<p>信用申购是什么？我们来看看申购的游戏规则：</p>
<p>社会公众投资者：申购代码“072271”，在T日进行网上申购时无需预缴申购资金。每个账户最小申购数量为10张(1,000元)，每个账户申购上限是10万张(1,000万元)。中签客户应确保资金账户在2017年9月27日(T+2日)日终有足额的认购资金。</p>
<p>这个可转债的特点是“信用申购”，也就是说，就算我们手头没有1000万元，只要你有股票账户，也可以申购1000万元的可转债。</p>
<p>对于这个可转债申购正确的做法是什么呢？当然是顶格申购了，也就是申购1000万元的可转债。</p>
<p>当时有一个班班听说讲这件事就参加了这笔1000万的大生意，并且幸运的中了一签，1000块钱，一个月后雨虹转债上市后卖出，获利200元（看起来不多，但是白捡的）</p>
<p>不过作为第一只信用申购可转债，雨虹转债的中签率是新玩法实施最高的</p>
<p>那几个月全民申购转债的时间里，所有人都在宣传可转债，导致知道这个无风险薅羊毛机会的人越来越多</p>
<p>第一只可转债雨虹转债，有效申购户数261万户，顶格申购率77.34%，平均7.58个账户中一签；</p>
<p>第二只可转债林洋转债，有效申购户数482万户，顶格申购率90.88%，平均6.79个账户中一签；</p>
<p>第三只可转债金禾转债，有效申购户数542万户，顶格申购率95.07%，平均78.56个账户中一签。而这个时候，因为申购的人越来越多，每个账户顶格申购的数量只有100万了。</p>
<p>相比起第一只可转债信用申购，现在可转债信用申购已经慢慢连鸡肋都不如了，可转债打新的性价比将非常低。</p>
<p>我们以中一签可转债赚200元计算。</p>
<p>雨虹转债，以7次输入计算，按按手指头，7分钟搞定，拿200块钱。</p>
<p>金禾转债，以78次输入计算，按按手指头，78分钟搞定，拿200块钱。</p>
<p>当然，能够输入78次中一手的前提是，我至少有78个股票账号。</p>
<p>点78下和点7下完全不是一个概念的，类比的话就像连续做70个俯卧撑和连续做700个俯卧撑。</p>
<p>而从可转债到全民申购的盛况，再到第一支可转债破发（跌破100面值的发行价），这其中的时间不过3个月，无脑申购就能赚钱的时代也转瞬即逝，一大波亏了钱却不懂的可转债本质的韭菜们纷纷离场，到了12月份宁行转债申购时，申购量创新低，从中签率历史新低，到只要申购了，必中1签，</p>
<p>现在，韭菜们再也无法无脑申购了，只有掌握了可转债的投资知识，懂得分析公司经营情况的人，知道挑选可转债进行申购的人才能继续在可转债这个市场上薅羊毛。</p>
<p>那么这个转债的投资机会告诉我们一个什么道理呢？</p>
<p>实际上，大部分的暴利投机都会经历这么一个过程，从少数人掌握到多数人知道，然后，漏洞就被堵住了或者失效了，再到韭菜被收割离场，只剩下懂行的玩家。</p>
<p>只有不断精研规则、持续学习，自我迭代的人，能吃到一个又一个甜点，获取一份又一份超额收益。</p>
<p>再说一个投资品种吧，分级基金，分级基金分成分级A和分级B，分级A借钱给分级B，分级B去炒股，也就是说这个分级B是上了杠杆的，这个可以理解吧</p>
<p>这个投资品种也是之前让长投的胭脂王大神赚得很开心的一个投资品</p>
<p>胭脂王是谁？胭脂王是长投的老院生，长投的股票分析师</p>
<p>去年A股的年化收益已经达到了46%，大家以后如果在长投的圈子里可能也可以看到他活跃的身影</p>
<p>说回分级基金，现在这个投资品里基本没有韭菜了，获利的机会也大大减少了，为啥呢？</p>
<p>事情的起因是这样的</p>
<p>分级基金初始是一份一元，两份分级基金拆分成一份A和一份B，A和B的初始价格也是一元，由于规则的存在，具体规则不详述，有点复杂，总之，A和B的价格常年是在1元左右</p>
<p>于是乎，股灾时候，国家雄心壮志地要救市的那段日子里，有一天开盘涨停了，很多韭菜要去抄底啦</p>
<p>抄哪个好呢？</p>
<p>韭菜的想法就是，当然是最便宜的呀，就买了各种B</p>
<p>然后，结果就悲剧了，那天是分级基金重新清算的日子……很多追高买入的B，当天亏损就在70%+</p>
<p>为什么呢？因为这个B在市场里面是价格远远高于内在价值的，清算要按照净值清算，很多人第二天开盘傻了眼，怎么一夜间，账户缩水了70%</p>
<p>大家也知道韭菜么，喜欢追涨杀跌</p>
<p>然后就精神崩溃，不带思考，赶紧抛，赶紧抛，压在跌停价抛</p>
<p>很多老司机就在那儿等着，哇塞，跟下饺子一样（说的就是胭脂王大神）</p>
<p>之后，这个B连着一个星期涨停，像胭脂王这样的老司机赚得盆满钵满，韭菜们亏得底裤都没了</p>
<p>接着发生了神马事情嘞</p>
<p>亏了这么多，韭菜们不干了，蠢货绝对不会承认自己蠢的，一定是基金公司骗了我！</p>
<p>然后，到处问，你也亏了，他也亏了，发现蠢货还很多 ，于是，蠢货们手拉手跑证监会拉横幅去了</p>
<p>于是乎，格外关心中小投资者的证监会，将这个美妙的只有中国A股才有的产品，调整到了30万的门槛</p>
<p>自此，小市值用户再也玩不到这么美妙的产品了</p>
<p>这个门槛把很多小白拦在了外面，然而，更惨的是，剩下的都是有钱的高手</p>
<p>用胭脂王的话说，如果一个市场都是高手，那么是很恶心的事情，你想想，是在新手区抢怪容易呢还是在高手区和高手搏杀容易呢？</p>
<p>可惜啊可惜啊，国家设立了保护制度，不让新手们投资这些品种</p>
<p>现在市场对投资者分级也是越来越严格了，比如个人投资者，之前是有门槛可以做债券；现在很多债券也不对个人投资者开放了，这些其实都是很好的投资品种，但是，很遗憾，门关上了</p>
<p>这就是为什么长投的课程，你会发现经常在更新，以前训练营还会讲分级基金，但是自从有了30万门槛后，也就没意义去讲了</p>
<p>因为时代总是在变的，机会错过去了就错过去了，投资的学习是有时效性的，很多机会，过去了就真的完全过去了</p>
<p>所以我们投资小白们的逆袭之路在哪里呢?</p>
<p>小白的逆袭之道在于，把握住为数不多的机会</p>
<p>还有什么没关闭的？股票、基金，都是没有关闭的门，特别是A股的打新股，对小白来讲是不错的入门机会，打新股就是申购新上市公司的股票，只要你有一万的股票市值，就有参与申购打新的资格，只要你申购新股中了签，就可以坐等股价上涨就可以了，通常，A股新股上市股价可以上涨到初始价格的3-10倍，这在我们大陆投资市场才有，因为证监会对每一个新上市的公司，都会强行压低其股票价格，目的是为了吸引更多人来打新股，这样交易市场才有活力。</p>
<p>还有一个就是港股打新，和A股打新不同，港股打新不需要你手头有股票市值，也就是说，不需要你买港股市场上的股票也可以申购新股，只需要有2万港币，就可以参与，和A股打新中签率极低不同，港股打新中签率较高，有些股票能够做到百分之百中签，港股没有涨跌停限制，有些新上市的股票开盘当天涨幅就能超过100%</p>
<p>但是，这些地方，现在其实比起以前来说，你需要学更多的东西，为什么呢？</p>
<p>因为A股打新知道的人越来越多，中签率越来越低，个人打新可能很久都不中，集体打新的年化收益也从16年的20%+降到了17年的15%+；而港股市场的打新和A股新股上市一定涨的情况不同，港股市场发行的股票是有可能破发的，也就是一旦上市进行交易，股价就有可能跌破发行价，所以也需要我们去分析公司判断要不要申购。</p>
<p>不知道大家知不知道之前发生的一件事情：MSCI纳入我国指数</p>
<p>这个简单来说就是，以前股市的高手都是中华鳖精，现在，洋人们也开始加入中国市场投资啦</p>
<p>随着洋人进入中国投资市场，我们更加需要学习系统的理财投资知识，从而避免被洋人收割，同时收割一下洋韭菜</p>
<p>还有一个就是2017年7月1日新政</p>
<p>其实这个从表面上来说没什么影响，就是你做个试卷，如果你是谨慎型的，那么不好意思，你不能投资股票</p>
<p>但是比较好笑的是，题目是公开的，答案你只要随便搜就搜得到，所以就有点形式主义啦</p>
<p>但是！！！！！不要小看这个形式主义！！！</p>
<p>万一过几年真的谁抽风了一下，说资产多少以下不能够投资股票呢？</p>
<p>跟刚刚讲的分级基金一样，想想毕竟那时候分级基金和债券，大家一开始也以为是说说而已</p>
<p>好好学习，把握机会</p>
<p>我们的逆袭之道只有一个：在那些SB事情来临之前，赶紧武装自己，让自己能够通过那道门</p>
<p>有的小伙伴可能觉得，投资股票规定门槛这件事情可能发生的概率很小</p>
<p>这种天怒人怨的事情，发生的概率有没有，我只能说，有的！</p>
<p>谁知道当哪一次股灾来临的时候，韭菜们又抽风了,又手拉手跑去证监会，说股市杀人了</p>
<p>万一他哪天规定硕士才能投资了，我估计除了考研也没别的方法，毕竟班班我的投资收益还不错，还想投资一辈子呢。</p>
<p>这些投资机会大家可能都没有听过，那之前，王者荣耀被批的事件大家知道吧</p>
<p>我们班有人玩王者荣耀的吗，在人民日报批王者荣耀害人的时候，腾讯的股价一天蒸发了300亿</p>
<p>然后胭脂王干啥了呢，他去买涡轮了</p>
<p>这个又是大家没有听过的投资品种吧</p>
<p>这个是菠萝大大徒弟的在农药事件中的收益</p>
<p>所以，当天农药在风口浪尖的时候，更多的人在干嘛呢</p>
<p>我想大多数人在看戏，去微博上，朋友圈里参与评论，要不就骂一句sb，埋头继续玩游戏</p>
<p>但是作为嗅觉敏锐的大神，已经在这个事件中，获得不菲的收益了</p>
<p>当然，发现投资机会这个事情，需要我们在具备一个系统的体系架构之上的</p>
<p>不然机会来了，我们还是看不到</p>
<p>所以，如果有可能，我们最好多学习几个投资品种，这样子，也不至于未来出什么幺蛾子</p>
<p>总结一下：</p>
<p>1.投资机会不是一直都有的！</p>
<p>2.不要等到错过了才哇哇叫；</p>
<p>3.多学习不同的投资品种</p>
<p>投机机会不等人哦</p>
<p>很多小伙伴可能总喜欢说，再等等吧，事实上，“等”字一出，基本就等于再也不会去做了！</p>
<p>这是世界上最容易欺骗人的一个字</p>
<p>改变思维，马上行动，改变现状,抓住机会，这是我们的出路！</p>
<p>宝贝们，加油！</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享14</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB14/</url>
    <content><![CDATA[<p>职业理财规划应该怎么做<br>爬楼密码：20200123晚</p>
<p>今晚和大家聊一下职业理财规划应该怎么做，首先要合理规划：先了解需求再寻找合适的产品。<br>我先问个问题：你是否有一系列的生活目标？<br>我先说说我的，我最早是想摆脱糟糕的财务状态，然后有只下金蛋的鹅；发展到现在我想经常旅游，我想看更大的世界，有更多的时间陪伴家人；<br>我希望能给我未来的孩子(如果有的话)比较好的教育环境，让他有很多的选择，可以选择做自己喜欢的事情，而不用操心钱的问题……等等<br>所以大家可以先问问自己是否有这些生活目标，如果没有，那也没必要了解理财，有的吃有的喝就行了。<br>但是我想咱班的同学应该都是和我一样是普通人，是吃五谷杂粮长大，有七情六欲的，对于更好的生活都是非常向往的对吧？<br>那么OK，我们接下来量化一下这些理财目标。<br>从大家来到小白营的第一课我就在给大家讲量化，平时的分享答疑中也有讲到，现在我带大家来操作一下，人生量化。</p>
<p>一辈子要赚多少才够用呢？<br>先来看张图：</p>
<p>这些都是刚需吧？没有同学说上面6项我都不要的吧？<br>OK，那么接着来看一看一生中我们都需要什么呢？</p>
<p>房子车子说完了，我问问大家，生孩子吗？<br>假如生一个：</p>
<p>大家看，这个预计花费70万还得是个女孩，不能是儿子。<br>有个段子啊说：<br>1个女儿：招商银行<br>1个儿子：建设银行<br>2个女儿：浦发（普发）银行<br>2个儿子：汇丰（会疯）银行<br>所以，孩子都能生，但是要养得起对吧。然后关于孩子这里，反正都扎心了，我就再扎两下，为什么要给孩子做教育金做理财规划？<br>因为孩子的教育费用是没有弹性的，打个比方，孩子18岁就要上大学，我们班没同学说我家孩子不用上大学，等他18岁一成年就去打工赚钱的吧？没有咱们就再接着聊啊，有的话可以出门左转了。<br>那么这就是一笔可知的具体的未来的支出，如果现在开始给孩子每月定投500元，我们按照系统学习后可能达到的收益率15%来算，如果孩子一出生就开始给他定投这笔钱，那么到了他18岁那会儿，就会拥有52万。</p>
<p>应该国内任何好大学都够用了吧？还能给孩子攒下第一桶金。<br>这样操作和18年后突然要你拿出52万来，哪个来的轻松？大家自己衡量，这就是我们为什么需要理财规划的意义。</p>
<p>好，说完孩子说父母，老一辈的家里有理财观念的应该不多，我父母就是苦哈哈的存钱攒钱，自己舍不得吃舍不得用，有好的全给我，那我工作了赚钱了，我还不给我爸妈买点啥？衣服、手机、红包不可少。父母以后年纪大了，没有赚钱能力了，哪怕他们有退休金，但是我不得表示一下心意，给生活费么？那自己父母要给，老公/老婆的父母是不是也要给？我们按最低的每个月给每个老人300元，这个钱不多吧？甚至说很少了。那来吧，看看孝顺父母要多少钱：</p>
<p>好的，接下来，甭管养孩子还是孝顺父母，小两口自己日常还要开支的吧？逢年过节、亲戚朋友、请客吃饭、买点吃的穿的等等等等，咱们算6000一月，应该不算过分，算多一点。班班觉得过年随礼都不少</p>
<p>老年人的话能用的少一些，大家做个参考就行。<br>接下来，休闲生活，前面都那么大压力了，那这个我们就适当缩减吧，一年一万，不过分吧？比如我在河南，大概1万块也就够我附近省外转转，还不能出远门，不能待很久，那这又是多少？</p>
<p>OK，除此之外，没人能保证自己一辈子不生病吧？也没人说自己保证不会发生任何意外，那如果有个万一：</p>
<p>这个咱们就不算啦，买了保险的话这部分是可以杠杆平衡掉的。没有保险的就自己算咯。</p>
<p>最后，我们统计一下：</p>
<p>嗯，基本生活，那有人说这样生活我就满足了，不理财行不行啊？OK啊，不理财的话我们算算咯：</p>
<p>每个月20616.66元，我现在兼职、副业被动收入一起，拿过最高的也就比这高一万，不知道你们如何？</p>
<p>这是现实一点的我国的现况，这是按月薪5000，拿到手4000多来算的，不少人都没达到这个水平吧？这么算的合情合理。</p>
<p>那还差442万元，咋办呢？<br>这里有3个给不理财的人的“狠”招，是真的狠：<br>第一招：不生孩子，省70万元<br>第二招：不管父母，省43.2万元<br>第三招：取消休闲，省30万元<br>还差299万，算一下。</p>
<p>呐，所以你们看看，不理财能行吗？如果死活不理财，要去啃老啃来这299万的，我也无话可说，下面我们说一般我们愿意理财的同学，怎么办呢？</p>
<p>这张图什么意思？就是我们之前讲的资产配置，给你们拆解一下，这4个就是4个账户，不清楚的自己去复习之前晚上分享的课程，这里就不展开了。这里强调说一个最右边的“以护钱为保障”，说个数据：中国大陆地区，人均保单数量只有1张多保单，也别说咱们保险意识不强，有道是没摊上事谁愿意想这个问题呢。<br>与此同时：<br>美国：人均保单数量6张；<br>日本：人均保单数量6.5张；<br>香港：平均每个家庭，每年会拿出一个半月的收入去交保费。<br>为什么别的这些地方保险意识那么强？说句最俗的话：见过鬼了他就怕黑了。<br>美国29年到39年房价暴跌，日本90年以后房价暴跌，香港97年的时候炒楼的那些人，很多都跳了楼了。为啥说房价，因为房价一旦下跌以后，就会造成一系列的经济衰退，很多人就失业，银行的人可不管这些，有房贷的该还钱还钱，欠债还钱天经地义对吧？<br>但是失业了没钱啊，那就收走房子，但是收走了房子银行还是要讨债，为啥？因为房价下跌房子抵了都不够，不够的部分还是接着还，欠的钱是按钱算，不是按房子算的。<br>这样的话就会逼着很多人，打两份工，打三份工，而且心情还郁闷，经济衰退赚钱不易！<br>人有个特点，如果一个人常年的郁闷压抑长期都是负面情绪的，那就很容易落下病的，万一要是得了品山病（癌）呢？辛辛苦苦赚的钱就全部交给这个病了，这个时候就是没有起到护钱的保障。没有第二个账户，也不打算构建第二个账户的同学，自己好好思考了。<br>下一个我们说说什么是理财规划：<br>理财：是解决人生的财务问题<br>理财规划：是根据客户财务和非财务状况，运用规范的方法并遵循一定程序为客户制定切合实际、可操作的某一方面或一系列互相协调的规划方案。<br>后面这个概念大家先理解理解，具体我们分8个方面。分别的目标又是什么呢？</p>
<p>现金规划：必要的资产流动性，我们说的第一个账户<br>消费支出规划：我们讲过的分清必要需要想要，目标就是要有【合理】的消费支出<br>教育规划：实现教育愿望<br>退休养老规划：安享晚年<br>风险管理与保险规划：完备的风险保障，第二个账户<br>投资规划：积累财富，第三个账户<br>税收筹划：合理的纳税安排<br>财产分配与传承规划：有效的财产分配与传承<br>最后大家再来看看我们的两个总体目标：</p>
<p>大家自己详细看看，这里就不展开了，都很好理解的。<br>最后我们说一说生命周期理论，大家先看图：</p>
<p>这里我详细解释一下：一个人从出生会经历婴儿、童年、少年、青年、中年、老年，这六个阶段是循序往后走的，每个人都会经历的，应该没有人能跳过某个阶段说，我没有婴儿期，我生下来就是个能跑能跳的小孩了，那是神话剧，咱们讲现实的，不说玄幻。<br>那么在这六个阶段中，我们能做理财规划的，只有最后3个阶段：青年、中年、老年，因为一个刚出生2个月的宝宝你不可能去给他讲你去理财。<br>也就是说成年以后的这3个阶段，我们进一步的细致划分成4个时期，分别拆解一下：<br>单身期<br>理财需求有哪些呢？我说5个：租房；满足日常开支需要；如有教育贷款，要偿还教育贷款；每月保持部分结余；最后一个很重要的【进行小额投资积累经验】，这个是很多人会忽略的事情。<br>很多人是说我攒够了钱我再去投资，攒个十年八年的钱去投股票，你问他：你以前买过股票吗？他说没有。你们觉得会有好收获么？为什么我们说理财投资越早越好，因为你试错的成本低，比如我刚开始有1000块，哪怕我全部亏完了，那也就是1000元；但是对于那些攒着钱啥都不懂就冲进股市的人来说呢，三万六万的亏，甚至更多。<br>相反，我哪怕就是100块开始，如果成功了呢？我100能变成200，以后我本金多了，1万就能变成2万，这就是花小钱买大经验。值不值得，还是你们自己来衡量咯。</p>
<p>接着我们再看这张图，以35岁和55岁为界，我再次强调啊，不要生搬硬套，不要生搬硬套，你要按照34岁和60岁分也是没问题的！只是一个我们说普遍规律，按照35岁和55岁来划分。<br>家庭事业形成期：35岁以前<br>这是属于进攻性的特点，可以适当的冒点风险去获取高收益，对于这个时期的家庭来说，是有风险承受能力的。<br>家庭与事业成长期：35岁——55岁<br>到这时候就属于攻守兼备了，不能再像以前那样不管不顾的往前冲了，该为以后的生活考虑了，但是这个时候一般夫妻两人事业都是属于顶峰，有些孩子大一点的可能都成年了，也有赚钱的能力了，可以说是蓬勃发展的时期，不能过于保守，也不能过于冒险，所以说需要攻守兼备。<br>退休前期和退休期：55岁以后<br>最后这个时期我们说就该求稳了，进入了防守型。不能再冒风险了，但是依然需要理财，如果以前不懂，现在也一定要学，为什么？你们没看到现在市面上很多产品就是专门瞄准老年人的吗？被骗退休金养老钱连棺材本都赔进去的案例也不少见吧？不认真学习知识，那就等着市场收割。</p>
<p>好啦，今天的分享就到这里，因为很多小伙伴对自己的理财规划很迷茫，所以灵伶特意给大家安排了这一课。大家能坚持学习到现在的，会让你们越来越清晰自己所处的位置，以及未来到底怎么走，希望大家的人生路都能走的容易些。</p>
<p>碎碎念：<br>选择大于努力这句话，虽然烂大街了，但是我越来越认可，很多人觉得女孩子就轻松稳定就好，但是分析看看，是真的没有发展前景，还买断了未来几十年的发展(比如之前的我)。</p>
<p>所以很感激长投，让我的生活没有越来越窄，就像微光老师说的，年轻人要尽可能“啃老”（这里也有玩笑的成分哈）</p>
<p>主旨还是咱们年轻的时候不要拒绝每一次成长的机会，多进入优秀的圈子，结交优秀的朋友，在成长的过程中，也是自我价值的高度体现</p>
<p>就像我老家有个大学生回到村儿里，就拿着2000多的工资觉得岁月静好，不是说我们一定要追求多物质的生活，只是生活美好又残酷，温暖又无情，我们可以不去买名牌包住五星酒店，不去环游世界，但是却不得不为保护家人而努力</p>
<p>我因为比较忙，连花钱都顾不上，如果只生活费的话可能2000就够了，但是当我月入过万的时候，很有成就感，还有信心，未来有更多的20000,30000,50000，我们不能徒手摘星，不能海底捞月，但我们能做的事真的没我们想的那么少</p>
<p>现在看来，当初那笔一千多的实操课真是性价比最高了</p>
<p>人可以走弯路，但一直在弯路打转就很傻了</p>
<p>多去优秀的圈子学习，多做有价值的事，把自己当成一个容器去打磨，学一些未来3-5年都能用上的技能，人间会很值得</p>
<p>如果说改变命运的机会有三次，读书、工作、婚姻，灵伶认为第四个就是投资，不仅仅是投资赚钱，还有用投资的眼光和思维去工作、创业、提升</p>
<p>理财投资不是有钱人的专利，是我们每个人普通人都可以开始的，投资理财不会让我们一夜暴富，但会越来越富~</p>
<p>还有班上的很多学生宝宝，还有刚工作没多久的宝宝，班班真的很羡慕你们这么年轻的时候就接触理财，到我这个年龄估计都能相对财务自由了，参考死胖子。</p>
<p>人生需要机会，是浪费机会还是把握机会，决定都在我们手上。</p>
<p>所以不要觉得灵伶唠叨，可能灵伶就是这股唠叨的老妈子心态，把每个学员都当宝宝，才最快的成为了金牌班班</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享15</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB15/</url>
    <content><![CDATA[<p>场内场外基金&amp;开户避坑指南<br>爬楼密码：20200126晚</p>
<p>通过之前的学习，大家都了解了基金和定投，很多同学都对定投基金感兴趣，进而想用这种方式来养鹅、下金蛋，对吧？<br>磨刀不误砍柴工，我们先来了解一下，我们定投基金的渠道有哪些。<br>一、什么是场内和场外<br>嗯，在讲具体渠道之前，班班给大家普及一下，场内，场外的概念。<br>什么是场，所谓的场，就是证券交易市场，也是我们平时所说的股票交易市场。<br>股市不仅可以交易股票，还可以交易债券，基金，期权等其他有价证券。<br>明白了什么是场，就可以很轻松地理解什么是场内和场外了。<br>我们把通过证券市场（股票市场）进行的交易统称为场内交易。把通过这个渠道之外的进行的交易统称为场外交易。</p>
<p>二、基金投资的具体渠道<br>接下来再说说基金投资的具体渠道。<br>我们买基金一共有4种渠道<br>1、证券公司，这就是场内渠道<br>2、银行<br>3、基金公司<br>4、第三方代销平台，如天天基金，蚂蚁聚宝，京东金融等<br>请问大家，这里4种渠道，哪个市场内，哪个是场外呢？<br>2、3、4都是场外渠道。</p>
<p>那场内场外的渠道有什么区别呢？<br>先来看银行 ​</p>
<p>这是中国银行的费率，这个是有折扣的，1.2%的基础上打6折。就是0.72%，万分之72。</p>
<p>这是建设银行的费率，这个是没有折扣的，1.2%，万分之120。</p>
<p>再来看基金公司<br>基金公司官网通常也会打折，不过只有他自己家的基金。可选择的基金范围少，给大家截两张基金公司的图。</p>
<p>大家是不是以为在基金公司买基金是最便宜的？<br>现在大家可以看到，即使使用有优惠的银行卡买，费率也最低到4折，用他们的活期通的话，最低1折。<br>我们不对比4折的，选最低的折扣1折，1折后多少？0.15%，万分之15。</p>
<p>再来看第三方代销平台</p>
<p>这是天天基金平台的，费率打一折，万分之12。<br>还有蚂蚁财富平台，费率是打0.5折，万分之6。</p>
<p>那么总结一下场外的费率，只看最低的费率，分别约为<br>银行：万分之72左右<br>基金公司：万分之15左右<br>其他代销机构：万分之6左右<br>班班个人总结了一下，基金公司，第三方平台和银行，他们仨的关系，大概就是专卖店，爱打折的百货商场和加价不加量的国营小卖部的关系</p>
<p>来说说场内基金<br>我们来对比一下，银行申购费万分之72，第三方平台万分之6，场内交易一般万分之3，长投的合作券商购买基金万分之1。<br>现在，大家知道场内基金的最大的好处是什么？场内基金的一大好处就是便宜！<br>【插一句，场内基金的交易叫买卖，对手都是其他交易者。场外基金的交易叫申购赎回，对手就是基金公司。大家理解就好。】<br>我们算一下，假如我们买一万元基金，通过银行申购，手续费72<del>120元，三方平台12元，场内交易1</del>3元，看到这个差距没？<br>如果我们定投，通过银行定投产生的手续费和通过场内定期交易，最多能差100倍！<br>我们在复利一节中讲过，投资的最大成本就是手续费，同样的基金，同样的时间和本金，差距非常大。<br>所以，在投资初期，选择低佣金的券商，是非常必要的。</p>
<p>总结一下<br>场外的优势：方便，不用开股票账户，操作比较简单。<br>场内的优势：佣金手续费低，便宜，便宜，便宜。<br>其实还有一点是，场内中的基金交易是实时的，也就是一天中基金的价格会有波动，你可以买卖在最高点。<br>而场外基金的是以天为单位的。无法实时交易，也就是，你很有可能错过很多时机<br>场内外基金就分享就到这里啦~</p>
<p>三、开户<br>很多小伙伴迫不及待想开户，但是！班班要带大家先了解开户中的坑。<br>有小伙伴说，开户不就是到证券公司开个账户么，有什么坑的？稍安勿躁，慢慢看下去。<br>我们常说的开户，一般指开设证券账户。<br>它相当于我们的证券存折，用于记录我们所持有的证券种类和数量。<br>比如购买股票、场内基金，操作国债逆回购，都需要用的，就像我们的身份证一样~<br>那，为什么要开户呢?<br>开立股票账户是投资者进入股市进行操作的先决条件。<br>还可以买场内基金、国债、企业债、可转债、国债逆回购、银行理财产品、免费 跨行转账、融资融券、参与新三板等，很丰富的。<br>真的是“一户在手，天下我有” 的赶脚<br>2016 年 10月，中国结算已经出台新政，每个投资者证券账户只能有3个。<br>去哪儿可以开户?<br>1就近到证券公司营业厅<br>2网上开户(券商的 PC 网站或手机 APP)</p>
<p>我们来讲最便捷的，就是使用券商手机APP开户。你需要准备:<br>1身份证(证明自己的身份)<br>2一个有摄像头的手机(本人手持身份证录一段视频，以确定本人身份、是本人自愿开户)<br>3银行卡(为了转入资金)<br>4当然要有流量或者wifi<br>开户后，是需要券商审核的，大约 1-3 天就通过了。<br>这个开户啊，就跟注册淘宝账户差不多，淘宝账户大家会注册，那开证券账户也 一定没问题，页面都有提示的，大家按照提示一步一步来就好啦<br>网上开户无需排队，随时都可以办，方便快捷，各大券商不会泄露用户信息，还是比较安全的，也比较受欢迎，未来也会更成熟。<br>过去股票开户需要手续费，现在，很多证券公司互相竞争，争取新客户，都已经不收开户手续费了。<br>如果你开户，证券公司要收你几十元钱，你要果断地提出异议或者换一家。<br>如何挑选券商<br>一般来说，挑选券商，主要看 3 方面<br>1、比佣金:同样购买 1 万元的股票，佣金越低，说明你买的股票份额越多，损失越少;<br>2、比品牌/规模/行业水平:一般大牌子的券商，都还可以;<br>3、比服务:客户经理的服务是否到位等。</p>
<p>下面来看开户中的坑<br>第一大坑：高佣金<br>先说说开户的佣金，佣金就是手续费的意思，我们在股市上操作，每交易一次都是要给证券公司交手续费的。<br>服务费、佣金、手续费，说法不同，但意思都是一样的。所以开户时候的佣金越便宜，我们的交易成本就越低，越划算~<br>开户主要关系到两方面的佣金：股票和基金。<br>先说股票，证监会规定股票佣金最低门槛5元，每笔交易不足5元按5元交。<br>解释一下股票最低门槛5元什么意思哈，就是不管交易额有多少，都有个最低佣金额，哪怕你买100股呢，只花了两百多块钱，你的手续费最低也要五元。<br>现在由于各券商之间竞争激烈，一般不会高于万三，当然万六万八也有，千三的就是耍流氓了。<br>有的券商会做到万二，这个不多见，比如班班和学姐现在用的万1.8。训练营实操课福利就包括这个低佣金优惠。</p>
<p>说完股票的手续费，再来说基金的手续费。<br>场内基金的佣金跟股票的佣金是相似的，一般是万3起步，最高可以到千分之三，并且跟股票一样，大部分券商有最低5元的限制。但是，重点来了，长投目前和华泰证券合作，通过我们的方式开户，佣金超低<br>华泰证券：股票万1.8，基金万1，基金【基金没有5元最低门槛！！！】<br>大家想一想，没有5元门槛是什么概念。一般的小伙伴，每个月定投500左右，就收取5元的手续费。<br>这相当于1%的费用啊。但是，通过长投的合作券商开户，只收取0.1元，差距50倍，你心不心疼？反正我是心疼的。</p>
<p>第二大坑：杂费<br>在我们的交易中，除了佣金，还有经手费和监管费，这个被称为规费。<br>有的有诚意的券商会把这些费用包含在万3的手续费中，很多则另外收取，并且也不告诉你，默默地扣钱。<br>我们在交易软件中看到的杂费，很多就是指的经手费和监管费。<br>所以在开户的时候，不妨问一下客户经理，佣金是否包含规费。<br>一般情况下，如果你问了，客户经理都会据实回答的，只要你问，客户经理就会觉得你懂。<br>所以我们要选择没有这些杂费的券商~</p>
<p>第三大坑：叠加套餐<br>叠加套餐是比较鸡肋的，这些叠加套餐会赠送一些资讯等等，但是获得这些资讯，往往就意味着你的佣金会贵好多！<br>最好的就是不要这些什么套餐，事实上，如果你想要这些资讯，可以跟你可爱的客户经理商量。<br>一般她都可以在自己的权限范围内赠送你一段时间的资讯服务的。<br>讲完了坑，最后要提醒一下：<br>一个证券公司的客户经理是你在这个证券公司有且仅有的唯一经理！不可更换，即使你销户重新再开通，依然还是以前的客户经理！<br>所以，不要自己去开户，没有佣金优惠，且不可更换客户经理！</p>
<p>再提醒一下：<br>训练营优惠方案中发开户福利是这样的<br>长投从国内服务一流的券商华泰证券那里为大家争取到了福利，从我们指定的二维码新开户，开户享受低佣金，股票万分之1.8，起点5元，基金万分之一，起点0.1元。<br>大家在没有拿到我们的优惠前，千万不要自己去开户，这样是无法享受低佣金福利的！！所以，不要轻举妄动，不要自己去开户。<br>敲重点，只有从指定二维码新开户才可以享受哦，如果以前已经有了华泰账户，只能拿家人的帐号重新开了。<br>哦对了，突然有个小问题要问问大家<del>大家知道课堂上有三种人吗？<br>第一种人叫犯人<br>犯人是被抓过来上课的，分分钟想跑。对于他们来说，学习本身是没有意义的，因为他们是被逼着过来学习的<br>每次上课，犯人都会觉得怎么还不下课啊，时间怎么过得这么慢呢？<br>第二种人叫过客<br>什么是过客？他们纯粹是过来打酱油的，只是过来看看，不会参与其中，也不会有很多收获<br>第三种人叫发现者<br>就是我今天看到的各位<br>什么是发现者呢？发现者时刻期待着下一刻有不同的东西出现，他们出于自身的意愿，能从学习中获得乐趣，永远充满了求知欲<br>咱们是三种人中的哪一种呢？小伙伴你又准备做哪种人呢？<br>有人说，你要是讲得好呢，我就是发现者，你要是讲得不好呢，我就是犯人</del><br>当一个把自己的状态交给别人来决定的时候，他就已经是犯人了<br>发现者则是不管老师讲的好不好，我都认真听，我做自己认为应该做的事(再说灵伶讲的也不赖鸭)<br>那在工作中有没有这三种人呢？有的人说，当老板对我好呢，我就好好干，当老板对我不好呢，哼，老娘不伺候！<br>这是什么？这就是犯人，正确的态度应该是，行所当行，无论老板对我好不好，我都要把这份工作做好，因为工作本身是有意义，不是为别人工作的<br>学习也是一样，学习本身是有意义的。<br>好啦，课堂中的三种人都讲完了，希望大家都做发现者，能学有所得</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享16</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB16/</url>
    <content><![CDATA[<p>量化思维与碎片化学习的弊端</p>
<p>爬楼密码：20200127晚</p>
<p>我们之前讲过投资自己，有的人投资自己投资的是脸蛋，有的人投资是投资的脑袋。其实都可以，要看这一切给你带来多大的满足感，还有这种满足感持续的时间</p>
<p>之前小熊老师说过，账户上的数字对他来说不是钱，是自己对自己的肯定，是成就感</p>
<p>想知道小熊老师的收益率有多少吗？</p>
<p>第一张0.1016买入，卖出的价格2.17，多少倍？</p>
<p>收益日入55200，总收入248200元</p>
<p>第二张一个星期赚了6万多</p>
<p>看到这些图我们圈子里的人炸了，深深被扎心</p>
<p>所以你说学习不重要么，当然重要啦，我要的就是这么牛逼哄哄的收益率啊。</p>
<p>虽然我们可能还没有达到这种程度，但是金钱确确实实能给我们带来勇气和底气，能够实实在在的改善我们的生活</p>
<p>有了金钱，我们才有更多机会去做自己想要的事情</p>
<p>很多人经常抱怨工作累，工资低，老板总是压榨自己的时间。作为打工者往往都是这样的。</p>
<p>但是当我们切换个思维，你会发现老板和你的思维是不一样的，老板当然希望能用请一个人的钱干三个人的活。</p>
<p>因为如果我们去投资股票，也会喜欢讲究成本控制的公司。一家不注重成本控制的公司，我会在心里默默认为这是一家差公司。</p>
<p>老板的心里其实给每个员工都估了一个价，大家算过自己在职场上的价格吗？</p>
<p>时间其实就是我们的成本，我们来量化计算一下。</p>
<p>假如，我们月收入是4000，公司给你缴纳的五险一金大概就是1500，公司为你这个人支出的成本就是5500。那么你每小时的收入是多少呢？</p>
<p>一个月大概23天，每天8小时，5500/23/8=29.89，四舍五入算作30吧。</p>
<p>大家也可以算下自己的时薪哦，这个就是我们在职场上的价格。</p>
<p>我们提高自己的收入，一个是提高单位时间的收入，另一个就是让劳动持续为自己赚钱。</p>
<p>比如你写一本书用了1000个小时，版权卖了100万，那么你的单位时间就价值1000元。</p>
<p>比如长投的课程每门课只要几百块，但是只要老师把自己的经验总结出来，制作成课程，就会成为一份被动收入，把自己的知识转化成金钱。</p>
<p>就像大家关注的一些公众号也有付费课程，其实都是一样的。</p>
<p>现在知识付费已经是互联网获取知识的常态，大牛们都在追求知识变现，而知识确实也像劳动一样可以卖出，毕竟传播知识和经验的人也付出了巨大的努力。</p>
<p>长投的一个前辈在总结出自己的投资方法时，光笔记都写了30多本，书不知道看了多少本。</p>
<p>小熊老师在总结出自己的投资方法前，也不知道在股市栽了多少跟头，花了多少时间。</p>
<p>而现在我们其实是通过几门初级课就省掉了这些时间，并且避免了一些弯路，直接学到了实战的方法和经验。</p>
<p>最近有碰到好几个同学跟我说觉得实操课挺贵的。我们也来量化的算一算。</p>
<p>我们再来算一笔账啊</p>
<p>以股票初级课为例，股票初级训练营780元，除以30等于26，（这个30是之前我们假设的时薪）</p>
<p>这还是股票训练营的原价，没有算优惠哦</p>
<p>按原价算，也就是说，一门课不过是我们26个小时的薪水</p>
<p>一门课就是不到30个小时的薪水，如果你自学，你确定你能一开始就找到正确的资料吗？找到了又能真的消化吗？</p>
<p>初级课分14天讲完。假如以最长的时间算，一天听课花2h，那么总共2h*14=28h。（h是小时）</p>
<p>最终的成本就是26h（购买的价钱）+28h=54h</p>
<p>如果换成自学呢？可能找资料就要花26h，加上找错，找得不对路，可能还要再花10h甚至20h。</p>
<p>找到了一本不错的书，你先要阅读，还要总结，提炼，应用，试错，本来能28小时搞定的事情，你可能花了3倍的时间或4倍的时间</p>
<p>遇到疑惑的知识点，完了，又要去到处找，又要重复甄别知识的过程</p>
<p>这样算下来本来54h的事情，变成了36h+75h=111h，甚至更高</p>
<p>如果再以30元/h来算，你的成本就变成30*111=3330</p>
<p>而原来你的成本是780+30*28=1620</p>
<p>更何况，对大多数人来说，并没有毅力自己去找书，啃书，时间往往浪费在淘宝和追剧上，不能创造任何价值</p>
<p>也有人会说，我的时间没那么值钱，我就喜欢免费的东西</p>
<p>不知道大家想过没有，在付费的大背景下，免费的东西质量只会越来越差。</p>
<p>小熊老师也跟院生们分析过其中的道理，很简单。</p>
<p>在信息大爆炸的时代，信息已经让整个世界扁平化了，信息已经成为信息掌握者的生产工具。</p>
<p>所谓“共享经济时代”，为什么现在公众号这么流行，比较好的公号主人大多全职，甚至能够支撑起一个团队的生存。</p>
<p>其实就是大家在共享和出租自己的知识和能力，换取粉丝和经济回报，知识付费将会越来越普及。</p>
<p>而我们要做的，就是思考怎么利用好信息生产者提供的便利，进而武装自己。</p>
<p>当然我们在学习的同时，也要尝试去转换思维，等到有一天，可能你自己也会成为信息的制造者和分享者。</p>
<p>就像我们训练营的班班和和助教一样，在分享和输出的过程中，自己也会不断成长。</p>
<p>我们还年轻，我们甚至很贫穷，但是我们拥有大量的时间，怎么把握眼下的十年，让这十年的时间为自己的未来创造更多的财富，是我们现在的重要课题。</p>
<p>十年后，宝贝们，如果我们还能在一起相聚，那个时候的你会不会感谢现在努力付出的自己呢？</p>
<p>说到打开眼界，很多小伙伴也确实做到了，每天疯狂的看各种信息，就是时下最流行的一种学习方式叫“碎片化学习”。</p>
<p>那么这样的碎片化学习到底对我们个人有多大帮助？</p>
<p>在正式回答题目所提出的问题之前，我们先来看一个故事。</p>
<p>故事的主人公就是“薛神医”，可能很多人对这个人物有没有印象，但是一提这本小说的名字估计都看过，这本小说叫《天龙八部》。想必没人不知道吧？</p>
<p>《天龙八部》小说中有一段聚贤庄英雄大会，乔峰带阿朱前往治伤，求的就是这位薛神医。</p>
<p>薛神医是当世医中第一圣手，只因「神医」两字太出名，连他本来名字大家也都不知道了……这薛神医不但医道如神，武功也颇了得。</p>
<p>他爱和江湖上的朋友结交，给人治了病，往往向对方请教一两招武功。对方感念他活命之恩，传授时自然决不藏私，教他的都是自己最得意的功夫。</p>
<p>他不肯另投明师，便别出心裁，以治病与人交换武功，东学一招，西学一式，武学之博，可说江湖上极为罕有。</p>
<p>但坏也就坏在这个「博」字上，这一博，贪多嚼不烂，就没一门功夫是真正练到了家的。</p>
<p>他医术如神之名既彰，所到之处，人人都敬他三分。他向人请教武功，旁人多半随口恭维，讨好于他，往往言过其实，谁也不跟他当真。</p>
<p>他自不免沾沾自喜，总觉得天下武功，十之八九在我胸中矣。</p>
<p>直到有一天，遇见乔峰和群雄搏斗，出手之快，落手之重，实是生平做梦也意想不到，不由得脸如死灰，一颗心怦怦乱跳，一句话也说不出来，更不用说上前动手了。</p>
<p>看了这样的描述，可能你觉得薛神医是个很可笑的人，但是转眼一想你会发现，在当下这个互联网时代，许多人不都是薛神医吗？</p>
<p>薛神医在江湖漂泊，四处学到各种武功，而且是「传授时自然决不私藏，教他的都是自己最得意的功夫」。</p>
<p>大家有没有觉得，这跟我们去知名的公众号、刷豆瓣、微博、朋友圈的时候四处学「干货」的场景很像？</p>
<p>今天从哪个公众号里看了几篇干货，明天在哪个在线学习平台看了几堂公开课。<br>于是我们感觉到我真爱学习，我真充实，我真是嗷嗷牛逼，然后是不是也像薛神医一样沾沾自喜。</p>
<p>其实自我感觉的“十之八九在我胸中矣”往往是一种自欺欺人的表现。</p>
<p>因为四处得来的碎片化知识，经常带来两个弊端。</p>
<p>第一，丧失深度思考能力。</p>
<p>我们习惯在碎片时间获取一些信息，既然是碎片时间，那么都不会很长，所以能够看的篇幅也不会很长，所以习惯了看一百多字的微博微信，几秒钟就读完了。</p>
<p>而恰恰由于其篇幅有限，所以大多都是阐述一个现成的结论或者逻辑简化后的信息。</p>
<p>时间久了就养成了这样一种思维：「因为A所以B」、「只要C就能D」、「有了E才能F」、「出现G即说明H」……</p>
<p>就这样渐渐变得狭隘独断，没有逻辑，难以深入思考。</p>
<p>第二，知识的使用效率下降。</p>
<p>单独的一个知识点非常容易获取，尤其是现在的互联网时代，获取信息短平快。</p>
<p>但由于碎片化的特点，导致脑海里的知识点经常是孤立的，像一盘散乱的珠子。</p>
<p>你每一次只能拎出「一个」即止，而不是连续的「一串」，于是只能处理浅维度的信息。</p>
<p>所以虽然人们获取信息的渠道多了，但使用信息的效率反而下降了。</p>
<p>以学习投资为例，大家有一个爱好，就是一上来就说，你给我介绍几个人的微博吧，或者几个公众号吧。</p>
<p>不可否认，大家确实能从中学到不少绝对的干货，篇篇经典。不然他们也不可能广为人知，对吧？</p>
<p>但是，不知道你有没有注意到，几乎所有的微信公众号更新的特点就是，很难是一个完整的、循序渐进的知识体系。</p>
<p>为啥呢？因为更新内容是随着原创者的灵感或者突然发现了一个新的功能、神器时得到的选题。</p>
<p>如果大家在学习过程中只是单独学习一个个技巧或操作，纵然学习信息摄入量很大，确实也可以拓展了一部分视野。</p>
<p>但是如果没有条理的消化以及迭代自己的框架，只是一味往你脑子里塞东西，想要应用的时候发现把自己的知识点串不起来，那这知道太多跟知道太少又有什么区别？</p>
<p>不要总盯着套路，套路是学不完的，要研究思路，思路是最精华的。</p>
<p>所以，如果在学习一门知识的初期，能建立一个全面的、体系化的认知是很重要的。</p>
<p>在随后的学习中将新的知识点纳入自己已有的知识体系内，重新消化理解，能将与之矛盾的内容排出体外，才可以进入一个良性循环。</p>
<p>所以真的想跟大家说，如果自己某一领域才刚刚入门，还是不要轻易尝试去自学。</p>
<p>因为没有对错的分辨能力，很容易让你在将来的某个时刻因为从前吸收的错误知识而栽跟头。</p>
<p>就像很多人想学习股票，买回来的书籍绝大部分是看K线追涨杀跌的炒股书籍，这是投机，但不懂的人还以为这就是投资股票的正确方式，从而误导了自己~</p>
<p>由于互联网的普及，目前越来越多的大牛在自己的领域已经有了相当的深度积累和经验总结。他们愿意化知识为财富，出售自己的知识和经验，方便了我们这些入门者可以站在前人的肩膀上前进。现在网上免费信息泛滥且质量参差不齐，同时人们迫切需要【快速获取】对自己有价值或自己感兴趣的信息。知识付费产品将成终身学习渠道，也就是说会有越来越多人选择这种模式。</p>
<p>这也就意味着我们能免费获得的信息质量也会越来越差。我们常说理财不要贪小便宜，投资自己的大脑就更是如此了。</p>
<p>做一个终身学习者，武装自己的大脑，不要把自己的思维被碎片化的信息击碎。<br>这其中很重要的，就是要培养自己的量化思维。</p>
<p>前面我们讲了职场和学习上的量化思维，下面班班想给大家讲一个故事。</p>
<p>小板栗是一个有志青年，看上去他的整体情况还蛮不错，手上拿了一幅不错的牌。</p>
<p>可是，拿了不错的牌不代表会赢牌，接下来我们看看他是怎样出牌，是否能达成他这个时候所许下的创业愿望？</p>
<p>23岁的时候小板栗开始工作了，一开始能拿一万块钱，听起来还不错哦。</p>
<p>初步实现了自己的财务独立，这个时候他就开始了各种手里有钱的年轻人享受的事项啊，做了很多的事情</p>
<p>做了月光群（可能和我们中的很多人一样），24岁呢开始谈恋爱，为了让女朋友开心呢，开始咔咔咔的用信用卡，而且还循环借贷</p>
<p>25岁的时候关系稳定大家说出去玩，但是旅行中发生意外，这个时候他有6个月的时间躺在医院里没有收入，他就要把他投资的钱都要取出来。</p>
<p>可是因为他的投资全部放在股票中，都被套牢了，亏损中，怎么办？没办法也得拿呀，5万块钱买的股票变成4万，也不得不割肉取出来。</p>
<p>用这4万块钱度过了这6个月，付了医疗费等等。身上又一分钱没有了。</p>
<p>度过了这个坎之后呢，小板栗27岁时和女朋友修成正果，他们决定结婚了，办了很不错的婚礼。他收到的礼金和花出去的钱差不多能够持平。</p>
<p>结婚以后觉得自己有家庭了，考虑要不要买辆车扩展一下自己行动的范围？然后看上了一辆奔弛一辆基本款，首付得十几万，月供8000多。</p>
<p>想了想一咬牙就买了，买了之后发现自己存的钱又没剩多少了。</p>
<p>最后29岁的时候宝宝出生了，每年又多出了三万块钱支出。再加上这个时候父母生病，自己身体也不太好，这些支出导致又多出了5万的花费。</p>
<p>到这个阶段小板栗还没有发现有什么不对。</p>
<p>但是等到他30岁生日那天，拿出存折去对比曾经自己许下的那个宏伟的目标和自己的现状，差别真的是很大。</p>
<p>其实这是我朋友真实的故事，对于他本人其实有点懵，恍恍惚惚的，不知不觉就到了三十而立的年纪。</p>
<p>虽然日子还过得去，可是曾经的壮志雄志。梦想转眼间就变得更加遥远了，而且年纪也更大了，很多时候就会让人产生一种无力感</p>
<p>其实我想说的是小板栗不是一个人，在过去的日子里班班接触过很多训练营的小伙伴，像小板栗的情况其实特别多。</p>
<p>因为一开始缺乏对生活和财务的规划，一眨眼的时间就过去了，或者生活中遇到了意外发生的事情，就会让人觉得非常的无力，自己手上的钱跟之前预期的美好愿望差的特别远。</p>
<p>在训练营近一年的时间里我接触了两千多人，但是真的讲到能把握机会，能坚持行动的却很少，可能不到10%</p>
<p>很多人会说，自己每天都好忙、没时间，今天加班、明天聚餐、三个月后考试。</p>
<p>扪心自问，真的那么忙吗？真的没时间吗？</p>
<p>一天24小时，如果工作按12个小时来说，睡觉按8个小时来说，还有4个小时的时间去哪里了</p>
<p>我记得长投有个师兄讲过一句话：你连你自己的时间都控制不了，那你凭什么说你能够掌控你的人生！</p>
<p>哪怕真的有机会摆在面前，很多人也会有各种理由</p>
<p>举一个例子就是欢乐颂里的曲筱绡，在春节全国人民都关门不工作在休息的时候，富二代曲筱绡一个人趁国内不工作就去国外找生意</p>
<p>这是一种什么精神？</p>
<p>这就是传说中的见钱眼开啊！一年365天，哪里有钱，曲筱绡就往哪里钻，不放过任何机会，自问我肯定还做不到这样的程度。</p>
<p>而反观王柏川却对曲筱绡送上门的生意推三阻四</p>
<p>其实王柏川就是一年多以前的我和我们生活中大多数人的写照，表面上想要钱，想赚钱，也肯下功夫，但遇到困难想的不是如何解决，而是能不能躲过去</p>
<p>那些赚钱的人，成功的人比我们更多一点的仅仅是，他们把自己想做的每件事，都用尽全力，只这一点，高下立现</p>
<p>这其中的区别只有一个：你是不是真的想做，还是只想给自己的失败找个好理由</p>
<p>大多数人其实还是走不出自己的舒适区罢了</p>
<p>更有甚者，需要班主任每天跟着后面天天哄着劝着，微信群不上，文档不看，却理直气壮的说自己什么都没学到，你凭什么要求我写作业要求我学习</p>
<p>以前看到一句话，真的特别想跟大家分享，如果连挣钱都要别人开导，都要人盯着，看着，哄着，鼓励着，劝你还是别干了，你就应该穷</p>
<p>很多事情是谁做谁牛逼，而不是谁牛逼谁做</p>
<p>几年后拉开巨大差距的人，不是因为我们比她们优秀多少倍，而是因为我们动了，而她们还停留在自己的舒适区。</p>
<p>所以，不管是已经报名了实操课继续学习的小伙伴，还是暂时分别的小伙伴，我都希望大家能够在理财的道路上，行动起来，坚持下去，时间会帮你干掉其他对手</p>
<p>2020年已经过去近1/12，今年的目标是否达成具体规划了呢？你们走出舒适区，去争取一个你想要的未来了吗？</p>
<p>希望大家一年后都能收获属于你们的精彩！</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享17</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB17/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享18</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB18/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享12</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB12/</url>
    <content><![CDATA[<p>国债逆回购<br>爬楼密码：20200121晚</p>
<p>本来实操逆回购的课程应该是明天才讲，但是为了让大家能赶上1月22号这一波操作一天赚八天，薅羊毛的好机会，提前到今晚带大家进行实操。已经开过户的小朋友听完可以把你们的手机APP打开，对照演练了哦~~咱们明早收益走起<br>不知大家是否看到过理财金字塔？<br>​​</p>
<p>图中可知国债逆回购处于金字塔底端，是一种低风险、高流动性的投资品种<br>国债逆回购的知名度虽然不高，其实它特别适合初学投资理财的童鞋来练手，最适合薅羊毛赚点儿零花钱了。<br>比如，在一年的特殊的时间节点，一般都会达到日均20%-30%的收益率。2016年9月29日，上交所1天期国债逆回购利率盘中突破了45%，有没有很逆天的感觉？<br>既然有这等好事，那我们来看一下逆回购是什么鬼。<br>国债逆回购，其实说白了就是借钱给别人，是一种短期贷款。个人把自己的资金借出去，获得固定的利息收益；借款人（一般都是大企业）用自己的国债（或达到一定评级的债券）作为抵押获得这笔借款，到期后还本付息。</p>
<p>买国债逆回购的都是公司行为，短期过夜拆借，实际借款数额很大。正回购门槛300万起，也就是说向你抵押国债借钱的人，至少都有300万的资产。<br>这里国债其实是个抵押品，大家知道国债的风险是很低的，所以用国债作抵押也是很安全的。<br>那么为什么有企业会花高利息来借钱呢？<br>当市场缺钱（银行系统冲业绩、企业公司短期拆借）的时候，企业就会在各种渠道通过高额利息来借钱，国债逆回购就是其中一个渠道。<br>逆回购的收益率跟市场的资金面有关，资金面越紧张，市场越需要钱，逆回购的收益率越高。<br>以1天期逆回购为例<br>​​<br>这是一张一天期逆回购交易图，2017年9月末最高达到年化收益率20%；2017年12月29日左右最高达到年化收益率18%。2018年3月29号左右最高达到年化收益率12%。其他时间在3%-5%之间。<br>所以，国债逆回购利率高的时候，就是一个市场缺钱的信号，比如年末、季末、月末。</p>
<p>我们来看看它的优点：<br>①安全：在整个交易过程中，证券交易所充当了中介、监督、执行的三重角色，一旦成交，对方的国债就被冻结。时间一到，交易所就自动把本钱利息划到你的账户上。<br>作为资金融出方，散户在交易所进行逆回购的交易对手是结算中心，如果融资方到期不能按时还款，结算公司会先垫付资金。<br>②低风险高收益：逆回购的收益率跟市场的资金面有关，资金面越紧张，市场越需要钱，逆回购的收益率越高；<br>③操作方便：有股票账户就可以直接卖，输入代码即可，操作快捷，到期资金自动到账；<br>④手续费低。等下详细讲解</p>
<p>讲完它的优点，我们再来看看适合哪些人群。<br>大家都可以尝试，尤其是这些人：<br>①只会存银行、余额宝，但又想获得高收益的人（有没感觉这是在说自己啊？）；<br>②股民（我们股市里的钱，白白放着也是没有收益的，但是通过一天逆回购，过夜有收益，第二天钱还能用来买股票）；<br>③刚刚下水十分新鲜，手痒痒的投资新手。基金股票还不会，来点逆回购解解手痒~</p>
<p>国债逆回购的品种一共有18种，沪、深两市各9种，具体品种如下图：</p>
<p>GC代表上海交易所的品种，R代表深圳交易所的品种，后面的数字代表的是借钱的天数，001代表一天，002代表两天…….以此类推。<br>沪市为国债逆回购，深市为企业债逆回购。<br>我们要记住的是，借1天就是一天逆回购，借7天就是七天逆回购，目前市场上成交较活跃的是1天、3天、7天等短期性产品。<br>另外，沪深两市的购买门槛区别很大。<br>沪市比较高：1000元为1手，100手起，也就是说操作一次至少需要10万元。如果想多卖，要按照10万的整数倍来加数额，20万、30万…最高不超过1000万。<br>深市亲民很多：100元为1手，10手起。如果想多卖，要按照1000的整数倍来累加，2000、3000…上不封顶。<br>国债逆回购的交易时间和股票一样，只能开市时间进行，即在每周一到周五上午时段9:30-11:30，下午时段13:00-15:00，国家法定节假日不可以操作。<br>借出去的钱什么时候回来呢？逆回购资金的到账日是T+1，提现日是T+2。以逆回购1天为例，当天买入，下一个交易日开盘前到账，也就是说不会影响股民第二天的股票交易，再下一个交易日可以提现转出到自己银行卡上。<br>注意：一般周末及节假日不开市，到账的日期就要顺延！比如你要是周五买1天的逆回购，那就要到下周一钱才会回到你的账户<del>如果要取现则是要等到下周二。<br>接下来介绍一下交易的费用，逆回购也是有手续费的，不过非常低，每10万元收费1-30元，一千块钱，只需要0.01-0.3元手续费，具体收费标准如下表<br>国债逆回购收益计算公式：利息收入=交易金额<em>利率/365</em>实际占款天数<br>实得收益=利息收入-本金*手续费率<br>对于实际占款天数这里要解释一下，计息天数为资金实际占用天数<br>那有的小伙伴要问了，我要是周四做了逆回购呢？周四买入一天期逆回购，周五资金到账，到了周一这笔钱才能取出，实际占用天数是3天，则按3天来计算利息<br>就好比说这次，咱们24号就是除夕夜啦</del>那么22号做了逆回购一天期，23号(年二十九)资金到账，但是后面股市休息了，咱们开年才能把钱取出来，实际占用天数是8天，就按照8天来计算利息，是不是美滋滋的呢~<br>注意：不要把所有的钱都去操作国债逆回购蛤，过年需要用到的钱一定要留出来，资金初七一早才能提取。<br>所以周四或者年/节的前两天操作逆回购还是比较划算的<br>如果自己算有点懵，教大家一个偷懒的方法，一般的证券账户软件上都会直接显示计息天数<br>我们可以以华泰证券为例，如下图，每次交易时看软件表示息天数就可以啦！收益能有多少也不需要大家计算，买的时候直接会显示</p>
<p>是不是感觉收益不算太高呢？这是由短期内的资金需求决定的，平日收益并不会太出彩，但在一些特殊的时间，比如市场很缺钱的时候，能够达到年化30%的收益。一般月末、季末、年中、年终钱荒的时候，利率会飙升。<br>虽然每天开市期间都可以交易逆回购，但是上午一般高一些，因为很多人还观望着想买股票，愿意借钱出去的人相对较少，国债逆回购利率就高；<br>而越是到收盘的时候，当天没买股票，还有闲置资金的股民越是想去操作逆回购，供大于求，所以尾盘的收益是一天中最低的。<br>大家注意看下面这个分时图~在一天的末尾，收益率急速下降</p>
<p>​​<br>另外，时间长的逆回购利率也相对低些，一般一天逆回购交易量最大，所以也就能获得一个更高的利率。<br>这里有一点要注意，不建议交易长时间的逆回购，因为一旦成交，不到期钱是拿不出来的。这点不同于银行的定期存款哈，定期存款如果你确实急需，又肯承担定期利息的损失，还是可以提前取出来的。<br>虽然只能短短的赚一两天的钱，但是也是一种很好的现金管理工具。</p>
<p>接下来介绍具体的操作步骤：<br>操作逆回购，首先要具备两个条件：①在券商开户，②最少有1000.10元在账户（0.10元是交易手续费）。<br>还是以华泰证券的APP为例，我们把钱转到证券账户以后，打开券商的APP，点击“交易”。然后出现这样的界面，选择国债理财</p>
<p>进入了以后，我们可以直接点击选择一天期的，也可以选择查看所有国债理财产品<br>​​</p>
<p>这里要说一下，逆回购的操作方向不是“买入”而是“卖出”，这是交易所规定的，也可以简单理解成你的钱是借出去给别人的，所以我们是卖方<br>如果我们做1000元的国债逆回购，就在参与金额中填1000，如果想立刻成交，就以“卖一”3.501%的利率卖出<br>​​</p>
<p>那如果想利率高一点，可以把价格挂高一点，但是有成交不了的风险，点击“下单”后界面会弹出你的委托资料，在检查输入无误后按“确定”。<br>这时系统会显示委托提交成功，这样就算下单成功了，至于能否成交则要看成交汇报了。<br>下单后在“查询委托”里面就可以查看委托交易，成功后可在“查询成交”中查询<br>​​</p>
<p>以上就是国债逆回购操作的全过程。<br>国债逆回购以成交利率为准，成交以后的逆回购的利率变动不影响你已有的收益哦<br>一天期的国债逆回购，会在第二个交易日的早上回款。回款是全自动的，不需要我们进行任何操作。也就是今天做了一天期逆回购，即使你是3点前“卖出”的，明天早上9点前资金就重新在证券账户上了，可以拿来买卖股票或继续做逆回购，但到了第三个交易日，这个钱才可以取出来。</p>
<p>操作国债逆回购需要注意几点：<br>1.长期的国债逆回购性价比不高<br>一般情况下，14天、28天、91天、182天这样长周期的国债逆回购收益率不太高，大多低于同期的银行理财，性价比不高。<br>所以不太建议大家投资长期的逆回购<br>2.什么时候做国债逆回购比较合适：月末、季末、年末，钱荒高峰期<br>而平时的时候，没有意外情况下主要是在3%徘徊，性价比不高~<br>所以这个品种是等到有机会的时候再参与</p>
<p>好了，国债逆回购就介绍到这里，大家有没有更清楚了一点呢？<br>今天的分享就到这里啦<del>接下来班班给大家讲个故事</del></p>
<p>搭乘时光机，回到十年前<br>很多人对投资有一种很“敬畏”的心理，觉得投资门槛很高，是富人的游戏，要有很多闲散的资金才可以~<br>其实，今天班班要告诉大家的是，只要你活在时间的河流里，你一定会和理财投资发生关系~<br>现在咱们做一个假设，假设你能够坐上时光机器，让时间倒回到2007年<br>你22岁毕业，家里这时候给了你10万元<br>你面临着一个关于这个钱的财务安排<br>你可以吃光用光身体健康，但是你也可以做下面这些安排：<br>你可以存在银行里，按照这种长期的、定存的利率来算的话（5年期存款平均定存利率5.85%）<br>十年前你存的10万块钱，现在你可以拿到多少呢？<br>大家猜猜<br>现在能拿到多少？<br>存银行，存10年，到现在拿到的大概是18万元，其他的呢，被通胀吃掉了呀！<br>你也可以把这这笔钱买股票<br>假设你买的是中石油，10万块钱剩下多少呢？<br>再猜猜<br>哎呀，我用错了词。我用了剩下，你们就知道没多少了<br>还是直接说吧，还剩4万块。<br>如果你当时很有眼光，买的是腾讯的股票，10万块钱变成了多少钱呢？<br>现在是360万块钱<br>大家看到了吗？在十年之前和十年之后，因为你做出了不同的选择，一笔数额不大的金钱，十万块钱产生了完完全全不一样的时间价值。<br>我还没说完<br>时间的价值还不仅仅体现在这样的数字上，它对你的人生会产生更大的影响。<br>现在我们还是把时光退回到2007年<br>这一年你大学毕业，还面临着其他的人生决策<br>在找工作的时候，你是使尽浑身解数挤进了一家像诺基亚这样的500强公司，还是一家被成立不久，求贤若渴的创业公司？<br>比如说58同城用薪水加股票期权的方法招到了麾下？<br>不到十年的功夫里，你很努力，你在诺基亚已经干到了中层<br>可是诺基亚已经大势已去，你开始在人才市场上寻觅下家。<br>而如果你选择了58同城的话，应该已经是业务骨干了，“一个亿”的小目标也已经实现了，为什么呢？因为58同城已经在美国上市成功了。<br>所以你看，十年前的决策，在十年之后，都深刻地改变了你的处境，你的生活，甚至改变了你的未来。<br>有人可能说，哎呦，这是中国吧？可能放在外国就不太一样了<br>我要告诉你的是，不同选择所带来的时间价值差异，全球都是一样的<br>再举个小例子：<br>1986年的时候有一个人在美国，假设他买了１万美金的政府债券<br>另一个人买了１万美金的微软的股票<br>你猜猜看，2017年的时候，这两个人的生活发生怎样的差异？<br>买债券的这个人的1万美金变成了8万美金<br>而买微软股票的这个人的１万美金已经变成了1086万美金。<br>所以你看，同样的故事它会发生在不同的国家，不同的地区<br>十年前我们回不去了，除非哆啦A梦出现在你的生活里<br>可是十年后的生活我们可以把握<br>我们不但能够把握自己十年后的生活<br>而且能够教会孩子把握十年前，十年后，几十年的生活<br>十年后，你是否能上九天揽月，下五洋捉鳖，就看你今天的选择了~<br>【答疑】<br>问：蓝筹股一般人都能买到吗</p>
<p>答：蓝筹股只是市场上对一些发展前景很好的公司的统称，只要是流通在股市里面的，我们就能买到，关键是要学习，值不值得买</p>
<p>问：现在还可以往华泰转账吗？需要把卡里的钱转到证券账户么？</p>
<p>答：无论在券商账户中操作基金还是股票，或是国债逆回购，都需要把钱转到股市账户里。转账也有时间限制，一般是早上8点半以后，下午4点以前</p>
<p>问：怎么看明天是国债逆回购的好日子？这个逆回购是不是经常有，但要把握好时候？<br>答：国逆每天都可以操作，基本不存在亏本的风险，99.99999999%不会亏本，但是，收益并不是每天都高，一般是在节假日的前两天操作最划算</p>
<p>问：明天逆回购的意思，是资金后天还能用，利息算8天的意思吗？这8天的利息全部是我们购买时的利息，还是其中7天时银行利息<br>答：明天逆回购，资金到账户但不能提取，一定要记得，到账日期T+1，提取日期T+2，全部按你成交的利率来付利息</p>
<p>问：同一天买利率不同？</p>
<p>答：利率每时每刻都在变动，爬上去复习一下，每天早上最高，下午快休市的时候最低</p>
<p>问：佣金和手续费是一回事么</p>
<p>答：国债逆回购的手续费是标准的，无关乎账户佣金的高低，但是我们投资基金、股票的时候就不一样了，找一个低佣金的账户非常重要</p>
<p>问：存银行利息：10万×5.85%×10年＝58500？<br>答：十年定存为什么利息和你算得不一样？因为利息是五年定存的利息，你<br>第一个五年取出来的时候，利息就变成了第二个五年的本金</p>
<p>问：班班，你前面说“那如果想利率高一点，可以把价格挂高一点，但是有成交不了的风险”这个是什么意思，利率不是它已经标在上面了么，怎么把价格挂高？<br>答：比方说他利率是3.51，你可以手动改成3.55甚至更高。但是如果没有人出这个利率借这笔钱，就没有办法成交。</p>
<p>问：学完实操课到底能达到什么样的水平？</p>
<p>我把投资能力分为5个level<br>level1 只会存银行，放余额宝，收益率3%左右<br>level2 具备一些耐心，理解息差，会投资固定收益产品，比如债券基金，收益率6%左右<br>level3 系统学习过投资，懂得权益类资产的投资方法，比如股票，可转债，指数基金，收益率10%左右<br>level 4 有更宏观的视角，开始实施整体的资产配置，收益率 15%左右<br>level 5 掌握了更高层次的投资技巧，收益率20%+，这就是顶尖投资者的收益了<br>基本上，学完初级课，你已经掌握了，公司分析的方法，估值的方法，指数基金定投的方法，也就差不多能达到level 3了<br>（很多人问初级课之后的课程，明确的告诉你，班班还没学完。因为我还没有做好更深耕的准备，更高级的课程，推荐给想要做分析师，或者考取基金从业证的同学）<br>所以，其实大家不要纠结于能达到什么程度，而是要先问问自己有没有付出努力去学习<br>学习与不学习的人，在每天看来是没有任何区别的<br>在每年看来，差距虽然明显，但好像也没什么了不起的<br>但在每5年来看的时候，可能已经是财富的巨大分水岭<br>等到了10年再看的时候，也许就是一种人生对另一种人生不可企及的鸿沟</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享02</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB02/</url>
    <content><![CDATA[<p>教你认清资产和负债<br>爬楼密码：20200111晚</p>
<p>正式分享前，我想问一下大家，大家觉得理财和投资是同一件事吗？觉得是的打1，不是的打2。</p>
<p>很多人把投资和理财误以为是一件事，其实不是，投资只是理财的一部分，理财是一个很广泛的概念，选1的童鞋请来找班班领板子。</p>
<p>比如制定家庭日常消费计划、配置保险、制定教育金计划、养老金计划等等都是理财中的一部分，凡是涉及到跟钱有关的安排，都是理财。</p>
<p>我们每个人或每个家庭都会在十几年的时间里过手几十上百万，怎么去处理这些钱，怎么让有限的资源带来最大的效用，不同的处置方式，在时间的积累下本来相似的人会拉开巨大的差距。</p>
<p>有个问题，世界上那些彩票中巨奖的人最后都怎样了？答案是95%中了彩票的人，最后的生活都变得穷困潦倒，甚至不如从前。</p>
<p>大家知道为什么会是这样的结果吗？</p>
<p>有句话叫做，财不配位！</p>
<p>对于飞来横财，没有足够的能力妥善处置，巨额财富就如过眼云烟一般，到头来还是一场空。</p>
<p>资产与负债，是投资知识里最基本的概念之一，理财能力最终体现在对资产与负债的辨别能力上，相当多的人其实无法正确区分资产与负债的差别，收入与支出之间的差别。这种认识上，观念上的改变，可能需要一些时间来锻炼。多数时候我会翻开自己的日常收支明细，来找一些分辨资产负债的灵感，细细思索每笔收支变化所对应的资产/负债主体。</p>
<p>比较常见的资产有：有工资收入的工作、能够带来房租净收入的房产/商铺、有利润的企业和这些企业的股权/股票、有利息收入的投资（比如债券、存款等）。</p>
<p>常见负债有：欠亲友的钱、欠银行的房贷车贷、信用卡逾期欠款等。</p>
<p>但是生活中还有一些不那么容易辨别的。汽车和房产是大家观念里普遍所认为的”资产”，但用”增加收入减少支出”的标准衡量，车和房并不必然是资产。</p>
<p>再来明确一下资产和负债的概念：</p>
<p>灵伶之前看过的《穷爸爸，富爸爸》一书中，富爸爸有一个观点：资产就是能把钱放进你口袋里的东西，它能给你不断带来收入，就像金鹅下蛋一样，只要金鹅在，就会不停下蛋，下的蛋换成饲料给金鹅，那么金鹅就会越来越肥，下更多的蛋。</p>
<p>而负债则是把钱从你口袋里取走的东西。</p>
<p>我们用图来标示一下资产和负债的现金流状态。</p>
<p>现在大家明白资产和负债的概念了吗？</p>
<p>没明白也没关系，我们来一起分析一下，提问：车子和房子到底是资产还是负债？</p>
<p>车子每年要花保险，还要油钱，还有停车费，保养费，等等。这些都要钱，所以它对我们来说实际上天天在消耗我们的现金流，所以这种情况下车子就是负债啦!</p>
<p>但这个的负债也不是绝对的，为什么呢？</p>
<p>比如网约车，如果你用汽车去跑滴滴，又或者你是一名业务员，汽车提高了你的工作半径，提升了你的工作效率，拜访了更多的客户，赚了更多的钱。当这些赚到的钱可以覆盖上面所说的所有费用，还能有结余，那么此时，这辆车对你来说就是资产啦。</p>
<p>这里的重点是【赚到的钱可以覆盖所有的费用】，如果覆盖不了，那也是负债哦~</p>
<p>说说房子，你有一套房子，租出去以后获得了租金，而且租金覆盖了房贷和物业管理费之后，还有结余，那么这个房子给你带来了现金流入，它就是资产。</p>
<p>反之，如果没有租金或者租金无法覆盖房贷和物业管理费，自己每月都要贴钱进去，那在这个状态下就是负债。</p>
<p>有的人觉得买很多套房子空在那里就是拥有了很多资产，其实不然，在没卖出之前，房子一直都要往外掏钱。即使房子升值了但没有变现，也还是负债，只有卖出变现，获得了现金流之后才算是资产。</p>
<p>自住房，就是市价再高，也不太可能卖出，毕竟中国人归属感比较强，咱们不能去睡桥洞。但你每个月还要为自己的自住房掏出一定的费用，也算是负债。</p>
<p>有宝贝说可以一辈子租房住，班班说几句，表面上看起来是省钱了，但其实也存在风险。比如房子快到期了房东不让住了，需要花费时间成本找新的房子；要叫搬家公司过来帮忙搬家，即便是朋友来搬家，欠了人情，还要请吃饭，有物品磕坏碰坏了还不能生气；另外计算的时候也没有考虑到通货膨胀房租上涨~还有一个就是，咱们班有一些同学是已经结婚的宝爸宝妈，你们愿意将来把女儿嫁给没房的男生吗？所以这并不是一件简单的事情。</p>
<p>所以，自住房还是要跟投资区分开，如果房子是刚需，那是必须要承担的负债，这是没办法避免的情况啦。</p>
<p>水湄姐和她老公小熊老师两人创业8年倒是没买自住房，他们自己租房住，不是买不起，而是前两年开始在日本买了投资房。宝贝们也想学习这种方法的话，就要有犀利的眼光和扎实的理论知识了。</p>
<p>所以，成为富人的第一个秘密是，在一生中不断地买入资产。</p>
<p>这是富人的现金流量表，富人的第二个秘密：资产品种丰富，给自己带来更多收入，不用单一依靠工资！</p>
<p>相对应的穷人的第一个死穴：毫无任何资产可言！生活唯一的经济支柱就是工资！很多童鞋是不是躺着中枪了？</p>
<p>这是穷人的现金流量表。</p>
<p>在这里灵伶啰嗦一句，单一的死工资真的靠不住，原因有三：</p>
<p>一，行业更新迭代很快，可能某个行业就消失了；<br>二，任何行业都有天花板；<br>三，你不能一辈子赚钱，但是你要一辈子花钱。</p>
<p>我们常常说的工资，是我们的主动收入。而富人的股息收入，债券利息，房地产租金等带来的现金流就是被动收入</p>
<p>当我们的被动收入能够覆盖掉支出的时候，我们就实现了“财务自由”。</p>
<p>所以，大家看，财务自由并不是遥不可及的~关键是提高被动收入啦</p>
<p>小白训练营班主任里面有位元老，也是长投学堂的分析师大神之一，之前一年的投资收益率达到64%，曾经创造了1天赚10万的记录</p>
<p>天啦撸，听到这个事迹，我当时的反应和你们一样一样的</p>
<p>他说他自己的【工资】是不够花的，但是他也说现在自己的支出只占【收入】的18%</p>
<p>是不是觉得不可思议？明白他这句话的意思吗？</p>
<p>因为他已经几乎不依赖工作收入了。</p>
<p>为什么继续工作? 他的原话是，天天在家睡觉其实挺无聊的</p>
<p>我们财务自由了，就可以做自己喜欢的工作。去创业啊，去流浪啊，去支援非洲啊，去尽情做梦。这个时候，金钱就是我们的底气！</p>
<p>回到正题，大家学习理财投资以后，要不时的分析一下，自己的花费，哪些是资产，哪些是负债，争取以后多买入资产哦！</p>
<p>那么富人的第三个秘密是什么呢？就是对待新鲜事物的态度。</p>
<p>一般而言，低收入群体的工作收入是偏低的，对于低收入群体来讲，它的工资应付完各种支出，也没有什么结余去买资产或者负债。</p>
<p>富人乐于接受新鲜的事物，并在不断增长见识的过程中，提升自己辨别事物的能力，同时结交更多的朋友，拓展自己的圈子，遇到更多的贵人，进而良性循环。</p>
<p>而穷人对于任何新鲜的事物，第一反应就是屏蔽，或者说是封闭自我。</p>
<p>因此穷人的眼界会越来越窄，见识越来越短，赚钱的道路也会越来越单一，最终悲悲戚戚的过一生。</p>
<p>这也是穷人的第二个死穴：穷人思维。</p>
<p>很多时候，观念的转变，比收入的转变，要难很多，而你的思维，决定了你在什么阶级。</p>
<p>中彩票的人大多会破产，就是因为观念未转变，思维还停留在穷人的思维阶段。</p>
<p>人的穷富，其实首先取决于你的观念，而不是你的财产本身！</p>
<p>有了正确的观念，其实技巧都不难学会；但是观念错误，即便你有钢铁侠的装备，也不过是在错误的道路上飞奔而已。</p>
<p>《富爸爸，穷爸爸》中，富爸爸常常这样说：“富人不会这样做”。因此，在思想上“脱贫”是走向财富自由的第一步。</p>
<p>我要强调一个观念：财富是理出来的，没钱更需要理财！</p>
<p>大家可能会觉得思维的改变是个长期的过程，那么对于富人所拥有的“资产，股票、债券、能带来租金收入的房地产”这些可不是普通人能涉足的，那么穷人要怎么办？</p>
<p>这里牵涉两个问题，我们一个个来说。</p>
<p>第一个问题：收入偏低。如果你的收入偏低，没有结余，月月光，那么两个办法：</p>
<p>1、 学会省钱。<br>就是我们常说的要学会记账：分清必要、需要和想要。合理分配欲望，控制在“必要”和“需要”之间，从而更好的分配好自己的资金，并且要坚持理财投资！</p>
<p>举个栗子，有的同学喜欢没事买个冰淇淋、买杯奶茶，来改善一下生活。但其实，冰淇淋、奶茶、零食这些东西，有一个专业名词叫“拿铁因子”。这些消费，会悄咪咪地拿走你的钱。</p>
<p>什么是拿铁因子呢？这个词是由一位叫大卫·巴赫的金融顾问提出的，源于一个故事：一对夫妻，每天早上必定要喝一杯拿铁咖啡，看似很小的花费，30年累积算下来花钱竟达到了70万元。</p>
<p>你可以计算一下，如果你喜欢吃零食，每个星期吃几顿？花多少钱？一年要多少钱？连续几年下来，就是一笔不小的费用。</p>
<p>那有的同学可能会问了：难道我就要苦哈哈地委屈自己，就不能改善一下伙食吗？</p>
<p>当然可以，要有一个经济学支撑的方法，就是你要懂得区分：“必要”、“需要”和“想要”。</p>
<p>什么意思呢？这么说吧！</p>
<p>必要：是没有这件东西你的生活会受到重大影响，你不花会死的。比如：你不喝水会死，不付房租也算是会死，你总不能睡大街吧？<br>需要：就是可以在必要之上，稍微改善生活质量的。比如：喝牛奶，补充一些营养呀！或者每天吃个水果，补充一下维生素，美容养颜之类的。<br>想要：更多是欲望的写照。比如，我买的名牌包包，除了满足虚荣心之外，对我的工作没有任何帮助，我又不跑外勤，不用见客户，就算上班背个麻布袋子，都没有人管我。</p>
<p>如果你实在搞不清你的需求和欲望。这里有个简单粗暴的口诀，买东西之前扪心自问：<br>1：这个不买会死吗?<br>2：以后买会死吗？<br>3：买个便宜的会死吗?</p>
<p>如果答案都是“否”，那么这个就是属于欲望消费。开始可能会觉得困难，不过一旦你开始控制，你会形成习惯，渐渐地你会发现，赚钱可比花钱有意思得多！</p>
<p>节省下来的钱，就可以用来“养鹅”了。不论你的工资是多少，你想要存钱，总是能存下来的。</p>
<p>曾经有一个储蓄的方法：你工资的10%，是你能不能实现财富自由的关键。意思就是，如果你能坚持每月至少存10%的工资用来理财，那么长此以往，你就能积累一笔不小的财富。你可以在有被动收入的基础上，去改善生活，同时不影响你财富的增值。</p>
<p>2、 学会花钱<br>赚钱很难，花钱谁都会？其实，你不一定真的会花钱，因为花钱也是需要技术的。</p>
<p>穷人和富人的差别就是，穷人只在看得见的地方花钱。</p>
<p>比如买个漂亮衣服，买个漂亮包包，这也没错，因为如果你预算不足，那你只能就把钱花在明面上，向别人证明你过的很好；买了大衣，包包，朋友们会说：哇！你这衣服很贵吧？然后个人的虚荣心得到了空前的满足！然后今天就很开心，这一天走路都是飘着的。</p>
<p>而富人更多的会在别人看不见的地方去投资自己。比如，会去学一个提升沟通技能课程，去参加学术会等，但是这些是不能够让别人知道你花了很多钱的，而且这种内存的投资给你带来的收益不是立即显现的，但是可以创造的未来收益却是无限的。所以，记住，投资自己的大脑，是永远不会亏损的。</p>
<p>上面那种就是穷人经常干的事情。穷人总是盯着眼前的一点小利益，做决策的时候永远希望立马获得回报。</p>
<p>回过头去想一想，我们过去买了那么多漂亮衣服、包包，也被人称赞过很多次。但是最后呢，与我们生活的改善有什么帮助呢？这样真的有助于个人成长吗？</p>
<p>事实的真相是：正是因为这样的行为导致我们自己堵死了自己的赚钱途径！<br>我们把钱花在不能持续产生价值的事情上，我们不投资自己，自己的赚钱能力就很难得到提升，收入的增加也就变得很困难！</p>
<p>《欢乐颂》大家都看过，樊大姐，她年过30，虚荣心超级强，只拥有一堆看似光鲜亮丽的衣服！关键时刻，顶啥用？！</p>
<p>自我增值才是最大的投资，因为你的价值会越来越大，也只有先让自己优秀了才能遇到更优秀的男人/女人！</p>
<p>其实有钱人都特别舍得为自己的未来花钱，我们虽然现在不一定有钱，但可以学习这种思维！</p>
<p>下一个问题，穷人能不能拥有资产？</p>
<p>答案是：当然能！太能了！</p>
<p>100元也可以理财！也可以拥有资产！理财投资不是有钱人才能做得事情！</p>
<p>100元能买基金，能买股票。记住，是理财才会有钱，不是有钱才能理财。</p>
<p>100块在10%的复利作用下，20年后也有7万多</p>
<p>如果每月能存500，在10%的复利作用下，20年会有38万多</p>
<p>股票和基金不是有钱人才能做的事情！</p>
<p>我们需要做的事情是：</p>
<p>1、学会理财技能，为自己不断积累资产！</p>
<p>2、 趁年轻有精力多学习理财知识，并尝试各种理财产品，找到适合自己的理财品种，多学习多实践，用较低的试错成本换回正确的投资技能和过硬的投资心态。</p>
<p>最后：思考与总结</p>
<p>努力去思考一下你可以买什么样的资产，可以去如何提升自己？</p>
<p>关于如何提高自己的收入，我觉得个人差异性比较大哈，如果你感到迷茫，那就多去学习，组装自己的大脑，给自己投资本领是最值得的买卖。</p>
<p>还有就是，未来是个多元化的社会。你说不定会被谁淘汰。</p>
<p>所以，多一份技能，就多一个可能性。比如学习投资理财，班班觉得很重要，它不仅仅让你改善财务状况，还能让你的生活变得有条理，甚至很多思维用在工作上，那不也是升职加薪的一个渠道咩。</p>
<p>总结来说，<br>1.增加工作收入，升职加薪，培养工作技能。<br>2.发展副业，爱好也可以为你带来收入的<br>3.增加被动收入，缓解生活压力。<br>4.现在就开始培养与锻炼自己的赚钱能力。</p>
<p>投资理财是必不可少的灵丹妙药啊。</p>
<p>有本书叫《邻家的百万富翁》，作者经过调查，发现美国的百万富翁往往都是那些看上去并不起眼的人。他们开中等档次的车，住中等大小的房子，对自己消费非常克制。他们的钱都花在了投资上，很少花在不必要的消费上。</p>
<p>因此，班班最后给大家一点诚恳的建议：</p>
<p>1.建议月供不要超过月收入的1/3。</p>
<p>2.先储蓄，再消费，先从储蓄10%的月收入开始，生活质量不会下降很明显，同时比较容易坚持。</p>
<p>3.开源，提升个人技能，摆脱穷人思维，投资自己的大脑。</p>
<p>4.对于零基础同学来说，可以先培养投资和理财的理念，再了解各种投资品，然后再进一步学习，之后再去完善好家庭的资产配置。</p>
<p>5、在后面的课程中，有一课专门讲基金，买基金，首先得挑个好的，再配合一点小策略，就可以达到理想的收益。</p>
<p>6、还有一课专门讲股票，股票没有大家想的那么可怕，在你的认知不足之前，你所有的判断可能都只是凭感觉，世间万事皆有可循之处，了解过后，你会明白投资也是一种技能，都是可以学会的</p>
<p>大家能来学习，都是明智之人，人生这场长跑，谁笑到最后或许你还不清楚。人生的财富终值取决于你是否有投资的理念，和你的收入等有一点关系，但关系不大。</p>
<p>只要别走上歪路，不要想着一步登天地超越你的同学，不出5年10年必将超越同龄人。</p>
<p>以上，就是今天分享的全部内容了。</p>
<p>答疑：<br>1.问：保险算不算资产？<br>答：保险属于资产。风险是让你的钱减少，所以风险是种负债。而保险则是降低你的风险，减少你的损失，相当于变相增加你的收入，也就是带来了隐形的现金流增加，所以保险属于资产。</p>
<p>2.问：以后班班会给股票小白们推荐好的股票不？<br>答：授人与鱼不如授人与渔，咱们只教大家知识，不会推荐具体标的，市场上很多荐股的，基本都是坑，不要轻易相信</p>
<p>3.问：班班，我想问一下，买银行理财产品有风险吗？白天想问的，没好意思<br>答：当然有风险，任何投资都是有风险的。<br>很多人对于风险或投资有一种天生的误解，有一种人，极度厌恶风险，什么都不碰，只相信银行，他们就默默地承受着通胀的侵蚀；还有一种人，眼中只有收益，完全看不到风险，而他们则很容易遭遇投资骗局，这就是两个极端。<br>但我们稍微思考一下就知道，这两种对待财富的态度都是错误的。作为一个现代人，一个有责任担当的人，就应该对自己辛辛苦苦赚到的钱负责，努力使它们增值，才能对得起自己的辛勤付出。<br>反过来说，也不能全部责怪他们，因为没有人从小就会教我们，中国的财商教育普遍缺失，如果没有学习过，没有经过训练，对于风险的理解都是从本能出发的，保守的就极度厌恶风险，激进的就是完全忽视风险。<br>这就是人性，而投资其实是反人性的。而学习投资，很大程度上就是学习如何估值，估值就是一种帮助你做出正确抉择，对抗人性的工具和手段。</p>
<p>4.问：班班，最近股市跌到2800了，现在是入市的好时机吗？<br>答：先纠正一下，现在上证指数已经3000点了。其实真正决定股市是否具有投资价值的，还是市场的价值，也就是估值。当估值低的时候，就是买入的时机，不管未来怎么样，至少我拿到的都是低成本的资产，就处于不败之地。<br>所以，什么时候适合入场呢，答案是跟经济情况关系不大，而是跟市场估值关系重大，顺便说一下，现在A股的估值已经处于黄金坑的边缘了。</p>
<p>5.问：100元钱存在那里20年会变成7万呢？<br>答：100元可不是放在那里原封不动存20年哦，那样只能被通货膨胀吃掉，是要用这100元去赚钱，每年10%的收益率，复利经过20年，才能达到7W元的~咱们讲复利的时候有讲过复利的公式，想不起来啦可以去资料汇总里面复习一下哦并且达到10%的年化收益率，并不是一件很难的事情，甚至可以说是轻松又愉快</p>
<p>6.问：那应该如何估值呢？<br>答：所谓估值，就是衡量一个公司或投资品到底值多少钱，大体上可以从盈利能力和资产质量这两个角度进行分析，可以通过估值来判断该资产是否有投资价值，如果价格低于估值，则具有投资价值，反之则没有。</p>
<p>7.问：后面还会讲估值吗？<br>答：估值其实是一个系统课程，小白营不会讲太多，也讲不完，小白训练营还是以概念和思维的学习为主，俗称扫盲，如何估值，如何投资，咱们后面有实操课，这个部分是放在实操课中讲解的。<br>在股票实操课中，重点会讲股票投资的天时地利人和，也就是怎么判断入场时机，如何合理布局资金、分散风险，如何锻炼过硬的心理素质。</p>
<p>8.问：好的资产有哪些？<br>答：能给你带来现金流的都是优质资产，而且资产和负债不是绝对的，如果你处置不当,资产可以变成负债,但是你方法合适，负债也可以变为资产。比较适合普通人投资的资产有保险，基金，股票。</p>
<p>9.问：这个厉害了，我也能学会吗？<br>答：通过这几天的学习，我们应该能看出来，分享会把枯燥的专业的名词说的通俗易懂，实操课是实践性内容，依然会讲得很有趣</p>
<p>10.问：黄金坑边缘什么意思？<br>答：黄金坑是啥呢？我们都知道，股市有涨有跌，巴菲特老爷子说过一句话，就是别人贪婪的时候我恐惧，别人恐惧的时候我贪婪，当股市处于低估状态，就像是一个大坑一样，这个坑对于我们来讲，就叫做黄金坑。选对了低估值的股票，冲进去捡黄金的意思</p>
<p>11.问：实操课是要继续报名学习吗？怎么报名？<br>答：是的，实操课需要报名下一个阶段的学习，班班申请到几个团购优惠名额，对实操课感兴趣的同学可以私聊我或者学姐。</p>
<p>12.问：那么现在入市好时机吗？<br>答：市场已经处于低估值区域很久了，现在可以说是比较不错的入场时机。但是一定要学习了之后才能冲进去蛤，A股3000多家公司，优质的股票占比并不高</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晚分享/晚分享01</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%9A%E5%88%86%E4%BA%AB/%E6%99%9A%E5%88%86%E4%BA%AB01/</url>
    <content><![CDATA[<p>班会：训练营通关秘籍<br>爬楼密码：20200110晚</p>
<p>一个人一生能积累多少钱，不是取决于他能够赚多少钱，而是取决于他如何投资理财，人找钱不如钱找钱，要知道让钱为你工作，而不是你为钱工作。——来自沃伦·巴菲特</p>
<p>理财就是理生活，欢迎同学们的到来，请大家思考下你来训练营学习的目的是什么呢？</p>
<p>一、分享前的注意事项：<br>1.没填入营链接的小伙伴，抓紧时间去填表哦<br><a href="https://short.ichangtou.com/c860c422" target="_blank" rel="noopener">https://short.ichangtou.com/c860c422</a><br>（说明一下，入营问卷的作用是注册学籍，另外我会根据大家的情况调整课程安排，比如月光负债的同学比较多，那就讲一些如何治剁手、如何处理负债，如果大家都不月光不负债，那我们就多讲些财富增值的方法等等，根据大家的一些情况调整我们群内分享内容）</p>
<p>2、还未下载学习工具【长投学堂】APP的小伙伴赶紧用小手扫码：</p>
<p>3.班班提个小要求，本次分享过程中希望大家保持安静，有疑问的分享结束后统一提问，方便没时间参加直播的小伙伴爬楼。</p>
<p>解释一下爬楼：就是没有赶上直播的小伙伴参与学习的一种方式，可以查看历史聊天记录，获得每天的新知识。首先，每天的分享前我们都会设置一个爬楼密码，比如：202001XX<br>一、电脑爬楼方法</p>
<p>二、手机爬楼方法</p>
<p>好啦，我们正式开始今晚的班会，大约40分钟的时间，请大家集中精力认真听,这样方便你们做好准备，更好的参与后续的课程学习</p>
<p>训练营禁止三件事：<br>1、推荐具体的投资标的<br>2、禁止发任何外部链接<br>3、禁止私加好友，发现直接送出群（请大家设置禁止通过群聊及微信号添加好友，保护好自己的信息和财产安全）</p>
<p>请大家在我–设置–隐私–添加我的方式中，将群聊及微信号添加好友暂时关闭，等毕业后可以再打开~</p>
<p>可能有的宝贝觉得这样很麻烦，也不太理解为什么不让我们相互加好友？那是因为长投2018年会融资了一个亿后，名气大了，偶尔也会有居心不良的人报名小白营混进来，加了好友，以分享学习资料为名把我的小宝贝们拉进荐股群，甚至是渠道不明的理财群，让一些警惕性不强的宝贝受到了严重的财物损失，所以班班一定要保护大家鸭~在大家的分辨能力还不那么强大之前，希望大家一定要保持自己的警惕性，不要加好友，发现有私聊加好友的可以跟班班或者学姐举报，举报后一经核实即刻有奖</p>
<p>二、训练营介绍<br>介绍训练营之前，我先强调两点：</p>
<p>1、小白营的课程虽然只有9元，但是这里涉及到生活方方面面的基础理财知识，实用性很高，认真学习可以给大家建立好理财框架。并且小白营只能报名一次，大家一定要珍惜这次学习机会，要不是有网络这么方便，听班班讲课9块钱怎么可能够，9块就是微信端9次大课，听我讲课至少要花多两个0，在训练营里学习到的东西，将会给你带来百倍，千倍，甚至无法估量的收益。</p>
<p>那小白营只需要9块，有没有什么不可告人的秘密呢？完全没有哦，班班可以直接了当的和大家说，之所以定价为9块钱，是因为这是对外推广的课程，既然是推广，所以门槛就会低一点，小白营一直以来的目的就是为了让更多的人，了解自己财务不佳的根源，从生活习惯上去改变。</p>
<p>梳理自己的财务状况，这样才能真正意义的开源节流。才能从小钱开始慢慢积累成大钱<del>这些思维改变，对贫穷的我们，生活的影响才是最大的。思维影响行为，行为导致结果</del>在认知自己的财务问题后才能从根本上去改善。</p>
<p>长投学堂是专门做理财教育的，除了小白营课程我们还有别的课程，比如衔接小白营的股票、基金、保险、开源四门实操，我就不多说啦，大家自己去发现吧(APP里面有的）</p>
<p>2、 认真听课，紧跟训练营的学习节奏，训练营结束的时候，你将会有的改变是：</p>
<p>①合理消费，摆脱月光；<br>②懂得合理配置自己的资产；<br>③为家庭做好坚固的保障；<br>④开始投资，赚取被动收益；<br>⑤改变思维，改变行为，改变人生；<br>⑥其他各种意想不到的收获。</p>
<p>总之，我的使命就是帮你堵住能漏钱的窟窿，然后带你走上一条靠谱的财富增值之路，并且让你从心底明白为啥这个方向是靠谱的，能赚钱的。</p>
<p>在这里班班带着大家树立正确的理财观念<br>学习【保险】、【基金】、【股票】、【开源】理论基础<br>了解常见的银行理财、P2P<br>识别一些理财骗局例如：MMM、善心汇等</p>
<p>我相信来参加理财学习的小伙伴都对财富有向往，如果中途小伙伴没跟上、或者连续三次作业不提交会被请出群，但其实你损失的不是这9块钱报名费，因为你有一颗爱钱的心，却没有耐心学习如何走正确的路，等到有个伪装的机会出现时，第一个冲进去的就是你！被坑的也是你<br>三、训练营的学习方式：<br>九次最重要的网络音频大课，APP会在开课之后的工作日（1月13日，周一0点）解锁课程。</p>
<p>为了大家能更好地对理财投资学习打好基础，尽快适应学习生活，班班和学姐们会牺牲自己的休息时间，从明天早上开始，额外给大家加餐晨读及晚分享的学习。</p>
<p>从明天开始，早上7点晨读，拓展思维，这是咱们班的资料汇总链接，建议收藏哈（每日更新）<a href="https://docs.qq.com/doc/DRkNiVUVtSFNPYlZL" target="_blank" rel="noopener">https://docs.qq.com/doc/DRkNiVUVtSFNPYlZL</a></p>
<p>每晚8点班级分享答疑<br>分享是班班的加餐哦，所以没填课程定制链接的小伙伴，一定要花两分钟填一下，并且班班和学姐也会在班级群发布公告+@全体，360度无死角的通知你们。请你保持好心情。</p>
<p>班级群及交流群作用<br>【班级群】主要供我们大家上课及答疑，工作日禁言，【交流群】就像我们的宿舍，大家交作业打卡，还阔以聊聊天，交流一下学习、生活，共同成长共同进步，班班学姐也会时不时地给大家加鸡腿讲知识，24小时不禁言。</p>
<p>奖励制度：<br> ① 发学姐《小狗钱钱》读书笔记解锁新书，微信端课程每完成一次，课后会有成就卡，可以将成就卡截屏私聊发给学姐领取《五险一金手册》一章，发在交流群也阔以，大家相互督促学习，一起进步；</p>
<p> ② 每日晨读感悟选出5名晨读之星，累计5次获得晨读之星的小阔爱，毕业的时候班班建群给大家发红包玩儿，奖励爱学习的小朋友(大红包哦)；</p>
<p> ③ 全部听完音频课并做完作业的小宝贝，班班给大家抽奖，实物、现金、学习资料满天飞</p>
<p>累计每天学习时间不超过1小时，请大家不要掉队</p>
<p>好啦~这就是关于训练营的简单介绍，接下来班班准备加餐第一个知识点。</p>
<p>财富的载体——时间</p>
<p>我们来说说我们每天都接触并使用的东西——时间。<br>1、时间的金钱价值<br>时间可能是上天赐予世人最公平的东西。<br>富豪的财产可以高出普通人数千万倍，但其拥有的时间（寿命）却无法高出平均寿命一倍以上。<br>班班先说一个小故事：有一次小明去游乐场，最热门的云霄飞车已经挂上了“此处排队约需一小时”的牌子。小明想了想，1个小时有点久，但自己尚能忍受，于是加入了队伍。<br>一小时后，当小明排到队伍的最前方时，一位风一样的男子愿意出200元购买他的位置。<br>那么问题来啦<del>如果你是小明，你会不会让出这个位置？<br>假设小明的月薪约5000元，扣税再除掉休息日等，日薪大约是200元。排一个小时队，已经相当于工作了八小时，这个条件很诱人，理智的选择应该是接受这笔交易。因为，8小时肯定是大于1小时的。<br>那， 大家觉得出价200元的男子是不是冤大头？<br>这个问题的关键就是——我们要思考这个风一样的男子的时薪是多少。如果高于200就不是冤大头，如果低于200就是冤大头。<br>这就是量化思维。凡事不依靠感觉，而是先算一算。<br>但是相信我，如果带着女朋友出去，不想被打成骨折，千万不要让出位置。<br>有数据支撑的逻辑比拍脑门的决策靠谱，这是我们以后学习中的一个重点，大家要拿小本本记下来哦。<br>我们在日常生活中，对于开销的理解，多以金钱来量化，很少有人会把时间也计算在内。<br>举个例子：我们出门看电影，大多数人只会注意路上花了多少交通费、电影票花了多少钱。但是，很少有人会注意路上花了多少时间，电影开播前等待了多长时间……<br>有没有躺枪？<br>很多人总是为各种免费、特价的商品付出过多的资源和时间。比如：为了抢优惠券时不时的拿手机出来刷新、在双11趁打折买一大堆可有可无的东西囤着……各位小伙伴自己是不是也这样呢？老实交代，双十一有没有疯狂的买买买？？<br>当一个人的单位时间价值较高时，就会更在意时间，并且会倾向于用金钱去置换时间。<br>反过来，当一个人的单位时间价值较低时，就会显得无所事事，看起来时间很多，但是都虚耗在低价值的事情上面。<br>如果一个人对于财富的关注点都是细枝末节的蝇头小利，那就没有办法放眼大局，财富反而离他越来越远。<br>不少人精打细算地省下一笔物质财富，却浪费了大把时间。而这些时间本可以用于丰富他们的大脑，帮助他们提高劳动报酬率，创造更多的财富。<br>之前班班看过一个令人印象深刻的文章，大体是一个人因为小时候家里很穷，所以导致他做任何选择时，都是从钱的角度出发。<br>大学时因程序员有前途，就去学编程，毕业后一直在互联网行业混，经常会因为一两千的工资涨幅而跳槽，很少能在一家公司呆很长时间。<br>早期有好几家公司都给期权和股份，但他每每因为其它公司多给几千块的工资而跳槽，因此也错失了好多因为公司上市而实现财富自由的机会。<br>他不少前同事都已经财务自由了，而他在40多岁的年纪里，工资还只有1.5万，讲真，现在刚毕业的大学生程序员起始工资就能达到小1万呢。<br>而他呢，还继续打工、加班、换工作，升职也遇到瓶颈。他明明有很多次改变人生的机会，却一次又一次因为一点蝇头小利而错过了。<br>想想真是好可惜，但再想一想，这个结果于他又是必然。因为决定一个贫穷或富有的根本原因是——思维。<br>所以，我们强调：凡事都是思维先行，技巧其后。<br>尽量花时间去武装大脑，而不是为了节约开支而浪费大把时间，因为时间才是最珍贵的。<br>说到这里，不知大家有没有思考过“卖命”这个词？<br>虽然我们都说生命无价，但其实我们每天上班，本质就是在出售我们生命的若干分之一。<br>用工资就能反推出我们“命”的“市价”，大家认真算一算就知道，其实我们的“卖价”都不怎么高。虽然很残酷，但是你要知道，时间就是我们生命的若干分之一。<br>所以，别轻易把时间卖掉，但是反过来说：我们花钱去买别人的时间某种意义上就是延长了我们自己的生命！<br>比如一位作者花费一生写的巨著，我们花100元买他的书，某种意义上我们就是买到了他一生的生命成果，然后安在我们的大脑里，其实这就是变相的给我们自己“续命”。<br>这就是学习的意义，学习的意义就是“续命”。当然也有些人说成是“站在巨人的肩膀上”其实本质上是一样的。<br>所以下一代一般都会比上一代优秀，就是因为上一代为下一代“续”了“命”，这也是人类进化的动力。<br>所以，从价值上来看，时间是远远大于金钱的，花钱买别人的时间是非常值得的。这就是为啥富人能用钱解决的问题都用钱去解决，然后他还能更有钱的原因。<br>穷人啥都自己干，啥都省，于是越省越干，越干越穷。道理就在这。<br>理财一定是思维先行，有了理财的思维，然后认真学习正确的投资方法，才能事半功倍。<br>总结：理财的第一个思维——重视时间成本<br>2、资金的时间价值<br>我们先来做个选择题，以下两种情况，哪种让你更不爽：<br>某天你跟同事小月逛街，她遇见了心仪的包包，可是身上钱没带够，于是找你借了几百块。此后，她好像一直没记起这件事情，你暗示了好几次也没用，最后不了了之。其实当时那件包包你也很想要，但你都没舍得花钱买下来。<br>好友小明要买房，一时周转不开找你借了20万，并约定半年后还款。半年后他如约还款，但是却没有提利息之类的事情。他既然没有给，你当然也不好开口。<br>班班又要提问啦，那种情况让你更糟心呢？<br>抛开感情因素，从量化的角度来看一下。<br>20万的半年利息是多少呢？假设2.5%的年利率（就是普通的银行存款），200000<em>2.5%</em>0.5=2500元<br>第一种情况是损失几百元，第二种情况是损失2500元。<br>所以，通过量化比较的方式，我们就知道第二种情况的损失更大，因为金钱是有时间价值的。<br>当然了，话说回来，现实中，第二种朋友还是比较靠谱的。比第一种朋友靠谱得多，因为他遵守了约定。<br>那么问题来了，什么是金钱的时间价值？为什么金钱会有时间价值？<br>3、如何计算金钱的时间价值？<br>什么是金钱的时间价值？就是：当前所持有一定数量的货币，比未来同等数量的货币具有更高的购买力。说人话就是——现在的钱比未来的钱更值钱。<br>举个例子，30年前的一万元可以买100平米的房子，但现在北上广连1平米都买不到。<br>为什么金钱会有时间价值？因为通货膨胀，货币贬值了。<br>​​<br>不理财不等于没风险，通货膨胀其实就是最大的风险！<br>如何计算金钱的时间价值呢？对于不同的人而言，金钱的时间价值是不同的，这取决于他们利用这笔钱的预期投资回报率：<br>如果预期投资回报率低于通货膨胀，那么我相信大部分人都会选择即时消费。就像很多人有了钱以后忍不住逛淘宝，买买买。<br>相反，如果预期投资回报率高于通货膨胀，那么你就可能牺牲即时消费而选择投资。<br>这是人的天性，都喜欢钱，如果钱会越来越多，当然会选择投资而不是消费。<br>简单地说，如果你的投资能力很强，那你就会倾向于选择投资，期望在未来得到更多的钱，反过来，如果你没什么投资能力，那你大概率就会是有钱就花，因为不花还会贬值。<br>所以，对于同等财富积累，同等收入水平的人来说，投资能力越强，即时消费的意愿也越低。<br>训练营的目的，就是希望教会大家正确的理财投资观念以及科学的投资方法。愿大家都能从买买买变成投投投</del><br>总结：金钱是有时间成本的，钱会越来越不值钱。所以要学会投资，让投资收益跑赢通货膨胀<br>4、学习的时间成本<br>资金有时间成本，那么学习也有时间成本吗？<br>在此，班班要自夸一下：训练营的设立就是为了节约大家学习理财的时间成本。用14天帮大家养成理财习惯，走上正确的投资之路。<br>那么，问题来了：大家进营期间，好好利用自己的时间了吗？<br>比如：有没有在班级集结完毕前把班班说的重要事项都浏览一遍？有没有听课前读物并写读书笔记？<br>如果这些都没主动去做，而是干等着班班催，等同学们都集合完毕，要开营了，却发现自己还是一脸懵逼。<br>怎么学习、如何打卡等注意事项完全不了解，该提前打基础的课前读物也没看，白白浪费一次让自己思维升级的机会。<br>再说说读书笔记<br>读书笔记班班并没有强制一定要写，一定要交。但有的小伙伴执行力很强，效率也很高，已经把笔记发给学姐了，班班在这里给你们点赞。<br>而有的小伙伴却觉得：看书好麻烦啊、我没时间预习、不想写读后感、我等着开营上课就行了。<br>可等到开营上课时，又会有小伙伴说：我工作忙、我有其他事、没时间及时上课、及时交作业。那些我后面再补吧。<br>等到所有课程都讲完了，别人也学完了，那些小伙伴可能已经不想补了。为什么？<br>因为内容太多。<br>本来训练营课程只需花费两周时间，他们可能需要一个月、两个月，甚至后来干脆就不了了之。结果时间也消耗了精力也白费了。<br>蔡康永当年在微博上有段很经典的话：15岁觉得游泳难，放弃游泳，到18岁遇到一个你喜欢的人约你去游泳，你只好说“我不会耶”。18岁觉得英文难，放弃英文，28岁出现一个很棒但要会英文的工作，你只好说“我不会耶”。<br>人生前期越嫌麻烦，越懒得学，后来就越可能错过让你心动的人和事，错过那些值得一看的新风景<br>李敖也说过：怕吃苦，吃苦一辈子，不怕苦，吃苦一阵子。<br>不管是追求事业上的成就，或者是想要努力获得财富自由，这一路，我们都需要经历很多的麻烦。<br>今天觉得在群里学习理财投资麻烦、写作业麻烦；明天可能有一场很棒的线下分享，你同样觉得下雨出门麻烦，于是窝在家里刷剧吃零食；<br>下个月呢，有个牛人的线上课，要求你下载某软件，并在微信群完成作业。你大喊：天呐，又要琢磨新软件的用法、又要加微信群、还要写作业！太麻烦了，以后再说吧。<br>于是一次又一次，你仅仅因为觉得麻烦就浪费了学习和成长的机会。<br>等到几年后，那批不怕麻烦的小伙伴通过投资赚到了人生的第一桶金、掌握某个技能在职场上升职加薪、或者开创了自己的一片天地。<br>而你却因为怕麻烦留在原地，时间大把大把的逝去了。我想你的内心多少会有一点点遗憾吧……<br>总结：学习和成长从来都不是一件只有快乐没有痛苦的事情，任何新知识的掌握、新技能的提升，都需要我们去克服心理上、环境上的重重障碍，才能有所回报。<br>灵伶在这里得提醒大家：时间只会减少，而且只会越来越少，过去这一秒，就再也要不回来了。<br>既然来到了训练营，就要逼迫自己把时间用到极致！<br>想要学好投资理财，就一定要跟上训练营的节奏，坚持到最后！<br>班班希望：大家在这里学习到的不仅仅是理财的知识，更多的是通过此次的学习养成良好的学习习惯，更好地打理自己的生活和自己的人生。<br>平时不常用微信、但是很想学这门课的小伙伴，那就强迫自己这段时间把微信用起来。把班班提供的所有资讯，挨个不落的仔细研究透彻。<br>现在，班班带领大家回顾一下今晚的重点内容：<br>1.每个人的时间都有一定的金钱价值，凡事不要凭感觉，用量化思维算一算，选择能“延长”生命的事去做；<br>2.金钱是有时间价值的，现在的钱比未来的更值钱。所以我们要提高自己的投资能力，让金钱更有效率的为我们服务；<br>3.学习是有时间成本的，学得越晚，消耗越大。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晨读/晨读04</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB04/</url>
    <content><![CDATA[<p>一则故事让你轻松了解保险的实质</p>
<p>首先大家要先明白，保险可以根据它的实质简单粗暴的划分为两大类：消费型保险和返还型保险。<br>大家要牢记这两个类型，这样无论别人给你推荐各种杂七杂八的险，你都能清爽的理清，从而分析是否合适！<br>在准备保险专题时一直在想着，找哪些素材可以简单明了的让大家透彻理解保险知识，嗯哼<del>终于被我找到了，不信自己看正文吧</del>！<br>正文：<br>100个学徒工来到一家五星级大酒店学习厨艺，他们要勤勤恳恳学习十年才能出师。学徒们的薪水不高，一年只有几百块，但是五星级酒店的餐具都非常名贵，一个盘子要1000块钱。如果哪个学徒不小心打坏了一个盘子，那么他不仅要倾家荡产来赔偿这1000元钱，还可能会被开除，不能再继续学习和工作。因此学徒们都非常小心谨慎，但还是每年都有人打碎盘子。<br>这一年，酒店来了个聪明的财务，他提出了一个方案：如果每个学徒每年愿意交一点点钱，把这些钱集中起来，那么无论谁打碎了盘子，就用这钱来赔偿盘子，而且学徒们都不再受到处罚。大家都觉得这个方案很好，都愿意花一点点钱买个心安。那么需要交多少钱呢？聪明财务就问大家：“你们一年之内大约会打碎几个盘子？”大家想了想答到：“大约四个吧”（预定死亡率）。那么假定一年内需要赔偿四个盘子的话，就需要每个人交40元钱。聪明的财务又建议大家聘请一名经纪人来帮助大家管理这些钱财。按照当时的市场情况，雇佣一名经纪大概一年需要600元，为经纪人租个办公室要400元（预定费用）。这1000元的费用分摊到每个学徒身上是10元，这样算下来每个学徒一年只交40（保障成本）+10（费用）=50元，就可以打碎盘子不被开除了。（短期消费险诞生了）<br>可是这一年大半年过去了，竟然还没有人打碎盘子，这时候，一个平时做事最谨慎小心的人想了，我是最不可能打碎盘子的，这一年损失50块钱，十年也是500块啊！不行，我得找财务去谈谈。小心人跟财务这么一说，财务说：那简单，你不想交就不交呗，反正出了事风险自己承担。小心人想想又觉得不踏实：万一我打碎了盘子还是赔不起的，有没有两全其美的办法啊？聪明财务脑子一转，既然他想要拿回本金，我就要多收他一些钱，用这些多收到的钱去投资，用投资的收益把他的本金赚回来。那么现在的市场收益率大概是12.4%（预定利率，现在保监委规定预定利率不得大于2.5%）。通过计算10年后要想拿回本金，现在就收取 40（赔盘子）+10（费用）+50（为回本投资）=100元。于是聪明的财务说：我也相信你不会打碎盘子的，但是万一的事情谁也不敢担保，要不你看这样吧，你每年交100块押金（两全险），如果打碎了盘子这押金就没收了，如果十年都没打碎，到时候1000块钱我原样还你。小心人自己一算，几年内打碎了盘子，本来要赔1000的，现在如果十年中途打碎只要赔几百，如果十年都没打碎盘子，自己一分钱都没损失，确实两全其美！“但是咱们得有一个约定”财务又说，“你既然按100交押金了，这十年都得交，中途也不能再把押金取回，否则要算你违约。”小心人想想自己总归不亏，就一口承诺：“没问题！”<br>（两全保险诞生）</p>
<p>这一年小心人果然没有打碎盘子，看见其他工友大都损失了50块钱，他不禁得意起来，把自己的方案告诉几个好朋友。很快一传十十传百，大家都觉得自己没那么倒霉就是那个会打碎盘子的人，于是纷纷要求交押金。财务也很乐意，于是第二年一下子收了10000元押金。财务留下4000元准备赔盘子的钱，1000元费用，剩下5000元就去投资，这一年市场非常的好，投资回报率升高到了15%（利差益，预定利率12.4%），而且这一年学徒们打碎的盘子也只打碎了3个（死差益），雇佣的经纪也只花了500（费差益）。到了年底，还赚了不只一个盘子的钱。<br>听说了这个事情，小心人又不平起来，他找到财务说，原来你用我们的钱去赚了那么多钱，却不分给我们，太不公平了。财务想了想说：我赚钱是靠自己的脑力体力，也有我的功劳。要不这样吧，你再多交点，每年150元（分红险），十年后我不仅还你1500，还每年把盈利的70%分给你，如何？小心人一听，觉得这样更划算，于是自己马上交了150，回去还鼓动别的工友也多交一点。</p>
<p>这一年恰逢股市大涨，财务赚了很多，到了年终，大家一看自己的帐户，非但没有像去年一样花掉50块，反而还多了几块钱红利。于是财务鼓动大家说，明年行情还会很好，大家不如把自己不急用的钱都给我吧，除了扣除帮大家赔付打碎盘子的保障成本40元钱，以及扣除管理费用10元。其余多给我的钱我帮你们运作，我每个月给你们结算利息，而且是利滚利。“可是我们交了那么多钱，万一要急用咋办呢？”有人问。财务说，那没关系，这部分钱急用的时候你们可以随时取出（万能险）。“那你要投资亏了怎么办？”又有人担心的问道。“放心吧，我给你们承诺每月给大家的利息不会低于0%的。而且年利率一定在2.5%以上”，众人一 盘算，我们哪里懂什么投资运作，财务是个聪明人，交给他放心！于是众人你150，他180的都交了出来。 （万能险）<br>第三年年末，大家帐户上果然又多了若干盈余，有人感觉赚的真不少，但也有人感觉投的钱不少没有赚到心目中所想要得到的钱。他们又找到了聪明的财务，财务说：收益高的项目当然有，但是风险也大，如果你们不怕风险，我可以帮你们投到这些项目中去，这样吧，我帮大家设置几个投资的帐户，其中有风险高的，有风险低的，大家可以根据自己的偏好来选择投资的帐户，选择好了，我来帮你们运作，我每年只按帐户价值的百分之几收大家一点管理费，其余赚多少都归你们，但是万一亏了，请大家也别怪我（投连险）只要存满五年，我连手续费都不扣。大家感觉这样能赚到更多的钱，于是就把所有的钱交给了财务。</p>
<p>这时候来了一个新的学徒，众人纷纷向他解释这个项目的吸引力，劝他多拿一点钱出来。新学徒听得一头雾水，最后终于搞清楚来龙去脉，说：不就是交50块钱赔盘子吗？我家庭困难，不把这20%的工资都押进去行么？</p>
<p>从故事中，可以看到保费是由三个部分组成的：<br>保障成本+费用+投资的钱=保费。<br>其中无论你购买的是消费型险，还是分红、万能、投连险，每年的保障成本和费用都被消费掉了。保险公司之所以能返本、分红、付息，无非是在拿客户的钱去投资，然后把投资收益再分给客户。而且由于保险公司的投资项目不可能太过激进。所以保险公司的投资收益都是比较低的。</p>
<p>所以建议：尽量购买消费型保障功能的保险，这样可以用非常低的价格购买的很高的保障。然后把省下来的钱投资到其他能带来更高回报的投资项目中去，如基金定投，股票等。这样资金的使用效率会更高。</p>
<p>思考：<br>在上面的故事中，随着故事的推进，人们的关注点在改变，开始关注的是保障，随着事情的发展人们的关注点越来越重视收益而忽略了保险的本质。想想现在的保险行业和保险市场是不是这样呢？</p>
<p>所以还是建议大家再买保险的时候不要过多考虑资金回报，而应该重点考虑保险保障的本质，个人对于风险的厌恶才应该是购买保险最原始的初衷。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晨读/晨读05</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB05/</url>
    <content><![CDATA[<p>一个普通人怎样靠股票赚到100万？每个人都可以做到！<br>不一样的第一桶金</p>
<pre><code>一直很想好好写写我的这位密友，特别是听说他当年在财务上的目标现在已经实现，更勾起已经快被我埋藏起来的回忆，也激发起一点感慨。
当我们偶尔听到某人突然间有了很多的钱时候，免不了把钱和运气联系在一起，可真的能走进一个人的生活去观察时，其实会发现有些人的有些机遇，确实不仅仅只是一种偶然，即便天上真的掉馅饼，也需要站在正确的地方拥有正确的容器才能接到。</code></pre><p>死胖子<br>    主人公是飞泥的同学与好友。我一般叫他“死胖子”，可死胖子其实一点也不胖。他老喜欢管别人叫成死胖子，哪怕被他这么叫的人其实也一点都不胖。事情有时就是那么奇怪，一个喜欢管别人叫死胖子的人最后他自己成了最多被叫成死胖子的人。于是乎不知从什么时候开始的，死胖子成了他在我们损友圈里的昵称。<br>    毕业5到6年，应该是朋友和同学圈里的一些人中龙凤，逐步逐步开始展露头角的阶段。 朋友圈里，“谁谁谁很牛逼，干了什么什么事情赚了多少多少钱”这样的事情总是会传的很快，飞泥的朋友里有毕业前就靠写软件卖软件成了百万富翁的；有毕业后创业据说已经通过了A轮B轮拿到了几千万投资的；还有进了阿里之类明星企业，拿着高收入并且还拿到不少股权的。大家谈到这些人的这些近况时，总不免会带着复杂的情绪，有羡慕，有嫉妒，也有失落，主要是偶尔会感慨自己相比之简直虚度光阴的日子，虽然感慨之后依然会把这些小情绪抛到脑后继续自己的生活。<br>    如果这样的人就在身边，更容易让人心生羡慕。人不会对遥远的明星代言一个广告就收入千万觉得不爽；也不太会嫉妒王思聪这样的超级富二代的奢靡生活；但却特别容易嫉妒当年和自己同一起跑线的傻逼同桌如今过得比自己更好。<br>    可是死胖子，和上面说到的那些人，至少在外人看来真是一点关系也没有的。他一个普通的会计本科毕业生，学校不差但也谈不上顶尖，父母是普通的工薪阶层，家里有自住的一套房子，就业时父母没有什么可靠的关系，所以毕业后自己回家投简历找了家普通企业，做着一份普通的财务工作，拿着普通的工资，在普通的时间谈恋爱然后结婚。如果不是像我这样的好友，很难想象还会有谁，会在这样一个身边的普通得无法再普通的角色上挖掘出什么能值得一聊的话题。<br>    不过正因为死胖子的普通，更让我觉得应该写点什么，毕竟在我身边，这些的普通人才是绝对的多数。可能没有那么过人天赋，可能没办法每天都保持“打鸡血”的亢奋工作状态，可能没有遇上事业奇遇的普通人中的一员。<br>目标：100万<br>    真的好基友之间其实很少谈什么理想的，因为实在太假了，更多时候的话题就是聊聊诸如上一盘DOTA做辅助为什么不买眼、某个家伙最近追到了一个超漂亮的妹子之类的话题。但真的好友，即便从来没有相互聊过假大空的理想，也是能在漫长的相处中，对互相心中的那点念想，知根知底。<br>    据我知道，死胖子的心里一直有个目标：毕业后10年内赚够100万。我其实一直想问为什么是10年不是5年不是3年？为什么是100万不是50万不是200万？为什么会有这么具体的目标？不过相比这些问题，我更多的感觉是，别说在那个学生时代，即便是工作的几年后，也少有人去规划自己的财务，并且把财务的目标当成人生的阶段性目标去落实。<br>    死胖子本人其实从来都没和别人说过他有这样的目标，连几个最好的朋友也没有说过，如果不是当年偶尔间意识到然后问及，连我他都从来没主动说过。后来知道，不喜欢说还是因为他也觉得到处和别人提这样的目标是很LOW的事情，而且这也不是他的理想，只是想做到的一件事，没必要拿出来。<br>炒股和攒钱炒股<br>    回忆起来，之所以能和死胖子成为好友，和我们大学时都炒股有很大关系。我自然不用多说，当年高考报会计专业就是因为被老巴影响，冲着财务分析，冲着能读懂企业的语言来的。要知道大学期间就开了股票账户的学生是不多的，连隔壁金融专业的也几乎没有，更别说我们会计专业。而死胖子几乎就是整个系除了我以外，能找到的唯一炒股的人。自然，兴趣点一致，话也就很投机。<br>    不过说死胖子也炒股其实是不准确的，因为我对股票自小热爱以及提前就有知识的积累，而死胖子在我看来当年在股票方面的投资水平是不那么好的。说水平没我好，主要是觉得在专业术语和各种投资投机理论上他懂得没我多，他平时也不像我，会花大把的时间在研究股票，研究各种技术和理论上。<br>    但他在其他方面却影响我很大，后来我才非常汗颜地意识到其实他在“赚钱”方面的智慧真的远超过我。<br>    这个影响主要是对储蓄以及储蓄与理财的理解。<br>    大一时候有一次我和他去图书馆借书，他指了指《富爸爸》系列，说：“这本书你看过吗？蛮不错的，我就打算一定要33岁前赚够100万”。这是我第一次发现身边有这么个和我似乎臭味相投的人存在，应该也是我第一次模糊地感觉到死胖子有这么个100万的阶段目标，而他后来看过的很多书，说过的很多话，做的很多事，都很大程度上影响到了我的想法。<br>    实际上他在学校就开始那么做了，死胖子家住在相对富裕的南方，每个月有1500的生活费，而这个数字虽然不多，但在我们那所北方的学校里，算是生活水平中上，完全够花的。所以他有那个物质条件去养他的一个怪癖，每个月限定自己只花1000，并以此为乐，每月剩下那500，攒一学期是2000多，然后每学期都会买上一只股票，至于具体买什么股，他经常问我意见，我也特别愿意和他讨论我对个股的看法，毕竟炒股真的是一件特别孤单寂寞的事情，身边能有这么个还能听得懂你话的人，自然特别愿意分享。<br>    用我现在的目光看，死胖子与其说是在炒股，不如说是把股票账户当成了他的储蓄罐，用定投的方式在储蓄。<br>    后来随着关系越来越好，我越发觉得死胖子是个你越相处越了解，越觉得这家伙有思想而且有意思的人。<br>    死胖子很擅长攒钱，而且一直给人一种以此为乐的感觉，重要的是他的攒钱过程并没有给人抠门或者丢脸的感觉，如果不是我经常被他问到买什么股，从而知道他的这个小怪癖，外人估计是很难看出的。他遇到好事也会请兄弟们吃饭，平时的生活条件也都和大家相似，伙食不差也吃零食也买水果。不过他似乎就是能在生活中，不经意间找到些高性价比的东西，并擅长量入为出。<br>    说到“攒钱”的话题，很多人脑子里第一反应就是“葛朗台”那样的形象，但事实其实不是。适当而非过分的勤俭，是不会严重影响生活品质的，但稍不留神的超前消费或者浪费却容易埋下财务拮据的隐患。而我们生活中周围的大部分人，根本不像自己想象中那么在意自己。<br>    大学里男生之间不玩游戏的基本属于异类，所以电脑应该是大学生必备品了。当时打游(xue)戏(xi)用的电脑，就能看出这死胖子和我们这群普通男生的差距。 记得我当时是问爸妈要的钱，买了台4000多的笔记本，而寝室的大多数同学也都是买的新电脑。而他，是在大四学长离校前的跳蚤市场公告板上，花了整整四天时间淘了个品相性能颇为不错的机器，人家还送他一把椅子，毕竟急于离校不在乎几个小钱的土豪学长大有人在。更让人可恨的是他那台800的二手货，用完3年以后，还被他400给卖了。而买完电脑后的那段日子，他为此乐了好几天，还总用他那独显机子开着高品质画质的游戏炫耀自己淘到的这个超大便宜货。<br>    电脑的事情只是一个个例，类似的事情在他身上应该有不少，而死胖子在生活中的这种追求折扣，追求性价比和实用主义的思维习惯，其实也在后来的投资中帮到他很多。<br>    在遇到死胖子以前，我很少意识到“存钱”这个事情，因为从小我习惯了花多少管爸妈要多少的花钱方式。我家里条件比死胖子还要略好些，一般情况下大学都是花完钱直接管家里要，而不是像他那样每月有定额的方式。后来意识到这样的办法确实不好，虽然不至于养成花钱大手大脚，生活虚荣攀比的坏习惯，但真的不清楚自己的钱都花到了哪里，也养不成存钱的习惯。毕竟每个月多花200和少花200，都是非常容易的事情，就像一个胖子和一个瘦子，可能也就是每天多吃了一口与少吃一口在日积月累下形成的差距。<br>次贷危机<br>    不存钱的人有时候确实会对存钱的人有一种奇怪的隔阂和一种难以理解。我当时就很难理解这死胖子每月从生活费里扣500下来，整整一学期也才2000，一学年好像也就5000不到的样子，他还特别乐此不疲，到底图什么，又有多大用呢？<br>    那个时候自己年轻气盛，刚学炒股的人很多都是朝着年化20%以上的收益目标去的，特别是早早拜入“价投神教”的我，自然也拜托不了这种“美好的憧憬”。当时总抱着一个现在看来是“幻想”的想法：如果自己年化20%以上，靠着入学前那爹妈赞助的2万启动资金，毕业后就能变5万的样子。而对当时的我来说，5万绝对也算一个能炫耀一下的数字。<br>    后来的事情是次贷危机一直在发酵，上证指数从6000跌倒3000，又跌倒1600的过程里，自己的股票账户亏损了70%不止，老爹当年给了2万，08年时候又厚着脸皮问要了5千抄底，最低时我记得只剩8000市值，这是市场给我打的第一个巴掌。但人总是选择性记忆的，后来我就彻底把刚入市时2万4年要变5万的幻想给忘记了，但还是全然不顾现实打脸，觉得自己能遇到百年一遇的经济危机是一种超大的幸运，觉得自己吸取教训后未来依然能有20%的投资能力。<br>    因为死胖子的股票和我的是高度相似的，照理说亏损的幅度也该是相似的，但看到他当时还算不错的心态，我开始第一次模糊意识到即便只有每月500的收入流，在这种时候也会给心态带来很大的影响，并且后来这成了在这段经历里最大的收获。<br>    很多人的脑子里，比如我，对投资，特别是炒股的理解还处在如果每年都赚20%，那4年一翻倍，8年4倍，12年8倍。但事实呢？可能8年的时间里，只有2个月是最重要的，单单这两个月就贡献了8年中的绝大部分的收益，只是我们根本不知道这两个月会什么时候出现，更多时候市场或者在下跌，或者在盘整。在这样的市场中，每半年的能有的那2000，每年的那5000，就比一开始有的那2万更重要。<br>    死胖子后来和我说，对于像他这种单纯需要存钱的人（财富积累初期），当时只是把股市当成一个“储蓄罐”。 如果不是把股市当成发家致富的工具，那么定投股市的方式是真的非常合格，甚至可以说在绝大多数“储蓄容器”中最优秀的，股市长期下跌或者盘整的过程中，定投者并不会损失太多，但也不会失去那8年涨2个月的暴富机会，而这种机会是存银行买理财所没有的。<br>    很多年后的2015年，死胖子就是靠着这样的想法，在坚持积累了若干年之后，抓住了他等待很久的一次财务上的跨越。</p>
<p>赚钱存钱的重要<br>    我的第一个股票账户后来再没能复活，即便经历了09年的4万亿，似乎市值也没回到初入股市的水平，更何况2010年以后市场回暖后又再次进入漫长的下跌。 但那时候死胖子似乎依然信心满满，因为他还是会时不时同我交流，当时我们都有的一个共识是，这次危机，这年的暴跌，长远看会是一个很大的机会。<br>    区别是我只有选择死扛，而死胖子似乎总能从生活中“变”出钱来。<br>    我知道的一个死胖子的外快来源：大二那年迎新，死胖子加入了一个地下倒卖“铺盖”的学生团伙。新生入学时，被子铺盖是个很好的生意，因为学校内部的商家垄断，这些生活用品的价格相比校外就卖得很贵，新生和学生家长毕竟刚来，对学校周边的环境不熟悉，逗留时间短，有时就只能高价去买。于是总有聪明的学生，从校外找到批发商，用香烟贿赂过看偏门的大爷后，运货回学校私下兜售，因为价格比校内商家便宜很多，销量自然有保障。<br>    据我所知，死胖子加入的那群“学生团伙”不但倒卖铺盖，后来也倒卖二手教材，倒卖军训服装。这个团体也就成了死胖子的一个额外收入来源。第二年的时候死胖子拉了我寝室一哥们入伙了，从我室友那里，我知道他几天的倒卖活动拿到了2000的不小一笔“工钱”。当时我室友异常开心地用这笔工钱换了一个新的诺基亚滑盖手机，虽然他原来的摩托罗拉翻盖手机也不是便宜货而且还用得好好的。而死胖子，一如既往的存到了他那股票账户小金库中，回过头看这笔钱投入的时点又恰好是当时股市的一个低位，而他当时买的那个股票若干年后给他带来了近十倍的收益。现在回忆起来，对比我那室友对待钱的方式，我又感到人和人的差距恐怕就是在这不经意的很难察觉的潜意识中体现出来的，而这样的“运气”可能永远也不会落到室友那一类的人群中。<br>    毕业前夕，死胖子的“小金库”里具体攒下钱的数字我不太清楚，但以我的观察这不太会是一笔小的数字。死胖子每月量入为出，先存钱再消费的习惯一直坚持得很好，这四年里光这笔储蓄就应该有2万不止，还不算他在危机时期买到的那些股票，再加上他总是会找到一些额外收入的办法，而后来死胖子也和我说，大四那大半年的实习，因为实习单位有吃有住花销并不大，其实也存下不小一笔钱。<br>    死胖子的这样一笔数万的存款，就是用我当时看不起的一笔又一笔500元小钱的方式存下的，可即便对于相当一部分工作了好多年的人，可能也不一定能在工作后存下这样规模的一笔储蓄，更何况是一个刚毕业的应届生。<br>    后来一段时间我真的是有反思的，恐怕当时我自己的思维习惯和死胖死的思维习惯，是一个非常典型而且极好的对比。大家同样虽然都对“赚钱”有着挺大的执着与热情，都想尽快积累到自己的第一桶金，但真的反思之下，死胖子确实用了一条更“踏实”的路。而我的那种不切实际的对投资收益的追求，以及平时不注重储蓄的生活习惯，就显得有那么些虚无缥缈了，而且停留在脑中缺乏实际有效的行动。<br>    其实理财方面一直有一个特别有名的说法，叫“哈佛教条”，具体内容是，对于任何人而言，无论每月的收入是多是少，一定要先存下20%，再花剩下的80%。<br>    两种思维：一种是先存钱，然后花剩下的。另一种是先花钱，然后把剩下的存起来。没做过的人看似没有区别，但真的那么做以后，区别真的很大。<br>    工作以后当我也去强迫自己去这么做的时候，才真的体会到其中的重要性。而养成这样的习惯也是理解理财所必须要跨的第一步。人必须要有财才能理，但钱是不会从天上掉下来，所以对于大部分人，学会储蓄才是最先要做的事情。对特定阶段的人而言，少买一个Iphone，少买一个包包，少买一件衣服或者一双珍藏版球鞋，对储蓄的增长可能要远比每天研究股票或者投资来得更明显。<br>对于大部分人，哪怕收入不高，相信每月少花20%并不是太难的事情，更多时候我们不愿意存钱，其实是看不起每月存的小钱，20%对于一个月入4000的工薪阶层，也就是800元，而800元又能干什么呢？什么都干不了。于是乎我们也就连800元也懒得去算计。<br>    多年以后，我也是从死胖子嘴里知道了，这样的算计不仅仅只是表面的大钱小钱的问题，更深层次是人生的机会成本的问题。相比于月光族，那一点看似不多的储蓄带来的不只是表面的金钱数字，重要的是它还可能是一次摆脱现状的机会。<br>买车热潮<br>    我们的损友群在毕业后还保持着相当的活跃度，所以后来的日子我能一直都和死胖子保持着联系，也就有机会默默关注他的那个100万计划的完成进度。<br>    损友圈里的话题随着时间的推移会变，比如刚毕业时大家最热门的讨论还是工作和游戏，谁谁谁找到的工作如何好，谁谁谁准备去北京上海深圳，以及讨论哪天晚上再组织上一盘黑店战个痛快。而一个纯男生好友组成的网络聊天群，在毕业1年多这样的一个时间段，最热门的话题一定是女人和买车。<br>    女人和车对于那个阶段的男生似乎是不可分割，损友里总会有一些先人一步成为老司机的传授经验。在那时候老司机的叙述中，有车等于有资格去大学区把妹，有车等于有机会风风光光地约会漂亮妹子，即便目的可能异常不单纯。自然诸如如何勾搭一个妹子，如何约会，如何快速发展关系，什么地点适合车震也是大家很关心的话题。<br>    再后来，一辆车所能做到的事情似乎变得越来越多，有车等于男人的浪漫，有车后天是蓝的，前途是光明的，事业是平步直上的，妹子是永远不缺的。所以攒钱买车，甚至贷款买车就变成了相当一部分人工作后的第一个目标，即便其实大部分人后来发现，车子并不能掩盖不帅气的面庞和不强的工作能力。<br>    死胖子在那个阶段几乎是群里的异类，在群里说着和当时主流观点截然相反的话。特别是当遇到家境一般的朋友，也表露出想要管家里要些个钱再贷款买辆车的时候，他总是抛出用现在的眼光看极度成熟的理财观，来试图说服那些略有一些“过度消费”的朋友，虽然那个时候除了我以外，其实很少有人真的能听懂能听进去他话的含义。<br>    他的话在大家看来太过理性而缺乏了一些浪漫，太不符合一个热血男生对生活的理想。死胖子能轻而易举地说出拥有一辆车后一年里增加的无谓花销的具体数字，也能说出如果不买一辆车这一大笔钱未来能做的事情。他会告诉想要透支买车的同学，买房、投资、创业或者读书在他看来都是远远优于买车，而一旦买车，这些计划无疑都会被推后，特别是出于炫耀目的而非实用目的一辆车，既不能帮助事业的发展，也不一定会对找一个好对象帮助太多。<br>    这样的话虽然好心，但更像一盆冷水所以不受待见，时间久了，死胖子自然也就不再说这样的话了。<br>    而我，因为了解的关系，那个时候的我已经开始越来越在意死胖子有时说出的话了，后来死胖子无意间表达出来的一个观点即便到了现在，我也记忆深刻。<br>    那段话我已经记不清了，但经过我消化后，死胖子大致的意思是这样的：人为什么要买保险？因为对于同一个人来说，同样的钱，效用是不同的。就像吃饭，吃8个馒头人会觉得饱，但第8个馒头和第1个馒头的作用截然不同，对于一个快饿死的人而言，第一个馒头是“救命”用的。<br>    钱也是一样，买保险虽然从纯数字上看可能是亏的，但是大部分保险的真正意义，是用平日里丰衣足食的那第8个馒头，去换快饿死时的那一个馒头。从边际效用的角度看，是划算的。因为越是接近0的资产，所产生的收益越大，效用越大。以前的农民遇到天灾后，最需要1万元钱去买第二年的种子和肥料。所以如果能用好年景富裕的一点钱，去换大灾年的这第一个1万有着最高的收益和效用。<br>    而储蓄和消费也是一样的，人没钱的时候攒下的1万元存款，和有了100万时候的1万元存款，有着截然不同的作用。人的第一个1万，第一个10万，第一个100万，会打开不一样的机会之门，在没有这些储蓄的时候，很多事情是不会去想，也就不可能去做的。<br>    1万在需要的时候能支撑一个人辞职1年，而这1年对这个人来说可能改变一生。可连1万储蓄都没有的人，很少会去想脱产不工作，甚至很少会去想换一个自己真正热爱的行业踏踏实实从底层重新开始这种事情，失业以后一定会焦急地寻找下一份工作，即便这份工作极有可能完全不适合自己。10万可能是一套房子的首付，对于一个没有储蓄的人，是不可能去想着买一套上百万房产的，因为连基础的首付都没有。100万可能就会让一个人开始时不时思考创业和投资的项目，思考成为某个牛逼同学的创业合伙人是不是靠谱这样的事情，思考作为一个普通工薪阶层时不可能去想的事情。而这些就是机会成本。<br>    所以单买车的事情来说，大家几乎没钱的时候花20万去贷款买的车，和有了一定储蓄后花20万买的车，虽然金额相同，但实际是根本不一样的成本。前者花的是自己“第一个馒头”，而对后者而言，只是可有可无的一个馒头。<br>    后来死胖子的话让我想起现在的股市里其实也是这样，当某些大V聊某一个投资机会时，有一种很典型的回答：“可惜这样的机会不适合散户”。这样的机会不适合散户，是啊，股指期货，个股期权，融资融券，银行信贷，沪港通，100万起点的理财产品，300万起点的债券投资，没钱会把一群人和一群机会隔离开，更会使人的视野被迫局促在一个狭窄的自己能够到的范围内，投资市场中是这样，生活中也是这样。<br>    “没钱的人和理财没关系”，“没钱的人不适合基金定投”，“没钱的人一定要在年轻时搏一搏”。没钱这件事情似乎本身就会影响人的思维方式，可钱到底应该以什么样的方式变出来呢？钱并不会从天上掉下来，从地里涨出来。<br>尾声：做什么样准备，有什么样运气<br>    毕业第六年，我是我们损友圈里倒数第二个买车的，而死胖子是倒数第一个，这时候大家已经都对开着车子找妹子的事情都没什么兴趣了，想的都是TM这个月又该交汽车保险，TM小区停车费又涨价了，TM的这个月罚单还没上，TM的油钱凭什么不下跌之类更现实的问题。<br>    死胖子买车的时候，我问他，你小子当时毕业的时候到底藏下多少钱？死胖子说：“差不多5万吧。” 虽然我有过心理准备，但这个数字还是触动到我了。我可以肯定，5万这个数字在刚毕业的那个阶段在我们这群大部分没什么大出息的人里，绝对是最高的，而这个闷骚的货，居然藏得那么深！同时我也想起5万这个数字正好是我当年以为我靠着自己杰出的投资能力能达到的目标。<br>    因为后来很长一段时间里死胖子的股票组合和我都是基本重合的，所以我知道死胖子在14到15年里也靠着那轮牛市飞跃了。就这样，死胖子靠着普通城市里一个效益越来越差企业中的一份普通的财务工作能给的普通收入，靠着攒钱定投股票这样其貌不扬的投资方式，积攒下了数百万的财产，在一年里，不但大大提前而且翻倍实现了他的目标。<br>    其实死胖子一直用最不起眼的方式默默做着我们整个损友圈里最有钱的人，这些钱不是从天上掉下来的，一直都是如此，从毕业前就开始了，工作后的每一年他的每一个决定都在向同一个方向靠，虽然没人知道。<br>    而到了今天，其实除了我大约知道以外，他没有在任何场合表露过他具体有多少钱和多少股票，估计朋友也好，老同学也好，死胖子的同事也好，没有任何人会看出这货已经可以轻易地买上一辆豪车，需要时买上新出的每一款iphone6、iphone7而不用去卖肾。<br>    死胖子完全有晒朋友圈的资本，但他没有，他也没兴趣。<br>    可能有人会说他运气好，因为他毕业后正好遇到了中国股市最不好的几年，用最便宜的价格把所有钱投到了股市里，并且很幸运地遇到了一轮大牛市，又很幸运地在牛市里兑现了大部分利润。<br>    可能有人说他运气好，能找到一个不看物质又温柔贤惠的女朋友，愿意不要车子接送，结婚时不要大房子，能够接受他看似没出息和扣比扣的性格，每周约会愿意去着普通餐厅看着团购的电影。可为何这样的女生就是能被死胖子找到，而不是被开着车约着炮的人在大学里撞见呢？<br>    结婚前后死胖子又很幸运地靠着俩人的公积金和打折公积金贷款只花了极少的首付在房价还没暴涨前买了套虽然不到70平但很温馨的第一套房子，从而又在后来的房价暴涨中捞到一个不小的便宜。<br>    我想未来如果万一房价下跌，还会有人会说这人又那么幸运，没有在大城市扛上几辈子人还不完的贷款去买上一套学区的大房子。<br>    也可能有人会说他啃老，或者没出息，毕业以后没有去大城市闯荡，而是选择回家，住爸妈家吃爸妈家，所以每月除了谈恋爱时的几百元花销什么都不用买，才能短短几年攒下数十万的储蓄去买什么股票。<br>    还可能有人说他没有在合适的年龄做合适的事，没有开车约泡，没有用过IPHONE，没有一件明牌衬衫或者屌爆的墨镜，没有畅游欧洲甚至没有像样的旅游度假，年轻时候该尽情享受的事情似乎这位死胖子都没干。<br>    死胖子的经历里，毫无疑问是有运气成分的，可运气也好，方法也好，最终都需要一个人真的为了某件事做好了充分的准备和计划以后，好的运气才会从天而降。死胖子在我认识他的这10年里就是一直在做这样的准备，因为他准备地早，所以每一步都早那么一点点，每一步又都踏在合适的节拍上，而现在的死胖子依然很年轻，而现在他的“量入为出”的生活，已经是一般人眼中的小康生活了，一趟说走就走的旅行对于他来说已经不算浪费。<br>    退一步讲，以死胖子的价值观投资观，即便上天没有给很好的运气，没有14年股市的大牛市，没有能在刚买完房后房价就暴涨，我相信他的生活依然会比绝大部分人好，而那份运气早晚也会到的。生活中会遇到什么样的人，遇到什么样的事情，有运气但也不仅仅是运气。<br>    不管怎么样，我还是觉得死胖子的事情是值得拿出来说一说的，毕竟这个真实的例子里，他没有在投资上用高比例的杠杆，没有遇到事业的奇遇，没有一份体面的金领高收入，没有因创业而大发横财。<br>    我今天又听到单位的几个月收入过万的销售在讨论应该怎么用信用卡套现应付过这个月的财政危机时，更觉得想写一写。<br>    看到不少人把当下财务上的捉襟见肘的困境，寄托在以后会不断提高的职位和收入上，以及寄托在可能会带来财务爆发的奇遇上。<br>    而高收入的人大有人在，高资产的人也大有人在，买彩票中大奖或者突然拿到一大笔横财的也不少，但如果缺少掌控财富的智慧，依然是无法改变太多东西的。<br>    最近的消息是，听说死胖子的老婆和死胖子双双辞职了，而辞职的原因是我的这位弟妹在工作几年后发现真的不适合做正在做的工作，打算重回大学进修心理学的课程。而死胖子则选择了一个自己更喜欢的行业去学习、体验和沉淀，即便刚开始时几乎没有收入。试想，弟妹工作这么多年以后再回学校读书，还读了看上去这么没用的专业，毕业后也不知道能做什么的专业，如果换成一般还着房贷车贷的家庭会支持么？反正死胖子举双手赞成的态度说：“攒了那么钱不就是为了花在这种时候的么。”<br>    这又让我想起了死胖子很多年前劝同学别买车时用的话，人有钱时候花出去的1万，和没钱时候花出去的1万，有着完全不同的成本和心态。<br>    我不知道死胖子的事情对大多数人而言有多大的可复制性，但相比飞泥的朋友里，毕业前就靠写软件卖软件成了百万富翁的；毕业后创业据说已经通过了A轮B轮拿到了几千万投资的；还有进了阿里之类明星企业，拿着高收入并且还拿到不少股权的呢？死胖子的做法即踏实，也并不是想象中那么丢人。<br>    至少死胖子的价值观和思维方式影响到了我，而且当我毕业后也试着去做的时候，并且做到的时候，发现确实受益良多。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晨读/晨读06</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB06/</url>
    <content><![CDATA[<p>在花钱上拎得清的姑娘，能少奋斗10年</p>
<p>这两天，在墨尔本大学读研的小女友，为了七月份回国，提前请假，购置机票。<br>我问这个败家小妞，如此折腾为哪般？<br>她说好不容易才争取到全球青年大会名额有限的门票，所以七月份要专程去北京一趟，这是她每年成长的坐标和仪式。<br>我心里迅速拨动着小算盘，她的日均学费×请假一周+墨尔本至北京的往返机票+在京期间的住宿费+大会门票费……小两万算是保守估计了。<br>我倒是对她的“破费”零意外，她历来是一个为了升级自己而不择手段的主：<br>大学期间就开始创业挣钱，有个她佩服许久的行业牛人，在广州有个分享讲座，她二话不说拎包即走；<br>去年她为自己创业项目的活动，预付了6k的场地订金，但后来创业活动与全球青年大会时间冲突，冲着现场能批量听到苹果公司、阿里巴巴、埃森哲、百度等国内外著名企业的高管来分享行业观点和人生经验，6k打水漂就打吧；<br>她朋友圈里，有她和舞蹈课、插花课上师生的合影，有参加“无人车论坛”、“面部表情网”等论坛的PPT，有次我看到她在三里屯听TEDx的现场照，我问她门票多少，她记不清是680还是880，说是反正掏这种钱基本没过脑。<br>她说，在20岁出头的日子里，不对自己头脑投资，那就是对未来投降。<br>钱花了可以再赚，就算晚餐少吃一半，她还是坚信视野的开阔、心智的成熟、朋友的结交、生活的体验更紧急重要。<br>85后的我对这个95后的小女友敬意渐生，她早就不需要家里提供经济外援，那么年轻就去接触拔尖的大咖，去洞察行业的趋势。<br>看着她身上闪耀着的新知和洞见，我真切体悟到视野付费的重要性。<br>视野决定了你到底是时代的弄潮儿，还是只是被时代玩弄了。<br>我看好她这样的姑娘，对大脑进行着一次次的“扩大再生产”，肯定能少奋斗10年。<br>有时候不得不感慨世界真奇妙，小女友回国参加的全球青年大会的幕后大boss，是我以前采访过的又忙又美的开挂张萌。<br>我得知此事后，微信跟萌姐说，我有个在国外留学的朋友专程回国要来参加她主办的全球青年大会，萌姐听后夸此女有前途。<br>萌姐有感而发，谈起自己的消费观，她有2点原则惊艳到我：<br>常规积累的速度配不上自我期待时，花钱加载自己的快速学习力。<br>她几年前花了十几万巨资，报名参加北大光华管理学院的一个历史班。<br>说是因为自己是理工女，文史哲不扎实，不想让教育体系割裂自己的知识结构。于是找了集结了以北大史学老师为主的全国历史名家的课程，每月上课4整天，高密度、高强度地预习、学习、复习，她说那段时间都能听见自己骨节野蛮生长的声音。<br>去年又花了接近20万的学费，学习基金管理的最最先进理念，满世界考察一圈后，报名了大有来头的深圳国际公益研究院学习两年，有时还得去深圳上课。<br>每年确立一个以人为师计划，把牛人的优点都长在自己身上。<br>她给自己定下的小目标：认识50位各个领域的牛人，请他们吃饭，向他们请教。<br>她跟我说，如果去APEC或达沃斯这类大会，约起来很容易，有时候大咖行程紧迫，吃饭喝茶就比较难约。<br>像是之前她和吴伯凡老师约了几个月都不凑巧，直到博鳌亚洲论坛上遇到，那天各自开会忙完到晚上11点，俩人在酒店大堂谈了40多分钟。<br> 她有次在外地出差，得知基辛格来北京开会，可以约着一起吃饭，她马上买了最近的机票回京赴约。<br>我算是服了，这年头，千万别惹一个一手减少皮肤纹路，一手增加大脑回路的女人，也别惹一个在看脸的时代，争做最强大脑的女人，根本就惹不起。<br>​​<br>一个人的愿望会深刻地影响着TA的消费观。<br>拿我来说，我毕业那年，希望在我打拼的城市，有本写着自己名字的房产证。<br>所以那时我的消费观核心就是：压缩那些行为必要，但形式不必要的支出。<br>比如：<br>我知道健身必要，但健身房的花销可以省，换成去公园快走或拉伸也挺好嘛<br>我知道英语必要，但学英语的途径可以选，能够选英语角而不选培训机构嘛<br>我知道获取新知识必要，但我不必非要培训或上课，自学能力能够应付的嘛</p>
<p>我几年下来攒下十几万，发现一线城市的房价根本不是我的工资能承受的，于是我综合发展前景、宜居指数、生活成本等因素，索性换了一个二线沿海城市，买房，安居，乐业。<br>在生活压力被极大稀释后，我的消费观水到渠成地升级了。<br>我不再为了日用品单价更低，大老远地去超市购物，可以多花点钱在便利店里买到“便利”；我开始付费成为视频网站的会员，跳过90秒的广告，有更多更新的优质视频可供选择。<br> “一切节省，归根到底都归结为时间的节省；一切经济，最后都归结为时间经济”，不得不佩服马克思爷爷的远光灯眼。<br>我固定去理发的工作室，就算每次结账时发现又涨了那么多，但我下次肯定还乐意去。<br>一是我享受那位理发师带给我的美好氛围，他从来不推荐产品，而是抿一口红酒，然后安静专注地帮我剪发<br>二是我觉得被那位坚持跑马拉松的理发师剪过的头发，每根发丝仿佛都沾上了一些坚持的气息<br>为了与有人格魅力的人来个邂逅，就算多付点钱，我也甘之如饴，乐在其中。<br>我现在每个月都会买很多新上的原价书，对于新鲜出炉的优质音频付费收听，我在分享经济中完成着输入输出的新陈代谢。<br>当然，任何渠道的内容都会有误，像是美学大师蒋勋，知识脱口秀主持人罗胖，他们有些观点未必正确，但我也没觉得亏，毕竟引发好奇和触发思辨，对我来说更加重要。<br>我没去细算以前那种高性价比的消费让错过或滞后了什么，但我现在觉得：当我消费升级后，生产升级了，人生也升级了。<br>只说消费升级就能人生升级的都是大忽悠，我一定要强调生产升级的重要性！<br>有次某个发展很顺的年轻才女上台演讲，答疑环节，台下有个听众问她如何看待“消费决定论”，比如你买了奢侈品=自己是奢侈品，你会花钱=你会赚钱……<br>才女果断指出，如果缺少中间的“产出”环节，等式不成立：你买了奢侈品，产出了“奢侈品”，你才是真正的“奢侈品”；你花钱见的世面，走的弯路，学的技能，悟的智慧，这些产出才会变成你赚钱的能力。<br>在花钱上拎得清轻重缓急，舍得为未来和格局付费，舍得为产出和成长掏钱的姑娘们，已经少奋斗10年了。</p>
]]></content>
  </entry>
  <entry>
    <title>人生是场长跑，你是同学中的哪一个？</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB07/</url>
    <content><![CDATA[<p>人生是场长跑，你是同学中的哪一个？<br>小熊老师<br>这次春节，见了几个高中同学，也参加了一次同学会。首先大家知道同学会的主要目的吗？高中同学会，一般目的有三个：<br>1、男同学炫耀自己多么多么的成功。<br>2、女同学炫耀自己还没老，或者孩子多么多么成功。<br>3、续前缘打旧炮。<br>第三点估计大家比较迷惑，举个例子。A男高中的时候崇拜校花B，但是A男长的比较挫，又不参与任何学校活动等等，也不敢和女生说话的。所以那时候B当然看不上A，A也只能yy。<br>但是现在这么多年过去了，A突然功成名就了，B却嫁了一个俗夫，这时候B就觉得A也不错了。A么,顺便放下心头的一块大石。<br>今天我们不讲第二第三点了，呵呵，有兴趣的你们可以自己讨论。我们只讲第一点。要知道，高中时候，大家的世界观人生观基本上已经形成了，但是高中时候成绩好的，过了20年来看，未必是事业上最成功的。<br>我这里举四个人的例子：</p>
<ol>
<li><p>A男，我最好的朋友，大学毕业就进入设计院，作为他们系最好的学生被某建筑设计院看中。他当年没考上研究生竟然也是他的运气，因为和他同届考上研究生的人毕业后成为他的下属的下属。37岁当上设计院院长，成为该设计院最年轻院长。现在呢？现在他每天的工作就是劝手下人辞职，去年他们设计院有150人，现在只有60人了。据他估计，等到他把这些人全部砍掉之后，领导就要砍掉他了。他还有12年的房贷要还，基本上没有积蓄。</p>
</li>
<li><p>B男，也是我最好的朋友，高三直升复旦数学系，硕博连读。数学系博士毕业，进入四大会计师事务所，36岁成为高级经理Senior Manager。当时刚刚进入会计事务所的时候，年薪就30万了。现在年薪接近百万。五年前在上海市中心老西门买房，320平米，1200万的房子。他是一个纯理工男，但是要成为合伙人，必须要出去谈生意，有指标的。他去年年中开始无薪休假，在家休养，因为得了轻度抑郁。后来因为房贷和家庭的压力，今年年初又开始上班了，现在估计还有1000多万的房贷要还。</p>
</li>
<li><p>C男，交大硕士毕业，进入全球顶尖的咨询公司，一干就是20年。这次同学聚会，老的我们几乎都不认识了。现在还奋战在咨询行业第一线，显然不太得志，所以一直郁郁寡欢。</p>
</li>
<li><p>D男，他的经历最好玩了。交大本科毕业，放弃研究生机会，进入IBM做销售，当时被我的几位同学鄙夷说吃青春饭。后来因为和IBM另一个女员工好上了并结婚，不得不从IBM辞职，跳槽到HP。7年前，被人底薪挖到一个信息安全公司，一步步从高层做到了CEO。</p>
</li>
</ol>
<p>这里要说的是D男，他从2003年开始，当时大家手里有点积蓄的都开始买房了。A男、B男和C男都买了一套三室两厅的房子，因为当时房价不贵，他们收入又高。D男却花了同样的钱，买了两套房子，一个两室一厅，一个一室一厅。<br>等到2009年中国金融危机的时候，A男和D男同时卖出了手中的房产（都升值了），A男在外环边买了一套别墅，D男考虑良久，买了陆家嘴的仁恒滨江花园一套小房子和太原路的一套小房子。<br> 2011年B男卖出了自己的房子，买入了老西门的那套豪宅。<br>现在，他们三人的境遇已经完全不同了。A男和B男现在被房贷压的喘不过气了，B男为了解决房贷问题，自己全家搬到小房子，把老西门豪宅出租出去。<br> A男前两天还问我借钱，被我拒绝了。<br> D男现在也准备卖出两套房子中的一套，不过他是为了投资海外房产。</p>
<p>各个阶段，他们几个各领风骚：</p>
<ol>
<li>大学阶段 - C男最风光，因为成绩最好</li>
<li>大学毕业后 - A男最风光，因为一进设计院就被委以重任，刚刚签约就被派出去面试别人。工资也远远比别人要高。</li>
<li>大学毕业后五年到10年 - B男风光期来了，因为他毕业比别人晚，但是一进四大工资就高出很多。</li>
<li>大学毕业后10年 - D男一步步赶上并超过以上三位了。</li>
</ol>
<p>从上面这么一个啰里啰嗦的故事，我想说明什么呢？</p>
<ol>
<li><p>人生是一个长跑，不到最后你不知道谁赢谁输的。<br>2、短期内靠高负债你有可能很风光，但最后还是要付出代价的。<br>3、决定一个人成功与否的，不是你的学历，不是你的工作，不是你的关系，而是你的思维。这是我深切的感受到的。</p>
<p>A男和B男，属于始终没有这个思维的。他们都是我最好的朋友，我也试图和他们去说过，但是结果就…，反正差点吵起来吧，哈哈。<br>但是D男却很清楚一些人生财富的哲理，比如：<br>1、延迟满足，宁愿住小房子，不要摆阔。<br>2、房产是投资，而不仅仅是炫耀或者享受用的。<br>3、别人恐慌的时候要贪婪。<br>D男还有一些很有意思的投资，比如他自己做过风投，投过一两家创业公司，可惜没成功，但是他也及时收手。<br>他还投资过私募基金，我给A、B、D三个都布道过我的私募，A没钱，B怕风险（他的P2P上刚刚吃过亏），D准备把其他私募的钱取出来投到我这里。<br>他明白分散投资的理念，上次和我咨询，我们把他的资产理了一遍，发觉他的房产太多了，而股权类的比较少。所以他决定要重新分配财产。<br>所以最后我感叹说，他的成功，不是偶然的。</p>
</li>
</ol>
<p>顺便说一下，A、B、D的三个人的买车经历：</p>
<ol>
<li>A先是买了一辆北京吉普，用来泡妞。后来又换成了斯柯达。</li>
<li>B先是买了一辆标致307，后来换成奥迪A4，今年又换成宝马X5。</li>
<li>D先是买了一辆标致307，一直开到现在。</li>
</ol>
<p>最后，总结一下，人生的财富终值取决于你是否有投资的理念，和你的收入等有一点关系，但关系不大。<br>各位来长投学习的，在我看来，只要别走上歪路，不要想着一步登天的超越你的同学，不出5年10年必将超过同龄人。</p>
]]></content>
      <categories>
        <category>理财</category>
      </categories>
      <tags>
        <tag>理财</tag>
      </tags>
  </entry>
  <entry>
    <title>理财/晨读/晨读08</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB08/</url>
    <content><![CDATA[<p>你的圈子，就是你的未来</p>
<p>前两天在上海，五原路一家颇有调调的别墅里，和钱皓见了面，聊关于新媒体未来垂直内容的商业模式，互联网金融和跨境金融的未来。</p>
<p>钱皓是微博和公众号大 V，自带光环和流量，之前在IDG，对行业的inshight和判断，前瞻且独特。</p>
<p>和资深的投资人聊天，大脑是要烧一会儿的，因为往往一个问题会往下挖好几层，挖到本质，挖到人性。</p>
<p>聊天的过程中，他说了好些观点，但其中最让我有共鸣、也是谈话中最有价值的点，是这句话:</p>
<p>“如果真正想做一件事，就一定要尽早地融入到行业内部圈子，更加核心或者更加前端，圈外人只有等到变化了才行动，就太慢了。”</p>
<p>我自己是心有戚戚的，真特么就是这样。</p>
<ol>
<li>圈子就是眼界和格局<br>人们常说一句正确的废话：选择比努力更重要。但问题是如何做正确的选择呢？前提是要有更高的眼界和更大的格局。那么再挖一层，如何获得更大的格局，更高的眼界呢？</li>
</ol>
<p>你的圈子，决定了你的眼界和格局。</p>
<p>在各个行业，圈子外的人，看到的是发生的现象；圈子里的人，看到的是内在的逻辑，才会早一步嗅到行业目前的变化和未来的方向；在事件还没有成气候前，在获得大众认知和理解前，提前做好布局，早踏出一步，获得宝贵的时间优势。</p>
<p>要知道，现在的商业，做一件事情，时间的早晚，往往是能决定成败的。一条赛道就那么多人，早进来的人就卡住了位置，外面的人，要么没机会进来，要么花更大的成本挤进来。</p>
<p>就像微信公众号，13年罗辑思维、和菜头等第一批进场的时候，一片蓝海，现在罗辑思维700多万用户订阅，13.2亿估值，论商业变现能力，可以说是互联网第一大号；14年财经网红吴晓波开了吴晓波频道，抢占财经自媒体领域，目前也有200多万订阅。其实论当年江湖地位和名气，吴晓波是在罗振宇之上的，就是因为来晚了。15年大家都看明白自媒体的IP魅力和流量价值，开始纷纷抢占的时候，此时的获客成本已经很高。</p>
<p>蓝海已经变成红海。今年当还有人说我想开通个微信公众号来创业的，我们只能表示呵呵了，大哥，现在都已经是直播和移动视频的时代了好么。</p>
<p>而圈外人最担心的，并不是战术的不努力，而是想错或者是想偏了战略方向。</p>
<p>大势已去，无力回天。</p>
<p>钱皓说，今年AI和VR很热很火，但是并没有真正体验过，无法理解这个技术革命的价值，前段时间去了趟硅谷，开始真正相信这玩意儿真的能改变世界。</p>
<p>你不在这个行业内部圈子里，你无法深刻理解一样事物的现在和未来。等大家都理解，都明白过来的时候，你再进场，就没什么机会了。</p>
<p>不要等风走了再行动。</p>
<ol start="2">
<li>圈子就是平台</li>
</ol>
<p>我之前的助理半年前拿到了上海奥美的Offer，开始了广告人的职业生涯，这半年我和她都在各自领域低头耕耘，联系不多。昨天在上海的时候，约她吃了午饭，从气质、谈吐、想法，能看出这半年在奥美的撕裂般成长。</p>
<p>“在这里，能够跟甲方global级别的人一起开会，内心经常很心虚，想想就我这资历，怎么可能呢。”</p>
<p>她说到奥美后，陆续收到了好几家当年她投简历时被拒绝的公司的offer，之前是3.5A级的，现在她是4A了。</p>
<p>之前爱搭不理，现在高攀不起，算是对这句话的诠释了。</p>
<p>况且还那么年轻，就踩在了一个较高的平台，前途不可限量。</p>
<p>我现在开始有这样的体会，就是不同level的平台，对一个人同样努力的付出，带来的效益，完全不是一个数量级的。</p>
<p>就像之前是靠贩卖自己的劳动力赚钱，后来开始用资本赚钱，后来开始直接用资源赚钱，付出可能越来越少，但是回报越来越大。一个人如果一直长期处在同一个段位的平台，尽管吭哧吭哧地辛勤劳作，顶多就获得稳定线性增长的收入或成长曲线，肯定追不上房价增长的速度。但是如果能进入一个更高的平台，会发现整片天空都是不一样的，思考的高度和连贯度也也大有长进——恭喜你，进入职业的快车道了。</p>
<p>并不是说努力不重要，只是，我们真的需要有更正确的努力姿势。</p>
<p>因为在天朝，辛苦是廉价的，对吧。</p>
<ol start="3">
<li>圈子就是城市</li>
</ol>
<p>做文化传媒和互联网的，多半都要搬到北京来，哪怕北京各种硬件设施实在糟糕，就是因为这些圈子都在北京啊，行业最优秀的人和最雄厚的资本在这里，你不来到这里，就可能一直是雾里看花，隔岸观火。看到的不够直接，就导致理解不够深刻，就导致行动慢半拍，导致一直都是圈外人。</p>
<p>一线城市的房价暴涨，除了周边城市也跟着涨，其它二三线城市似乎没什么动静，这就是一线城市巨大的虹吸效应。其实圈子也是一样，资本和人才都在高密度的地方。</p>
<p>有很多人不满足于现状，不甘平庸，但是又不知道从哪里开始改变，因为自己四周的圈子就是自己眼界所能及的世界，看不到更多元的可能性。差不多的状态，差不多的阶段，差不多的收入，差不多的思维方式－－四周没榜样，标签找不到。</p>
<p>所以我为什么还是一个大城市论者，说白了，就是圈子更密集，更前瞻，带来更丰富的可能，更高维度的视野。</p>
<p>当身体在城市圈子里的时候，每天都有可能与四周的讯息、各个行业的人，发生碰撞，擦出火花。说不定某个机会或风口就被你抓住，一下子起来了。</p>
<p>如果你在千里之外的小城，除了每天冥思和臆想，难道要等机会自己长腿飞奔向你么。</p>
<p>我平时一半的时间在香港，另一半的时间在北上广深杭，没办法的，资源的密集度，让业务集中在这些城市里，前段时间新世相的活动“4小时后逃离北上广”，撩了大众想要短暂离开的G点，但心里都清楚，这是逃离不了的北上广。</p>
<p>这些城市，就像是黄埔军校，在这里历炼几年，思维，格局，想法，都会不断地更新和迭代。和时代同步，是很重要的。</p>
<p>当然，这不是没有风险，因为进入一线城市并不保证一定会融入圈子，在城里的大海里淹死了，或者一直漂浮着上不了浪潮之巅的，也是大概率事件。</p>
<p>风险和收益的规律，放在在哪里都合适。</p>
<p>就像当年如果我肉身没有选择去香港，就赶不上大众海外资产配置的这一波浪潮，也不会想到开公众号做自媒体，就不会有后面的故事。</p>
<p>你也许不能预见未来，但至少能增加被幸运女神看上的概率。</p>
<p>不管未来是什么样，总要先把自己这副皮囊扔进这座城市，呛几口水，只要没有淹死，慢慢学会游泳，慢慢学会掌控，当下一波大浪真来的时候，看有没有机会，站上浪潮之巅。</p>
<p>还有一点，进入一个圈子，和融入这个圈子，是两码事，毕竟，真正混好圈子的难度，不亚于混上一个阶级。我们能做的，也只有不断修炼自己的核心竞争力，成为行业专家，获得业界认可，获得江湖地位，才能真正成为圈内人。</p>
<p>另外，时间别拖太久，一步慢，步步慢。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晨读/晨读09</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB09/</url>
    <content><![CDATA[<p>最好的教养，是父母永不放弃自我成长</p>
<p>01<br>我们为什么对教育这么焦虑？<br>    大多数的家长，对孩子、对教育，缺乏一个持久而深入的理解。猛然意识到，赶紧管一下，看到孩子不如意的地方，就开始忧虑孩子十年后的高考，十五年后的婚姻，以及二十年后的事业……<br>而这个忧虑本身，就会毁掉孩子的未来。<br>    家长之所以忧虑，是因为一直在间歇性地关注孩子，孩子有问题，就关注多一些，没有明显的问题，便关注得少。对孩子的教育，缺乏一个宏观的掌控，对于该做什么，不该做什么，做得够不够，自己心里也没底。因此，对孩子未来的发展走向，就缺少了一份确信。不确信，就会慌张。<br>    那么，为什么许多父母没有确信与笃定呢？<br>    许多家长，结束了读书生涯，有了工作，有了家庭，有了孩子，达到了一种表面上的“圆满”，便放弃了自我探索。生活遵循“最安逸原则”，看上去悠然自在，轻松洒脱，生活稳定，令人羡慕。其实，很多人生议题并没有完成，而是搁置在那里。<br>    打个比方，这很像“成长的断崖”。很多妈妈自认为选择了一条安逸的路，结果却被动地陷入烦恼的泥沼。到头来，付出的不是更少，而是更多。</p>
<p>02<br>“四十岁死，八十岁埋”？<br>    我有很多年长我十岁左右的朋友，常常在一起聊天，也会说到她们同龄人的状态。发现四十岁左右年龄的人，特别容易往两个方向走，要么越来越丰富，越来越有魅力；要么视野越来越窄，与外在世界非常疏离。一位犀利的女作家甚至用“四十岁死，八十岁埋”来描述这种状态，读来让人倍感凄凉。<br>    当然，选择最安逸的生活状态，也不是错误。不过，人生的议题并不会因为我们的回避而远离。派克在他的《少有人走的路》中写道：<br>    我们对现实的观念就像是一张地图，凭借这张地图，我们同人生的地形、地貌不断妥协和谈判。地图准确无误，我们就能确定自己的位置，知道要到什么地方，怎样到达那里；地图漏洞百出，我们就会迷失方向。<br>    有的人过了青春期，就放弃了绘制地图。大多数人过了中年，就自认为地图完美无缺，世界观没有任何瑕疵。甚至自以为神圣不可侵犯，对于新的信息和资讯，他们也没有多少兴趣，似已疲惫不堪。只有极少数幸运者能继续努力，他们不停地探索、扩大和更新自己对于世界的认识，直到生命终结。<br>    我们的人生地图，至少要通过三组关系来定位，分别是与自己的关系，与他人的关系，与世界的关系。如果我们不想再绘制“人生地图”，那么，也有很多逃避的办法。最简单的办法，就是退缩，并保持现状。<br>    许多人不接纳自己，常常会自我否定和自我攻击，却放弃了内在探索，而选择忍耐和逃避。面对人际关系中存在的障碍，不是去化解，而是把人际关系简化，有的索性只剩下亲人关系。在家人面前，就算任性为之，也会获得包容。对世界的看法，则保持不变，不再对世界产生好奇。<br>    许多妈妈埋头于柴米油盐的生活，最大限度回避了这三组关系。派克的另一句话，说得言简意赅：规避问题和逃避痛苦的趋向，是人类心理疾病的根源。</p>
<p>03<br>亲子关系不是完全对等的人际关系<br>    如果说，大部分情况，我们都可以逃避的话，那么，孩子的到来，则让妈妈们无处可逃。亲人和朋友会包容我们，但孩子只是凭天性和直觉生活，亲子关系不是完全对等的人际关系。我们的情绪和成熟程度，我们对生命的理解和态度，我们处理亲密关系的能力，被这个小生命映照得一览无余。<br>    从某种意义上说，孩子是父母的老师，他来到这个世界上，督促父母把从前忽略的课程补上，不断完善自己的人生地图。如果我们处理不了与自己、与他人的关系，怎能处理好与孩子的关系？如果我们对这个世界不再好奇，怎么能留住孩子的好奇心？<br>    有位妈妈感慨：我现在才理解“孩子是天使”这句话，如果不是养育他遇到困难，我不会去探索，不会深刻反思自己的成长历程和思维模式。现在，我的生命在走向开阔，这是孩子带来的改变。<br>    如果我们抗拒成长，就会把成长的任务转嫁到孩子身上。如果我们不能接纳自己，对自己不满意，就格外需要一个令人满意的孩子。如果我们不能处理好亲子关系，心中就会有一个“理想小孩”的形象，希望孩子主动符合我们的期待。<br>    于是，几乎和孩子绑定在一起，共进退，同悲喜。孩子被老师夸奖了，这一天就非常愉悦；孩子考试考砸了，心情顿时灰暗下来。如此一来，孩子就会变成人生最大的“创可贴”。一个孩子，很难担负两个人的成长任务，这样的状态，注定会出问题。<br>    选择与孩子一起成长，意味着我们要重新审视三组最基本的关系，要面对人生的问题，寻求答案，完善自我。我们并非过了18岁，便是真正意义上的成人,在某些时刻，我们只是大号的孩子。我们成长中积累了很多暗伤，许多成长任务并没有完成，与孩子相处，这些问题再次浮出水面，这也是很好的线索。当我们感到困顿、力不从心的时刻，不妨停下来，看看到底是什么阻碍了我们。</p>
<p>04<br>孩子的教养，拼的是父母的功底<br>    当我们不再逃避，勇敢面对问题，也意味着离开心理舒适区，进入不确定的状态。世间最美的花朵,都开在最艰辛的枝头，成长就是一个破茧成蝶的过程。成长意味冒险，也伴随着苦痛，这也是我们回避成长的最主要的原因。<br>    这个过程，会有煎熬，也会迷茫和焦虑，但只要我们坚持思考，终究会找到解决的途径。面对困惑的时候，阅读会打开一扇窗，我们有必要了解一些心理学方面的知识。庆幸的是，现在通俗心理学著作的质量越来越高。我们会发现，每个问题解决之后，我们的人生都变得更通透，更顺畅，不会再被同一块石头绊倒。<br>    而每个困境背后，都隐藏着人生的礼物。<br>    我始终觉得，教育的方法和技巧，只是孩子成才的冰山一角。有时候，孩子的教育，拼的是功底，拼的是父母的处世态度和人生感悟。也就是说，父母的整个人生，都会参与到教育中来。<br>    从目前的现状来看，妈妈承担的教育责任更重一点。所以，我总是劝妈妈，人到中年，路要越走越宽才好。低到尘埃里，洗手做羹汤，本来是很幸福的事情。但是，仅仅懂得柴米油盐，会离孩子的精神世界越来越远。<br>    教育孩子的王道，是执着地栽培自己。<br>    最理想的状态——孩子懂的，我们懂；孩子不懂的，我们也懂，至少，我们要与孩子有交集。这个漫长的求索过程，既是为自己，也是为孩子。孩子的起点，是父母的肩膀。如此说来，孩子永远不会有相同的起跑线。<br>    所以，我敬重那些勤奋好学、不放弃自我成长的父母。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晨读/晨读10</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB10/</url>
    <content><![CDATA[<p>定投6年，以亏损收场，她到底做错了什么？</p>
<p>今天听了一个惨烈的故事。</p>
<p>我的同学球仔，从2010年开始定投某只基金，每个月8号投300块钱，坚持了整整六年，2016年全部赎回，以净亏损200多收场。</p>
<p>她自己觉得还挺高兴的，觉得每个月省300块钱，坚持下来竟然在基金账户里面攒了几万。</p>
<p>球仔却不以为然。这明显是一个很凄凉的故事嘛！因为她的定投，收益率曾经高达50%以上。可惜她没有取出，眼睁睁看着收益全部跌没了。</p>
<p>哦！不对！还不是眼睁睁，她是设定了定投之后，每个月就让它从银行卡扣钱，六年时间都没去管收益如何。</p>
<p>我听完球仔的故事，觉得完全不可理喻。这操作，简直太烂了！！</p>
<p>她犯了个很大的错误。错在哪里呢？基金定投，可以没有止损，但是一定要有止盈。</p>
<p>基金定投也要止盈。</p>
<p>照理说，任何投资都需要有止盈和止损，不过基金定投，止损不那么重要，但是一定得止盈。</p>
<p>你们知道，股市是周期性牛熊转换的。如果定投多年积累的收益，在牛市到来的时候没有止盈，你的收益终究会随着熊市的到来化为乌有。</p>
<p>球仔的同学定投的这只基金叫博时平衡配置混合，这是一只混合基金，有十年历史了。</p>
<p>这支基金在2015年年初，定投收益达到37%，2015年6月股灾前定投收益率最高超过50%，可惜这段时间她一直没有止盈赎回，直到所有收益消失殆尽。</p>
<p>哪怕是第一次暴跌的之后，其定投收益也还有20%以上，依然没有赎回，错过了一次又一次机会。</p>
<p>怎么止盈？你可以给自己设定一个目标，一旦受益达到预期目标，马上抛出。</p>
<p>球仔同学的定投走势<br>基金也要密切关注市场波动。</p>
<p>有些人觉得，定投就是设定好投资策略之后，不管基金当前的净值如何，每个月自动存钱进去就行了。</p>
<p>我同学就是这样子对待定投的。大错特错！</p>
<p>定投可以代替储蓄，但是不等于储蓄。</p>
<p>定投也是投资，是为了在控制风险的前提下，让收益最大化。一般我们定投的周期设定为三到五年。</p>
<p>定投的前期，基金亏了也不用慌。但是我们要关注，现在是不是已经到牛市了，如果到了牛市相对高点，或者达到了自己的止盈线，就抛了吧。</p>
<p>在定投过程中，如果股市大幅下跌，还可以加大该周期定投的金额，以更便宜的价格获得更多的基金份额。这个也是基金定投的常用技巧之一，成熟的定投者都应该学会这点。</p>
<p>什么类型的基金适合定投？</p>
<p>球仔那位同学做定投，选了一只混合型基金。混合基金可不可以定投？当然可以，但是，并不是最好的选择。</p>
<p>首先，债券市场的牛熊周期更明显，更容易判断，一次性投资比通常定投的效率和收益都更高；</p>
<p>其次，债券市场的波动比股市弱很多，定投的预期收益也低很多。混合型基金里面有不少的债券比例，当然不如股票型基金给力。</p>
<p>当然，如果你直接定投债券基金，那是最愚蠢的。</p>
<p>波动越大的基金越适合定投，所以定投股票基金比较合适，指数基金更佳。<br>下图为基金定投的微笑曲线，越深越好，波动越大的基金越适合定投。</p>
<p>什么时候开始基金定投？<br>答：现在。种一棵树最好的时机是十年前，其次是现在。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晨读/晨读11</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB11/</url>
    <content><![CDATA[<p>你的死工资，正在拖垮你<br>最近各大平台都在讨论，房价疯狂上涨，30岁以下的年轻人究竟还有什么机会？看到这样的话题，我也会很焦虑，资本寒冬，工资涨幅小，物价和房价却疯了一样往上飞，完全不顾及我们的感受。<br>焦虑的同时，也不得不承认，在资源聚集的北上广深，总有一批既得利益者。他们有部分因为生对了年代，正好在谈婚论嫁的时候咬牙买了房；但必然有那么一批人，他们在本身职业之外，不断打磨自己的核心技能，有整合资源的能力。<br>工资只是它们的生活费而已，聪明并且那么拼命的他们，理应拥有更多的机会。<br>今天这篇文章想告诉你，无论你是否拿着死工资，都有随时离开体制的能力。<br>在北京，和国有银行的一朋友吃饭，他和我年龄差不多，毕业后一直在银行，规规矩矩，也算是做到了中层，年薪税后30万人民币，买了四环的小房子，谨慎的花钱过日子。<br>他说他很焦虑。他说北京机会很多，好些朋友做了公司，前几年邀请他入伙一起干，但是他觉得好不容易有这么一份稳定的收入，不敢放弃。<br>他看过当年觉得不如他的人现在赚了好多钱，也看到那些所谓的精英们，一直苦逼的挣扎在融B轮的路上。<br>他觉得在北京这座有最活跃的创意，最多的资本，最密集人才的土地，但自己好像是这座城市的局外人，旁观者。这座城市的热闹，和自己没什么关系。<br>而他这份薪水，越来越觉得鸡肋，吃不饱饿不死，就像每天的生活一样没劲。<br>看似奇怪，但细想又合情合理。工资收入，这个大多数人传统的收入模式，在这一轮互联网经济的浪潮中，正在变得越来越尴尬。<br>以前要稳定  现在要可能性<br>因为传统工资的模式，已经越来越不适合当今的新商业，尤其是互联网商业。<br>工资的增长模式是线性的，而互联网商业的增长模式是指数的。<br>工资收入模式的前提是，一个人是相对静态和稳定的，工资收入的增长是随着这个人专业度和经验丰富成正比的，是随着时间的线性增长关系。所以工资存在合理性的一般前提是，这个公司是稳定的架构。<br>你现在做一个公司，很少会做个公司十年规划，做个三年规划就不错了。因为现代商业一方面公司寿命越来越短，我先声明，这不一定是坏事。另一方面，一家公司的迭代速度非常快。<br>互联网最大的作用，在于产生了人与人更低成本的链接，更高沟通的效率，更高频的合作交易。<br>一句话总结，就是增大了个体的链接力和影响力，和未来不可预测的想象空间。是有可能呈现爆炸式指数增长的。<br>所以工资模式其实是并不太适合互联网商业，以为太慢了，太没有想象力了，股权模式其实更适合。<br>而另一方面，中国已经进入了一个资本回报率增速高于劳动回报率增速的时代。<br>一线城市，你会发现，如果你仅仅靠工资收入，一般都是买不起房子，因为工资的涨幅一般跟不上房价涨幅；<br>所以我身边好多人都有30岁危机，工作了五六年，收入好像增长了，但是和房价，物价和自己不断增长的物质精神消费欲望比起来，反而觉得更不满足了。<br>而幸福的人，更多是前几年拥抱了资产泡沫的人，因为M2的指数来看，资产的增长一般都会超过工资的增长幅度。<br>不像美国，这十年的物价指数基本没怎么涨，房价也没有升太多。所以，十年前的10万美元年薪，和现在的10万美元年薪，日子过得差不多。<br>所以，线性增长的工资，其实开低了你在这个时代可能拥有的更好加钱。<br>承认吧，你的工资收入走不向财务自由<br>另外，我注意到，在有些行业，工资收入，不仅有鸡肋，甚至可能是陷阱。<br>因为高收入，有两个特点，第一是高风险。第二是稀缺性。<br>工资收入所对应的应该是低风险，因为工资意味着旱涝保收，但现实是，现在这个时代一个人因为不敢冒险，反而职场风险指数越来越高。<br>因为当身边都是翻起的海浪，一艘平静的船，说这艘船稳定，就是个笑话；你能做的，就是不断调整船的姿势，和海浪同频共振，所谓动态平衡。<br>如果一个人领的是工资，但是所处的行业，让你越来越动荡，变得更容易被替代。那这个工资收入，不仅不是保障，而是职场陷阱了。<br>举个例子，我一好朋友，四线城市，和我年龄也差不多，政府机关领导一把手的秘书，绝对是当地有头有脸的人物，有不错仕途，但他说他很焦虑。<br>他说他和上海这种一线城市的朋友聊天的时候，虽然大家都很羡慕他现在貌似人生赢家的日子，但是，他说，<br>“我有时候会听不太懂他们讲的一些互联网的东西，我觉得自己的知识结构很闭塞，感觉自己落后这个时代了，有种out的感觉，”<br>“这种感觉，不想就会麻木，想起就会觉得恐怖。”<br>因为公务员这种看似稳定的饭碗，好像这几年也开始变得越来越不稳定了，而且体制内的很多制约，导致他很难开发自己的另一种人生可能。<br>他说我每次回家，就特别想和我聊天，觉得我能够带给他外面的世界的样子。<br>所以，互联网带给我们这一代人前所未有的机遇，和前所未有的挑战。我们都有出人头地的机会，也有一不留神被淘汰的可能。<br>当人工智能都开始淘汰华尔街的交易员了，未来有哪个人是安全呢？<br>带给我们的启示是，我们在挑选一份工作，和规划自己职场路径的时候，工资考量的比例，或许越来越不重要。<br>或许我们应该多想想如何让自己变得不可替代，变得稀缺，变得有话语权。<br>或许我们应该多想想如何抓入周期越来越短的机遇，抓住一次人生的资产泡沫，哪怕只有一次，完成原始财富的积累。<br>就像还在体制内的人，要时刻保持离开体制的能力；<br>就像还在领工资的人，要时刻警惕，你的价值，可能一直被工资低估了。<br>中产阶级确实在崛起，中产阶级也同样焦虑，至少，你不能跟着船一起沉。<br>我北京两个商业合作伙伴，一个去年从交通部大院里出来，做自媒体人了，做的还不错，一年几百万收入；另一个伙伴两个月前也从体制内出来，跟着一个牛逼的互联网人做项目，收入还不稳定，但至少比以前开心。<br>当个人和组织的关系变得不再高度依附，当一个人就可以活成一家公司完成和世界的最短连接；<br>而工资，作为个人和组织中间的交易载体，在这个互联网时代，显得越来越不合时宜，因为——雇佣制会退出舞台，合伙制会成为主流。<br>死工资正在拖垮我们，只有工资收入的你们，是该好好反省了。</p>
<p>算一算一辈子需要花多少钱</p>
<p>月光族们肯定对自己的毛病深恶痛绝（引以为豪的麻烦别看），也肯定看过不少消灭月光族的10个技巧之类的问题。但是，解决月光的最大问题还是动力问题，因为买东西的享受是立即可以体验到的，而没有钱的痛苦是未来的事。这种只顾眼前欢愉，不论未来受苦的享乐主义心态，就是月光族生存的肥沃土壤。<br>如果能确切地感受到，未来缺钱的痛苦，也许就能彻底改变月光族的状态。<br>让我们来找个主人公吧，就让我们叫她小M吧，嗯，那谁，就是你，我可是为了你写的。<br>小M年方25，工作了3年，现在月薪税前6000元，税后大概是4500元左右。她在广告公司工作。广告公司那种地方，你知道的，身边光鲜亮丽的都是美女帅哥，所以小M也不得不每个月买点衣服啊，买点鞋子啊，买点配饰啊，再加点房租啊，外出吃饭什么的，月光是客气的，有时候拆东墙补西墙也是难免的。<br>现在先让我们来看看小M同学一生能赚多少钱。不过我们假设她一生无波折，既没有在路上撞到高帅富，也没有中500万的彩票。当然，也不曾因父母欠债被迫要还2000万的高利贷，也没有因为创业，突然变成了下一个中国首富。我们假设她既没有太好的运气，也没有太坏的运气，一切都是比较平稳，线性发展的。<br>小M今年25岁，退休年龄是60岁，所以还有35年可以工作。假设她的工资是线性增长的，每年可以长10%的工资。她现在的年收入是54000，存款为0。别看只有10%的增长，由于是每年增长的（你们公司每年给你涨工资吗？），到了60岁那年，小M的税后年薪，已经到达了152万左右。<br>用一个简单的excel表格，可以算出，小M从25岁到60岁，总共可以赚到1615万元。啊，简直是一笔巨款啊！！！<br>好了，现在让我们来算算小M同学一生要花多少钱呢？上海市民的平均寿命是81岁，女性会更高一些，为了计算简便，就算是80岁吧。<br>（先声明一下，为了计算简单，都取平均数，例如小M现在房租1000元，但是随着她收入提高，她会租2000元的房子，所以大概平均是1500，而且这些都是推测的数字，你可以根据你自己的情况来算）<br>1、房租：假设她现在租房每个月要花1500元，但是30岁的时候，她结婚买房了，所以25岁到30岁，房租的支出是9万元<br>2、吃饭：每月吃饭的支出，大约是600元（不包括朋友聚餐），这样从25岁到80岁，吃饭的总共支出是39.6万元。<br>3、朋友聚餐：外出吃饭其实还蛮贵的，假设也是每个月600元，这样，外出就餐的支出，也是39.6万元。<br>4、买车：假设小M一生中拥有3辆车，每辆车开个10年，那已经很厉害了吧。从30岁到60岁开车，60岁以后也不用开车了。刚开始的时候买个10万左右的，然后换了辆20万的，然后换个40万的，总共的车价是70万，跟先生一起负担，所以小M需负担35万。<br>5、车辆维护费：开车要加油，要停车费，要买保险，要洗车和保养。平均每个月1500元是没少的，这30年，车辆维护费总共要花54万。小M负担27万。<br>6、从25岁到30岁，以及60岁到80岁，这段时间里，小M没有车，所以要计算交通费，每个月交通费200元吧。 交通费是6万元（这可不能跟老公分担啊）<br>7、衣服鞋子包包：年轻的时候，衣服鞋子上花钱肯定比较多，年纪大了，可能比较少。不过平均下来，每个月花1000也不算太多，这样的话，从25岁到80岁，是66万。<br>8、终于到了30岁，小M找到了心目中的白马王子，她幻想要举行一场浪漫的婚礼，到马尔代夫去拍婚纱照。酒席+婚纱照+婚纱+婚庆公司+喜糖+借车，大概30万吧，小M要负担15万。<br>9、婚后很甜蜜，所以小M跟老公决定每年出门旅行一次，2年在国内，每次平均一个人花2500元，每3年去一次国外，平均一个人花1.5万，那么从30岁到80岁，外出旅行的花费大概是33万。周末呢，两个人会去看场电影，看个话剧什么的。平均每个月每人花费400元，等于24万。加起来是47万。<br>10、还有，小M和先生的父母也都老了，从小M40岁开始，每个月要给父母1500元的生活费，到60岁。这笔支出是36万<br>算到现在还花得不算多吧，别着急，大头开始来了<br>11、买房：到了30岁，小M结婚了，房子需要多少钱呢？少算一点，现在100平米，比较郊区的房子，大概是400万吧。假设小M没有足够的钱付首付（她月光麽），贷款10年的话，实际大概要用掉600万。如果是贷20年的话，实际要用掉800万。假设小M找的先生条件跟她差不多，所以我会把费用除以2，因此小M实际要负担400万的房款。<br>到了45岁的时候，因为孩子也长大了，这时候小M打算要换套大一点的房子，大概是150平米。假设还是之前的房价，那么就是要多付400万，小M要负担200万，所以总共是600万元。<br>12、装修：两次房子的装修，连家具和电器什么的，总共用了100万。<br>13、医疗：小M一生总算没有生太重的病，不过年纪大了，一些病痛 是不可避免的。加上生孩子也需要住院。所以总共支出100万应该不算太离谱的。<br>14、小M在31岁的时候生了一个宝宝，从宝宝出生到大学毕业，总共需要的教育费用大概60万（还不能上太多才艺班），小孩的服装和食物支出，每月算600元，到22岁成人，大概16万。还有小孩子也会生病，也要买玩具，每年过生日还要庆祝一下，总共算100万吧。<br>我写得有点累了，算到现在，大概用了1230万元。不过其实还有很多没有算的，例如人情往来啊，父母的养老送终啊，小孩子的出国费用啊等等等等。<br>看上去一辈子赚1615万元，才花了1230万元，还是挺不错的吧。且慢，你忘记了通货膨胀这件事，也就是说，你的1615 ，在你后来花的时候，实际上是没有1615万元的，那实际是多少呢？<br>还记得你的工资是每年涨10%的吧？现在国内的通胀大约是6% （我没告诉你这是名义通胀，实际通胀要高得多），也就是说，按照实际购买力的话，你的钱每年只增长了4%。 现在我们再来算算你一生可以赚多少钱。<br>把你每年的工作增长系数改为每年增长4%的话，你一辈子赚到的钱，实际购买力只有420万元，而你需要花费1230万元！！！<br>月光族，醒醒吧！！！就算你工资持续增长，就算你只过小康的水平，你一辈子的钱也是不够花的！<br>ps：有些人觉得我的设定不合理，例如觉得房子太贵了。<br>房子就算买200万，也改变不了最后的结论啊。大家当然可以根据自己的情况来设定。另外，有人说没有算物价通胀，实际上，工资折价成“实际购买力”，已经把通胀因素考虑进去了。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晨读/晨读12</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB12/</url>
    <content><![CDATA[<p>深圳两房一车，面临失业，中年财务危机引发家庭悲剧</p>
<p>中产，你要的太多，其实没那么坚强<br>对子女近乎偏激的爱、过高的期待，不仅影响了年轻一代看待自身婚姻和家庭的方式，也加剧了父母辈对待子女的成长、求学、离家、结婚、生子的焦虑。虽然看起来，中产阶级的生活什么都不缺，却在面对日常生活的起起伏伏时，脆弱得不堪一击。虽然依靠自己的打拼，赢得了这一代生活的逆转，却难以将信心延续到下一代。只敢认认真真地生活，靠消耗健康和精力卖命工作，却不敢独自面对自己的内心。表面上优雅风光，其实早已心力交瘁。<br>观察君整理一份目前网上热传的一份帖子，我们一起来探讨一下中产阶级的这种焦虑症究竟从何而来？身负重任的他们，又如何和自身的困境共处呢？<br>我那么努力有两套房却不得不离职，到底哪里出了问题<br>我2001年本科毕业，工作两年后上的研究生，然后到深圳某知名通信公司，到现在将近十年。老婆和我都是农村出身，家里没钱支持，2010年辛辛苦苦攒点钱在坂田买了套二手房，当时大概是120万，每个月房贷6000元。2011年生了个儿子。<br>2016年政策放开，响应国家号召，又生个女儿，因为我要经常出差，还在国外研究所待过两年，家里父母孩子没人照顾，老婆不得不辞职照顾家里。<br>2015年底深圳房价大涨，手里正好有小几十万余款，考虑孩子以后要上学，大家也认为房价有国家托着，只会涨不会跌，又在关内买了套五六十平米学位房，总价300多万。首付不够，第一套房找人抵押弄了70万，凑在一起付了首付，贷款260万，月供17000。70万的抵押贷一个月也要七八千。<br>全家就我一个人在挣钱，拿到手的工资钱两万多，不包括奖金和分红，因为两套房贷加上抵押贷就三万了，奖金就用来补贴家用，日子过得紧巴巴。但想到自己深圳有两套房，心里也会安慰很多。一般分红大部分用来购买股票了，现在持有十,几万股票。<br>前段时间公司要安排出国，当时考虑家庭条件去不了，后来HR就找我谈话希望主动离职，看现在的样子不离也很难，公司总有理由让你离职，不行打个C就末尾淘汰了。<br>与其闹来闹去的离职，不如舒舒服服的好聚好散，而且至今也没发现谁闹着就不被离职的。其实我绩效还不错的，也得过多次A，因为我深知，农村出来的孩子，不努力就更没出路，我能走到今天，是公司给我们创造的机会。<br>最近也在网上投过简历，我们这三十大几年纪，一般出去做不了高管，企业也不要，面试机会也很少，少数小公司面试过，基本月薪也是税前不到两万，税后房贷都不够，有的还看不上我。<br>我们在大公司，自我感觉水平不错，视野开阔，但和人家一交流，明显有很大不同，人家小公司我们这年龄的，即使不是高管，基本产品从前到后啥都懂，软硬件，结构啥都能做，我们则只能做自己擅长一段，真正让我们做出产品需要很多配置协助，小公司也养不起我们这样复杂的玩法。<br>目前看只能把学位房卖掉了，但眼下比较麻烦的事情，现在深圳二手房交易十分低迷，学位房也不好卖，急着卖的话350万可能只能卖300万，还了贷款杂七杂八的刚好没有了。<br>最后就十几万股票离职可以换几十万，离职补偿已经在前年兑现了。这几十万只能凑活偿还一套房的抵押贷款。就算把学位房300万卖掉，幸运地找个税前两万税后一万多的工作，剩下6000的房贷，加上两个孩子上学，养家，完全入不敷出，何况税前两万的工作也不好找。现在每天下班回家，看到孩子和老婆都觉得愧疚，夜晚也辗转难眠。<br>今天这个局面也不怪公司，十年来在公司获得的收益已经超出社会平均水平很多，企业成本压力同样很大。我们农村出身，能在深圳生儿育女有房有家已经不错，当然还有个标志307。<br>这么多年来，我时时鞭策自己，从来不敢懈怠，能加班就加班，能早去就早去，领导一点不满，就紧张好多天，生怕丢了工作，可到头来还是不得不离职，入不敷出。那是哪里出了问题呢？是我不努力么，是企业给我的待遇不好么，还是房价带来太高生活成本？<br>他错在哪里？<br>家庭财务出问题的万能答案：买了负担不起的东西，上了输不起的赌桌。<br>二胎和让老婆辞职回家，都是这个家庭负担不起的奢侈品，然而他毫不犹豫地做了。<br>学区房更是一场输不起的赌局。如果首付的70万元全部是自己的积蓄，没有使用必然利率高期限短的贷款，这个家庭可能还有机会勉力维持。你看看个人房贷那点利息，除了买房没有其他机会享受这么低成本的资金。<br>根据他的描述，这70万高利率贷款会成为压垮这个家庭的稻草。想等房地产回暖也等不起了，急着出售学区房就必须在当前低迷的二手房市场中压低价格，他自己也知道“还了贷款杂七杂八的刚好没有了”。<br>中产阶层的财富焦虑：如果不买房，还能买什么？<br>中产阶级对财富增值对此也充满疑问。他们的可投资资产也许只有几万，或者10多万乃至上百万元。他们可能已经拥有一套仍在还贷的房产，或许还在为首付奋斗，他们身在北上广或者二线、三线城市，但困惑似乎是一样的：房子还能买吗？如果不买房子，手里的钱——不管是多是少，又该如何跑赢通胀，获得增值？<br>一种难言的焦虑感在不同市场、不同人群中蔓延。尤其是中产阶层，他（她）好像“病了”，得了财富焦虑症。<br>有钱却不富有:<br>中国中产阶级焦虑的根源到底是什么?<br>一个城市的白领，被人称作中产阶级，每天享受着让别人羡慕的生活，但是却时刻在担心。担心我今天所从事的工作，明天会不会被辞掉？今天身体很健康，明天会不会因为一场大病而致贫?今天的职位明天还有多少上升空间？今天疲于奔命，明天老人谁来赡养？一次大规模裁员，一场可能存在的降薪，股票的波动，税率的调整，甚至是住房公积金的调整，都能让我从睡梦中惊醒。<br>这就是中国中产阶级的生活，他们仿佛拥有着让人艳羡的生活，有着房子，车子，他们可能收入不少，但是大部分人都会在说钱不够用，这就是中国中产阶级的现状。<br>二、中国中产阶级焦虑的根源到底是什么？<br>中国的中产阶级表面上生活风光，工资不低，储蓄不错，但是如果仔细问他们，未来的潜在支出并不低，子女的教育，医疗的准备，养老金的储备，子女的结婚，个人职业生涯的培训，以及可能存在的大宗开支（如购车，房屋置换）等等。<br>这每一笔开支都不会低，有人测算过如果要在一般水平满足中产阶级未来的这些开支的话，那么一个过的压力不大的中产阶级家庭，在还完房贷、车贷等一系列贷款之后，必须要有现金存款在550-650万之间，而这个标准对于当今中国的中产阶级而言恐怕并不轻松。<br>但是，这些都是一些表象，那么问题的根源是什么呢？中国是世界上最大的发展中国家，我们的国家刚刚发展起来，对于我们而言所谓的公共社会福利尚未建立，在中国除了最基础的低保以外，大部分的日常支出都是需要家庭来自己承担的。<br>因此，刚刚富裕起来的中国人，经常会看到这样的现象，往往因为一场大病，或者其他什么意外就会轻易的返贫。而除了医疗之外，子女教育，子女结婚，养老储备也往往耗费了大量的金钱，这让中国的中产阶级们陷入了这样的一个情况，就是表面上生活不错，收入不低，但是翻来覆去依然为钱发愁，每天拼命工作，努力加班的原因是不敢停下，因为表面赚的不少，实际上存下的有限，满怀生活的梦想，其实却是社会的脆弱群体。<br>不敢去做风险类的投资，因为担心一旦市场出现风险波动，就会直接影响孩子的教育经费，可能的疾病储备。更不敢因为加班为了情怀而辞职，因为一旦收入不稳定房贷、车贷都会成为一分钱难倒英雄汉的陷阱。于是乎中国中产阶级仿佛走在平衡木上，过着独木桥，每天为了家庭，为了工作尽心尽力，却没法给自己降低一丝一毫的担忧，因为大部分中产阶级都只能用”别无选择“这四个字来形容自己。<br>对于中国而言，一个稳定的中产阶级群体是中国能否启动消费，稳定社会的关键，但是中国需要的不是现在这样的夹心阶层，而是在完善了社会保障之后，真正可以有钱有闲，享受生活，敢于消费的一群人，他们才是中国发展的脊梁与支柱。<br>二、背负高房贷，中年失业，这个深圳男子的财务悲剧为何引发热议？<br>对于主人公的境遇，有人同情“人到中年的不易”、有人感慨“高房价下人如蝼蚁”，也有人不乏居高临下的姿态，“弱肉强食的中国社会不相信眼泪。”<br>对于这件事，X博士是这么想的：<br>1.<br>主人公被炒后，立马陷入财务危机。从技术层面上看，他犯的致命错误，就是买了第二套学区房，还是借款凑成的首付。这第二套学区房直接带来的是每个月25000的利息（银行月供17000+抵押贷七八千）。被炒使得资金流完全截断，这多出来的25000利息立马成“无法承受之重”。学区房本来是一场输不起的赌局，可是他贸然入局了。<br>2.<br>从基本面来看，他输给了变化多端的市场和政策。由于国家迅速出手的房地产调控，和瞬间冷却的市场，他的二套房现在要是着急于出售的话，要比入手时低个好几十万。<br>可以想象，要是二套房能按溢价10%的价格卖出，他现在绝不会那么被动。一年前，接盘侠数不胜数，转卖可轻松获利数十万，可惜政策变了，市场变了。<br>3.<br>从个人层面看，他输给了自己。在大型通信公司，每年月收入大概五十万（工资+奖金+分红），十年的工龄，至少位居中层；然而，一旦到市场上另谋职位，却意外发现自己不被市场需要了，年薪五十万所要求的人才，完全不是他这一种。他才恍然大悟，过去十年是安安稳稳的十年，也是“温水煮青蛙”似的十年。<br>事实上，假如主人公有意识储备一些业内资源，那么离职后再一些中型甚至创业公司获得好职位的机会是很大的。所以说，一定要持续学习，要给自己留后路，在日常工作之外，时不时自问：“假如我现在离开了，我能做什么养活自己？”<br>4.<br>买二套房、生二孩，都是对财务要求极高的决策。谨慎评估自身财务状况后，才能做好决策。但主人公显然没意识到：他的现金流很紧凑，容不得有闪失。退一万步讲，他没有被炒，万一老父亲生了一场病得动手术，从天而降的区区几万元额外开支，就会让他够呛。<br>在财务评估上，宁可悲观，也不可过度乐观。<br>5.<br>主人公如此忧心忡忡，还有一个原因，就是他是家里唯一的经济来源。妻子当家庭主妇，他一旦失业，柴米油盐就没着落。<br>在高生活成本的城市，对中产之家来说，最好还是夫妻双方都有收入，就像小别离里面方圆和童文洁一样，就算方圆一度被医院辞退，做到企业中层管理的童文洁还可以独当一面，一家子不至于慌忙失措。<br>6.<br>高房价是中产头上一把刀。2016年深圳平均月工资是8141元，而现在深圳楼市均价少说要四五万，这座城市已经是全球房价收入比最高的城市，深圳的工薪阶层房价负担最重。<br>主人公在大型企业已有十年经验，被炒后要在市场上找到月薪两万以上的工作非常困难，形成对比的是，他仅一套五六十平方米的房子月供就得17000万。对工薪阶层来说，深圳的房价简直到了不人道的地步。<br>7.<br>我们身处在一个风险时代。作者今天的困境，可谓三重风险的叠加“个人能力风险+企业风险+国家政策风险+”，你的个人竞争力可能会被市场淘汰、收益下滑的企业可能要炒掉你、国家楼市政策可能要变，这些风险始终存在，但经常被麻木的惯性给忽略了，主人公显然忽略了种种风险。<br>风险时代，最安全的做法，就是做好最坏的打算。<br>8.<br>最后，X博士想提醒的是，在大机构工作，按部就班是常规，工作随便晃几下，几年就过去了。<br>像主人公那样埋头工作，很容易对外部世界的巨变视而不见，缺乏思考的结果，必定是陷入习以为常的路径依赖，直到有一天，你被狂风抛如一个陌生的世界，没有准备的你，顿然发现麻烦大了。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晨读/晨读13</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB13/</url>
    <content><![CDATA[<p>你是不是也经常说“等有时间再做”？</p>
<p>科科是写美食专栏的旅行达人，我们在一次旅途中相识，一见如故。之前我看过她的专栏，美食加旅行的标签，很容易让人觉得她活得特别悠闲。<br>深圳再见，我才知道她在一家著名的科技企业做策划总监，每天工作10小时以上。<br>“旅行与美食的时间从哪里来？”我问。<br> “挤。”她答得很干脆。<br>出于好奇，我打听她的作息表。她的午餐基本是在外面解决。<br>跟我们每天晚上搭配好第二天出门的衣服一样，她每天晚上用半个小时研究城中的餐厅资讯，决定第二天午餐吃什么。吃完饭又花十分钟做简单的测评记录。<br>小长假只要不加班，她都会去还没被开发或者过度开发的地方旅行。<br>至于出国旅行，属于年度豪华计划，她通常把年假与春节拼在一起。用大半年时间做攻略，每一间酒店，每一餐饭都不浪费，攻略细致到标注日出日落时间。<br>科科的旅行攻略做得好、线路新奇，去一个地方回来，可以写出好多篇文章。以至大家误解，以为她每天都在吃喝玩乐。<br>“就是因为工作太忙，才对吃喝玩乐保持极大的好奇心，愿意深研，十天的旅行，做300天的前戏。”<br>科科说，人对幸福的敏锐度，来源于饥渴感。她很享受现在的状态，因为很忙，才加倍努力地珍惜每一次美食与旅行的机会。<br>她形容自己与旅行、美食的关系是，“穷小子一年一次高潮，每一次都费尽心思。”<br>很多人喜欢将无法取悦自己、陪伴家人、做喜欢的事情，归因于没时间，但在现实生活中，我看到的那些懂生活、爱自己、耐心陪伴家人的人，反倒都是像科科这样的大忙人。<br>忙中偷出的闲，我们才愿意珍惜、经营，让它产生加倍的幸福感。如果单纯只有闲，时间流逝，想做的事情很容易今天推明天，明天推后天。<br>在读者分享会上，我总被问到一个问题，你那么忙，哪有时间陪伴家人、过有趣的生活？<br>我的答案也是忙中偷闲，并且想办法让空闲的时间，像烟花一样，照亮平淡乏味的生活。<br>因为陪孩子的时间不多，每一次陪伴，我都要求自己全心全意走进孩子的生活，与他们说天真烂漫的话，做幼稚可爱的事。<br>我身边有朋友，在事业上升期，为了陪伴孩子，全职回家了。但很快，我发现她根本没做到像辞职之前说的那样，陪孩子去旅行，给孩子读绘本，跟孩子一起画画、弹钢琴。<br>我去她家，经常发现她在追剧或者躺在床上玩手机，孩子一个人看动画片或者玩玩具。<br>我没有责怪这位朋友，相反，特别理解。<br>这就是人性。<br>当你有很多时间的时候，根本不可能再精打细算地珍惜你的时间；当你觉得随时都可以陪伴孩子与家人的时候，也不会挖空心思去想如何提高陪伴质量。<br>所以，如果有一件事，你很想去做，千万不要说“等我闲了再做”。这是无限拖延的借口。<br>在资讯如此发达的今天，任何一件事，你想做，就可以立刻开始。<br>忙中偷闲去做喜欢的事，不仅逼你学会管理时间，它带来的成就感，还能让你变得更加强大、自信。<br>不仅仅是休闲玩乐，忙中偷闲也能成大事。<br>日本作家村上春树的第一部获奖小说《且听风吟》就是忙中偷闲的结果。<br>我喜欢村上春树，不仅喜欢他的作品，更欣赏他的生活态度。<br>他大学没毕业就跟太太一起创业，借钱开了爵士乐酒吧。<br>好不容易还清这家店的欠款，房东却要收回店面。他们不得不搬到一个更大的地方，重起炉灶，又背了一身债。<br>开店期间，村上春树忙中偷闲地完成了早稻田大学的学位。一般人四年拿到的学位，他花了七年。<br>他形容自己开店那几年：除了天亮前的几个小时，几乎没有可以自由支配的时间。<br>然而，当想要写小说的时候，他当天下午就去买了笔和纸，每天深夜关店以后，写一会儿。不到5万字的中篇小说，村上春树写了半年。<br>在村上春树自传体散文集《我的职业是小说家》里，他写到：“不管工作多么繁忙，生活多么艰辛，读书和听音乐对我来说始终是极大的喜悦。唯独这份喜悦任谁都夺不走。”<br>每个人都是奇怪的。在悠闲中很容易将自己放纵为一事无成，甚至连快乐都没有了——不是真的不快乐，而是快乐来得太容易，对它的感觉就会迟钝。<br>反倒是那些忙中偷闲成就的事情，我们会永远记得，并且深深感到珍惜与自豪。<br>“等有时间再做”的真正含义是，闲得无聊再去做。<br>只有不重要的事情，才应该被摆在这样的位置。那些你喜欢的事、对你重要的事，无论多忙都可以抽时间去做。<br>时间最严苛无情，人生几十年，每分每秒都摆在那里，时间一到，Game over，连乔布斯这样的大神都逃不过；<br>时间又最宽容多情，有人的一生波澜壮阔、海阔天空，一辈子抵几辈子过，而有人，永远在没时间、没机会、没心情中任时光流逝。<br>如果你总以没时间为借口，时间就是你的敌人，如果你肯挤一挤，时间就是你的朋友。</p>
<p>最怕你不甘平庸，却又不去行动</p>
<p>❶<br>闺蜜和我聊天，说她最近几天非常焦虑，她都担心自己快抑郁了。<br>起因是她的一个好友下定决心要考研，并且向她汇报了自己的“决心”。闺蜜对照自己的生活，每天像个陀螺一样高速旋转，上班忙得晕头转向，下班做饭做家务，周六日还要陪孩子去上各种辅导班。她说早晨一睁眼就开始催促小朋友：快起床、快穿衣服、快洗脸刷牙、走快点、快写作业、写完快去睡觉……孩子在吼声中愈发慢吞吞，于是她就更着急。她说非常讨厌自己这种状态，也不知道什么时候才能“解放”出来做点儿自己喜欢的事情，总之很失落。<br>她还说起她认识的另一位妈妈，目前在清华读博，她非常羡慕她们为了自己喜欢的事情努力拼博的样子。<br>我其实非常理解这种状况，我的理解是，发现自己生活琐碎且平庸，非常不甘心，但是又不知道该怎么改变这种状况。<br>她还提到了一个细节，说每天经过公园的长椅，都想坐下来，看看风景，看看人，可转眼好几年过去了，她没有一次在长椅上坐下来过，因为每次都是急急忙忙，步履匆匆。<br>这让我记起以前看过的一部韩剧中的一个片段，女主人公是个警察，她巡逻的片区有一座大桥，桥这头归她管，桥那头是别人的辖区，她经常在巡逻时，将车开到桥头，然后想桥那边是会什么样子，有机会去看看吧。然而好几年过去了，她却一次也没跨过那座桥，这让她非常沮丧。<br>也许，桥那头和桥这头并没什么不同，不过也是寻常街道，风尘仆仆的人群。可是，既然那么想去看看，为什么不去呢？把车再往前开一点儿，不就过去了了吗？就像我的闺蜜，既然那么想在长椅上坐一坐，那么不管有多么重要的事，多么了不起的事，都暂时放下来，去坐一坐就好啦，正像她自己憧憬的那样，看树、看花、看人，哪怕什么不看，闭目养神一下也好，那就去做啊！<br>❷<br>其实我非常理解闺蜜的焦虑，据我所知，很多年轻妈妈也是这样的。<br>孩子小，生活压力又大，每天被琐碎的家务淹没，偶尔夜深人静，有个声音会拷问你：难道这辈子就这样了吗？难道人生再也没有其他可能了吗？好像一眼能将自己的人生望到头似的，再无转折，再无惊喜。<br>不甘心归不甘心，却似乎完全没有改变这种状态，尤其是，孩子小，无人帮忙的情况下。谁不想提升一下自己，去做自己喜欢的事情，但是，时间呢？不但没时间，还每天特别赶。你不赶小朋友就有可能迟到，你不赶，放学后小朋友可能就被独自留在学校。<br>同为妈妈，同为年过而立的“大龄女青年”，其实我也经常焦虑，我的焦虑源于很多时候我想写东西，却总是被打断，而且还有各种各样的事情等着我去做。有时候我也会产生自暴自弃的想法，不写东西就不用这么烦恼了吧。像其他我认识的妈妈一样，每天在朋友圈秀美食、秀绿植、秀和小朋友一起做的手工，看上去非常怡然。可是讲真，我真的无法忍受自己成为一个地道的“家庭主妇”，不是说做家庭主妇不好，而是我不喜欢。<br>问题是，我认识的很多作家，比我还忙比我还写的还多，书出了一本又一本，但人家交友、旅行、阅读，样样不耽误。于是就愈加焦虑，眼睁睁看着人家在天空中自由自在地翱翔，我拼命挣扎却一直在地上爬。<br>是不是学会了认命，甘于现状，就能开心一点儿呢？我也经常这样反思，恨不得哪里跳出个高人指点一下我的人生。<br>❸<br>昨天我的大学好友发了个朋友圈，我这才知道她一直在学古筝。<br>她上大学时就想学古筝，她说那时没钱，后来不差这笔钱了，又没时间了。但是，她真的是太想学了，而且学古筝这么简单的心愿，竟拖了十年之久，她郁闷的都开始怀疑人生了。于是不管不顾，硬着头皮报了名。当然学起来并不顺利，毕竟孩子小，老公工作又忙，她说好几次想过放弃，于是拼命鼓励自己，明明那么喜欢，一定要坚持啊。然后不知不觉中，竟学了一年多，她自己回望这段日子也蛮惊讶。<br>她说她倒不是要成为古筝表演家，只是喜欢，仅此而已，去学古筝这件事，对她最大的改变是，让她知道了，原来生活还可以有另一种可能。<br>讲真，这件事对我触动蛮大的。<br>它至少证明，当你执拗地将某件事情列入你的计划，放在比较重要的位置，你就有时间去学去做了。最怕的是，你一直想，却一直没有开始做。<br>我还有个同事，雷打不动每周去上两节日语课。她是这么向我传授经验的，千万不要自学，很容易三分钟热度，一定要报班，报班后你会发现班里有各种各样的人，很多人比你还要忙碌压力比你还大，却一直坚持梦想。大家互相鼓励，容易坚持下来。<br>所以，一旦开始，就不要停下来，怕就怕，你明明不甘于平庸，又不去行动，不肯改变。<br>昨天看了一篇乐嘉采访作家六六的文章。乐嘉问六六：明年你中欧毕业了做什么？<br>六六答：去美国学一年英语。<br>他诧异地问六六：你英语这么好了为什么还要学？<br>六六是这么答的：我离英语好还有很大的距离，顶多是对话没问题，涉及到灵魂与思想的沟通就显得很没有被教化。我对好几本英语原版的著作很有兴趣，可对它们的中译文本很不满意，我想学习后自己翻译。<br>乐嘉又问六六：那学完英语你做什么？<br>六六说：我想报一个心理学的博士专业。我觉得这门技艺对我写作很有帮助，也更能理性分析现象背后的成因。<br>乐嘉惊叹：你怎么有这么大动力？我认识你的这几年，你每天都在学习！你到底想干嘛？！<br>六六是这样讲的：我想在自己年老的时候，依旧能感受生命之美。<br>真敬佩这样的女人，有明确的目标，又有行动的能力。当你一直为梦想拼博努力的时候，哪有时间去焦虑呢？<br>❹<br>前段日子看台湾学者齐邦嫒的自传《巨流河》，有件事情印象极深。她结婚没多久就怀孕了，四年内生了三个孩子，还个顶个是淘小子。她回忆第一个孩子刚出生时，屋里又暗又黑，她害怕在房子里待着，一个人抱着孩子在大门口等老公回家，远远地看着路灯下老公的身影，简直是喜极而泣。那种孤独无助，很多初为人母的女人应当都体验过。<br>四年三个孩子，比咱们中大多数人的境况，只会更糟糕吧。最初她也是在家做全职妈妈，可是经常懊恼，难道生活中除了尿布和柴米油盐，就再也没有其他亮色了吗？后来有位好友要她帮忙代课，她非常开心地接受了，能从奶瓶、煤炉、尿布中偷得几个小时，重谈自己珍爱的知识，她感觉非常幸福。她每次去上课，就请妈妈过来帮看几个小时的孩子，每晚孩子们全部入睡后，才得空备课、刻卷子，可依然觉得很踏实。后来为了自己的学术理想，她不断进修，做交换生，出国深造，哪一步不是咬牙硬挺过去的？<br>她讲在外求学时，没日没夜地赶了三篇报告，参加了一次考试后，回到宿舍立即倒头大睡，昏天黑地睡到午夜醒来，窗外竟是皓月当空，她说背负着离开家庭的罪恶感，在异国校园的一隅斗室，真不知如何在红尘中自适，起身写了一封信给父母亲，叙此悲情，信投出去以后，坐在早地俯首哭泣良久。不用问，肯定是想念孩子吧，想着不能在家好好陪孩子，肯定心情很难过。<br>没错，很多时候，坚持小小的梦想，真的是很难很难的，那种辛酸难忍，只有自己明白。可是很多年过去后，回望这段岁月，你心中只有娴静从容，很美好，很幸福。<br>你可能会反驳，她出国深造，至少要有人帮她看小孩吧，我也想去学古筝想去学画画，可我真的是丢不开手。<br>是的，没人帮你看小孩儿，听上去是个无可辩驳的理由。那么，为什么不请一个人帮你看呢，不用请住家保姆，真要那么想做，请一个阿姨帮你看几个小时好不好，所费又能有多少呢？很多人无法解放自己，不是丢不开手，是完全不肯丢开手！！！<br>我记得看美国老剧《成长的烦恼》时，Seaver夫妇有时需要双双出去，就找一个钟点工帮看一会儿孩子。那是90年代的剧啊，可为什么时至2016年，很多人的观念，还比不上人家90年代的观念进步？说到底，还是被老观念绑住了手脚。我朋友请的钟点阿姨负责帮她接小孩儿放学，她说阿姨人特别好，非常有职业素养，我就不信，这样的好阿姨，她能遇到，你遇不到？<br>所有，心中有什么未竟的梦想，勇敢地去追逐吧，别让它一直搁浅，直到成了你心中的伤，更何况，你我这种普通人的梦想，不是成为一代大家，不是成为学术名流，我们只是想每周抽时间学上一两节插花，或者弹几小时古筝，如此卑微如此简单，就算再忙碌，这个时间应当也会可以抽出来吧？<br>如果你习惯了像陀螺一样旋转，那么，停下抽打自己的鞭子，告诉你的家人，尤其是你老公，你希望得到他的支持，你需要每周有一点点时间，做一些你喜欢的事情。如果他爱你，肯定会支持你的。所以，关键的问题还是你自己，你必须果断地迈出那一步，勇敢地行动起来。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晨读/晨读14</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB14/</url>
    <content><![CDATA[<p>130个真实故事：理财，让我失去了很多……</p>
<p>你好，我是帽帽。</p>
<p>前两天，看到一条很有意思的段子：</p>
<p>钱是个好东西，这个咱不用怀疑。<br>不过说到底，自己挣才有底气。<br>之前525帽帽做了一期征集——理财之后，我和身边人的关系发生了怎样的变化？</p>
<p>结果，在收到的130多个真实故事里，帽帽发现，大家学过理财之后，“失去”的东西，还真是不少——</p>
<p>有的小情侣，开始做财务计划，失去了对钱的焦虑，得到了共同奋斗的快乐；</p>
<p>有的小伙伴，用真实收益让同事刮目相看，失去了被忽略的落寞，得到了众星捧月的同事关系；</p>
<p>有的小仙女，把家庭财务打理得井井有条，失去了婆婆的唠叨，得到了愉快的家庭氛围……</p>
<p>边看，我边直直感叹——居然还有这种操作？！</p>
<p>因为小伙伴们写得太好，本来说只送10份礼物的；结果帽帽纠结来纠结去，实在舍不得，掐指一算，我今年27岁，就送27份礼物吧！（嗯，但愿帽帽送大家礼物能送到100岁！）</p>
<p>由于篇幅有限，只展示了10位小伙伴的故事，其他中奖名单下拉到屏幕底部，可以直接查看~</p>
<p>当然，小伙伴们有（qi）趣（pa）的故事，也绝对不容错过哦！（出于排版限制，内容有删改，请见谅！）</p>
<p>001<br>@龙字<br>老妈是十几年的老股民，之前看她看股票觉得是一件十分危险的事儿，不是太理解她。</p>
<p>学习理财之后，我现在最大的乐趣就是和老妈谈论股票基金理财；母女之间有了共同话题。年近六十的老妈跟我说，她也要学习价值投资，每周四跟着我买国债逆回购。</p>
<p>作为家里的独生子女，一直都是爸妈给安排生活，始终是个小孩子一样保护起来；但是现在老妈看到我学理财之后，科学配置资产、自己研究制定理财计划，她对我放心了许多，觉得我有了自己的想法，正在努力变得更强大。</p>
<p>帽式口亨：你是妈妈的镀金小棉袄，快和我一起变得更优秀！！（帽帽没有膨胀）</p>
<p>002<br>@Kim<br>我的工作其实就是普通上班族，在洛阳，工资很低，男朋友是健身教练，每个月至少1w。</p>
<p>之前我真的觉得很没脸，因为有时候工资连他的零头都不到，爸妈还很担心我养不活我自己；</p>
<p>其实他们不用担心，刚开始，我确实养不活：实习期1800的工资还要压两个月，老板让去应酬喝酒，说我过敏是因为身体缺酒，我也不敢拒绝。</p>
<p>学理财之后，我对老板说：我不要跟你喝酒，拒绝。<br>感觉他当时都傻眼了哈哈哈哈哈哈哈，但是超级爽啊！</p>
<p>因为私企，没人敢拒绝老板，我大概是90后的第一个了，不过无所谓啊，我现在上班的工资都已经算是零花钱了，有没有不耽误我的生存。</p>
<p>帽式口亨：理财后底气足了，想把老板开掉也不是不可以的嘛（帽帽举报，这个小伙伴是我们小白训练营的班主任！）</p>
<p>003<br>@芳香四溢，平心静气<br>我学理财是悄咪咪报名的。</p>
<p>刚开始，家里人觉得我整天抱着手机听啊看啊，怕我被骗了各种劝阻。后来我用学到的知识帮公婆分析了他们的保单，还帮他们配齐了需要的险种，当然是水湄姐和百合姐推荐的低价高额组合啦！</p>
<p>婆婆成了第一个支持我的人，现在一有时间就会给我发微信，让我好好学，婆媳之间的话题多了，关系也变得更好了。</p>
<p>帽式口亨：原来理财还可以解决婆媳问题，新思路！</p>
<p>004<br>@mihulmao<br>同事大姐：来，帮我瞅瞅这个基金是不是该卖啦？（以前是：小杜，帮我网购个虾仁吧！）</p>
<p>我的猫咪：喵呜～最近伙食不错，每天都有罐罐吃！（以前是：嗷呜<del>主人，伦家想吃小鱼干</del>）</p>
<p>帽式口亨：本子是看在给猫猫的面子上给哒~P.S.你真觉得你是猫咪的主人？</p>
<p>005<br>@小西<br>学理财之后，很多平时只是点赞之交的师兄师姐，开始约饭会艾特我了，朋友圈互动的也多了。</p>
<p>我认识了好多人，最主要的是在股票初级班认识了一个助教，聊的很好，然后面基，然后~5.20成为了男女朋友……</p>
<p>帽式口亨：厉害了！学个理财把我们助教小哥哥也给骗走了（为啥帽帽还是单身？所以我是个“废物”？）</p>
<p>006<br>@芸爱<br>学理财之后，考虑换工作，面试一家金融机构。</p>
<p>面试的时候，对方问一些基金门槛内的东西，我都一一回答出来，而且还反问了面试官和复试官几个问题，结果——</p>
<p>他们惊呆了！我被破格录用了呢！</p>
<p>太兴奋了！其实这都源于长投的课堂，真的收益匪浅！身边最多的就是炒股的朋友，我相信等我学完股票课，一定会让他们刮目相看！</p>
<p>到时候问我最多的肯定是：“请收下我的膝盖吧！”祝每个人早日达成财务自由！</p>
<p>帽式口亨：优秀呀，还有多少人是因为学习了理财换了赛道找到新工作的？还有谁？说出来，让俺们开心开心！</p>
<p>007<br>@刘思兰<br>学理财之后，跟家里人的关系倒没有发生很大的变化。</p>
<p>不过，在平时经常聊天的宝妈群里有了一定的威信，很多宝妈想给孩子买保险，我就利用自己在长投学的保险知识给她们解答，她们都觉得我说得挺有道理的，跟一些保险人员推荐产品时说的不一样，所以后来很多宝妈想买保险的时候都来私信我，让我帮忙参考一下。瞬间觉得自己还挺牛的。哈哈哈ヾﾉ≧∀≦)o</p>
<p>帽式口亨：变成了群里的KOL，可把你牛坏了，来，让你先插会儿腰。</p>
<p>008<br>@糖豆<br>在长投，学了保险课之后，加速了我买保险的速度。</p>
<p>下周一，是我预约做手术的日子，有了保险就不担心钱的问题了。<br>于是乎，出了院回来我还要继续学习股票课！</p>
<p>最后，感谢碰到了长投！祝长投越来越好！</p>
<p>帽式口亨：生病还不忘学习的好同志，不怕，你一定会早日康复的~来，抱抱！</p>
<p>009<br>@小岳<br>没学理财之前，每次团队聚会，我总是一个人默默地在角落里玩手机，而同事们在讨论哪支股票涨了，我完全插不上话。</p>
<p>学习理财后，我也开始参与其中，有时还会提一些中肯的建议，有同事受益后，直夸我深藏不露！可把我高兴坏了！</p>
<p>我和同事的共同话题越来越多，关系也越来越融洽。<br>股票，没有想象得那么难。</p>
<p>我的思维发生改变了，自信心也增加了，想做的事都敢勇于尝试了！</p>
<p>帽式口亨：有的时候想象中的困难要比正在发生的要难的多，不要怕，就是干！！（对不起，又暴露了粗鲁的帽帽）</p>
<p>010<br>@黎小雨<br>因为学理财，我在闺蜜中发现了一位志同道合、且正在闷声发大财的主儿。我俩即刻像回到少女时代，每周约面卧谈会，表面上是让俩娃在一块玩，实则全是谈理财。</p>
<p>通过她，我又认识了一位理财规划师朋友，面谈时一聊，居然是长！投！师！兄！我滴个天！又偶然一天在朋友圈留言发现，我的一位老友居然跟他也是朋友！还算半个同事！世界真奇妙啊！我跟长投还真是冥冥中注定的缘分！</p>
<p>再翻看微信聊天记录，我的那群全职妈妈们都不知道哪里去了！</p>
<p>原来学理财不仅是帮助你提升家庭金钱，更是带领你往更积极的人生奔去。因为有动力，所以更努力。</p>
<p>帽式口亨：世界真的很小！！！</p>
<p>其他中奖名单</p>
<p>最后，看了大家的故事，你还有什么更精彩的故事嘛？可以在评论区分享你的故事哦~</p>
<p>只要你的理财逆袭故事够燃、够励志、够独特，都可以参与投稿。我们后续还会有采编同学对你进行深度访谈，成稿发布后每篇稿费100～1000元不等（按故事的精彩程度给付）。</p>
<p>如果你的故事特别触动人心，你还会被选为院生大使；你的故事将用作长投对外品牌宣传以及推广之用，还会有更多惊喜的奖励等着你！<br>投稿邮箱：<br><a href="mailto:187348121@qq.com">187348121@qq.com</a><br>愿意接受采访可以附上个人QQ或微信，会有小助手后续加你哒！ </p>
<p>鱼三🐟💓<br>上学期上了小白训练营，学了基金课，学会了强制储蓄，养鹅和开源节流，也改变了思维，特别是知识付费这个观点，好在上学期的强制储蓄和开源节流，这个学期用自己的储蓄报了英语暑假班小千的报名费后也没有之前的生活窘迫了，没有向爸妈开口要钱报学习班，而是自己做自己想做的事，储蓄真的能给自己有很多底气，从从容容。大一上学期最大的幸运就是遇见长投了，然后现在又遇上了喜欢的英语平台，思维与实践行动是在长投学到的，好好理财，好好生活，规划未来精彩的人生。好幸运的我遇见 长投</p>
<p>Po<br>学了理财后，够底气把男友的钱借来赚些小钱，一开始他总担心我会被骗，然后只要求我不赔本金就可以了。现在是以后我的钱都交给你拿去理财吧</p>
<p>《消愁》<br>实现财富自由从长投开始。在药店实习了半年然后与长投邂逅，加入小白训练营，购买基金课保险课股票初级课，现在实习结束，而我的理财之路才刚刚开始。昨天在帮一位阿姨捡中药的时候和她聊了很多，她说你已经开始起步了就很好，她说她以前也学医但是发现赚的钱不比别人的多，所以开始慢慢做外汇，做海外基金，告诉我去年她赚了多少，还说没钱就想着怎么去赚钱，不要把自己绑在这里。到了一个地方要了解那里的政策 医疗等等，告诉我信息是第一生产力了，我得感谢长投，我想要是我没加入长投，阿姨也不会和我分享那么多。</p>
<p>飞飞<br>我因为学习理财，被现在的男友认可，那是真心的认可啊，他大我15啊！！！而且他的同学们也都很认可我，都是我们这里各个行业领域的优秀大叔啊！！ 现在我也是自己闺密圈子里的小意见领袖，不管是买房买保险等花钱存钱问题基本都来听听我的看法，虽然我还差的很远得继续学习，可收获远远＞付出！ 更何况，从学了长投，我学着理财买房，现在也是婚前有两套小房子的女生，还有很多人羡慕我男友啊！！！</p>
<p>冢小葵<br>其实我也准备朝着金融发展，，激动的不得了，暑假学习完我就会去面试，而且已经选好了一家金融机构。可以多挑选几家做为备用，我爱理财，财会爱我！</p>
<p>学习理财之后，我戒掉了一个坏毛病，那就是“六合彩”，自从学习基金以后，每次开六合彩开奖的日子我就默默的往我的基金和股票里投资，现在我的鹅一天比一天大了，长投真的改变了我，感谢长投，感谢班班和学姐</p>
<p>小精灵<br>加入长投以后，真的有了很多变化，有底气了，办事说话都变了风格，感谢长投，让我变成更好的自己。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晨读/晨读15</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB15/</url>
    <content><![CDATA[<p>用这些方法去学习，真的爽爆了！</p>
<p>我们热爱学习，也希望自己能够学得有效果，学得有收获，学得效率更高。学习当然追求效果，说“我就是喜欢学习，效果怎样无所谓”是一种很傻逼的行为。<br>其实，只要掌握6个技巧，你的学习效率和效果就会马上得到明显的提升！<br>下面，我们正式开始。首先来看看学习的常见问题和误区：<br>问题：<br>      1、知道学习重要，但就是抗拒学习<br>2、已经不抗拒学习，但很难定下心来学习<br>3、能定下心来学习，但坚持不下去<br>4、能坚持下去，但效果不明显</p>
<p>误区：<br>1、时间越长越好</p>
<p>人的专注度是有时间限制的，人的身体是会疲劳的。保持充足的精力和专注度，比拼时间的疲劳学习效果更好。<br>一般一次学习最好30-40分钟左右，长了效率就会降低。所以最好在这中间留足够多的休息时间。<br>与其拼时间，不如拼专注度，也就是所谓的“沉浸式学习法”。学习的时候，能够马上全副身心沉浸进去，忘掉一切。</p>
<p>2、书看的越多越好<br>很多人什么都想学，所谓的兴趣广泛，其实都是三分钟热度，结果什么都没学好。<br>好的学习，要兼顾广度和深度，但肯定以深度为主。<br>但这个广度，绝对不是说没有规划的广度，这个也看一下，那个也看一下。<br>解决方法：选择1-2条主线，以主线为依据，根据知识的依赖结构，金字塔关系，去适当扩展广度。</p>
<p>路线1：专业、工作<br>路线2：兴趣点（1个即可）</p>
<p>什么叫知识的依存关系？<br>比如你想做好PPT，你可能还要懂点设计、演讲、写作，那么后面的3个就是前者的依存知识。你想成为PPT高手，只学PPT是不行的，后面的知识肯定也要涉猎。<br>在制定学习计划之前，肯定要根据自己实际情况，梳理清楚主线和依存，才能制定出好的计划。<br>此外贪多嚼不烂，不要学网络上很多人分享的，1天读一本书。这样的读法，除了增加你吹牛逼的资本之外，其实真正的好处不多。<br>因为每个人的阅读速度，吸收能力也不一样，有些人学起来就是快。你别跟人家比，做好自己的事情。</p>
<p>3、不愿意花钱学习<br>很多人热衷于收藏文章，收藏电子书和各类学习视频资料，收藏给他们很大的成就感，但收藏了和你学习了完全是两码事。真实情况是收藏的文章基本不看，存在电脑的资料也基本不学习。<br>此外，很多人都热衷于寻找免费资源，对付费课程，付费培训不屑一顾，觉得都是骗钱的。<br>其实付费往往是学习最快的捷径。互联网上，最优质的内容基本都是付费的。一方面是它们有资格要求付费，另一方面，也只有有费用的支持，才能鼓励牛人去做出更优质的内容。<br>找到这些优质的内容，花很少的钱，能听到牛人给你分享经验方法，解读教材，实际上效率是非常高的。因为人家讲1个小时，但可能是过去1年的总结。你自己从零开始，不知道要花多少时间才能达到同样的程度。<br>此外，牛人也会根据自己的实践，推荐最好的教材和学习方法给你。你自己经常都找不到这些东西，反而浪费了很多时间。要知道，时间比金钱还要宝贵。<br>4、以为意志力是关键<br>很多人学习坚持不下去，以为是因为自己意志力非常薄弱。从而慢慢自暴自弃，自卑，但这其实是个非常大的误区。<br>其实很多人能坚持下去，不一定是意志力很强。是因为懂得了把学习养成习惯。</p>
<p>不要尝试在短时间内提高自己的意志力，改变自己。我们应该都有这样的经验，人想要改变自己其实是非常非常困难的。如果等你意志力很强了，估计黄花菜都凉了。<br>所以人要首先学会接受自己，然后通过一些别的途径去改变三分钟热度的情况。<br>一个是养成习惯，一个是奖励体系，这个下面也会详细说。<br>5、太过看重智商<br>学不好，觉得自己智商低，从而自卑，再而放弃学习，这也是很常见的一个误区。<br>只要你不是特别笨，掌握适当学习方法后，保证足够的学习效果是没问题的。而且，坚持比智商更重要。</p>
<p>6、太讲究碎片化学习<br>碎片化是现在非常热的一个词语。好像什么问题都可以通过碎片化学习解决。<br>我要唱一下反调：我认为碎片化是天然不适合学习的，真正有效果，必须深度学习，但要深度学习，必须有整段的，足够长的时间。</p>
<p>但这并不是说碎片化时间不重要，实际上非常重要。关键是碎片化和整段时间之间，我们要做好分工。<br>碎片化时间，适合速读、信息的搜集和整理，也就是偏重”发现“的方向。<br>比如你看到一篇文章很好，速读一次。收藏好。然后用整段的时间去精读，消化它。<br>又比如你看一个大咖的博客，把他推荐的书都一一记录下来。然后购买，整段时间去消化它。<br>二、六个实践的技巧<br>1、奖励体系<br>人要懂得奖励自己，特别是学习和工作这些事情，更要大奖特奖。<br>如何建立挂钩呢？就是先控制压抑自己的欲望，比如想买什么、想旅游，想看电影，下馆子等。制定严苛的标准。<br>第二步，将这些想要的东西和自己的学习投入的时间、成果挂钩起来。<br>举个例子：<br>学习累积100小时，看一场电影。学习达到怎样的效果（比如发表文章啊、编出软件啊），奖励一部很想买的笔记本电脑。</p>
<p>同时，学习一定要能提高自己的收入。一切不能提高收入的学习都是耍流氓。<br>这也是投资自己的一种形式。<br>2、优质教材<br>每个方面的知识，都能找到特别多辅导材料。要学就学最好的。<br>通过以下工具：<br>      a、豆瓣<br>b、京东等电商评论<br>c、牛人推荐<br>d、网友推荐</p>
<p>正确的寻找资料顺序：<br>     a、寻找牛人、大咖、红人（这个领域的），比如微信，百度、去搜索<br>b、看看它们推荐怎么学习，推荐哪些书、哪些资料<br>c、去豆瓣、京东看购买者评论<br>d、整理出自己需要的资料</p>
<p>好的资料，能大大提高你的学习效率。</p>
<p>3、沉浸式学习<br>提高效率最好的方法就是沉浸式学习。<br>      a、状态不好不如休息，绝对不学习<br>b、注重当下一刻，给自己选择：比如接下来40分钟，我要么学习要么玩。如果选择了学习，就好好学下去。切忌来回切换。<br>c、时间周期：以30-40分钟为一个时间周期，每次订一个闹钟。周期结束马上休息。闹钟开始马上学习。<br>d、隔绝干扰：关闭手机等一切干扰因素。<br>e、一次只做一件事情，不要在两三个主题之间频繁切换<br>f、切除烦心事情（用软件辅助，把焦虑的事情、短期记忆的事情交给软件，学习是件长期记忆的事情）</p>
<p>4、规律性学习<br>每天尽量保证在固定的时间段学习。比如晚上9点到11点，只要坚持一个月，结合奖励制度，你很快会养成习惯，解决意志力问题。<br>同时规律性也会形成生物钟效应，这段时间你的效率会特别高。<br>5、任务式学习</p>
<p>不能只学不练。学习的时候要不同阶段布置不同的任务和作业。<br>比如学习编程，你就一定要写出软件或者网站出来。学习阅读，你就要写读书笔记等。学习写作，就要在网站上写出好文章。<br>最好放到公开，有人评判的地方去。通过这个形式，找到成就感。也能看到自己的学习成果到底质量如何。<br>实践和理论完美结合的方式就是任务式学习。<br>还可以和奖励结合。比如写出的文章到了10万+，那就奖励自己什么，找到动力。成就感+动力互相促进。承认自己的虚荣心。找到监督方。<br>6、群体学习<br>学习任何一个主题，应该要进入这个圈子。一群人互相监督，互相讨论，促进发展。圈子非常重要。<br>通过垂直网站、qq群等找到志同道合的人，一起学习，定期交流，比一个人孤军奋战效果要好的多。<br>问题能及时得到解决，还能互相监督。<br>其他配合技巧：<br>      1、多锻炼，提高精力<br>2、适当接受逻辑性训练<br>3、洗澡、运动后学习都比较容易进入状态<br>4、一定要记学习笔记 </p>
<p>基本上，纠正所有误区，再踏踏实实用好文章里提到的技巧，你的学习效率和效果，必然可以明显提升！</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晨读/晨读16</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB16/</url>
    <content><![CDATA[<p>你的学习只是拖延的一部分<br>胭脂王（菠萝）</p>
<p>这是我在小密圈发的第一篇干货文章，探讨一个好玩的问题：你学习的目的是什么？</p>
<p>1.<br>有一个朋友的朋友，她司法考试扑街了2次，每次都差了20-30分。问了原因，说太忙了，没时间复习。<br>今年是她第三次复习冲击司法考试了。<br>很有意思的是，她现在依旧很忙，做着繁重的工作，不懂得拒绝，把很多朋友的事情揽在身上。</p>
<p>我问了一个问题，过完司考你想做什么？她说想做检察官。<br>为什么呢？因为律师都是人精啊，感觉自己不够聪明，当一名检察官会安稳很多。</p>
<p>我忽然明白了，其实，她根本不想过司考。她只是在很努力地表演自己想过司考而已。<br>忽然，想到了，我误解了很多东西。比如，某些人学习的目的。</p>
<p>2.<br>罗胖说了一个有趣的句子：我懂你的知识焦虑。<br>不过他给出的解决方案挺奇葩的，买买买！你买一堆专栏，然后，每天阅读专栏，就以为我解决了问题了。对于绝大部分人来说，似乎缓解了自己的压力。<br>然而，这并没有任何卵用。</p>
<p>其实所谓的知识焦虑，更多的是一种危机感。我知道危机要来了，我总得做点什么吧？<br>这时候，一个199的订阅就可以让我缓解这种危机感，值了。<br>至于接下来自己是否能够成长，who care？<br>饮鸩止渴，知道了很多道理，最后却过不好这一生？</p>
<p>如何辨别这种人？其实很简单，看他们做了什么。</p>
<p>3.</p>
<p>Talk is cheap，show me code~<br>这句程序员经典台词有一个神翻译：屁话少说，放码过来。<br>行动是最吼的！只有在行动中，你才知道哪些是错的？哪些是纸上谈兵？<br>我记得1月份开智聚会的时候，有人问过编程教练一个问题，在编程中什么错误不能犯？<br>教练的回答是：只看书，不写代码。</p>
<p>看书会让人觉得自己在努力。看了一本又一本，最后的代码呢？倒是给我最后的代码啊！！<br>挑灯夜战，每天学习N小时，结果就差了一点点。<br>然后呢？你学习的目的是什么？<br>不是让自己看起来很努力啊！<br>甚至，很多时候，你一点都不努力，只是在<strong>努力地表演努力</strong>而已。<br>一切不以目的为导向的努力都是耍流氓。</p>
<p>4.<br>学习投资，最重要的是什么？是赚钱。<br>赚钱。你首先得开个户吧？<br>有个朋友，很努力地学习各种理论知识。但是，他没有开户。美其名曰“磨刀不误砍柴工”。磨你妹啊，都要铁棒磨成绣花针了。<br>你精通巴菲特格雷厄姆索罗斯乔尔格林布拉特的种种理论，懂得不要把鸡蛋放在一个篮子里不要追涨杀跌不要跟风听消息不要这个不要那个。</p>
<p><strong>然后你没赚到钱！！</strong></p>
<p>赚到钱！这是我学习投资的目的。<br>所以我会很快去开A股账户；很快去开港股账户；很快地把自己的券商从垃圾证券转到现在的证券，只为了更好的投资功能。<br>哦，请自动屏蔽“垃圾的”这三个字。或者用一般来替代。<br>我以为所有人和我一样，学习投资只有一个目的：赚钱。<br>这是我蠢，我认了。</p>
<p>5.<br>见过无数个号称自己“想学习投资”的人之后，我忽然明白了一件事。<br>准确来说，是顿悟了一件事。<br>那就是这些家伙，他们学习的目的并不是为了赚钱。<br>他们只是在卖惨，而且卖得自己都相信了。自我催眠的至高境界无非如此。<br>他们很努力地“学习”，然后没有然后了。</p>
<p>这些家伙甚至相信了:自己很想通过投资赚钱，只不过他们总有这样那样的客观原因，阻碍了他们的人生进程而已。</p>
<p>“我今年太忙了！这次没有没有时间学习，下一次吧”<br>“我还是个宝宝，时间多着呢，以后再说”<br>“我还没有准备好，我怕我学不会”<br>“我钱少，没有钱理财”<br>“我没时间去开户！”</p>
<p>遇到第一个第二个的时候，我还有耐心提供解决方案。比如，告诉想学习投资的人，你可以在网上开户的，只要5分钟就可以搞定了。<br>然后，他会给我找第二个借口。OK，我忍。<br>然后，他会给我找第三个借口。OK，我也忍。<br>然后，他会给我找……<br>算了，我写不下去了。再写下去我感觉自己是在骗字数了。<br>总之，我遇到各种离奇的借口。</p>
<p>最后，我放弃了。哥们姐们，你们根本就不打算做这件事情啊。<br>你们的学习，只是拖延的一部分而已。</p>
<p>6.<br>我原来的文章标题是《不要磨刀了，尽快上战场！》。<br>写到这里，我才明白，这篇文章的题目应该是《你的学习只是拖延的一部分》。<br>为什么学习投资？因为这个社会整体很焦虑，焦虑资产贬值，焦虑自己的钱不够花。<br>这个焦虑必须解决，不然午夜梦醒了都会出冷汗的。但是很多人其实不想投资理财的，他们相信岁月静好，不用投资理财也可以过得很好。<br>但现实这么血淋淋，而且他们根本不相信，<strong>自己能通过理财获得本金的提升</strong>。</p>
<p>我来揭穿最后的一层面具吧！这些人心里想的是：<br>如果我真的投资了，失败了怎么办？？？</p>
<p>我们来看以下三个命题：</p>
<ul>
<li><p>我十分害怕投资理财失败。</p>
</li>
<li><p>我认为我投资理财会失败。</p>
</li>
<li><p>现实告诉我必须投资理财。</p>
</li>
</ul>
<p>那么要怎么做，才能同时满足三个命题呢？<br>答案很简单：我在学习投资理财。</p>
<p>就这么简单，我没说不做啊。我一直在学习啊。你看我把业余时间都拿来学习了。<br>你努力的姿态那么动人，让我都不好意思作呕了。<br>我怎么好责备你呢？你都那么努力了。</p>
<p>7.<br>总结：</p>
<ul>
<li>有些人努力学习，目的是表演自己在“努力”学习。 </li>
<li>想要检验是表演还是真的努力，最好就是用成果说话。</li>
</ul>
<p>好了！写完了。第一次写，果然很累啊！</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晨读/晨读17</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB17/</url>
    <content><![CDATA[<p>一、投资中最后悔的事<br>80%的亏损都是心理问题造成的（恐慌或者贪婪）<br>心理上的错误很难改正，而投资方法和策略是可以改进的。<br>二、投资的目的<br>大部分人的回答是：我想赚钱。<br>那我们寻找的就是股市赚钱的方法，或者说长期能够赚钱的方法。<br>据统计，中国最近10年的股市，其中80%的涨幅是在90天内完成的；<br>也就是说，2500个交易日，当中只有90天对我们是有意义的。欧美股市也是如此。所以，股市有趣的地方就在这里，为了不错过这90天，你剩下的2400天也需要呆在市场内。<br>这就是华尔街的俗语：闪电下来的时候，你必须要在场.<br>但是即便你在市场内，并不代表你一定要在剩下的2400天内都要买卖。事实上，你在这2400天内，操作的越少，你的收益反而越好。最好就是2400天你不操作。<br>但是又回到了老问题，我们不能确定是哪90天？<br>其实长投教的是什么？<br>是价值投资吗？<br>是量化投资吗？<br>都对！<br>但其实教的是让我们在剩下的2400天内如何少动。<br>通过价值判断，通过估值，通过量化来压制我们闲不住的手。<br>三、投资心理误区<br>1、 旅鼠效应：一开始盲从于A往东边搬家，走一段时间又盲从B往海里跳；每年的春运比“旅鼠”还蠢！ 只有每次决策的时候都独立思考才能避免“旅鼠效应”<br>2、 逆向合理化：有些人接受不了深度套牢，把买入的股票当成支持中国经济的发展，来说服自己持有。就是典型的逆向合理化。还有一种就是买入的股票涨了，就认为很爽，跌了就认为这家公司很烂。只有做投资记录，把每次操作的原因写下来，避免自己事后逆向合理化。<br>3、 可得性偏差: 只从自己和身边人看到的事情做决策。短期记忆效应：人类对短期内发生过的极端情况是高估的，而对没有发生过的极端情况是低估的。避免的方法：强迫自己去寻找更多的反面样本。<br>4、 选择性失明：看到的都是支持自己买入和卖出的信息，而忽略相反的信息。避免的方法：找人来PK 挑刺。<br>5、 归因论：很多人喜欢找到原因，把股市暴跌归结于中国平安增发或者谢国忠的文章，就是典型的归因论。避免的方法：承认自己的无知，找不到原因是很正常的，说明这是在能力圈之外，果断放弃。<br>6、 归他因：把亏钱的原因归结于证监会，大股东欺骗等等，赚钱归结于自己英明神武。。。。做好了都是自己的原因，做亏了都是其他人的问题。索罗斯说他一生的财富都是来自“承认错误”。解决方法：遇到了亏损，不要找其他问题，从自己身上找问题。<br>7、 追求完美：进阶课毕业还没投资股市的，就是追求完美的表现。拿5%的资产出来试水，这样的实际经验是谁能教会的，只有自己亲身经历之后才会领悟。投资这门课如果满分是100分，巴菲特只有90分，卡拉曼80分，中国价值基金经理20分，我们只需要有10分就能战胜0分的韭菜。 互联网永远是beat版，没有东西是完美的。<br>8、 轻易放弃：给未来的自己写一段话，当自己想放弃的时候，拿出来看看。再决定是否要放弃。投资是一场长跑，能坚持跑到终点才算胜利。每次牛市都是无数股神，但是往往下一次这些股神就不见了。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晨读/晨读18</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB18/</url>
    <content><![CDATA[<p>愿你出走半生，归来多赚点钱 </p>
<p>明天就是端午假期了，Kyle去参加一个朋友的聚会，因为大家假期都回不了家，就聊到给家用的事。</p>
<p>好几个比Kyle小的朋友都说，刚工作几年，每个月挣的钱都不够自己用，还没能交家用给父母。问到H，他说自己十几岁中专毕业后，为了供家用，打过不下十份工。说起年轻时的那些经历，H还是有些感慨。</p>
<p>Kyle一直觉得，你眼里看到的一个人，可能只是他全部生活的1%，用这仅有的1%去判断一个人显然不够。希望今天的文章，能够给大家一个新的视角，重新看待生活里艰难前行的每个人。</p>
<p>你永远想不到，有些人为什么而赚钱。</p>
<p>2010年的长沙，房价还只有四千，炒房客还没有出现在报纸上。</p>
<p>我习惯穿过街道，到出租房旁的一家饭馆吃早餐。是家很干净的小店，老板长着络腮胡。心情好并且空闲时，他就会笑着和你聊聊人生。</p>
<p>慢慢知道了，络腮胡老板不是本地人，在长沙开粉店已经多年，节假日也不休息。</p>
<p>他说，这样，我就可以多赚点钱，尽快到老家的县城里租一套房子，亲自照顾瘫痪的儿子，不再把他托养在父母家。</p>
<p>原来，乐观的络腮胡老板如此拼命，不过是因为老家有个病儿，是为了离他更近一些。</p>
<p>他说话的样子，带着微笑，却让我震撼。</p>
<p>我于是懂了：有些人赚钱，可能一辈子都不是为了炒房，他只是为了租房。</p>
<p>2012年的时候，足浴只是足浴，大保健里依旧只有保健。</p>
<p>每周六天的工作后，我喜欢到一家连锁保健店去按摩，那里的技师全是盲人，他们手法劲道，可以帮我治疗疲惫，还有对日子的抱怨。</p>
<p>有个女技师很健谈，也很年轻，按摩的时候，总喜欢找我聊天。</p>
<p>有次，我问她，做这行几年了？她答，整整十年。</p>
<p>十年前，她刚生了小孩，丈夫在广州建筑工地的四楼摔下，虽然捡回了一条命，却在医院里截掉了左腿。包工头跑了，她于是开始学习按摩，她想赚钱给丈夫安装一条最好的假肢。大前年，她的愿望终于实现了。</p>
<p>她像在自言自语，那么平静，我却听得想流泪。</p>
<p>我于是懂了：有些人赚钱，可能从来都不是为了豪车，她只是为了直立行走。</p>
<p>2014年的秋天，格外不像秋天，我陪癌症复发的母亲在医院治疗。</p>
<p>肿瘤医院是个电影里才会有的地方。有的人，打着打着电话就哭了，有的人，拿着费用清单，在收费窗口前一遍遍的走。</p>
<p>母亲的病房里，有位60多岁的老人，刚做完手术没多久，经常痛得在床上呻吟，却一直没有亲人来照料。</p>
<p>有天凌晨，老人又把大家吵醒了，我气愤的找了护士，要求他们迅速联系老人的亲人。</p>
<p>护士忙解释，老人的儿子，其实就在附近，但他不能前来，因为他的妻子也患癌住在这家医院，他现在每天要做三份工作，几乎没有时间休息，医院正在帮老人联系义工。</p>
<p>一个男人，母亲和妻子都患上癌症，这大概是我听到最悲伤的故事了。</p>
<p>我于是懂了：有些人赚钱，可能真不是为了住进VIP病房，他只是不想家空了。</p>
<p>我听过太多这样的故事。</p>
<p>我相信，你也遇到许多这样的人。</p>
<p>有一种赚钱，其实和欲望没有关系，和发达更没有联系。有一种人，之所以拼命赚钱，不过是因为他们没有权利贫穷。</p>
<p>因为贫穷，就意味着不负责任。瘫痪的儿子，就不能始终带在身边；从脚手架上摔下的丈夫，就始终不能平稳前行；送进医院里的母亲和妻子，也许说走就走了。</p>
<p>真的，许多人的拼命，不是自己选择的，而是被命运选择。就像某个送餐到写字楼里的外卖大叔，他风尘仆仆的背影后，可能有着一个同样在城市穿梭的妻子，一个在家乡读高中的儿子，一个温暖却贫穷的家庭，那是我们不知道的世界。</p>
<p>他们不想为钱低三下四，但他们知道钱的重要性，所以他们别无选择。</p>
<p>因为别无选择，所以他们出走半生，穿行在城市。</p>
<p>我讨厌，所有关于钱的矫情说法。</p>
<p>如果你不曾经历缺钱的困窘，请你一定不要说诗歌和远方。许多时候，你没有宽大的客厅与露台，诗歌朗诵起来也会苍白；你没有宝马，去不了真正的远方。</p>
<p>年轻的时候，我们总以为，等赚到足够的钱了，就去过自己想要的生活。等我们年岁渐长，就会明白，一生忙碌，一生赚钱，可能是多数人的宿命。因为我们不知道，自己将会被谁需要，自己将会遭遇什么。</p>
<p>任正非说，我们成功是为了给老婆多赚点钱，不是为了当世界领袖。</p>
<p>Spenser说，别傻了，你根本过不上有钱又有闲的生活。</p>
<p>我们赚钱，从来不是为了去过怎样的生活，而是让自己和家人，不过糟糕的生活。</p>
<p>世界在流动，愿你出走半生，归来都能多赚点钱。</p>
]]></content>
  </entry>
  <entry>
    <title>理财/晨读/晨读03</title>
    <url>/2020/01/31/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB03/</url>
    <content><![CDATA[<p>首先大家要先明白，保险可以根据它的实质简单粗暴的划分为两大类：消费型保险和返还型保险。<br>大家要牢记这两个类型，这样无论别人给你推荐各种杂七杂八的险，你都能清爽的理清，从而分析是否合适！<br>在准备保险专题时一直在想着，找哪些素材可以简单明了的让大家透彻理解保险知识，嗯哼<del>终于被我找到了，不信自己看正文吧</del>！<br>正文：<br>100个学徒工来到一家五星级大酒店学习厨艺，他们要勤勤恳恳学习十年才能出师。学徒们的薪水不高，一年只有几百块，但是五星级酒店的餐具都非常名贵，一个盘子要1000块钱。如果哪个学徒不小心打坏了一个盘子，那么他不仅要倾家荡产来赔偿这1000元钱，还可能会被开除，不能再继续学习和工作。因此学徒们都非常小心谨慎，但还是每年都有人打碎盘子。<br>这一年，酒店来了个聪明的财务，他提出了一个方案：如果每个学徒每年愿意交一点点钱，把这些钱集中起来，那么无论谁打碎了盘子，就用这钱来赔偿盘子，而且学徒们都不再受到处罚。大家都觉得这个方案很好，都愿意花一点点钱买个心安。那么需要交多少钱呢？聪明财务就问大家：“你们一年之内大约会打碎几个盘子？”大家想了想答到：“大约四个吧”（预定死亡率）。那么假定一年内需要赔偿四个盘子的话，就需要每个人交40元钱。聪明的财务又建议大家聘请一名经纪人来帮助大家管理这些钱财。按照当时的市场情况，雇佣一名经纪大概一年需要600元，为经纪人租个办公室要400元（预定费用）。这1000元的费用分摊到每个学徒身上是10元，这样算下来每个学徒一年只交40（保障成本）+10（费用）=50元，就可以打碎盘子不被开除了。（短期消费险诞生了）<br>可是这一年大半年过去了，竟然还没有人打碎盘子，这时候，一个平时做事最谨慎小心的人想了，我是最不可能打碎盘子的，这一年损失50块钱，十年也是500块啊！不行，我得找财务去谈谈。小心人跟财务这么一说，财务说：那简单，你不想交就不交呗，反正出了事风险自己承担。小心人想想又觉得不踏实：万一我打碎了盘子还是赔不起的，有没有两全其美的办法啊？聪明财务脑子一转，既然他想要拿回本金，我就要多收他一些钱，用这些多收到的钱去投资，用投资的收益把他的本金赚回来。那么现在的市场收益率大概是12.4%（预定利率，现在保监委规定预定利率不得大于2.5%）。通过计算10年后要想拿回本金，现在就收取 40（赔盘子）+10（费用）+50（为回本投资）=100元。于是聪明的财务说：我也相信你不会打碎盘子的，但是万一的事情谁也不敢担保，要不你看这样吧，你每年交100块押金（两全险），如果打碎了盘子这押金就没收了，如果十年都没打碎，到时候1000块钱我原样还你。小心人自己一算，几年内打碎了盘子，本来要赔1000的，现在如果十年中途打碎只要赔几百，如果十年都没打碎盘子，自己一分钱都没损失，确实两全其美！“但是咱们得有一个约定”财务又说，“你既然按100交押金了，这十年都得交，中途也不能再把押金取回，否则要算你违约。”小心人想想自己总归不亏，就一口承诺：“没问题！”<br>（两全保险诞生）</p>
<p>这一年小心人果然没有打碎盘子，看见其他工友大都损失了50块钱，他不禁得意起来，把自己的方案告诉几个好朋友。很快一传十十传百，大家都觉得自己没那么倒霉就是那个会打碎盘子的人，于是纷纷要求交押金。财务也很乐意，于是第二年一下子收了10000元押金。财务留下4000元准备赔盘子的钱，1000元费用，剩下5000元就去投资，这一年市场非常的好，投资回报率升高到了15%（利差益，预定利率12.4%），而且这一年学徒们打碎的盘子也只打碎了3个（死差益），雇佣的经纪也只花了500（费差益）。到了年底，还赚了不只一个盘子的钱。<br>听说了这个事情，小心人又不平起来，他找到财务说，原来你用我们的钱去赚了那么多钱，却不分给我们，太不公平了。财务想了想说：我赚钱是靠自己的脑力体力，也有我的功劳。要不这样吧，你再多交点，每年150元（分红险），十年后我不仅还你1500，还每年把盈利的70%分给你，如何？小心人一听，觉得这样更划算，于是自己马上交了150，回去还鼓动别的工友也多交一点。</p>
<p>这一年恰逢股市大涨，财务赚了很多，到了年终，大家一看自己的帐户，非但没有像去年一样花掉50块，反而还多了几块钱红利。于是财务鼓动大家说，明年行情还会很好，大家不如把自己不急用的钱都给我吧，除了扣除帮大家赔付打碎盘子的保障成本40元钱，以及扣除管理费用10元。其余多给我的钱我帮你们运作，我每个月给你们结算利息，而且是利滚利。“可是我们交了那么多钱，万一要急用咋办呢？”有人问。财务说，那没关系，这部分钱急用的时候你们可以随时取出（万能险）。“那你要投资亏了怎么办？”又有人担心的问道。“放心吧，我给你们承诺每月给大家的利息不会低于0%的。而且年利率一定在2.5%以上”，众人一 盘算，我们哪里懂什么投资运作，财务是个聪明人，交给他放心！于是众人你150，他180的都交了出来。 （万能险）<br>第三年年末，大家帐户上果然又多了若干盈余，有人感觉赚的真不少，但也有人感觉投的钱不少没有赚到心目中所想要得到的钱。他们又找到了聪明的财务，财务说：收益高的项目当然有，但是风险也大，如果你们不怕风险，我可以帮你们投到这些项目中去，这样吧，我帮大家设置几个投资的帐户，其中有风险高的，有风险低的，大家可以根据自己的偏好来选择投资的帐户，选择好了，我来帮你们运作，我每年只按帐户价值的百分之几收大家一点管理费，其余赚多少都归你们，但是万一亏了，请大家也别怪我（投连险）只要存满五年，我连手续费都不扣。大家感觉这样能赚到更多的钱，于是就把所有的钱交给了财务。</p>
<p>这时候来了一个新的学徒，众人纷纷向他解释这个项目的吸引力，劝他多拿一点钱出来。新学徒听得一头雾水，最后终于搞清楚来龙去脉，说：不就是交50块钱赔盘子吗？我家庭困难，不把这20%的工资都押进去行么？</p>
<p>从故事中，可以看到保费是由三个部分组成的：<br>保障成本+费用+投资的钱=保费。<br>其中无论你购买的是消费型险，还是分红、万能、投连险，每年的保障成本和费用都被消费掉了。保险公司之所以能返本、分红、付息，无非是在拿客户的钱去投资，然后把投资收益再分给客户。而且由于保险公司的投资项目不可能太过激进。所以保险公司的投资收益都是比较低的。</p>
<p>所以建议：尽量购买消费型保障功能的保险，这样可以用非常低的价格购买的很高的保障。然后把省下来的钱投资到其他能带来更高回报的投资项目中去，如基金定投，股票等。这样资金的使用效率会更高。</p>
<p>思考：<br>在上面的故事中，随着故事的推进，人们的关注点在改变，开始关注的是保障，随着事情的发展人们的关注点越来越重视收益而忽略了保险的本质。想想现在的保险行业和保险市场是不是这样呢？</p>
<p>所以还是建议大家再买保险的时候不要过多考虑资金回报，而应该重点考虑保险保障的本质，个人对于风险的厌恶才应该是购买保险最原始的初衷。</p>
]]></content>
  </entry>
  <entry>
    <title>两种思维方式决定了你只能当穷人</title>
    <url>/2020/01/30/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB01/</url>
    <content><![CDATA[<p>今天跟几个朋友在不同的场合下偶然谈到理财投资这方面的话题，几个朋友的反应不尽相同却又大体一致。<br>    燕子是我的闺蜜，偶尔会在微信上跟我哭穷，今天又是如此，我终于按耐不住心中的激动的问她为什么还不理财？她却依然还是那句老话：“我现在连五百块的存款都没有，还理财，至少也得等我月余三千的时候再考虑这方面的问题吧。我现在只想挣钱。”我只能无奈摊手。<br>    其实跟燕子提起理财已经不是第一次，可是她不仅听不进去，甚至还怀疑我是不是在搞传销……我记得之前她说自己是因为工资低所以存不下钱，于是她不断跳槽，即使一年跳槽三次，每次工资都有所上涨，她仍旧月月无结余。<br>    在燕子眼里，理财是一定要建立在有可观的存款基础之上的。<br>    而另一个人物，也是这么想的。<br>    沈二是个帅哥，大学那会儿过得风生水起，甚至半途退学创业，摆脱了学校的禁锢小日子过得有声有色。好景不长，创业遭遇失败后沈二本分地当起了上班族，但是近两年却开始频繁地找人借钱，以此度日。欠我五百块钱一直拖了两个月都没还上，今天实在是捱不下面子给我说月底会还。<br>    我问他为什么现在如此狼狈，他说现在月月负债，领了这个月的工资都不够还上个月的欠款，生活一度陷入恶性循环。<br>    我说那你为什么不理财？他说：“都负债了还有财可理？每个月工资都不够我花。”我说那你不能怪工资少，因为你现在肯定也不记账，也不检讨，更谈不上自我总结自我分析了。你根本不知道到底为什么自己每个月都入不敷出。<br>    在沈二眼里，因为工资低所以常年负债，因为时常负债所以无从理财。<br>但是理财门槛真的有那么高吗？<br>难道一定要先有财才能理，不可以先打理，后生财？<br>我相信像燕子一样人不在少数，和沈二同样处境的人也肯定占比不小。月光族在社会上绝对是一个相当庞大的群体，没有经济来源的学生党也是无财大军。<br>但我认为可怕的不是月光不是穷，真正可怕的是一个人月月月光常常吃土，却从来不自我剖析自我检讨，安于现状的在困窘无奈的漩涡里沉醉，不想改变现状，不愿努力向上，不敢看真正的自己。<br>    有时候我们还真的不能怪工资少，寄希望于用存款改变生活也是愚不可及的。没有哪一家企业长生不老，我们的钱也每天都在经历通货膨胀。<br>如果你现在已经可以做到月有结余，那你只是把钱放在银行和余额宝是肯定不够的，定期利率和余额宝收益率并不能帮你跑赢通货膨胀，你辛苦攒下来的钱还会在日复一日的通货膨胀中经历贬值。<br>    所以你愿意看着自己存款在上涨，购买力却在降低吗？</p>
<p>如果你现在是月光，那你需要先认清自己现状，再树立一个正确的理财理念，找到合适自己的理财方法和投资方式，努力开源节流，以实现月有结余，再跑赢通货膨胀，从而进一步追求财富自由。<br>    光挣钱只存钱是远远不够的。<br>如果你时常负债，那你更不能破罐子破摔地颓废下去，建议你先学会科学记账，并认真分析你的账本，减少甚至规避掉那些不必要的支出，就是保持正常生活的第一步。<br>负债看消费，盈利靠理财。<br>    理财并不像想象中需要很多钱，100多块就可以开始买基金，几百块就可以买股票。<br>    理财也并没有你想象中的那么高大上，它甚至简单到人人可行。<br>    因为理财就是理生活，没有财更要理财，人人都该学理财。</p>
<p>2）比贫穷更可怕的 是“穷人思维”</p>
<pre><code>由穷人变富人是一个艰难和漫长的过程，但比起做穷人来说，做一个思想上的“穷人”更为可怕。今天和大家聊聊“穷人思维”。

01
穷人嘛，就是缺钱的人。但“穷人思维”不一定只有穷人有。

多和少都是相对的，穷人缺钱，但他们和富人拥有的时间完全一样。所以，穷人就是那种钱 &quot; 绝对 &quot; 少，但时间相对 &quot; 多 &quot; 的人。

从经济学的角度上讲，你缺什么，就会把什么看得特别重；不缺什么，就会把这个东西的价值看得特别轻。
有一次，有人问我有没有电子书资源——没好意思说出来的话，我帮他补充了：免费的。

过几天，他又来留言说自己在各大网站、网盘、资源站找遍了，都找不到资源。这好像是说：没有免费资源的书，你推荐个屁啊。

拜托，这是一本帮你提高思维能力的书，各大网站上都有卖，也就 40 多块，而且书的内容我也一一介绍了，你既然想看，说明读这本书不会浪费你的时间。

免费的东西不一定真免费——难道你找资源的时间，就不值这 40 多块钱？

我先得补充一句，&quot; 穷人思维 &quot; 不是 &quot; 穷人 &quot; 的思维，而是 &quot; 曾经是穷人 &quot; 的思维。不是嘲讽穷人，而是谈论这种思维。

02
穷人思维对我们的第一个影响，就是喜欢用时间换钱。

豆瓣电影上有很多电影星级很低。但根据我的经验，就算片子再烂，中途退场的人也不会超过 30%。就是说，有超过 60% 的人看来，90 分钟的时间价值不会超过 30 元的票价。

穷人的时间不值钱，所以愿意用时间换钱，这是一种 &quot; 经济行为 &quot;。但当你的口袋已经走出穷困，却仍然把自己和别人的时间都看得不太值钱的话，说明你的脑袋依然停留在穷人思维中。

用经济学的观点来说，穷人思维往往过于注重 &quot; 沉没成本 &quot;。

什么叫沉没成本？就像你明明爱上了一个烂人，却因为已经付出的感情，时间和物质而舍不得沉没成本，寄希望于等待和改变。

举个简单的例子，你花了五块钱买了一个苹果，咬了一口发现是烂的，你却因为舍不得花掉的钱，坚持要将整个咽下。人们总是忘记不管你怎么选择，五块钱都不会再回来了，而你却偏偏还要再多吃一个烂苹果。

有一个有趣的现象叫 &quot; 买鞋定理 &quot;：

假设你在商场买了双鞋，大小没问题，但真正穿的时候又发现夹脚，退也退不掉，于是，你会经历下面的心理挣扎：

● 不甘心定理：这双鞋对你而言越贵，你尝试穿一下的次数也就越多 ( 换句话说，你越穷，受的罪越多 ) ；
● 侥幸定理：你确定穿不了了，那么这双鞋越贵，放在你家里占地方的时间就越长；
● 绝望定理：无论你放多长时间，总有一天，你都会把它扔了，有多远扔多远。
终于，世界清静了，但可早知今日，何必当初？

对此，富人思维则完全相反：花钱，要么是为了赚钱，要么是为了享受，两样都不搭的事，就不值得白白浪费精力。

当然，这种 &quot; 时间不值钱 &quot; 的穷人思维，往往只在人生过渡期对我们产生影响。但下一种思维惯性，就没那么好摆脱了。

03
有一句话平时说出来会得罪人，但有了前面的理论铺垫，我就不怕大家打死我了：
价格贵？这怎么会是产品的缺点呢？难道不是你的缺点吗？

我不是嘲笑大家穷，而是想说穷人思维容易在价值判断上出问题。

举个例子：超市里的被子打折，有大、中、小三种规格，原价分别是 300 元、250 元和 200 元，现价一律 150 元。

根据售货员的经验：穷人更倾向于买大的——省钱，而有钱人更倾向于适合的尺寸——也就是纯粹为了自身需求。

这就是穷人思维造成的第二个影响，就是说穷人思维让我们过于关注自己拥有的资源，从而忽略了另外一些更重要的东西。比如说，你的目标。

穷人思维的特点是量入为出，而富人思维特点是目标导向。

比如带着穷人思维的人买房，最先考虑的是自己有多少钱付首付、月收入多少还贷，然后再倒过来推算自己该不该买房、买什么房。

而带着富人思维的人则先问我要不要买房、买房有什么用、想买什么房，然后再算还差多少、怎么解决。

如果一项任务的目标是合理的，那么我们就不能以 &quot; 资源不足 &quot; 为理由去否定这个目标。

04
电影《华尔街之狼》就讲了一个专门骗穷人的股票经纪人，他发现，穷人在长期消费决策中，形成了一种思维惯性——便宜的东西更有吸引力。当他们把这种思维惯性带到了投资中，就很容易成为 &quot; 垃圾股 &quot; 的目标客户。

电影里有句台词说：&quot; 我们把垃圾卖给垃圾人，因为钱在我们手里，总比在他们手里更能发挥价值。&quot;

这不仅是全天下骗子们的心声，更揭露了穷人思维的弊端。

把 &quot; 垃圾 &quot; 卖给想发财的穷人，这在中国也是最赚钱的生意：那些利率高得吓死人的垃圾 P2P、那些根本不可能上市的 &quot; 内部原始股 &quot;、那些无数次崩盘又卷士重来的 &quot;3M 骗局 &quot;，都是抓住了穷人思维的致命弱点——既无判断力，又无自制力。

那么，带有富人思维的人是怎么投资的呢？

在巴菲特的投资偏好中，既没有房地产，也没有互联网，前者因为不喜欢，后者因为看不懂。

05
不过如前文所说，穷人思维不是穷人的专利。

事实上，许多富人在重大决策中也常常会陷入穷人思维中，哪怕是最不缺钱花的——皇帝。

在历代皇帝中，清朝的道光皇帝最以 &quot; 节俭 &quot; 闻名：
皇后过生日，一人一碗打卤面，吃完不准添。
在建自己的陵寝时，因为他给的银子太少，从而产生了严重的施工质量问题。最后，工程不得不返工，经过两建一拆，耗资反而是清代帝陵中最多的。
道光会有如此严重的穷人思维，我认为这是历史原因的：康乾盛世的虚假繁荣后，导致嘉庆一朝财政空虚，这给当时还是皇子的道光留下了无法磨灭的可怕印象——穷怕了。
于是，道光的 &quot; 节俭 &quot;，省到了 &quot; 误国 &quot; 的程度：他挖空心思想节省开支的办法，居然把主意打到了驻守新疆的军队上，想撤了他们。大臣想，这不是开国际玩笑吗？道光嘴一撇，不撤也行，反正我不给钱了，大家自己想办法吧。

这一逼，果然逼出办法——大臣把驻守在其他要塞的军队平均撤掉一些，然后把节省下来的军晌拨给新疆。到了十几年后的鸦片战争，大家才发现，英国军舰可以在十几天内把大批士兵从广州运到天津，而清军则分散在全国各地，一次兵力的集结往往要花上几个月——仗都打完了，十几万军队还在半路上东奔西跑。

这就是穷人思维的核心：如果你只关注钱，你往往是在浪费钱；如果你只关注眼前的利益，你很可能赢了一场战役，却输掉了整个战场。

06
想要从穷人思维走向富人思维，给大家几点建议：
1. 建立 &quot; 时间价值 &quot; 的概念：减少做那些 &quot; 时间花得多、收益少 &quot; 的事情；
2. 牢记 &quot; 沉没成本 &quot; 不可追：钱已经花错了，再浪费时间就是错上加错；
3。培养 &quot; 目标导向 &quot; 的思维：好的项目永远会遇到钱少的问题；但只要目标正确，钱总有办法解决；
4. 减少无意义的频繁决策，节省宝贵的意志力。

比如说，我们可以在每年年初设立一个 &quot; 享受一下 &quot; 的基金，所有预算外消费都在这里开支，从而不必每次消费都反复权衡；

又比如说，选择以基金定投这种被动的、不需要太多决策的投资品种为主要的投资对象；

再比如说，对于需要大量意志力的活动 ( 学外语、健身等等 ) ，只挑最重要的做，因为多了会影响你做重大决策时的判断力；

5. 拓展自己的视野：适当做一些眼前 &quot; 无用 &quot; 的事，防止进入只关注当下的 &quot; 管窥 &quot; 状态，建立长远规划的战略意识。

以前，我妈每年年底大扫除扔东西时，总爱念叨一句话：&quot; 穷人才留破烂，越留越穷。&quot;

其实，穷人思维才是越留越穷、最应扔掉的 &quot; 破烂 &quot;。永远记住——真正的穷不是缺钱，而是呆在穷人思维的怪圈里走不出来。</code></pre>]]></content>
      <categories>
        <category>理财</category>
      </categories>
      <tags>
        <tag>理财学习</tag>
      </tags>
  </entry>
  <entry>
    <title>投资起步晚5年，赶上需要1.5倍的汗水+时间</title>
    <url>/2020/01/30/%E7%90%86%E8%B4%A2/%E6%99%A8%E8%AF%BB/%E6%99%A8%E8%AF%BB02/</url>
    <content><![CDATA[<p>小投一直听到有些小伙伴们在说：“现在还年轻，先不考虑储蓄/理财/投资，反正现在这点钱，实在太少了，即使拿去投资也赚不了多少呢，还不如乘着年轻使劲浪呢！”<br>很多人认为年轻人没什么可失去的，或者做了什么离谱的蠢事，也有时间挣回来。“年轻没有什么不可以”，这个建议听起来似乎太棒了。不过对于一个追求财富自由的人来说，一旦在投资的起点线上比别人晚了5年，即使5年后，你投入的资金和别人一样，也有可能一辈子都赶不上别人。<br>22岁、27岁、32岁开始投资的人……<br>相信很多院生都和小投一样，是依赖工资结余进行投资的。而我们年轻时最可能犯的大错误就是，总想着还有明天，想把一切责任都交给明天的自己。<br>也许你认为5年在漫漫人生路上，连1/10都不到，即使错过5年，只要抓紧时间，就能够迎头赶上。不过，我们量化一下就发现，事实并非如此哦！复利的可怕之处就在于，即使你一开始的投资量只是少了那么一点点，几十年的“复利效应”之后，就会导致巨大的差异。<br>举个栗子！<br>假设院生A从22岁开始，每个月投资1000元，年化收益8%，那么到他60岁的时候，他的投资收益将会高达240万元；<br>院生B使用同样的投资策略，然而在27岁才开始投资，那么他这辈子的投资收益将只有145万元；<br>而有一个悲催的人，因为他也没有学长投课，就不能列为C，到了32岁才真正领悟到了投资的重要性，他也依旧采用每个月投资1000元的策略，到了60岁，他的收益仅仅只有90万元。<br>​​<br>即使同样的投资收益，如果晚5年投资，等到60岁的时候，你的收益会比别人少65%呢！！<br>即使起步晚了，假如你多努力N%呢？<br>很多院生会发出怒吼：我起步晚怎么了？我多努力就是啦！！好嘛，小投宝宝被吓到了，不过呢，事实证明，起步一旦晚了5年，你就需要付出更多的汗水和时间，即使这样，也不一定能赶上赶早的同学。<br>假设你比别人晚5年才意识到投资的重要性，比别人晚5年开始投资那么你需要每个月多投资多少钱，才能够赶上那些比你早5年的同学呢？<br>小投今天啥也没干，就在一直按计算器算算术了，最后，终于算出来这个值，实在是把小投吓CRY了。<br>如果你27岁才开始投资，那么如果别人一个月投资1000元，那么你需要每个月投资1500元，才能够在60岁的时候赶得上别人。而且要注意哦，你需要在长达33年的时间中，每个月都比别人多投入50%，才能够在60岁的时候勉强赶上。<br>​​<br>虽然这两条线看着似乎是重叠的，然而，你晚起步了5年，就需要在未来的33年中，每个月都多投入50%，拼尽全力，才能够好不容易赶上呢！<br>复利的的魔法在漫长的时间中发挥了魔力，如果你行动时间晚了一点，那么你的投资回报就会少得多，所以执行力强的人往往会提前行动，争取时间，让复利发挥出最大的力量。要记住：你推迟投资的每一天，复利都会发挥反向的作用。<br>从储蓄开始，但并不仅仅是储蓄<br>为了达成你的财务自由目标，从踏入职场那天起，你就必须开始储蓄，同时开始学习理财的相关知识。除非你运气很好，恰好中了彩票大奖，或者刚好得到一笔横财，否则没有储蓄就无法积累相应的财富。大部分人知道他们应该储蓄，但是没有意识到应该持续储蓄，往往都是这个月剩多少就存多少。而正确的做法，应当是，先存钱再消费。<br>这非常困难，特别是在这个消费主义盛行的时代，我们给商品赋予了很多不同的意义。你要开始储蓄，就得先克服自己的虚荣心。生活中到处充斥着购物的广告，假如你把看到的东西都买下来，那么你就完蛋了，再也没办法开始储蓄的第一步了。<br>对于许多人来说，虚荣心战胜了一切，节俭生活的麻烦是没人能看到他们的财富，你手上没有名表，你会买一个iWatch，告诉别人，你并不是买不起名表而是更喜欢科技感十足的苹果手表。如果你手腕上空空如也，也没有挎着名牌包包，人们不会羡慕你的财富，当然，他们也看不到你正在为财富自由所付出的努力。看着账户金额不断增长，你能够获得相应的满足感，从而对抗内心滋长的“买买买”。<br>不过在现实中，你会看到很多人擅长过节俭的生活，并且从尽可能削减每一项开支中得到满足。然而，节俭是美德，但是也要记住，仅仅只是节俭，你是无法富裕的。小投发现很多节俭的人，却只把节约下来的钱放在银行里，获取每年不到5%的收益，这实在是太太太蠢了！！<br>从削减开支到建立真正的财富，你必须找到一种方式，让金钱变得更有效率，从而不断增加收入。<br>比如，你可以通过花钱学习一门新职业技能，获得更高的收入；或者，通过学习投资理财的知识，让你的每年的收益变得更高一些；也或者，给自己买一份必要的保险，以避免突如其来的变故让你之前的努力化为虚有。记住，你需要制定一份专属于你个人的财富自由计划，并且尽快起步。无论你计划每个月存多少钱用于投资理财，最好就从这个月开始。<br>也许你已经不是22岁了，已经比别人慢了一拍了，但是在投资路上，小投和长投院生小伙伴都和你一起加油哦！！么么哒，希望大家都能实现自己的财富梦想！！<br>希望我们14天小白训练营可以引导大家找到建立真正财富的正确方式。</p>
]]></content>
      <categories>
        <category>理财</category>
      </categories>
      <tags>
        <tag>理财学习</tag>
      </tags>
  </entry>
  <entry>
    <title>ocp学习</title>
    <url>/2020/01/30/OCPOCA%E8%AE%A4%E8%AF%81%E8%80%83%E8%AF%95%E6%8C%87%E5%8D%97/OCPOCA%E8%AE%A4%E8%AF%81%E8%80%83%E8%AF%95%E6%8C%87%E5%8D%9701/</url>
    <content><![CDATA[<h1 id="OCP-OCA认证考试指南全册-Oracle-Database11g-1Z0-051、1Z0-052-和OCP-1Z0-053"><a href="#OCP-OCA认证考试指南全册-Oracle-Database11g-1Z0-051、1Z0-052-和OCP-1Z0-053" class="headerlink" title="OCP/OCA认证考试指南全册 Oracle Database11g(1Z0-051、1Z0-052)和OCP(1Z0-053)"></a>OCP/OCA认证考试指南全册 Oracle Database11g(1Z0-051、1Z0-052)和OCP(1Z0-053)</h1><h2 id="权威、完备的OCA（1Z0-051、1Z0-052）和OCP-1Z0-053-考试指南"><a href="#权威、完备的OCA（1Z0-051、1Z0-052）和OCP-1Z0-053-考试指南" class="headerlink" title="权威、完备的OCA（1Z0-051、1Z0-052）和OCP(1Z0-053)考试指南"></a>权威、完备的OCA（1Z0-051、1Z0-052）和OCP(1Z0-053)考试指南</h2><p>《OCP/OCA认证考试指南全册：Oracle Database 11g(1Z0-051,1Z0-052,1Z0-053)》是为OCA和OCP考试准备的独家权威指南。</p>
<p>本书的每一章都提供吸引人的练习题、实践问题和本章知识点回顾以强化所学的知识。</p>
<p>本书既是帮助读者轻松地通过OCA/OCP认证考试的好帮手，也是Oracle从业人员必备的参考书。</p>
<p>本书全面覆盖了1Z0-051、1Z0-052和1Z0-053考试的所有要点：</p>
<ul>
<li>实例管理</li>
<li>Oracle网络和存储结构</li>
<li>安全性</li>
<li>SQL</li>
<li>Oracle恢复管理器和Oracle闪回技术</li>
<li>资源管理器</li>
<li>Oracle自动存储管理</li>
<li>Oracle调度程序</li>
<li>自动工作负荷知识库</li>
<li>性能调整</li>
</ul>
<h6 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h6><p>John Watson就职于BPLC Management Consultants,负责公司欧洲和非洲的教学和咨询工作。他拥有数据库和应用服务器管理方面的OCP资格，以及长达25年的IT从业经验，曾撰著过多本技术书籍并发表了大量的技术论文。</p>
<p>Roopesh Ramklass是一名熟悉多种环境的Oracle专家。他创办了自己的咨询公司，作为一名独立的顾问，他围绕大量的Oracle技术设计并开发了软件和培训课程，内容涉及数据库、应用服务器和商业智能产品，并拥有12年的IT从业经验。</p>
<p>Bob Bryla是Oracle 9i和10g的认证专家，他在数据库设计、数据库应用程序开发、培训和Oracle数据库管理等方面拥有20多年的工作经验，他也是Dodgeville的Land’End 公司的首席Internet数据库设计师和Oracle DBA。  </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当今社会需要越来越多具有IT行业认证资格的员工。<br>    对于雇主来说，认证的好处是显著的：<br>        雇主能够确信自己的员工具备一定的竞争力。<br>        个人同样能够凭借认证资格享受到巨大的好处。<br>        目前，许多雇主更希望雇佣具有认证资格的技术人员，而且许多IT产品买主不愿购买未聘用相关认证人员的公司的产品。<br>        在众多的IT行业认证中，Oracle认证最受青睐。<br>        除了商业报酬的因素外，具备Oracle认证资格就意味着成为相对紧俏的Oracle专业人员中的一份子，也拥有了赢得可观收入的重要筹码。<br>    从这里将开始您的Oracle数据库管理学习之旅，在职业生涯余下的岁月里，可以沿着这条路不如更美妙的人生境界。请尽情品味和享受学习的乐趣吧！</p>
<h2 id="Oracle认证"><a href="#Oracle认证" class="headerlink" title="Oracle认证"></a>Oracle认证</h2><p>Oracle认证具有多个类别。<br>    本书主要针对Orale Database 11g版本的Oracle Database Administation认证。DBA认证级别有以下三种：<br>        Certified Associate(OCA)<br>        Certified Professional(OCP)<br>        Certified Master(OCM)<br>    取得OCA资格需要通过两门考试。<br>    取得OCP资格需要通过第三门考试。<br>    这些考试在任一Prometric考试中心都可以进行，要求在90分钟内解答60或者70个问题，通过考试需要达到60%~70%的正确率。<br>    取得OCM资格则还需要在Oracle测试中心完成为期两天的评估，其中涉及复杂环境的模拟以及高级技术的应用（本书中未涉及）。</p>
<p>在准备OCA/OCP考试时，可以参加Oracle大学举办的培训课程，可以学习Oracle大学的在线辅导资料，也可以阅读本书。<br>    无论采取哪种方式，应试者都应当参考Oracle Documentation Library 来了解语法的详细信息。<br>    仅凭本书就足以帮助应试者通过认证，但如果选择了其它方式，本书也是一本珍贵的参考资料。<br>    本书围绕考试目标展开讨论，还涵盖了DBA在工作中使用到的大量信息。</p>
<p>当然，也不要一厢情愿地认为，只要购得本书，将其藏于枕下，书中的只是便可源源不断地传入脑海中。<br>    必须通读本书、完成所有联系、解决示例问题以及实验各种命令。<br>    在进一步熟悉Oracle环境后，会悟出一句金箴：在实践中求真知。</p>
<p>在众多场合您会发现，一个几分钟便完成的简单测试能省下数小时的思考和手册查阅时间。若有不明之处，则可以构造一个示例并查看发生的情况。</p>
<p>本书基于Windows或Linux操作系统讨论数据库，但是可以在支持Oracle的任何平台上完成练习并做更深入的研究。</p>
<h2 id="本书内容"><a href="#本书内容" class="headerlink" title="本书内容"></a>本书内容</h2><p>本书是为 Oracle Database 11g OCA/OCP 考试而准备的。<br>    所有官方认证目标在本书中都有涉及。<br>    本书分为三个部分，这实际构成了一个说明从无到有（即一个功能完全的系统）配置数据库应用程序的案例。<br>    第I部分假定读者未掌握任何预备知识，也没有安装软件，介绍了安装Oracle软件和创建数据库的基本知识。<br>    然后，第II部分介绍了SQL语言，通过他在第I部分创建的数据库中创建并使用应用程序。<br>    第III部分介绍了运行数据库应用程序时的维护工作（如备份和调整等内容）和一些更高级的数据库功能。</p>
<h2 id="备考清单"><a href="#备考清单" class="headerlink" title="备考清单"></a>备考清单</h2><p>前言最后有一份备考清单。<br>    通过这个清单，可以前后对照官方考试目标与本书呈献和涵盖的认证目标。<br>    备考清单中体积的每个官方目标和Oracle贵公司提出的目标完全相同，还列出了涵盖对应目标的章节。<br>    不需要按顺序参加这三门考试。<br>    您可以在任何时候参加考试，但是如果学习完本书后再参加考试，可能会获得高分。<br>    因为考试的内容是逐渐积累的，考试的目标之间有重叠。<br>    在讲述后面的主题时会回顾并巩固之前提到的主题。</p>
<h2 id="编排方式"><a href="#编排方式" class="headerlink" title="编排方式"></a>编排方式</h2><p>每章包含多个组成部分，以便突出显示重要条目、强化学习要点，并提供具有帮助作用的应试提示。<br>每章的组成部分如下：</p>
<ul>
<li><p>“考试目标” 在每章开头部分，列出了该章涵盖的官方考试目标。</p>
<pre><code>因为各门考试有重叠的目标，因此每章可能涉及多门考试的目标。</code></pre></li>
<li><p>“考点” 突出显示考试信息和可能布设的陷阱。</p>
</li>
<li><p>“练习” 分布于各个章节，是帮助您成功通过考试的实用练习，能帮您熟练掌握很可能成为考试要点的技能。</p>
<pre><code>不要只是泛泛地读一读，而应该能熟练地完成这些实用练习。
&quot;从做中学&quot;是有效提高产品理解能力的途径。</code></pre></li>
<li><p>“提示” 描述实际工作中最常遇到的问题，是有关认证主题和产品主题的真知灼见。它们指出了常见错误，并解决工作中谈及和遇到的问题。</p>
</li>
<li><p>“本章知识点回顾” 简单总结了相应章节中涉及的考试目标，被安排在每章的最后。在考试前，可供读者进行快捷的总结性复习。</p>
</li>
<li><p>“自测题” 模拟认证考试中的问题。可以在章末找到这些问题的答案和解释。<br>在阅读完每章后做一做”自测题”，可以巩固所学的内容，并熟悉考题的结构。</p>
</li>
</ul>
<h2 id="学习指导"><a href="#学习指导" class="headerlink" title="学习指导"></a>学习指导</h2><p>读完本书后，留出时间认真地复习一遍。<br>在参试前，可能需要多次复习本书，并利用他所提供的方法来复习本书。</p>
<ul>
<li><p>温习所有”本章知识点回顾”或请别人考考自己——可以使用此练习方法来临阵磨枪。</p>
<pre><code>不妨试试3*5的索引卡制作一些列出了&quot;本章知识点回顾&quot;材料的练习卡。</code></pre></li>
<li><p>温习所有考点——-请注意，这些考点都是根据考试总结出来的。</p>
<pre><code>利用他们，可以集中精力应对考试。</code></pre></li>
<li><p>重温自测题——好的做法是每读完一章就立即完成自测题来巩固所学内容。</p>
</li>
<li><p>完成练习——-在阅读每章时都需要做练习题吗？答案是十分肯定的。这些练习题涵盖了考试主题，没有什么方法比通过做练习来了解材料的效果更好。<br>一定要弄清楚每个练习中每个步骤的来龙去脉。<br>如对其中一些内容不甚明了，请重新阅读正文中的对应内容。</p>
</li>
</ul>
<h2 id="备考清单-1"><a href="#备考清单-1" class="headerlink" title="备考清单"></a>备考清单</h2><h3 id="1Z0-051考试"><a href="#1Z0-051考试" class="headerlink" title="1Z0-051考试"></a>1Z0-051考试</h3><p>表格示例：<br>name | 价格 |  数量<br>-|-|-<br>香蕉 | $1 | 5 |<br>苹果 | $1 | 6 |<br>草莓 | $1 | 7 |</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>考试目标</th>
<th>所在章节</th>
</tr>
</thead>
<tbody><tr>
<td>051</td>
<td>Oracle Database 11g:SQL Fundamentsals</td>
<td></td>
</tr>
<tr>
<td>051.1</td>
<td>使用SQL SELECT语句检索数据</td>
<td></td>
</tr>
<tr>
<td>051.1.1</td>
<td>列出SQL SELECT语句的能力</td>
<td>9</td>
</tr>
<tr>
<td>051.1.2</td>
<td>执行基本的SELECT语句</td>
<td>9</td>
</tr>
<tr>
<td>051.2</td>
<td>限制和排序数据</td>
<td></td>
</tr>
<tr>
<td>051.2.1</td>
<td>限制查询检索的行</td>
<td>9</td>
</tr>
<tr>
<td>051.2.2</td>
<td>排序查询检索的行</td>
<td>9</td>
</tr>
<tr>
<td>051.2.3</td>
<td>在运行时使用&amp;符号替换限制和排序输出</td>
<td>9</td>
</tr>
<tr>
<td>051.3</td>
<td>使用单行函数定制输出</td>
<td></td>
</tr>
</tbody></table>
<h1 id="第I部分"><a href="#第I部分" class="headerlink" title="第I部分"></a>第I部分</h1><h2 id="Oracle-Database-11g-管理"><a href="#Oracle-Database-11g-管理" class="headerlink" title="Oracle Database 11g 管理"></a>Oracle Database 11g 管理</h2><ul>
<li>第一章 Oracle Database 11g体系结构概述</li>
<li>第二章 安装和创建数据库</li>
<li>第三章 实例管理</li>
<li>第四章 配置Oracle网络环境</li>
<li>第五章 Oracle存储结构</li>
<li>第六章 Oracle安全性</li>
</ul>
<h1 id="第一章-OracleDatabase-11g体系结构概述"><a href="#第一章-OracleDatabase-11g体系结构概述" class="headerlink" title="第一章 OracleDatabase 11g体系结构概述"></a>第一章 OracleDatabase 11g体系结构概述</h1><h2 id="考试目标"><a href="#考试目标" class="headerlink" title="考试目标"></a>考试目标</h2><p>本章学习内容：</p>
<ul>
<li>052.1.1 解释内存结构</li>
<li>052.1.2 描述进程结构</li>
<li>052.1.3 讲述存储结构</li>
</ul>
<p>本指南所做的逻辑结构安排旨在使读者全面理解Oracle服务器产品和SQL（Structure Query Language，读作sequel）的基本知识。<br>    作者通过引入一个假设的场景（随着本书的学习，可对其进行系统的扩展），力图将知识点与实际工作相结合，使一些抽象概念具体化而变得易于掌握。<br>    这涉及要求您以DBA的身份负责建立一个在线商店。<br>    您将从中认识到DBA要承担的各种角色，以及DBA需要熟悉的一些技术领域。<br>    在对Oracle产品系列做了非考查性讨论后，我们介绍了一些全面理解建立Oracle 11g数据库系统的任务所需的预备知识。<br>    这就引入了本章的一些考查性目标，包括单实例体系结构、内存结构、进程结构和存储结构。</p>
<h3 id="1-1-Oracle产品系列"><a href="#1-1-Oracle产品系列" class="headerlink" title="1.1 Oracle产品系列"></a>1.1 Oracle产品系列</h3><p>不对产品进行上下文研究的Oracle指南是不完整的。</p>
<p>本节讨论Oracle公司当前提供的三个核心产品系列。<br>    Oracle技术的最终用户通常使用一部分已群集到服务器、开发工具或者应用程序产品系列中的可用产品。</p>
<h4 id="1-1-1-Oracle服务器系列"><a href="#1-1-1-Oracle服务器系列" class="headerlink" title="1.1.1 Oracle服务器系列"></a>1.1.1 Oracle服务器系列</h4><p>服务器技术系列中三个主要的产品组合是数据库服务器、应用服务器和企业管理器。这些产品组合共同为Oracle的网格计算体系提供组件。<br>    网格底层的概念就是”虚拟化”：最终用户虽然请求服务（一般通过基于Web的应用程序），但他们不了解，也不必了解服务从何而来。<br>    简单地来说，数据服务器用于存储数据，应用服务器提供最终用户请求的服务的基础设施。<br>    企业管理器产品给管理员提供管理界面。<br>    提供服务器时涉及的平台或物理服务器对最终用户来说是透明的。<br>    虚拟化可以使资源得到最优利用，以对最终用户透明的方式将服务器提供给最需要的区域。</p>
]]></content>
      <categories>
        <category>OCP/OCA认证考试</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>baidu_verify_oveVSDl85R</title>
    <url>/2020/01/29/baidu_verify_oveVSDl85R/</url>
    <content><![CDATA[oveVSDl85R]]></content>
  </entry>
  <entry>
    <title>motto</title>
    <url>/2020/01/29/%E5%8B%BF%E5%BF%98%E5%88%9D%E5%BF%83%E6%96%B9%E5%BE%97%E5%A7%8B%E7%BB%88/</url>
    <content><![CDATA[<center><b>勿忘初心，方得始终。</b></center>
<br><br>
<br><br>

<a id="more"></a>
]]></content>
      <categories>
        <category>about</category>
      </categories>
      <tags>
        <tag>motto</tag>
      </tags>
  </entry>
</search>
